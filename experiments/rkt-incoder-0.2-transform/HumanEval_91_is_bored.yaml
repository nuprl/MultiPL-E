name: HumanEval_91_is_bored
language: rkt
prompt: "#lang racket\n\n;; You'll be given a string of words, and your task is to\
  \ count the number\n;; of boredoms. A boredom is a sentence that starts with the\
  \ word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
  ;; >>> (is_bored \"Hello world\")\n;; 0\n;; >>> (is_bored \"The sky is blue. The\
  \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n\
  \    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
  \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n \
  \   (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
  \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
  \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n   \
    \ [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal?\
    \ (first S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n \
    \   [(equal? (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n    [(equal?\
    \ (first S) \".\") 0]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n \
    \   [(equal? (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n    [(equal?\
    \ (first S) \".\") 0]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n \
    \   [(equal? (first S) \"I\") 0]\n    [(equal? (first S) \"!\") 0]\n    [(equal?\
    \ (first S) \".\") 0]\n    [(equal? (first S) \"?\") 0]\n    [else 1]))\n", " \
    \ (cond\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n\
    \    [(equal? (first S) \".\") 0]\n    [else (+ 1 (is_bored (rest S)))]))\n",
  "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored\
    \ (rest S)))]))\n", "  (cond [(string=? (substring S 0 3) \"I\") 1]\n        [else\
    \ 0]))\n", "  (cond\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first S)\
    \ \"!\") 0]\n    [(equal? (first S) \".\") 0]\n    [else (+ 1 (is_bored (rest\
    \ S)))]))\n", "  (cond\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first\
    \ S) \"!\") 1]\n    [(equal? (first S) \".\") 1]\n    [(equal? (first S) \"?\"\
    ) 1]\n    [else 0]))\n", "  (cond [(empty? S) 0]\n        [(equal? (first S) \"\
    I\") 1]\n        [else 0]))\n", "  (let ((bored 0))\n    (cond\n      [(equal?\
    \ (first S) \"I\") (set! bored 1)]\n      [(equal? (first S) \".\") (set! bored\
    \ 2)]\n      [(equal? (first S) \"?\") (set! bored 3)]\n      [(equal? (first\
    \ S) \"!\") (set! bored 4)]\n      [else (set! bored 0)]\n      )))\n", "  (cond\n\
    \    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored\
    \ (rest S)))]))\n", "  (let ((bored (count-bored S)))\n    (if (= bored 0)\n \
    \       #t\n        #f)))\n", "  (cond\n    [(equal? (first S) \"I\") 1]\n   \
    \ [(equal? (first S) \"!\") 0]\n    [(equal? (first S) \".\") 0]\n    [(equal?\
    \ (first S) \"?\") 0]\n    [else 0]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal?\
    \ (first S) \"I\") (+ 1 (is_bored (rest S)))]\n    [else (is_bored (rest S))]))\n",
  "  (cond [(empty? S) 0]\n        [(equal? (first S) \"I\") 1]\n        [else 0]))\n",
  "  (cond\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n \
    \   [(equal? (first S) \".\") 0]\n    [else (+ 1 (is_bored (rest S)))]))\n", " \
    \ (let ((bored 0))\n    (cond\n      [(string=? (substring S 0 3) \"I\") (set!\
    \ bored 1)]\n      [(string=? (substring S 0 4) \"I\") (set! bored 2)]\n     \
    \ [(string=? (substring S 0 5) \"I\") (set! bored 3)]\n      [(string=? (substring\
    \ S 0 6) \"I\") (set! bored 4)]\n      [(string=? (substring S 0 7) \"I\") (set!\
    \ bored 5)]\n      [(string=? (substring S 0 8) \"I\") (set! bored 6)]\n     \
    \ [(string=? (substring S 0 9) \"I\") (set! bored 7)]\n      [(string=? (substring\
    \ S 0 10) \"I\") (set! bored 8)]\n      [(string=? (substring S 0 11) \"I\") (set!\
    \ bored 9)]\n      [(string=? (substring S 0 12) \"I\") (set! bored 10)]\n   \
    \   [(string=? (substring S 0 13) \"I\") (set! bored 11)]\n      [(string=? (substring\
    \ S 0 14) \"I\") (set! bored 12)]\n      [(string=? (substring S 0 15) \"I\")\
    \ (set! bored 13)]\n      [(string=? (substring S 0 16) \"I\") (set! bored 14)]\n\
    \      [(string=? (substring S 0 17) \"I\") (set! bored 15)]\n      [(string=?\
    \ (substring S 0 18) \"I\") (set! bored 16)]\n      [(string=? (substring S 0\
    \ 19) \"I\") (set! bored 17)]\n      [(string=? (substring S 0 20) \"I\") (set!\
    \ bored 18)]\n      [(string=? (substring S 0 21) \"I\") (set! bored 19)]\n  \
    \    [(string=? (substring S 0 22) \"I\") (set! bored 20)]\n      [(string=? (substring\
    \ S 0 23) \"I\") (set! bored 21)]\n      [(string=? (substring S 0 24) \"I\")\
    \ (set! bored 22)]\n      [(string=? (substring S 0 25) \"I\") (set! bored 23)]\n\
    \      [(string=? (substring S 0 26) \"I\") (set! bored 24)]\n", "  (cond\n  \
    \  [(equal? (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 1]\n    [(equal?\
    \ (first S) \".\") 1]\n    [(equal? (first S) \"?\") 1]\n    [else 0]))\n", " \
    \ (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1\
    \ (is_bored (rest S)))]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first\
    \ S) \"I\") (+ 1 (is_bored (rest S)))]\n    [else (is_bored (rest S))]))\n", " \
    \ (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first\
    \ S) \"!\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(equal?\
    \ (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 1]\n    [(equal? (first S)\
    \ \".\") 1]\n    [else 0]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first\
    \ S) \"I\") (+ 1 (is_bored (rest S)))]\n    [else (is_bored (rest S))]))\n", " \
    \ (let loop ((S S) (count 0))\n    (cond\n      [(empty? S) count]\n      [(equal?\
    \ (first S) \"I\") (loop (rest S) (add1 count))]\n      [else (loop (rest S) count)])))\n",
  "  (let ((bored 0))\n    (cond\n      [(string=? (substring S 0 1) \"I\") (set!\
    \ bored 1)]\n      [(string=? (substring S 0 2) \"?\") (set! bored 1)]\n     \
    \ [(string=? (substring S 0 3) \"!\") (set! bored 1)]\n      [(string=? (substring\
    \ S 0 4) \".\") (set! bored 1)]\n      [(string=? (substring S 0 5) \"!\") (set!\
    \ bored 1)]\n      [(string=? (substring S 0 6) \".\") (set! bored 1)]\n     \
    \ [(string=? (substring S 0 7) \".\") (set! bored 1)]\n      [(string=? (substring\
    \ S 0 8) \".\") (set! bored 1)]\n      [(string=? (substring S 0 9) \"!\") (set!\
    \ bored 1)]\n      [(string=? (substring S 0 10) \".\") (set! bored 1)]\n    \
    \  [(string=? (substring S 0 11) \".\") (set! bored 1)]\n      [(string=? (substring\
    \ S 0 12) \".\") (set! bored 1)]\n      [(string=? (substring S 0 13) \".\") (set!\
    \ bored 1)]\n      [(string=? (substring S 0 14) \".\") (set! bored 1)]\n    \
    \  [(string=? (substring S 0 15) \".\") (set! bored 1)]\n      [(string=? (substring\
    \ S 0 16) \".\") (set! bored 1)]\n      [(string=? (substring S 0 17) \".\") (set!\
    \ bored 1)]\n      [(string=? (substring S 0 18) \".\") (set! bored 1)]\n    \
    \  [(string=? (substring S 0 19) \".\") (set! bored 1)]\n      [(string=? (substring\
    \ S 0 20) \".\") (set! bored 1)]\n      [(string=? (substring S 0 21) \".\") (set!\
    \ bored 1)]\n      [(string=? (substring S 0 22) \".\") (set! bored 1)]\n    \
    \  [(string=? (substring S 0 23) \".\") (set! bored 1)]\n      [(string=? (substring\
    \ S 0 24) \".\") (set! bored 1)]\n      [(string=? (substring S 0 25) \".\") (set!\
    \ bored 1)]\n      [(string=? (substring ", "  (cond\n    [(equal? (first S) \"\
    I\") 1]\n    [(equal? (first S) \"!\") 0]\n    [(equal? (first S) \".\") 0]\n\
    \    [else (+ 1 (is_bored (rest S)))]))\n", "  (let loop ((S S) (count 0))\n \
    \   (cond ((equal? (first S) \"I\") (+ 1 (loop (rest S) (add1 count))))\n    \
    \      ((equal? (first S) \".\") (loop (rest S) count))\n          ((equal? (first\
    \ S) \"?\") (loop (rest S) count))\n          ((equal? (first S) \"!\") (loop\
    \ (rest S) count))\n          (else (loop (rest S) (add1 count))))))\n", "  (cond\n\
    \    [(equal? (first S) \"I\") 0]\n    [(equal? (first S) \".\") 0]\n    [(equal?\
    \ (first S) \"?\") 0]\n    [(equal? (first S) \"!\") 0]\n    [else 1]))\n", " \
    \ (cond [(string=? (substring S 0 1) \"I\") 1]\n        [else 0]))\n", "  (cond\n\
    \    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else 0]))\n", "  (let\
    \ ((bored 0))\n    (loop for c across S\n          for char 'I\n          when\
    \ (char=? c char)\n          do (set! bored (+ bored 1))\n          finally (return\
    \ bored))))\n", "  (let ((bored 0))\n    (cond\n      [(string-match \"^I\" S)\
    \ (set! bored 1)]\n      [(string-match \"[.!?]\" S) (set! bored 1)]\n      [(string-match\
    \ \"[.!?]\" S) (set! bored 1)]\n      [(string-match \"[.!?]\" S) (set! bored\
    \ 1)]\n      [(string-match \"[.!?]\" S) (set! bored 1)]\n      [(string-match\
    \ \"[.!?]\" S) (set! bored 1)]\n      [(string-match \"[.!?]\" S) (set! bored\
    \ 1)]\n      [(string-match \"[.!?]\" S) (set! bored 1)]\n      [(string-match\
    \ \"[.!?]\" S) (set! bored 1)]\n      [(string-match \"[.!?]\" S) (set! bored\
    \ 1)]\n      [(string-match \"[.!?]\" S) (set! bored 1)]\n      [(string-match\
    \ \"[.!?]\" S) (set! bored 1)]\n      [(string-match \"[.!?]\" S) (set! bored\
    \ 1)]\n      [(string-match \"[.!?]\" S) (set! bored 1)]\n      [(string-match\
    \ \"[.!?]\" S) (set! bored 1)]\n      [(string-match \"[.!?]\" S) (set! bored\
    \ 1)]\n      [(string-match \"[.!?]\" S) (set! bored 1)]\n      [(string-match\
    \ \"[.!?]\" S) (set! bored 1)]\n      [(string-match \"[.!?]\" S) (set! bored\
    \ 1)]\n      [(string-match \"[.!?]\" S) (set! bored 1)]\n      [(string-match\
    \ \"[.!?]\" S) (set! bored 1)]\n      [(string-match \"[.!?]\" S) (set! bored\
    \ 1)]\n      [(string-match \"[.!?]\" S) (set! bored 1)]\n      [(string-match\
    \ \"[.!?]\" S) (set! bored 1)]\n      [(string-match \"[.!?]\" S) (set! bored\
    \ 1)]\n      [(string-match \"[.!?]\" S) (set! bored 1)]\n      [(string-match\
    \ \"[.!?]\" S) (set! bored 1)]\n      [(string-match \"[.!?]\" S) (set! bored\
    \ 1)]\n", "  (cond\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first S) \"\
    !\") 0]\n    [(equal? (first S) \".\") 0]\n    [else (+ 1 (is_bored (rest S)))]))\n",
  "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored\
    \ (rest S)))]))\n", "  (cond\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first\
    \ S) \"!\") 0]\n    [(equal? (first S) \".\") 0]\n    [(equal? (first S) \"?\"\
    ) 0]\n    [else 0]))\n", "  (cond\n    [(equal? (first S) \"I\") 1]\n    [(equal?\
    \ (first S) \"!\") 0]\n    [(equal? (first S) \".\") 0]\n    [else 0]))\n", " \
    \ (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1\
    \ (is_bored (rest S)))]))\n", "  (cond\n    [(equal? (first S) \"I\") 1]\n   \
    \ [(equal? (first S) \"!\") 0]\n    [(equal? (first S) \".\") 0]\n    [else (+\
    \ 1 (is_bored (rest S)))]))\n", "  (cond [(string=? (substring S 0 3) \"I\") 1]\n\
    \        [else 0]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"\
    I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond [(string-match \"\
    ^I\" S) 0]\n        [else 1]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal?\
    \ (first S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n \
    \   [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored\
    \ (rest S)))]))\n", "  (cond [(string=? (substring S 0 3) \"I\") 1]\n        [else\
    \ 0]))\n", "  (let ((boredom-count 0))\n    (cond\n      [(string=? (first S)\
    \ \"I\") (set! boredom-count (+ boredom-count 1))]\n      [(string=? (first S)\
    \ \".\") (set! boredom-count (+ boredom-count 1))]\n      [(string=? (first S)\
    \ \"?\") (set! boredom-count (+ boredom-count 1))]\n      [(string=? (first S)\
    \ \"!\") (set! boredom-count (+ boredom-count 1))]\n      [else (set! boredom-count\
    \ (+ boredom-count 1))]\n      )))\n", "  (cond\n    [(equal? (first S) \"I\"\
    ) 1]\n    [(equal? (first S) \"!\") 0]\n    [(equal? (first S) \".\") 0]\n   \
    \ [(equal? (first S) \"?\") 0]\n    [else 0]))\n", "  (cond\n    [(equal? (first\
    \ S) \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n    [(equal? (first S) \".\"\
    ) 0]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(empty? S) 0]\n\
    \    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n",
  "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first\
    \ S) \"!\") 1]\n    [(equal? (first S) \".\") 1]\n    [(equal? (first S) \"?\"\
    ) 1]\n    [else 0]))\n", "  (cond [(empty? S) 0]\n        [(equal? (first S) \"\
    I\") 1]\n        [else 0]))\n", "  (cond\n    [(equal? (first S) \"I\") 1]\n \
    \   [(equal? (first S) \"!\") 0]\n    [(equal? (first S) \".\") 0]\n    [else\
    \ (+ 1 (is_bored (rest S)))]))\n", "  (cond [(empty? S) 0]\n        [(equal? (first\
    \ S) \"I\") 1]\n        [else 0]))\n", "  (cond\n    [(equal? (first S) \"I\"\
    ) 1]\n    [(equal? (first S) \"!\") 0]\n    [(equal? (first S) \".\") 0]\n   \
    \ [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(equal? (first S) \"I\"\
    ) 1]\n    [(equal? (first S) \"!\") 1]\n    [(equal? (first S) \".\") 1]\n   \
    \ [else 0]))\n", "  (let ((bored 0))\n    (cond\n      [(string-match \"^I\" S)\
    \ (set! bored 1)]\n      [(string-match \"^\\.\" S) (set! bored 2)]\n      [(string-match\
    \ \"^!\" S) (set! bored 3)]\n      [(string-match \"^?\" S) (set! bored 4)]\n\
    \      [else (set! bored 0)]\n      )))\n", "  (let ((bored-count 0))\n    (loop\
    \ for char = (char-code (first S)) until (char-code (char-code (char-code (char-code\
    \ (char-code (char-code (char-code (char-code (char-code (char-code (char-code\
    \ (char-code (char-code (char-code (char-code (char-code (char-code (char-code\
    \ (char-code (char-code (char-code (char-code (char-code (char-code (char-code\
    \ (char-code (char-code (char-code (char-code (char-code (char-code (char-code\
    \ (char-code (char-code (char-code (char-code (char-code (char-code (char-code\
    \ (char-code (char-code (char-code (char-code (char-code (char-code (char-code\
    \ (char-code (char-code (char-code (char-code (char-code (char-code (char-code\
    \ (char-code (char-code (char-code (char-code (char-code (char-code (char-code\
    \ (char-code (char-code (char-code (char-code (char-code (char-code (char-code\
    \ (char-code (char-code (char-code (char-code (char-code (char-code (char-code\
    \ (char-code (char-code (char-code (char-code (char-code (char-code (char-code\
    \ (char-code (char-code (char-code (char-code (char-code (char-code (char-code\
    \ (char-code (char-code (char-code (char-code (char-code (char-code (char-code\
    \ (char-code (char-code (char-code (char-code (char-code (char-code (char-code\
    \ (char-code (char-code (char-code (char-code (char-code (char-code (char-code\
    \ (char-code (char-code (char-code (char-code (char-code (char-code (char-code\
    \ (char-code (char-code (char-code (char-code (char-code (char-code (char-code\
    \ (char-code (char-code (char-code (char-code (char-code (char-code (char-code\
    \ (char-code (char-code (char-code (char-code (char-code (char-code (char-code\
    \ (char-code (char-code (char-code (char-code (char-code (char-code (char-code\
    \ (char-code (char-code (char-code (char-code (char-code (char-code (char-code\
    \ (char-code (char-code (char-code (char-code (char-code (char-code (char-code\
    \ (char-code (char-code (char-code (char-code (char-code ", "  (let ((boredom-count\
    \ 0))\n    (cond\n      [(string-match \"^I\" S) (set! boredom-count 1)]\n   \
    \   [(string-match \"^\\.\" S) (set! boredom-count (+ boredom-count 1))]\n   \
    \   [(string-match \"^!\" S) (set! boredom-count (+ boredom-count 1))]\n     \
    \ [(string-match \"^?\" S) (set! boredom-count (+ boredom-count 1))]\n      [(string-match\
    \ \"\\.$\" S) (set! boredom-count (+ boredom-count 1))]\n      [(string-match\
    \ \"!$\" S) (set! boredom-count (+ boredom-count 1))]\n      [(string-match \"\
    ?$\" S) (set! boredom-count (+ boredom-count 1))]\n      [(string-match \"^$\"\
    \ S) (set! boredom-count (+ boredom-count 1))]\n      [(string-match \"^\\.$\"\
    \ S) (set! boredom-count (+ boredom-count 1))]\n      [(string-match \"^!$\" S)\
    \ (set! boredom-count (+ boredom-count 1))]\n      [(string-match \"?$\" S) (set!\
    \ boredom-count (+ boredom-count 1))]\n      [(string-match \"!$\" S) (set! boredom-count\
    \ (+ boredom-count 1))]\n      [(string-match \"\\.$\" S) (set! boredom-count\
    \ (+ boredom-count 1))]\n      [(string-match \"!$\" S) (set! boredom-count (+\
    \ boredom-count 1))]\n      [(string-match \"?$\" S) (set! boredom-count (+ boredom-count\
    \ 1))]\n      [(string-match \"^$\" S) (set! boredom-count (+ boredom-count 1))]\n\
    \      [(string-match \"^\\.$\" S) (set! boredom-count (+ boredom-count 1))]\n\
    \      [(string-match \"^!$\" S) (set! boredom-count (+ boredom-count 1))]\n \
    \     [(string-match \"?$\" S) (set! boredom-count ", "  (let ((bored 0))\n  \
    \  (loop for c across S\n          for i from 0\n          for j from 0\n    \
    \      while (char=? c #\\. or char=? c #\\? or char=? c #\\!)\n          collect\
    \ (if (char=? c #\\I)\n                      (+ 1 (+ bored 1))\n             \
    \         bored))\n    bored))\n", "  (let ((bored-count 0))\n    (loop for i\
    \ from 0 to (length S) do\n          (cond\n            ((char=? (substring S\
    \ i i) 'I) (incf bored-count))\n            (else (return bored-count))))))\n",
  "  (cond\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n \
    \   [(equal? (first S) \".\") 0]\n    [else (+ 1 (is_bored (rest S)))]))\n", " \
    \ (let ((bored 0))\n    (cond\n      [(string-match \"^I\" S) (set! bored 1)]\n\
    \      [(string-match \"^\\.\" S) (set! bored 1)]\n      [(string-match \"^!\"\
    \ S) (set! bored 1)]\n      [(string-match \"^?\" S) (set! bored 1)]\n      [(string-match\
    \ \"\\.$\" S) (set! bored 1)]\n      [(string-match \"!$\" S) (set! bored 1)]\n\
    \      [(string-match \"?$\" S) (set! bored 1)]\n      [(string-match \"^$\" S)\
    \ (set! bored 1)]\n      [(string-match \"^\\.\" S) (set! bored 1)]\n      [(string-match\
    \ \"^!\" S) (set! bored 1)]\n      [(string-match \"^?\" S) (set! bored 1)]\n\
    \      [(string-match \"\\.$\" S) (set! bored 1)]\n      [(string-match \"!$\"\
    \ S) (set! bored 1)]\n      [(string-match \"?$\" S) (set! bored 1)]\n      [(string-match\
    \ \"^$\" S) (set! bored 1)]\n      [(string-match \"^\\.\" S) (set! bored 1)]\n\
    \      [(string-match \"^!\" S) (set! bored 1)]\n      [(string-match \"^?\" S)\
    \ (set! bored 1)]\n      [(string-match \"\\.$\" S) (set! bored 1)]\n      [(string-match\
    \ \"!$\" S) (set! bored 1)]\n      [(string-match \"?$\" S) (set! bored 1)]\n\
    \      [(string-match \"^$\" S) (set! bored 1)]\n      [(string-match \"^\\.\"\
    \ S) (set! bored 1)]\n      [(string-match \"^!\" S) (set! bored 1)]\n      [(string-match\
    \ \"^?\" S) (set! bored 1)]\n      [(string-match \"\\.$\" S) (set! bored 1)]\n\
    \      [(string-match \"!$\" S) (set! bored 1)]\n      [(string-match \"?$\" S)\
    \ (set! bored 1)]\n      [(string-match \"^$\" S) (set! bored 1)]\n      [(string-match\
    \ \"^\\.\" S) (set! bored 1)]\n      [(string-match \"^!\" S) (set! bored 1)]\n\
    \      [(string-match \"^", "  (cond\n    [(empty? S) 0]\n    [(equal? (first\
    \ S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(equal?\
    \ (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 1]\n    [(equal? (first S)\
    \ \".\") 1]\n    [(equal? (first S) \"?\") 1]\n    [else 0]))\n", "  (cond [(empty?\
    \ S) 0]\n        [(equal? (first S) \"I\") 1]\n        [else 0]))\n", "  (cond\n\
    \    [(equal? (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n    [(equal?\
    \ (first S) \".\") 0]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (let ((bored\
    \ 0))\n    (loop for c across S\n          for i from 0\n          while (cat?\
    \ c)\n          collect (if (string=? (substring c 0 i) \"I\")\n             \
    \        (+ bored 1)\n                     (+ bored 0)))))\n", "  (cond [(string=?\
    \ (substring S 0 3) \"I\") 1]\n        [else 0]))\n", "  (cond [(string=? (substring\
    \ S 0 1) \"I\") 1]\n        [else 0]))\n", "  (let ((boredom-count 0))\n    (cond\n\
    \      [(string-match \"^I\" S) (set! boredom-count (+ boredom-count 1))]\n  \
    \    [(string-match \"^\\.\" S) (set! boredom-count (+ boredom-count 1))]\n  \
    \    [(string-match \"^!\" S) (set! boredom-count (+ boredom-count 1))]\n    \
    \  [(string-match \"^?\" S) (set! boredom-count (+ boredom-count 1))]\n      [else\
    \ (set! boredom-count (+ boredom-count 1))]\n    )\n    boredom-count))\n", " \
    \ (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1\
    \ (is_bored (rest S)))]))\n", "  (cond [(empty? S) 0]\n        [(equal? (first\
    \ S) \"I\") 1]\n        [else 0]))\n", "  (cond [(string-match \"^I\" S) 0]\n\
    \        [else 1]))\n", "  (cond\n    [(equal? (first S) \"I\") 1]\n    [(equal?\
    \ (first S) \"!\") 0]\n    [(equal? (first S) \".\") 0]\n    [else (+ 1 (is_bored\
    \ (rest S)))]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\"\
    ) 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond [(empty? S) 0]\n   \
    \     [(equal? (first S) \"I\") 1]\n        [else (+ 1 (is_bored (rest S)))]))\n",
  "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored\
    \ (rest S)))]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\"\
    ) (+ 1 (is_bored (rest S)))]\n    [else (is_bored (rest S))]))\n", "  (let ((boredom-count\
    \ 0))\n    (cond\n      [(equal? (first S) \"I\") (set! boredom-count (+ boredom-count\
    \ 1))]\n      [(equal? (rest S) \".\") (set! boredom-count (+ boredom-count 1))]\n\
    \      [(equal? (rest S) \"?\") (set! boredom-count (+ boredom-count 1))]\n  \
    \    [(equal? (rest S) \"!\") (set! boredom-count (+ boredom-count 1))]\n    \
    \  [else (set! boredom-count (+ boredom-count 1))]\n      )))\n", "  (cond\n \
    \   [(equal? (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n    [(equal?\
    \ (first S) \".\") 0]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n \
    \   [(equal? (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n    [(equal?\
    \ (first S) \".\") 0]\n    [(equal? (first S) \"?\") 0]\n    [else 0]))\n", " \
    \ (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1\
    \ (is_bored (rest S)))]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first\
    \ S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond [(empty? S)\
    \ #f]\n        [(equal? (first S) \"I\") #t]\n        [(equal? (first S) \".\"\
    ) #t]\n        [(equal? (first S) \"?\") #t]\n        [(equal? (first S) \"!\"\
    ) #t]\n        [else (is_bored (rest S))]))\n", "  (cond\n    [(equal? (first\
    \ S) \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n    [(equal? (first S) \".\"\
    ) 0]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(equal? (first\
    \ S) \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n    [(equal? (first S) \".\"\
    ) 0]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(equal? (first\
    \ S) \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n    [(equal? (first S) \".\"\
    ) 0]\n    [(equal? (first S) \"?\") 0]\n    [else 0]))\n", "  (let ((bored 0))\n\
    \    (cond\n      [(string-match \"^I\" S) (set! bored 1)]\n      [(string-match\
    \ \"^.\" S) (set! bored 1)]\n      [(string-match \"^!\" S) (set! bored 1)]\n\
    \      [(string-match \"^.?\" S) (set! bored 1)]\n      [(string-match \"^.!\"\
    \ S) (set! bored 1)]\n      [(string-match \"^.!?\" S) (set! bored 1)]\n     \
    \ [(string-match \"^.!?!\" S) (set! bored 1)]\n      [(string-match \"^.!?!?\"\
    \ S) (set! bored 1)]\n      [(string-match \"^.!?!?!\" S) (set! bored 1)]\n  \
    \    [(string-match \"^.!?!?!?\" S) (set! bored 1)]\n      [(string-match \"^.!?!?!?!\"\
    \ S) (set! bored 1)]\n      [(string-match \"^.!?!?!?!?\" S) (set! bored 1)]\n\
    \      [(string-match \"^.!?!?!?!?!\" S) (set! bored 1)]\n      [(string-match\
    \ \"^.!?!?!?!?!?\" S) (set! bored 1)]\n      [(string-match \"^.!?!?!?!?!?!\"\
    \ S) (set! bored 1)]\n      [(string-match \"^.!?!?!?!?!?!?\" S) (set! bored 1)]\n\
    \      [(string-match \"^.!?!?!?!?!?!?!\" S) (set! bored 1)]\n      [(string-match\
    \ \"^.!?!?!?!?!?!?!?\" S) (set! bored 1)]\n      [(string-match \"^.!?!?!?!?!?!?!?!\"\
    \ S) (set! bored 1)]\n      [(string-match \"^.!?!?!?!?!?!?!?!?\" S) (set! bored\
    \ 1)]\n      [(string-match \"^.!?!?!?!?!?!?!?!?!\" S) (set! bored 1)]\n     \
    \ [(string-match \"^.!?!?!", "  (cond\n    [(equal? (first S) \"I\") 1]\n    [(equal?\
    \ (first S) \"!\") 0]\n    [(equal? (first S) \".\") 0]\n    [else (+ 1 (is_bored\
    \ (rest S)))]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\"\
    ) 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(empty? S) 0]\n\
    \    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n",
  "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored\
    \ (rest S)))]))\n", "  (let ((bored 0))\n    (cond\n      [(string-match \"^I\"\
    \ S) (set! bored 1)]\n      [(string-match \"^\\.\" S) (set! bored 2)]\n     \
    \ [(string-match \"^!\" S) (set! bored 3)]\n      [(string-match \"^?\" S) (set!\
    \ bored 4)]\n      [(string-match \"\\.$\" S) (set! bored 5)]\n      [(string-match\
    \ \"!$\" S) (set! bored 6)]\n      [(string-match \"?$\" S) (set! bored 7)]\n\
    \      [(string-match \"^$\" S) (set! bored 8)]\n      [(string-match \"\\.\\\
    .\" S) (set! bored 9)]\n      [(string-match \"!\\.\" S) (set! bored 10)]\n  \
    \    [(string-match \"?\\.\" S) (set! bored 11)]\n      [(string-match \"\\.!\"\
    \ S) (set! bored 12)]\n      [(string-match \"!\\.!\" S) (set! bored 13)]\n  \
    \    [(string-match \"?\\.!\" S) (set! bored 14)]\n      [(string-match \"\\.?\"\
    \ S) (set! bored 15)]\n      [(string-match \"!\\.?\" S) (set! bored 16)]\n  \
    \    [(string-match \"?\\.?\" S) (set! bored 17)]\n      [(string-match \"\\.!?\"\
    \ S) (set! bored 18)]\n      [(string-match \"!\\.!?\" S) (set! bored 19)]\n \
    \     [(string-match \"?\\.!?\" S) (set! bored 20)]\n      [(string-match \"\\\
    .\\.?\" S) (set! bored 21)]\n      [(string-match \"!\\.\\.\" S) (set! bored 22)]\n\
    \      [(string-match \"?\\.\\.\" S) (set! bored 23)]\n      [(string-match \"\
    \\.!\\.\" S) (set! bored 24)]\n      [(string-match \"!\\.!\\.\" S) (set! bored\
    \ 25)]\n      [(string-match \"?\\.!\\.\" S) (set! bored 26)]\n      [(string-match\
    \ \"\\.?\\.\" S) (set! bored 27)]\n      [(string-match \"!\\.?\\.\" S) (set!\
    \ bored 28)]\n      [(string-match \"?\\.?\\.", "  (let ((bored 0))\n    (cond\n\
    \      [(string-match \"^I\" S) (set! bored 1)]\n      [(string-match \"[.?!]\"\
    \ S) (set! bored 2)]\n      [(string-match \"[.?!]\" S) (set! bored 2)]\n    \
    \  [(string-match \"[.?!]\" S) (set! bored 2)]\n      [(string-match \"[.?!]\"\
    \ S) (set! bored 2)]\n      [(string-match \"[.?!]\" S) (set! bored 2)]\n    \
    \  [(string-match \"[.?!]\" S) (set! bored 2)]\n      [(string-match \"[.?!]\"\
    \ S) (set! bored 2)]\n      [(string-match \"[.?!]\" S) (set! bored 2)]\n    \
    \  [(string-match \"[.?!]\" S) (set! bored 2)]\n      [(string-match \"[.?!]\"\
    \ S) (set! bored 2)]\n      [(string-match \"[.?!]\" S) (set! bored 2)]\n    \
    \  [(string-match \"[.?!]\" S) (set! bored 2)]\n      [(string-match \"[.?!]\"\
    \ S) (set! bored 2)]\n      [(string-match \"[.?!]\" S) (set! bored 2)]\n    \
    \  [(string-match \"[.?!]\" S) (set! bored 2)]\n      [(string-match \"[.?!]\"\
    \ S) (set! bored 2)]\n      [(string-match \"[.?!]\" S) (set! bored 2)]\n    \
    \  [(string-match \"[.?!]\" S) (set! bored 2)]\n      [(string-match \"[.?!]\"\
    \ S) (set! bored 2)]\n      [(string-match \"[.?!]\" S) (set! bored 2)]\n    \
    \  [(string-match \"[.?!]\" S) (set! bored 2)]\n      [(string-match \"[.?!]\"\
    \ S) (set! bored 2)]\n      [(string-match \"[.?!]\" S) (set! bored 2)]\n    \
    \  [(string-match \"[.?!]\" S) (set! bored 2)]\n      [(string-match \"[.?!]\"\
    \ S) (set! bored 2)]\n      [(string-match \"[.?!]\" S) (set! bored 2)]\n    \
    \  [(string-match \"[.?!]\" S) (set! bored 2)]\n", "  (cond\n    [(empty? S) 0]\n\
    \    [(equal? (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 1]\n    [(equal?\
    \ (first S) \".\") 1]\n    [(equal? (first S) \"?\") 1]\n    [else 0]))\n", " \
    \ (cond [(empty? S) 0]\n        [(equal? (first S) \"I\") 1]\n        [(equal?\
    \ (first S) \"!\") 1]\n        [else 0]))\n", "  (cond\n    [(empty? S) 0]\n \
    \   [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", " \
    \ (cond\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n\
    \    [(equal? (first S) \".\") 0]\n    [(equal? (first S) \"?\") 0]\n    [else\
    \ 0]))\n", "  (cond [(string=? (first S) \"I\") 1]\n        [else 0]))\n", " \
    \ (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") (+ 1 (is_bored (rest\
    \ S)))]\n    [else (is_bored (rest S))]))\n", "  (cond [(empty? S) 0]\n      \
    \  [(equal? (first S) \"I\") 1]\n        [else 0]))\n", "  (let ((bored (count-boredoms\
    \ S)))\n    (if (= bored 0)\n        0\n        1)))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(equal? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n    [else 0]))\n",
  "  (cond [(string=? (substring S 0 3) \"I\") 1]\n        [else 0]))\n", "  (cond\n\
    \    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first S)\
    \ \"!\") 1]\n    [(equal? (first S) \".\") 1]\n    [(equal? (first S) \"?\") 1]\n\
    \    [else 0]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\"\
    ) 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(empty? S) 0]\n\
    \    [(equal? (first S) \"I\") 1]\n    [(equal? (first S) \"!\") (+ 1 (is_bored\
    \ (rest S)))]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (let ((bored 0))\n\
    \    (loop for c across S\n          for c2 across c\n          when (char=? (char-code\
    \ c2) #\\I) (incf bored)\n          collect c)))\n", "  (cond\n    [(empty? S)\
    \ 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n",
  "  (cond [(empty? S) 0]\n        [(equal? (first S) \"I\") 1]\n        [else 0]))\n",
  "  (let ((bored 0))\n    (cond\n      [(equal? (first S) \"I\") (set! bored 1)]\n\
    \      [(equal? (first S) \".\") (set! bored 1)]\n      [(equal? (first S) \"\
    ?\") (set! bored 1)]\n      [(equal? (first S) \"!\") (set! bored 1)]\n      [else\
    \ (set! bored 0)]\n      )))\n", "  (cond [(empty? S) 0]\n        [(equal? (first\
    \ S) \"I\") 1]\n        [else 0]))\n", "  (cond [(empty? S) #f]\n        [(equal?\
    \ (first S) \"I\") #t]\n        [(equal? (first S) \".\") #t]\n        [(equal?\
    \ (first S) \"?\") #t]\n        [(equal? (first S) \"!\") #t]\n        [else (is_bored\
    \ (rest S))]))\n", "  (cond [(string-match \"^I\" S) 0]\n        [else 1]))\n",
  "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored\
    \ (rest S)))]))\n", "  (cond [(string=? (substring S 0 1) \"I\") 1]\n        [else\
    \ 0]))\n", "  (cond [(empty? S) 0]\n        [(equal? (first S) \"I\") 1]\n   \
    \     [else 0]))\n", "  (let ((bored 0))\n    (cond\n      [(string-match \"^I\"\
    \ S) (set! bored 1)]\n      [(string-match \"\\.\" S) (set! bored 2)]\n      [(string-match\
    \ \"!\" S) (set! bored 3)]\n      [(string-match \"?\" S) (set! bored 4)]\n  \
    \    [else (set! bored 0)]\n      )))\n", "  (let ((bored 0))\n    (cond\n   \
    \   [(string-match \"^I\" S) (set! bored 1)]\n      [(string-match \"^\\.\" S)\
    \ (set! bored 1)]\n      [(string-match \"^!\" S) (set! bored 1)]\n      [(string-match\
    \ \"^?\" S) (set! bored 1)]\n      [else (set! bored 0)]\n      )))\n", "  (cond\n\
    \    [(equal? (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n    [(equal?\
    \ (first S) \".\") 0]\n    [(equal? (first S) \"?\") 0]\n    [else 0]))\n", " \
    \ (cond [(string=? (substring S 0 1) \"I\") 1]\n        [else 0]))\n", "  (cond\n\
    \    [(equal? (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n    [(equal?\
    \ (first S) \".\") 0]\n    [(equal? (first S) \"?\") 0]\n    [else 0]))\n", " \
    \ (cond [(string=? (substring S 0 3) \"I\") 1]\n        [else 0]))\n", "  (cond\n\
    \    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else 0]))\n", "  (cond\n\
    \    [(equal? (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n    [(equal?\
    \ (first S) \".\") 0]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n \
    \   [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first S) \"\
    !\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(equal? (first\
    \ S) \"I\") 0]\n    [(equal? (first S) \"!\") 0]\n    [(equal? (first S) \".\"\
    ) 0]\n    [(equal? (first S) \"?\") 0]\n    [else 1]))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n",
  "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored\
    \ (rest S)))]))\n", "  (cond [(empty? S) 0]\n        [(equal? (first S) \"I\"\
    ) 1]\n        [else 0]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first\
    \ S) \"I\") (+ 1 (is_bored (rest S)))]\n    [else (is_bored (rest S))]))\n", " \
    \ (let ((bored (count (lambda (x) (equal? (car x) \"I\") S))))\n    (if (= bored\
    \ 0)\n        0\n        1)))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first\
    \ S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(equal?\
    \ (first S) \"I\") 0]\n    [(equal? (first S) \"!\") 0]\n    [(equal? (first S)\
    \ \".\") 0]\n    [(equal? (first S) \"?\") 0]\n    [else 1]))\n", "  (cond\n \
    \   [(equal? (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n    [(equal?\
    \ (first S) \".\") 0]\n    [(equal? (first S) \"?\") 0]\n    [else (+ 1 (is_bored\
    \ (rest S)))]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\"\
    ) 1]\n    [(equal? (first S) \"!\") 1]\n    [(equal? (first S) \".\") 1]\n   \
    \ [(equal? (first S) \"?\") 1]\n    [else 0]))\n", "  (cond\n    [(equal? (first\
    \ S) \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n    [(equal? (first S) \".\"\
    ) 0]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(equal? (first\
    \ S) \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n    [(equal? (first S) \".\"\
    ) 0]\n    [(equal? (first S) \"?\") 0]\n    [else (+ 1 (is_bored (rest S)))]))\n",
  "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first\
    \ S) \"!\") 1]\n    [(equal? (first S) \".\") 1]\n    [(equal? (first S) \"?\"\
    ) 1]\n    [else 0]))\n", "  (let ((bored 0))\n    (loop for c across S\n     \
    \     for x from 0 to (length S)\n          when (char=? (char-code c) ?I) do\
    \ (set! bored (+ bored 1))\n          when (char=? (char-code c) ?!) do (set!\
    \ bored (+ bored 0))\n          when (char=? (char-code c) ?.) do (set! bored\
    \ (+ bored 0))\n          when (char=? (char-code c) ??) do (set! bored (+ bored\
    \ 0))\n          when (char=? (char-code c) ?!) do (set! bored (+ bored 0))\n\
    \          when (char=? (char-code c) ?.) do (set! bored (+ bored 0))\n      \
    \    when (char=? (char-code c) ?!) do (set! bored (+ bored 0))\n          when\
    \ (char=? (char-code c) ?.) do (set! bored (+ bored 0))\n          when (char=?\
    \ (char-code c) ?!) do (set! bored (+ bored 0))\n          when (char=? (char-code\
    \ c) ?.) do (set! bored (+ bored 0))\n          when (char=? (char-code c) ?!)\
    \ do (set! bored (+ bored 0))\n          when (char=? (char-code c) ?.) do (set!\
    \ bored (+ bored 0))\n          when (char=? (char-code c) ?!) do (set! bored\
    \ (+ bored 0))\n          when (char=? (char-code c) ?.) do (set! bored (+ bored\
    \ 0))\n          when (char=? (char-code c) ?!) do (set! bored (+ bored 0))\n\
    \          when (char=? (char-code c) ?.) do (set! bored (+ bored 0))\n      \
    \    when (char=? (char-code c) ?!) do (set! bored (+ bored 0))\n          when\
    \ (char=? (char-code c) ?.) do (set! bored (+ bored 0))\n          when (char=?\
    \ (char-code c) ?!) do (set! bored (", "  (cond\n    [(equal? (first S) \"I\"\
    ) 1]\n    [(equal? (first S) \"!\") 0]\n    [(equal? (first S) \".\") 0]\n   \
    \ [(equal? (first S) \"?\") 0]\n    [else 0]))\n", "  (cond\n    [(empty? S) 0]\n\
    \    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n",
  "  (cond\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n \
    \   [(equal? (first S) \".\") 0]\n    [else 0]))\n", "  (cond\n    [(empty? S)\
    \ 0]\n    [(equal? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n    [else (is_bored\
    \ (rest S))]))\n", "  (let ((bored 0))\n    (loop for c across (string->list S)\n\
    \          for c2 across c\n          for c3 across c2\n          for c4 across\
    \ c3\n          for c5 across c4\n          for c6 across c5\n          for c7\
    \ across c6\n          for c8 across c7\n          for c9 across c8\n        \
    \  for c10 across c9\n          for c11 across c10\n          for c12 across c11\n\
    \          for c13 across c12\n          for c14 across c13\n          for c15\
    \ across c14\n          for c16 across c15\n          for c17 across c16\n   \
    \       for c18 across c17\n          for c19 across c18\n          for c20 across\
    \ c19\n          for c21 across c20\n          for c22 across c21\n          for\
    \ c23 across c22\n          for c24 across c23\n          for c25 across c24\n\
    \          for c26 across c25\n          for c27 across c26\n          for c28\
    \ across c27\n          for c29 across c28\n          for c30 across c29\n   \
    \       for c31 across c30\n          for c32 across c31\n          for c33 across\
    \ c32\n          for c34 across c33\n          for c35 across c34\n          for\
    \ c36 across c35\n          for c37 across c36\n          for c38 across c37\n\
    \          for c39 across c38\n          for c40 across c39\n          for c41\
    \ across c40\n          for c42 across c41\n          for c43 across c42\n   \
    \       for c44 across c43\n          for c45 across c44\n          for c46 across\
    \ c45\n          for c47 across c46\n          for c48 across c47\n          for\
    \ c49 across c48\n          for c50 across c49\n          for c51 across c50\n\
    \          for c52 across c51\n          for c53 across c52\n          for c54\
    \ across c53\n          for c55 across c54\n          for c56 across c55\n   \
    \       for c57 across c56\n          for c58 across c57\n          for c59 across\
    \ c58\n          for c60 across c59\n          for c61 across c60\n          for\
    \ c62 across c61\n          ", "  (cond\n    [(equal? (first S) \"I\") 1]\n  \
    \  [(equal? (first S) \"!\") 0]\n    [(equal? (first S) \".\") 0]\n    [else (+\
    \ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(equal? (first S) \"I\") 0]\n \
    \   [(equal? (first S) \"!\") 0]\n    [(equal? (first S) \".\") 0]\n    [(equal?\
    \ (first S) \"?\") 0]\n    [else 1]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal?\
    \ (first S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n \
    \   [(equal? (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n    [(equal?\
    \ (first S) \".\") 0]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n \
    \   [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored\
    \ (rest S)))]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\"\
    ) 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(empty? S) 0]\n\
    \    [(equal? (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 1]\n    [else\
    \ 0]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") (+ 1 (is_bored\
    \ (rest S)))]\n    [else (is_bored (rest S))]))\n", "  (cond\n    [(empty? S)\
    \ 0]\n    [(equal? (first S) \"I\") 1]\n    [else 0]))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n\
    \    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(empty? S) 0]\n   \
    \ [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", " \
    \ (cond\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n\
    \    [(equal? (first S) \".\") 0]\n    [else (+ 1 (is_bored (rest S)))]))\n",
  "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first\
    \ S) \"!\") 0]\n    [(equal? (first S) \".\") 0]\n    [else (+ 1 (is_bored (rest\
    \ S)))]))\n", "  (cond\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first\
    \ S) \"!\") 0]\n    [(equal? (first S) \".\") 0]\n    [else (+ 1 (is_bored (rest\
    \ S)))]))\n", "  (cond [(empty? S) 0]\n        [(equal? (first S) \"I\") 1]\n\
    \        [else 0]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"\
    I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(equal? (first\
    \ S) \"I\") 0]\n    [(equal? (first S) \"!\") 0]\n    [(equal? (first S) \".\"\
    ) 0]\n    [(equal? (first S) \"?\") 0]\n    [else 1]))\n", "  (cond\n    [(equal?\
    \ (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n    [(equal? (first S)\
    \ \".\") 0]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n",
  "  (cond\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n \
    \   [(equal? (first S) \".\") 0]\n    [(equal? (first S) \"?\") 0]\n    [else\
    \ 0]))\n", "  (cond\n    [(equal? (first S) \"I\") 0]\n    [(equal? (first S)\
    \ \"!\") 0]\n    [(equal? (first S) \".\") 0]\n    [(equal? (first S) \"?\") 0]\n\
    \    [else 1]))\n", "  (cond\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first\
    \ S) \"!\") 0]\n    [(equal? (first S) \".\") 0]\n    [else 0]))\n", "  (let ((bored-count\
    \ 0))\n    (loop for char = (char-code S)\n          while char\n          collect\
    \ (if (char-equal? char 'I)\n                      (add1 bored-count)\n      \
    \                bored-count))))\n", "  (cond\n    [(empty? S) 0]\n    [(equal?\
    \ (first S) \"I\") (+ 1 (is_bored (rest S)))]\n    [else 0]))\n", "  (let ((bored-count\
    \ 0))\n    (cond\n      [(string-match \"^I\" S) (set! bored-count (+ bored-count\
    \ 1))]\n      [(string-match \"\\.\" S) (set! bored-count (+ bored-count 1))]\n\
    \      [(string-match \"!\" S) (set! bored-count (+ bored-count 1))]\n      [(string-match\
    \ \"?\" S) (set! bored-count (+ bored-count 1))]\n      [(string-match \".\" S)\
    \ (set! bored-count (+ bored-count 1))]\n      [(string-match \"!\" S) (set! bored-count\
    \ (+ bored-count 1))]\n      [(string-match \"?\" S) (set! bored-count (+ bored-count\
    \ 1))]\n      [(string-match \"!\" S) (set! bored-count (+ bored-count 1))]\n\
    \      [(string-match \"?\" S) (set! bored-count (+ bored-count 1))]\n      [(string-match\
    \ \".\" S) (set! bored-count (+ bored-count 1))]\n      [(string-match \"!\" S)\
    \ (set! bored-count (+ bored-count 1))]\n      [(string-match \"?\" S) (set! bored-count\
    \ (+ bored-count 1))]\n      [(string-match \".\" S) (set! bored-count (+ bored-count\
    \ 1))]\n      [(string-match \"!\" S) (set! bored-count (+ bored-count 1))]\n\
    \      [(string-match \"?\" S) (set! bored-count (+ bored-count 1))]\n      [(string-match\
    \ \".\" S) (set! bored-count (+ bored-count 1))]\n      [(string-match \"!\" S)\
    \ (set! bored-count (+ bored-count 1))]\n      [(string-match \"?\" S) (set! bored-count\
    \ (+ bored-count 1))]\n      [(string-match \".\" S) (set! bored-count (+ bored-count\
    \ 1))]\n      [(string-match \"!\" S) (set! bored-count (+ bored-count 1))]\n\
    \      [(string-match \"?\" S) (set! bored-count (+ bored-count 1))]\n", "  (cond\n\
    \    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored\
    \ (rest S)))]))\n", "  (cond [(string-match \"^I\" S) 0]\n        [else 1]))\n",
  "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored\
    \ (rest S)))]))\n", "  (cond\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first\
    \ S) \"!\") 0]\n    [(equal? (first S) \".\") 0]\n    [else (+ 1 (is_bored (rest\
    \ S)))]))\n", "  (cond\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first\
    \ S) \"!\") 0]\n    [(equal? (first S) \".\") 0]\n    [else (+ 1 (is_bored (rest\
    \ S)))]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n\
    \    [(equal? (first S) \"!\") 1]\n    [else 0]))\n", "  (cond\n    [(equal? (first\
    \ S) \"I\") 1]\n    [(equal? (first S) \"!\") 0]\n    [(equal? (first S) \".\"\
    ) 0]\n    [else 0]))\n", "  (let loop ((S S) (count 0))\n    (cond\n      [(empty?\
    \ S) count]\n      [(equal? (first S) \"I\") (loop (rest S) (add1 count))]\n \
    \     [else (loop (rest S) count)])))\n", "  (cond\n    [(empty? S) 0]\n    [(equal?\
    \ (first S) \"I\") 1]\n    [(equal? (first S) \"!\") (+ 1 (is_bored (rest S)))]\n\
    \    [else (+ 1 (is_bored (rest S)))]))\n", "  (let ((bored 0))\n    (cond\n \
    \     [(string-match \"^I\" S) (set! bored 1)]\n      [(string-match \"\\.\" S)\
    \ (set! bored 2)]\n      [(string-match \"!\" S) (set! bored 3)]\n      [(string-match\
    \ \"?\" S) (set! bored 4)]\n      [(string-match \".\" S) (set! bored 5)]\n  \
    \    [(string-match \"!\" S) (set! bored 6)]\n      [(string-match \"?\" S) (set!\
    \ bored 7)]\n      [(string-match \"!\" S) (set! bored 8)]\n      [(string-match\
    \ \"?\" S) (set! bored 9)]\n      [(string-match \".\" S) (set! bored 10)]\n \
    \     [(string-match \"!\" S) (set! bored 11)]\n      [(string-match \"?\" S)\
    \ (set! bored 12)]\n      [(string-match \".\" S) (set! bored 13)]\n      [(string-match\
    \ \"!\" S) (set! bored 14)]\n      [(string-match \"?\" S) (set! bored 15)]\n\
    \      [(string-match \".\" S) (set! bored 16)]\n      [(string-match \"!\" S)\
    \ (set! bored 17)]\n      [(string-match \"?\" S) (set! bored 18)]\n      [(string-match\
    \ \".\" S) (set! bored 19)]\n      [(string-match \"!\" S) (set! bored 20)]\n\
    \      [(string-match \"?\" S) (set! bored 21)]\n      [(string-match \".\" S)\
    \ (set! bored 22)]\n      [(string-match \"!\" S) (set! bored 23)]\n      [(string-match\
    \ \"?\" S) (set! bored 24)]\n      [(string-match \".\" S) (set! bored 25)]\n\
    \      [(string-match \"!\" S) (set! bored 26)]\n      [(string-match \"?\" S)\
    \ (set! bored 27)]\n      [(string-match \".\" S) (set! bored 28)]\n      [(string-match\
    \ \"!\" S) (set! bored 29)]\n      [(string-match \"?\" S) (set! bored 30)]\n\
    \      [(string-match \".\" S) (set! bored 31)]\n      [(string-match \"!\" S)\
    \ (set! bored 32)]\n      ", "  (cond\n    [(equal? (first S) \"I\") 1]\n    [(equal?\
    \ (first S) \"!\") 1]\n    [(equal? (first S) \".\") 1]\n    [(equal? (first S)\
    \ \"?\") 1]\n    [else 0]))\n", "  (cond\n    [(equal? (first S) \"I\") 1]\n \
    \   [(equal? (first S) \"!\") 1]\n    [(equal? (first S) \".\") 1]\n    [(equal?\
    \ (first S) \"?\") 1]\n    [else 0]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal?\
    \ (first S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n \
    \   [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored\
    \ (rest S)))]))\n", "  (let ((bored 0))\n    (cond\n      [(string-match \"^I\"\
    \ S) (set! bored 1)]\n      [(string-match \"^\\.\" S) (set! bored 2)]\n     \
    \ [(string-match \"^!\" S) (set! bored 3)]\n      [(string-match \"^?\" S) (set!\
    \ bored 4)]\n      [else (set! bored 0)]\n      )))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first S) \"!\") 1]\n\
    \    [(equal? (first S) \".\") 1]\n    [(equal? (first S) \"?\") 1]\n    [else\
    \ 0]))\n", "  (cond\n    [(equal? (first S) \"I\") 1]\n    [(equal? (first S)\
    \ \"!\") 0]\n    [(equal? (first S) \".\") 0]\n    [(equal? (first S) \"?\") 0]\n\
    \    [else 0]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\"\
    ) 1]\n    [(equal? (first S) \"!\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n",
  "  (cond [(empty? S) 0]\n        [(equal? (first S) \"I\") 1]\n        [(equal?\
    \ (first S) \"!\") 1]\n        [(equal? (first S) \".\") 1]\n        [else 0]))\n",
  "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored\
    \ (rest S)))]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\"\
    ) 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond [(empty? S) 0]\n   \
    \     [(equal? (first S) \"I\") 1]\n        [(equal? (first S) \"!\") 1]\n   \
    \     [(equal? (first S) \".\") 1]\n        [(equal? (first S) \"?\") 1]\n   \
    \     [else 0]))\n", "  (cond\n    [(equal? (first S) \"I\") 0]\n    [(equal?\
    \ (first S) \"!\") 0]\n    [(equal? (first S) \".\") 0]\n    [(equal? (first S)\
    \ \"?\") 0]\n    [else 1]))\n", "  (let ((bored 0))\n    (cond\n      [(string-match\
    \ \"^I\" S) (set! bored 1)]\n      [(string-match \"\\.\" S) (set! bored 2)]\n\
    \      [(string-match \"\\?\" S) (set! bored 3)]\n      [(string-match \"!\" S)\
    \ (set! bored 4)]\n      [else (set! bored 0)]\n      )))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n",
  "  (cond [(empty? S) 0]\n        [(equal? (first S) \"I\") 1]\n        [else (+\
    \ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first\
    \ S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored (rest S)))]))\n",
  "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") 1]\n    [else (+ 1 (is_bored\
    \ (rest S)))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
