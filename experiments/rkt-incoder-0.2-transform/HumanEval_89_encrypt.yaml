name: HumanEval_89_encrypt
language: rkt
prompt: "#lang racket\n\n;; Create a function encrypt that takes a string as an argument\
  \ and\n;; returns a string encrypted with the alphabet being rotated. \n;; The alphabet\
  \ should be rotated in a manner such that the letters \n;; shift down by two multiplied\
  \ to two places.\n;; For example:\n;; >>> (encrypt \"hi\")\n;; \"lm\"\n;; >>> (encrypt\
  \ \"asdfghjkl\")\n;; \"ewhjklnop\"\n;; >>> (encrypt \"gf\")\n;; \"kj\"\n;; >>> (encrypt\
  \ \"et\")\n;; \"ix\"\n(define (encrypt s)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encrypt))\n\
  \    (check-equal? (candidate \"hi\") \"lm\")\n    (check-equal? (candidate \"asdfghjkl\"\
  ) \"ewhjklnop\")\n    (check-equal? (candidate \"gf\") \"kj\")\n    (check-equal?\
  \ (candidate \"et\") \"ix\")\n    (check-equal? (candidate \"faewfawefaewg\") \"\
  jeiajeaijeiak\")\n    (check-equal? (candidate \"hellomyfriend\") \"lippsqcjvmirh\"\
  )\n    (check-equal? (candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
  ) \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n    (check-equal? (candidate\
  \ \"a\") \"e\")\n))\n\n(test-humaneval)"
completions: ["  (let ((alpha (make-array (length s) (lambda (x) (+ x 2)))))\n   \
    \ (do ((i 0 (+ i 1))\n         (char (car s))\n         (alpha (+ alpha (array-ref\
    \ alpha (array-ref alpha (array-ref alpha (array-ref alpha (array-ref alpha (array-ref\
    \ alpha (array-ref alpha (array-ref alpha (array-ref alpha (array-ref alpha (array-ref\
    \ alpha (array-ref alpha (array-ref alpha (array-ref alpha (array-ref alpha (array-ref\
    \ alpha (array-ref alpha (array-ref alpha (array-ref alpha (array-ref alpha (array-ref\
    \ alpha (array-ref alpha (array-ref alpha (array-ref alpha (array-ref alpha (array-ref\
    \ alpha (array-ref alpha (array-ref alpha (array-ref alpha (array-ref alpha (array-ref\
    \ alpha (array-ref alpha (array-ref alpha (array-ref alpha (array-ref alpha (array-ref\
    \ alpha (array-ref alpha (array-ref alpha (array-ref alpha (array-ref alpha (array-ref\
    \ alpha (array-ref alpha (array-ref alpha (array-ref alpha (array-ref alpha (array-ref\
    \ alpha (array-ref alpha (array-ref alpha (array-ref alpha (array-ref alpha (array-ref\
    \ alpha (array-ref alpha (array-ref alpha (array-ref alpha (array-ref alpha (array-ref\
    \ alpha (array-ref alpha (array-ref alpha (array-ref alpha (array-ref alpha (array-ref\
    \ alpha (array-ref alpha (array-ref alpha (array-ref alpha (array-ref alpha (array-ref\
    \ alpha (array-ref alpha (array-ref alpha (array-ref alpha (array-ref alpha (array-ref\
    \ alpha (array-ref alpha (array-ref alpha (array-ref alpha (array-ref alpha (array-ref\
    \ alpha (array-ref alpha (array-ref alpha (array-ref alpha (array-ref alpha (array-ref\
    \ alpha (array-ref alpha (array-ref alpha (array-ref alpha (array-ref alpha (array-ref\
    \ alpha (array-ref alpha (array-ref alpha (array-ref alpha (array-ref alpha (array-ref\
    \ alpha (array-ref alpha (array-ref alpha (array-ref alpha (", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n    (loop for i from 0 to (length s)\
    \ do\n      (let ((alpha (make-array 26 :initial-element #\\a)))\n        (loop\
    \ for j from 0 to (length s) do\n          (set! alpha (rotate! alpha j))\n  \
    \        (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i ", "  (let loop ((s s)\n             (acc '()))\n    (cond\n    \
    \  [(empty? s) (append acc (list '()))]\n      [(char-alphabet (first s)) (loop\
    \ (rest s) (cons (first s) acc))]\n      [else (loop (rest s) (cons (first s)\
    \ (loop (rest s) (cons (second s) acc))))])))\n", "  (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n    (loop for i from 0 to (length s) do\n     \
    \ (let ((char (char-code (char s i))))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char", "  (cond\
    \ [(empty? s) \"\"]\n        [(equal? (first s) 'a) (cons (first s) (encrypt (rest\
    \ s)))]\n        [(equal? (first s) 'b) (cons (first s) (encrypt (rest s)))]\n\
    \        [(equal? (first s) 'c) (cons (first s) (encrypt (rest s)))]\n       \
    \ [(equal? (first s) 'd) (cons (first s) (encrypt (rest s)))]\n        [(equal?\
    \ (first s) 'e) (cons (first s) (encrypt (rest s)))]\n        [(equal? (first\
    \ s) 'f) (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) 'g)\
    \ (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) 'h) (cons (first\
    \ s) (encrypt (rest s)))]\n        [(equal? (first s) 'i) (cons (first s) (encrypt\
    \ (rest s)))]\n        [(equal? (first s) 'j) (cons (first s) (encrypt (rest s)))]\n\
    \        [(equal? (first s) 'k) (cons (first s) (encrypt (rest s)))]\n       \
    \ [(equal? (first s) 'l) (cons (first s) (encrypt (rest s)))]\n        [(equal?\
    \ (first s) 'm) (cons (first s) (encrypt (rest s)))]\n        [(equal? (first\
    \ s) 'n) (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) 'o)\
    \ (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) 'p) (cons (first\
    \ s) (encrypt (rest s)))]\n        [(equal? (first s) 'q) (cons (first s) (encrypt\
    \ (rest s)))]\n        [(equal? (first s) 'r) (cons (first s) (encrypt (rest s)))]\n\
    \        [(equal? (first s) 's) (cons (first s) (encrypt (rest s)))]\n       \
    \ [(equal? (first s) 't) (cons (first s) (encrypt (rest s)))]\n        [(equal?\
    \ (first s) 'u) (cons (first s) (encrypt (rest s)))]\n        [(equal? (first\
    \ s) 'v) (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) 'w)\
    \ (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) 'x) (cons (first\
    \ s) (encrypt (rest s)))]", "  (let ((alpha (make-array 26 :initial-element #\\\
    a)))\n    (loop for c across s\n          for i from 0\n          for j from (-\
    \ i 2)\n          for k from (- j 2)\n          when (char=? c alpha)\n      \
    \    collect (rotate-char (char-code c) i j k))))\n", "  (let ((alpha (make-array\
    \ 26)))\n    (do ((i 0 (+ i 1)))\n        ((< i 26))\n      (set! alpha (rotate!\
    \ alpha (- i 1))))\n    (let ((alpha (make-array 26)))\n      (do ((i 0 (+ i 1)))\n\
    \          ((< i 26))\n        (set! alpha (rotate! alpha (- i 1))))\n    (let\
    \ ((alpha (make-array 26)))\n      (do ((i 0 (+ i 1)))\n          ((< i 26))\n\
    \        (set! alpha (rotate! alpha (- i 1))))\n    (let ((alpha (make-array 26)))\n\
    \      (do ((i 0 (+ i 1)))\n          ((< i 26))\n        (set! alpha (rotate!\
    \ alpha (- i 1))))\n    (let ((alpha (make-array 26)))\n      (do ((i 0 (+ i 1)))\n\
    \          ((< i 26))\n        (set! alpha (rotate! alpha (- i 1))))\n    (let\
    \ ((alpha (make-array 26)))\n      (do ((i 0 (+ i 1)))\n          ((< i 26))\n\
    \        (set! alpha (rotate! alpha (- i 1))))\n    (let ((alpha (make-array 26)))\n\
    \      (do ((i 0 (+ i 1)))\n          ((< i 26))\n        (set! alpha (rotate!\
    \ alpha (- i 1))))\n    (let ((alpha (make-array 26)))\n      (do ((i 0 (+ i 1)))\n\
    \          ((< i 26))\n        (set! alpha (rotate! alpha (- i 1))))\n    (let\
    \ ((alpha (make-array 26)))\n      (do ((i 0 (+ i 1)))\n          ((< i 26))\n\
    \        (set! alpha (rotate! alpha (- i 1))))\n    (let ((alpha (make-array 26)))\n\
    \      (do ((i 0 (+ i 1)))\n          ((< i 26))\n        (set! alpha (rotate!\
    \ alpha (- i 1))))\n    (let ((alpha (make-array 26)))\n      (do ((i 0 (+ i 1)))\n\
    \          ((< i 26))\n        (set! alpha (rotate! alpha (- i 1))))\n    (let\
    \ ((alpha (make-array 26)))\n      (do ((i 0 (+ i 1)))\n          ((< i 26))\n\
    \        (set! alpha (rotate! alpha (- i 1))))\n    (let ((alpha (make-array 26)))\n\
    \      (do ((i 0 (+ i 1)))\n", "  (let ((alpha (make-array 26 (lambda (x) (+ x\
    \ 2)))))\n    (loop for i from 0 to (length s) do\n      (set! alpha (assoc i\
    \ alpha (char->integer (char->string (car s)))))\n      (set! alpha (assoc i alpha\
    \ (char->integer (char->string (cdr s)))))\n      (set! alpha (assoc i alpha (char->integer\
    \ (char->string (car s)))))\n      (set! alpha (assoc i alpha (char->integer (char->string\
    \ (cdr s)))))\n      (set! alpha (assoc i alpha (char->integer (char->string (car\
    \ s)))))\n      (set! alpha (assoc i alpha (char->integer (char->string (cdr s)))))\n\
    \      (set! alpha (assoc i alpha (char->integer (char->string (car s)))))\n \
    \     (set! alpha (assoc i alpha (char->integer (char->string (cdr s))))))\n \
    \   (apply (lambda (x) (char->string x))\n           (reverse (map (lambda (x)\
    \ (char->string x))\n                         (assoc 0 alpha (char->integer (char->string\
    \ (car s))))\n                         (assoc 1 alpha (char->integer (char->string\
    \ (cdr s))))\n                         (assoc 2 alpha (char->integer (char->string\
    \ (car s))))\n                         (assoc 3 alpha (char->integer (char->string\
    \ (cdr s))))\n                         (assoc 4 alpha (char->integer (char->string\
    \ (car s))))\n                         (assoc 5 alpha (char->integer (char->string\
    \ (cdr s))))\n                         (assoc 6 alpha (char->integer (char->string\
    \ (car s))))\n                         (assoc 7 alpha (char->integer (char->string\
    \ (cdr s))))\n                         (assoc 8 alpha (char->integer (char->string\
    \ (car s))))\n                         (assoc 9 alpha (char->integer (char->string\
    \ (cdr s))))\n                         (assoc 10 alpha (char->integer (char->string\
    \ (car s))))\n                         (assoc 11 alpha (char->integer (char->string\
    \ (cdr s))))\n                         (assoc 12 alpha (char->integer (char->string\
    \ (car s))))\n                         (assoc 13 alpha (char->integer (char->string\
    \ (cdr s))))\n                         (assoc 14 alpha (", "  (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n    (loop for c across s\n          for i from\
    \ 0 to 26\n          for j from 0 to 26\n          when (char=? c alpha)\n   \
    \       collect (rotate-char (char-code c) (char-code alpha) i j))))\n", "  (let\
    \ loop ((s s)\n             (a #(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i\
    \ #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\\
    z))\n             (b #(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J #\\K\
    \ #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\V #\\W #\\X #\\Y #\\Z))\n  \
    \           (c #(#\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9 #\\0 #\\+ #\\- #\\\
    . #\\/ #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\\
    0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\\
    0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\\
    0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\\
    0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\\
    0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\\
    0 #\\0 #\\0 #\\0 #\\0 #\\0 ", "  (cond [(empty? s) \"\"]\n        [(equal? (first\
    \ s) 'a) (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) 'b)\
    \ (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) 'c) (cons (first\
    \ s) (encrypt (rest s)))]\n        [(equal? (first s) 'd) (cons (first s) (encrypt\
    \ (rest s)))]\n        [(equal? (first s) 'e) (cons (first s) (encrypt (rest s)))]\n\
    \        [(equal? (first s) 'f) (cons (first s) (encrypt (rest s)))]\n       \
    \ [(equal? (first s) 'g) (cons (first s) (encrypt (rest s)))]\n        [(equal?\
    \ (first s) 'h) (cons (first s) (encrypt (rest s)))]\n        [(equal? (first\
    \ s) 'i) (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) 'j)\
    \ (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) 'k) (cons (first\
    \ s) (encrypt (rest s)))]\n        [(equal? (first s) 'l) (cons (first s) (encrypt\
    \ (rest s)))]\n        [(equal? (first s) 'm) (cons (first s) (encrypt (rest s)))]\n\
    \        [(equal? (first s) 'n) (cons (first s) (encrypt (rest s)))]\n       \
    \ [(equal? (first s) 'o) (cons (first s) (encrypt (rest s)))]\n        [(equal?\
    \ (first s) 'p) (cons (first s) (encrypt (rest s)))]\n        [(equal? (first\
    \ s) 'q) (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) 'r)\
    \ (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) 's) (cons (first\
    \ s) (encrypt (rest s)))]\n        [(equal? (first s) 't) (cons (first s) (encrypt\
    \ (rest s)))]\n        [(equal? (first s) 'u) (cons (first s) (encrypt (rest s)))]\n\
    \        [(equal? (first s) 'v) (cons (first s) (encrypt (rest s)))]\n       \
    \ [(equal? (first s) 'w) (cons (first s) (encrypt (rest s)))]\n        [(equal?\
    \ (first s) 'x) (cons (first s) (encrypt (rest s)))]", "  (let ((alpha (make-array\
    \ 26)))\n    (loop for i from 0 to (length s) do\n      (set! alpha (subarray\
    \ alpha (- i 26) (- i 26)))\n      (set! alpha (subarray alpha (- i 26) (- i 26)))\n\
    \      (set! alpha (subarray alpha (- i 26) (- i 26)))\n      (set! alpha (subarray\
    \ alpha (- i 26) (- i 26)))\n      (set! alpha (subarray alpha (- i 26) (- i 26)))\n\
    \      (set! alpha (subarray alpha (- i 26) (- i 26)))\n      (set! alpha (subarray\
    \ alpha (- i 26) (- i 26)))\n      (set! alpha (subarray alpha (- i 26) (- i 26)))\n\
    \      (set! alpha (subarray alpha (- i 26) (- i 26)))\n      (set! alpha (subarray\
    \ alpha (- i 26) (- i 26)))\n      (set! alpha (subarray alpha (- i 26) (- i 26)))\n\
    \      (set! alpha (subarray alpha (- i 26) (- i 26)))\n      (set! alpha (subarray\
    \ alpha (- i 26) (- i 26)))\n      (set! alpha (subarray alpha (- i 26) (- i 26)))\n\
    \      (set! alpha (subarray alpha (- i 26) (- i 26)))\n      (set! alpha (subarray\
    \ alpha (- i 26) (- i 26)))\n      (set! alpha (subarray alpha (- i 26) (- i 26)))\n\
    \      (set! alpha (subarray alpha (- i 26) (- i 26)))\n      (set! alpha (subarray\
    \ alpha (- i 26) (- i 26)))\n      (set! alpha (subarray alpha (- i 26) (- i 26)))\n\
    \      (set! alpha (subarray alpha (- i 26) (- i 26)))\n      (set! alpha (subarray\
    \ alpha (- i 26) (- i 26)))\n      (set! alpha (subarray alpha (- i 26) (- i 26)))\n\
    \      (set! alpha (subarray alpha (- i 26) (- i 26)))\n      (set! alpha (subarray\
    \ alpha (- i 26) (- i 26)))\n      (set! alpha (subarray alpha (- i 26) (- i 26)))\n\
    \      (set! alpha (subarray alpha (- i 26) (- i 26)))\n      (set! alpha (",
  "  (let ((alpha (make-alphabet (length s))))\n    (let loop ((i 0) (alpha (make-alphabet\
    \ (length s))))\n      (if (< i length)\n          (let ((char (char-ref s i)))\n\
    \            (let ((alpha (make-alphabet (length s))))\n              (let ((alpha\
    \ (make-alphabet (length s))))\n                (let ((alpha (make-alphabet (length\
    \ s))))\n                  (let ((alpha (make-alphabet (length s))))\n       \
    \             (let ((alpha (make-alphabet (length s))))\n                    \
    \  (let ((alpha (make-alphabet (length s))))\n                        (let ((alpha\
    \ (make-alphabet (length s))))\n                          (let ((alpha (make-alphabet\
    \ (length s))))\n                            (let ((alpha (make-alphabet (length\
    \ s))))\n                              (let ((alpha (make-alphabet (length s))))\n\
    \                                (let ((alpha (make-alphabet (length s))))\n \
    \                                 (let ((alpha (make-alphabet (length s))))\n\
    \                                    (let ((alpha (make-alphabet (length s))))\n\
    \                                      (let ((alpha (make-alphabet (length s))))\n\
    \                                        (let ((alpha (make-alphabet (length s))))\n\
    \                                          (let ((alpha (make-alphabet (length\
    \ s))))\n                                            (let ((alpha (make-alphabet\
    \ (length s))))\n                                              (let ((alpha (make-alphabet\
    \ (length s))))\n                                                (let ((alpha\
    \ (make-alphabet (length s))))\n                                             \
    \     (let ((alpha (make-alphabet (length s))))\n                            \
    \                        (let ((alpha (make-alphabet (length s))))\n         \
    \                                             (let ((alpha (make-alphabet (length\
    \ s))))\n                                                        (let ((alpha\
    \ (make-alphabet (length s))))\n                                             \
    \             (let ((alpha (make-alphabet (length s))))\n                    \
    \                                        (let ((alpha (make-alphabet (length s))))\n\
    \                                                              (let ((alpha (make-alphabet\
    \ (length s))))\n                                                            \
    \    (let ((alpha (make-alphabet (length s))))\n                             \
    \                                     (let ((alpha (make-alphabet (length s))))\n\
    \                                                                    (let ((alpha\
    \ (make-alphabet (length s))))\n                                             \
    \                         (let ((alpha (make-alphabet (length s))))\n        \
    \                                                                (let ((alpha\
    \ (make-alphabet (length s))))\n                                             \
    \                             (let ((alpha (make-alphabet (length s))))\n    \
    \                                                                        (let\
    \ ((alpha (make-alphabet (length s))))\n                                     \
    \                           ", "  (let loop ((s s)\n             (result '()))\n\
    \    (cond ((null? s) result)\n          ((char=? (car s) 'a) (loop (cdr s) (cons\
    \ (char->int (char->char (char->int (car s))) result)))\n          ((char=? (car\
    \ s) 'b) (loop (cdr s) (cons (char->int (char->char (char->int (char->int (car\
    \ s))))\n                                                         (cons (char->int\
    \ (char->char (char->int (char->int (cdr s))))\n                             \
    \                                      result))))\n          ((char=? (car s)\
    \ 'c) (loop (cdr s) (cons (char->int (char->char (char->int (char->int (char->int\
    \ (car s))))\n                                                         (cons (char->int\
    \ (char->char (char->int (char->int (char->int (cdr s))))\n                  \
    \                                                 result))))\n          ((char=?\
    \ (car s) 'd) (loop (cdr s) (cons (char->int (char->char (char->int (char->int\
    \ (char->int (car s))))\n                                                    \
    \     (cons (char->int (char->char (char->int (char->int (char->int (cdr s))))\n\
    \                                                                   result))))\n\
    \          ((char=? (car s) 'e) (loop (cdr s) (cons (char->int (char->char (char->int\
    \ (char->int (char->int (car s))))\n                                         \
    \                (cons (char->int (char->char (char->int (char->int (char->int\
    \ (cdr s))))\n                                                               \
    \    result))))\n          ((char=? (car s) 'f) (loop (cdr s) (cons (char->int\
    \ (char->char (char->int (char->int (char->int (car s))))\n                  \
    \                                       (cons (char->int (char->char (char->int\
    \ (char->int (char->int (cdr s))))\n                                         \
    \                          result))))\n          ((char=? (car s) 'g) (loop (cdr\
    \ s) (cons (char->int (char->char (char->int (char->int (char->int (car s))))\n\
    \                                                         (cons (char->int (char->char\
    \ (char->int (char->int (char->int (cdr s))))\n                              \
    \                                     result))))\n          ((char=? (car s) 'h)\
    \ (loop (cdr s) (cons (char->int (char->char (char->int (char->int (char->", " \
    \ (let ((alpha (make-alphabet (length s))))\n    (let loop ((i 0) (acc \"\"))\n\
    \      (if (< i alpha-length)\n          (loop (+ i 1) (cons (char-ref alpha (+\
    \ i 2)) acc))\n          (cons acc acc))))))\n", "  (let ((alpha (make-array 26\
    \ :initial-element #\\a)))\n    (loop for i from 0 to (length s) do\n      (let\
    \ ((alpha (make-array 26 :initial-element #\\a)))\n        (loop for j from 0\
    \ to (length s) do\n          (let ((alpha (make-array 26 :initial-element #\\\
    a)))\n            (set! alpha (rotate! alpha 2))\n            (set! alpha (rotate!\
    \ alpha 1))\n            (set! alpha (rotate! alpha 0))\n            (set! alpha\
    \ (rotate! alpha -2))\n            (set! alpha (rotate! alpha -1))\n         \
    \   (set! alpha (rotate! alpha -3))\n            (set! alpha (rotate! alpha -4))\n\
    \            (set! alpha (rotate! alpha -5))\n            (set! alpha (rotate!\
    \ alpha -6))\n            (set! alpha (rotate! alpha -7))\n            (set! alpha\
    \ (rotate! alpha -8))\n            (set! alpha (rotate! alpha -9))\n         \
    \   (set! alpha (rotate! alpha -10))\n            (set! alpha (rotate! alpha -11))\n\
    \            (set! alpha (rotate! alpha -12))\n            (set! alpha (rotate!\
    \ alpha -13))\n            (set! alpha (rotate! alpha -14))\n            (set!\
    \ alpha (rotate! alpha -15))\n            (set! alpha (rotate! alpha -16))\n \
    \           (set! alpha (rotate! alpha -17))\n            (set! alpha (rotate!\
    \ alpha -18))\n            (set! alpha (rotate! alpha -19))\n            (set!\
    \ alpha (rotate! alpha -20))\n            (set! alpha (rotate! alpha -21))\n \
    \           (set! alpha (rotate! alpha -22))\n            (set! alpha (rotate!\
    \ alpha -23))\n            (set! alpha (rotate! alpha -24))\n            (set!\
    \ alpha (rotate! alpha -25))\n            (set! alpha (rotate! alpha -26))\n \
    \           (set! alpha (rotate! alpha -27))\n            (set! alpha (rotate!\
    \ alpha -28))\n            (set! alpha (rotate! alpha -29))\n            (set!\
    \ alpha (rotate! alpha -30))\n            (set! alpha (rotate! alpha -31))\n \
    \           (set! alpha (rotate! alpha -32))\n            (set! alpha (rotate!\
    \ alpha -33))\n            (set! alpha (rotate! alpha -34))\n            (set!\
    \ alpha (rotate! alpha -35))\n            (set! alpha (rotate! alpha -36))\n \
    \           (set", "  (let ((alpha (make-array 26)))\n    (loop for i from 0 to\
    \ (length s) do\n      (let ((alpha (make-array 26)))\n        (loop for j from\
    \ 0 to 26 do\n          (set! alpha (rotate! alpha j))\n          (set! alpha\
    \ (rotate! alpha j))\n          (set! alpha (rotate! alpha j))\n          (set!\
    \ alpha (rotate! alpha j))\n          (set! alpha (rotate! alpha j))\n       \
    \   (set! alpha (rotate! alpha j))\n          (set! alpha (rotate! alpha j))\n\
    \          (set! alpha (rotate! alpha j))\n          (set! alpha (rotate! alpha\
    \ j))\n          (set! alpha (rotate! alpha j))\n          (set! alpha (rotate!\
    \ alpha j))\n          (set! alpha (rotate! alpha j))\n          (set! alpha (rotate!\
    \ alpha j))\n          (set! alpha (rotate! alpha j))\n          (set! alpha (rotate!\
    \ alpha j))\n          (set! alpha (rotate! alpha j))\n          (set! alpha (rotate!\
    \ alpha j))\n          (set! alpha (rotate! alpha j))\n          (set! alpha (rotate!\
    \ alpha j))\n          (set! alpha (rotate! alpha j))\n          (set! alpha (rotate!\
    \ alpha j))\n          (set! alpha (rotate! alpha j))\n          (set! alpha (rotate!\
    \ alpha j))\n          (set! alpha (rotate! alpha j))\n          (set! alpha (rotate!\
    \ alpha j))\n          (set! alpha (rotate! alpha j))\n          (set! alpha (rotate!\
    \ alpha j))\n          (set! alpha (rotate! alpha j))\n          (set! alpha (rotate!\
    \ alpha j))\n          (set! alpha (rotate! alpha j))\n          (set! alpha (rotate!\
    \ alpha j))\n          (set! alpha (rotate! alpha j))\n          (set! alpha (rotate!\
    \ alpha j))\n          (set! alpha (rotate! alpha j))\n          (set! alpha (rotate!\
    \ alpha j))\n          (set! alpha (rotate! alpha j))\n          (set! alpha (rotate!\
    \ alpha j))\n          (set! alpha (rotate! alpha j))\n          (set! alpha (rotate!\
    \ alpha j))\n          (set! ", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (loop for i from 0 to (length s) do\n      (let ((char (char-code\
    \ (substring s i i))))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! ", "  (cond [(empty? s) \"\"]\n \
    \       [(empty? (rest s)) \"\"]\n        [(equal? (first s) (first s)) (cons\
    \ (first s) (encrypt (rest s)))]\n        [else (cons (first s) (encrypt (rotate\
    \ (first s) (first s) (rest s))))]))\n", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (loop for i from 0 to (length s) do\n      (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n        (loop for j from 0 to (length s) do\n \
    \         (let ((alpha (make-array 26 :initial-element #\\a)))\n            (loop\
    \ for k from 0 to (length s) do\n              (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n                (loop for l from 0 to (length s) do\n             \
    \     (let ((alpha (make-array 26 :initial-element #\\a)))\n                 \
    \   (loop for m from 0 to (length s) do\n                      (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n                        (loop for n from 0 to (length\
    \ s) do\n                          (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n                            (loop for o from 0 to (length s) do\n \
    \                             (let ((alpha (make-array 26 :initial-element #\\\
    a)))\n                                (loop for p from 0 to (length s) do\n  \
    \                                (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n                                    (loop for q from 0 to (length s)\
    \ do\n                                      (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n                                        (loop for r from 0 to (length\
    \ s) do\n                                          (let ((alpha (make-array 26\
    \ :initial-element #\\a)))\n                                            (loop\
    \ for s from  0 to (length s) do\n                                           \
    \   (let ((alpha (make-array 26 :initial-element #\\a)))\n                   \
    \                             (loop for t from 0 to (length s) do\n          \
    \                                        (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n                                                    (loop for u from\
    \ 0 to (length s) do\n                                                      (let\
    \ ((alpha (make-array 26 :initial-element #\\a)))\n                          \
    \                              (loop for v from 0 to (length s) do\n         \
    \                                                 (let ((alpha (make-array 26\
    \ :initial-element #\\a)))\n                                                 \
    \           (loop for w from 0 to (length s) do\n                            \
    \                                  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n                                                                (loop\
    \ for x from 0 to (length s) do\n                                            \
    \                      (let ((alpha (make-array 26 :initial-element #\\a)))\n\
    \                                                                    (loop for\
    \ y from 0 to (length s) do\n                                                \
    \                      (let ((alpha (make-array 26 :initial-element #\\a)))\n\
    \                                                                        (loop\
    \ for z from 0 to ", "  (let ((alpha (make-array 26 (lambda (x) (- x 26)))))\n\
    \    (do ((i 0 (+ i 1)))\n        ((< i (length s)))\n      (set! alpha (set!\
    \ alpha (+ alpha (array-ref alpha (array-ref s i))))))\n    (string-append (array-ref\
    \ alpha (array-ref s 0))\n                  (array-ref alpha (array-ref s 1))\n\
    \                  (array-ref alpha (array-ref s 2))\n                  (array-ref\
    \ alpha (array-ref s 3))\n                  (array-ref alpha (array-ref s 4))\n\
    \                  (array-ref alpha (array-ref s 5))\n                  (array-ref\
    \ alpha (array-ref s 6))\n                  (array-ref alpha (array-ref s 7))\n\
    \                  (array-ref alpha (array-ref s 8))\n                  (array-ref\
    \ alpha (array-ref s 9))\n                  (array-ref alpha (array-ref s 10))\n\
    \                  (array-ref alpha (array-ref s 11))\n                  (array-ref\
    \ alpha (array-ref s 12))\n                  (array-ref alpha (array-ref s 13))\n\
    \                  (array-ref alpha (array-ref s 14))\n                  (array-ref\
    \ alpha (array-ref s 15))\n                  (array-ref alpha (array-ref s 16))\n\
    \                  (array-ref alpha (array-ref s 17))\n                  (array-ref\
    \ alpha (array-ref s 18))\n                  (array-ref alpha (array-ref s 19))\n\
    \                  (array-ref alpha (array-ref s 20))\n                  (array-ref\
    \ alpha (array-ref s 21))\n                  (array-ref alpha (array-ref s 22))\n\
    \                  (array-ref alpha (array-ref s 23))\n                  (array-ref\
    \ alpha (array-ref s 24))\n                  (array-ref alpha (array-ref s 25))))\n",
  "  (let loop ((s s)\n             (a #(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\\
    I #\\J \n                  #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\\
    U #\\V \n                  #\\W #\\X #\\Y #\\Z))\n             (b #(#\\a #\\b\
    \ #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j \n                  #\\k #\\l #\\m #\\\
    n #\\o #\\p #\\q #\\r #\\s #\\t #\\u #\\v \n                  #\\w #\\x #\\y #\\\
    z))\n             (c #(#\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9 #\\0 #\\-\
    \ #\\+ #\\. #\\/ #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\\
    0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\\
    0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\\
    0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\\
    0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\\
    0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\\
    0 #\\0 #\\0 #\\0 ", "  (let ((alpha (make-array 26)))\n    (loop for i from 0\
    \ to (length s) do\n      (set! alpha (subarray alpha (- i 26) (- i 26)))\n  \
    \    (set! alpha (rotate! alpha 2))\n      (set! alpha (subarray alpha (- i 26)\
    \ (- i 26)))\n      (set! alpha (rotate! alpha 2))\n      (set! alpha (subarray\
    \ alpha (- i 26) (- i 26))))\n    (string-append (map char->string alpha) s))\n",
  "  (let ((alpha (make-array 26 (lambda (x) (+ x 2)))))\n    (set! alpha (rotate-array\
    \ alpha '(a b c d e f g h i j k l m n o p q r s t u v w x y z))))\n  (let ((alpha\
    \ (make-array 26 (lambda (x) (+ x 2)))))\n    (set! alpha (rotate-array alpha\
    \ '(a b c d e f g h i j k l m n o p q r s t u v w x y z))))\n  (let ((alpha (make-array\
    \ 26 (lambda (x) (+ x 2)))))\n    (set! alpha (rotate-array alpha '(a b c d e\
    \ f g h i j k l m n o p q r s t u v w x y z))))\n  (let ((alpha (make-array 26\
    \ (lambda (x) (+ x 2)))))\n    (set! alpha (rotate-array alpha '(a b c d e f g\
    \ h i j k l m n o p q r s t u v w x y z))))\n  (let ((alpha (make-array 26 (lambda\
    \ (x) (+ x 2)))))\n    (set! alpha (rotate-array alpha '(a b c d e f g h i j k\
    \ l m n o p q r s t u v w x y z))))\n  (let ((alpha (make-array 26 (lambda (x)\
    \ (+ x 2)))))\n    (set! alpha (rotate-array alpha '(a b c d e f g h i j k l m\
    \ n o p q r s t u v w x y z))))\n  (let ((alpha (make-array 26 (lambda (x) (+\
    \ x 2)))))\n    (set! alpha (rotate-array alpha '(a b c d e f g h i j k l m n\
    \ o p q r s t u v w x y z))))\n  (let ((alpha (make-array 26 (lambda (x) (+ x\
    \ 2)))))\n    (set! alpha (rotate-array alpha '(a b c d e f g h i j k l m n o\
    \ p q r s t u v w x y z))))\n  (let ((alpha (make-array 26 (lambda (x) (+ x 2)))))\n\
    \    (set! alpha (rotate-array alpha '(a b c d e f g h i j k l m n o p q r s t\
    \ u v w x y z))))\n  (let ((alpha (make-array 26", "  (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n    (let loop ((s s)\n              (alpha (make-array\
    \ 26 :initial-element #\\a)))\n      (cond\n        ((null? s) (list s))\n   \
    \     ((char=? (car s) #\\a) (cons (car s) alpha))\n        (else (loop (cdr s)\
    \ (cons (char-code (car s)) (rotate-left alpha (char-code (car s))))))))))\n",
  "  (let loop ((s s)\n             (result '()))\n    (if (empty? s)\n        result\n\
    \        (loop (rest s)\n              (cons (first s)\n                    (loop\
    \ (rest s)\n                          (cons (second s)\n                     \
    \           result)))))))\n", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (cond [(empty? s) \"\"]\n          [(char-alphabet (first s)) (char-alphabet\
    \ (first s))]\n          [else (let ((alpha (rotate-letters alpha (first s))))\n\
    \                  (cond [(empty? s) \"\"]\n                        [else (cons\
    \ (first s) (encrypt (rest s)))]\n                        [(char-alphabet (first\
    \ s)) (char-alphabet (first s))]\n                        [else (let ((alpha (rotate-letters\
    \ alpha (first s))))\n                                (cons (first s) (encrypt\
    \ (rest s)))]\n                        [else (let ((alpha (rotate-letters alpha\
    \ (first s))))\n                                (cons (first s) (encrypt (rest\
    \ s)))]\n                        [else (let ((alpha (rotate-letters alpha (first\
    \ s))))\n                                (cons (first s) (encrypt (rest s)))]\n\
    \                        [else (let ((alpha (rotate-letters alpha (first s))))\n\
    \                                (cons (first s) (encrypt (rest s)))]\n      \
    \                  [else (let ((alpha (rotate-letters alpha (first s))))\n   \
    \                             (cons (first s) (encrypt (rest s)))]\n         \
    \               [else (let ((alpha (rotate-letters alpha (first s))))\n      \
    \                          (cons (first s) (encrypt (rest s)))]\n            \
    \            [else (let ((alpha (rotate-letters alpha (first s))))\n         \
    \                       (cons (first s) (encrypt (rest s)))]\n               \
    \         [else (let ((alpha (rotate-letters alpha (first s))))\n            \
    \                    (cons (first s) (encrypt (rest s)))]\n                  \
    \      [else (let ((alpha (rotate-letters alpha (first s))))\n               \
    \                 (cons (first s) (encrypt (rest s)))]\n                     \
    \   [else (let ((alpha (rotate-letters alpha (first s))))\n                  \
    \              (cons (first s) (encrypt (rest s)))]\n                        [else\
    \ (let ((alpha (rotate-letters alpha (first s))))\n                          \
    \      (cons (first s) (encrypt (rest s)))]\n                        [else (let\
    \ ((alpha (rotate-letters alpha (first s))))\n                               \
    \ (cons (first s) (encrypt (rest s)))]\n                        [else (let ((alpha\
    \ (rotate-letters alpha (first s))))\n                                (cons (first\
    \ s) (encrypt (rest s)))]\n                        [", "  (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n    (loop for i from 0 to (length s) do\n     \
    \ (let ((c (char (substring s i i)))\n            (alpha (substring alpha (- i\
    \ 2))))\n        (set! alpha (substring alpha (+ i 2))\n              alpha (substring\
    \ alpha (- i 2))\n              alpha (substring alpha (+ i 2)))\n        (set!\
    \ alpha (substring alpha (- i 2))\n              alpha (substring alpha (+ i 2)))\n\
    \        (set! alpha (substring alpha (- i 2))\n              alpha (substring\
    \ alpha (+ i 2)))\n        (set! alpha (substring alpha (- i 2))\n           \
    \   alpha (substring alpha (+ i 2)))\n        (set! alpha (substring alpha (-\
    \ i 2))\n              alpha (substring alpha (+ i 2)))\n        (set! alpha (substring\
    \ alpha (- i 2))\n              alpha (substring alpha (+ i 2)))\n        (set!\
    \ alpha (substring alpha (- i 2))\n              alpha (substring alpha (+ i 2)))\n\
    \        (set! alpha (substring alpha (- i 2))\n              alpha (substring\
    \ alpha (+ i 2)))\n        (set! alpha (substring alpha (- i 2))\n           \
    \   alpha (substring alpha (+ i 2)))\n        (set! alpha (substring alpha (-\
    \ i 2))\n              alpha (substring alpha (+ i 2)))\n        (set! alpha (substring\
    \ alpha (- i 2))\n              alpha (substring alpha (+ i 2)))\n        (set!\
    \ alpha (substring alpha (- i 2))\n              alpha (substring alpha (+ i 2)))\n\
    \        (set! alpha (substring alpha (- i 2))\n              alpha (substring\
    \ alpha (+ i 2)))\n        (set! alpha (substring alpha (- i 2))\n           \
    \   alpha (substring alpha (+ i 2)))\n        (set! alpha (substring alpha (-\
    \ i 2))\n              alpha (substring alpha (+ i 2)))\n        (set! alpha (substring\
    \ alpha (- i 2))\n              alpha (substring alpha (+ i 2)))\n        (set!\
    \ alpha (substring alpha (- i 2))\n              alpha (substring alpha (+ i 2)))\n\
    \        (set! alpha (substring alpha (- i 2))\n              alpha (substring\
    \ alpha (+ i 2)))\n        (set! alpha (substring alpha (- i 2))\n           \
    \   alpha (", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop\
    \ for i from 0 to (length s) do\n      (let ((c (char-code (char s i))))\n   \
    \     (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha c))\n\
    \        (set! alpha (rotate! alpha c", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (let loop ((s s)\n               (alpha alpha))\n      (cond\n\
    \        ((null? s) (list s))\n        ((char=? (car s) #\\a) (list s))\n    \
    \    (else (loop (cdr s) (rotate! alpha (car s)))))))\n", "  (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n    (loop for i from 0 to (length s) do\n     \
    \     (set! alpha (rotate! alpha 2))\n          (set! alpha (rotate! alpha 1))\n\
    \          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate! alpha\
    \ 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 2))\n          (set! alpha (rotate!\
    \ alpha 1))\n          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 2))\n          (set! alpha (rotate!\
    \ alpha 1))\n          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 2))\n          (set! alpha (rotate!\
    \ alpha 1))\n          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 2))\n          (set! alpha (rotate!\
    \ alpha 1))\n          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 2))\n          (set! alpha (rotate!\
    \ alpha 1))\n          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 2))\n          (set! alpha (rotate!\
    \ alpha 1))\n          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 2))\n          (set! alpha (rotate!\
    \ alpha 1))\n          ", "  (let ((alpha (make-array 26 :initial-element #\\\
    a)))\n    (loop for i from 0 to (length s) do\n      (let ((char (char-code (char\
    \ s i))))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (let loop ((s s)\n               (alpha alpha))\n      (cond\n\
    \        ((null? s) (list s))\n        ((char=? (car s) #\\a) (cons alpha (loop\
    \ (cdr s) alpha)))\n        (else (loop (cdr s) (cons (char-code (car s)) (cons\
    \ alpha (char-code (car s))))))))))\n", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (loop for i from 0 to (length s) do\n          (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n            (loop for j from 0 to (length s) do\n\
    \                  (set! alpha (rotate! alpha j))\n                  (set! alpha\
    \ (rotate! alpha (+ i 1)))\n                  (set! alpha (rotate! alpha (+ i\
    \ 1)))\n                  (set! alpha (rotate! alpha (+ i 1)))\n             \
    \     (set! alpha (rotate! alpha (+ i 1)))\n                  (set! alpha (rotate!\
    \ alpha (+ i 1)))\n                  (set! alpha (rotate! alpha (+ i 1)))\n  \
    \                (set! alpha (rotate! alpha (+ i 1)))\n                  (set!\
    \ alpha (rotate! alpha (+ i 1)))\n                  (set! alpha (rotate! alpha\
    \ (+ i 1)))\n                  (set! alpha (rotate! alpha (+ i 1)))\n        \
    \          (set! alpha (rotate! alpha (+ i 1)))\n                  (set! alpha\
    \ (rotate! alpha (+ i 1)))\n                  (set! alpha (rotate! alpha (+ i\
    \ 1)))\n                  (set! alpha (rotate! alpha (+ i 1)))\n             \
    \     (set! alpha (rotate! alpha (+ i 1)))\n                  (set! alpha (rotate!\
    \ alpha (+ i 1)))\n                  (set! alpha (rotate! alpha (+ i 1)))\n  \
    \                (set! alpha (rotate! alpha (+ i 1)))\n                  (set!\
    \ alpha (rotate! alpha (+ i 1)))\n                  (set! alpha (rotate! alpha\
    \ (+ i 1)))\n                  (set! alpha (rotate! alpha (+ i 1)))\n        \
    \          (set! alpha (rotate! alpha (+ i 1)))\n                  (set! alpha\
    \ (rotate! alpha (+ i 1)))\n                  (set! alpha (rotate! alpha (+ i\
    \ 1)))\n                  (set! alpha (rotate! alpha (+ i 1)))\n             \
    \     (set! alpha (rotate! alpha (+ i 1)))\n                  (set! alpha (rotate!\
    \ alpha (+ i 1)))\n                  (set! alpha (rotate! alpha (+ i 1)))\n  \
    \                (set! alpha (rotate! alpha (+ i 1)))\n                  (set!\
    \ alpha (rotate! alpha (+ i 1)))\n                  (set! alpha (rotate! alpha\
    \ (+ i 1)))\n                  (set! alpha (rotate! alpha (+ ", "  (let loop ((s\
    \ s)\n             (alphabet (list 'a 'b 'c 'd 'e 'f 'g 'h 'i 'j 'k 'l 'm 'n 'o\
    \ 'p 'q 'r 's 't 'u 'v 'w 'x 'y 'z)))\n    (if (null? s)\n        (reverse alphabet)\n\
    \        (loop (substring s 0 (length s)) (append (substring alphabet (length\
    \ alphabet) 1) (substring alphabet (length alphabet) 2))))))\n", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n    (loop for i from 0 to (length s)\
    \ by 2\n          for j from 0 to (length s) by 2\n          for k from 0 to (length\
    \ s) by 2\n          when (= (modulo i 26) (modulo j 26) (modulo k 26))\n    \
    \      do (set! alpha (rotate! alpha i j k)))\n    (string-append (map char->string\
    \ alpha)\n                  (map char->string (string-append s (string->list s))))))\n",
  "  (let ((alpha (make-array (length s) (lambda (x) (+ x 2)))))\n    (do ((i 0 (+\
    \ i 1))\n         (c 0 (+ c 1)))\n        ((< i s))\n      (set! alpha (assoc\
    \ alpha (+ c i) c))\n      (set! alpha (assoc alpha (+ i c) c))\n      (set! alpha\
    \ (assoc alpha (+ i c) c))\n      (set! alpha (assoc alpha (+ i c) c))\n     \
    \ (set! alpha (assoc alpha (+ i c) c))\n      (set! alpha (assoc alpha (+ i c)\
    \ c))\n      (set! alpha (assoc alpha (+ i c) c))\n      (set! alpha (assoc alpha\
    \ (+ i c) c))\n      (set! alpha (assoc alpha (+ i c) c))\n      (set! alpha (assoc\
    \ alpha (+ i c) c))\n      (set! alpha (assoc alpha (+ i c) c))\n      (set! alpha\
    \ (assoc alpha (+ i c) c))\n      (set! alpha (assoc alpha (+ i c) c))\n     \
    \ (set! alpha (assoc alpha (+ i c) c))\n      (set! alpha (assoc alpha (+ i c)\
    \ c))\n      (set! alpha (assoc alpha (+ i c) c))\n      (set! alpha (assoc alpha\
    \ (+ i c) c))\n      (set! alpha (assoc alpha (+ i c) c))\n      (set! alpha (assoc\
    \ alpha (+ i c) c))\n      (set! alpha (assoc alpha (+ i c) c))\n      (set! alpha\
    \ (assoc alpha (+ i c) c))\n      (set! alpha (assoc alpha (+ i c) c))\n     \
    \ (set! alpha (assoc alpha (+ i c) c))\n      (set! alpha (assoc alpha (+ i c)\
    \ c))\n      (set! alpha (assoc alpha (+ i c) c))\n      (set! alpha (assoc alpha\
    \ (+ i c) c))\n      (set! alpha (assoc alpha (+ i c) c))\n      (set! alpha (assoc\
    \ alpha (+ i c) c))\n      (set! alpha (assoc alpha (+ i c) c))\n      (set! alpha\
    \ (assoc ", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop\
    \ for i from 0 to (length s) by 2\n          for j from 0 to (length s) by 2\n\
    \          when (char=? (char-ref s i j) alpha)\n          collect (cond ((char=?\
    \ (char-ref s i j) 'z) (char-ref s i j))\n                       ((char=? (char-ref\
    \ s i j) 'a) (char-ref s i j))\n                       ((char=? (char-ref s i\
    \ j) 'b) (char-ref s i j))\n                       ((char=? (char-ref s i j) 'c)\
    \ (char-ref s i j))\n                       ((char=? (char-ref s i j) 'd) (char-ref\
    \ s i j))\n                       ((char=? (char-ref s i j) 'e) (char-ref s i\
    \ j))\n                       ((char=? (char-ref s i j) 'f) (char-ref s i j))\n\
    \                       ((char=? (char-ref s i j) 'g) (char-ref s i j))\n    \
    \                   ((char=? (char-ref s i j) 'h) (char-ref s i j))\n        \
    \               ((char=? (char-ref s i j) 'i) (char-ref s i j))\n            \
    \           ((char=? (char-ref s i j) 'j) (char-ref s i j))\n                \
    \       ((char=? (char-ref s i j) 'k) (char-ref s i j))\n                    \
    \   ((char=? (char-ref s i j) 'l) (char-ref s i j))\n                       ((char=?\
    \ (char-ref s i j) 'm) (char-ref s i j))\n                       ((char=? (char-ref\
    \ s i j) 'n) (char-ref s i j))\n                       ((char=? (char-ref s i\
    \ j) 'o) (char-ref s i j))\n                       ((char=? (char-ref s i j) 'p)\
    \ (char-ref s i j))\n                       ((char=? (char-ref s i j) 'q) (char-ref\
    \ s i j))\n                       ((char=? (char-ref s i j) 'r) (char-ref s i\
    \ j))\n                       ((char=? (char-ref s i j) 's) (char-ref ", "  (let\
    \ ((alpha (make-array 26 :initial-element #\\a)))\n    (let loop ((s s)\n    \
    \           (alpha alpha))\n      (cond ((null? s) (list \"\"))\n            ((char=?\
    \ (car s) #\\a) (list \"\"))\n            (else (let ((c (char->integer (car s))))\n\
    \                       (cond ((< c 26) (cons alpha (loop (cdr s) alpha)))\n \
    \                           ((= c 26) (cons alpha (loop (cdr s) alpha)))\n   \
    \                         ((> c 26) (loop (cdr s) alpha)))))))))\n", "  (let ((alpha\
    \ (make-array 26 \n                          :initial-contents (list #\\a))\n\
    \                    (rotated (make-array 26 \n                              \
    \        :initial-contents (list #\\a))))\n    (loop for i from 0 to (length s)\
    \ do\n          (let ((char (char-code (char s i)))\n                (index (modulo\
    \ (+ i 26) 26))\n                (alpha (subseq alpha (+ index 0))\n         \
    \       (rotated (subseq rotated (+ index 0))))\n            (set! alpha (append\
    \ alpha (list char))\n                  rotated (append rotated (list char))))\n\
    \    (string-append (apply string-append alpha) (apply string-append rotated))))\n",
  "  (let loop ((s s)\n             (a #(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\\
    i #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\\
    z))\n             (b #(#\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l\
    \ #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z))\n       \
    \      (c #(#\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\\
    p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z))\n             (d #(#\\d #\\e\
    \ #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\\
    v #\\w #\\x #\\y #\\z))\n             (e #(#\\e #\\f #\\g #\\h #\\i #\\j #\\k\
    \ #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z))\n  \
    \           (f #(#\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\\
    r #\\s #\\t #\\v #\\w #\\x #\\y #\\z))\n             (g #(#\\g #\\h #\\i #\\j\
    \ #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z))\n\
    \             (h #(#\\h #\\i #\\j #\\k #\\l #\\m ", "  (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n    (loop for i from 0 to (length s) do\n     \
    \ (set! alpha (rotate! alpha 2))\n      (set! alpha (rotate! alpha 1))\n     \
    \ (set! alpha (rotate! alpha 0))\n      (set! alpha (rotate! alpha 3))\n     \
    \ (set! alpha (rotate! alpha 6))\n      (set! alpha (rotate! alpha 9))\n     \
    \ (set! alpha (rotate! alpha 12))\n      (set! alpha (rotate! alpha 15))\n   \
    \   (set! alpha (rotate! alpha 18))\n      (set! alpha (rotate! alpha 21)))\n\
    \    (string-append (substring s 0 i) (substring alpha (- i 1)))))\n", "  (let\
    \ loop ((s s)\n             (alphabet (list 'a b c d e f g h i j k l m n o p q\
    \ r s t u v w x y z)))\n    (cond\n      [(empty? s) \"\"]\n      [(equal? (first\
    \ s) 'a) (cons (first s) (loop (rest s) alphabet))]\n      [(equal? (first s)\
    \ 'b) (cons (first s) (loop (rest s) (cons (first s) alphabet)))]\n      [(equal?\
    \ (first s) 'c) (cons (first s) (loop (rest s) (cons (first s) (cons (first s)\
    \ alphabet))))]\n      [(equal? (first s) 'd) (cons (first s) (loop (rest s) (cons\
    \ (first s) (cons (first s) (cons (first s) alphabet))))]\n      [(equal? (first\
    \ s) 'e) (cons (first s) (loop (rest s) (cons (first s) (cons (first s) (cons\
    \ (first s) (cons (first s) alphabet))))))]\n      [(equal? (first s) 'f) (cons\
    \ (first s) (loop (rest s) (cons (first s) (cons (first s) (cons (first s) (cons\
    \ (first s) (cons (first s) alphabet)))))))]\n      [(equal? (first s) 'g) (cons\
    \ (first s) (loop (rest s) (cons (first s) (cons (first s) (cons (first s) (cons\
    \ (first s) (cons (first s) (cons (first s) alphabet))))))))]\n      [(equal?\
    \ (first s) 'h) (cons (first s) (loop (rest s) (cons (first s) (cons (first s)\
    \ (cons (first s) (cons (first s) (cons (first s) (cons (first s) (cons (first\
    \ s) alphabet))))))))]\n      [(equal? (first s) 'i) (cons (first s) (loop (rest\
    \ s) (cons (first s) (cons (first s) (cons (first s) (cons (first s) (cons (first\
    \ s) (cons (first s) (cons (first s) (cons (first s) alphabet))))))))))]\n   \
    \   [(equal? (first s) 'j) (cons (first s) (loop (rest s) (cons (first s) (cons\
    \ (first s) (cons (first s) (cons (first s) (cons (first s) (cons (first s) (cons\
    \ (first s) (cons (first s) (cons (first s) alphabet))))))))))]\n      [(equal?\
    \ (first s) 'k) (con", "  (let ((alpha (make-array (length s) #:initial-element\
    \ #\\a)))\n    (do ((i 0 (+ i 1)))\n        ((< i (length s)))\n      (set! alpha\
    \ (rotate! alpha i #\\a)))\n    (do ((i 0 (+ i 1)))\n        ((< i (length s)))\n\
    \      (set! alpha (rotate! alpha i #\\b)))\n    (do ((i 0 (+ i 1)))\n       \
    \ ((< i (length s)))\n      (set! alpha (rotate! alpha i #\\c)))\n    (do ((i\
    \ 0 (+ i 1)))\n        ((< i (length s)))\n      (set! alpha (rotate! alpha i\
    \ #\\d)))\n    (do ((i 0 (+ i 1)))\n        ((< i (length s)))\n      (set! alpha\
    \ (rotate! alpha i #\\e)))\n    (do ((i 0 (+ i 1)))\n        ((< i (length s)))\n\
    \      (set! alpha (rotate! alpha i #\\f)))\n    (do ((i 0 (+ i 1)))\n       \
    \ ((< i (length s)))\n      (set! alpha (rotate! alpha i #\\g)))\n    (do ((i\
    \ 0 (+ i 1)))\n        ((< i (length s)))\n      (set! alpha (rotate! alpha i\
    \ #\\h)))\n    (do ((i 0 (+ i 1)))\n        ((< i (length s)))\n      (set! alpha\
    \ (rotate! alpha i #\\i)))\n    (do ((i 0 (+ i 1)))\n        ((< i (length s)))\n\
    \      (set! alpha (rotate! alpha i #\\j)))\n    (do ((i 0 (+ i 1)))\n       \
    \ ((< i (length s)))\n      (set! alpha (rotate! alpha i #\\k)))\n    (do ((i\
    \ 0 (+ i 1)))\n        ((< i (length s)))\n      (set! alpha (rotate! alpha i\
    \ #\\l)))\n    (do ((i 0 (+ i 1)))\n        ((< i (length s)))\n      (set! alpha\
    \ (rotate! alpha i #\\m)))\n    (do ((i 0 (+ i 1)))\n        ((< i (length s)))\n\
    \      (set! alpha (rotate! alpha i #\\n)))\n    (do ((i 0 (+ i 1)))\n       \
    \ ((< i (length s)))\n      (set! alpha (rotate! alpha i #\\o)))\n    (do ((i\
    \ 0 (+ i 1)))\n        ((< i (length s)))\n      (set! alpha (rotate! alpha i\
    \ #\\p)))\n    (", "  (let loop ((s s)\n             (result '()))\n    (if (null?\
    \ s)\n        result\n        (loop (cdr s)\n              (cons (char->integer\
    \ (char->string (car s))\n                            (char->integer (char->string\
    \ (cadr s))))\n                    result)))))\n", "  (let ((alpha (make-array\
    \ 26)))\n    (loop for i from 0 to (length s) by 2\n          for j from 0 to\
    \ (length s) by 2\n          collect (substring s i j) (set! alpha (+ alpha (substring\
    \ alpha (+ i j) 1))))\n    (string-join (map char->string alpha))))\n", "  (let\
    \ loop ((s s)\n             (acc '()))\n    (if (empty? s)\n        acc\n    \
    \    (loop (rest s)\n              (cons (first s) acc)))))\n", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n    (let loop ((s s)\n            \
    \   (alpha (make-array 26 :initial-element #\\a)))\n      (cond\n        ((null?\
    \ s) (make-string 0 \"\"))\n        ((char=? (car s) #\\a) (make-string 0 \"\"\
    ))\n        ((char=? (car s) #\\z) (make-string 0 \"\"))\n        ((char=? (car\
    \ s) #\\A) (make-string 0 \"\"))\n        ((char=? (car s) #\\Z) (make-string\
    \ 0 \"\"))\n        (else (loop (cdr s) (rotate-right alpha (char->integer (car\
    \ s)))))))))\n", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n   \
    \ (let loop ((s s)\n               (alpha (make-array 26 :initial-element #\\\
    a)))\n      (cond\n        ((null? s) s)\n        ((char-alphabetic? s) (loop\
    \ (substring s 1) alpha))\n        (else (loop (substring s 1) (rotate-array alpha\
    \ 2))))))))\n", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop\
    \ for c across s\n          for i from 0\n          for j from (- i 2)\n     \
    \     for k from (- j 2)\n          collect (alpha (+ i j) (+ k 26))))\n  ;; The\
    \ above code can be rewritten as:\n  ;; >>> (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n  ;;   (loop for c across s\n  ;;         for i from 0\n  ;;      \
    \   for j from (- i 2)\n  ;;         for k from (- j 2)\n  ;;         collect\
    \ (alpha (+ i j) (+ k 26))))\n  ;; \"lm\"\n  ;; \"ewhjklnop\"\n  ;; \"kj\"\n \
    \ ;; \"ix\"\n  ;; \"gf\")\n  ;; \"et\")\n  ;; \"ix\")\n  ;; \"gf\")\n  ;; \"et\"\
    )\n  ;; \"ix\")\n  ;; \"gf\")\n  ;; \"et\")\n  ;; \"ix\")\n  ;; \"gf\")\n  ;;\
    \ \"et\")\n  ;; \"ix\")\n  ;; \"gf\")\n  ;; \"et\")\n  ;; \"ix\")\n  ;; \"gf\"\
    )\n  ;; \"et\")\n  ;; \"ix\")\n  ;; \"gf\")\n  ;; \"et\")\n  ;; \"ix\")\n  ;;\
    \ \"gf\")\n  ;; \"et\")\n  ;; \"ix\")\n  ;; \"gf\")\n  ;; \"et\")\n  ;; \"ix\"\
    )\n  ;; \"gf\")\n  ;; \"et\")\n  ;; \"ix\")\n  ;; \"gf\")\n  ;; \"et\")\n  ;;\
    \ \"ix\")\n  ;; \"gf\")\n  ;; \"et\")\n  ;; \"ix\")\n  ;; \"gf\")\n  ;; \"et\"\
    )\n  ;; \"ix\")\n  ;; \"gf\")\n  ;; \"et\")\n  ;; \"ix\")\n  ;; \"gf\")\n  ;;\
    \ \"et\")\n  ;; \"ix\")\n  ;; \"gf\")\n  ;; \"", "  (let ((alpha (make-alphabet\
    \ (length s))))\n    (let loop ((i 0) (result '()))\n      (if (< i alpha)\n \
    \         (loop (+ i 1) (cons (char->int (char s (+ i 1))) (cons (char->int (char\
    \ s (+ i 2))) (cons (char->int (char s (+ i 3))) (cons (char->int (char s (+ i\
    \ 4))) (cons (char->int (char s (+ i 5))) (cons (char->int (char s (+ i 6))) (cons\
    \ (char->int (char s (+ i 7))) (cons (char->int (char s (+ i 8))) (cons (char->int\
    \ (char s (+ i 9))) (cons (char->int (char s (+ i 10))) (cons (char->int (char\
    \ s (+ i 11))) (cons (char->int (char s (+ i 12))) (cons (char->int (char s (+\
    \ i 13))) (cons (char->int (char s (+ i 14))) (cons (char->int (char s (+ i 15)))\
    \ (cons (char->int (char s (+ i 16))) (cons (char->int (char s (+ i 17))) (cons\
    \ (char->int (char s (+ i 18))) (cons (char->int (char s (+ i 19))) (cons (char->int\
    \ (char s (+ i 20))) (cons (char->int (char s (+ i 21))) (cons (char->int (char\
    \ s (+ i 22))) (cons (char->int (char s (+ i 23))) (cons (char->int (char s (+\
    \ i 24))) (cons (char->int (char s (+ i 25))) (cons (char->int (char s (+ i 26)))\
    \ (cons (char->int (char s (+ i 27))) (cons (char->int (char s (+ i 28))) (cons\
    \ (char->int (char s (+ i 29))) (cons (char->int (char s (+ i 30))) (cons (char->int\
    \ (char s (+ i 31))) (cons (char->int (char s (+ i 32))) (cons (char->int (char\
    \ s (+ i 33))) (cons (char->int (char s (+ i 34))) (cons (char->int (char s (+\
    \ i 35))) (cons (char->int (char s (+ i 36))) (cons (char->int (char s (+ i 37)))\
    \ (cons (char", "  (let ((alpha (make-array (length s) #:initial-element #\\a)))\n\
    \    (do ((i 0 (+ i 1)))\n        ((< i s))\n      (set! alpha (rotate! alpha\
    \ i #\\a)))\n    (do ((i 0 (+ i 1)))\n        ((< i s))\n      (set! alpha (rotate!\
    \ alpha i #\\b)))\n    (do ((i 0 (+ i 1)))\n        ((< i s))\n      (set! alpha\
    \ (rotate! alpha i #\\c)))\n    (do ((i 0 (+ i 1)))\n        ((< i s))\n     \
    \ (set! alpha (rotate! alpha i #\\d)))\n    (do ((i 0 (+ i 1)))\n        ((< i\
    \ s))\n      (set! alpha (rotate! alpha i #\\e)))\n    (do ((i 0 (+ i 1)))\n \
    \       ((< i s))\n      (set! alpha (rotate! alpha i #\\f)))\n    (do ((i 0 (+\
    \ i 1)))\n        ((< i s))\n      (set! alpha (rotate! alpha i #\\g)))\n    (do\
    \ ((i 0 (+ i 1)))\n        ((< i s))\n      (set! alpha (rotate! alpha i #\\h)))\n\
    \    (do ((i 0 (+ i 1)))\n        ((< i s))\n      (set! alpha (rotate! alpha\
    \ i #\\i)))\n    (do ((i 0 (+ i 1)))\n        ((< i s))\n      (set! alpha (rotate!\
    \ alpha i #\\j)))\n    (do ((i 0 (+ i 1)))\n        ((< i s))\n      (set! alpha\
    \ (rotate! alpha i #\\k)))\n    (do ((i 0 (+ i 1)))\n        ((< i s))\n     \
    \ (set! alpha (rotate! alpha i #\\l)))\n    (do ((i 0 (+ i 1)))\n        ((< i\
    \ s))\n      (set! alpha (rotate! alpha i #\\m)))\n    (do ((i 0 (+ i 1)))\n \
    \       ((< i s))\n      (set! alpha (rotate! alpha i #\\n)))\n    (do ((i 0 (+\
    \ i 1)))\n        ((< i s))\n      (set! alpha (rotate! alpha i #\\o)))\n    (do\
    \ ((i 0 (+ i 1)))\n        ((< i s))\n      (set! alpha (rotate! alpha i #\\p)))\n\
    \    (do ((i 0 (+ i 1)))\n        ((< i s))\n      (", "  (let loop ((s s)\n \
    \            (result '()))\n    (if (empty? s)\n        result\n        (loop\
    \ (rest s)\n              (cons (first s)\n                    (loop (rest s)\n\
    \                          (cons (second s)\n                                result)))))))\n",
  "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (let loop ((s s)\n\
    \               (alpha (make-array 26 :initial-element #\\a)))\n      (cond\n\
    \        ((null? s) (list s))\n        ((char= (first s) #\\a) (list s))\n   \
    \     (else (loop (rest s) (rotate! alpha (car s))))))))\n", "  (let ((alpha (make-array\
    \ 26)))\n    (set! alpha (rotate-array alpha '(a b c d e f g h i j k l m n o p\
    \ q r s t u v w x y z)))\n    (string-append (map alpha (string->list s)))))\n",
  "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for i from 0\
    \ to (length s) do\n      (let ((alpha (make-array 26 :initial-element #\\a)))\n\
    \        (loop for j from 0 to (length s) do\n          (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n            (loop for k from 0 to (length s) do\n\
    \              (let ((alpha (make-array 26 :initial-element #\\a)))\n        \
    \        (loop for l from 0 to (length s) do\n                  (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n                    (loop for m from 0 to (length\
    \ s) do\n                      (let ((alpha (make-array 26 :initial-element #\\\
    a)))\n                        (loop for n from 0 to (length s) do\n          \
    \                (let ((alpha (make-array 26 :initial-element #\\a)))\n      \
    \                      (loop for o from 0 to (length s) do\n                 \
    \             (let ((alpha (make-array 26 :initial-element #\\a)))\n         \
    \                       (loop for p from 0 to (length s) do\n                \
    \                  (let ((alpha (make-array 26 :initial-element #\\a)))\n    \
    \                                (loop for q from 0 to (length s) do\n       \
    \                               (let ((alpha (make-array 26 :initial-element #\\\
    a)))\n                                        (loop for r from 0 to (length s)\
    \ do\n                                          (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n                                            (loop for s from  0 to\
    \ (length s) do\n                                              (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n                                              \
    \  (loop for t from 0 to (length s) do\n                                     \
    \             (let ((alpha (make-array 26 :initial-element #\\a)))\n         \
    \                                           (loop for u from 0 to (length s) do\n\
    \                                                      (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n                                              \
    \          (loop for v from 0 to (length s) do\n                             \
    \                             (let ((alpha (make-array 26 :initial-element #\\\
    a)))\n                                                            (loop for w\
    \ from 0 to (length s) do\n                                                  \
    \            (let ((alpha (make-array 26 :initial-element #\\a)))\n          \
    \                                                      (loop for x from 0 to (length\
    \ s) do\n                                                                  (let\
    \ ((alpha (make-array 26 :initial-element #\\a)))\n                          \
    \                                          (loop for y from 0 to (length s) do\n\
    \                                                                      (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n                                  \
    \                                      (loop for z from 0 to ", "  (let ((alpha\
    \ (make-array 26 \n                          :initial-contents '(#\\a #\\b #\\\
    c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\\
    s #\\t #\\v #\\w #\\x #\\y #\\z)))\n        (shift (make-array 26 \n         \
    \               :initial-contents '(#\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\\
    9 #\\0 #\\+ #\\- #\\* #\\/ #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\\
    0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\\
    0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\\
    0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\\
    0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\\
    0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\\
    0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\\
    0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\\
    0 ", "  (let ((alpha (make-array (length s) (lambda (x) (+ x 2)))))\n    (do ((i\
    \ 0 (+ i 1))\n         (char (car s))\n         (alpha (+ alpha (* i 2))))\n \
    \       ((< i length) (set! alpha (make-array (length s) (lambda (x) (+ x 2))))\n\
    \        (set! alpha (+ alpha (* i 2))))\n    (let ((alpha (make-array (length\
    \ s) (lambda (x) (+ x 2)))))\n      (do ((i 0 (+ i 1))\n           (char (car\
    \ s))\n           (alpha (+ alpha (* i 2))))\n        ((< i length) (set! alpha\
    \ (make-array (length s) (lambda (x) (+ x 2))))\n        (set! alpha (+ alpha\
    \ (* i 2))))\n    (let ((alpha (make-array (length s) (lambda (x) (+ x 2)))))\n\
    \      (do ((i 0 (+ i 1))\n           (char (car s))\n           (alpha (+ alpha\
    \ (* i 2))))\n        ((< i length) (set! alpha (make-array (length s) (lambda\
    \ (x) (+ x 2))))\n        (set! alpha (+ alpha (* i 2))))\n    (let ((alpha (make-array\
    \ (length s) (lambda (x) (+ x 2)))))\n      (do ((i 0 (+ i 1))\n           (char\
    \ (car s))\n           (alpha (+ alpha (* i 2))))\n        ((< i length) (set!\
    \ alpha (make-array (length s) (lambda (x) (+ x 2))))\n        (set! alpha (+\
    \ alpha (* i 2))))\n    (let ((alpha (make-array (length s) (lambda (x) (+ x 2)))))\n\
    \      (do ((i 0 (+ i 1))\n           (char (car s))\n           (alpha (+ alpha\
    \ (* i 2))))\n        ((< i length) (set! alpha (make-array (length s) (lambda\
    \ (x) (+ x 2))))\n        (set! alpha (+ alpha (* i 2))))\n    (let ((alpha (make-array\
    \ (length s) (lambda (x) (+ x 2)))))\n      (do ((i 0 (+ i 1))\n           (char\
    \ (car s))\n           (alpha (+ alpha (* i 2))))\n        ((< i length) (set!\
    \ alpha (make-array (length s) (lambda (x) (+ x 2))))\n        (set! alpha (+\
    \ alpha (* i 2))))\n    (let ((alpha (make-array (", "  (let loop ((s s)\n   \
    \          (a #(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\\
    m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z))\n            \
    \ (r #\\a))\n    (if (null? s)\n        (reverse r)\n        (loop (cdr s)\n \
    \             (cons (car s)\n                    (loop (cdr s)\n             \
    \             (cons (car s)\n                                (cons (car s)\n \
    \                                     (loop (cdr s)\n                        \
    \                     (cons (car s)\n                                        \
    \          (cons (car s)\n                                                   \
    \     (loop (cdr s)\n                                                        \
    \       r)))))))))))\n", "  (let ((alpha (make-array 26)))\n    (set! alpha (rotate-array\
    \ alpha '(a b c d e f g h i j k l m n o p q r s t u v w x y z)))\n    (cond [(empty?\
    \ s) \"\"]\n          [(char-alphabet (first s)) (char-alphabet (first s))]\n\
    \          [else (append (substring s 0 (- (length s) 2))\n                  \
    \    (substring s (- (length s) 2))\n                      (substring s 0 (- (length\
    \ s) 2))\n                      (substring s (- (length s) 2))\n             \
    \         (substring s (- (length s) 2))\n                      (substring s (-\
    \ (length s) 2))\n                      (substring s (- (length s) 2))\n     \
    \                 (substring s (- (length s) 2))\n                      (substring\
    \ s (- (length s) 2))\n                      (substring s (- (length s) 2))\n\
    \                      (substring s (- (length s) 2))\n                      (substring\
    \ s (- (length s) 2))\n                      (substring s (- (length s) 2))\n\
    \                      (substring s (- (length s) 2))\n                      (substring\
    \ s (- (length s) 2))\n                      (substring s (- (length s) 2))\n\
    \                      (substring s (- (length s) 2))\n                      (substring\
    \ s (- (length s) 2))\n                      (substring s (- (length s) 2))\n\
    \                      (substring s (- (length s) 2))\n                      (substring\
    \ s (- (length s) 2))\n                      (substring s (- (length s) 2))\n\
    \                      (substring s (- (length s) 2))\n                      (substring\
    \ s (- (length s) 2))\n                      (substring s (- (length s) 2))\n\
    \                      (substring s (- (length s) 2))\n                      (substring\
    \ s (- (length s) 2))\n                      (substring s (- (length s) 2))\n\
    \                      (substring s (- (length s) 2))\n                      (substring\
    \ s (- (length s) 2))\n                      (substring s (- (length s) 2))\n\
    \                      (substring s (- (length s) 2))\n                      (substring\
    \ s (- (length s) 2))\n                      (substring s (- (length s) 2))\n\
    \                      (substring s (- (length s) 2))\n                      (substring\
    \ s (- (length s) 2))\n                      (substring s (- (length s) 2))\n\
    \                      (substring s (- (length s) 2))\n                      (substring\
    \ s (- (length s) 2))\n                      (substring s (- (length s) 2))\n\
    \                      (substring s (- (length s) 2))\n                      (substring\
    \ s (- (length s) 2))\n                      (substring s (- (length s) ", " \
    \ (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for i from 0\
    \ to (length s) do\n      (let ((char (char-code (substring s i i))))\n      \
    \  (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! ", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n\
    \    (loop for i from 0 to (length s) by 2\n          for j from 0 to (length\
    \ s) by 2\n          collect (substring alpha (+ (char-code (char s i)) 2)\n \
    \                          (+ (char-code (char s j)) 2)))))\n", "  (let loop ((s\
    \ s)\n             (result '()))\n    (cond ((null? s) result)\n          ((char=?\
    \ (car s) 'a) (loop (cdr s) (cons (car s) result)))\n          ((char=? (car s)\
    \ 'b) (loop (cdr s) (cons (car s) (cons (car s) result))))\n          ((char=?\
    \ (car s) 'c) (loop (cdr s) (cons (car s) (cons (car s) (cons (car s) result))))\n\
    \          ((char=? (car s) 'd) (loop (cdr s) (cons (car s) (cons (car s) (cons\
    \ (car s) (cons (car s) result))))))\n    (loop (cdr s) result)))\n", "  (let\
    \ ((alpha (make-array 26)))\n    (set! alpha (rotate! alpha 'a))\n    (set! alpha\
    \ (rotate! alpha 'b))\n    (set! alpha (rotate! alpha 'c))\n    (set! alpha (rotate!\
    \ alpha 'd))\n    (set! alpha (rotate! alpha 'e))\n    (set! alpha (rotate! alpha\
    \ 'f))\n    (set! alpha (rotate! alpha 'g))\n    (set! alpha (rotate! alpha 'h))\n\
    \    (set! alpha (rotate! alpha 'i))\n    (set! alpha (rotate! alpha 'j))\n  \
    \  (set! alpha (rotate! alpha 'k))\n    (set! alpha (rotate! alpha 'l))\n    (set!\
    \ alpha (rotate! alpha 'm))\n    (set! alpha (rotate! alpha 'n))\n    (set! alpha\
    \ (rotate! alpha 'o))\n    (set! alpha (rotate! alpha 'p))\n    (set! alpha (rotate!\
    \ alpha 'q))\n    (set! alpha (rotate! alpha 'r))\n    (set! alpha (rotate! alpha\
    \ 's)))\n  (string-append (encrypt (substring s 0 1)) \n                (encrypt\
    \ (substring s 1 2))\n                (encrypt (substring s 2 3))\n          \
    \      (encrypt (substring s 3 4))\n                (encrypt (substring s 4 5))\n\
    \                (encrypt (substring s 5 6))\n                (encrypt (substring\
    \ s 6 7))\n                (encrypt (substring s 7 8))\n                (encrypt\
    \ (substring s 8 9))\n                (encrypt (substring s 9 10))\n         \
    \       (encrypt (substring s 10 11))\n                (encrypt (substring s 11\
    \ 12))\n                (encrypt (substring s 12 13))\n                (encrypt\
    \ (substring s 13 14))\n                (encrypt (substring s 14 15))\n      \
    \          (encrypt (substring s 15 16))\n                (encrypt (substring\
    \ s 16 17))\n                (encrypt (substring s 17 18))\n                (encrypt\
    \ (substring s 18 19))\n                (encrypt (substring s 19 20))\n      \
    \          (encrypt (substring s 20 21))\n                (encrypt (substring\
    \ s 21 22))\n                (encrypt (substring s 22 23))\n                (encrypt\
    \ (substring s 23 24))\n                (encrypt (substring s 24 25))\n      \
    \          (encrypt (substring s 25 26))))\n", "  (let ((alpha (make-array 26)))\n\
    \    (loop for i from 0 to (length s) do\n      (let ((alpha (make-array 26)))\n\
    \        (loop for j from 0 to (length s) do\n          (set! alpha (substring\
    \ alpha (+ j i) (+ j i)))\n          (set! alpha (substring alpha (+ j i) (+ j\
    \ i)))\n          (set! alpha (substring alpha (+ j i) (+ j i)))\n          (set!\
    \ alpha (substring alpha (+ j i) (+ j i)))\n          (set! alpha (substring alpha\
    \ (+ j i) (+ j i)))\n          (set! alpha (substring alpha (+ j i) (+ j i)))\n\
    \          (set! alpha (substring alpha (+ j i) (+ j i)))\n          (set! alpha\
    \ (substring alpha (+ j i) (+ j i)))\n          (set! alpha (substring alpha (+\
    \ j i) (+ j i)))\n          (set! alpha (substring alpha (+ j i) (+ j i)))\n \
    \         (set! alpha (substring alpha (+ j i) (+ j i)))\n          (set! alpha\
    \ (substring alpha (+ j i) (+ j i)))\n          (set! alpha (substring alpha (+\
    \ j i) (+ j i)))\n          (set! alpha (substring alpha (+ j i) (+ j i)))\n \
    \         (set! alpha (substring alpha (+ j i) (+ j i)))\n          (set! alpha\
    \ (substring alpha (+ j i) (+ j i)))\n          (set! alpha (substring alpha (+\
    \ j i) (+ j i)))\n          (set! alpha (substring alpha (+ j i) (+ j i)))\n \
    \         (set! alpha (substring alpha (+ j i) (+ j i)))\n          (set! alpha\
    \ (substring alpha (+ j i) (+ j i)))\n          (set! alpha (substring alpha (+\
    \ j i) (+ j i)))\n          (set! alpha (substring alpha (+ j i) (+ j i)))\n \
    \         (set! alpha (substring alpha (+ j i) (+ j i)))\n          (set! alpha\
    \ (substring alpha (+ j i) (+ j i)))\n          (set! alpha (substring alpha (+\
    \ j i) (", "  (let ((alpha (make-array (length s) #:initial-element #\\a)))\n\
    \    (dotimes (i (length s))\n      (set! alpha (rotate! alpha (i) (i + 1))))\n\
    \    (apply (lambda (x) (char-code (char x 0))) s))\n  ", "  (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n    (loop for c across s\n          for i from\
    \ 0\n          for j from (- i 2)\n          collect (alpha (+ i j) (char->integer\
    \ (char->string c))))))\n", "  (let ((alpha (make-array 26 :initial-element #\\\
    a)))\n    (loop for i from 0 to (length s) do\n      (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n        (loop for j from 0 to (length s) do\n \
    \         (set! alpha (rotate! alpha j))\n          (set! alpha (rotate! alpha\
    \ (- j 2)))\n          (set! alpha (rotate! alpha (- i 2)))\n          (set! alpha\
    \ (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- j 1)))\n \
    \         (set! alpha (rotate! alpha (- j 2)))\n          (set! alpha (rotate!\
    \ alpha (- i 2)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- j 1)))\n          (set! alpha (rotate! alpha (- j 2)))\n\
    \          (set! alpha (rotate! alpha (- i 2)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- j 1)))\n          (set!\
    \ alpha (rotate! alpha (- j 2)))\n          (set! alpha (rotate! alpha (- i 2)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- j 1)))\n          (set! alpha (rotate! alpha (- j 2)))\n          (set!\
    \ alpha (rotate! alpha (- i 2)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- j 1)))\n          (set! alpha (rotate!\
    \ alpha (- j 2)))\n          (set! alpha (rotate! alpha (- i 2)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- j 1)))\n\
    \          (set! alpha (rotate! alpha (- j 2)))\n          (set! alpha (rotate!\
    \ alpha (- i 2)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- j 1)))\n          (set! alpha (rotate! alpha (- j 2)))\n\
    \          (set! alpha (rotate! alpha (- i 2)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- j ", "  (let ((alpha\
    \ (make-array 26 \n                          :initial-contents (list 'a \n   \
    \                                              'b \n                         \
    \                        'c \n                                               \
    \  'd \n                                                 'e \n               \
    \                                  'f \n                                     \
    \            'g \n                                                 'h \n     \
    \                                            'i \n                           \
    \                      'j \n                                                 'k\
    \ \n                                                 'l \n                   \
    \                              'm \n                                         \
    \        'n \n                                                 'o \n         \
    \                                        'p \n                               \
    \                  'q \n                                                 'r \n\
    \                                                 's \n                      \
    \                           't \n                                            \
    \     'u \n                                                 'v \n            \
    \                                     'w \n                                  \
    \               'x \n                                                 'y \n  \
    \                                               'z)))\n        (shift (make-array\
    \ 26 \n                        :initial-contents (list 'a \n                 \
    \                              'b \n                                         \
    \      'c \n                                               'd \n             \
    \                                  'e \n                                     \
    \          'f \n                                               'g \n         \
    \                                      'h \n                                 \
    \              'i \n                                               'j \n     \
    \                                          'k \n                             \
    \                  'l \n                                               'm \n \
    \                                              'n \n                         \
    \                      'o \n                                               'p\
    \ \n                                               'q \n                     \
    \                          'r \n                                             \
    \  's \n                                               't \n                 \
    \                              'u \n                                         \
    \      'v \n                                               'w \n             \
    \                                  'x \n                                     \
    \          'y \n                                               'z))))\n      \
    \  (result (make-array (length s) \n                          :initial-contents\
    \ '())))\n    (loop for i from 0 to (length s) do\n          (set! result (append\
    \ result (list (char->integer (char-code (substring s i 1))\n                \
    \                                (substring alpha (char->integer (char-code (substring\
    \ s i 1))\n                                                                  \
    \          (char-code (substring s i (+ i 1)))))))))\n    (set! result (append\
    \ result (list (char->integer (char-code (substring s 0 0))\n                \
    \                              (substring alpha (char->integer (char-code (substring\
    \ s 0 0))\n                                                                  \
    \  (char-code (substring s 0 (+ 0 0)))))))))\n    (set! result (append result\
    \ (list (char->integer (char-code (substring s 1 1))\n                       \
    \                       (substring alpha (char->integer (char-code (substring\
    \ s 1 1))\n                                                                  \
    \  (char-code (substring s 1 (+ 1 1)))))))))\n    (set! result (append result\
    \ (list (char->integer (char-code (substring s 2 2))\n                       \
    \                       (substring alpha (char->integer (char-code (substring\
    \ s 2 2))\n                                                                  \
    \  (char-code (substring s 2 (+ 2 2)))))))))\n    (set! result (append result\
    \ (list (char->integer", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n\
    \    (loop for i from 0 to (length s) do\n      (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n        (loop for j from 0 to (length s) do\n          (set! alpha\
    \ (rotate! alpha j))\n          (set! alpha (rotate! alpha (+ i 1)))\n       \
    \   (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha\
    \ (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha\
    \ (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n \
    \         (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set!\
    \ alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n\
    \          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set!\
    \ alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n\
    \          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set!\
    \ alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n\
    \          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set!\
    \ alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n\
    \          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set!\
    \ alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n\
    \          (set! alpha (rotate! alpha (+ i ", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (loop for i from 0 to (length s) do\n      (let ((alpha (rotate-array\
    \ alpha i 2)))\n        (set! alpha (rotate-array alpha i -2))\n        (set!\
    \ alpha (rotate-array alpha i 2))\n        (set! alpha (rotate-array alpha i -2))\n\
    \        (set! alpha (rotate-array alpha i 2))\n        (set! alpha (rotate-array\
    \ alpha i -2))\n        (set! alpha (rotate-array alpha i 2))\n        (set! alpha\
    \ (rotate-array alpha i -2))\n        (set! alpha (rotate-array alpha i 2))\n\
    \        (set! alpha (rotate-array alpha i -2))\n        (set! alpha (rotate-array\
    \ alpha i 2))\n        (set! alpha (rotate-array alpha i -2))\n        (set! alpha\
    \ (rotate-array alpha i 2))\n        (set! alpha (rotate-array alpha i -2))\n\
    \        (set! alpha (rotate-array alpha i 2))\n        (set! alpha (rotate-array\
    \ alpha i -2))\n        (set! alpha (rotate-array alpha i 2))\n        (set! alpha\
    \ (rotate-array alpha i -2))\n        (set! alpha (rotate-array alpha i 2))\n\
    \        (set! alpha (rotate-array alpha i -2))\n        (set! alpha (rotate-array\
    \ alpha i 2))\n        (set! alpha (rotate-array alpha i -2))\n        (set! alpha\
    \ (rotate-array alpha i 2))\n        (set! alpha (rotate-array alpha i -2))\n\
    \        (set! alpha (rotate-array alpha i 2))\n        (set! alpha (rotate-array\
    \ alpha i -2))\n        (set! alpha (rotate-array alpha i 2))\n        (set! alpha\
    \ (rotate-array alpha i -2))\n        (set! alpha (rotate-array alpha i 2))\n\
    \        (set! alpha (rotate-array alpha i -2))\n        (set! alpha (rotate-array\
    \ alpha i 2))\n        (set! alpha (rotate-array alpha i -2))\n        (set! alpha\
    \ (rotate-array alpha i 2))\n        (set! alpha (rotate-array alpha i -2))\n\
    \        (set! alpha (rotate-array alpha i 2))\n        (set! alpha (rotate-array\
    \ alpha i -2))\n        (set! alpha (rotate-array alpha i 2))\n        (set! alpha\
    \ (rotate-array alpha i -2))\n        (set! alpha (rotate-array alpha i ", " \
    \ (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for i from 0\
    \ to (length s) do\n      (let ((char (char-code (substring s i i))))\n      \
    \  (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! ", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n\
    \    (let loop ((i 0) (alpha (make-array 26 :initial-element #\\a)))\n      (if\
    \ (< i 26)\n          (let ((j (modulo i 26)))\n            (set! alpha (subarray\
    \ alpha 0 j) (subarray alpha j 1))\n            (set! alpha (subarray alpha j)\
    \ (subarray alpha 0 j))\n            (loop (+ i 1) alpha))\n          (set! alpha\
    \ (subarray alpha 0 i) (subarray alpha i 1))\n          (set! alpha (subarray\
    \ alpha i) (subarray alpha 0 i))\n          (loop (+ i 1) alpha))))\n    (loop\
    \ (length s) alpha)))\n", "  (let ((alpha (make-array 26 :initial-element #\\\
    a)))\n    (loop for i from 0 to (length s) do\n      (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n        (loop for j from 0 to (length s) do\n \
    \         (let ((alpha (make-array 26 :initial-element #\\a)))\n            (if\
    \ (= i j)\n                (set! alpha (rotate! alpha #\\a))\n               \
    \ (set! alpha (rotate! alpha #\\b))\n                (set! alpha (rotate! alpha\
    \ #\\c))\n                (set! alpha (rotate! alpha #\\d))\n                (set!\
    \ alpha (rotate! alpha #\\e))\n                (set! alpha (rotate! alpha #\\\
    f))\n                (set! alpha (rotate! alpha #\\g))\n                (set!\
    \ alpha (rotate! alpha #\\h))\n                (set! alpha (rotate! alpha #\\\
    i))\n                (set! alpha (rotate! alpha #\\j))\n                (set!\
    \ alpha (rotate! alpha #\\k))\n                (set! alpha (rotate! alpha #\\\
    l))\n                (set! alpha (rotate! alpha #\\m))\n                (set!\
    \ alpha (rotate! alpha #\\n))\n                (set! alpha (rotate! alpha #\\\
    o))\n                (set! alpha (rotate! alpha #\\p))\n                (set!\
    \ alpha (rotate! alpha #\\q))\n                (set! alpha (rotate! alpha #\\\
    r))\n                (set! alpha (rotate! alpha #\\s))\n                (set!\
    \ alpha (rotate! alpha #\\t))\n                (set! alpha (rotate! alpha #\\\
    u))\n                (set! alpha (rotate! alpha #\\v))\n                (set!\
    \ alpha (rotate! alpha #\\w))\n                (set! alpha (rotate! alpha #\\\
    x))\n                (set! alpha (rotate! alpha #\\y))\n                (set!\
    \ alpha (rotate! alpha #\\z))\n                (set! alpha (rotate! alpha #\\\
    0))\n                (set! alpha (rotate! alpha #\\1))\n                (set!\
    \ alpha (rotate! alpha #\\2))\n                (set! alpha (rotate! alpha #\\\
    3))\n                (set! alpha (rotate! alpha #\\4))\n                (set!\
    \ alpha (rotate! alpha #\\5))\n                (set! alpha (rotate! alpha #\\\
    6))\n                (set! alpha (rotate! alpha #\\7))\n                (set!\
    \ alpha (rotate! alpha #\\8))\n                (set! alpha (rotate", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n    (cond [(empty? s) \"\"]\n     \
    \     [(char-alphabet (first s)) (char-alphabet (first s))]\n          [(char-alphabet\
    \ (first s)) (char-alphabet (first s))]\n          [(char-alphabet (first s))\
    \ (char-alphabet (first s))]\n          [(char-alphabet (first s)) (char-alphabet\
    \ (first s))]\n          [(char-alphabet (first s)) (char-alphabet (first s))]\n\
    \          [(char-alphabet (first s)) (char-alphabet (first s))]\n          [(char-alphabet\
    \ (first s)) (char-alphabet (first s))]\n          [(char-alphabet (first s))\
    \ (char-alphabet (first s))]\n          [(char-alphabet (first s)) (char-alphabet\
    \ (first s))]\n          [(char-alphabet (first s)) (char-alphabet (first s))]\n\
    \          [(char-alphabet (first s)) (char-alphabet (first s))]\n          [(char-alphabet\
    \ (first s)) (char-alphabet (first s))]\n          [(char-alphabet (first s))\
    \ (char-alphabet (first s))]\n          [(char-alphabet (first s)) (char-alphabet\
    \ (first s))]\n          [(char-alphabet (first s)) (char-alphabet (first s))]\n\
    \          [(char-alphabet (first s)) (char-alphabet (first s))]\n          [(char-alphabet\
    \ (first s)) (char-alphabet (first s))]\n          [(char-alphabet (first s))\
    \ (char-alphabet (first s))]\n          [(char-alphabet (first s)) (char-alphabet\
    \ (first s))]\n          [(char-alphabet (first s)) (char-alphabet (first s))]\n\
    \          [(char-alphabet (first s)) (char-alphabet (first s))]\n          [(char-alphabet\
    \ (first s)) (char-alphabet (first s))]\n          [(char-alphabet (first s))\
    \ (char-alphabet (first s))]\n          [(char-alphabet (first s)) (char-alphabet\
    \ (first s))]\n          [(char-alphabet (first s)) (char-alphabet (first s))]\n\
    \          [(char-alphabet (first s)) (char", "  (let ((alpha (make-alphabet (length\
    \ s))))\n    (let loop ((i 0) (alpha (make-alphabet (length s))))\n      (if (<\
    \ i length)\n          (let ((alpha (make-alphabet (length s))))\n           \
    \ (loop (+ i 1) (rotate-alpha (substring alpha (* i 2) (* i 2)) alpha))\n    \
    \        (substring alpha (* i 2) (* i 2))))\n          (substring alpha (* i\
    \ 2) (* i 2))))))\n", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n\
    \    (cond [(empty? s) \"\"]\n          [(char-alphabet (first s)) (char-alphabet\
    \ (first s))]\n          [(char-alphabet (first s)) (char-alphabet (first s))]\n\
    \          [(char-alphabet (first s)) (char-alphabet (first s))]\n          [(char-alphabet\
    \ (first s)) (char-alphabet (first s))]\n          [(char-alphabet (first s))\
    \ (char-alphabet (first s))]\n          [(char-alphabet (first s)) (char-alphabet\
    \ (first s))]\n          [(char-alphabet (first s)) (char-alphabet (first s))]\n\
    \          [(char-alphabet (first s)) (char-alphabet (first s))]\n          [(char-alphabet\
    \ (first s)) (char-alphabet (first s))]\n          [(char-alphabet (first s))\
    \ (char-alphabet (first s))]\n          [(char-alphabet (first s)) (char-alphabet\
    \ (first s))]\n          [(char-alphabet (first s)) (char-alphabet (first s))]\n\
    \          [(char-alphabet (first s)) (char-alphabet (first s))]\n          [(char-alphabet\
    \ (first s)) (char-alphabet (first s))]\n          [(char-alphabet (first s))\
    \ (char-alphabet (first s))]\n          [(char-alphabet (first s)) (char-alphabet\
    \ (first s))]\n          [(char-alphabet (first s)) (char-alphabet (first s))]\n\
    \          [(char-alphabet (first s)) (char-alphabet (first s))]\n          [(char-alphabet\
    \ (first s)) (char-alphabet (first s))]\n          [(char-alphabet (first s))\
    \ (char-alphabet (first s))]\n          [(char-alphabet (first s)) (char-alphabet\
    \ (first s))]\n          [(char-alphabet (first s)) (char-alphabet (first s))]\n\
    \          [(char-alphabet (first s)) (char-alphabet (first s))]\n          [(char-alphabet\
    \ (first s)) (char-alphabet (first s))]\n          [(char-alphabet (first s))\
    \ (char-alphabet (first s))]\n          [(char-alphabet (first s)) (char", " \
    \ (let ((alpha (make-array 26 \n                          :initial-contents \n\
    \                          (lambda (x) (char->integer (char->string x)))))\n \
    \       (shift (make-array 26 \n                       :initial-contents \n  \
    \                     (lambda (x) (char->integer (char->string x)))))\n    (let\
    \ loop ((i 0) (acc ''))\n      (if (< i 26)\n          (let ((char (char->string\
    \ (car s))))\n            (set! acc (append acc (substring alpha (+ char (char->integer\
    \ shift)))))\n            (set! shift (substring shift (+ char (char->integer\
    \ shift))))\n            (set! s (cdr s))\n            (loop (+ i 1) acc))\n \
    \         (set! acc (append acc (substring alpha (+ i (char->integer shift)))))\n\
    \          (set! shift (substring shift (+ i (char->integer shift))))\n      \
    \    (set! s (cdr s))\n          (loop (+ i 1) acc))))))\n", "  (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n    (loop for i from 0 to (length s) do\n     \
    \ (let ((char (char-code (char s i))))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char", "  (cond\
    \ [(empty? s) \"\"]\n        [(equal? (first s) \"a\") (cons (first s) (encrypt\
    \ (rest s)))]\n        [(equal? (first s) \"b\") (cons (first s) (encrypt (rest\
    \ s)))]\n        [(equal? (first s) \"c\") (cons (first s) (encrypt (rest s)))]\n\
    \        [(equal? (first s) \"d\") (cons (first s) (encrypt (rest s)))]\n    \
    \    [(equal? (first s) \"e\") (cons (first s) (encrypt (rest s)))]\n        [(equal?\
    \ (first s) \"f\") (cons (first s) (encrypt (rest s)))]\n        [(equal? (first\
    \ s) \"g\") (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) \"\
    h\") (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) \"i\") (cons\
    \ (first s) (encrypt (rest s)))]\n        [(equal? (first s) \"j\") (cons (first\
    \ s) (encrypt (rest s)))]\n        [(equal? (first s) \"k\") (cons (first s) (encrypt\
    \ (rest s)))]\n        [(equal? (first s) \"l\") (cons (first s) (encrypt (rest\
    \ s)))]\n        [(equal? (first s) \"m\") (cons (first s) (encrypt (rest s)))]\n\
    \        [(equal? (first s) \"n\") (cons (first s) (encrypt (rest s)))]\n    \
    \    [(equal? (first s) \"o\") (cons (first s) (encrypt (rest s)))]\n        [(equal?\
    \ (first s) \"p\") (cons (first s) (encrypt (rest s)))]\n        [(equal? (first\
    \ s) \"q\") (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) \"\
    r\") (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) \"s\") (cons\
    \ (first s) (encrypt (rest s)))]\n        [(equal? (first s) \"t\") (cons (first\
    \ s) (encrypt (rest s)))]\n        [(equal? (first s) \"u\") (cons (first s) (encrypt\
    \ (rest s)))]\n        [(equal? (first s) \"v\") (cons (first s) (encrypt (rest\
    \ s)))]\n        [(equal? (first s) \"w\") (cons (first s) (encrypt (rest s)))",
  "  (let ((alpha (make-array 26 \n                          :initial-contents '(a\
    \ b c d e f g h i j k l m n o p q r s t u v w x y z))))\n    (let loop ((i 0))\n\
    \      (cond\n        ((null? s) (list \"\"))\n        ((= i (length s)) (list\
    \ s))\n        (else (let ((char (car s))\n                  (alpha (sub1 alpha)))\n\
    \              (set! alpha (sub1 alpha))\n              (set! alpha (sub1 alpha))\n\
    \              (set! alpha (sub1 alpha))\n              (set! alpha (sub1 alpha))\n\
    \              (set! alpha (sub1 alpha))\n              (set! alpha (sub1 alpha))\n\
    \              (set! alpha (sub1 alpha))\n              (set! alpha (sub1 alpha))\n\
    \              (set! alpha (sub1 alpha))\n              (set! alpha (sub1 alpha))\n\
    \              (set! alpha (sub1 alpha))\n              (set! alpha (sub1 alpha))\n\
    \              (set! alpha (sub1 alpha))\n              (set! alpha (sub1 alpha))\n\
    \              (set! alpha (sub1 alpha))\n              (set! alpha (sub1 alpha))\n\
    \              (set! alpha (sub1 alpha))\n              (set! alpha (sub1 alpha))\n\
    \              (set! alpha (sub1 alpha))\n              (set! alpha (sub1 alpha))\n\
    \              (set! alpha (sub1 alpha))\n              (set! alpha (sub1 alpha))\n\
    \              (set! alpha (sub1 alpha))\n              (set! alpha (sub1 alpha))\n\
    \              (set! alpha (sub1 alpha))\n              (set! alpha (sub1 alpha))\n\
    \              (set! alpha (sub1 alpha))\n              (set! alpha (sub1 alpha))\n\
    \              (set! alpha (sub1 alpha))\n              (set! alpha (sub1 alpha))\n\
    \              (set! alpha (sub1 alpha))\n              (set! alpha (sub1 alpha))\n\
    \              (set! alpha (sub1 alpha))\n              (set! alpha (sub1 alpha))\n\
    \              (set! alpha (sub1 alpha))\n              (set! alpha (sub1 alpha))\n\
    \              (set! alpha (sub1 alpha))\n              (set! alpha (sub1 alpha))\n\
    \              ", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n  \
    \  (cond [(empty? s) \"\"]\n          [(char-alphabetic? s) (cons (char-alphabetic?\
    \ (first s)) (encrypt (rest s)))]\n          [(char-alphabetic? (first s)) (cons\
    \ (char-alphabetic? (first s)) (encrypt (rest s)))]\n          [(char-alphabetic?\
    \ (first s)) (cons (char-alphabetic? (first s)) (encrypt (rest s)))]\n       \
    \   [(char-alphabetic? (first s)) (cons (char-alphabetic? (first s)) (encrypt\
    \ (rest s)))]\n          [(char-alphabetic? (first s)) (cons (char-alphabetic?\
    \ (first s)) (encrypt (rest s)))]\n          [(char-alphabetic? (first s)) (cons\
    \ (char-alphabetic? (first s)) (encrypt (rest s)))]\n          [(char-alphabetic?\
    \ (first s)) (cons (char-alphabetic? (first s)) (encrypt (rest s)))]\n       \
    \   [(char-alphabetic? (first s)) (cons (char-alphabetic? (first s)) (encrypt\
    \ (rest s)))]\n          [(char-alphabetic? (first s)) (cons (char-alphabetic?\
    \ (first s)) (encrypt (rest s)))]\n          [(char-alphabetic? (first s)) (cons\
    \ (char-alphabetic? (first s)) (encrypt (rest s)))]\n          [(char-alphabetic?\
    \ (first s)) (cons (char-alphabetic? (first s)) (encrypt (rest s)))]\n       \
    \   [(char-alphabetic? (first s)) (cons (char-alphabetic? (first s)) (encrypt\
    \ (rest s)))]\n          [(char-alphabetic? (first s)) (cons (char-alphabetic?\
    \ (first s)) (encrypt (rest s)))]\n          [(char-alphabetic? (first s)) (cons\
    \ (char-alphabetic? (first s)) (encrypt (rest s)))]\n          [(char-alphabetic?\
    \ (first s)) (cons (char-alphabetic? (first s)) (encrypt (rest s)))]\n       \
    \   [(char-alphabetic? (first s)) (cons (char-alphabetic? (first s)) (encrypt\
    \ (rest s)))]\n          [(char-alphabetic? (first s)) (cons (char-alphabetic?\
    \ (first s)) (en", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n \
    \   (loop for i from 0 to (length s) by 2\n          for j from 0 to (length s)\
    \ by 2\n          collect (substring alpha (+ (* i 2) (* j 2))\n             \
    \              (+ (* i 2) (* j 2)))))\n  ", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (loop for c across s\n          for i from 0 to 26\n          for\
    \ j from 0 to 26\n          when (char=? c alpha)\n          collect (cond ((char=?\
    \ c #\\a) (rotate! alpha i j))\n                       ((char=? c #\\b) (rotate!\
    \ alpha i j))\n                       ((char=? c #\\c) (rotate! alpha i j))\n\
    \                       ((char=? c #\\d) (rotate! alpha i j))\n              \
    \         ((char=? c #\\e) (rotate! alpha i j))\n                       ((char=?\
    \ c #\\f) (rotate! alpha i j))\n                       ((char=? c #\\g) (rotate!\
    \ alpha i j))\n                       ((char=? c #\\h) (rotate! alpha i j))\n\
    \                       ((char=? c #\\i) (rotate! alpha i j))\n              \
    \         ((char=? c #\\j) (rotate! alpha i j))\n                       ((char=?\
    \ c #\\k) (rotate! alpha i j))\n                       ((char=? c #\\l) (rotate!\
    \ alpha i j))\n                       ((char=? c #\\m) (rotate! alpha i j))\n\
    \                       ((char=? c #\\n) (rotate! alpha i j))\n              \
    \         ((char=? c #\\o) (rotate! alpha i j))\n                       ((char=?\
    \ c #\\p) (rotate! alpha i j))\n                       ((char=? c #\\q) (rotate!\
    \ alpha i j))\n                       ((char=? c #\\r) (rotate! alpha i j))\n\
    \                       ((char=? c #\\s) (rotate! alpha i j))\n              \
    \         ((char=? c #\\t) (rotate! alpha i j))\n                       ((char=?\
    \ c #\\v) (rotate! alpha i j))\n                       ((char=? c #\\w) (rotate!\
    \ alpha i j))\n                       ((char=? c #\\x) (rotate! alpha i j))\n\
    \                       ((char=? c #\\y) (rotate! alpha i j))\n              \
    \         ((char=? c #\\z) (rotate! alpha i j))\n                       ((char=?\
    \ c #\\A) (rotate! alpha i j))\n                       ((char=? c #\\B) (rotate!\
    \ alpha i j))\n                       ((char=? c #\\C) (", "  (let ((alpha (make-array\
    \ 26 \n                          :initial-contents \n                        \
    \  (lambda (x) (char-code (char x #\\A)))))\n        (shift (make-array 26 \n\
    \                        :initial-contents \n                        (lambda (x)\
    \ (char-code (char x #\\A)))))\n        (result (make-array (length s) \n    \
    \                      :initial-contents \n                          (lambda (x)\
    \ (char-code (char x #\\A)))))\n    (let loop ((i 0) (j 0))\n      (if (< i 26)\n\
    \          (let ((alpha (substring alpha (+ i 1) (+ j 1))))\n            (let\
    \ ((shift (substring shift (+ i 1) (+ j 1))))\n              (set! result (append\
    \ result (map alpha (rotate shift))))\n              (loop (+ i 1) (+ j 1))))\n\
    \          (loop (+ i 1) (+ j 1)))))\n    (string-append result s)))\n", "  (cond\
    \ [(empty? s) \"\"]\n        [(empty? (rest s)) \"\"]\n        [else (cons (first\
    \ s)\n                    (encrypt (rest s)))]))\n", "  (let ((alpha (make-alphabet\
    \ (length s))))\n    (let loop ((i 0) (alpha (make-alphabet (length s))))\n  \
    \    (if (< i length)\n          (let ((char (char-ref s i)))\n            (set!\
    \ alpha (rotate-alpha (char-ref alpha char) (char-ref alpha char)))\n        \
    \    (loop (+ i 1) alpha))\n          (set! alpha (rotate-alpha (char-ref alpha\
    \ char) (char-ref alpha char))\n                (loop (+ i 1) alpha))))))\n",
  "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (let loop ((i 0) (acc\
    \ \"\"))\n      (if (< i (length s))\n          (loop (+ i 1) (cons (char->integer\
    \ (char->string (car s)) alpha) (cons (char->integer (char->string (cdr s)) alpha)\
    \ acc)))\n          acc))))\n", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (loop for i from 0 to (length s) do\n      (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n        (loop for j from 0 to (length s) do\n \
    \         (set! alpha (rotate! alpha j))\n          (set! alpha (rotate! alpha\
    \ (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha\
    \ (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n \
    \         (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set!\
    \ alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n\
    \          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set!\
    \ alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n\
    \          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set!\
    \ alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n\
    \          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set!\
    \ alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n\
    \          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set!\
    \ alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n\
    \          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i ", "  (let ((alpha\
    \ (make-array 26 \n                          :initial-contents '(a b c d e f g\
    \ h i j k l m n o p q r s t u v w x y z))))\n    (cond [(empty? s) \"\"]\n   \
    \       [(char-alphabet (first s)) (char-alphabet (first s))]\n          [(char-alphabet\
    \ (first s)) (char-alphabet (first s))]\n          [(char-alphabet (first s))\
    \ (char-alphabet (first s))]\n          [(char-alphabet (first s)) (char-alphabet\
    \ (first s))]\n          [(char-alphabet (first s)) (char-alphabet (first s))]\n\
    \          [(char-alphabet (first s)) (char-alphabet (first s))]\n          [(char-alphabet\
    \ (first s)) (char-alphabet (first s))]\n          [(char-alphabet (first s))\
    \ (char-alphabet (first s))]\n          [(char-alphabet (first s)) (char-alphabet\
    \ (first s))]\n          [(char-alphabet (first s)) (char-alphabet (first s))]\n\
    \          [(char-alphabet (first s)) (char-alphabet (first s))]\n          [(char-alphabet\
    \ (first s)) (char-alphabet (first s))]\n          [(char-alphabet (first s))\
    \ (char-alphabet (first s))]\n          [(char-alphabet (first s)) (char-alphabet\
    \ (first s))]\n          [(char-alphabet (first s)) (char-alphabet (first s))]\n\
    \          [(char-alphabet (first s)) (char-alphabet (first s))]\n          [(char-alphabet\
    \ (first s)) (char-alphabet (first s))]\n          [(char-alphabet (first s))\
    \ (char-alphabet (first s))]\n          [(char-alphabet (first s)) (char-alphabet\
    \ (first s))]\n          [(char-alphabet (first s)) (char-alphabet (first s))]\n\
    \          [(char-alphabet (first s)) (char-alphabet (first s))]\n          [(char-alphabet\
    \ (first s)) (char-alphabet (first s))]\n          [(char-alphabet (first s))\
    \ (char-alphabet (first s))]\n          [(char-alphabet (first s)) (char-alphabet\
    \ (first s))]\n          [(char", "  (cond [(empty? s) \"\"]\n        [(equal?\
    \ (first s) 'a) (cons (first s) (encrypt (rest s)))]\n        [(equal? (first\
    \ s) 'b) (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) 'c)\
    \ (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) 'd) (cons (first\
    \ s) (encrypt (rest s)))]\n        [(equal? (first s) 'e) (cons (first s) (encrypt\
    \ (rest s)))]\n        [(equal? (first s) 'f) (cons (first s) (encrypt (rest s)))]\n\
    \        [(equal? (first s) 'g) (cons (first s) (encrypt (rest s)))]\n       \
    \ [(equal? (first s) 'h) (cons (first s) (encrypt (rest s)))]\n        [(equal?\
    \ (first s) 'i) (cons (first s) (encrypt (rest s)))]\n        [(equal? (first\
    \ s) 'j) (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) 'k)\
    \ (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) 'l) (cons (first\
    \ s) (encrypt (rest s)))]\n        [(equal? (first s) 'm) (cons (first s) (encrypt\
    \ (rest s)))]\n        [(equal? (first s) 'n) (cons (first s) (encrypt (rest s)))]\n\
    \        [(equal? (first s) 'o) (cons (first s) (encrypt (rest s)))]\n       \
    \ [(equal? (first s) 'p) (cons (first s) (encrypt (rest s)))]\n        [(equal?\
    \ (first s) 'q) (cons (first s) (encrypt (rest s)))]\n        [(equal? (first\
    \ s) 'r) (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) 's)\
    \ (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) 't) (cons (first\
    \ s) (encrypt (rest s)))]\n        [(equal? (first s) 'u) (cons (first s) (encrypt\
    \ (rest s)))]\n        [(equal? (first s) 'v) (cons (first s) (encrypt (rest s)))]\n\
    \        [(equal? (first s) 'w) (cons (first s) (encrypt (rest s)))]\n       \
    \ [(equal? (first s) 'x) (cons (first s) (encrypt (rest s)))]", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n    (loop for c across s\n        \
    \  for i from 0\n          for j from (- i 2)\n          for k from (- j 2)\n\
    \          when (char=? (char-code c) alpha)\n          collect (char alpha (+\
    \ i j) (+ k 26))))\n</code>\n<|/ a tags=racket,encryption,scheme |>\n<| c |>\n\
    I appreciate the effort you put into your answer, but this doesn't really answer\
    \ the question. Your answer doesn't explain how to rotate the alphabet, and your\
    \ answer doesn't explain how to rotate the letters in the string. Also, you don't\
    \ explain how to rotate the letters in the string.\n<|/ c |>\n<| c |>\nI agree\
    \ with you that my answer doesn't explain how to rotate the alphabet, but I believe\
    \ it does explain how to rotate the letters in the string. My answer doesn't explain\
    \ how to rotate the letters in the string, but I believe it does explain how to\
    \ rotate the alphabet. My answer doesn't explain how to rotate the letters in\
    \ the string, but I believe it does explain how to rotate the alphabet. My answer\
    \ doesn't explain how to rotate the letters in the string, but I believe it does\
    \ explain how to rotate the alphabet. My answer doesn't explain how to rotate\
    \ the letters in the string, but I believe it does explain how to rotate the alphabet.\
    \ My answer doesn't explain how to rotate the letters in the string, but I believe\
    \ it does explain how to rotate the alphabet. My answer doesn't explain how to\
    \ rotate the letters in the string, but I believe it does explain how to rotate\
    \ the alphabet. My answer doesn't explain how to rotate the letters in the string,\
    \ but I believe it does explain how to rotate the alphabet. My answer doesn't\
    \ explain how to rotate the letters in the string, but I believe it does explain\
    \ how to rotate the alphabet. My answer doesn't explain how to rotate the letters\
    \ in the string, but I believe it does explain how to rotate the alphabet.\n<|/\
    \ c |>\n<| c |>\nMy answer doesn't explain how to rotate the letters in the string,\
    \ but I believe it does explain how to rotate the alphabet. My answer doesn't\
    \ explain how to rotate the letters in the string, but I believe it does explain\
    \ how to rotate the alphabet. My answer doesn't explain how to rotate the letters\
    \ in the string, but I believe it does explain how to rotate the alphabet. My\
    \ answer doesn't explain how to rotate the letters in the string, but I believe\
    \ it does explain how to rotate the alphabet. My answer doesn't explain how to\
    \ rotate the letters in the string, but I believe it ", "  (let ((alpha (make-array\
    \ 26)))\n    (do ((i 0 (+ i 1)))\n        ((< i (length s)))\n      (set! alpha\
    \ (rotate! alpha (- i 1) (char s (- i 1))))\n      (set! alpha (rotate! alpha\
    \ (- i 1) (char s (- i 1))))\n      (set! alpha (rotate! alpha (- i 1) (char s\
    \ (- i 1))))\n      (set! alpha (rotate! alpha (- i 1) (char s (- i 1))))\n  \
    \    (set! alpha (rotate! alpha (- i 1) (char s (- i 1))))\n      (set! alpha\
    \ (rotate! alpha (- i 1) (char s (- i 1))))\n      (set! alpha (rotate! alpha\
    \ (- i 1) (char s (- i 1))))\n      (set! alpha (rotate! alpha (- i 1) (char s\
    \ (- i 1))))\n      (set! alpha (rotate! alpha (- i 1) (char s (- i 1))))\n  \
    \    (set! alpha (rotate! alpha (- i 1) (char s (- i 1))))\n      (set! alpha\
    \ (rotate! alpha (- i 1) (char s (- i 1))))\n      (set! alpha (rotate! alpha\
    \ (- i 1) (char s (- i 1))))\n      (set! alpha (rotate! alpha (- i 1) (char s\
    \ (- i 1))))\n      (set! alpha (rotate! alpha (- i 1) (char s (- i 1))))\n  \
    \    (set! alpha (rotate! alpha (- i 1) (char s (- i 1))))\n      (set! alpha\
    \ (rotate! alpha (- i 1) (char s (- i 1))))\n      (set! alpha (rotate! alpha\
    \ (- i 1) (char s (- i 1))))\n      (set! alpha (rotate! alpha (- i 1) (char s\
    \ (- i 1))))\n      (set! alpha (rotate! alpha (- i 1) (char s (- i 1))))\n  \
    \    (set! alpha (rotate! alpha (- i 1) (char s (- i 1))))\n      (set! alpha\
    \ (rotate! alpha (- i 1) (char s (- i 1))))\n      (set! alpha (rotate! alpha\
    \ (- i 1) (char s (- i 1))))\n      (set! alpha (rotate! alpha (- i 1) (char s\
    \ (- i 1))))\n      (set! alpha (rotate! alpha (- i 1) (char s (- i 1))))\n  \
    \    (set! alpha (", "  (let loop ((s s)\n             (acc '()))\n    (cond\n\
    \      [(empty? s) (append acc (list '()))]\n      [(char-alphabet (first s))\
    \ (loop (rest s) (cons (first s) acc))]\n      [else (loop (rest s) (cons (first\
    \ s) (loop (rest s) (cons (first s) acc))))])))\n", "  (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n    (cond [(empty? s) \"\"]\n          [(char-alphabet\
    \ (first s)) (char-alphabet (first s))]\n          [(char-alphabet (first s))\
    \ (char-alphabet (first s))]\n          [(char-alphabet (first s)) (char-alphabet\
    \ (first s))]\n          [(char-alphabet (first s)) (char-alphabet (first s))]\n\
    \          [(char-alphabet (first s)) (char-alphabet (first s))]\n          [(char-alphabet\
    \ (first s)) (char-alphabet (first s))]\n          [(char-alphabet (first s))\
    \ (char-alphabet (first s))]\n          [(char-alphabet (first s)) (char-alphabet\
    \ (first s))]\n          [(char-alphabet (first s)) (char-alphabet (first s))]\n\
    \          [(char-alphabet (first s)) (char-alphabet (first s))]\n          [(char-alphabet\
    \ (first s)) (char-alphabet (first s))]\n          [(char-alphabet (first s))\
    \ (char-alphabet (first s))]\n          [(char-alphabet (first s)) (char-alphabet\
    \ (first s))]\n          [(char-alphabet (first s)) (char-alphabet (first s))]\n\
    \          [(char-alphabet (first s)) (char-alphabet (first s))]\n          [(char-alphabet\
    \ (first s)) (char-alphabet (first s))]\n          [(char-alphabet (first s))\
    \ (char-alphabet (first s))]\n          [(char-alphabet (first s)) (char-alphabet\
    \ (first s))]\n          [(char-alphabet (first s)) (char-alphabet (first s))]\n\
    \          [(char-alphabet (first s)) (char-alphabet (first s))]\n          [(char-alphabet\
    \ (first s)) (char-alphabet (first s))]\n          [(char-alphabet (first s))\
    \ (char-alphabet (first s))]\n          [(char-alphabet (first s)) (char-alphabet\
    \ (first s))]\n          [(char-alphabet (first s)) (char-alphabet (first s))]\n\
    \          [(char-alphabet (first s)) (char-alphabet (first s))]\n          [(char-alphabet\
    \ (first s)) (char", "  (let loop ((s s)\n             (result '()))\n    (cond\
    \ [(empty? s) result]\n          [(char-alphabet (first s)) (loop (rest s) (cons\
    \ (first s) result))]\n          [else (loop (rest s) (cons (first s) result))]))\n\
    \  \n  ;; Return the result of the loop\n  result)\n", "  (let loop ((s s)\n \
    \            (acc '()))\n    (if (null? s)\n        acc\n        (loop (cdr s)\n\
    \              (cons (char->integer (char->string (car s))) acc)))))\n", "  (let\
    \ ((alpha (make-array (length s) #:initial-element #\\a)))\n    (loop for i from\
    \ 0 to (length s) do\n          (set! alpha (rotate! alpha 2))\n          (set!\
    \ alpha (rotate! alpha 1))\n          (set! alpha (rotate! alpha 0))\n       \
    \   (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha -2))\n\
    \          (set! alpha (rotate! alpha -3))\n          (set! alpha (rotate! alpha\
    \ -4))\n          (set! alpha (rotate! alpha -5))\n          (set! alpha (rotate!\
    \ alpha -6))\n          (set! alpha (rotate! alpha -7))\n          (set! alpha\
    \ (rotate! alpha -8))\n          (set! alpha (rotate! alpha -9))\n          (set!\
    \ alpha (rotate! alpha -10))\n          (set! alpha (rotate! alpha -11))\n   \
    \       (set! alpha (rotate! alpha -12))\n          (set! alpha (rotate! alpha\
    \ -13))\n          (set! alpha (rotate! alpha -14))\n          (set! alpha (rotate!\
    \ alpha -15))\n          (set! alpha (rotate! alpha -16))\n          (set! alpha\
    \ (rotate! alpha -17))\n          (set! alpha (rotate! alpha -18))\n         \
    \ (set! alpha (rotate! alpha -19))\n          (set! alpha (rotate! alpha -20))\n\
    \          (set! alpha (rotate! alpha -21))\n          (set! alpha (rotate! alpha\
    \ -22))\n          (set! alpha (rotate! alpha -23))\n          (set! alpha (rotate!\
    \ alpha -24))\n          (set! alpha (rotate! alpha -25))\n          (set! alpha\
    \ (rotate! alpha -26))\n          (set! alpha (rotate! alpha -27))\n         \
    \ (set! alpha (rotate! alpha -28))\n          (set! alpha (rotate! alpha -29))\n\
    \          (set! alpha (rotate! alpha -30))\n          (set! alpha (rotate! alpha\
    \ -31))\n          (set! alpha (rotate! alpha -32))\n          (set! alpha (rotate!\
    \ alpha -33))\n          (set! alpha (rotate! alpha -34))\n          (set! alpha\
    \ (rotate! alpha -35))\n          (set! alpha (rotate! alpha -36))\n         \
    \ (set! ", "  (let ((alpha (make-array (length s) #:initial-element #\\a)))\n\
    \    (loop for i from 0 to (length s) do\n          (set! alpha (rotate! alpha\
    \ 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha\
    \ (rotate! alpha -2))\n          (set! alpha (rotate! alpha -3))\n          (set!\
    \ alpha (rotate! alpha -4))\n          (set! alpha (rotate! alpha -5))\n     \
    \     (set! alpha (rotate! alpha -6))\n          (set! alpha (rotate! alpha -7))\n\
    \          (set! alpha (rotate! alpha -8))\n          (set! alpha (rotate! alpha\
    \ -9))\n          (set! alpha (rotate! alpha -10))\n          (set! alpha (rotate!\
    \ alpha -11))\n          (set! alpha (rotate! alpha -12))\n          (set! alpha\
    \ (rotate! alpha -13))\n          (set! alpha (rotate! alpha -14))\n         \
    \ (set! alpha (rotate! alpha -15))\n          (set! alpha (rotate! alpha -16))\n\
    \          (set! alpha (rotate! alpha -17))\n          (set! alpha (rotate! alpha\
    \ -18))\n          (set! alpha (rotate! alpha -19))\n          (set! alpha (rotate!\
    \ alpha -20))\n          (set! alpha (rotate! alpha -21))\n          (set! alpha\
    \ (rotate! alpha -22))\n          (set! alpha (rotate! alpha -23))\n         \
    \ (set! alpha (rotate! alpha -24))\n          (set! alpha (rotate! alpha -25))\n\
    \          (set! alpha (rotate! alpha -26))\n          (set! alpha (rotate! alpha\
    \ -27))\n          (set! alpha (rotate! alpha -28))\n          (set! alpha (rotate!\
    \ alpha -29))\n          (set! alpha (rotate! alpha -30))\n          (set! alpha\
    \ (rotate! alpha -31))\n          (set! alpha (rotate! alpha -32))\n         \
    \ (set! alpha (rotate! alpha -33))\n          (set! alpha (rotate! alpha -34))\n\
    \          (set! alpha (rotate! alpha -35))\n          (set! alpha (rotate! alpha\
    \ -36))\n          (set! ", "  (let ((alpha (make-array 26 :initial-element #\\\
    a)))\n    (let loop ((i 0) (alpha (make-array 26 :initial-element #\\a)))\n  \
    \    (cond\n        ((null? s) (loop (+ i 1) alpha))\n        (else (set! alpha\
    \ (rotate! alpha i #\\a) (+ i 1) alpha))\n        (else (loop (+ i 1) alpha))))))\n",
  "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (cond [(empty? s) \"\
    \"]\n          [(char-alphabet (first s)) (char-alphabet (first s))]\n       \
    \   [else (cons (char-alphabet (first s)) (encrypt (rest s)))]\n          [else\
    \ (let ((alpha (make-array 26 :initial-element #\\a)))\n                   (cond\
    \ [(empty? s) \"\"]\n                         [(char-alphabet (first s)) (char-alphabet\
    \ (first s))]\n                         [else (cons (char-alphabet (first s))\
    \ (encrypt (rest s)))]\n                         [else (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n                                 (cond [(empty?\
    \ s) \"\"]\n                                        [(char-alphabet (first s))\
    \ (char-alphabet (first s))]\n                                        [else (cons\
    \ (char-alphabet (first s)) (encrypt (rest s)))]\n                           \
    \             [else (let ((alpha (make-array 26 :initial-element #\\a)))\n   \
    \                                              (cond [(empty? s) \"\"]\n     \
    \                                                  [(char-alphabet (first s))\
    \ (char-alphabet (first s))]\n                                               \
    \        [else (cons (char-alphabet (first s)) (encrypt (rest s)))]\n        \
    \                                               [else (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n                                              \
    \                 (cond [(empty? s) \"\"]\n                                  \
    \                                   [(char-alphabet (first s)) (char-alphabet\
    \ (first s))]\n                                                              \
    \       [else (cons (char-alphabet (first s)) (encrypt (rest s)))]\n         \
    \                                                            [else (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n                                  \
    \                                             (cond [(empty? s) \"\"]\n      \
    \                                                                            \
    \   [(char-alphabet (first s)) (char-alphabet (first s))]\n                  \
    \                                                                   [else (cons\
    \ (char-alphabet (first s)) (encrypt (rest s)))]\n                           \
    \                                                          [else (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n                                  \
    \                                                          (cond [(empty? s) \"\
    \"]\n                                                                        \
    \                          [(char-alphabet (first s)) (char-alphabet (first s))]\n\
    \                                                                            \
    \                      [else (cons (char-alphabet (first s)) (encrypt (rest s)))]\n\
    \                                                                            \
    \                      [else (let ((alpha (make-array 26 :initial-element #",
  "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for i from 0\
    \ to (length s) do\n      (let ((char (char-code (char s i))))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n\
    \    (let loop ((s s)\n               (alpha alpha))\n      (cond\n        ((null?\
    \ s) (list s))\n        ((char=? (car s) #\\a) (list s))\n        (else (loop\
    \ (cdr s) (cons (char-code (car s)) (rotate-left alpha (car s)))))))\n    (apply\
    \ (lambda (x y) (char-code (char x y))) alpha alpha)))\n", "  (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n    (loop for i from 0 to (length s) do\n     \
    \ (set! alpha (rotate! alpha 2))\n      (set! alpha (rotate! alpha 1))\n     \
    \ (set! alpha (rotate! alpha 0))\n      (set! alpha (rotate! alpha 3))\n     \
    \ (set! alpha (rotate! alpha 6))\n      (set! alpha (rotate! alpha 9))\n     \
    \ (set! alpha (rotate! alpha 12))\n      (set! alpha (rotate! alpha 15))\n   \
    \   (set! alpha (rotate! alpha 18))\n      (set! alpha (rotate! alpha 21)))\n\
    \    (string-append (substring s 0 i) \n                  (substring alpha (length\
    \ s) i))))\n", "  (let loop ((s s)\n             (result '()))\n    (cond\n  \
    \    [(empty? s) result]\n      [(char-alphabet (first s)) (loop (rest s) (cons\
    \ (first s) result))]\n      [else (loop (rest s) (cons (first s) (loop (rest\
    \ s) (cons (second s) result))))])))\n", "  (let loop ((s s)\n             (a\
    \ #(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\\
    o #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z))\n             (b #(#\\b\
    \ #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\\
    r #\\s #\\t #\\v #\\w #\\x #\\y #\\z))\n             (c #(#\\c #\\d #\\e #\\f\
    \ #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\v #\\\
    w #\\x #\\y #\\z))\n             (d #(#\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k\
    \ #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z))\n  \
    \           (e #(#\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\\
    q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z))\n             (f #(#\\f #\\g #\\h\
    \ #\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\\
    y #\\z))\n             (g #(#\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\p\
    \ #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z))\n             (h #(#\\h #\\i\
    \ #\\j #\\k #\\l #\\m ", "  (let ((alpha (make-array 26 \n                   \
    \       :initial-contents '(a b c d e f g h i j k l m n o p q r s t u v w x y\
    \ z))))\n    (loop for i from 0 to (length s) do\n          (set! alpha (assoc\
    \ alpha (substring s i (+ i 1))))\n          (set! alpha (assoc alpha (substring\
    \ s (+ i 1) (+ i 1))))\n          (set! alpha (assoc alpha (substring s (+ i 1)\
    \ (+ i 1))))\n          (set! alpha (assoc alpha (substring s (+ i 1) (+ i 1))))\n\
    \          (set! alpha (assoc alpha (substring s (+ i 1) (+ i 1))))\n        \
    \  (set! alpha (assoc alpha (substring s (+ i 1) (+ i 1))))\n          (set! alpha\
    \ (assoc alpha (substring s (+ i 1) (+ i 1))))\n          (set! alpha (assoc alpha\
    \ (substring s (+ i 1) (+ i 1))))\n          (set! alpha (assoc alpha (substring\
    \ s (+ i 1) (+ i 1))))\n          (set! alpha (assoc alpha (substring s (+ i 1)\
    \ (+ i 1))))\n          (set! alpha (assoc alpha (substring s (+ i 1) (+ i 1))))\n\
    \          (set! alpha (assoc alpha (substring s (+ i 1) (+ i 1))))\n        \
    \  (set! alpha (assoc alpha (substring s (+ i 1) (+ i 1))))\n          (set! alpha\
    \ (assoc alpha (substring s (+ i 1) (+ i 1))))\n          (set! alpha (assoc alpha\
    \ (substring s (+ i 1) (+ i 1))))\n          (set! alpha (assoc alpha (substring\
    \ s (+ i 1) (+ i 1))))\n          (set! alpha (assoc alpha (substring s (+ i 1)\
    \ (+ i 1))))\n          (set! alpha (assoc alpha (substring s (+ i 1) (+ i 1))))\n\
    \          (set! alpha (assoc alpha (substring s (+ i 1) (+ i 1))))\n        \
    \  (set! alpha (assoc alpha (substring s (+ i 1) (+ i 1))))\n          (set! alpha\
    \ (assoc alpha (substring s (+ i 1) (+ i 1))))", "  (let ((alpha (make-array 26)))\n\
    \    (loop for i from 0 to (length s) do\n      (set! alpha (rotate! alpha (i\
    \ + 1))))\n    (string-append (map char->string alpha) s)))\n", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n    (let loop ((s s)\n            \
    \   (alpha (make-array 26 :initial-element #\\a)))\n      (cond\n        ((null?\
    \ s) (list s))\n        ((char= (first s) #\\a) (list s))\n        (else (loop\
    \ (rest s) (rotate! alpha #\\a)))))))\n", "  (let ((alpha (make-array 26)))\n\
    \    (loop for i from 0 to (length s) do\n      (set! alpha (subarray alpha (-\
    \ i 26) (- i 26)))\n      (set! alpha (rotate! alpha 2))\n      (set! alpha (subarray\
    \ alpha (- i 26) (- i 26)))\n      (set! alpha (rotate! alpha 2))\n      (set!\
    \ alpha (subarray alpha (- i 26) (- i 26))))\n    (string-append (make-string\
    \ 26) (map char->string alpha)))\n", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (loop for i from 0 to (length s) do\n      (let ((alpha (rotate-array\
    \ alpha 2)))\n        (set! alpha (rotate-array alpha 1))\n        (set! alpha\
    \ (rotate-array alpha -1))\n        (set! alpha (rotate-array alpha -2))\n   \
    \     (set! alpha (rotate-array alpha -3))\n        (set! alpha (rotate-array\
    \ alpha -4))\n        (set! alpha (rotate-array alpha -5))\n        (set! alpha\
    \ (rotate-array alpha -6))\n        (set! alpha (rotate-array alpha -7))\n   \
    \     (set! alpha (rotate-array alpha -8))\n        (set! alpha (rotate-array\
    \ alpha -9))\n        (set! alpha (rotate-array alpha -10))\n        (set! alpha\
    \ (rotate-array alpha -11))\n        (set! alpha (rotate-array alpha -12))\n \
    \       (set! alpha (rotate-array alpha -13))\n        (set! alpha (rotate-array\
    \ alpha -14))\n        (set! alpha (rotate-array alpha -15))\n        (set! alpha\
    \ (rotate-array alpha -16))\n        (set! alpha (rotate-array alpha -17))\n \
    \       (set! alpha (rotate-array alpha -18))\n        (set! alpha (rotate-array\
    \ alpha -19))\n        (set! alpha (rotate-array alpha -20))\n        (set! alpha\
    \ (rotate-array alpha -21))\n        (set! alpha (rotate-array alpha -22))\n \
    \       (set! alpha (rotate-array alpha -23))\n        (set! alpha (rotate-array\
    \ alpha -24))\n        (set! alpha (rotate-array alpha -25))\n        (set! alpha\
    \ (rotate-array alpha -26))\n        (set! alpha (rotate-array alpha -27))\n \
    \       (set! alpha (rotate-array alpha -28))\n        (set! alpha (rotate-array\
    \ alpha -29))\n        (set! alpha (rotate-array alpha -30))\n        (set! alpha\
    \ (rotate-array alpha -31))\n        (set! alpha (rotate-array alpha -32))\n \
    \       (set! alpha (rotate-array alpha -33))\n        (set! alpha (rotate-array\
    \ alpha -34))\n        (set! alpha (rotate-array alpha -35))\n        (set! alpha\
    \ (rotate-array alpha -36))\n        (set! alpha (rotate-array alpha -37))\n \
    \       (set! alpha (", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n\
    \    (loop for i from 0 to (length s) by 2\n          for c from 0 to 26\n   \
    \       when (char=? (char-code (substring s i i+1))\n                       (char-code\
    \ (substring alpha (char-code c) char-code (c))))\n          collect (char-code\
    \ (substring alpha (char-code c) char-code (c))))))\n", "  (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n    (let loop ((s s)\n               (alpha (make-array\
    \ 26 :initial-element #\\a)))\n      (cond\n        ((null? s) (make-string 0\
    \ :initial-element #\\a))\n        ((char=? (car s) #\\a) (loop (cdr s) alpha))\n\
    \        (else (loop (cdr s) (rotate-right alpha (char-code (car s)))))))))\n",
  "  (let ((alpha (make-array 26)))\n    (loop for i from 0 to (length s) do\n   \
    \   (let ((alpha (make-array 26)))\n        (loop for j from 0 to 26 do\n    \
    \      (set! alpha (rotate! alpha j))\n          (set! alpha (rotate! alpha (-\
    \ j 2)))\n          (set! alpha (rotate! alpha (- j 2)))\n          (set! alpha\
    \ (rotate! alpha (- j 2)))\n          (set! alpha (rotate! alpha (- j 2)))\n \
    \         (set! alpha (rotate! alpha (- j 2)))\n          (set! alpha (rotate!\
    \ alpha (- j 2)))\n          (set! alpha (rotate! alpha (- j 2)))\n          (set!\
    \ alpha (rotate! alpha (- j 2)))\n          (set! alpha (rotate! alpha (- j 2)))\n\
    \          (set! alpha (rotate! alpha (- j 2)))\n          (set! alpha (rotate!\
    \ alpha (- j 2)))\n          (set! alpha (rotate! alpha (- j 2)))\n          (set!\
    \ alpha (rotate! alpha (- j 2)))\n          (set! alpha (rotate! alpha (- j 2)))\n\
    \          (set! alpha (rotate! alpha (- j 2)))\n          (set! alpha (rotate!\
    \ alpha (- j 2)))\n          (set! alpha (rotate! alpha (- j 2)))\n          (set!\
    \ alpha (rotate! alpha (- j 2)))\n          (set! alpha (rotate! alpha (- j 2)))\n\
    \          (set! alpha (rotate! alpha (- j 2)))\n          (set! alpha (rotate!\
    \ alpha (- j 2)))\n          (set! alpha (rotate! alpha (- j 2)))\n          (set!\
    \ alpha (rotate! alpha (- j 2)))\n          (set! alpha (rotate! alpha (- j 2)))\n\
    \          (set! alpha (rotate! alpha (- j 2)))\n          (set! alpha (rotate!\
    \ alpha (- j 2)))\n          (set! alpha (rotate! alpha (- j 2)))\n          (set!\
    \ alpha (rotate! alpha (- j 2)))\n          (set! alpha (rotate! alpha (- j 2)))\n\
    \          (set! alpha (rotate! alpha (- j 2)))\n          (set! alpha (rotate!\
    \ alpha (- j 2)))\n          (set! alpha (rotate! alpha (- j 2)))\n          (set!\
    \ alpha (rotate! alpha (- j ", "  (let ((alpha (make-alphabet (length s))))\n\
    \    (let loop ((i 0) (alpha (make-alphabet (length s))))\n      (if (< i length)\n\
    \          (set! alpha (rotate-alphabet alpha (substring s i (+ i 1))))\n    \
    \      (set! alpha (rotate-alphabet alpha (substring s 0 (- i 1))))\n        \
    \  (set! alpha (rotate-alphabet alpha (substring s i (- i 1))))\n          (set!\
    \ alpha (rotate-alphabet alpha (substring s 0 (+ i 1))))\n          (set! alpha\
    \ (rotate-alphabet alpha (substring s i (+ i 1))))\n          (set! alpha (rotate-alphabet\
    \ alpha (substring s 0 (- i 1))))\n          (set! alpha (rotate-alphabet alpha\
    \ (substring s i (- i 1))))\n          (set! alpha (rotate-alphabet alpha (substring\
    \ s 0 (+ i 1))))\n          (set! alpha (rotate-alphabet alpha (substring s i\
    \ (+ i 1))))\n          (set! alpha (rotate-alphabet alpha (substring s 0 (- i\
    \ 1))))\n          (set! alpha (rotate-alphabet alpha (substring s i (- i 1))))\n\
    \          (set! alpha (rotate-alphabet alpha (substring s 0 (+ i 1))))\n    \
    \      (set! alpha (rotate-alphabet alpha (substring s i (+ i 1))))\n        \
    \  (set! alpha (rotate-alphabet alpha (substring s 0 (- i 1))))\n          (set!\
    \ alpha (rotate-alphabet alpha (substring s i (- i 1))))\n          (set! alpha\
    \ (rotate-alphabet alpha (substring s 0 (+ i 1))))\n          (set! alpha (rotate-alphabet\
    \ alpha (substring s i (+ i 1))))\n          (set! alpha (rotate-alphabet alpha\
    \ (substring s 0 (- i 1))))\n          (set! alpha (rotate-alphabet alpha (substring\
    \ s i (- i 1))))\n          (set! alpha (rotate-alphabet alpha (substring s 0\
    \ (+ i 1))))\n          (set! alpha (rotate-alphabet alpha (substring s i (+ i\
    \ 1))))\n          (set! alpha (rotate-alphabet alpha (substring s 0 (- i 1))))\n\
    \          (set! alpha (rotate-alphabet alpha (sub", "  (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n    (loop for i from 0 to (length s) do\n     \
    \ (let ((char (char-code (char s i))))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char", "  (let\
    \ ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for i from 0 to (length\
    \ s) do\n          (set! alpha (rotate! alpha 2))\n          (set! alpha (rotate!\
    \ alpha 1))\n          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate!\
    \ alpha -1))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha\
    \ (rotate! alpha -3))\n          (set! alpha (rotate! alpha -4))\n          (set!\
    \ alpha (rotate! alpha -5))\n          (set! alpha (rotate! alpha -6))\n     \
    \     (set! alpha (rotate! alpha -7))\n          (set! alpha (rotate! alpha -8))\n\
    \          (set! alpha (rotate! alpha -9))\n          (set! alpha (rotate! alpha\
    \ -10))\n          (set! alpha (rotate! alpha -11))\n          (set! alpha (rotate!\
    \ alpha -12))\n          (set! alpha (rotate! alpha -13))\n          (set! alpha\
    \ (rotate! alpha -14))\n          (set! alpha (rotate! alpha -15))\n         \
    \ (set! alpha (rotate! alpha -16))\n          (set! alpha (rotate! alpha -17))\n\
    \          (set! alpha (rotate! alpha -18))\n          (set! alpha (rotate! alpha\
    \ -19))\n          (set! alpha (rotate! alpha -20))\n          (set! alpha (rotate!\
    \ alpha -21))\n          (set! alpha (rotate! alpha -22))\n          (set! alpha\
    \ (rotate! alpha -23))\n          (set! alpha (rotate! alpha -24))\n         \
    \ (set! alpha (rotate! alpha -25))\n          (set! alpha (rotate! alpha -26))\n\
    \          (set! alpha (rotate! alpha -27))\n          (set! alpha (rotate! alpha\
    \ -28))\n          (set! alpha (rotate! alpha -29))\n          (set! alpha (rotate!\
    \ alpha -30))\n          (set! alpha (rotate! alpha -31))\n          (set! alpha\
    \ (rotate! alpha -32))\n          (set! alpha (rotate! alpha -33))\n         \
    \ (set! alpha (rotate! alpha -34))\n          (set! alpha (rotate! alpha -35))\n\
    \          (set! alpha (rotate! alpha -36))\n          (set! alpha (rotate", " \
    \ (let ((alpha (make-array (length s) #:initial-element #\\a)))\n    (let loop\
    \ ((i 0) (acc '()))\n      (if (< i s)\n          (loop (+ i 1) (cons (char->integer\
    \ (char-code (char s i)) alpha) (cons (char->integer (char-code (char s i)) (sub1\
    \ alpha))) (cons (char->integer (char-code (char s i)) (sub2 alpha))) (cons (char->integer\
    \ (char-code (char s i)) (sub3 alpha))) (cons (char->integer (char-code (char\
    \ s i)) (sub4 alpha))))\n          (loop (+ i 1) acc))))))\n", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n    (let loop ((s s)\n            \
    \   (alpha (make-array 26 :initial-element #\\a)))\n      (cond ((null? s) s)\n\
    \            ((char=? (car s) #\\a) (loop (cdr s) alpha))\n            (else (set!\
    \ alpha (rotate! alpha (car s)) (loop (cdr s) alpha)))))))\n", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n    (loop for i from 0 to (length s)\
    \ do\n      (let ((alpha (make-array 26 :initial-element #\\a)))\n        (loop\
    \ for j from 0 to (length s) do\n          (set! alpha (rotate! alpha j))\n  \
    \        (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set!\
    \ alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n\
    \          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set!\
    \ alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n\
    \          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set!\
    \ alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n\
    \          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set!\
    \ alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n\
    \          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set!\
    \ alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n\
    \          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n          (set!\
    \ alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate! alpha (+ i 1)))\n\
    \          (set! alpha (rotate! alpha (+ i 1)))\n          (set! alpha (rotate!\
    \ alpha (+ i ", "  (let loop ((s s)\n             (alphabet (list 'a 'b 'c 'd\
    \ 'e 'f 'g 'h 'i 'j 'k 'l 'm 'n 'o 'p 'q 'r 's 't 'u 'v 'w 'x 'y 'z)))\n    (cond\
    \ ((null? s) (list \"\"))\n          ((char= (first alphabet) s)\n           (loop\
    \ (rest s) (cons (first alphabet) (cons (second alphabet) (cons (third alphabet)\
    \ (cons (fourth alphabet) (cons (fifth alphabet) (cons (sixth alphabet) (cons\
    \ (seventh alphabet) (cons (eighth alphabet) (cons (ninth alphabet) (cons (tenth\
    \ alphabet) (cons (eleventh alphabet) (cons (twelfth alphabet) (cons (thirteenth\
    \ alphabet) (cons (fourteenth alphabet) (cons (fifteenth alphabet) (cons (sixteenth\
    \ alphabet) (cons (seventeenth alphabet) (cons (eighteenth alphabet) (cons (nineteenth\
    \ alphabet) (cons (twentieth alphabet) (cons (thirtieth alphabet) (cons (fourtieth\
    \ alphabet) (cons (fiftieth alphabet) (cons (sixtieth alphabet) (cons (seventieth\
    \ alphabet) (cons (eightieth alphabet) (cons (ninetieth alphabet) (cons (twentyeth\
    \ alphabet) (cons (thirtieth alphabet) (cons (fourtieth alphabet) (cons (fiftieth\
    \ alphabet) (cons (sixtieth alphabet) (cons (seventieth alphabet) (cons (eightieth\
    \ alphabet) (cons (ninetieth alphabet) (cons (twentyeth alphabet) (cons (thirtieth\
    \ alphabet) (cons (fourtieth alphabet) (cons (fiftieth alphabet) (cons (sixtieth\
    \ alphabet) (cons (seventieth alphabet) (cons (eightieth alphabet) (cons (ninetieth\
    \ alphabet) (cons (twentyeth alphabet) (cons (thirtieth alphabet) (cons (fourtieth\
    \ alphabet) (cons (fiftieth alphabet) (cons (sixtieth alphabet) (cons (seventieth\
    \ alphabet) (cons (eightieth alphabet) (cons (ninetieth alphabet) (cons (twentyeth\
    \ alphabet) (cons (thirtieth alphabet) (cons (fourtieth alphabet) (cons (fiftieth\
    \ alphabet) (cons (sixtieth alphabet) (cons (seventieth alphabet) (cons (eigh",
  "  (let ((alpha (make-alphabet (length s))))\n    (let loop ((i 0) (alpha (make-alphabet\
    \ (length s))))\n      (if (< i alpha-length)\n          (cons (char->integer\
    \ (char->symbol alpha (+ i 1))) \n                (loop (+ i 1) (rotate-alphabet\
    \ alpha (+ i 1))))\n          (cons (char->integer (char->symbol alpha (+ i 1)))\
    \ \n                (loop (+ i 1) alpha))))))\n", "  (let loop ((s s)\n      \
    \       (alphabet (list 'a 'b 'c 'd 'e 'f 'g 'h 'i 'j 'k 'l 'm 'n 'o 'p 'q 'r\
    \ 's 't 'u 'v 'w 'x 'y 'z)))\n    (cond\n      [(empty? s) \"\"]\n      [(equal?\
    \ (first s) (first alphabet)) (cons (first alphabet) (loop (rest s) alphabet))]\n\
    \      [else (loop (rest s) (append alphabet (list (first s))))]))))\n", "  (let\
    \ ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for i from 0 to (length\
    \ s) do\n      (let ((alpha (make-array 26 :initial-element #\\a)))\n        (loop\
    \ for j from 0 to (length s) do\n          (set! alpha (rotate! alpha 2))\n  \
    \        (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate! alpha\
    \ 0))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha (rotate!\
    \ alpha -1))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha\
    \ (rotate! alpha -1))\n          (set! alpha (rotate! alpha -2))\n          (set!\
    \ alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha -2))\n     \
    \     (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha -2))\n\
    \          (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha\
    \ -2))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate!\
    \ alpha -2))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha\
    \ (rotate! alpha -2))\n          (set! alpha (rotate! alpha -1))\n          (set!\
    \ alpha (rotate! alpha -2))\n          (set! alpha (rotate! alpha -1))\n     \
    \     (set! alpha (rotate! alpha -2))\n          (set! alpha (rotate! alpha -1))\n\
    \          (set! alpha (rotate! alpha -2))\n          (set! alpha (rotate! alpha\
    \ -1))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha (rotate!\
    \ alpha -1))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha\
    \ (rotate! alpha -1))\n          (set! alpha (rotate! alpha -2))\n          (set!\
    \ alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha -2))\n     \
    \     (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha -2))\n\
    \          (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha\
    \ -2))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha (rotate!\
    \ alpha -2))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha\
    \ (rotate! alpha -2))", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n\
    \    (let loop ((s s)\n               (alpha alpha))\n      (cond\n        ((null?\
    \ s) (append alpha (list #\\a)))\n        ((char=? (car s) #\\a) (append alpha\
    \ (list #\\b)))\n        ((char=? (car s) #\\b) (append alpha (list #\\c)))\n\
    \        ((char=? (car s) #\\c) (append alpha (list #\\d)))\n        ((char=?\
    \ (car s) #\\d) (append alpha (list #\\e)))\n        ((char=? (car s) #\\e) (append\
    \ alpha (list #\\f)))\n        ((char=? (car s) #\\f) (append alpha (list #\\\
    g)))\n        ((char=? (car s) #\\g) (append alpha (list #\\h)))\n        ((char=?\
    \ (car s) #\\h) (append alpha (list #\\i)))\n        ((char=? (car s) #\\i) (append\
    \ alpha (list #\\j)))\n        ((char=? (car s) #\\j) (append alpha (list #\\\
    k)))\n        ((char=? (car s) #\\k) (append alpha (list #\\l)))\n        ((char=?\
    \ (car s) #\\l) (append alpha (list #\\m)))\n        ((char=? (car s) #\\m) (append\
    \ alpha (list #\\n)))\n        ((char=? (car s) #\\n) (append alpha (list #\\\
    o)))\n        ((char=? (car s) #\\o) (append alpha (list #\\p)))\n        ((char=?\
    \ (car s) #\\p) (append alpha (list #\\q)))\n        ((char=? (car s) #\\q) (append\
    \ alpha (list #\\r)))\n        ((char=? (car s) #\\r) (append alpha (list #\\\
    s)))\n        ((char=? (car s) #\\s) (append alpha (list #\\t)))\n        ((char=?\
    \ (car s) #\\t) (append alpha (list #\\v)))\n        ((char=? (car s) #\\v) (append\
    \ alpha (list #\\w)))\n        ((char=? (car s) #\\w) (append alpha (list #\\\
    x)))\n        ((char=? (car s) #\\x) (append alpha (list #", "  (let ((alpha (make-array\
    \ 26)))\n    (let loop ((s s)\n               (alpha (make-array 26)))\n     \
    \ (if (null? s)\n          s\n          (let ((c (char->integer (car s))))\n \
    \           (set! alpha (+ alpha (mod c 26)))\n            (set! alpha (+ alpha\
    \ (mod c 26)))\n            (set! alpha (+ alpha (mod c 26)))\n            (set!\
    \ alpha (+ alpha (mod c 26)))\n            (set! alpha (+ alpha (mod c 26)))\n\
    \            (set! alpha (+ alpha (mod c 26)))\n            (set! alpha (+ alpha\
    \ (mod c 26)))\n            (set! alpha (+ alpha (mod c 26)))\n            (set!\
    \ alpha (+ alpha (mod c 26)))\n            (set! alpha (+ alpha (mod c 26)))\n\
    \            (set! alpha (+ alpha (mod c 26)))\n            (set! alpha (+ alpha\
    \ (mod c 26)))\n            (set! alpha (+ alpha (mod c 26)))\n            (set!\
    \ alpha (+ alpha (mod c 26)))\n            (set! alpha (+ alpha (mod c 26)))\n\
    \            (set! alpha (+ alpha (mod c 26)))\n            (set! alpha (+ alpha\
    \ (mod c 26)))\n            (set! alpha (+ alpha (mod c 26)))\n            (set!\
    \ alpha (+ alpha (mod c 26)))\n            (set! alpha (+ alpha (mod c 26)))\n\
    \            (set! alpha (+ alpha (mod c 26)))\n            (set! alpha (+ alpha\
    \ (mod c 26)))\n            (set! alpha (+ alpha (mod c 26)))\n            (set!\
    \ alpha (+ alpha (mod c 26)))\n            (set! alpha (+ alpha (mod c 26)))\n\
    \            (set! alpha (+ alpha (mod c 26)))\n            (set! alpha (+ alpha\
    \ (mod c 26)))\n            (set! alpha (+ alpha (mod c 26)))\n            (set!\
    \ alpha (+ alpha (mod c 26)))\n            (set! alpha (+ alpha (mod c 26)))\n\
    \            (set! alpha (+ alpha (mod c 26)))\n            (set! alpha (+ alpha\
    \ (mod c 26)))\n            (set! alpha (+ alpha (mod c 26)))\n            (set!\
    \ alpha (+ alpha (mod c 26)))\n            (set! alpha (+ alpha (mod c 26)))\n\
    \            (set! alpha (+ ", "  (let ((alpha (make-array 26 (lambda (x) (+ x\
    \ 2)))))\n    (do ((i 0 (+ i 1)))\n        ((< i (length s)))\n      (set! alpha\
    \ (assoc alpha (substring s i (+ i 1))))\n      (set! alpha (assoc alpha (substring\
    \ s (+ i 1) (length s))))\n      (set! alpha (assoc alpha (substring s (+ i 1)\
    \ (+ i 1))))\n      (set! alpha (assoc alpha (substring s (+ i 1) (+ i 1))))\n\
    \      (set! alpha (assoc alpha (substring s (+ i 1) (+ i 1))))\n      (set! alpha\
    \ (assoc alpha (substring s (+ i 1) (+ i 1))))\n      (set! alpha (assoc alpha\
    \ (substring s (+ i 1) (+ i 1))))\n      (set! alpha (assoc alpha (substring s\
    \ (+ i 1) (+ i 1))))\n      (set! alpha (assoc alpha (substring s (+ i 1) (+ i\
    \ 1))))\n      (set! alpha (assoc alpha (substring s (+ i 1) (+ i 1))))\n    \
    \  (set! alpha (assoc alpha (substring s (+ i 1) (+ i 1))))\n      (set! alpha\
    \ (assoc alpha (substring s (+ i 1) (+ i 1))))\n      (set! alpha (assoc alpha\
    \ (substring s (+ i 1) (+ i 1))))\n      (set! alpha (assoc alpha (substring s\
    \ (+ i 1) (+ i 1))))\n      (set! alpha (assoc alpha (substring s (+ i 1) (+ i\
    \ 1))))\n      (set! alpha (assoc alpha (substring s (+ i 1) (+ i 1))))\n    \
    \  (set! alpha (assoc alpha (substring s (+ i 1) (+ i 1))))\n      (set! alpha\
    \ (assoc alpha (substring s (+ i 1) (+ i 1))))\n      (set! alpha (assoc alpha\
    \ (substring s (+ i 1) (+ i 1))))\n      (set! alpha (assoc alpha (substring s\
    \ (+ i 1) (+ i 1))))\n      (set! alpha (assoc alpha (substring s (+ i 1) (+ i\
    \ 1))))\n      (set! alpha (assoc alpha (substring s (+ i 1) (+ i 1))))\n    \
    \  (set! alpha (assoc alpha (substring s (+ i 1) (+ i 1))))", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n    (loop for i from 0 to (length s)\
    \ do\n      (let ((alpha (make-array 26 :initial-element #\\a)))\n        (loop\
    \ for j from 0 to (length s) do\n          (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n            (set! alpha (rotate! alpha 2))\n            (set! alpha\
    \ (rotate! alpha 1))\n            (set! alpha (rotate! alpha 0))\n           \
    \ (set! alpha (rotate! alpha -1))\n            (set! alpha (rotate! alpha -2))\n\
    \            (set! alpha (rotate! alpha -3))\n            (set! alpha (rotate!\
    \ alpha -4))\n            (set! alpha (rotate! alpha -5))\n            (set! alpha\
    \ (rotate! alpha -6))\n            (set! alpha (rotate! alpha -7))\n         \
    \   (set! alpha (rotate! alpha -8))\n            (set! alpha (rotate! alpha -9))\n\
    \            (set! alpha (rotate! alpha -10))\n            (set! alpha (rotate!\
    \ alpha -11))\n            (set! alpha (rotate! alpha -12))\n            (set!\
    \ alpha (rotate! alpha -13))\n            (set! alpha (rotate! alpha -14))\n \
    \           (set! alpha (rotate! alpha -15))\n            (set! alpha (rotate!\
    \ alpha -16))\n            (set! alpha (rotate! alpha -17))\n            (set!\
    \ alpha (rotate! alpha -18))\n            (set! alpha (rotate! alpha -19))\n \
    \           (set! alpha (rotate! alpha -20))\n            (set! alpha (rotate!\
    \ alpha -21))\n            (set! alpha (rotate! alpha -22))\n            (set!\
    \ alpha (rotate! alpha -23))\n            (set! alpha (rotate! alpha -24))\n \
    \           (set! alpha (rotate! alpha -25))\n            (set! alpha (rotate!\
    \ alpha -26))\n            (set! alpha (rotate! alpha -27))\n            (set!\
    \ alpha (rotate! alpha -28))\n            (set! alpha (rotate! alpha -29))\n \
    \           (set! alpha (rotate! alpha -30))\n            (set! alpha (rotate!\
    \ alpha -31))\n            (set! alpha (rotate! alpha -32))\n            (set!\
    \ alpha (rotate! alpha -33))\n            (set! alpha (rotate! alpha -34))\n \
    \           (set! alpha (rotate! alpha -35))\n            (set! alpha (rotate!\
    \ alpha -36))\n            (set", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (loop for i from 0 to (length s) do\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate!\
    \ alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha 3))\n          ", "  (let ((alpha\
    \ (make-array (length s) (lambda (x) (+ x 2)))))\n    (do ((i 0 (+ i 1))\n   \
    \      (char (car s))\n         (alpha (+ i 1)))\n        ((< i length) \n   \
    \      (set! alpha (assoc char alpha))\n         (set! alpha (assoc alpha (- i\
    \ 1))))\n    (let ((alpha (make-array (length s) (lambda (x) (+ x 2)))))\n   \
    \   (do ((i 0 (+ i 1))\n           (char (car s))\n           (alpha (+ i 1)))\n\
    \          ((< i length) \n           (set! alpha (assoc char alpha))\n      \
    \     (set! alpha (assoc alpha (- i 1))))\n      (let ((alpha (make-array (length\
    \ s) (lambda (x) (+ x 2)))))\n        (do ((i 0 (+ i 1))\n             (char (car\
    \ s))\n             (alpha (+ i 1)))\n            ((< i length) \n           \
    \  (set! alpha (assoc char alpha))\n             (set! alpha (assoc alpha (- i\
    \ 1))))\n        (let ((alpha (make-array (length s) (lambda (x) (+ x 2)))))\n\
    \          (do ((i 0 (+ i 1))\n               (char (car s))\n               (alpha\
    \ (+ i 1)))\n              ((< i length) \n               (set! alpha (assoc char\
    \ alpha))\n               (set! alpha (assoc alpha (- i 1))))\n          (let\
    \ ((alpha (make-array (length s) (lambda (x) (+ x 2)))))\n            (do ((i\
    \ 0 (+ i 1))\n                 (char (car s))\n                 (alpha (+ i 1)))\n\
    \                ((< i length) \n                 (set! alpha (assoc char alpha))\n\
    \                 (set! alpha (assoc alpha (- i 1))))\n            (let ((alpha\
    \ (make-array (length s) (lambda (x) (+ x 2)))))\n              (do ((i 0 (+ i\
    \ 1))\n                   (char (car s))\n                   (alpha (+ i 1)))\n\
    \                  ((< i length) \n                   (set! alpha (assoc char\
    \ alpha))\n                   (set! alpha (assoc alpha (- i 1))))\n          \
    \  (let ((alpha (make-array (length s) (lambda (x) (+ x 2)))))\n             \
    \ (do ((i 0 (+ i 1))\n                   (char (car s))\n                   (alpha\
    \ (+ i 1)))\n                  ((< i length", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (loop for i from 0 to (length s) do\n      (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n        (loop for j from 0 to (length s) do\n \
    \         (set! alpha (rotate! alpha j 2))\n          (set! alpha (rotate! alpha\
    \ i 2))\n          (set! alpha (rotate! alpha j 2))\n          (set! alpha (rotate!\
    \ alpha i 2))\n          (set! alpha (rotate! alpha j 2))\n          (set! alpha\
    \ (rotate! alpha i 2))\n          (set! alpha (rotate! alpha j 2))\n         \
    \ (set! alpha (rotate! alpha i 2))\n          (set! alpha (rotate! alpha j 2))\n\
    \          (set! alpha (rotate! alpha i 2))\n          (set! alpha (rotate! alpha\
    \ j 2))\n          (set! alpha (rotate! alpha i 2))\n          (set! alpha (rotate!\
    \ alpha j 2))\n          (set! alpha (rotate! alpha i 2))\n          (set! alpha\
    \ (rotate! alpha j 2))\n          (set! alpha (rotate! alpha i 2))\n         \
    \ (set! alpha (rotate! alpha j 2))\n          (set! alpha (rotate! alpha i 2))\n\
    \          (set! alpha (rotate! alpha j 2))\n          (set! alpha (rotate! alpha\
    \ i 2))\n          (set! alpha (rotate! alpha j 2))\n          (set! alpha (rotate!\
    \ alpha i 2))\n          (set! alpha (rotate! alpha j 2))\n          (set! alpha\
    \ (rotate! alpha i 2))\n          (set! alpha (rotate! alpha j 2))\n         \
    \ (set! alpha (rotate! alpha i 2))\n          (set! alpha (rotate! alpha j 2))\n\
    \          (set! alpha (rotate! alpha i 2))\n          (set! alpha (rotate! alpha\
    \ j 2))\n          (set! alpha (rotate! alpha i 2))\n          (set! alpha (rotate!\
    \ alpha j 2))\n          (set! alpha (rotate! alpha i 2))\n          (set! alpha\
    \ (rotate! alpha j 2))\n          (set! alpha (rotate! alpha i 2))\n         \
    \ (set! alpha (rotate! alpha j 2))\n          (set! alpha (rotate! alpha i 2))\n\
    \          (set! alpha (rotate! alpha j 2))\n          (set! alpha (rotate! alpha\
    \ i 2))\n          (", "  (let ((alpha (make-array 26 \n                     \
    \     :initial-contents '(a b c d e f g h i j k l m n o p q r s t u v w x y z))))\n\
    \    (let loop ((i 0) (acc '()))\n      (if (< i (length s))\n          (let ((char\
    \ (char-code (char s i))))\n            (let ((alpha (sub1 alpha)))\n        \
    \      (set! alpha (sub2 alpha))\n              (set! alpha (sub3 alpha))\n  \
    \            (set! alpha (sub4 alpha))\n              (set! alpha (sub5 alpha))\n\
    \              (set! alpha (sub6 alpha))\n              (set! alpha (sub7 alpha))\n\
    \              (set! alpha (sub8 alpha))\n              (set! alpha (sub9 alpha))\n\
    \              (set! alpha (sub10 alpha))\n              (set! alpha (sub11 alpha))\n\
    \              (set! alpha (sub12 alpha))\n              (set! alpha (sub13 alpha))\n\
    \              (set! alpha (sub14 alpha))\n              (set! alpha (sub15 alpha))\n\
    \              (set! alpha (sub16 alpha))\n              (set! alpha (sub17 alpha))\n\
    \              (set! alpha (sub18 alpha))\n              (set! alpha (sub19 alpha))\n\
    \              (set! alpha (sub20 alpha))\n              (set! alpha (sub21 alpha))\n\
    \              (set! alpha (sub22 alpha))\n              (set! alpha (sub23 alpha))\n\
    \              (set! alpha (sub24 alpha))\n              (set! alpha (sub25 alpha))\n\
    \              (set! alpha (sub26 alpha))\n              (set! alpha (sub27 alpha))\n\
    \              (set! alpha (sub28 alpha))\n              (set! alpha (sub29 alpha))\n\
    \              (set! alpha (sub30 alpha))\n              (set! alpha (sub31 alpha))\n\
    \              (set! alpha (sub32 alpha))\n              (set! alpha (sub33 alpha))\n\
    \              (set! alpha (sub34 alpha))\n              (set! alpha (sub35 alpha))\n\
    \              (set! alpha (sub36 alpha))\n              (set! alpha (sub37 alpha))\n\
    \              (set! alpha (sub38 alpha))\n              (set! alpha (sub39 alpha))\n\
    \              (set! ", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n\
    \    (loop for i from 0 to (length s) do\n          (set! alpha (rotate! alpha\
    \ 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha\
    \ (rotate! alpha -1))\n          (set! alpha (rotate! alpha -2))\n          (set!\
    \ alpha (rotate! alpha -1))\n          (set! alpha (rotate! alpha 0))\n      \
    \    (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate! alpha 2))\n\
    \          (set! alpha (rotate! alpha 3))\n          (set! alpha (rotate! alpha\
    \ 4))\n          (set! alpha (rotate! alpha 5))\n          (set! alpha (rotate!\
    \ alpha 6))\n          (set! alpha (rotate! alpha 7))\n          (set! alpha (rotate!\
    \ alpha 8))\n          (set! alpha (rotate! alpha 9))\n          (set! alpha (rotate!\
    \ alpha 10))\n          (set! alpha (rotate! alpha 11))\n          (set! alpha\
    \ (rotate! alpha 12))\n          (set! alpha (rotate! alpha 13))\n          (set!\
    \ alpha (rotate! alpha 14))\n          (set! alpha (rotate! alpha 15))\n     \
    \     (set! alpha (rotate! alpha 16))\n          (set! alpha (rotate! alpha 17))\n\
    \          (set! alpha (rotate! alpha 18))\n          (set! alpha (rotate! alpha\
    \ 19))\n          (set! alpha (rotate! alpha 20))\n          (set! alpha (rotate!\
    \ alpha 21))\n          (set! alpha (rotate! alpha 22))\n          (set! alpha\
    \ (rotate! alpha 23))\n          (set! alpha (rotate! alpha 24))\n          (set!\
    \ alpha (rotate! alpha 25))\n          (set! alpha (rotate! alpha 26))\n     \
    \     (set! alpha (rotate! alpha 27))\n          (set! alpha (rotate! alpha 28))\n\
    \          (set! alpha (rotate! alpha 29))\n          (set! alpha (rotate! alpha\
    \ 30))\n          (set! alpha (rotate! alpha 31))\n          (set! alpha (rotate!\
    \ alpha 32))\n          (set! alpha (rotate! alpha 33))\n          (set! alpha\
    \ (rotate! alpha 34", "  (let ((alpha (make-array 26)))\n    (define (rotate-alpha\
    \ alpha)\n      (let ((alpha (make-array 26)))\n        (set! alpha (rotate-alpha\
    \ alpha 2))\n        alpha))\n    (let ((alpha (rotate-alpha alpha)))\n      (set!\
    \ alpha (rotate-alpha alpha 2))\n      (set! alpha (rotate-alpha alpha 2))\n \
    \     (set! alpha (rotate-alpha alpha 2))\n      (set! alpha (rotate-alpha alpha\
    \ 2))\n      (set! alpha (rotate-alpha alpha 2))\n      (set! alpha (rotate-alpha\
    \ alpha 2))\n      (set! alpha (rotate-alpha alpha 2))\n      (set! alpha (rotate-alpha\
    \ alpha 2))\n      (set! alpha (rotate-alpha alpha 2))\n      (set! alpha (rotate-alpha\
    \ alpha 2))\n      (set! alpha (rotate-alpha alpha 2))\n      (set! alpha (rotate-alpha\
    \ alpha 2))\n      (set! alpha (rotate-alpha alpha 2))\n      (set! alpha (rotate-alpha\
    \ alpha 2))\n      (set! alpha (rotate-alpha alpha 2))\n      (set! alpha (rotate-alpha\
    \ alpha 2))\n      (set! alpha (rotate-alpha alpha 2))\n      (set! alpha (rotate-alpha\
    \ alpha 2))\n      (set! alpha (rotate-alpha alpha 2))\n      (set! alpha (rotate-alpha\
    \ alpha 2))\n      (set! alpha (rotate-alpha alpha 2))\n      (set! alpha (rotate-alpha\
    \ alpha 2))\n      (set! alpha (rotate-alpha alpha 2))\n      (set! alpha (rotate-alpha\
    \ alpha 2))\n      (set! alpha (rotate-alpha alpha 2))\n      (set! alpha (rotate-alpha\
    \ alpha 2))\n      (set! alpha (rotate-alpha alpha 2))\n      (set! alpha (rotate-alpha\
    \ alpha 2))\n      (set! alpha (rotate-alpha alpha 2))\n      (set! alpha (rotate-alpha\
    \ alpha 2))\n      (set! alpha (rotate-alpha alpha 2))\n      (set! alpha (rotate-alpha\
    \ alpha 2))\n      (set! alpha (rotate-alpha alpha 2))\n      (set! alpha (rotate-alpha\
    \ alpha 2))\n      (set! alpha (rotate-alpha alpha 2))\n      (set! alpha (rotate-alpha\
    \ alpha 2))\n      (set! alpha (rotate-alpha alpha 2))\n      (set! alpha (rotate-alpha\
    \ alpha 2))\n      (set! alpha (rotate-alpha alpha 2))\n      (set! alpha (rotate-alpha\
    \ alpha 2))\n      (set! alpha (rotate-alpha alpha 2))\n      (set! alpha (rotate-",
  "  (let ((alpha (make-array 26)))\n    (set! alpha (rotate-array alpha '(a b c d\
    \ e f g h i j k l m n o p q r s t u v w x y z)))\n    (let ((result (make-array\
    \ (length s) #\\space)))\n      (for ((i (in-range (length s)))\n            (char\
    \ (char-code (char s i))))\n        (set! result (set! result (set! result (set!\
    \ result (+ (char-code (char-code char)) (char-code (char alpha (char-code char)))))\n\
    \                                (set! result (set! result (set! result (set!\
    \ result (- alpha (char-code char)))))\n                                (set!\
    \ result (set! result (set! result (set! result (- alpha (char-code (char alpha\
    \ (char-code char))))))\n                                (set! result (set! result\
    \ (set! result (set! result (- alpha (char-code (char alpha (char-code (char alpha\
    \ (char-code char)))))))))\n        (set! result (set! result (set! result (set!\
    \ result (+ (char-code char) (char-code (char alpha (char-code char))))))\n  \
    \      (set! result (set! result (set! result (set! result (- alpha (char-code\
    \ (char alpha (char-code char))))))\n        (set! result (set! result (set! result\
    \ (set! result (- alpha (char-code (char alpha (char-code (char alpha (char-code\
    \ char)))))))))\n        (set! result (set! result (set! result (+ (char-code\
    \ char) (char-code (char alpha (char-code (char alpha (char-code char)))))))))\n\
    \      (set! result (set! result (set! result (+ (char-code char) (char-code (char\
    \ alpha (char-code (char alpha (char-code char)))))))))\n      (set! result (set!\
    \ result (set! result (+ (char-code char) (char-code (char alpha (char-code (char\
    \ alpha (char-code (char alpha (char-code char)))))))))\n      (set! result (set!\
    \ result (set! result (+ (char-code char) (char-code (char alpha (char-code (char\
    \ alpha (char-code (", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n\
    \    (loop for i from 0 to (length s) do\n      (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n        (loop for j from 0 to (length s) do\n          (set! alpha\
    \ (rotate! alpha j))\n          (set! alpha (rotate! alpha (- j 2)))\n       \
    \   (set! alpha (rotate! alpha (- j 2)))\n          (set! alpha (rotate! alpha\
    \ (- j 2)))\n          (set! alpha (rotate! alpha (- j 2)))\n          (set! alpha\
    \ (rotate! alpha (- j 2)))\n          (set! alpha (rotate! alpha (- j 2)))\n \
    \         (set! alpha (rotate! alpha (- j 2)))\n          (set! alpha (rotate!\
    \ alpha (- j 2)))\n          (set! alpha (rotate! alpha (- j 2)))\n          (set!\
    \ alpha (rotate! alpha (- j 2)))\n          (set! alpha (rotate! alpha (- j 2)))\n\
    \          (set! alpha (rotate! alpha (- j 2)))\n          (set! alpha (rotate!\
    \ alpha (- j 2)))\n          (set! alpha (rotate! alpha (- j 2)))\n          (set!\
    \ alpha (rotate! alpha (- j 2)))\n          (set! alpha (rotate! alpha (- j 2)))\n\
    \          (set! alpha (rotate! alpha (- j 2)))\n          (set! alpha (rotate!\
    \ alpha (- j 2)))\n          (set! alpha (rotate! alpha (- j 2)))\n          (set!\
    \ alpha (rotate! alpha (- j 2)))\n          (set! alpha (rotate! alpha (- j 2)))\n\
    \          (set! alpha (rotate! alpha (- j 2)))\n          (set! alpha (rotate!\
    \ alpha (- j 2)))\n          (set! alpha (rotate! alpha (- j 2)))\n          (set!\
    \ alpha (rotate! alpha (- j 2)))\n          (set! alpha (rotate! alpha (- j 2)))\n\
    \          (set! alpha (rotate! alpha (- j 2)))\n          (set! alpha (rotate!\
    \ alpha (- j 2)))\n          (set! alpha (rotate! alpha (- j 2)))\n          (set!\
    \ alpha (rotate! alpha (- j 2)))\n          (set! alpha (rotate! alpha (- j 2)))\n\
    \          (set! alpha (rotate! alpha (- j ", "  (let ((alpha (make-array 26 \n\
    \                          :initial-contents '(#\\a #\\b #\\c #\\d #\\e #\\f #\\\
    g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\\
    x #\\y #\\z)))\n        (str (make-array (length s) :initial-contents s)))\n \
    \   (loop for i from 0 to (length str) do\n      (let ((alpha (sub1 alpha)))\n\
    \        (set! alpha (sub2 alpha))\n        (set! alpha (sub3 alpha))\n      \
    \  (set! alpha (sub4 alpha))\n        (set! alpha (sub5 alpha))\n        (set!\
    \ alpha (sub6 alpha))\n        (set! alpha (sub7 alpha))\n        (set! alpha\
    \ (sub8 alpha))\n        (set! alpha (sub9 alpha))\n        (set! alpha (sub10\
    \ alpha))\n        (set! alpha (sub11 alpha))\n        (set! alpha (sub12 alpha))\n\
    \        (set! alpha (sub13 alpha))\n        (set! alpha (sub14 alpha))\n    \
    \    (set! alpha (sub15 alpha))\n        (set! alpha (sub16 alpha))\n        (set!\
    \ alpha (sub17 alpha))\n        (set! alpha (sub18 alpha))\n        (set! alpha\
    \ (sub19 alpha))\n        (set! alpha (sub20 alpha))\n        (set! alpha (sub21\
    \ alpha))\n        (set! alpha (sub22 alpha))\n        (set! alpha (sub23 alpha))\n\
    \        (set! alpha (sub24 alpha))\n        (set! alpha (sub25 alpha))\n    \
    \    (set! alpha (sub26 alpha))\n        (set! alpha (sub27 alpha))\n        (set!\
    \ alpha (sub28 alpha))\n        (set! alpha (sub29 alpha))\n        (set! alpha\
    \ (sub30 alpha))\n        (set! alpha (sub31 alpha))\n        (set! alpha (sub32\
    \ alpha))\n        (set! alpha (sub33 alpha))\n        (set! alpha (sub34 alpha))\n\
    \        (set! alpha (sub35 alpha))\n        (set! alpha (sub36 alpha))\n    \
    \    (set! alpha (sub37 alpha))\n        (set! alpha (sub38 alpha))\n        (set!\
    \ alpha (sub39 alpha))\n        (set! alpha (", "  (cond [(empty? s) \"\"]\n \
    \       [(equal? (first s) 'a) (cons (first s) (encrypt (rest s)))]\n        [(equal?\
    \ (first s) 'b) (cons (first s) (encrypt (rest s)))]\n        [(equal? (first\
    \ s) 'c) (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) 'd)\
    \ (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) 'e) (cons (first\
    \ s) (encrypt (rest s)))]\n        [(equal? (first s) 'f) (cons (first s) (encrypt\
    \ (rest s)))]\n        [(equal? (first s) 'g) (cons (first s) (encrypt (rest s)))]\n\
    \        [(equal? (first s) 'h) (cons (first s) (encrypt (rest s)))]\n       \
    \ [(equal? (first s) 'i) (cons (first s) (encrypt (rest s)))]\n        [(equal?\
    \ (first s) 'j) (cons (first s) (encrypt (rest s)))]\n        [(equal? (first\
    \ s) 'k) (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) 'l)\
    \ (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) 'm) (cons (first\
    \ s) (encrypt (rest s)))]\n        [(equal? (first s) 'n) (cons (first s) (encrypt\
    \ (rest s)))]\n        [(equal? (first s) 'o) (cons (first s) (encrypt (rest s)))]\n\
    \        [(equal? (first s) 'p) (cons (first s) (encrypt (rest s)))]\n       \
    \ [(equal? (first s) 'q) (cons (first s) (encrypt (rest s)))]\n        [(equal?\
    \ (first s) 'r) (cons (first s) (encrypt (rest s)))]\n        [(equal? (first\
    \ s) 's) (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) 't)\
    \ (cons (first s) (encrypt (rest s)))]\n        [(equal? (first s) 'u) (cons (first\
    \ s) (encrypt (rest s)))]\n        [(equal? (first s) 'v) (cons (first s) (encrypt\
    \ (rest s)))]\n        [(equal? (first s) 'w) (cons (first s) (encrypt (rest s)))]\n\
    \        [(equal? (first s) 'x) (cons (first s) (encrypt (rest s)))]", "  (let\
    \ ((alpha (make-array 26 \n                          :initial-contents '(a b c\
    \ d e f g h i j k l m n o p q r s t u v w x y z))))\n    (let loop ((i 0) (acc\
    \ '()))\n      (if (< i (length s))\n          (loop (+ i 1) (cons (char->integer\
    \ (char-code (substring s i 1))) acc))\n          (loop (+ i 1) acc)))))\n", " \
    \ (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for i from 0\
    \ to (length s) do\n      (let ((char (char-code (substring s i i))))\n      \
    \  (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! ", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n\
    \    (loop for i from 0 to (length s) do\n      (let ((c (char (substring s i\
    \ i)))\n            (j (char (substring alpha (+ i 2)))))\n        (set! alpha\
    \ (assoc c alpha (+ i 2))\n              alpha (assoc j alpha (+ i 2)))))\n  (apply\
    \ join (map string alpha)))\n", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (loop for i from 0 to (length s) do\n      (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n        (loop for j from 0 to (length s) do\n \
    \         (set! alpha (rotate! alpha 2))\n          (set! alpha (rotate! alpha\
    \ 1))\n          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate!\
    \ alpha -1))\n          (set! alpha (rotate! alpha -2))\n          (set! alpha\
    \ (rotate! alpha -3))\n          (set! alpha (rotate! alpha -4))\n          (set!\
    \ alpha (rotate! alpha -5))\n          (set! alpha (rotate! alpha -6))\n     \
    \     (set! alpha (rotate! alpha -7))\n          (set! alpha (rotate! alpha -8))\n\
    \          (set! alpha (rotate! alpha -9))\n          (set! alpha (rotate! alpha\
    \ -10))\n          (set! alpha (rotate! alpha -11))\n          (set! alpha (rotate!\
    \ alpha -12))\n          (set! alpha (rotate! alpha -13))\n          (set! alpha\
    \ (rotate! alpha -14))\n          (set! alpha (rotate! alpha -15))\n         \
    \ (set! alpha (rotate! alpha -16))\n          (set! alpha (rotate! alpha -17))\n\
    \          (set! alpha (rotate! alpha -18))\n          (set! alpha (rotate! alpha\
    \ -19))\n          (set! alpha (rotate! alpha -20))\n          (set! alpha (rotate!\
    \ alpha -21))\n          (set! alpha (rotate! alpha -22))\n          (set! alpha\
    \ (rotate! alpha -23))\n          (set! alpha (rotate! alpha -24))\n         \
    \ (set! alpha (rotate! alpha -25))\n          (set! alpha (rotate! alpha -26))\n\
    \          (set! alpha (rotate! alpha -27))\n          (set! alpha (rotate! alpha\
    \ -28))\n          (set! alpha (rotate! alpha -29))\n          (set! alpha (rotate!\
    \ alpha -30))\n          (set! alpha (rotate! alpha -31))\n          (set! alpha\
    \ (rotate! alpha -32))\n          (set! alpha (rotate! alpha -33))\n         \
    \ (set! alpha (rotate! alpha -34))\n          (set! alpha (", "  (let loop ((s\
    \ s)\n             (acc '()))\n    (if (empty? s)\n        acc\n        (loop\
    \ (rest s)\n              (cons (first s) acc)))))\n", "  (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n    (cond [(empty? s) \"\"]\n          [(char-alphabet\
    \ (first s)) (char-alphabet (first s))]\n          [else (loop for c in s \n \
    \                     for i from 0 to (length alpha-1)\n                     \
    \ when (char-alphabet c) \n                      do (set! alpha (rotate! alpha\
    \ i c))\n                      (set! alpha (rotate! alpha i c))\n            \
    \          (set! alpha (rotate! alpha i c))\n                      (set! alpha\
    \ (rotate! alpha i c))\n                      (set! alpha (rotate! alpha i c))\n\
    \                      (set! alpha (rotate! alpha i c))\n                    \
    \  (set! alpha (rotate! alpha i c))\n                      (set! alpha (rotate!\
    \ alpha i c))\n                      (set! alpha (rotate! alpha i c))\n      \
    \                (set! alpha (rotate! alpha i c))\n                      (set!\
    \ alpha (rotate! alpha i c))\n                      (set! alpha (rotate! alpha\
    \ i c))\n                      (set! alpha (rotate! alpha i c))\n            \
    \          (set! alpha (rotate! alpha i c))\n                      (set! alpha\
    \ (rotate! alpha i c))\n                      (set! alpha (rotate! alpha i c))\n\
    \                      (set! alpha (rotate! alpha i c))\n                    \
    \  (set! alpha (rotate! alpha i c))\n                      (set! alpha (rotate!\
    \ alpha i c))\n                      (set! alpha (rotate! alpha i c))\n      \
    \                (set! alpha (rotate! alpha i c))\n                      (set!\
    \ alpha (rotate! alpha i c))\n                      (set! alpha (rotate! alpha\
    \ i c))\n                      (set! alpha (rotate! alpha i c))\n            \
    \          (set! alpha (rotate! alpha i c))\n                      (set! alpha\
    \ (rotate! alpha i c))\n                      (set! alpha (rotate! alpha i c))\n\
    \                      (set! alpha (rotate! alpha i c))\n                    \
    \  (set! alpha (rotate! alpha i c))\n                      (set! alpha (rotate!\
    \ alpha i c))\n                      (set! alpha (rotate! alpha i c))\n      \
    \                (set! alpha (rotate! alpha i c))\n                      (set!\
    \ alpha (rotate! alpha i c))\n                      (set! alpha (rotate", "  (let\
    \ ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for i from 0 to (length\
    \ s) do\n          (set! alpha (rotate! alpha 2))\n          (set! alpha (rotate!\
    \ alpha 1))\n          (set! alpha (rotate! alpha 0))\n          (set! alpha (rotate!\
    \ alpha 3))\n          (set! alpha (rotate! alpha 6))\n          (set! alpha (rotate!\
    \ alpha 9))\n          (set! alpha (rotate! alpha 12))\n          (set! alpha\
    \ (rotate! alpha 15))\n          (set! alpha (rotate! alpha 18))\n          (set!\
    \ alpha (rotate! alpha 21)))\n    (string-append (substring s 0 i) alpha)))\n",
  "  (let loop ((s s)\n             (alphabet (list 'a 'b 'c 'd 'e 'f 'g 'h 'i 'j\
    \ 'k 'l 'm 'n 'o 'p 'q 'r 's 't 'u 'v 'w 'x 'y 'z)))\n    (cond ((null? s) (list\
    \ \"\"))\n          ((null? (cdr s)) (list \"\"))\n          ((eq? (car s) (car\
    \ alphabet)) (loop (cdr s) (append alphabet (list 'z))))\n          (else (loop\
    \ (cdr s) (append alphabet (list (car s))))))))\n", "  (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n    (cond ((null? s) (list \"\"))\n          ((char=\
    \ (first s) #\\a) (list \"\"))\n          ((char= (first s) #\\z) (list \"\"))\n\
    \          ((char= (first s) #\\A) (list \"\"))\n          ((char= (first s) #\\\
    Z) (list \"\"))\n          ((char= (first s) #\\0) (list \"\"))\n          ((char=\
    \ (first s) #\\9) (list \"\"))\n          ((char= (first s) #\\8) (list \"\"))\n\
    \          ((char= (first s) #\\7) (list \"\"))\n          ((char= (first s) #\\\
    6) (list \"\"))\n          ((char= (first s) #\\5) (list \"\"))\n          ((char=\
    \ (first s) #\\4) (list \"\"))\n          ((char= (first s) #\\3) (list \"\"))\n\
    \          ((char= (first s) #\\2) (list \"\"))\n          ((char= (first s) #\\\
    1) (list \"\"))\n          ((char= (first s) #\\0) (list \"\"))\n          ((char=\
    \ (first s) #\\9) (list \"\"))\n          ((char= (first s) #\\8) (list \"\"))\n\
    \          ((char= (first s) #\\7) (list \"\"))\n          ((char= (first s) #\\\
    6) (list \"\"))\n          ((char= (first s) #\\5) (list \"\"))\n          ((char=\
    \ (first s) #\\4) (list \"\"))\n          ((char= (first s) #\\3) (list \"\"))\n\
    \          ((char= (first s) #\\2) (list \"\"))\n          ((char= (first s) #\\\
    1) (list \"\"))\n          ((char= (first s) #\\0) (list \"\"))\n          ((char=\
    \ (first s) #\\9) (list \"\"))\n          ((char= (first s) #\\8) (list \"\"))\n\
    \          ((char= (first s) #\\7) (list \"\"))\n          ((char= (first s) #\\\
    6) (list \"\"))\n          ((char= (first s) #\\5) (list \"\"))\n          ((char=\
    \ (first s) #\\4) (list \"\"))\n          ((char= (first s) #\\3) (list \"\"))\n\
    \          ((char= (first s) #\\2) (list \"\"))\n          ((char= (first s) #\\\
    1) (list \"\"))\n          ((char= (first s) #\\0) (list \"\"))\n          ((char=\
    \ (first s) #\\9", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n \
    \   (loop for i from 0 to (length s) do\n      (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n        (loop for j from 0 to (length s) do\n          (set! alpha\
    \ (rotate! alpha j))\n          (set! alpha (rotate! alpha (- j 2)))\n       \
    \   (set! alpha (rotate! alpha (- j 1)))\n          (set! alpha (rotate! alpha\
    \ (- j 0)))\n          (set! alpha (rotate! alpha (- j 1)))\n          (set! alpha\
    \ (rotate! alpha (- j 2)))\n          (set! alpha (rotate! alpha (- j 3)))\n \
    \         (set! alpha (rotate! alpha (- j 4)))\n          (set! alpha (rotate!\
    \ alpha (- j 5)))\n          (set! alpha (rotate! alpha (- j 6)))\n          (set!\
    \ alpha (rotate! alpha (- j 7)))\n          (set! alpha (rotate! alpha (- j 8)))\n\
    \          (set! alpha (rotate! alpha (- j 9)))\n          (set! alpha (rotate!\
    \ alpha (- j 10)))\n          (set! alpha (rotate! alpha (- j 11)))\n        \
    \  (set! alpha (rotate! alpha (- j 12)))\n          (set! alpha (rotate! alpha\
    \ (- j 13)))\n          (set! alpha (rotate! alpha (- j 14)))\n          (set!\
    \ alpha (rotate! alpha (- j 15)))\n          (set! alpha (rotate! alpha (- j 16)))\n\
    \          (set! alpha (rotate! alpha (- j 17)))\n          (set! alpha (rotate!\
    \ alpha (- j 18)))\n          (set! alpha (rotate! alpha (- j 19)))\n        \
    \  (set! alpha (rotate! alpha (- j 20)))\n          (set! alpha (rotate! alpha\
    \ (- j 21)))\n          (set! alpha (rotate! alpha (- j 22)))\n          (set!\
    \ alpha (rotate! alpha (- j 23)))\n          (set! alpha (rotate! alpha (- j 24)))\n\
    \          (set! alpha (rotate! alpha (- j 25)))\n          (set! alpha (rotate!\
    \ alpha (- j 26))))\n      (set! alpha (rotate! alpha (- i 1)))\n      (set! ",
  "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for i from 0\
    \ to (length s) do\n      (let ((alpha (make-array 26 :initial-element #\\a)))\n\
    \        (loop for j from 0 to (length s) do\n          (set! alpha (rotate! alpha\
    \ j))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i ", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (let\
    \ loop ((i 0) (acc '()))\n      (if (< i (length s))\n          (loop (+ i 1)\
    \ (cons (char->integer (char->symbol s[i])) (cons (char->integer (char->symbol\
    \ (char->symbol s i))) (cons (char->integer (char->symbol (char->symbol s i)))\
    \ (cons (char->integer (char->symbol (char->symbol s i))) (cons (char->integer\
    \ (char->symbol (char->symbol s i))) (cons (char->integer (char->symbol (char->symbol\
    \ s i))) (cons (char->integer (char->symbol (char->symbol s i))) (cons (char->integer\
    \ (char->symbol (char->symbol s i))) (cons (char->integer (char->symbol (char->symbol\
    \ s i))) (cons (char->integer (char->symbol (char->symbol s i))) (cons (char->integer\
    \ (char->symbol (char->symbol s i))) (cons (char->integer (char->symbol (char->symbol\
    \ s i))) (cons (char->integer (char->symbol (char->symbol s i))) (cons (char->integer\
    \ (char->symbol (char->symbol s i))) (cons (char->integer (char->symbol (char->symbol\
    \ s i))) (cons (char->integer (char->symbol (char->symbol s i))) (cons (char->integer\
    \ (char->symbol (char->symbol s i))) (cons (char->integer (char->symbol (char->symbol\
    \ s i))) (cons (char->integer (char->symbol (char->symbol s i))) (cons (char->integer\
    \ (char->symbol (char->symbol s i))) (cons (char->integer (char->symbol (char->symbol\
    \ s i))) (cons (char->integer (char->symbol (char->symbol s i))) (cons (char->integer\
    \ (char->symbol (char->symbol s i))) (cons (char->integer (char->symbol (char->symbol\
    \ s i))) (cons (char->integer (char->symbol (char->symbol s i))) (cons (char->integer\
    \ (char->symbol (char->symbol s i))) (cons (char->integer (char->symbol (char->symbol\
    \ s i))) (cons (char->integer (char->symbol (char->symbol s i))) (cons (char->integer\
    \ (char->symbol (char->symbol s i))) (cons (char->integer (char->symbol (", " \
    \ (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for i from 0\
    \ to (length s) do\n      (let ((c (char-code (substring s i i))))\n        (set!\
    \ alpha (rotate! alpha c))\n        (set! alpha (rotate! alpha (c-value c))))\n\
    \    (string-append (make-string 1 #\\a) alpha)))\n", "  (let ((alpha (make-array\
    \ (length s) #:initial-element #\\a)))\n    (loop for i from 0 to (length s) do\n\
    \      (set! alpha (rotate! alpha 2))\n      (set! alpha (rotate! alpha 1))\n\
    \      (set! alpha (rotate! alpha 0))\n      (set! alpha (rotate! alpha -1))\n\
    \      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate! alpha -3))\n\
    \      (set! alpha (rotate! alpha -4))\n      (set! alpha (rotate! alpha -5))\n\
    \      (set! alpha (rotate! alpha -6))\n      (set! alpha (rotate! alpha -7))\n\
    \      (set! alpha (rotate! alpha -8))\n      (set! alpha (rotate! alpha -9))\n\
    \      (set! alpha (rotate! alpha -10))\n      (set! alpha (rotate! alpha -11))\n\
    \      (set! alpha (rotate! alpha -12))\n      (set! alpha (rotate! alpha -13))\n\
    \      (set! alpha (rotate! alpha -14))\n      (set! alpha (rotate! alpha -15))\n\
    \      (set! alpha (rotate! alpha -16))\n      (set! alpha (rotate! alpha -17))\n\
    \      (set! alpha (rotate! alpha -18))\n      (set! alpha (rotate! alpha -19))\n\
    \      (set! alpha (rotate! alpha -20))\n      (set! alpha (rotate! alpha -21))\n\
    \      (set! alpha (rotate! alpha -22))\n      (set! alpha (rotate! alpha -23))\n\
    \      (set! alpha (rotate! alpha -24))\n      (set! alpha (rotate! alpha -25))\n\
    \      (set! alpha (rotate! alpha -26))\n      (set! alpha (rotate! alpha -27))\n\
    \      (set! alpha (rotate! alpha -28))\n      (set! alpha (rotate! alpha -29))\n\
    \      (set! alpha (rotate! alpha -30))\n      (set! alpha (rotate! alpha -31))\n\
    \      (set! alpha (rotate! alpha -32))\n      (set! alpha (rotate! alpha -33))\n\
    \      (set! alpha (rotate! alpha -34))\n      (set! alpha (rotate! alpha -35))\n\
    \      (set! alpha (rotate! alpha -36))\n      (set! alpha (rotate! alpha -37))\n\
    \      (set! alpha (rotate! alpha -38))\n      (set! alpha (rotate! alpha -39))\n\
    \      (set! alpha (rotate! ", "  (let ((alpha (make-array 26 \n             \
    \             :initial-contents '(a b c d e f g h i j k l m n o p q r s t u v\
    \ w x y z))))\n    (loop for i from 0 to (length s) do\n      (let ((c (char-code\
    \ (substring s i i))))\n        (set! alpha (assoc c alpha))\n        (set! alpha\
    \ (assoc c alpha (+ i 2)))\n        (set! alpha (assoc c alpha (+ i 1)))\n   \
    \     (set! alpha (assoc c alpha (+ i 0)))\n        (set! alpha (assoc c alpha\
    \ (+ i -1)))\n        (set! alpha (assoc c alpha (+ i -2)))\n        (set! alpha\
    \ (assoc c alpha (+ i -3)))\n        (set! alpha (assoc c alpha (+ i -4)))\n \
    \       (set! alpha (assoc c alpha (+ i -5)))\n        (set! alpha (assoc c alpha\
    \ (+ i -6)))\n        (set! alpha (assoc c alpha (+ i -7)))\n        (set! alpha\
    \ (assoc c alpha (+ i -8)))\n        (set! alpha (assoc c alpha (+ i -9)))\n \
    \       (set! alpha (assoc c alpha (+ i -10)))\n        (set! alpha (assoc c alpha\
    \ (+ i -11)))\n        (set! alpha (assoc c alpha (+ i -12)))\n        (set! alpha\
    \ (assoc c alpha (+ i -13)))\n        (set! alpha (assoc c alpha (+ i -14)))\n\
    \        (set! alpha (assoc c alpha (+ i -15)))\n        (set! alpha (assoc c\
    \ alpha (+ i -16)))\n        (set! alpha (assoc c alpha (+ i -17)))\n        (set!\
    \ alpha (assoc c alpha (+ i -18)))\n        (set! alpha (assoc c alpha (+ i -19)))\n\
    \        (set! alpha (assoc c alpha (+ i -20)))\n        (set! alpha (assoc c\
    \ alpha (+ i -21)))\n        (set! alpha (assoc c alpha (+ i -22)))\n        (set!\
    \ alpha (assoc c alpha (+ i -23)))\n        (set! alpha (assoc c alpha (+ i -24))))\n\
    \    (apply join (map char->string alpha))))\n", "  (let ((alpha (make-array 26\
    \ :initial-element #\\a)))\n    (loop for c across s\n          for i from 0 to\
    \ 26\n          for j from 0 to 26\n          when (char=? c alpha)\n        \
    \  collect (rotate-char (char-code c) i j))))\n", "  (let ((alpha (make-array\
    \ 26)))\n    (loop for i from 0 to (length s) by 2\n          for j from 0 to\
    \ (length s) by 2\n          for k from 0 to (length s) by 2\n          for l\
    \ from 0 to (length s) by 2\n          for m from 0 to (length s) by 2\n     \
    \     for n from 0 to (length s) by 2\n          for o from 0 to (length s) by\
    \ 2\n          for p from 0 to (length s) by 2\n          for q from 0 to (length\
    \ s) by 2\n          for r from 0 to (length s) by 2\n          for s from 0 to\
    \ (length s) by 2\n          for t from 0 to (length s) by 2\n          for u\
    \ from 0 to (length s) by 2\n          for v from 0 to (length s) by 2\n     \
    \     for w from 0 to (length s) by 2\n          for x from 0 to (length s) by\
    \ 2\n          for y from 0 to (length s) by 2\n          for z from 0 to (length\
    \ s) by 2\n          for w from 0 to (length s) by 2\n          for x from 0 to\
    \ (length s) by 2\n          for y from 0 to (length s) by 2\n          for z\
    \ from 0 to (length s) by 2\n          for w from 0 to (length s) by 2\n     \
    \     for x from 0 to (length s) by 2\n          for y from 0 to (length s) by\
    \ 2\n          for z from 0 to (length s) by 2\n          for w from 0 to (length\
    \ s) by 2\n          for x from 0 to (length s) by 2\n          for y from 0 to\
    \ (length s) by 2\n          for z from 0 to (length s) by 2\n          for w\
    \ from 0 to (length s) by 2\n          for x from 0 to (length s) by 2\n     \
    \     for y from 0 to (length s) by 2\n          for z from 0 to (length s) by\
    \ 2\n          for w from 0 to (length s) by 2\n          for x from 0 to (length\
    \ s) by 2\n          for y from 0 to (length s) by 2\n          for z from 0 to\
    \ (length s) by 2\n          for w from 0 to (length s) by 2\n          for x\
    \ from 0 to (length s) by 2\n          for y from 0 to (length s) by 2\n     \
    \     for z from 0 to (length s) by 2\n          for w from 0 to (length s) by\
    \ 2\n          for x from 0 to (length s) by 2\n          for y from 0 to (length\
    \ s) by 2\n          for z from 0 to (length ", "  (let ((alpha (make-array 26\
    \ :initial-element #\\a)))\n    (loop for i from 0 to (length s) by 2\n      \
    \    for j from 0 to (length s) by 2\n          collect (substring alpha (+ i\
    \ (* 2 j))\n                          (+ i (* 2 j)))))\n  ", "  (let loop ((s\
    \ s)\n             (acc '()))\n    (if (empty? s)\n        acc\n        (loop\
    \ (rest s)\n              (cons (first s) acc)))))\n", "  (let loop ((s s)\n \
    \            (result '()))\n    (if (empty? s)\n        result\n        (loop\
    \ (rest s)\n              (cons (first s)\n                    (loop (rest s)\n\
    \                          (cons (second s)\n                                result)))))))\n",
  "  (let loop ((s s)\n             (a #(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\\
    i #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\\
    z))\n             (r #\\a))\n    (if (null? s)\n        (reverse r)\n        (loop\
    \ (cdr s) (cons (car s) r)))))\n", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (let loop ((s s)\n              (alpha (make-array 26 :initial-element\
    \ #\\a)))\n      (cond ((null? s) (list \"\"))\n            ((char=? (car s) #\\\
    a) (append alpha (loop (cdr s) alpha)))\n            (else (loop (cdr s) (append\
    \ alpha (loop (cdr s) alpha)))))))\n", "  (let ((alpha (make-array (length s)\
    \ (lambda (x) (+ x 2)))))\n    (do ((i 0 (+ i 1))\n         (j 0 (+ j 1)))\n \
    \       ((< i s))\n      (set! alpha (assoc alpha (substring s i j) j))\n    \
    \  (set! alpha (assoc alpha (substring s i j) i))\n      (set! alpha (assoc alpha\
    \ (substring s i j) j))\n      (set! alpha (assoc alpha (substring s i j) i))\n\
    \      (set! alpha (assoc alpha (substring s i j) j))\n      (set! alpha (assoc\
    \ alpha (substring s i j) i))\n      (set! alpha (assoc alpha (substring s i j)\
    \ j))\n      (set! alpha (assoc alpha (substring s i j) i))\n      (set! alpha\
    \ (assoc alpha (substring s i j) j))\n      (set! alpha (assoc alpha (substring\
    \ s i j) i))\n      (set! alpha (assoc alpha (substring s i j) j))\n      (set!\
    \ alpha (assoc alpha (substring s i j) i))\n      (set! alpha (assoc alpha (substring\
    \ s i j) j))\n      (set! alpha (assoc alpha (substring s i j) i))\n      (set!\
    \ alpha (assoc alpha (substring s i j) j))\n      (set! alpha (assoc alpha (substring\
    \ s i j) i))\n      (set! alpha (assoc alpha (substring s i j) j))\n      (set!\
    \ alpha (assoc alpha (substring s i j) i))\n      (set! alpha (assoc alpha (substring\
    \ s i j) j))\n      (set! alpha (assoc alpha (substring s i j) i))\n      (set!\
    \ alpha (assoc alpha (substring s i j) j))\n      (set! alpha (assoc alpha (substring\
    \ s i j) i))\n      (set! alpha (assoc alpha (substring s i j) j))\n      (set!\
    \ alpha (assoc alpha (substring s i j) i))\n      (set! alpha (assoc alpha (substring\
    \ s i j) j))\n      (set! alpha (assoc alpha (substring s i j) i))\n      (set!\
    \ alpha (assoc alpha (substring s i j) ", "  (let ((alpha (make-alphabet (length\
    \ s))))\n    (let loop ((i 0) (acc '()))\n      (if (< i alpha)\n          (loop\
    \ (+ i 1) (cons (char->int (char s (+ i 1))) (cons (char->int (char s (+ i 2)))\
    \ (cons (char->int (char s (+ i 3))) (cons (char->int (char s (+ i 4))) (cons\
    \ (char->int (char s (+ i 5))) (cons (char->int (char s (+ i 6))) (cons (char->int\
    \ (char s (+ i 7))) (cons (char->int (char s (+ i 8))) (cons (char->int (char\
    \ s (+ i 9))) (cons (char->int (char s (+ i 10))) (cons (char->int (char s (+\
    \ i 11))) (cons (char->int (char s (+ i 12))) (cons (char->int (char s (+ i 13)))\
    \ (cons (char->int (char s (+ i 14))) (cons (char->int (char s (+ i 15))) (cons\
    \ (char->int (char s (+ i 16))) (cons (char->int (char s (+ i 17))) (cons (char->int\
    \ (char s (+ i 18))) (cons (char->int (char s (+ i 19))) (cons (char->int (char\
    \ s (+ i 20))) (cons (char->int (char s (+ i 21))) (cons (char->int (char s (+\
    \ i 22))) (cons (char->int (char s (+ i 23))) (cons (char->int (char s (+ i 24)))\
    \ (cons (char->int (char s (+ i 25))) (cons (char->int (char s (+ i 26))) (cons\
    \ (char->int (char s (+ i 27))) (cons (char->int (char s (+ i 28))) (cons (char->int\
    \ (char s (+ i 29))) (cons (char->int (char s (+ i 30))) (cons (char->int (char\
    \ s (+ i 31))) (cons (char->int (char s (+ i 32))) (cons (char->int (char s (+\
    \ i 33))) (cons (char->int (char s (+ i 34))) (cons (char->int (char s (+ i 35)))\
    \ (cons (char->int (char s (+ i 36))) (cons (char->int (char s (+ i 37))) (cons\
    \ (char", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for\
    \ i from 0 to (length s) do\n      (let ((char (char-code (char s i))))\n    \
    \    (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (loop for c across s\n          for i from 0\n          for j from\
    \ (- i 2)\n          for k from (- j 2)\n          when (char=? c alpha)\n   \
    \       collect (rotate-char (char-code c) i j k))))\n", "  (let ((alpha (make-array\
    \ (length s) #:initial-element #\\a)))\n    (let loop ((i 0) (acc '()))\n    \
    \  (if (< i (length s))\n          (loop (+ i 1) (cons alpha (substring s i (+\
    \ i 1))))\n          (loop (+ i 1) acc)))))\n", "  (let ((alpha (make-array 26\
    \ :initial-element #\\a)))\n    (loop for i from 0 to (length s) do\n      (let\
    \ ((alpha (make-array 26 :initial-element #\\a)))\n        (loop for j from 0\
    \ to (length s) do\n          (set! alpha (rotate! alpha j))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n\
    \          (set! alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate!\
    \ alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i 1)))\n          (set!\
    \ alpha (rotate! alpha (- i 1)))\n          (set! alpha (rotate! alpha (- i ",
  "  (let ((alpha (make-array (length s) (lambda (x) (+ x 2)))))\n    (do ((i 0 (+\
    \ i 1))\n         (c 0 (+ c 1)))\n        ((< i s))\n      (set! alpha (assoc\
    \ alpha (substring s i c))\n            (assoc alpha (substring s i c)))\n   \
    \   (set! alpha (assoc alpha (substring s i c))\n            (assoc alpha (substring\
    \ s i c)))\n      (set! alpha (assoc alpha (substring s i c))\n            (assoc\
    \ alpha (substring s i c)))\n      (set! alpha (assoc alpha (substring s i c))\n\
    \            (assoc alpha (substring s i c)))\n      (set! alpha (assoc alpha\
    \ (substring s i c))\n            (assoc alpha (substring s i c)))\n      (set!\
    \ alpha (assoc alpha (substring s i c))\n            (assoc alpha (substring s\
    \ i c)))\n      (set! alpha (assoc alpha (substring s i c))\n            (assoc\
    \ alpha (substring s i c)))\n      (set! alpha (assoc alpha (substring s i c))\n\
    \            (assoc alpha (substring s i c)))\n      (set! alpha (assoc alpha\
    \ (substring s i c))\n            (assoc alpha (substring s i c)))\n      (set!\
    \ alpha (assoc alpha (substring s i c))\n            (assoc alpha (substring s\
    \ i c)))\n      (set! alpha (assoc alpha (substring s i c))\n            (assoc\
    \ alpha (substring s i c)))\n      (set! alpha (assoc alpha (substring s i c))\n\
    \            (assoc alpha (substring s i c)))\n      (set! alpha (assoc alpha\
    \ (substring s i c))\n            (assoc alpha (substring s i c)))\n      (set!\
    \ alpha (assoc alpha (substring s i c))\n            (assoc alpha (substring s\
    \ i c)))\n      (set! alpha (assoc alpha (substring s i c))\n            (assoc\
    \ alpha (substring s i c)))\n      (set! alpha (assoc alpha (substring s i c))\n\
    \            (assoc alpha (substring s i c)))\n      (set! alpha (assoc alpha\
    \ (substring s i c))\n            (assoc alpha (sub", "  (let ((alpha (make-array\
    \ (length s) #:initial-element #\\a)))\n    (loop for i from 0 to (length s) do\n\
    \      (set! alpha (rotate! alpha 2))\n      (set! alpha (rotate! alpha 1))\n\
    \      (set! alpha (rotate! alpha 0))\n      (set! alpha (rotate! alpha -1))\n\
    \      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate! alpha -3))\n\
    \      (set! alpha (rotate! alpha -4))\n      (set! alpha (rotate! alpha -5))\n\
    \      (set! alpha (rotate! alpha -6))\n      (set! alpha (rotate! alpha -7))\n\
    \      (set! alpha (rotate! alpha -8))\n      (set! alpha (rotate! alpha -9))\n\
    \      (set! alpha (rotate! alpha -10))\n      (set! alpha (rotate! alpha -11))\n\
    \      (set! alpha (rotate! alpha -12))\n      (set! alpha (rotate! alpha -13))\n\
    \      (set! alpha (rotate! alpha -14))\n      (set! alpha (rotate! alpha -15))\n\
    \      (set! alpha (rotate! alpha -16))\n      (set! alpha (rotate! alpha -17))\n\
    \      (set! alpha (rotate! alpha -18))\n      (set! alpha (rotate! alpha -19))\n\
    \      (set! alpha (rotate! alpha -20))\n      (set! alpha (rotate! alpha -21))\n\
    \      (set! alpha (rotate! alpha -22))\n      (set! alpha (rotate! alpha -23))\n\
    \      (set! alpha (rotate! alpha -24))\n      (set! alpha (rotate! alpha -25))\n\
    \      (set! alpha (rotate! alpha -26))\n      (set! alpha (rotate! alpha -27))\n\
    \      (set! alpha (rotate! alpha -28))\n      (set! alpha (rotate! alpha -29))\n\
    \      (set! alpha (rotate! alpha -30))\n      (set! alpha (rotate! alpha -31))\n\
    \      (set! alpha (rotate! alpha -32))\n      (set! alpha (rotate! alpha -33))\n\
    \      (set! alpha (rotate! alpha -34))\n      (set! alpha (rotate! alpha -35))\n\
    \      (set! alpha (rotate! alpha -36))\n      (set! alpha (rotate! alpha -37))\n\
    \      (set! alpha (rotate! alpha -38))\n      (set! alpha (rotate! alpha -39))\n\
    \      (set! alpha (rotate! ", "  (let ((alpha (make-array (length s) (lambda\
    \ (x) (+ x 2)))))\n    (loop for i from 0 to (length s) do\n          (set! alpha\
    \ (assoc alpha (substring s i i) i))\n          (set! alpha (assoc alpha (substring\
    \ s i i) (i + 2))))\n    (apply join (map char->string alpha))))\n", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n    (loop for i from 0 to (length s)\
    \ by 2\n          for c from 0 to (length s) by 2\n          when (char=? (char-ref\
    \ s i c) alpha)\n          collect (cons (char-ref s i c) (char-ref s i c)))))\n",
  "  (let loop ((s s)\n             (alphabet (list 'a b c d e f g h i j k l m n o\
    \ p q r s t u v w x y z))\n             (result '()))\n    (cond\n      [(empty?\
    \ s) result]\n      [(equal? (first s) (first alphabet)) (loop (rest s) alphabet\
    \ (cons (first s) result))]\n      [else (loop (rest s) alphabet (cons (first\
    \ s) result))])))\n", "  (let loop ((s s)\n             (result '()))\n    (cond\
    \ [(empty? s) result]\n          [(char-alphabet (first s)) (loop (rest s) (cons\
    \ (first s) result))]\n          [else (loop (rest s) (cons (first s) (cons (first\
    \ s) result)))])))\n", "  (let ((alpha (make-array (length s) #:initial-element\
    \ #\\a)))\n    (loop for i from 0 to (length s) do\n      (set! alpha (rotate!\
    \ alpha #\\a))\n      (set! alpha (rotate! alpha #\\b))\n      (set! alpha (rotate!\
    \ alpha #\\c))\n      (set! alpha (rotate! alpha #\\d))\n      (set! alpha (rotate!\
    \ alpha #\\e))\n      (set! alpha (rotate! alpha #\\f))\n      (set! alpha (rotate!\
    \ alpha #\\g))\n      (set! alpha (rotate! alpha #\\h))\n      (set! alpha (rotate!\
    \ alpha #\\i))\n      (set! alpha (rotate! alpha #\\j))\n      (set! alpha (rotate!\
    \ alpha #\\k))\n      (set! alpha (rotate! alpha #\\l))\n      (set! alpha (rotate!\
    \ alpha #\\m))\n      (set! alpha (rotate! alpha #\\n))\n      (set! alpha (rotate!\
    \ alpha #\\o))\n      (set! alpha (rotate! alpha #\\p))\n      (set! alpha (rotate!\
    \ alpha #\\q))\n      (set! alpha (rotate! alpha #\\r))\n      (set! alpha (rotate!\
    \ alpha #\\s))\n      (set! alpha (rotate! alpha #\\t))\n      (set! alpha (rotate!\
    \ alpha #\\u))\n      (set! alpha (rotate! alpha #\\v))\n      (set! alpha (rotate!\
    \ alpha #\\w))\n      (set! alpha (rotate! alpha #\\x))\n      (set! alpha (rotate!\
    \ alpha #\\y))\n      (set! alpha (rotate! alpha #\\z))\n      (set! alpha (rotate!\
    \ alpha #\\0))\n      (set! alpha (rotate! alpha #\\1))\n      (set! alpha (rotate!\
    \ alpha #\\2))\n      (set! alpha (rotate! alpha #\\3))\n      (set! alpha (rotate!\
    \ alpha #\\4))\n      (set! alpha (rotate! alpha #\\5))\n      (set! alpha (rotate!\
    \ alpha #\\6))\n      (set! alpha (rotate! alpha #\\7))\n      (set! alpha (rotate!\
    \ alpha #\\8))\n      (set! alpha (rotate! alpha #\\9))\n      (set! alpha (rotate!\
    \ alpha #\\+))\n      (set! alpha (rotate! alpha #\\-))\n      (set! alpha (rotate!\
    \ alpha #\\*))\n      (set", "  (let ((alpha (make-array 26)))\n    (loop for\
    \ i from 0 to (length s) do\n      (set! alpha (rotate! alpha i))\n      (set!\
    \ alpha (rotate! alpha (- (length s) i)))\n      (set! alpha (rotate! alpha (-\
    \ (length s) (- (length s) i))))\n    (string-append (substring s 0 i) (substring\
    \ s i (length s)))))\n", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n\
    \    (loop for i from 0 to (length s) do\n      (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n        (loop for j from 0 to (length s) do\n          (set! alpha\
    \ (rotate! alpha 2))\n          (set! alpha (rotate! alpha 1))\n          (set!\
    \ alpha (rotate! alpha 0))\n          (set! alpha (rotate! alpha -1))\n      \
    \    (set! alpha (rotate! alpha -2))\n          (set! alpha (rotate! alpha -3))\n\
    \          (set! alpha (rotate! alpha -4))\n          (set! alpha (rotate! alpha\
    \ -5))\n          (set! alpha (rotate! alpha -6))\n          (set! alpha (rotate!\
    \ alpha -7))\n          (set! alpha (rotate! alpha -8))\n          (set! alpha\
    \ (rotate! alpha -9))\n          (set! alpha (rotate! alpha -10))\n          (set!\
    \ alpha (rotate! alpha -11))\n          (set! alpha (rotate! alpha -12))\n   \
    \       (set! alpha (rotate! alpha -13))\n          (set! alpha (rotate! alpha\
    \ -14))\n          (set! alpha (rotate! alpha -15))\n          (set! alpha (rotate!\
    \ alpha -16))\n          (set! alpha (rotate! alpha -17))\n          (set! alpha\
    \ (rotate! alpha -18))\n          (set! alpha (rotate! alpha -19))\n         \
    \ (set! alpha (rotate! alpha -20))\n          (set! alpha (rotate! alpha -21))\n\
    \          (set! alpha (rotate! alpha -22))\n          (set! alpha (rotate! alpha\
    \ -23))\n          (set! alpha (rotate! alpha -24))\n          (set! alpha (rotate!\
    \ alpha -25))\n          (set! alpha (rotate! alpha -26))\n          (set! alpha\
    \ (rotate! alpha -27))\n          (set! alpha (rotate! alpha -28))\n         \
    \ (set! alpha (rotate! alpha -29))\n          (set! alpha (rotate! alpha -30))\n\
    \          (set! alpha (rotate! alpha -31))\n          (set! alpha (rotate! alpha\
    \ -32))\n          (set! alpha (rotate! alpha -33))\n          (set! alpha (rotate!\
    \ alpha -34))\n          (set! alpha (", "  (let loop ((s s)\n             (acc\
    \ '()))\n    (if (null? s)\n        acc\n        (loop (cdr s)\n             \
    \ (cons (char->integer (char->string (car s))) acc)))))\n", "  (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n    (loop for c across s\n          for i from\
    \ 0\n          for j from (- i 2)\n          for k from (- j 2)\n          when\
    \ (char=? c alpha)\n          collect (rotate-char c i j k))))\n", "  (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n    (let loop ((s s)\n            \
    \   (alpha alpha))\n      (cond\n        ((null? s) s)\n        ((char=? (car\
    \ s) #\\a) (char=? (car alpha) #\\a))\n        (else (loop (cdr s) (rotate-right\
    \ (car alpha) (car s)))))))\n", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (loop for i from 0 to (length s) do\n      (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n        (loop for j from 0 to (length s) do\n \
    \         (let ((alpha (make-array 26 :initial-element #\\a)))\n            (loop\
    \ for k from 0 to (length s) do\n              (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n                (loop for l from 0 to (length s) do\n             \
    \     (let ((alpha (make-array 26 :initial-element #\\a)))\n                 \
    \   (loop for m from 0 to (length s) do\n                      (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n                        (loop for n from 0 to (length\
    \ s) do\n                          (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n                            (loop for o from 0 to (length s) do\n \
    \                             (let ((alpha (make-array 26 :initial-element #\\\
    a)))\n                                (loop for p from 0 to (length s) do\n  \
    \                                (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n                                    (loop for q from 0 to (length s)\
    \ do\n                                      (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n                                        (loop for r from 0 to (length\
    \ s) do\n                                          (let ((alpha (make-array 26\
    \ :initial-element #\\a)))\n                                            (loop\
    \ for s from\n                                                      0 to (length\
    \ s) do\n                                              (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n                                              \
    \  (loop for t from 0 to (length s) do\n                                     \
    \             (let ((alpha (make-array 26 :initial-element #\\a)))\n         \
    \                                           (loop for u from 0 to (length s) do\n\
    \                                                      (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n                                              \
    \          (loop for v from 0 to (length s) do\n                             \
    \                             (let ((alpha (make-array 26 :initial-element #\\\
    a)))\n                                                            (loop for w\
    \ from 0 to (length s) do\n                                                  \
    \            (let ((alpha (make-array 26 :initial-element #\\a)))\n          \
    \                                                      (loop for x from 0 to (length\
    \ s) do\n                                                                  (let\
    \ ((alpha (make-array 26 :initial-element #\\a)))\n                          \
    \                                          (loop for y from 0 to (length s) do\n\
    \                                                                      (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n                                  \
    \                                      (loop for z from ", "  (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n    (let loop ((i 0) (s s))\n      (cond\n    \
    \    ((null? s) (list s))\n        ((eq? (char (car s)) 'z) (cons (char (car s))\
    \ (loop (+ i 1) (char (cdr s)))))\n        ((eq? (char (car s)) 'a) (cons (char\
    \ (car s)) (loop (+ i 1) (char (cdr s)))))\n        (else (cons (char (char (car\
    \ s) (+ i 1))) (loop (+ i 1) (char (cdr s)))))))\n    (loop (length s) (substring\
    \ s 0 0))))\n", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop\
    \ for i from 0 to (length s) do\n      (set! alpha (rotate! alpha 2))\n      (set!\
    \ alpha (rotate! alpha 1))\n      (set! alpha (rotate! alpha 0))\n      (set!\
    \ alpha (rotate! alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set!\
    \ alpha (rotate! alpha -3))\n      (set! alpha (rotate! alpha -4))\n      (set!\
    \ alpha (rotate! alpha -5))\n      (set! alpha (rotate! alpha -6))\n      (set!\
    \ alpha (rotate! alpha -7))\n      (set! alpha (rotate! alpha -8))\n      (set!\
    \ alpha (rotate! alpha -9))\n      (set! alpha (rotate! alpha -10))\n      (set!\
    \ alpha (rotate! alpha -11))\n      (set! alpha (rotate! alpha -12))\n      (set!\
    \ alpha (rotate! alpha -13))\n      (set! alpha (rotate! alpha -14))\n      (set!\
    \ alpha (rotate! alpha -15))\n      (set! alpha (rotate! alpha -16))\n      (set!\
    \ alpha (rotate! alpha -17))\n      (set! alpha (rotate! alpha -18))\n      (set!\
    \ alpha (rotate! alpha -19))\n      (set! alpha (rotate! alpha -20))\n      (set!\
    \ alpha (rotate! alpha -21))\n      (set! alpha (rotate! alpha -22))\n      (set!\
    \ alpha (rotate! alpha -23))\n      (set! alpha (rotate! alpha -24))\n      (set!\
    \ alpha (rotate! alpha -25))\n      (set! alpha (rotate! alpha -26))\n      (set!\
    \ alpha (rotate! alpha -27))\n      (set! alpha (rotate! alpha -28))\n      (set!\
    \ alpha (rotate! alpha -29))\n      (set! alpha (rotate! alpha -30))\n      (set!\
    \ alpha (rotate! alpha -31))\n      (set! alpha (rotate! alpha -32))\n      (set!\
    \ alpha (rotate! alpha -33))\n      (set! alpha (rotate! alpha -34))\n      (set!\
    \ alpha (rotate! alpha -35))\n      (set! alpha (rotate! alpha -36))\n      (set!\
    \ alpha (rotate! alpha -37))\n      (set! alpha (rotate! alpha -38))\n      (set!\
    \ alpha (rotate! alpha -39))\n      (set! alpha (rotate! alpha -40", "  (let ((alpha\
    \ (make-array (length s) (lambda (x) (+ x 2)))))\n    (do ((i 0 (+ i 1))\n   \
    \      (char (car s))\n         (alpha (+ alpha (* char (- i 1)))))\n        ((<\
    \ i length) (set! alpha (make-array (length s) (lambda (x) (+ x 2)))))\n     \
    \   (set! alpha (+ alpha (* char (- i 1))))\n        (set! alpha (+ alpha (* char\
    \ (- i 1))))\n        (set! alpha (+ alpha (* char (- i 1))))\n        (set! alpha\
    \ (+ alpha (* char (- i 1))))\n        (set! alpha (+ alpha (* char (- i 1))))\n\
    \        (set! alpha (+ alpha (* char (- i 1))))\n        (set! alpha (+ alpha\
    \ (* char (- i 1))))\n        (set! alpha (+ alpha (* char (- i 1))))\n      \
    \  (set! alpha (+ alpha (* char (- i 1))))\n        (set! alpha (+ alpha (* char\
    \ (- i 1))))\n        (set! alpha (+ alpha (* char (- i 1))))\n        (set! alpha\
    \ (+ alpha (* char (- i 1))))\n        (set! alpha (+ alpha (* char (- i 1))))\n\
    \        (set! alpha (+ alpha (* char (- i 1))))\n        (set! alpha (+ alpha\
    \ (* char (- i 1))))\n        (set! alpha (+ alpha (* char (- i 1))))\n      \
    \  (set! alpha (+ alpha (* char (- i 1))))\n        (set! alpha (+ alpha (* char\
    \ (- i 1))))\n        (set! alpha (+ alpha (* char (- i 1))))\n        (set! alpha\
    \ (+ alpha (* char (- i 1))))\n        (set! alpha (+ alpha (* char (- i 1))))\n\
    \        (set! alpha (+ alpha (* char (- i 1))))\n        (set! alpha (+ alpha\
    \ (* char (- i 1))))\n        (set! alpha (+ alpha (* char (- i 1))))\n      \
    \  (set! alpha (+ alpha (* char (- i 1))))\n        (set! alpha (+ alpha (* char\
    \ (- i 1))))\n        (set! alpha (+ alpha (* char (- i 1))))\n        (set! alpha\
    \ (+ ", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (let loop\
    \ ((s s)\n               (alpha (make-array 26 :initial-element #\\a)))\n    \
    \  (cond ((null? s) (list \"\"))\n            ((char= (first s) #\\a) (cons (first\
    \ s) alpha))\n            (else (loop (rest s) (rotate-right alpha (first s))))))))\n",
  "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (cond [(empty? s) \"\
    \"]\n          [(char-alphabet (first s)) (char-alphabet (first s))]\n       \
    \   [else (let ((alpha (rotate-alphabet alpha (first s) (first s))))\n       \
    \            (cond [(empty? s) \"\"]\n                         [(char-alphabet\
    \ (first s)) (char-alphabet (first s))]\n                         [else (let ((alpha\
    \ (rotate-alphabet alpha (first s) (first s))))\n                            \
    \     (cond [(empty? s) \"\"]\n                                       [(char-alphabet\
    \ (first s)) (char-alphabet (first s))]\n                                    \
    \   [else (let ((alpha (rotate-alphabet alpha (first s) (first s))))\n       \
    \                                        (cond [(empty? s) \"\"]\n           \
    \                                          [(char-alphabet (first s)) (char-alphabet\
    \ (first s))]\n                                                     [else (let\
    \ ((alpha (rotate-alphabet alpha (first s) (first s))))\n                    \
    \                                         (cond [(empty? s) \"\"]\n          \
    \                                                         [(char-alphabet (first\
    \ s)) (char-alphabet (first s))]\n                                           \
    \                        [else (let ((alpha (rotate-alphabet alpha (first s) (first\
    \ s))))\n                                                                    \
    \        (cond [(empty? s) \"\"]\n                                           \
    \                                        [(char-alphabet (first s)) (char-alphabet\
    \ (first s))]\n                                                              \
    \                     [else (let ((alpha (rotate-alphabet alpha (first s) (first\
    \ s))))\n                                                                    \
    \                       (cond [(empty? s) \"\"]\n                            \
    \                                                                     [(char-alphabet\
    \ (first s)) (char-alphabet (first s))]\n                                    \
    \                                                             [else (let ((alpha\
    \ (rotate-alphabet alpha (first s) (first s))))\n                            \
    \                                                                            \
    \ (cond [(empty? s) \"\"]\n                                                  \
    \                                                             [(char-alphabet\
    \ (first s)) (char-alphabet (first s))]\n                                    \
    \                                                                           [else\
    \ (let ((alpha (rotate-alphabet alpha (first s) (first s))))\n               \
    \                                                                            \
    \                            (cond [(empty? s) \"\"]\n                       \
    \                                                                            \
    \                          [(char-alphabet (first s)) (char-alphabet (first s))]\n\
    \                                                                            \
    \                                                 [else (let ((alpha (rotate-alphabet\
    \ alpha (first s) (first s))))\n                                             \
    \                                                                            \
    \              (cond [(empty? s) \"\"]\n                                     \
    \                                                                            \
    \                             [(char-alphabet (first s)) (char", "  (let loop\
    \ ((s s)\n             (result '()))\n    (if (empty? s)\n        result\n   \
    \     (loop (rest s)\n              (cons (first s)\n                    (loop\
    \ (rest s)\n                          (cons (second s)\n                     \
    \           result)))))))\n", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (loop for i from 0 to (length s) do\n      (let ((char (char-code\
    \ (substring s i i))))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! ", "  (let ((alpha (make-array 26\
    \ :initial-element #\\a)))\n    (loop for i from 0 to (length s) by 2\n      \
    \    for j from 0 to (length s) by 2\n          collect (substring alpha (+ i\
    \ j) 1)\n          into alpha\n          finally (return (substring alpha (+ i\
    \ j) 1))))\n", "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop\
    \ for i from 0 to (length s) by 2\n          for c from 0 to 26\n          when\
    \ (char=? (char-code (substring s i i+1) c) alpha)\n          collect (substring\
    \ s i i+1) into s\n          finally (return s)))\n", "  (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n    (loop for i from 0 to (length s) do\n     \
    \ (set! alpha (rotate! alpha 2))\n      (set! alpha (rotate! alpha 1))\n     \
    \ (set! alpha (rotate! alpha 0))\n      (set! alpha (rotate! alpha -1))\n    \
    \  (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate! alpha -3))\n  \
    \    (set! alpha (rotate! alpha -4))\n      (set! alpha (rotate! alpha -5))\n\
    \      (set! alpha (rotate! alpha -6))\n      (set! alpha (rotate! alpha -7))\n\
    \      (set! alpha (rotate! alpha -8))\n      (set! alpha (rotate! alpha -9))\n\
    \      (set! alpha (rotate! alpha -10))\n      (set! alpha (rotate! alpha -11))\n\
    \      (set! alpha (rotate! alpha -12))\n      (set! alpha (rotate! alpha -13))\n\
    \      (set! alpha (rotate! alpha -14))\n      (set! alpha (rotate! alpha -15))\n\
    \      (set! alpha (rotate! alpha -16))\n      (set! alpha (rotate! alpha -17))\n\
    \      (set! alpha (rotate! alpha -18))\n      (set! alpha (rotate! alpha -19))\n\
    \      (set! alpha (rotate! alpha -20))\n      (set! alpha (rotate! alpha -21))\n\
    \      (set! alpha (rotate! alpha -22))\n      (set! alpha (rotate! alpha -23))\n\
    \      (set! alpha (rotate! alpha -24))\n      (set! alpha (rotate! alpha -25))\n\
    \      (set! alpha (rotate! alpha -26))\n      (set! alpha (rotate! alpha -27))\n\
    \      (set! alpha (rotate! alpha -28))\n      (set! alpha (rotate! alpha -29))\n\
    \      (set! alpha (rotate! alpha -30))\n      (set! alpha (rotate! alpha -31))\n\
    \      (set! alpha (rotate! alpha -32))\n      (set! alpha (rotate! alpha -33))\n\
    \      (set! alpha (rotate! alpha -34))\n      (set! alpha (rotate! alpha -35))\n\
    \      (set! alpha (rotate! alpha -36))\n      (set! alpha (rotate! alpha -37))\n\
    \      (set! alpha (rotate! alpha -38))\n      (set! alpha (rotate! alpha -39))\n\
    \      (set! alpha (rotate! alpha -40", "  (let ((alpha (make-array 26 \n    \
    \                      :initial-contents '(a b c d e f g h i j k l m n o p q r\
    \ s t u v w x y z))))\n    (loop for i from 0 to (length s) do\n          (set!\
    \ alpha (rotate! alpha i 2))\n          (set! alpha (rotate! alpha i 2))\n   \
    \       (set! alpha (rotate! alpha i 2))\n          (set! alpha (rotate! alpha\
    \ i 2))\n          (set! alpha (rotate! alpha i 2))\n          (set! alpha (rotate!\
    \ alpha i 2))\n          (set! alpha (rotate! alpha i 2))\n          (set! alpha\
    \ (rotate! alpha i 2))\n          (set! alpha (rotate! alpha i 2))\n         \
    \ (set! alpha (rotate! alpha i 2))\n          (set! alpha (rotate! alpha i 2))\n\
    \          (set! alpha (rotate! alpha i 2))\n          (set! alpha (rotate! alpha\
    \ i 2))\n          (set! alpha (rotate! alpha i 2))\n          (set! alpha (rotate!\
    \ alpha i 2))\n          (set! alpha (rotate! alpha i 2))\n          (set! alpha\
    \ (rotate! alpha i 2))\n          (set! alpha (rotate! alpha i 2))\n         \
    \ (set! alpha (rotate! alpha i 2))\n          (set! alpha (rotate! alpha i 2))\n\
    \          (set! alpha (rotate! alpha i 2))\n          (set! alpha (rotate! alpha\
    \ i 2))\n          (set! alpha (rotate! alpha i 2))\n          (set! alpha (rotate!\
    \ alpha i 2))\n          (set! alpha (rotate! alpha i 2))\n          (set! alpha\
    \ (rotate! alpha i 2))\n          (set! alpha (rotate! alpha i 2))\n         \
    \ (set! alpha (rotate! alpha i 2))\n          (set! alpha (rotate! alpha i 2))\n\
    \          (set! alpha (rotate! alpha i 2))\n          (set! alpha (rotate! alpha\
    \ i 2))\n          (set! alpha (rotate! alpha i 2))\n          (set! alpha (rotate!\
    \ alpha i 2))\n          (set! alpha (rotate! alpha i 2))\n          (set! alpha\
    \ (rotate! alpha i 2))\n          (set! alpha (rotate! alpha i 2))\n         \
    \ (set! alpha (rotate! alpha i 2))\n          (set! alpha (rotate! alpha i 2))\n\
    \          (", "  (let ((alpha (make-array 26 \n                          :initial-contents\
    \ '(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\\
    o #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z))\n        (shift (make-array\
    \ 26 \n                        :initial-contents '(#\\1 #\\2 #\\3 #\\4 #\\5 #\\\
    6 #\\7 #\\8 #\\9 #\\0 #\\+ #\\- #\\/ #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\\
    0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\\
    0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\\
    0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\\
    0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\\
    0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\\
    0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\\
    0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\0 #\\\
    0 #\\0 #\\0 #\\0 #\\", "  (let ((alpha (make-array 26 \n                     \
    \     :initial-contents '(a b c d e f g h i j k l m n o p q r s t u v w x y z))))\n\
    \    (let loop ((s s)\n               (alpha (subseq alpha (length alpha-1)\n\
    \                              (length alpha))))\n      (cond\n        ((null?\
    \ s) s)\n        ((null? (cdr s)) (car s))\n        (else (loop (cdr s) (rotate-right\
    \ alpha (subseq alpha (length alpha-1)\n                                     \
    \             (length alpha))))))))\n", "  (let ((alpha (make-array 26)))\n  \
    \  (loop for i from 0 to (length s) do\n      (set! alpha (subarray alpha (- i\
    \ 26) (- i 26)))\n      (set! alpha (rotate! alpha 2))\n      (set! alpha (subarray\
    \ alpha (- i 26) (- i 26)))\n      (set! alpha (rotate! alpha 2))\n      (set!\
    \ alpha (subarray alpha (- i 26) (- i 26)))\n      (set! alpha (rotate! alpha\
    \ 2))\n      (set! alpha (subarray alpha (- i 26) (- i 26)))\n      (set! alpha\
    \ (rotate! alpha 2))\n      (set! alpha (subarray alpha (- i 26) (- i 26)))\n\
    \      (set! alpha (rotate! alpha 2))\n      (set! alpha (subarray alpha (- i\
    \ 26) (- i 26)))\n      (set! alpha (rotate! alpha 2))\n      (set! alpha (subarray\
    \ alpha (- i 26) (- i 26)))\n      (set! alpha (rotate! alpha 2))\n      (set!\
    \ alpha (subarray alpha (- i 26) (- i 26)))\n      (set! alpha (rotate! alpha\
    \ 2))\n      (set! alpha (subarray alpha (- i 26) (- i 26)))\n      (set! alpha\
    \ (rotate! alpha 2))\n      (set! alpha (subarray alpha (- i 26) (- i 26)))\n\
    \      (set! alpha (rotate! alpha 2))\n      (set! alpha (subarray alpha (- i\
    \ 26) (- i 26)))\n      (set! alpha (rotate! alpha 2))\n      (set! alpha (subarray\
    \ alpha (- i 26) (- i 26)))\n      (set! alpha (rotate! alpha 2))\n      (set!\
    \ alpha (subarray alpha (- i 26) (- i 26)))\n      (set! alpha (rotate! alpha\
    \ 2))\n      (set! alpha (subarray alpha (- i 26) (- i 26)))\n      (set! alpha\
    \ (rotate! alpha 2))\n      (set! alpha (subarray alpha (- i 26) (- i 26)))\n\
    \      (set! alpha (rotate! alpha 2))\n      (set! alpha (subarray alpha (- i\
    \ 26) (- i 26)))\n      (set! alpha (rotate! alpha 2))\n      (set! alpha (subarray\
    \ alpha (- i 26) (- i 26)))\n      (set! alpha (rotate! alpha 2))\n      (set!\
    \ alpha (subarray alpha (- i 26) (- i ", "  (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n    (loop for i from 0 to (length s) do\n      (let ((char (char-code\
    \ (substring s i i))))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! ", "  (let ((alpha (make-array 26\
    \ :initial-element #\\a)))\n    (loop for i from 0 to (length s) do\n      (let\
    \ ((char (char-code (char s i))))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n   \
    \     (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n\
    \        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha\
    \ char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha (rotate!\
    \ alpha char))\n        (set! alpha (rotate! alpha char))\n        (set! alpha\
    \ (rotate! alpha char))\n        (set! alpha (rotate! alpha char))\n        (set!\
    \ alpha (rotate! alpha char))\n        (set! alpha (rotate! alpha char", "  (let\
    \ ((alpha (make-alphabet (length s))))\n    (let loop ((i 0) (alpha (make-alphabet\
    \ (length s))))\n      (if (< i length)\n          (let ((char (char-ref s i)))\n\
    \            (set! alpha (rotate-alpha (char-ref alpha char) alpha))\n       \
    \     (loop (+ i 1) alpha))\n          (let ((char (char-ref s i)))\n        \
    \    (set! alpha (rotate-alpha (char-ref alpha char) alpha))\n            (loop\
    \ (+ i 1) alpha)))))\n  ", "  (let ((alpha (make-array 26 :initial-element #\\\
    a)))\n    (let loop ((i 0) (alpha (make-array 26 :initial-element #\\a)))\n  \
    \    (cond\n        ((null? s) (list \"\"))\n        ((null? (cdr s)) (list (car\
    \ s)))\n        (else (let ((char (car s))\n                    (alpha (rotate-array\
    \ alpha (- i 26))))\n              (cond\n                ((char-alphabetic? char)\
    \ (loop (+ i 1) alpha))\n                (else (loop (+ i 1) alpha))))))))\n",
  "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for i from 0\
    \ to (length s) do\n      (let ((alpha (make-array 26 :initial-element #\\a)))\n\
    \        (loop for j from 0 to (length s) do\n          (set! alpha (rotate! alpha\
    \ 2))\n          (set! alpha (rotate! alpha 1))\n          (set! alpha (rotate!\
    \ alpha 0))\n          (set! alpha (rotate! alpha -1))\n          (set! alpha\
    \ (rotate! alpha -2))\n          (set! alpha (rotate! alpha -3))\n          (set!\
    \ alpha (rotate! alpha -4))\n          (set! alpha (rotate! alpha -5))\n     \
    \     (set! alpha (rotate! alpha -6))\n          (set! alpha (rotate! alpha -7))\n\
    \          (set! alpha (rotate! alpha -8))\n          (set! alpha (rotate! alpha\
    \ -9))\n          (set! alpha (rotate! alpha -10))\n          (set! alpha (rotate!\
    \ alpha -11))\n          (set! alpha (rotate! alpha -12))\n          (set! alpha\
    \ (rotate! alpha -13))\n          (set! alpha (rotate! alpha -14))\n         \
    \ (set! alpha (rotate! alpha -15))\n          (set! alpha (rotate! alpha -16))\n\
    \          (set! alpha (rotate! alpha -17))\n          (set! alpha (rotate! alpha\
    \ -18))\n          (set! alpha (rotate! alpha -19))\n          (set! alpha (rotate!\
    \ alpha -20))\n          (set! alpha (rotate! alpha -21))\n          (set! alpha\
    \ (rotate! alpha -22))\n          (set! alpha (rotate! alpha -23))\n         \
    \ (set! alpha (rotate! alpha -24))\n          (set! alpha (rotate! alpha -25))\n\
    \          (set! alpha (rotate! alpha -26))\n          (set! alpha (rotate! alpha\
    \ -27))\n          (set! alpha (rotate! alpha -28))\n          (set! alpha (rotate!\
    \ alpha -29))\n          (set! alpha (rotate! alpha -30))\n          (set! alpha\
    \ (rotate! alpha -31))\n          (set! alpha (rotate! alpha -32))\n         \
    \ (set! alpha (rotate! alpha -33))\n          (set! alpha (rotate! alpha -34))\n\
    \          (set! alpha (", "  (let ((alpha (make-array 26 :initial-element #\\\
    a)))\n    (cond [(empty? s) \"\"]\n          [(char-alphabet (first s)) (cons\
    \ (char-alphabet (first s)) (encrypt (rest s)))]\n          [else (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n                   (cond [(empty? (rest\
    \ s)) \"\"]\n                         [(char-alphabet (first s)) (cons (char-alphabet\
    \ (first s)) (encrypt (rest s)))]\n                         [else (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n                                 (cond\
    \ [(empty? (rest s)) \"\"]\n                                        [(char-alphabet\
    \ (first s)) (cons (char-alphabet (first s)) (encrypt (rest s)))]\n          \
    \                              [else (let ((alpha (make-array 26 :initial-element\
    \ #\\a)))\n                                                  (cond [(empty? (rest\
    \ s)) \"\"]\n                                                        [(char-alphabet\
    \ (first s)) (cons (char-alphabet (first s)) (encrypt (rest s)))]\n          \
    \                                              [else (let ((alpha (make-array\
    \ 26 :initial-element #\\a)))\n                                              \
    \                   (cond [(empty? (rest s)) \"\"]\n                         \
    \                                               [(char-alphabet (first s)) (cons\
    \ (char-alphabet (first s)) (encrypt (rest s)))]\n                           \
    \                                             [else (let ((alpha (make-array 26\
    \ :initial-element #\\a)))\n                                                 \
    \                                  (cond [(empty? (rest s)) \"\"]\n          \
    \                                                              [(char-alphabet\
    \ (first s)) (cons (char-alphabet (first s)) (encrypt (rest s)))]\n          \
    \                                                              [else (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n                                  \
    \                                                 (cond [(empty? (rest s)) \"\"\
    ]\n                                                                        [(char-alphabet\
    \ (first s)) (cons (char-alphabet (first s)) (encrypt (rest s)))]\n          \
    \                                                              [else (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n                                  \
    \                                                 (cond [(empty? (rest s)) \"\"\
    ]\n                                                                        [(char-alphabet\
    \ (first s)) (cons (char-alphabet (first s)) (encrypt (rest s)))]\n          \
    \                                                              [else (let ((alpha\
    \ (make-array 26 :initial-element #\\a)))\n                                  \
    \                                                 (cond [(empty? (rest s)) \"\"\
    ]\n                                                                        ",
  "  (let ((alpha (make-array 26 :initial-element #\\a)))\n    (loop for i from 0\
    \ to (length s) do\n      (set! alpha (rotate! alpha 2))\n      (set! alpha (rotate!\
    \ alpha 1))\n      (set! alpha (rotate! alpha 0))\n      (set! alpha (rotate!\
    \ alpha -1))\n      (set! alpha (rotate! alpha -2))\n      (set! alpha (rotate!\
    \ alpha -3))\n      (set! alpha (rotate! alpha -4))\n      (set! alpha (rotate!\
    \ alpha -5))\n      (set! alpha (rotate! alpha -6))\n      (set! alpha (rotate!\
    \ alpha -7))\n      (set! alpha (rotate! alpha -8))\n      (set! alpha (rotate!\
    \ alpha -9))\n      (set! alpha (rotate! alpha -10))\n      (set! alpha (rotate!\
    \ alpha -11))\n      (set! alpha (rotate! alpha -12))\n      (set! alpha (rotate!\
    \ alpha -13))\n      (set! alpha (rotate! alpha -14))\n      (set! alpha (rotate!\
    \ alpha -15))\n      (set! alpha (rotate! alpha -16))\n      (set! alpha (rotate!\
    \ alpha -17))\n      (set! alpha (rotate! alpha -18))\n      (set! alpha (rotate!\
    \ alpha -19))\n      (set! alpha (rotate! alpha -20))\n      (set! alpha (rotate!\
    \ alpha -21))\n      (set! alpha (rotate! alpha -22))\n      (set! alpha (rotate!\
    \ alpha -23))\n      (set! alpha (rotate! alpha -24))\n      (set! alpha (rotate!\
    \ alpha -25))\n      (set! alpha (rotate! alpha -26))\n      (set! alpha (rotate!\
    \ alpha -27))\n      (set! alpha (rotate! alpha -28))\n      (set! alpha (rotate!\
    \ alpha -29))\n      (set! alpha (rotate! alpha -30))\n      (set! alpha (rotate!\
    \ alpha -31))\n      (set! alpha (rotate! alpha -32))\n      (set! alpha (rotate!\
    \ alpha -33))\n      (set! alpha (rotate! alpha -34))\n      (set! alpha (rotate!\
    \ alpha -35))\n      (set! alpha (rotate! alpha -36))\n      (set! alpha (rotate!\
    \ alpha -37))\n      (set! alpha (rotate! alpha -38))\n      (set! alpha (rotate!\
    \ alpha -39))\n      (set! alpha (rotate! alpha -40"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
