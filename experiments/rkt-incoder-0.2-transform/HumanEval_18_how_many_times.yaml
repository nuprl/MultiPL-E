name: HumanEval_18_how_many_times
language: rkt
prompt: "#lang racket\n\n;; Find how many times a given substring can be found in\
  \ the original string. Count overlaping cases.\n;; >>> (how_many_times \"\" \"a\"\
  )\n;; 0\n;; >>> (how_many_times \"aaa\" \"a\")\n;; 3\n;; >>> (how_many_times \"\
  aaaa\" \"aa\")\n;; 3\n(define (how_many_times string substring)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n\
  \    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\"\
  \ \"x\") 4)\n    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal?\
  \ (candidate \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? string) 0]\n    [(equal? (substring string) (string-ref\
    \ string 0)) 1]\n    [else (+ 1 (how_many_times (string->list string) (substring\
    \ string)))]))\n", "  (define (how_many_times-helper string substring i count)\n\
    \    (cond [(empty? string) count]\n          [(equal? (substring string) (string-ref\
    \ string i)) (how_many_times-helper (string->list string) (substring string) (+\
    \ i 1) (+ count 1))]\n          [(equal? (substring string) (string-ref string\
    \ i)) (how_many_times-helper (string->list string) (substring string) (+ i 1)\
    \ count)]\n          [else (how_many_times-helper (string->list string) (substring\
    \ string) (+ i 1) count)]))\n  (how_many_times-helper string substring 0 (length\
    \ string)))\n", "  (let loop ((count 0) (index 0))\n    (cond\n      [(empty?\
    \ string) count]\n      [(eq? (car string) substring) (loop (+ count 1) (+ index\
    \ 1))]\n      [else (loop (+ count 1) (+ index 1))])))\n", "  (let ((count 0))\n\
    \    (for-each (lambda (c)\n                (when (string-match substring c)\n\
    \                  (set! count (+ count 1)))\n              string)\n        \
    \      (lambda (c)\n                (when (string-match substring c)\n       \
    \           (set! count (+ count 1))))\n              (lambda (c)\n          \
    \      (when (string-match substring c)\n                  (set! count (+ count\
    \ 1))))\n              (lambda (c)\n                (when (string-match substring\
    \ c)\n                  (set! count (+ count 1))))\n              (lambda (c)\n\
    \                (when (string-match substring c)\n                  (set! count\
    \ (+ count 1))))\n              (lambda (c)\n                (when (string-match\
    \ substring c)\n                  (set! count (+ count 1))))\n              (lambda\
    \ (c)\n                (when (string-match substring c)\n                  (set!\
    \ count (+ count 1))))\n              (lambda (c)\n                (when (string-match\
    \ substring c)\n                  (set! count (+ count 1))))\n              (lambda\
    \ (c)\n                (when (string-match substring c)\n                  (set!\
    \ count (+ count 1))))\n              (lambda (c)\n                (when (string-match\
    \ substring c)\n                  (set! count (+ count 1))))\n              (lambda\
    \ (c)\n                (when (string-match substring c)\n                  (set!\
    \ count (+ count 1))))\n              (lambda (c)\n                (when (string-match\
    \ substring c)\n                  (set! count (+ count 1))))\n              (lambda\
    \ (c)\n                (when (string-match substring c)\n                  (set!\
    \ count (+ count 1))))\n              (lambda (c)\n                (when (string-match\
    \ substring c)\n                  (set! count (+ count 1))))\n              (lambda\
    \ (c)\n                (when (string-match substring c)\n                  (set!\
    \ count (+ count 1))))\n              (lambda (c)\n                (when (string-match\
    \ substring c)\n                  (set! count (+ count 1))))\n              (lambda\
    \ (c)\n                (when (string-match substring c)\n                  (set!\
    \ count (+ count 1))))\n              (lambda (c)\n                (when (string-match\
    \ substring c)\n                  (set! count (+ count 1))))\n              (lambda\
    \ (c)\n                (when (string-match substring c)\n                  (set!\
    \ count (+ count 1))))\n              (lambda (c)\n                (when (string-match\
    \ substring c)\n                  (set! count (+ count 1))))\n              (",
  "  (let loop ((i 0)\n             (count 0))\n    (cond ((eq? i 0) count)\n    \
    \      ((eq? (string-length string) i)\n           (loop (+ i 1) count))\n   \
    \       ((eq? (string-length string) i)\n           (loop (+ i 1) count))\n  \
    \        ((eq? (string-length string) i)\n           (loop (+ i 1) count))\n \
    \         ((eq? (string-length string) i)\n           (loop (+ i 1) count))\n\
    \          ((eq? (string-length string) i)\n           (loop (+ i 1) count))\n\
    \          ((eq? (string-length string) i)\n           (loop (+ i 1) count))\n\
    \          ((eq? (string-length string) i)\n           (loop (+ i 1) count))\n\
    \          ((eq? (string-length string) i)\n           (loop (+ i 1) count))\n\
    \          ((eq? (string-length string) i)\n           (loop (+ i 1) count))\n\
    \          ((eq? (string-length string) i)\n           (loop (+ i 1) count))\n\
    \          ((eq? (string-length string) i)\n           (loop (+ i 1) count))\n\
    \          ((eq? (string-length string) i)\n           (loop (+ i 1) count))\n\
    \          ((eq? (string-length string) i)\n           (loop (+ i 1) count))\n\
    \          ((eq? (string-length string) i)\n           (loop (+ i 1) count))\n\
    \          ((eq? (string-length string) i)\n           (loop (+ i 1) count))\n\
    \          ((eq? (string-length string) i)\n           (loop (+ i 1) count))\n\
    \          ((eq? (string-length string) i)\n           (loop (+ i 1) count))\n\
    \          ((eq? (string-length string) i)\n           (loop (+ i 1) count))\n\
    \          ((eq? (string-length string) i)\n           (loop (+ i 1) count))\n\
    \          ((eq? (string-length string) i)\n           (loop (+ i 1) count))\n\
    \          ((eq? (string-length string) i)\n           (loop (+ i 1) count))\n\
    \          ((eq? (string-length string) i)\n           (loop (+ i 1) count))\n\
    \          ((eq? (string-length string) i)\n           (loop (+ i 1) count))\n\
    \          ((eq? (string-length string) i)\n           (loop (+ i 1) count))\n\
    \          ((eq? (string-length string) i)\n           (loop (+ i 1) count))\n\
    \          ((eq? (string-length string) i)\n           (loop (+ i 1) count))\n\
    \          ((eq? (string-length string) i)\n           (loop (+ i 1) count))\n\
    \          ((eq? (", "  (let loop ((i 0)\n             (count 0))\n    (if (string-empty?\
    \ string)\n        count\n        (loop (+ i 1) (if (equal? (substring string)\
    \ (string-ref string i)) (+ count 1) count))))))\n", "  (let loop ((i 0)\n   \
    \          (count 0))\n    (cond\n      [(empty? string) count]\n      [(equal?\
    \ (char-ref string i) substring) (loop (+ i 1) (+ count 1))]\n      [else (loop\
    \ (+ i 1) (+ count 1))]))\n  )\n", "  (cond [(empty? string) 0]\n        [(equal?\
    \ (first string) substring) (+ 1 (how_many_times (rest string) substring))]\n\
    \        [else (+ (how_many_times (rest string) substring) (how_many_times (first\
    \ string) substring))]))\n", "  (cond [(empty? string) 0]\n        [(equal? (substring\
    \ string) (string-ref string 0)) 1]\n        [else (+ 1 (how_many_times (string->list\
    \ string) (substring string)))]))\n", "  (cond [(empty? string) 0]\n        [(equal?\
    \ (substring string) (string-ref string 0)) 1]\n        [else (+ (how_many_times\
    \ (string->list string) (substring string)) 1)]))\n", "  (cond\n    [(empty? string)\
    \ 0]\n    [(equal? (substring string) (string-ref string 0)) 1]\n    [else (+\
    \ 1 (how_many_times (string->list string) (substring string)))]))\n", "  (define\
    \ (how_many_times-helper string substring count)\n    (cond [(empty? string) count]\n\
    \          [(equal? (first string) substring) (how_many_times-helper (rest string)\
    \ substring (+ count 1))]\n          [else (how_many_times-helper (rest string)\
    \ substring (+ count 1))]))\n  (how_many_times-helper string substring 0))\n",
  "  (cond [(empty? string) 0]\n        [(equal? (substring string) (string-ref string\
    \ 0)) 1]\n        [else (+ 1 (how_many_times (string->list string) (substring\
    \ string)))]))\n", "  (let ((count 0))\n    (for-each (lambda (c)\n          \
    \      (if (string-match substring c)\n                    (set! count (+ count\
    \ 1))\n                    (set! count 0))\n              string)\n          \
    \    (lambda (c)\n                (if (string-match substring c)\n           \
    \         (set! count (+ count 1))\n                    (set! count 0))\n    \
    \          string)))\n</code>\n<|/ a tags=racket,scheme |>\n<| c |>\nI like your\
    \ solution, it's very elegant. However I cannot get it to work. I've tried it\
    \ on http://racket-lang.org/ and on http://ideone.com/. Both give me an error\
    \ on the \"(define (how_many_times string substring)\" line. Do you know why this\
    \ is?\n<|/ c |>\n<| c |>\nI got it to work. Thanks for your help. I didn't realize\
    \ that Racket had a for-each function.\n<|/ c |>\n<| c |>\n: Racket has `for`\
    \ loops, not `for-each`.\n<|/ c |>\n<| a tags=racket,scheme |>\nHere's a solution\
    \ that doesn't use any libraries:\n<code>", "  (let ((count 0))\n    (for-each\
    \ (lambda (c)\n                (when (string=? c substring)\n                \
    \  (set! count (add1 count)))\n              (string-length string))\n       \
    \       string)))\n", "  (cond [(empty? string) 0]\n        [(equal? (substring\
    \ string) (string-ref string 0)) 1]\n        [else (+ 1 (how_many_times (string->list\
    \ string) (substring string)))]))\n", "  (let ((count 0))\n    (loop for i from\
    \ 0 to (string-length string)\n          for j from 0 to (string-length substring)\n\
    \          when (string=? (substring i j) string)\n          do (set! count (+\
    \ count 1)))))\n", "  (let loop ((i 0)\n             (count 0))\n    (cond\n \
    \     [(empty? string) count]\n      [(equal? (substring string) (string-ref string\
    \ i)) (loop (+ i 1) (+ count 1))]\n      [else (loop (+ i 1) (+ count 1))])))\n",
  "  (let ((count 0))\n    (loop for i from 0 to (length string) by 1\n          for\
    \ j from 0 to (length substring) by 1\n          when (string= (string-ref string\
    \ i) (string-ref substring j))\n          do (incf count)\n          finally (return\
    \ count))\n  )\n)\n", "  (define (how_many string substring count)\n    (cond\n\
    \      [(empty? string) count]\n      [(equal? (car string) substring) (how_many\
    \ (cdr string) substring (incf count))]\n      [else (how_many (cdr string) substring\
    \ count)]\n      ))\n  (how_many string substring 0))\n", "  (cond\n    [(empty?\
    \ string) 0]\n    [(equal? (substring string) \"\") 0]\n    [else (+ 1 (how_many_times\
    \ (substring string) (substring string)))]))\n", "  (define (helper string substring\
    \ count)\n    (cond [(empty? string) count]\n          [(equal? (first string)\
    \ substring) (helper (rest string) substring (+ count 1))]\n          [else (helper\
    \ (rest string) substring (+ count 1))]))\n  (helper string substring 0))\n",
  "  (cond [(empty? string) 0]\n        [(equal? (substring string) (string-ref string\
    \ 0)) 1]\n        [else (+ 1 (how_many_times (string->list string) (substring\
    \ string)))]))\n", "  (define (how_many substring string count)\n    (cond\n \
    \     [(empty? string) count]\n      [(equal? substring (car string)) (how_many\
    \ substring (cdr string) (add1 count))]\n      [else (how_many substring (cdr\
    \ string) (add1 count))]))\n  (how_many substring string 0))\n", "  (cond [(empty?\
    \ string) 0]\n        [(equal? (first string) substring) (+ 1 (how_many_times\
    \ (rest string) substring))]\n        [else (+ (how_many_times (rest string) substring)\
    \ (how_many_times (first string) substring))]))\n", "  (cond [(empty? string)\
    \ 0]\n        [(equal? (substring string) (string-ref string 0)) 1]\n        [else\
    \ (+ 1 (how_many_times (string->list string) (substring string)))]))\n", "  (let\
    \ ((count 0))\n    (loop for i from 0 to (string-length string)\n          for\
    \ j from 0 to (string-length substring)\n          when (string= (string-ref string\
    \ i) (string-ref substring j))\n          do (incf count)\n          finally (return\
    \ count))))\n", "  (define (how_many_times-helper string substring i count)\n\
    \    (cond\n      [(empty? string) count]\n      [(equal? (substring string) (string-ref\
    \ string i)) (how_many_times-helper (string->list string) (substring string) (+\
    \ i 1) (+ count 1))]\n      [else (how_many_times-helper (string->list string)\
    \ (substring string) (+ i 1) count)]))\n  (how_many_times-helper string substring\
    \ 0 0))\n", "  (define (count-overlap string substring)\n    (define (count-overlap-helper\
    \ string substring start end)\n      (cond [(empty? string) 0]\n            [(equal?\
    \ (substring string) (substring (car string)))\n             (+ start (count-overlap-helper\
    \ (cdr string) substring start end))]\n            [else (count-overlap-helper\
    \ (cdr string) substring start end)])\n    (count-overlap-helper string substring\
    \ 0 0))\n  (count-overlap string substring))\n", "  (cond [(empty? string) 0]\n\
    \        [(equal? (first string) substring) (+ 1 (how_many_times (rest string)\
    \ substring))]\n        [else (+ (how_many_times (rest string) substring) (how_many_times\
    \ (first string) substring))]))\n", "  (let loop ((i 0)\n             (count 0))\n\
    \    (cond ((null? string) count)\n          ((eq? substring (car string)) (loop\
    \ (+ i 1) (+ count 1)))\n          ((eq? substring (car (cdr string))) (loop (+\
    \ i 1) count))\n          (else (loop (+ i 1) count)))))\n", "  (cond\n    [(empty?\
    \ string) 0]\n    [(equal? (first string) substring) 1]\n    [else (+ 1 (how_many_times\
    \ (rest string) substring))]))\n", "  (cond\n    [(empty? string) 0]\n    [(equal?\
    \ (first string) substring) 1]\n    [else (+ (how_many_times (rest string) substring)\
    \ (how_many_times string (first string)))]))\n", "  (define (how_many_times-helper\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(equal?\
    \ (first string) substring) (how_many_times-helper (rest string) substring (+\
    \ count 1))]\n      [else (how_many_times-helper (rest string) substring (+ count\
    \ 1))]))\n  (how_many_times-helper string substring 0))\n", "  (let loop ((count\
    \ 0) (index 0) (string string) (substring substring))\n    (cond ((null? string)\
    \ count)\n          ((eq? (substring string) substring) (loop (+ count 1) (+ index\
    \ 1) (substring string) (substring substring)))\n          (else (loop (+ count\
    \ 1) (+ index 1) (substring string) (substring substring))))))\n", "  (let loop\
    \ ((count 0) (index 0))\n    (cond ((null? string) count)\n          ((eqv? (char-code\
    \ (string-ref string index)) (char-code (substring 0))) (incf index))\n      \
    \    ((eqv? (char-code (string-ref string index)) (char-code (substring 1))) (loop\
    \ (add1 count) (incf index)))\n          (else (loop (add1 count) (add1 index))))))\n",
  "  (cond\n    [(empty? string) 0]\n    [(equal? (first string) substring) 1]\n \
    \   [else (+ (how_many_times (rest string) substring) (how_many_times string substring))]))\n",
  "  (let loop ((i 0)\n             (count 0))\n    (if (string-equal? string \"\"\
    )\n        count\n        (if (string-equal? (substring string) substring)\n \
    \           (loop (+ i 1) (+ count 1))\n            (loop (+ i 1) count)))))\n",
  "  (cond\n    [(empty? string) 0]\n    [(equal? (first string) substring) (+ 1 (how_many_times\
    \ (rest string) substring))]\n    [else (how_many_times (rest string) (append\
    \ substring (string)))]))\n", "  (cond [(empty? string) 0]\n        [(equal? (substring\
    \ string) (substring (car string))) (+ 1 (how_many_times (cdr string) substring))]\n\
    \        [else (+ (how_many_times (cdr string) substring) (how_many_times string\
    \ substring))]))\n", "  (let ((count 0))\n    (for-each (lambda (c)\n        \
    \        (when (string=? c substring)\n                  (set! count (+ count\
    \ 1)))\n                )\n              string)\n    count))\n", "  (cond\n \
    \   [(empty? string) 0]\n    [(equal? (substring string) (string-ref string 0))\
    \ 1])\n)\n", "  (cond\n    [(empty? string) 0]\n    [(equal? (first string) substring)\
    \ 1]\n    [else (+ 1 (how_many_times (rest string) substring))]))\n", "  (cond\
    \ [(empty? string) 0]\n        [(equal? (substring string) substring) 1]\n   \
    \     [else (+ 1 (how_many_times (rest string) substring))]))\n", "  (let loop\
    \ ((i 0)\n             (count 0))\n    (if (string-empty? string)\n        count\n\
    \        (loop (+ i 1)\n              (if (equal? (substring string) (string-ref\
    \ string i))\n                  (+ count 1)\n                  count))))))\n",
  "  (cond\n    [(empty? string) 0]\n    [(equal? (substring string) \"\") 0]\n  \
    \  [else (+ 1 (how_many_times (substring string) (substring string)))]))\n", " \
    \ (let loop ((i 0)\n             (count 0))\n    (if (string-empty? string)\n\
    \        count\n        (loop (+ i 1)\n              (if (equal? (substring string)\
    \ (string-ref string i))\n                  (+ count 1)\n                  count))))))\n",
  "  (cond [(empty? string) 0]\n        [(equal? (first string) substring) (+ 1 (how_many_times\
    \ (rest string) substring))]\n        [else (+ 1 (how_many_times (rest string)\
    \ substring))]))\n", "  (let loop ((i 0)\n             (count 0))\n    (cond ((null?\
    \ string) count)\n          ((eqv? (char-code (substring i)) (char-code (substring\
    \ 0))) count)\n          ((eqv? (char-code (substring i)) (char-code (substring\
    \ 1))) (incf count))\n          ((eqv? (char-code (substring i)) (char-code (substring\
    \ 2))) (incf count))\n          ((eqv? (char-code (substring i)) (char-code (substring\
    \ 3))) (incf count))\n          ((eqv? (char-code (substring i)) (char-code (substring\
    \ 4))) (incf count))\n          ((eqv? (char-code (substring i)) (char-code (substring\
    \ 5))) (incf count))\n          ((eqv? (char-code (substring i)) (char-code (substring\
    \ 6))) (incf count))\n          ((eqv? (char-code (substring i)) (char-code (substring\
    \ 7))) (incf count))\n          ((eqv? (char-code (substring i)) (char-code (substring\
    \ 8))) (incf count))\n          ((eqv? (char-code (substring i)) (char-code (substring\
    \ 9))) (incf count))\n          ((eqv? (char-code (substring i)) (char-code (substring\
    \ 10))) (incf count))\n          ((eqv? (char-code (substring i)) (char-code (substring\
    \ 11))) (incf count))\n          ((eqv? (char-code (substring i)) (char-code (substring\
    \ 12))) (incf count))\n          ((eqv? (char-code (substring i)) (char-code (substring\
    \ 13))) (incf count))\n          ((eqv? (char-code (substring i)) (char-code (substring\
    \ 14))) (incf count))\n          ((eqv? (char-code (substring i)) (char-code (substring\
    \ 15))) (incf count))\n          ((eqv? (char-code (substring i)) (char-code (substring\
    \ 16))) (incf count))\n          ((eqv? (char-code (substring i)) (char-code (substring\
    \ 17))) (incf count))\n          ((eqv? (char-code (substring i)) (char-code (sub",
  "  (define (how_many-times string substring count)\n    (if (string-empty? string)\n\
    \        count\n        (how_many-times (substring string) (substring string)\
    \ (+ count 1))))\n  (how_many-times string substring 0))\n", "  (cond [(empty?\
    \ string) 0]\n        [(equal? (substring string) substring) 1]\n        [else\
    \ (+ (how_many_times (substring string) (substring string)) 1)]))\n", "  (define\
    \ (helper string substring count)\n    (cond\n      [(empty? string) count]\n\
    \      [(equal? (first string) substring) (helper (rest string) substring (inc\
    \ count))]\n      [else (helper (rest string) substring (+ count 1))]))\n  (helper\
    \ string substring 0))\n", "  (let ((count 0))\n    (for-each (lambda (c)\n  \
    \              (when (string=? c substring)\n                  (set! count (+\
    \ count 1)))\n              (string-chars string))\n              (string-chars\
    \ string))\n    count))\n", "  (cond\n    [(empty? string) 0]\n    [(equal? (substring\
    \ string) \"\") 0]\n    [else (+ 1 (how_many_times (substring string) (substring\
    \ string)))]))\n", "  (let loop ((count 0) (index 0) (string string) (substring\
    \ substring))\n    (cond ((eq? index 0)\n           (if (eq? (string-ref string\
    \ 0) substring)\n               (+ count 1)\n               count))\n        \
    \  ((eq? (string-ref string index) substring)\n           (loop (+ count 1) (+\
    \ index 1) string substring))\n          (else\n           (loop (+ count 1) index\
    \ string substring)))))\n", "  (cond [(empty? string) 0]\n        [(equal? (first\
    \ string) substring) (+ 1 (how_many_times (rest string) substring))]\n       \
    \ [else (+ (how_many_times (rest string) substring) (how_many_times (first string)\
    \ substring))]))\n", "  (define (how_many_times-helper string substring count)\n\
    \    (cond [(empty? string) count]\n          [(equal? (first string) substring)\
    \ (how_many_times-helper (rest string) substring (+ count 1))]\n          [else\
    \ (how_many_times-helper (rest string) substring (+ count 1))]))\n  (how_many_times-helper\
    \ string substring 0))\n", "  (let ((count 0))\n    (for-each (lambda (c)\n  \
    \              (when (string-match substring c)\n                  (set! count\
    \ (add1 count)))\n              (string-chars string))\n              (string-chars\
    \ string))\n    count))\n", "  (cond\n    [(empty? string) 0]\n    [(equal? (first\
    \ string) substring) (+ 1 (how_many_times (rest string) substring))]\n    [else\
    \ (how_many_times (rest string) (append substring (string)))]))\n", "  (define\
    \ (count-overlap start end)\n    (cond\n      [(< start end)\n       (+ (string-length\
    \ substring) (- start end))]\n      [else\n       (+ 1 (count-overlap (+ start\
    \ 1) end))]))\n  (count-overlap 0 (string-length string)))\n", "  (let loop ((i\
    \ 0)\n             (count 0))\n    (cond\n      [(empty? string) count]\n    \
    \  [(equal? (substring string) (string-ref string i)) (loop (+ i 1) (+ count 1))]\n\
    \      [else (loop (+ i 1) (+ count 1))])))\n", "  (let ((count 0))\n    (loop\
    \ for i from 0 to (string-length string)\n          for j from 0 to (string-length\
    \ substring)\n          when (string= (string-ref string i) (string-ref substring\
    \ j))\n          do (incf count)\n          finally (return count))\n  )\n)\n",
  "  (cond\n    [(empty? string) 0]\n    [(equal? (first string) substring) (+ 1 (how_many_times\
    \ (rest string) substring))]\n    [else (+ (how_many_times (rest string) substring)\
    \ (how_many_times (first string) substring))]))\n", "  (cond\n    [(empty? string)\
    \ 0]\n    [(equal? (first string) substring) (+ 1 (how_many_times (rest string)\
    \ substring))]\n    [else (+ 1 (how_many_times (rest string) substring))]))\n",
  "  (let ((count 0))\n    (for ((i 0 (+ i 1))) (\n      (if (string-match substring\
    \ string i)\n          (set! count (+ count 1))\n          (set! i (+ i 1)))))\n\
    \    count))\n", "  (let ((count 0))\n    (loop for i from 0 to (string-length\
    \ string)\n          for j from 0 to (string-length substring)\n          when\
    \ (string= (string-ref string i) (string-ref substring j))\n          do (set!\
    \ count (incf count))\n          finally (return count))\n  )\n)\n", "  (cond\
    \ [(empty? string) 0]\n        [(equal? (first string) substring) (+ 1 (how_many_times\
    \ (rest string) substring))]\n        [else (+ (how_many_times (rest string) substring)\
    \ (how_many_times (first string) substring))]))\n", "  (let loop ((i 0)\n    \
    \         (count 0))\n    (cond\n      [(empty? string) count]\n      [(equal?\
    \ (substring string) (string-ref string i)) (loop (+ i 1) (+ count 1))]\n    \
    \  [else (loop (+ i 1) (+ count 1))])))\n", "  (cond\n    [(empty? string) 0]\n\
    \    [(equal? (first string) substring) 1]\n    [else (+ 1 (how_many_times (rest\
    \ string) substring))]))\n", "  (cond [(empty? string) 0]\n        [(equal? (substring\
    \ string) (string-ref string 0)) 1]\n        [else (+ 1 (how_many_times (string->list\
    \ string) (substring string)))]))\n", "  (let loop ((i 0)\n             (count\
    \ 0))\n    (if (string-equal? string \"\")\n        count\n        (loop (+ i\
    \ 1) (if (string-equal? (substring i) string) count (+ count 1))))))\n", "  (let\
    \ loop ((i 0)\n             (count 0))\n    (cond\n      [(empty? string) count]\n\
    \      [(equal? (substring string) (string-ref string i)) (loop (+ i 1) (+ count\
    \ 1))]\n      [else (loop (+ i 1) (+ count 1))])))\n", "  (define (how_many_times-helper\
    \ string substring index count)\n    (cond [(empty? string) count]\n         \
    \ [(equal? (substring string) (string-ref string index)) (how_many_times-helper\
    \ (string->list string) (substring string) (+ index 1) (+ count 1))]\n       \
    \   [(equal? (substring string) (string-ref string index)) (how_many_times-helper\
    \ (string->list string) (substring string) (+ index 1) count)]\n          [else\
    \ (how_many_times-helper (string->list string) (substring string) (+ index 1)\
    \ count)]))\n  (how_many_times-helper string substring 0 0))\n", "  (let loop\
    \ ((count 0) (index 0))\n    (if (string-equal? string \"\")\n        count\n\
    \        (if (string-equal? (substring string) (substring (string-ref string index)))\n\
    \            (loop (+ count 1) (+ index 1))\n            (loop (+ count 1) index))))))\n",
  "  (define (how_many_times-helper string substring count)\n    (cond [(empty? string)\
    \ count]\n          [(equal? (first string) substring) (how_many_times-helper\
    \ (rest string) substring (+ count 1))]\n          [else (how_many_times-helper\
    \ (rest string) substring (+ count 1))]))\n  (how_many_times-helper string substring\
    \ 0))\n", "  (define (how_many_times-helper string substring index count)\n  \
    \  (cond [(empty? string) count]\n          [(equal? substring (car string)) (how_many_times-helper\
    \ (cdr string) substring index (+ count 1))]\n          [(equal? (car string)\
    \ substring) (how_many_times-helper (cdr string) substring index (+ count 1))]\n\
    \          [else (how_many_times-helper (cdr string) substring index (+ count\
    \ 1))]))\n  (how_many_times-helper string substring 0 0))\n", "  (let loop ((i\
    \ 0)\n             (count 0))\n    (cond\n      [(empty? string) count]\n    \
    \  [(equal? (substring string) (string-ref string i)) (loop (+ i 1) (+ count 1))]\n\
    \      [else (loop (+ i 1) (+ count 1))])))\n", "  (cond [(empty? string) 0]\n\
    \        [(equal? (substring string) (string-ref string 0)) 1]\n        [else\
    \ (+ (how_many_times (string->list string) (substring string)) 1)]))\n", "  (cond\
    \ [(empty? string) 0]\n        [(equal? (substring string) (string-ref string\
    \ 0)) 1]\n        [else (+ 1 (how_many_times (string->list string) (substring\
    \ string)))]))\n", "  (define (how_many_times-helper string substring count)\n\
    \    (cond\n      [(empty? string) count]\n      [(equal? (first string) substring)\
    \ (how_many_times-helper (rest string) substring (inc count))]\n      [else (how_many_times-helper\
    \ (rest string) substring (+ count 1))]))\n  (how_many_times-helper string substring\
    \ 0))\n", "  (let loop ((i 0)\n             (count 0))\n    (cond ((string=? substring\
    \ string) count)\n          ((string=? (substring string) string) count)\n   \
    \       ((string=? (substring string) (string-ref string i)) (loop (+ i 1) (+\
    \ count 1)))\n          (else (loop (+ i 1) count))))\n)\n", "  (define (how_many_times-helper\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(equal?\
    \ (first string) substring) (how_many_times-helper (rest string) substring (inc\
    \ count))]\n      [else (how_many_times-helper (rest string) (substring string)\
    \ (+ count 1))]))\n  (how_many_times-helper string substring 0))\n", "  (let loop\
    \ ((i 0)\n             (count 0))\n    (cond\n      [(empty? string) count]\n\
    \      [(equal? (substring string) (string-ref string i)) (loop (+ i 1) (+ count\
    \ 1))]\n      [else (loop (+ i 1) (+ count 1))])))\n", "  (cond\n    [(empty?\
    \ string) 0]\n    [(equal? (first string) substring) 1]\n    [else (+ 1 (how_many_times\
    \ (rest string) substring))]))\n", "  (define (how_many_times-helper string substring\
    \ count)\n    (cond\n      [(empty? string) count]\n      [(equal? (first string)\
    \ substring) (how_many_times-helper (rest string) substring (+ count 1))]\n  \
    \    [else (how_many_times-helper (rest string) substring (+ count 1))]))\n  (how_many_times-helper\
    \ string substring 0))\n", "  (cond [(empty? string) 0]\n        [(equal? (substring\
    \ string) substring) (+ 1 (how_many_times (rest string) substring))]\n       \
    \ [else (+ (how_many_times (rest string) substring) (how_many_times (rest string)\
    \ substring))]))\n", "  (cond [(empty? string) 0]\n        [(equal? (substring\
    \ string) (string-ref string 0)) 1]\n        [else (+ 1 (how_many_times (string->list\
    \ string) (substring string)))]))\n", "  (cond [(empty? string) 0]\n        [(equal?\
    \ (substring string) substring) (+ 1 (how_many_times (rest string) substring))]\n\
    \        [else (+ (how_many_times (rest string) substring) (how_many_times (rest\
    \ string) substring))]))\n", "  (cond\n    [(empty? string) 0]\n    [(equal? (first\
    \ string) substring) (+ 1 (how_many_times (rest string) substring))]\n    [else\
    \ (+ (how_many_times (rest string) substring) (how_many_times (first string) substring))]))\n",
  "  (cond [(empty? string) 0]\n        [(equal? (first string) substring) (+ 1 (how_many_times\
    \ (rest string) substring))]\n        [else (+ (how_many_times (rest string) substring)\
    \ (how_many_times (first string) substring))]))\n", "  (let loop ((count 0) (index\
    \ 0))\n    (if (= index string-length)\n        count\n        (loop (+ count\
    \ 1)\n              (+ index 1)\n              (if (equal? (substring string)\
    \ (string-ref string index))\n                  (+ count 1)\n                \
    \  index))))))\n", "  (cond [(empty? string) 0]\n        [(equal? (substring string)\
    \ substring) (+ 1 (how_many_times (rest string) substring))]\n        [else (+\
    \ (how_many_times (rest string) substring) (how_many_times string substring))]))\n",
  "  (cond [(empty? string) 0]\n        [(equal? (substring string) (string-ref string\
    \ 0)) 1]\n        [else (+ 1 (how_many_times (string->list string) (substring\
    \ string)))]))\n", "  (cond\n    [(empty? string) 0]\n    [(equal? (substring\
    \ string) \"\") 0]\n    [else (+ 1 (how_many_times (substring string) (substring\
    \ string)))]))\n", "  (let ((count 0))\n    (for-each (lambda (c)\n          \
    \      (when (string-match substring c)\n                  (set! count (+ count\
    \ 1)))\n                string)\n              (range? string))\n    count))\n",
  "  (cond\n    [(empty? string) 0]\n    [(equal? (first string) substring) (+ 1 (how_many_times\
    \ (rest string) substring))]\n    [else (+ (how_many_times (rest string) substring)\
    \ (how_many_times (first string) substring))]))\n", "  (let ((count 0))\n    (for-each\
    \ (lambda (c)\n                (when (eq? c substring)\n                  (set!\
    \ count (add1 count)))\n                (when (eq? (string-ref string count) c)\n\
    \                  (set! count (add1 count))))\n              (string-ref string\
    \ 0))))\n", "  (define (how_many-times string substring start end)\n    (cond\
    \ ((null? string) 0)\n          ((eq? start end) 1)\n          ((eq? (string-ref\
    \ string start) substring) (+ start (how_many-times string substring (1+ start)\
    \ (1+ end))))\n          (else (how_many-times string substring (+ start 1) end))))\n\
    \  (how_many-times string substring 0 (string-length string)))\n", "  (let ((count\
    \ 0))\n    (for-each (lambda (c)\n                (when (string=? c substring)\n\
    \                  (set! count (add1 count))))\n              string)))\n", " \
    \ (cond\n    [(empty? string) 0]\n    [(equal? (first string) substring) (+ 1\
    \ (how_many_times (rest string) substring))]\n    [else (+ (how_many_times (rest\
    \ string) substring) (how_many_times (first string) substring))]))\n", "  (define\
    \ (how_many_times-helper string substring count)\n    (cond ((null? string) count)\n\
    \          ((eq? (car string) substring) (how_many_times-helper (cdr string) substring\
    \ (1+ count)))\n          (else (how_many_times-helper (cdr string) substring\
    \ count))))\n  (how_many_times-helper string substring 0))\n", "  (let loop ((i\
    \ 0)\n             (count 0))\n    (if (string-empty? string)\n        count\n\
    \        (loop (+ i 1)\n              (if (equal? (substring string) (string-ref\
    \ string i))\n                  (+ count 1)\n                  count))))))\n",
  "  (cond [(empty? string) 0]\n        [(equal? (substring string) (string-ref string\
    \ 0)) 1]\n        [else (+ 1 (how_many_times (string->list string) (substring\
    \ string)))]))\n", "  (let ((count 0))\n    (for-each (lambda (c)\n          \
    \      (when (eq? c substring)\n                  (set! count (add1 count))))\n\
    \              string)))\n", "  (let ((count 0))\n    (loop for i from 0 to (string-length\
    \ string)\n          for j from 0 to (string-length substring)\n          when\
    \ (string=? (substring string j) (string-ref string i))\n          do (set! count\
    \ (add1 count))\n          finally (return count))\n  )\n)\n", "  (let ((count\
    \ 0))\n    (for-each (lambda (c)\n                (when (string=? c substring)\n\
    \                  (set! count (add1 count))))\n              string))\n  count)\n",
  "  (define (how_many_times-helper string substring count)\n    (cond [(empty? string)\
    \ count]\n          [(equal? (first string) substring) (how_many_times-helper\
    \ (rest string) substring (+ count 1))]\n          [else (how_many_times-helper\
    \ (rest string) substring (+ count 1))]))\n  (how_many_times-helper string substring\
    \ 0))\n", "  (define (how_many string substring)\n    (if (empty? string)\n  \
    \      0\n        (if (equal? (first string) substring)\n            (+ 1 (how_many\
    \ (rest string) substring))\n            (+ 1 (how_many (rest string) (first string))))))\n\
    \  (how_many string substring))\n", "  (define (how_many_times-helper string substring\
    \ count)\n    (cond [(empty? string) count]\n          [(equal? (first string)\
    \ substring) (how_many_times-helper (rest string) substring (+ count 1))]\n  \
    \        [else (how_many_times-helper (rest string) substring (+ count 1))]))\n\
    \  (how_many_times-helper string substring 0))\n", "  (cond [(empty? string) 0]\n\
    \        [(equal? (substring string) (string-ref string 0)) 1]\n        [else\
    \ (+ 1 (how_many_times (string->list string) (substring string)))]))\n", "  (define\
    \ (how_many_times-helper string substring count)\n    (cond\n      [(empty? string)\
    \ count]\n      [(equal? (first string) substring) (how_many_times-helper (rest\
    \ string) substring (inc count))]\n      [else (how_many_times-helper (rest string)\
    \ substring (+ count 1))]))\n  (how_many_times-helper string substring 0))\n",
  "  (cond\n    [(empty? string) 0]\n    [(equal? (first string) substring) (+ 1 (how_many_times\
    \ (rest string) substring))]\n    [else (+ (how_many_times (rest string) substring)\
    \ (how_many_times string (first string)))]))\n", "  (cond [(empty? string) 0]\n\
    \        [(equal? (substring string) (string-ref string 0)) 1]\n        [else\
    \ (+ 1 (how_many_times (string->list string) (substring string)))]))\n", "  (cond\
    \ [(empty? string) 0]\n        [(equal? (first string) substring) (+ 1 (how_many_times\
    \ (rest string) substring))]\n        [else (+ (how_many_times (rest string) substring)\
    \ (how_many_times (first string) substring))]))\n", "  (cond [(empty? string)\
    \ 0]\n        [(equal? (first string) substring) (+ 1 (how_many_times (rest string)\
    \ substring))]\n        [else (+ 1 (how_many_times (rest string) substring))]))\n",
  "  (let ((count 0))\n    (loop for i from 0 to (string-length string)\n        \
    \  for j from 0 to (string-length substring)\n          when (string= (string-ref\
    \ string i) (string-ref substring j))\n          do (incf count)\n          finally\
    \ (return count))))\n", "  (cond\n    [(empty? string) 0]\n    [(equal? (substring\
    \ string) (string-ref string 0)) 1]\n    [else (+ 1 (how_many_times (string->list\
    \ string) (substring string)))]))\n", "  (define (helper string substring count)\n\
    \    (if (string-empty? string)\n        count\n        (helper (substring (string-tail\
    \ string)) substring (+ count 1))))\n  (helper string substring 0))\n", "  (let\
    \ ((count 0))\n    (loop for i from 0 to (string-length string)\n          for\
    \ j from 0 to (string-length substring)\n          when (string= (string-ref string\
    \ i) (string-ref substring j))\n          do (incf count)\n          finally (return\
    \ count))))\n", "  (cond\n    [(empty? string) 0]\n    [(equal? (substring string)\
    \ \"\") 0]\n    [else (+ 1 (how_many_times (substring string) (substring string)))]))\n",
  "  (let ((count 0))\n    (for-each (lambda (c)\n                (when (string=?\
    \ c substring)\n                  (set! count (add1 count))))\n              string)))\n",
  "  (let loop ((count 0) (index 0))\n    (cond ((null? string) count)\n         \
    \ ((eq? (substring string) (string-ref string index))\n           (loop (add1\
    \ count) (add1 index)))\n          (else (loop (add1 count) (add1 index))))))\n",
  "  (cond [(empty? string) 0]\n        [(equal? (first string) substring) 1]\n  \
    \      [else (+ 1 (how_many_times (rest string) substring))]))\n", "  (define\
    \ (how_many_times-helper string substring count)\n    (cond\n      [(empty? string)\
    \ count]\n      [(equal? (first string) substring) (how_many_times-helper (rest\
    \ string) substring (inc count))]\n      [else (how_many_times-helper (rest string)\
    \ substring (+ count 1))]))\n  (how_many_times-helper string substring 0))\n",
  "  (cond\n    [(empty? string) 0]\n    [(equal? (first string) substring) (+ 1 (how_many_times\
    \ (rest string) substring))]\n    [else (how_many_times (rest string) (append\
    \ substring (string)))]))\n", "  (cond [(empty? string) 0]\n        [(equal? (substring\
    \ string) substring) 1]\n        [else (+ 1 (how_many_times (rest string) substring))]))\n",
  "  (let loop ((i 0)\n             (count 0))\n    (if (string-equal? string \"\"\
    )\n        count\n        (if (string-equal? (string-ref string i) substring)\n\
    \            (loop (+ i 1) (+ count 1))\n            (loop (+ i 1) count))))))\n",
  "  (define (helper string substring count)\n    (cond\n      [(empty? string) count]\n\
    \      [(equal? (first string) substring) (helper (rest string) substring (+ count\
    \ 1))]\n      [else (helper (rest string) substring (+ count 1))]))\n  (helper\
    \ string substring 0))\n", "  (cond\n    [(empty? string) 0]\n    [(equal? (first\
    \ string) substring) 1]\n    [else (+ 1 (how_many_times (rest string) substring))]))\n",
  "  (let loop ((i 0)\n             (count 0))\n    (cond\n      [(empty? string)\
    \ count]\n      [(equal? (substring string) (string-ref string i)) (loop (+ i\
    \ 1) (+ count 1))]\n      [else (loop (+ i 1) (+ count 1))])))\n", "  (let ((count\
    \ 0))\n    (loop for i from 0 to (length string) do\n          (when (eql? (substring\
    \ string) (substring (string-ref string i)))\n            (set! count (add1 count)))))\n\
    \  count)\n", "  (define (how_many string substring)\n    (cond\n      [(empty?\
    \ string) 0]\n      [(equal? (first string) substring) (+ 1 (how_many (rest string)\
    \ substring))]\n      [else (+ 1 (how_many (rest string) (cons (first string)\
    \ substring)))]))\n  (how_many string substring))\n", "  (define (helper string\
    \ substring count)\n    (if (string-empty? string)\n        count\n        (helper\
    \ (substring (string-tail string)) substring (+ count 1))))\n  (helper string\
    \ substring 0))\n", "  (let loop ((count 0) (index 0) (string string) (substring\
    \ substring))\n    (cond ((null? string) count)\n          ((eq? (car string)\
    \ substring) (loop (+ count 1) (+ index 1) (cdr string) (cdr substring)))\n  \
    \        (else (loop (+ count 1) (+ index 1) (cdr string) (cdr substring))))))\n",
  "  (define (how_many string substring count)\n    (cond\n      [(empty? string)\
    \ count]\n      [(equal? (first string) substring) (how_many (rest string) substring\
    \ (inc count))]\n      [else (how_many (rest string) substring (+ count 1))]))\n\
    \  (how_many string substring 0))\n", "  (let loop ((i 0)\n             (count\
    \ 0))\n    (cond\n      [(empty? string) count]\n      [(equal? (substring string)\
    \ (string-ref string i)) (loop (+ i 1) (+ count 1))]\n      [else (loop (+ i 1)\
    \ (+ count 1))])))\n", "  (let loop ((count 0) (index 0))\n    (if (= index string-length)\n\
    \        count\n        (loop (+ count 1) (+ index 1)))))\n", "  (let ((count\
    \ 0))\n    (for-each (lambda (c)\n                (when (eq? c substring)\n  \
    \                (set! count (add1 count))))\n              string)))\n", "  (let\
    \ loop ((i 0) (count 0))\n    (if (string-empty? string)\n        count\n    \
    \    (loop (+ i 1) (if (equal? string substring) count (+ count 1))))))\n", " \
    \ (cond\n    [(empty? string) 0]\n    [(equal? (substring string) \"\") 0]\n \
    \   [else (+ 1 (how_many_times (substring string) (substring string)))]))\n",
  "  (let ((count 0))\n    (loop for i from 0 to (string-length string)\n        \
    \  for j from 0 to (string-length substring)\n          when (string= (string-ref\
    \ string i) (string-ref substring j))\n          do (incf count)\n          finally\
    \ (return count))))\n", "  (cond\n    [(empty? string) 0]\n    [(equal? (first\
    \ string) substring) (+ 1 (how_many_times (rest string) substring))]\n    [else\
    \ (+ (how_many_times (rest string) substring) (how_many_times (first string) substring))]))\n",
  "  (let loop ((i 0)\n             (count 0))\n    (cond\n      [(empty? string)\
    \ count]\n      [(equal? (substring string) (string-ref string i)) (loop (+ i\
    \ 1) (+ count 1))]\n      [else (loop (+ i 1) (+ count 1))])))\n", "  (let ((count\
    \ 0))\n    (loop for i from 0 to (string-length string)\n          for j from\
    \ 0 to (string-length substring)\n          when (string= (string-ref string i)\
    \ (string-ref substring j))\n          do (incf count)\n          finally (return\
    \ count))))\n", "  (cond\n    [(empty? string) 0]\n    [(equal? (substring string)\
    \ (string-ref string 0)) 1]\n    [else (+ 1 (how_many_times (string->list string)\
    \ (substring string)))]))\n", "  (cond [(empty? string) 0]\n        [(equal? (first\
    \ string) substring) 1]\n        [else (+ (how_many_times (rest string) substring)\
    \ (how_many_times (first string) substring))]))\n", "  (define (how_many_times-helper\
    \ string substring count)\n    (cond [(empty? string) count]\n          [(equal?\
    \ (first string) substring) (how_many_times-helper (rest string) substring (+\
    \ count 1))]\n          [else (how_many_times-helper (rest string) (substring\
    \ string) (+ count 1))]))\n  (how_many_times-helper string substring 0))\n", " \
    \ (cond [(empty? string) 0]\n        [(equal? (first string) substring) (+ 1 (how_many_times\
    \ (rest string) substring))]\n        [else (+ 1 (how_many_times (rest string)\
    \ substring))]))\n", "  (let loop ((i 0)\n             (count 0))\n    (if (string=?\
    \ string substring)\n        count\n        (loop (+ i 1) (+ count 1)))))\n",
  "  (let ((count 0))\n    (loop for i from 0 to (string-length string)\n        \
    \  for j from 0 to (string-length substring)\n          when (string= (string-ref\
    \ string i) (string-ref substring j))\n          do (set! count (incf count))\n\
    \          finally (return count))\n  )\n)\n", "  (cond\n    [(empty? string)\
    \ 0]\n    [(equal? (first string) substring) (+ 1 (how_many_times (rest string)\
    \ substring))]\n    [else (+ 1 (how_many_times (rest string) substring))]))\n",
  "  (cond [(empty? string) 0]\n        [(equal? (substring string) (string-ref string\
    \ 0)) 1]\n        [else (+ 1 (how_many_times (string->list string) (substring\
    \ string)))]))\n", "  (cond\n    [(empty? string) 0]\n    [(equal? (first string)\
    \ substring) (+ 1 (how_many_times (rest string) substring))]\n    [else (+ (how_many_times\
    \ (rest string) substring) (how_many_times (first string) substring))]))\n", " \
    \ (define (how_many string substring)\n    (if (string-empty? string)\n      \
    \  0\n        (if (string-empty? substring)\n            1\n            (if (equal?\
    \ (substring 0) (string-ref string 0))\n                (+ 1 (how_many (string-ref\
    \ string 1) substring))\n                (+ 1 (how_many (string-ref string 1)\
    \ substring)))))\n  (how_many string substring))\n", "  (let loop ((i 0)\n   \
    \          (count 0))\n    (cond\n      [(empty? string) count]\n      [(equal?\
    \ (substring string) (string-ref string i)) (loop (+ i 1) (+ count 1))]\n    \
    \  [else (loop (+ i 1) (+ count 1))])))\n", "  (cond [(empty? string) 0]\n   \
    \     [(equal? (substring string) substring) (+ 1 (how_many_times (rest string)\
    \ substring))]\n        [else (+ (how_many_times (rest string) substring) (how_many_times\
    \ (rest string) (substring string)))]))\n", "  (cond\n    [(empty? string) 0]\n\
    \    [(equal? (first string) substring) 1]\n    [else (+ 1 (how_many_times (rest\
    \ string) substring))]))\n", "  (cond\n    [(empty? string) 0]\n    [(equal? (substring\
    \ string) (string-ref string 0)) 1]\n    [else (+ 1 (how_many_times (string->list\
    \ string) (substring string)))]))\n", "  (cond\n    [(empty? string) 0]\n    [(equal?\
    \ (substring string) (string-ref string 0)) 1]\n    [else (+ 1 (how_many_times\
    \ (string->list string) (substring string)))]))\n", "  (cond [(empty? string)\
    \ 0]\n        [(equal? (substring string) (string-ref string 0)) 1]\n        [else\
    \ (+ 1 (how_many_times (string->list string) (substring string)))]))\n", "  (cond\
    \ [(empty? string) 0]\n        [(equal? (substring string) (string-ref string\
    \ 0)) 1]\n        [else (+ 1 (how_many_times (string->list string) (substring\
    \ string)))]))\n", "  (let ((count 0))\n    (for-each (lambda (c)\n          \
    \      (when (string=? c substring)\n                  (set! count (add1 count))))\n\
    \              string)))\n", "  (cond\n    [(empty? string) 0]\n    [(equal? (first\
    \ string) substring) (+ 1 (how_many_times (rest string) substring))]\n    [else\
    \ (+ 1 (how_many_times (rest string) substring))]))\n", "  (cond [(empty? string)\
    \ 0]\n        [(equal? (first string) substring) (+ 1 (how_many_times (rest string)\
    \ substring))]\n        [else (+ 1 (how_many_times (rest string) (first string)))]))\n",
  "  (let ((count 0))\n    (loop for i from 0 to (string-length string)\n        \
    \  for j from 0 to (string-length substring)\n          when (string=? (substring\
    \ string j) (string-ref string i))\n          do (set! count (incf count))\n \
    \         finally (return count))\n  )\n)\n", "  (let loop ((i 0)\n          \
    \   (count 0))\n    (cond ((eq? i string) (+ count 1))\n          ((eq? (string-ref\
    \ string i) substring) (loop (+ i 1) (+ count 1)))\n          (else (loop (+ i\
    \ 1) count))))) ; <<< #lang racket\n", "  (let loop ((i 0)\n             (count\
    \ 0))\n    (cond\n      [(empty? string) count]\n      [(equal? (substring string)\
    \ (string-ref string i)) (loop (+ i 1) (+ count 1))]\n      [else (loop (+ i 1)\
    \ (+ count 1))])))\n", "  (cond [(empty? string) 0]\n        [(equal? (first string)\
    \ substring) 1]\n        [else (+ (how_many_times (rest string) substring) (how_many_times\
    \ (first string) substring))]))\n", "  (cond [(empty? string) 0]\n        [(equal?\
    \ (first string) substring) 1]\n        [else (+ 1 (how_many_times (rest string)\
    \ substring))]))\n", "  (cond [(empty? string) 0]\n        [(equal? (substring\
    \ string) (substring (car string))) 1]\n        [else (+ (how_many_times (cdr\
    \ string) substring) (how_many_times string substring))]))\n", "  (let ((count\
    \ 0))\n    (for-each (lambda (c)\n                (when (string=? c substring)\n\
    \                  (set! count (add1 count))))\n              string)))\n", " \
    \ (cond [(empty? string) 0]\n        [(equal? (substring string) (string-ref string\
    \ 0)) 1]\n        [else (+ 1 (how_many_times (string->list string) (substring\
    \ string)))]))\n", "  (cond\n    [(empty? string) 0]\n    [(equal? (substring\
    \ string) (string-ref string 0)) 1]\n    [else (+ 1 (how_many_times (string->list\
    \ string) (substring string)))]))\n", "  (cond [(empty? string) 0]\n        [(equal?\
    \ (substring string) (substring (car string))) 1]\n        [else (+ (how_many_times\
    \ (cdr string) substring) (how_many_times string substring))]))\n", "  (let loop\
    \ ((count 0) (index 0))\n    (if (= index string-length)\n        count\n    \
    \    (loop (+ count (substring-count string index substring)) (+ index 1)))))\n",
  "  (cond [(empty? string) 0]\n        [(equal? (substring string) (string-ref string\
    \ 0)) 1]\n        [else (+ 1 (how_many_times (string->list string) (substring\
    \ string)))]))\n", "  (cond [(empty? string) 0]\n        [(equal? (substring string)\
    \ (string-ref string 0)) 1]\n        [else (+ 1 (how_many_times (string->list\
    \ string) (substring string)))]))\n", "  (cond [(empty? string) 0]\n        [(equal?\
    \ (substring string) (string-ref string 0)) 1]\n        [else (+ 1 (how_many_times\
    \ (string->list string) (substring string)))]))\n", "  (let ((count 0))\n    (loop\
    \ for i from 0 to (string-length string)\n          for j from 0 to (string-length\
    \ substring)\n          when (string= (string-ref string i) (string-ref substring\
    \ j))\n          do (incf count)\n          finally (return count))\n  )\n)\n",
  "  (cond\n    [(empty? string) 0]\n    [(equal? (first string) substring) (+ 1 (how_many_times\
    \ (rest string) substring))]\n    [else (how_many_times (rest string) (append\
    \ substring (string)))]))\n", "  (define (how_many_times-helper string substring\
    \ count)\n    (cond [(empty? string) count]\n          [(equal? (first string)\
    \ substring) (how_many_times-helper (rest string) substring (+ count 1))]\n  \
    \        [else (how_many_times-helper (rest string) substring (+ count 1))]))\n\
    \  (how_many_times-helper string substring 0))\n", "  (let ((count 0))\n    (for-each\
    \ (lambda (c)\n                (when (string=? c substring)\n                \
    \  (set! count (add1 count)))\n                (c))\n              string))\n\
    \  count)\n", "  (define (how_many_times-helper string substring count)\n    (if\
    \ (string-empty? string)\n        count\n        (how_many_times-helper (substring\
    \ string) (substring string) (+ count 1))))\n  (how_many_times-helper string substring\
    \ 0))\n", "  (cond [(empty? string) 0]\n        [(equal? (first string) substring)\
    \ (+ 1 (how_many_times (rest string) substring))]\n        [else (+ 1 (how_many_times\
    \ (rest string) (first string)))]))\n", "  (cond [(empty? string) 0]\n       \
    \ [(equal? (first string) substring) (+ 1 (how_many_times (rest string) substring))]\n\
    \        [else (+ (how_many_times (rest string) substring) (how_many_times (first\
    \ string) substring))]))\n", "  (let ((count 0))\n    (loop for i from 0 to (string-length\
    \ string)\n          for j from 0 to (string-length substring)\n          when\
    \ (string= (string-ref string i) (string-ref substring j))\n          do (incf\
    \ count)\n          finally (return count))\n  )\n)\n", "  (cond\n    [(empty?\
    \ string) 0]\n    [(equal? (first string) substring) (+ 1 (how_many_times (rest\
    \ string) substring))]\n    [else (+ 1 (how_many_times (rest string) substring))]))\n",
  "  (define (how_many_times-helper string substring i count)\n    (cond ((null? string)\
    \ count)\n          ((eq? substring (car string)) (how_many_times-helper (cdr\
    \ string) substring (i) (add1 count)))\n          (else (how_many_times-helper\
    \ (cdr string) substring (add1 i) (add1 count))))\n  (how_many_times-helper string\
    \ substring 0 0))\n", "  (define (helper string substring count)\n    (cond\n\
    \      [(empty? string) count]\n      [(equal? (first string) substring) (helper\
    \ (rest string) substring (+ count 1))]\n      [else (helper (rest string) substring\
    \ (+ count 1))]))\n  (helper string substring 0))\n", "  (define (how_many string\
    \ substring count)\n    (if (string-empty? string)\n        count\n        (how_many\
    \ (string-tail string) substring (add1 count))\n      )\n  )\n  (how_many string\
    \ substring 0))\n", "  (cond [(empty? string) 0]\n        [(equal? (substring\
    \ string) (string-ref string 0)) 1]\n        [else (+ 1 (how_many_times (string->list\
    \ string) (substring string)))]))\n", "  (let loop ((i 0)\n             (count\
    \ 0))\n    (cond\n      [(empty? string) count]\n      [(equal? (substring string)\
    \ (string-ref string i)) (loop (+ i 1) (+ count 1))]\n      [else (loop (+ i 1)\
    \ (+ count 1))])))\n", "  (cond [(empty? string) 0]\n        [(equal? (substring\
    \ string) (string-ref string 0)) 1]\n        [else (+ 1 (how_many_times (string->list\
    \ string) (substring string)))]))\n", "  (cond [(empty? string) 0]\n        [(equal?\
    \ (substring string) (string-ref string 0)) 1]\n        [else (+ 1 (how_many_times\
    \ (string->list string) (substring string)))]))\n", "  (cond\n    [(empty? string)\
    \ 0]\n    [(equal? (substring string) (string-ref string 0)) 1]\n    [else (+\
    \ 1 (how_many_times (string->list string) (substring string)))]))\n", "  (define\
    \ (count-overlap string substring count)\n    (cond\n      [(empty? string) count]\n\
    \      [(equal? string substring) (add1 count)]\n      [(equal? (first string)\
    \ substring) (add1 count)]\n      [else (count-overlap (rest string) substring\
    \ (add1 count))]))\n  (count-overlap string substring 0))\n", "  (define (count-overlapping\
    \ substring string)\n    (cond\n      [(empty? string) 0]\n      [(equal? (first\
    \ string) substring) (+ 1 (count-overlapping substring (substring (second string))))]\n\
    \      [else (count-overlapping substring (substring (first string)))]))\n  (count-overlapping\
    \ substring string))\n", "  (let loop ((i 0)\n             (count 0))\n    (if\
    \ (string-empty? string)\n        count\n        (loop (+ i 1) (if (equal? (substring\
    \ string) (string-ref string i)) (+ count 1) count))))))\n", "  (let ((count 0))\n\
    \    (for ((i (in-range 0 (string-length string)))\n          (j (in-range 0 (string-length\
    \ substring)))\n          (match (substring string i j))\n          (if (equal?\
    \ match substring)\n              (set! count (add1 count))\n              (set!\
    \ count 0))))\n    count))\n", "  (let ((count 0))\n    (loop for i from 0 to\
    \ (string-length string)\n          for j from 0 to (string-length substring)\n\
    \          when (string=? (substring i j) string)\n          do (set! count (add1\
    \ count))\n          finally (return count))\n    (set! count 0))\n  )\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
