name: HumanEval_29_filter_by_prefix
language: rkt
prompt: "#lang racket\n\n;; Filter an input list of strings only for ones that start\
  \ with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;;\
  \ >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list\
  \ \"abc\" \"array\")\n(define (filter_by_prefix strings prefix)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
  \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
  \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
  \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? strings) '()]\n    [(equal? (first strings) prefix)\
    \ (cons (first strings) (filter_by_prefix (rest strings) prefix))]\n    [else\
    \ (filter_by_prefix (rest strings) prefix)]))\n", "  (cond [(empty? strings) strings]\n\
    \        [(equal? (first strings) prefix) (cons (first strings) strings)]\n  \
    \      [else (filter_by_prefix (rest strings) prefix)]))\n", "  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) prefix) (cons (first strings)\
    \ strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n", " \
    \ (cond\n    [(empty? strings) '()]\n    [(equal? (first strings) prefix) (cons\
    \ (first strings) (filter_by_prefix (rest strings) prefix))]\n    [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (if (null? strings)\n      '()\n      (if (string=?\
    \ prefix \"\")\n          strings\n          (cons (car strings) (filter_by_prefix\
    \ (cdr strings) prefix)))))\n", "  (cond [(empty? strings) strings]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond\n    [(empty? strings) strings]\n   \
    \ [(equal? (first strings) prefix) (filter_by_prefix (rest strings) prefix)]\n\
    \    [else (cons (first strings) (filter_by_prefix (rest strings) prefix))]))\n",
  "  (cond [(empty? strings) '()]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (cons (first strings)\n           \
    \         (filter_by_prefix (rest strings) prefix))]))\n", "  (cond [(empty? strings)\
    \ strings]\n        [(equal? (first strings) prefix) (cons (first strings) strings)]\n\
    \        [else (filter_by_prefix (rest strings) prefix)]))\n", "  (cond [(empty?\
    \ strings) strings]\n        [(equal? (first strings) prefix) (cons (first strings)\
    \ strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n", " \
    \ (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) '()]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) (filter_by_prefix (rest strings) prefix))]\n        [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) '()]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) (filter_by_prefix (rest strings)\
    \ prefix))]\n        [else (filter_by_prefix (rest strings) prefix)]))\n", " \
    \ (cond\n    [(empty? strings) strings]\n    [(equal? (first strings) prefix)\
    \ (filter_by_prefix (rest strings) prefix)]\n    [else (cons (first strings) (filter_by_prefix\
    \ (rest strings) prefix))]))\n", "  (cond [(empty? strings) '()]\n        [(equal?\
    \ (first strings) prefix) (cons (first strings) strings)]\n        [else (cons\
    \ (first strings)\n                    (filter_by_prefix (rest strings) prefix))]))\n",
  "  (cond [(empty? strings) empty]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons\
    \ (first strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n",
  "  (cond\n    [(empty? strings) '()]\n    [(equal? (first strings) prefix) (cons\
    \ (first strings) (filter_by_prefix (rest strings) prefix))]\n    [else (filter_by_prefix\
    \ (rest strings) prefix)]))\n", "  (cond [(empty? strings) strings]\n        [(equal?\
    \ (first strings) prefix) (filter_by_prefix (rest strings) prefix)]\n        [else\
    \ (cons (first strings) (filter_by_prefix (rest strings) prefix))]))\n", "  (cond\
    \ [(empty? strings) strings]\n        [(equal? (first strings) prefix) (cons (first\
    \ strings) strings)]\n        [else (filter_by_prefix (rest strings) prefix)]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
