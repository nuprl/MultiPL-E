language: rkt
name: HumanEval_30_get_positive
results:
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (>= x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1\
    \ -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9\
    \ 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list\
    \ -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4opc66uf.rkt:17:4

    actual:     ''(5 3 2 3 3 9 0 123 1)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    ((null? l) '())\n    ((number? (car l)) (cons (car l) (get_positive (cdr\
    \ l))))\n    (else (cons (car l) (get_positive (cdr l))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_flpt5hn.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_flpt5hn.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_flpt5hn.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) empty]\n    [(number? (first l)) (cons (first l) (get_positive\
    \ (rest l)))]\n    [else (cons (first l) (get_positive (rest l)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n\
    \    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n  \
    \  (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate\
    \ (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi56q6x6e.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi56q6x6e.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi56q6x6e.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) empty]\n    [(positive? (first l)) (cons (first l) (get_positive\
    \ (rest l)))]\n    [else (cons (first l) (get_positive (rest l)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n\
    \    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n  \
    \  (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate\
    \ (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuibdtnro.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuibdtnro.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuibdtnro.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) '()]\n    [(number? (car l)) (cons (car l) (get_positive (cdr\
    \ l)))]\n    [else (get_positive (cdr l))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate\
    \ (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5\
    \ 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppewwozg9.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppewwozg9.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppewwozg9.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    ((null? l) '())\n    ((number? (car l)) (cons (car l) (get_positive (cdr\
    \ l))))\n    (else (cons (car l) (get_positive (cdr l))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_flpt5hn.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_flpt5hn.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_flpt5hn.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    ((null? l) '())\n    ((not (number? l)) l)\n    ((< 0 (car l)) (cons (car\
    \ l) (get_positive (cdr l))))\n    (else (cons (car l) (get_positive (cdr l))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n\
    \    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n  \
    \  (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate\
    \ (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcv4v585t.rkt:20:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcv4v585t.rkt:21:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcv4v585t.rkt:22:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039547
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (>= x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1\
    \ -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9\
    \ 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list\
    \ -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4opc66uf.rkt:17:4

    actual:     ''(5 3 2 3 3 9 0 123 1)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) '()]\n    [(positive? (first l)) (cons (first l) (get_positive\
    \ (rest l)))]\n    [else (cons (first l) (get_positive (rest l)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n\
    \    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n  \
    \  (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate\
    \ (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3ecpf9vm.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3ecpf9vm.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3ecpf9vm.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) empty]\n    [(number? (first l)) (cons (first l) (get_positive\
    \ (rest l)))]\n    [else (cons (first l) (get_positive (rest l)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n\
    \    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n  \
    \  (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate\
    \ (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi56q6x6e.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi56q6x6e.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi56q6x6e.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) empty]\n    [(number? (first l)) (cons (first l) (get_positive\
    \ (rest l)))]\n    [else (cons (first l) (get_positive (rest l)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n\
    \    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n  \
    \  (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate\
    \ (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi56q6x6e.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi56q6x6e.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi56q6x6e.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) empty]\n    [(positive? (first l)) (cons (first l) (get_positive\
    \ (rest l)))]\n    [else (cons (first l) (get_positive (rest l)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n\
    \    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n  \
    \  (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate\
    \ (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuibdtnro.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuibdtnro.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuibdtnro.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) '()]\n    [(number? (first l)) (cons (first l) (get_positive\
    \ (rest l)))]\n    [else (cons (first l) (get_positive (rest l)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n\
    \    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n  \
    \  (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate\
    \ (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpu0v81vdu.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpu0v81vdu.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpu0v81vdu.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) empty]\n    [(number? (first l)) (cons (first l) (get_positive\
    \ (rest l)))]\n    [else (cons (first l) (get_positive (rest l)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n\
    \    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n  \
    \  (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate\
    \ (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi56q6x6e.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi56q6x6e.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi56q6x6e.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) empty]\n    [(number? (first l)) (cons (first l) (get_positive\
    \ (rest l)))]\n    [else (cons (first l) (get_positive (rest l)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n\
    \    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n  \
    \  (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate\
    \ (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi56q6x6e.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi56q6x6e.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi56q6x6e.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    ((null? l) '())\n    ((number? (car l)) (cons (car l) (get_positive (cdr\
    \ l))))\n    (else (cons (car l) (get_positive (cdr l))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_flpt5hn.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_flpt5hn.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_flpt5hn.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (>= x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1\
    \ -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9\
    \ 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list\
    \ -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4opc66uf.rkt:17:4

    actual:     ''(5 3 2 3 3 9 0 123 1)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) empty]\n    [(number? (first l)) (cons (first l) (get_positive\
    \ (rest l)))]\n    [else (cons (first l) (get_positive (rest l)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n\
    \    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n  \
    \  (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate\
    \ (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi56q6x6e.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi56q6x6e.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi56q6x6e.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) empty]\n    [(positive? (first l)) (cons (first l) (get_positive\
    \ (rest l)))]\n    [else (cons (first l) (get_positive (rest l)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n\
    \    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n  \
    \  (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate\
    \ (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuibdtnro.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuibdtnro.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuibdtnro.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) empty]\n    [(positive? (first l)) (cons (first l) (get_positive\
    \ (rest l)))]\n    [else (get_positive (rest l))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    ((null? l) '())\n    ((number? (car l)) (cons (car l) (get_positive (cdr\
    \ l))))\n    (else (cons (car l) (get_positive (cdr l))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_flpt5hn.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_flpt5hn.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_flpt5hn.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    ((null? l) '())\n    ((< (car l) 0) (cons (car l) (get_positive (cdr l))))\n\
    \    (else (cons (car l) (get_positive (cdr l))))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnulobujb.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnulobujb.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnulobujb.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039547
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) empty]\n    [(number? (first l)) (cons (first l) (get_positive\
    \ (rest l)))]\n    [else (cons (first l) (get_positive (rest l)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n\
    \    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n  \
    \  (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate\
    \ (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi56q6x6e.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi56q6x6e.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi56q6x6e.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) empty]\n    [(positive? (first l)) (cons (first l) (get_positive\
    \ (rest l)))]\n    [else (cons (first l) (get_positive (rest l)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n\
    \    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n  \
    \  (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate\
    \ (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuibdtnro.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuibdtnro.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuibdtnro.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) empty]\n    [(positive? (first l)) (cons (first l) (get_positive\
    \ (rest l)))]\n    [else (get_positive (rest l))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) empty]\n    [(number? (first l)) (cons (first l) (get_positive\
    \ (rest l)))]\n    [else (get_positive (rest l))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6rh3j74w.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6rh3j74w.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6rh3j74w.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) empty]\n    [(positive? (first l)) (cons (first l) (get_positive\
    \ (rest l)))]\n    [else (cons (first l) (get_positive (rest l)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n\
    \    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n  \
    \  (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate\
    \ (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuibdtnro.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuibdtnro.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuibdtnro.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) empty]\n    [(positive? (first l)) (cons (first l) (get_positive\
    \ (rest l)))]\n    [else (cons (first l) (get_positive (rest l)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n\
    \    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n  \
    \  (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate\
    \ (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuibdtnro.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuibdtnro.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuibdtnro.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) empty]\n    [(positive? (first l)) (cons (first l) (get_positive\
    \ (rest l)))]\n    [else (cons (first l) (get_positive (rest l)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n\
    \    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n  \
    \  (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate\
    \ (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuibdtnro.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuibdtnro.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuibdtnro.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) empty]\n    [(number? (first l)) (cons (first l) (get_positive\
    \ (rest l)))]\n    [else (get_positive (rest l))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6rh3j74w.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6rh3j74w.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6rh3j74w.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) empty]\n    [(number? (first l)) (cons (first l) (get_positive\
    \ (rest l)))]\n    [else (cons (first l) (get_positive (rest l)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n\
    \    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n  \
    \  (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate\
    \ (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi56q6x6e.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi56q6x6e.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi56q6x6e.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) empty]\n    [(positive? (first l)) (cons (first l) (get_positive\
    \ (rest l)))]\n    [else (get_positive (rest l))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) empty]\n    [(positive? (first l)) (cons (first l) (get_positive\
    \ (rest l)))]\n    [else (cons (first l) (get_positive (rest l)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n\
    \    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n  \
    \  (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate\
    \ (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuibdtnro.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuibdtnro.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuibdtnro.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    ((null? l) '())\n    ((number? (car l)) (cons (car l) (get_positive (cdr\
    \ l))))\n    (else (cons (car l) (get_positive (cdr l))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_flpt5hn.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_flpt5hn.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_flpt5hn.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) empty]\n    [(number? (first l)) (cons (first l) (get_positive\
    \ (rest l)))]\n    [else (cons (first l) (get_positive (rest l)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n\
    \    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n  \
    \  (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate\
    \ (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi56q6x6e.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi56q6x6e.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi56q6x6e.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) empty]\n    [(number? (first l)) (cons (first l) (get_positive\
    \ (rest l)))]\n    [else (cons (first l) (get_positive (rest l)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n\
    \    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n  \
    \  (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate\
    \ (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi56q6x6e.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi56q6x6e.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi56q6x6e.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) empty]\n    [(number? (first l)) (cons (first l) (get_positive\
    \ (rest l)))]\n    [else (cons (first l) (get_positive (rest l)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n\
    \    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n  \
    \  (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate\
    \ (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi56q6x6e.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi56q6x6e.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi56q6x6e.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (>= x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1\
    \ -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9\
    \ 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list\
    \ -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4opc66uf.rkt:17:4

    actual:     ''(5 3 2 3 3 9 0 123 1)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) empty]\n    [(positive? (first l)) (cons (first l) (get_positive\
    \ (rest l)))]\n    [else (get_positive (rest l))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) empty]\n    [(number? (first l)) (cons (first l) (get_positive\
    \ (rest l)))]\n    [else (cons (first l) (get_positive (rest l)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n\
    \    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n  \
    \  (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate\
    \ (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi56q6x6e.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi56q6x6e.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi56q6x6e.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    ((null? l) '())\n    ((number? (car l)) (cons (car l) (get_positive (cdr\
    \ l))))\n    (else (cons (car l) (get_positive (cdr l)))))\n  )\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmped9dpzuw.rkt:20:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmped9dpzuw.rkt:21:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmped9dpzuw.rkt:22:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    ((null? l) '())\n    ((number? (car l)) (cons (car l) (get_positive (cdr\
    \ l))))\n    (else (cons (car l) (get_positive (cdr l))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_flpt5hn.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_flpt5hn.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_flpt5hn.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) empty]\n    [(positive? (first l)) (cons (first l) (get_positive\
    \ (rest l)))]\n    [else (cons (first l) (get_positive (rest l)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n\
    \    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n  \
    \  (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate\
    \ (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuibdtnro.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuibdtnro.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuibdtnro.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) empty]\n    [(number? (first l)) (cons (first l) (get_positive\
    \ (rest l)))]\n    [else (get_positive (rest l))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6rh3j74w.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6rh3j74w.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6rh3j74w.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) empty]\n    [(positive? (first l)) (cons (first l) (get_positive\
    \ (rest l)))]\n    [else (cons (first l) (get_positive (rest l)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n\
    \    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n  \
    \  (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate\
    \ (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuibdtnro.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuibdtnro.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuibdtnro.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) empty]\n    [(number? (first l)) (cons (first l) (get_positive\
    \ (rest l)))]\n    [else (cons (first l) (get_positive (rest l)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n\
    \    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n  \
    \  (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate\
    \ (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi56q6x6e.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi56q6x6e.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi56q6x6e.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) empty]\n    [(positive? (first l)) (cons (first l) (get_positive\
    \ (rest l)))]\n    [else (cons (first l) (get_positive (rest l)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n\
    \    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n  \
    \  (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate\
    \ (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuibdtnro.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuibdtnro.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuibdtnro.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) empty]\n    [(number? (car l)) (cons (car l) (get_positive (cdr\
    \ l)))]\n    [else (get_positive (cdr l))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate\
    \ (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5\
    \ 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwr2ql2ic.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwr2ql2ic.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwr2ql2ic.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (>= x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1\
    \ -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9\
    \ 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list\
    \ -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4opc66uf.rkt:17:4

    actual:     ''(5 3 2 3 3 9 0 123 1)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) '()]\n    [(number? (first l)) (cons (first l) (get_positive\
    \ (rest l)))]\n    [else (cons (first l) (get_positive (rest l)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n\
    \    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n  \
    \  (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate\
    \ (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpu0v81vdu.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpu0v81vdu.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpu0v81vdu.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (>= x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1\
    \ -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9\
    \ 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list\
    \ -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4opc66uf.rkt:17:4

    actual:     ''(5 3 2 3 3 9 0 123 1)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) empty]\n    [(positive? (first l)) (cons (first l) (get_positive\
    \ (rest l)))]\n    [else (get_positive (rest l))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) '()]\n    [(positive? (first l)) (cons (first l) (get_positive\
    \ (rest l)))]\n    [else (cons (first l) (get_positive (rest l)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n\
    \    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n  \
    \  (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate\
    \ (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3ecpf9vm.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3ecpf9vm.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3ecpf9vm.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (>= x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1\
    \ -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9\
    \ 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list\
    \ -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4opc66uf.rkt:17:4

    actual:     ''(5 3 2 3 3 9 0 123 1)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) '()]\n    [(number? (first l)) (cons (first l) (get_positive\
    \ (rest l)))]\n    [else (cons (first l) (get_positive (rest l)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n\
    \    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n  \
    \  (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate\
    \ (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpu0v81vdu.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpu0v81vdu.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpu0v81vdu.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) empty]\n    [(number? (first l)) (cons (first l) (get_positive\
    \ (rest l)))]\n    [else (cons (first l) (get_positive (rest l)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n\
    \    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n  \
    \  (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate\
    \ (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi56q6x6e.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi56q6x6e.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi56q6x6e.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) empty]\n    [(number? (first l)) (cons (first l) (get_positive\
    \ (rest l)))]\n    [else (get_positive (rest l))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6rh3j74w.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6rh3j74w.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6rh3j74w.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) empty]\n    [(number? (first l)) (cons (first l) (get_positive\
    \ (rest l)))]\n    [else (get_positive (rest l))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6rh3j74w.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6rh3j74w.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6rh3j74w.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) empty]\n    [(positive? (first l)) (cons (first l) (get_positive\
    \ (rest l)))]\n    [else (get_positive (rest l))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    ((null? l) '())\n    ((number? (car l)) (cons (car l) (get_positive (cdr\
    \ l))))\n    (else (cons (car l) (get_positive (cdr l)))))\n  )\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmped9dpzuw.rkt:20:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmped9dpzuw.rkt:21:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmped9dpzuw.rkt:22:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) empty]\n    [(number? (first l)) (cons (first l) (get_positive\
    \ (rest l)))]\n    [else (cons (first l) (get_positive (rest l)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n\
    \    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n  \
    \  (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate\
    \ (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi56q6x6e.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi56q6x6e.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi56q6x6e.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) empty]\n    [(positive? (first l)) (cons (first l) (get_positive\
    \ (rest l)))]\n    [else (get_positive (rest l))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) empty]\n    [(number? (first l)) (cons (first l) (get_positive\
    \ (rest l)))]\n    [else (get_positive (rest l))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6rh3j74w.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6rh3j74w.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6rh3j74w.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) empty]\n    [(number? (first l)) (cons (first l) (get_positive\
    \ (rest l)))]\n    [else (get_positive (rest l))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6rh3j74w.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6rh3j74w.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6rh3j74w.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    ((null? l) '())\n    ((number? (car l)) (cons (car l) (get_positive (cdr\
    \ l))))\n    (else (cons (car l) (get_positive (cdr l)))))\n  )\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmped9dpzuw.rkt:20:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmped9dpzuw.rkt:21:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmped9dpzuw.rkt:22:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) empty]\n    [(number? (first l)) (cons (first l) (get_positive\
    \ (rest l)))]\n    [else (cons (first l) (get_positive (rest l)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n\
    \    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n  \
    \  (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate\
    \ (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi56q6x6e.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi56q6x6e.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi56q6x6e.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) empty]\n    [(positive? (first l)) (cons (first l) (get_positive\
    \ (rest l)))]\n    [else (cons (first l) (get_positive (rest l)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n\
    \    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n  \
    \  (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate\
    \ (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuibdtnro.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuibdtnro.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuibdtnro.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) empty]\n    [(number? (first l)) (cons (first l) (get_positive\
    \ (rest l)))]\n    [else (get_positive (rest l))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6rh3j74w.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6rh3j74w.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6rh3j74w.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) empty]\n    [(number? (first l)) (cons (first l) (get_positive\
    \ (rest l)))]\n    [else (get_positive (rest l))]\n  )\n)\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpg97vzdzf.rkt:21:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpg97vzdzf.rkt:22:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpg97vzdzf.rkt:23:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) empty]\n    [(positive? (first l)) (cons (first l) (get_positive\
    \ (rest l)))]\n    [else (cons (first l) (get_positive (rest l)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n\
    \    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n  \
    \  (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate\
    \ (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuibdtnro.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuibdtnro.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuibdtnro.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) empty]\n    [(number? (car l)) (cons (car l) (get_positive (cdr\
    \ l)))]\n    [else (get_positive (cdr l))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate\
    \ (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5\
    \ 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwr2ql2ic.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwr2ql2ic.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwr2ql2ic.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) empty]\n    [(positive? (first l)) (cons (first l) (get_positive\
    \ (rest l)))]\n    [else (get_positive (rest l))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    ((null? l) '())\n    ((number? (car l)) (cons (car l) (get_positive (cdr\
    \ l))))\n    (else (cons (car l) (get_positive (cdr l))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_flpt5hn.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_flpt5hn.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_flpt5hn.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) '()]\n    [(number? (car l)) (cons (car l) (get_positive (cdr\
    \ l)))]\n    [else (get_positive (cdr l))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate\
    \ (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5\
    \ 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppewwozg9.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppewwozg9.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppewwozg9.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (>= x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1\
    \ -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9\
    \ 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list\
    \ -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4opc66uf.rkt:17:4

    actual:     ''(5 3 2 3 3 9 0 123 1)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) empty]\n    [(number? (first l)) (cons (first l) (get_positive\
    \ (rest l)))]\n    [else (cons (first l) (get_positive (rest l)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n\
    \    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n  \
    \  (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate\
    \ (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi56q6x6e.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi56q6x6e.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi56q6x6e.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) empty]\n    [(number? (first l)) (cons (first l) (get_positive\
    \ (rest l)))]\n    [else (cons (first l) (get_positive (rest l)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n\
    \    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n  \
    \  (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate\
    \ (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi56q6x6e.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi56q6x6e.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi56q6x6e.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) empty]\n    [(number? (first l)) (cons (first l) (get_positive\
    \ (rest l)))]\n    [else (cons (first l) (get_positive (rest l)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n\
    \    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n  \
    \  (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate\
    \ (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi56q6x6e.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi56q6x6e.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi56q6x6e.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) empty]\n    [(positive? (first l)) (cons (first l) (get_positive\
    \ (rest l)))]\n    [else (cons (first l) (get_positive (rest l)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n\
    \    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n  \
    \  (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate\
    \ (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuibdtnro.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuibdtnro.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuibdtnro.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) empty]\n    [(positive? (first l)) (cons (first l) (get_positive\
    \ (rest l)))]\n    [else (cons (first l) (get_positive (rest l)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n\
    \    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n  \
    \  (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate\
    \ (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuibdtnro.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuibdtnro.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuibdtnro.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) empty]\n    [(positive? (first l)) (cons (first l) (get_positive\
    \ (rest l)))]\n    [else (get_positive (rest l))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) empty]\n    [(positive? (first l)) (cons (first l) (get_positive\
    \ (rest l)))]\n    [else (cons (first l) (get_positive (rest l)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n\
    \    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n  \
    \  (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate\
    \ (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuibdtnro.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuibdtnro.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuibdtnro.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) empty]\n    [(number? (first l)) (cons (first l) (get_positive\
    \ (rest l)))]\n    [else (get_positive (rest l))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6rh3j74w.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6rh3j74w.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6rh3j74w.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) '()]\n    [(number? (first l)) (cons (first l) (get_positive\
    \ (rest l)))]\n    [else (cons (first l) (get_positive (rest l)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n\
    \    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n  \
    \  (check-equal? (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate\
    \ (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpu0v81vdu.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpu0v81vdu.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpu0v81vdu.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ (lambda (x) (> x 0)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate get_positive))\n    (check-equal? (candidate (list -1 -2\
    \ 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123\
    \ 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2))\
    \ (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039429
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    ((null? l) '())\n    ((number? (car l)) (cons (car l) (get_positive (cdr\
    \ l))))\n    (else (cons (car l) (get_positive (cdr l))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_flpt5hn.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_flpt5hn.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_flpt5hn.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
- exit_code: 0
  program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (cond\n\
    \    [(empty? l) empty]\n    [(number? (first l)) (cons (first l) (get_positive\
    \ (rest l)))]\n    [else (get_positive (rest l))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate get_positive))\n    (check-equal?\
    \ (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate\
    \ (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list ))\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6rh3j74w.rkt:19:4

    actual:     ''(-1 -2 4 5 6)

    expected:   ''(4 5 6)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6rh3j74w.rkt:20:4

    actual:     ''(5 3 -5 2 3 3 9 0 123 1 -10)

    expected:   ''(5 3 2 3 3 9 123 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6rh3j74w.rkt:21:4

    actual:     ''(-1 -2)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039524
