name: HumanEval_83_starts_one_ends
language: rkt
prompt: "#lang racket\n\n;; Given a positive integer n, return the count of the numbers\
  \ of n-digit\n;; positive integers that start or end with 1.\n(define (starts_one_ends\
  \ n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate starts_one_ends))\n\
  \    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 2) 18)\n    (check-equal?\
  \ (candidate 3) 180)\n    (check-equal? (candidate 4) 1800)\n    (check-equal? (candidate\
  \ 5) 18000)\n))\n\n(test-humaneval)"
completions: ["  (if (= n 0)\n      0\n      (+ 1 (starts_one_ends (- n 1)))))\n",
  "  (let loop ((count 0) (i n))\n    (if (= i 0)\n        count\n        (loop (+\
    \ count 1) (quotient i 10)))))\n", "  (cond [(= n 1) 1]\n        [(= n 2) 2]\n\
    \        [else (+ (starts_one_ends (quotient n 10)) (starts_one_ends (remainder\
    \ n 10)))]))\n", "  (define (helper n count)\n    (if (= n 0)\n        count\n\
    \        (helper (quotient n 10) (incf count))\n    )\n  )\n  (helper n 0)\n)\n",
  "  (cond\n    [(= n 1) 0]\n    [(= n 2) 1]\n    [else (+ (starts_one_ends (quotient\
    \ n 10)) (starts_one_ends (remainder n 10)))]))\n", "  (define (helper n count)\n\
    \    (cond\n      [(= n 1) (+ count 1)]\n      [(= (modulo n 10) 1)\n       (helper\
    \ (quotient n 10) (+ count 1))]\n      [else (helper (quotient n 10) count)]))\n\
    \  (helper n 0))\n", "  (cond [(= n 0) 0]\n        [(= n 1) 1]\n        [(= (modulo\
    \ n 10) 0) (+ 1 (starts_one_ends (quotient n 10)))]\n        [else (starts_one_ends\
    \ (quotient n 10))]))\n", "  (let loop ((n n) (count 0))\n    (cond ((= n 0) count)\n\
    \          ((= n 1) (loop (quotient n 10) (incf count)))\n          (else (loop\
    \ (quotient n 10) (incf count)))))\n  count)\n", "  (let loop ((n n) (count 0))\n\
    \    (cond ((= n 0) count)\n          ((= n 1) (+ 1 (loop (quotient n 10) count)))\n\
    \          ((= (modulo n 10) 1) (+ 1 (loop (quotient n 10) count)))\n        \
    \  (else (loop (quotient n 10) (incf count))))))\n", "  (cond [(= n 0) 0]\n  \
    \      [(= n 1) 1]\n        [else (+ (starts_one_ends (quotient n 10))\n     \
    \           (starts_one_ends (remainder n 10)))]))\n", "  (let loop ((n n) (acc\
    \ 0))\n    (cond ((= n 0) acc)\n          ((= n 1) (loop (/ n 10) (+ acc 1)))\n\
    \          (else (loop (quotient n 10) (+ acc 1))))))\n", "  (cond\n    [(= n\
    \ 0) 0]\n    [(= n 1) 1]\n    [else (+ (starts_one_ends (quotient n 10))\n   \
    \          (starts_one_ends (remainder n 10)))]))\n", "  (let loop ((n n) (count\
    \ 0))\n    (cond ((= n 0) count)\n          ((= n 1) (loop (quotient n 10) (incf\
    \ count)))\n          (else (loop (quotient n 10) (incf count)))))\n  (loop (quotient\
    \ n 10) 0))\n", "  (cond [(= n 0) 0]\n        [(= n 1) 1]\n        [else (+ (starts_one_ends\
    \ (quotient n 10)) (starts_one_ends (remainder n 10)))]))\n", "  (let loop ((n\
    \ n) (count 0))\n    (cond ((= n 0) count)\n          ((= n 1) (loop (quotient\
    \ n 10) (inc count)))\n          (else (loop (quotient n 10) (inc count)))))\n\
    \  count)\n", "  (cond [(= n 0) 0]\n        [(= n 1) 1]\n        [(= (modulo n\
    \ 10) 0) (+ 1 (starts_one_ends (quotient n 10)))]\n        [else (starts_one_ends\
    \ (quotient n 10))]))\n", "  (let loop ((n n) (count 0))\n    (cond ((= n 0) count)\n\
    \          ((= n 1) (loop (quotient n 10) (inc count)))\n          ((= (modulo\
    \ n 10) 1) (loop (quotient n 10) (inc count)))\n          (else (loop (quotient\
    \ n 10) (inc count))))))\n", "  (cond [(= n 0) 0]\n        [(= n 1) 1]\n     \
    \   [else (+ (starts_one_ends (quotient n 10))\n                (starts_one_ends\
    \ (remainder n 10)))]))\n", "  (cond [(= n 0) 0]\n        [(= n 1) 1]\n      \
    \  [else (+ (starts_one_ends (quotient n 10)) (starts_one_ends (remainder n 10)))]))\n",
  "  (cond\n    ((= n 0) 0)\n    ((= n 1) 1)\n    (else (+ (starts_one_ends (quotient\
    \ n 10)) (starts_one_ends (remainder n 10))))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
