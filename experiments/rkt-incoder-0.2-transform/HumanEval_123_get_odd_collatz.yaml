name: HumanEval_123_get_odd_collatz
language: rkt
prompt: "#lang racket\n\n;; Given a positive integer n, return a sorted list that\
  \ has the odd numbers in collatz sequence.\n;; The Collatz conjecture is a conjecture\
  \ in mathematics that concerns a sequence defined\n;; as follows: start with any\
  \ positive integer n. Then each term is obtained from the \n;; previous term as\
  \ follows: if the previous term is even, the next term is one half of \n;; the previous\
  \ term. If the previous term is odd, the next term is 3 times the previous\n;; term\
  \ plus 1. The conjecture is that no matter what value of n, the sequence will always\
  \ reach 1.\n;; Note: \n;; 1. Collatz(1) is [1].\n;; 2. returned list sorted in increasing\
  \ order.\n;; For example:\n;; get_odd_collatz(5) returns [1, 5] # The collatz sequence\
  \ for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n;; >>> (get_odd_collatz\
  \ 5)\n;; (list 1 5)\n(define (get_odd_collatz n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_odd_collatz))\n\
  \    (check-equal? (candidate 14) (list 1 5 7 11 13 17))\n    (check-equal? (candidate\
  \ 5) (list 1 5))\n    (check-equal? (candidate 12) (list 1 3 5))\n    (check-equal?\
  \ (candidate 1) (list 1))\n))\n\n(test-humaneval)"
completions: ["  (if (= n 1)\n      (list 1)\n      (append (collatz (- n 1))\n  \
    \            (list (* 3 (+ n 1))))))\n", "  (if (= n 1)\n      (list 1)\n    \
    \  (let ((odd (get_odd_collatz (/ n 2))))\n        (if (= odd 1)\n           \
    \ (list n)\n            (cons (+ n odd) (cons odd odd)))))\n", "  (if (= n 1)\n\
    \      (list 1)\n      (let ((odd (get_odd_collatz (/ n 2))))\n        (if (even?\
    \ n)\n            (cons n (cons odd odd))\n            (cons n (cons odd odd))))))\n",
  "  (if (= n 1)\n      (list 1)\n      (let ((odd (get_odd_collatz (/ n 2))))\n \
    \       (if (even? n)\n            (cons n (cons odd odd))\n            (cons\
    \ n (cons odd odd))))))\n", "  (if (= n 1)\n      (list 1)\n      (append (collatz-seq\
    \ (- n 1))\n              (list (* 3 (collatz-seq (- n 1)))))))\n", "  (if (=\
    \ n 1)\n      (list 1)\n      (if (even? (collatz n))\n          (cons (collatz\
    \ n) (get_odd_collatz (/ n 2)))\n          (cons (collatz n) (get_odd_collatz\
    \ (+ (* 3 collatz n) 1))))))\n", "  (if (= n 1)\n      (list 1)\n      (if (even?\
    \ (car n))\n          (cons (car n) (get_odd_collatz (/ n 2)))\n          (cons\
    \ (car n) (get_odd_collatz (* 3 car n) (+ 1 car n))))))\n", "  (if (= n 1)\n \
    \     (list 1)\n      (if (even? n)\n          (cons (/ n 2) (get_odd_collatz\
    \ (/ n 2)))\n          (cons (* 3 n) (get_odd_collatz (+ 1 n))))))\n", "  (if\
    \ (= n 1)\n      (list 1)\n      (cond ((even? (car n)) (cons (car n) (get_odd_collatz\
    \ (/ n 2))))\n            (else (cons (car n) (get_odd_collatz (* 3 car n) (+\
    \ 1 car n)))))))\n", "  (if (= n 1)\n      (list 1)\n      (append (collatz (-\
    \ n 1))\n              (list (* 3 (modulo (+ n 1) 2))))))\n", "  (if (= n 1)\n\
    \      (list 1)\n      (append (cons (mod n 2) (get-odd-collatz (/ n 2))) (list\
    \ (mod n 2)))))\n", "  (if (= n 1)\n      (list 1)\n      (let ((odd (get_odd_collatz\
    \ (/ n 2))))\n        (if (= (modulo n 2) 0)\n            (cons n (cons odd odd))\n\
    \            (cons n (cons odd odd))))))\n", "  (if (= n 1)\n      (list 1)\n\
    \      (append (list (collatz (- n 1))) (list (* 3 (collatz (- n 1)))))))\n",
  "  (if (= n 1)\n      (list 1)\n      (let ((odd (get_odd_collatz (/ n 2))))\n \
    \       (if (even? n)\n            (cons n (cons odd odd))\n            (cons\
    \ n (cons odd odd))))))\n", "  (if (= n 1)\n      (list 1)\n      (append (list\
    \ (collatz-helper n 1))\n              (list (collatz-helper (/ n 2) (if (even?\
    \ n) (/ n 2) (* 3 n)))))))\n", "  (if (= n 1)\n      (list 1)\n      (let ((odd\
    \ (get_odd_collatz (/ n 2))))\n        (if (even? n)\n            (cons n (cons\
    \ odd odd))\n            (cons n (cons odd odd))))))\n", "  (if (= n 1)\n    \
    \  (list 1)\n      (append (collatz (- n 1))\n              (list (* 3 (modulo\
    \ (+ n 1) 2))))))\n", "  (if (= n 1)\n      (list 1)\n      (let ((odd (get_odd_collatz\
    \ (/ n 2))))\n        (if (even? n)\n            (cons n (cons odd odd))\n   \
    \         (cons n (cons (* 3 n) odd))))))\n", "  (if (= n 1)\n      (list 1)\n\
    \      (cons (if (even? (car n)) (car n) (* 3 (car n)) (cdr n)) (get_odd_collatz\
    \ (cdr n))))) ; #lang racket\n", "  (if (= n 1)\n      (list 1)\n      (append\
    \ (collatz-seq (- n 1))\n              (list (/ n 2)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
