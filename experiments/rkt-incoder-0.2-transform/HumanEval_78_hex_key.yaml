name: HumanEval_78_hex_key
language: rkt
prompt: "#lang racket\n\n;; You have been tasked to write a function that receives\
  \ \n;; a hexadecimal number as a string and counts the number of hexadecimal \n\
  ;; digits that are primes (prime number, or a prime, is a natural number \n;; greater\
  \ than 1 that is not a product of two smaller natural numbers).\n;; Hexadecimal\
  \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n;; Prime numbers are\
  \ 2, 3, 5, 7, 11, 13, 17,...\n;; So you have to determine a number of the following\
  \ digits: 2, 3, 5, 7, \n;; B (=decimal 11), D (=decimal 13).\n;; Note: you may assume\
  \ the input is always correct or empty string, \n;; and symbols A,B,C,D,E,F are\
  \ always uppercase.\n;; Examples:\n;; >>> (hex_key \"AB\")\n;; 1\n;; >>> (hex_key\
  \ \"1077E\")\n;; 2\n;; >>> (hex_key \"ABED1A33\")\n;; 4\n;; >>> (hex_key \"123456789ABCDEF0\"\
  )\n;; 6\n;; >>> (hex_key \"2020\")\n;; 2\n(define (hex_key num)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate hex_key))\n\
  \    (check-equal? (candidate \"AB\") 1)\n    (check-equal? (candidate \"1077E\"\
  ) 2)\n    (check-equal? (candidate \"ABED1A33\") 4)\n    (check-equal? (candidate\
  \ \"2020\") 2)\n    (check-equal? (candidate \"123456789ABCDEF0\") 6)\n    (check-equal?\
  \ (candidate \"112233445566778899AABBCCDDEEFF00\") 12)\n))\n\n(test-humaneval)"
completions: ["  (cond [(empty? num) 0]\n        [(equal? (first num) 'A) (+ 1 (hex_key\
    \ (subseq num 1 1)))]\n        [(equal? (first num) 'B) (+ 1 (hex_key (subseq\
    \ num 1 1)))]\n        [(equal? (first num) 'C) (+ 1 (hex_key (subseq num 1 1)))]\n\
    \        [(equal? (first num) 'D) (+ 1 (hex_key (subseq num 1 1)))]\n        [(equal?\
    \ (first num) 'E) (+ 1 (hex_key (subseq num 1 1)))]\n        [(equal? (first num)\
    \ 'F) (+ 1 (hex_key (subseq num 1 1)))]\n        [else (+ 1 (hex_key (subseq num\
    \ 1 1)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+\
    \ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (subseq\
    \ num 1)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (subseq num 1)))]\n  \
    \  [(equal? (first num) 'D) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first\
    \ num) 'E) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'F) (+ 1\
    \ (hex_key (subseq num 1)))]\n    [else (+ 1 (hex_key (subseq num 1)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ (first num) (hex_key\
    \ (subseq num 1)))]\n    [(equal? (first num) 'B) (+ (first num) (hex_key (subseq\
    \ num 1)))]\n    [(equal? (first num) 'C) (+ (first num) (hex_key (subseq num\
    \ 1)))]\n    [(equal? (first num) 'D) (+ (first num) (hex_key (subseq num 1)))]\n\
    \    [(equal? (first num) 'E) (+ (first num) (hex_key (subseq num 1)))]\n    [(equal?\
    \ (first num) 'F) (+ (first num) (hex_key (subseq num 1)))]\n    [else (+ (first\
    \ num) (hex_key (subseq num 1)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal?\
    \ (first num) 'A) (+ (first num) (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'B) (+ (first num) (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+ (first\
    \ num) (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+ (first num) (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'E) (+ (first num) (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'F) (+ (first num) (hex_key (rest num)))]\n    [else\
    \ (+ (first num) (hex_key (rest num)))]\n  )\n)\n", "  (cond\n    [(empty? num)\
    \ 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest\
    \ num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key\
    \ (rest num)))]\n  )\n)\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first\
    \ num) 'A) (+ (hex_key (subseq num 1 2)) 1)]\n    [(equal? (first num) 'B) (+\
    \ (hex_key (subseq num 1 2)) 1)]\n    [(equal? (first num) 'C) (+ (hex_key (subseq\
    \ num 1 2)) 1)]\n    [(equal? (first num) 'D) (+ (hex_key (subseq num 1 2)) 1)]\n\
    \    [(equal? (first num) 'E) (+ (hex_key (subseq num 1 2)) 1)]\n    [(equal?\
    \ (first num) 'F) (+ (hex_key (subseq num 1 2)) 1)]\n    [else (+ (hex_key (subseq\
    \ num 1 2)) (hex_key (subseq num 3 4)))]))\n", "  (cond\n    [(empty? num) 0]\n\
    \    [(equal? (first num) 'A) (+ 1 (hex_key (subseq num 1 1)))]\n    [(equal?\
    \ (first num) 'B) (+ 1 (hex_key (subseq num 1 1)))]\n    [(equal? (first num)\
    \ 'C) (+ 1 (hex_key (subseq num 1 1)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\
    \ (subseq num 1 1)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (subseq num\
    \ 1 1)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key (subseq num 1 1)))]\n  \
    \  [else (+ 1 (hex_key (subseq num 1 1)))]\n  )\n)\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ (hex_key (rest num)) (hex_key (rest\
    \ num)))]\n    [(equal? (first num) 'B) (+ (hex_key (rest num)) (hex_key (rest\
    \ num)))]\n    [(equal? (first num) 'C) (+ (hex_key (rest num)) (hex_key (rest\
    \ num)))]\n    [(equal? (first num) 'D) (+ (hex_key (rest num)) (hex_key (rest\
    \ num)))]\n    [(equal? (first num) 'E) (+ (hex_key (rest num)) (hex_key (rest\
    \ num)))]\n    [(equal? (first num) 'F) (+ (hex_key (rest num)) (hex_key (rest\
    \ num)))]\n    [else (+ (hex_key (rest num)) (hex_key (rest num)))]\n  )\n)\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest\
    \ num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key\
    \ (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num)\
    \ 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\
    \ (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]\n\
    \  )\n)\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1\
    \ (hex_key (subseq num 1 2)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (subseq\
    \ num 1 3)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (subseq num 1 4)))]\n\
    \    [(equal? (first num) 'D) (+ 1 (hex_key (subseq num 1 5)))]\n    [(equal?\
    \ (first num) 'E) (+ 1 (hex_key (subseq num 1 6)))]\n    [(equal? (first num)\
    \ 'F) (+ 1 (hex_key (subseq num 1 7)))]\n    [else (+ 1 (hex_key (subseq num 1\
    \ 8)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n  \
    \  [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n  \
    \  [(equal? (char-code (first num)) (char #\\A)) 0]\n    [(equal? (char-code (first\
    \ num)) (char #\\B)) 1]\n    [(equal? (char-code (first num)) (char #\\C)) 2]\n\
    \    [(equal? (char-code (first num)) (char #\\D)) 3]\n    [(equal? (char-code\
    \ (first num)) (char #\\E)) 4]\n    [(equal? (char-code (first num)) (char #\\\
    F)) 5]\n    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty? num)\
    \ 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n",
  "  (cond [(string=? (string-ref num 0) \"A\") 2]\n        [(string=? (string-ref\
    \ num 0) \"B\") 3]\n        [(string=? (string-ref num 0) \"C\") 4]\n        [(string=?\
    \ (string-ref num 0) \"D\") 5]\n        [(string=? (string-ref num 0) \"E\") 6]\n\
    \        [(string=? (string-ref num 0) \"F\") 7]\n        [(string=? (string-ref\
    \ num 0) \"0\") 8]\n        [(string=? (string-ref num 0) \"1\") 9]\n        [(string=?\
    \ (string-ref num 0) \"2\") 10]\n        [(string=? (string-ref num 0) \"3\")\
    \ 11]\n        [(string=? (string-ref num 0) \"4\") 12]\n        [(string=? (string-ref\
    \ num 0) \"5\") 13]\n        [(string=? (string-ref num 0) \"6\") 14]\n      \
    \  [(string=? (string-ref num 0) \"7\") 15]\n        [(string=? (string-ref num\
    \ 0) \"8\") 16]\n        [(string=? (string-ref num 0) \"9\") 17]\n        [(string=?\
    \ (string-ref num 0) \"a\") 18]\n        [(string=? (string-ref num 0) \"b\")\
    \ 19]\n        [(string=? (string-ref num 0) \"c\") 20]\n        [(string=? (string-ref\
    \ num 0) \"d\") 21]\n        [(string=? (string-ref num 0) \"e\") 22]\n      \
    \  [(string=? (string-ref num 0) \"f\") 23]\n        [(string=? (string-ref num\
    \ 0) \"0\") 24]\n        [(string=? (string-ref num 0) \"1\") 25]\n        [(string=?\
    \ (string-ref num 0) \"2\") 26]\n        [(string=? (string-ref num 0) \"3\")\
    \ 27]\n        [(string=? (string-ref num 0) \"4\") 28]\n        [(string=? (string-ref\
    \ num 0) \"5\") 29]\n        [(string=? (string-ref num 0) \"6\") 30]\n      \
    \  [(string=? (string-ref num 0) \"7\") 31]\n        [(string=? (string-ref num\
    \ 0) \"8\") 32]\n        [(string=? (string-ref num 0) \"9\") 33]\n        [(string=?\
    \ (string-ref num 0) \"A\") 34]\n        [(string=? (string-ref num 0) \"B\")\
    \ 35]\n        [(string=? (string-ref num 0) \"C\") 36]\n        [(string=? (string-ref\
    \ num 0) \"D\") 37]\n        [(string=? (string-ref num 0) \"E\") 38]\n", "  (cond\
    \ [(empty? num) 0]\n        [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n\
    \        [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n        [(equal?\
    \ (first num) 'C) (+ 1 (hex_key (rest num)))]\n        [(equal? (first num) 'D)\
    \ (+ 1 (hex_key (rest num)))]\n        [(equal? (first num) 'E) (+ 1 (hex_key\
    \ (rest num)))]\n        [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n\
    \        [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n\
    \    [(equal? (first num) 'A) (+ 1 (hex_key (subseq num 1 2)))]\n    [(equal?\
    \ (first num) 'B) (+ 1 (hex_key (subseq num 1 3)))]\n    [(equal? (first num)\
    \ 'C) (+ 1 (hex_key (subseq num 1 4)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\
    \ (subseq num 1 5)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (subseq num\
    \ 1 6)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key (subseq num 1 7)))]\n  \
    \  [else (+ 1 (hex_key (subseq num 1 8)))]))\n", "  (cond\n    [(empty? num) 0]\n\
    \    [(equal? (char-code (car num)) (digit-char (char-code (car num))))\n    \
    \ (+ 1 (hex_key (rest num)))]\n    [else (hex_key (rest num))]))\n", "  (cond\n\
    \    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ (hex_key (subseq num 0\
    \ 1)) 1)]\n    [(equal? (first num) 'B) (+ (hex_key (subseq num 0 1)) 2)]\n  \
    \  [(equal? (first num) 'C) (+ (hex_key (subseq num 0 1)) 3)]\n    [(equal? (first\
    \ num) 'D) (+ (hex_key (subseq num 0 1)) 4)]\n    [(equal? (first num) 'E) (+\
    \ (hex_key (subseq num 0 1)) 5)]\n    [(equal? (first num) 'F) (+ (hex_key (subseq\
    \ num 0 1)) 6)]\n    [else (+ (hex_key (subseq num 0 1)) 7)]))\n", "  (cond\n\
    \    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (subseq num\
    \ 1 2)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (subseq num 1 3)))]\n  \
    \  [(equal? (first num) 'C) (+ 1 (hex_key (subseq num 1 4)))]\n    [(equal? (first\
    \ num) 'D) (+ 1 (hex_key (subseq num 1 5)))]\n    [(equal? (first num) 'E) (+\
    \ 1 (hex_key (subseq num 1 6)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key (subseq\
    \ num 1 7)))]\n    [else (+ 1 (hex_key (subseq num 1 8)))]\n  )\n)\n", "  (cond\n\
    \    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (subseq num\
    \ 1)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (subseq num 1)))]\n    [(equal?\
    \ (first num) 'C) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'D)\
    \ (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\
    \ (subseq num 1)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key (subseq num 1)))]\n\
    \    [else (+ 1 (hex_key (subseq num 1)))]\n  )\n)\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (subseq num 1 2)))]\n  \
    \  [(equal? (first num) 'B) (+ 1 (hex_key (subseq num 1 3)))]\n    [(equal? (first\
    \ num) 'C) (+ 1 (hex_key (subseq num 1 4)))]\n    [(equal? (first num) 'D) (+\
    \ 1 (hex_key (subseq num 1 5)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (subseq\
    \ num 1 6)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key (subseq num 1 7)))]\n\
    \    [else (+ 1 (hex_key (subseq num 1 8)))]\n  )\n)\n", "  (cond [(empty? num)\
    \ 0]\n        [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n        [(equal?\
    \ (first num) 'B) (+ 1 (hex_key (rest num)))]\n        [(equal? (first num) 'C)\
    \ (+ 1 (hex_key (rest num)))]\n        [(equal? (first num) 'D) (+ 1 (hex_key\
    \ (rest num)))]\n        [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n\
    \        [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n        [else (+\
    \ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal?\
    \ (first num) 'A) (+ 1 (hex_key (substring num 1 1)))]\n    [(equal? (first num)\
    \ 'B) (+ 1 (hex_key (substring num 1 1)))]\n    [(equal? (first num) 'C) (+ 1\
    \ (hex_key (substring num 1 1)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\
    \ (substring num 1 1)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (substring\
    \ num 1 1)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key (substring num 1 1)))]\n\
    \    [else (+ 1 (hex_key (substring num 1 1)))]\n  )\n)\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (char-code (car num)) #\\A) (+ 1 (hex_key(cdr\
    \ num)))]\n    [(equal? (char-code (car num)) #\\B) (+ 1 (hex_key(cdr num)))]\n\
    \    [(equal? (char-code (car num)) #\\C) (+ 1 (hex_key(cdr num)))]\n    [(equal?\
    \ (char-code (car num)) #\\D) (+ 1 (hex_key(cdr num)))]\n    [(equal? (char-code\
    \ (car num)) #\\E) (+ 1 (hex_key(cdr num)))]\n    [(equal? (char-code (car num))\
    \ #\\F) (+ 1 (hex_key(cdr num)))]\n    [else (+ 1 (hex_key(cdr num)))]))\n", " \
    \ (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ (hex_key (subseq\
    \ num 0 1)) 1)]\n    [(equal? (first num) 'B) (+ (hex_key (subseq num 0 1)) 1)]\n\
    \    [(equal? (first num) 'C) (+ (hex_key (subseq num 0 1)) 1)]\n    [(equal?\
    \ (first num) 'D) (+ (hex_key (subseq num 0 1)) 1)]\n    [(equal? (first num)\
    \ 'E) (+ (hex_key (subseq num 0 1)) 1)]\n    [(equal? (first num) 'F) (+ (hex_key\
    \ (subseq num 0 1)) 1)]\n    [else (+ (hex_key (subseq num 0 1)) 1)]))\n", " \
    \ (cond\n    [(empty? num) 0]\n    [(digit-char? num) 0]\n    [else (+ 1 (hex_key\
    \ (substring num 0 (quotient (length num) 2)))]\n  )\n)\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest\
    \ num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key\
    \ (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num)\
    \ 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\
    \ (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (subseq num 1 2)))]\n  \
    \  [(equal? (first num) 'B) (+ 1 (hex_key (subseq num 1 3)))]\n    [(equal? (first\
    \ num) 'C) (+ 1 (hex_key (subseq num 1 4)))]\n    [(equal? (first num) 'D) (+\
    \ 1 (hex_key (subseq num 1 5)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (subseq\
    \ num 1 6)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key (subseq num 1 7)))]\n\
    \    [else (+ 1 (hex_key (subseq num 1 8)))]))\n", "  (cond\n    [(empty? num)\
    \ 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (subseq num 1)))]\n    [(equal?\
    \ (first num) 'B) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'C)\
    \ (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\
    \ (subseq num 1)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (subseq num 1)))]\n\
    \    [(equal? (first num) 'F) (+ 1 (hex_key (subseq num 1)))]\n    [else (+ 1\
    \ (hex_key (subseq num 1)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal?\
    \ (first num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\
    \ (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond [(empty?\
    \ num) 0]\n        [(equal? (first num) 'A) (+ 1 (hex_key (sub1 num)))]\n    \
    \    [(equal? (first num) 'B) (+ 1 (hex_key (sub1 num)))]\n        [(equal? (first\
    \ num) 'C) (+ 1 (hex_key (sub1 num)))]\n        [(equal? (first num) 'D) (+ 1\
    \ (hex_key (sub1 num)))]\n        [(equal? (first num) 'E) (+ 1 (hex_key (sub1\
    \ num)))]\n        [(equal? (first num) 'F) (+ 1 (hex_key (sub1 num)))]\n    \
    \    [else (+ 1 (hex_key (sub1 num)))]))\n", "  (cond [(empty? num) 0]\n     \
    \   [(equal? (char-code (car num)) (char #\\A)) 0]\n        [(equal? (char-code\
    \ (car num)) (char #\\B)) 1]\n        [(equal? (char-code (car num)) (char #\\\
    C)) 2]\n        [(equal? (char-code (car num)) (char #\\D)) 3]\n        [(equal?\
    \ (char-code (car num)) (char #\\E)) 4]\n        [(equal? (char-code (car num))\
    \ (char #\\F)) 5]\n        [else (+ 1 (hex_key (cdr num)))]))\n", "  (cond\n \
    \   [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key\
    \ (rest num)))]))\n", "  (cond [(null? num) 0]\n        [(= (length num) 1) (+\
    \ 1 (char->integer (substring num 0 1)))]\n        [(= (length num) 2) (+ 1 (char->integer\
    \ (substring num 0 1)))]\n        [(= (length num) 3) (+ 1 (char->integer (substring\
    \ num 0 1)))]\n        [(= (length num) 4) (+ 1 (char->integer (substring num\
    \ 0 1)))]\n        [(= (length num) 5) (+ 1 (char->integer (substring num 0 1)))]\n\
    \        [(= (length num) 6) (+ 1 (char->integer (substring num 0 1)))]\n    \
    \    [(= (length num) 7) (+ 1 (char->integer (substring num 0 1)))]\n        [(=\
    \ (length num) 8) (+ 1 (char->integer (substring num 0 1)))]\n        [(= (length\
    \ num) 9) (+ 1 (char->integer (substring num 0 1)))]\n        [(= (length num)\
    \ 10) (+ 1 (char->integer (substring num 0 1)))]\n        [(= (length num) 11)\
    \ (+ 1 (char->integer (substring num 0 1)))]\n        [(= (length num) 12) (+\
    \ 1 (char->integer (substring num 0 1)))]\n        [(= (length num) 13) (+ 1 (char->integer\
    \ (substring num 0 1)))]\n        [(= (length num) 14) (+ 1 (char->integer (substring\
    \ num 0 1)))]\n        [(= (length num) 15) (+ 1 (char->integer (substring num\
    \ 0 1)))]\n        [(= (length num) 16) (+ 1 (char->integer (substring num 0 1)))]\n\
    \        [(= (length num) 17) (+ 1 (char->integer (substring num 0 1)))]\n   \
    \     [(= (length num) 18) (+ 1 (char->integer (substring num 0 1)))]\n      \
    \  [(= (length num) 19) (+ 1 (char->integer (substring num 0 1)))]\n        [(=\
    \ (length num) 20) (+ 1 (char->integer (substring num 0 1)))]\n        [(= (length\
    \ num) 21) (+ 1 (char->integer (substring num 0 1)))]\n        [(= (length num)\
    \ 22) (+ 1 (char->integer (substring num 0 1)))]\n        [(= (length num) 23)\
    \ (+ 1 (char->integer (substring ", "  (cond [(empty? num) 0]\n        [(equal?\
    \ (first num) 'A) (+ 1 (hex_key (rest num)))]\n        [(equal? (first num) 'B)\
    \ (+ 1 (hex_key (rest num)))]\n        [(equal? (first num) 'C) (+ 1 (hex_key\
    \ (rest num)))]\n        [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n\
    \        [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n        [(equal?\
    \ (first num) 'F) (+ 1 (hex_key (rest num)))]\n        [else (+ 1 (hex_key (rest\
    \ num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n  \
    \  [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n  \
    \  [(equal? (first num) 'A) (+ (first num) (hex_key (sub1 num)))]\n    [(equal?\
    \ (first num) 'B) (+ (first num) (hex_key (sub1 num)))]\n    [(equal? (first num)\
    \ 'C) (+ (first num) (hex_key (sub1 num)))]\n    [(equal? (first num) 'D) (+ (first\
    \ num) (hex_key (sub1 num)))]\n    [(equal? (first num) 'E) (+ (first num) (hex_key\
    \ (sub1 num)))]\n    [(equal? (first num) 'F) (+ (first num) (hex_key (sub1 num)))]\n\
    \    [else (+ (first num) (hex_key (sub1 num)))]\n  )\n)\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ (hex_key (rest num)) 1)]\n    [(equal?\
    \ (first num) 'B) (+ (hex_key (rest num)) 2)]\n    [(equal? (first num) 'C) (+\
    \ (hex_key (rest num)) 3)]\n    [(equal? (first num) 'D) (+ (hex_key (rest num))\
    \ 4)]\n    [(equal? (first num) 'E) (+ (hex_key (rest num)) 5)]\n    [(equal?\
    \ (first num) 'F) (+ (hex_key (rest num)) 6)]\n    [else (+ (hex_key (rest num))\
    \ (hex_key (first num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(digit-char?\
    \ num) \n     (+ (count-digits (string->list (string->symbol num))) 1)]\n    [else\
    \ (hex_key (rest num))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first\
    \ num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\
    \ (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(digit-char? num) 0]\n    [else (+ 1 (hex_key-helper (substring\
    \ num 0 1) (substring num 1 1)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal?\
    \ (first num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\
    \ (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ (first num) (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'B) (+ (first num) (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'C) (+ (first num) (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'D) (+ (first num) (hex_key (rest num)))]\n    [(equal? (first num) 'E) (+ (first\
    \ num) (hex_key (rest num)))]\n    [(equal? (first num) 'F) (+ (first num) (hex_key\
    \ (rest num)))]\n    [else (+ (first num) (hex_key (rest num)))]\n  )\n)\n", " \
    \ (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (subseq\
    \ num 1 2)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (subseq num 1 3)))]\n\
    \    [(equal? (first num) 'C) (+ 1 (hex_key (subseq num 1 4)))]\n    [(equal?\
    \ (first num) 'D) (+ 1 (hex_key (subseq num 1 5)))]\n    [(equal? (first num)\
    \ 'E) (+ 1 (hex_key (subseq num 1 6)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\
    \ (subseq num 1 7)))]\n    [else (+ 1 (hex_key (subseq num 1 8)))]))\n", "  (cond\
    \ [(empty? num) 0]\n        [(digit-char? num) 1]\n        [else (+ (hex-key (substring\
    \ num 0 1)) (hex-key (substring num 1 1)))]))\n", "  (cond [(empty? num) 0]\n\
    \        [(= (length num) 1) (length num)]\n        [(= (length num) 2) (length\
    \ num)]\n        [(= (length num) 3) (length num)]\n        [(= (length num) 4)\
    \ (length num)]\n        [(= (length num) 5) (length num)]\n        [(= (length\
    \ num) 6) (length num)]\n        [(= (length num) 7) (length num)]\n        [(=\
    \ (length num) 8) (length num)]\n        [(= (length num) 9) (length num)]\n \
    \       [(= (length num) 10) (length num)]\n        [(= (length num) 11) (length\
    \ num)]\n        [(= (length num) 12) (length num)]\n        [(= (length num)\
    \ 13) (length num)]\n        [(= (length num) 14) (length num)]\n        [(= (length\
    \ num) 15) (length num)]\n        [(= (length num) 16) (length num)]\n       \
    \ [(= (length num) 17) (length num)]\n        [(= (length num) 18) (length num)]\n\
    \        [(= (length num) 19) (length num)]\n        [(= (length num) 20) (length\
    \ num)]\n        [(= (length num) 21) (length num)]\n        [(= (length num)\
    \ 22) (length num)]\n        [(= (length num) 23) (length num)]\n        [(= (length\
    \ num) 24) (length num)]\n        [(= (length num) 25) (length num)]\n       \
    \ [(= (length num) 26) (length num)]\n        [(= (length num) 27) (length num)]\n\
    \        [(= (length num) 28) (length num)]\n        [(= (length num) 29) (length\
    \ num)]\n        [(= (length num) 30) (length num)]\n        [(= (length num)\
    \ 31) (length num)]\n        [(= (length num) 32) (length num)]\n        [(= (length\
    \ num) 33) (length num)]\n        [(= (length num) 34) (length num)]\n       \
    \ [(= (length num) 35) (length num)]\n        [(= (length num) 36) (length num)]\n\
    \        [(= (length num) 37) (length num)]\n        [(= (length num) 38) (length\
    \ num)]\n        [(= (length num) ", "  (cond\n    [(empty? num) 0]\n    [(equal?\
    \ (first num) 'A) (+ 1 (hex_key (sub1 num)))]\n    [(equal? (first num) 'B) (+\
    \ 1 (hex_key (sub1 num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (sub1 num)))]\n\
    \    [(equal? (first num) 'D) (+ 1 (hex_key (sub1 num)))]\n    [(equal? (first\
    \ num) 'E) (+ 1 (hex_key (sub1 num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\
    \ (sub1 num)))]\n    [else (+ 1 (hex_key (sub1 num)))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ (hex_key (rest num)) 1)]\n    [(equal?\
    \ (first num) 'B) (+ (hex_key (rest num)) 2)]\n    [(equal? (first num) 'C) (+\
    \ (hex_key (rest num)) 3)]\n    [(equal? (first num) 'D) (+ (hex_key (rest num))\
    \ 4)]\n    [(equal? (first num) 'E) (+ (hex_key (rest num)) 5)]\n    [(equal?\
    \ (first num) 'F) (+ (hex_key (rest num)) 6)]\n    [else (+ (hex_key (rest num))\
    \ (hex_key (first num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first\
    \ num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\
    \ (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond [(empty?\
    \ num) 0]\n        [(equal? (first num) 'A) (+ 1 (hex_key (subseq num 1 2)))]\n\
    \        [(equal? (first num) 'B) (+ 1 (hex_key (subseq num 1 3)))]\n        [(equal?\
    \ (first num) 'C) (+ 1 (hex_key (subseq num 1 4)))]\n        [(equal? (first num)\
    \ 'D) (+ 1 (hex_key (subseq num 1 5)))]\n        [(equal? (first num) 'E) (+ 1\
    \ (hex_key (subseq num 1 6)))]\n        [(equal? (first num) 'F) (+ 1 (hex_key\
    \ (subseq num 1 7)))]\n        [else (+ 1 (hex_key (subseq num 1 8)))]))\n", " \
    \ (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest\
    \ num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key\
    \ (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num)\
    \ 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\
    \ (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ (first num) (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'B) (+ (first num) (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'C) (+ (first num) (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'D) (+ (first num) (hex_key (rest num)))]\n    [(equal? (first num) 'E) (+ (first\
    \ num) (hex_key (rest num)))]\n    [(equal? (first num) 'F) (+ (first num) (hex_key\
    \ (rest num)))]\n    [else (+ (first num) (hex_key (rest num)))]\n  )\n)\n", " \
    \ (cond [(empty? num) 0]\n        [(equal? (first num) 'A) (+ 1 (hex_key (sub1\
    \ num)))]\n        [(equal? (first num) 'B) (+ 1 (hex_key (sub1 num)))]\n    \
    \    [(equal? (first num) 'C) (+ 1 (hex_key (sub1 num)))]\n        [(equal? (first\
    \ num) 'D) (+ 1 (hex_key (sub1 num)))]\n        [(equal? (first num) 'E) (+ 1\
    \ (hex_key (sub1 num)))]\n        [(equal? (first num) 'F) (+ 1 (hex_key (sub1\
    \ num)))]\n        [else (+ 1 (hex_key (sub1 num)))]))\n", "  (cond [(empty? num)\
    \ 0]\n        [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n        [(equal?\
    \ (first num) 'B) (+ 1 (hex_key (rest num)))]\n        [(equal? (first num) 'C)\
    \ (+ 1 (hex_key (rest num)))]\n        [(equal? (first num) 'D) (+ 1 (hex_key\
    \ (rest num)))]\n        [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n\
    \        [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n        [else (+\
    \ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal?\
    \ (char-code (first num)) (char #\\A)) 0]\n    [else (+ 1 (hex_key\n         \
    \          (substring (second num) 1 \n                             (- (string-length\
    \ num) 1)))\n               (hex_key\n                   (substring (third num)\
    \ 1 \n                             (- (string-length num) 1)))\n             \
    \  (hex_key\n                   (substring (fourth num) 1 \n                 \
    \            (- (string-length num) 1)))\n               (hex_key\n          \
    \         (substring (fifth num) 1 \n                             (- (string-length\
    \ num) 1)))\n               (hex_key\n                   (substring (sixth num)\
    \ 1 \n                             (- (string-length num) 1)))\n             \
    \  (hex_key\n                   (substring (seventh num) 1 \n                \
    \             (- (string-length num) 1)))\n               (hex_key\n         \
    \          (substring (eighth num) 1 \n                             (- (string-length\
    \ num) 1)))\n               (hex_key\n                   (substring (ninth num)\
    \ 1 \n                             (- (string-length num) 1)))\n             \
    \  (hex_key\n                   (substring (tenth num) 1 \n                  \
    \           (- (string-length num) 1)))\n               (hex_key\n           \
    \        (substring (eleventh num) 1 \n                             (- (string-length\
    \ num) 1)))\n               (hex_key\n                   (substring (twelfth num)\
    \ 1 \n                             (- (string-length num) 1)))\n             \
    \  (hex_key\n                   (substring (thirteenth num) 1 \n             \
    \                (- (string-length num) 1)))\n               (hex_key\n      \
    \             (substring (fourteenth num) 1 \n                             (-\
    \ (string-length num) 1)))\n               (hex_key\n                   (substring\
    \ (fifteenth num) 1 \n                             (- (string-length num) 1)))\n\
    \               (hex_key\n                   (substring (sixteenth num) 1 \n \
    \                            (- (string-length num) 1)))\n               (hex_key\n\
    \                   (substring (seventeenth num) 1 \n                        \
    \     (- (string-length num) 1)))\n               (hex_key\n                 \
    \  (substring (eighteenth num) 1 \n                             (- (string-length\
    \ num) 1)))\n               (hex_key\n                   (substring (nineteenth\
    \ num) 1 \n                             (- (string-length num) 1)))\n        \
    \       (hex_key\n                   (substring (twentieth num) 1 \n         \
    \                    (- (string-length num) 1)))\n               (hex_key\n  \
    \                 (", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num)\
    \ 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\
    \ (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (subseq num 1 2)))]\n  \
    \  [(equal? (first num) 'B) (+ 1 (hex_key (subseq num 1 3)))]\n    [(equal? (first\
    \ num) 'C) (+ 1 (hex_key (subseq num 1 4)))]\n    [(equal? (first num) 'D) (+\
    \ 1 (hex_key (subseq num 1 5)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (subseq\
    \ num 1 6)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key (subseq num 1 7)))]\n\
    \    [else (+ 1 (hex_key (subseq num 1 8)))]\n  )\n)\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (sub1 num)))]\n    [(equal?\
    \ (first num) 'B) (+ 1 (hex_key (sub1 num)))]\n    [(equal? (first num) 'C) (+\
    \ 1 (hex_key (sub1 num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (sub1 num)))]\n\
    \    [(equal? (first num) 'E) (+ 1 (hex_key (sub1 num)))]\n    [(equal? (first\
    \ num) 'F) (+ 1 (hex_key (sub1 num)))]\n    [else (+ 1 (hex_key (sub1 num)))]\n\
    \  )\n)\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1\
    \ (hex_key (subseq num 1 2)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (subseq\
    \ num 1 3)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (subseq num 1 4)))]\n\
    \    [(equal? (first num) 'D) (+ 1 (hex_key (subseq num 1 5)))]\n    [(equal?\
    \ (first num) 'E) (+ 1 (hex_key (subseq num 1 6)))]\n    [(equal? (first num)\
    \ 'F) (+ 1 (hex_key (subseq num 1 7)))]\n    [else (+ 1 (hex_key (subseq num 1\
    \ 8)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+\
    \ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (subseq\
    \ num 1)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (subseq num 1)))]\n  \
    \  [(equal? (first num) 'D) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first\
    \ num) 'E) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'F) (+ 1\
    \ (hex_key (subseq num 1)))]\n    [else (+ 1 (hex_key (subseq num 1)))]\n  )\n\
    )\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key\
    \ (subseq num 1 2)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (subseq num\
    \ 1 3)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (subseq num 1 4)))]\n  \
    \  [(equal? (first num) 'D) (+ 1 (hex_key (subseq num 1 5)))]\n    [(equal? (first\
    \ num) 'E) (+ 1 (hex_key (subseq num 1 6)))]\n    [(equal? (first num) 'F) (+\
    \ 1 (hex_key (subseq num 1 7)))]\n    [else (+ 1 (hex_key (subseq num 1 8)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest\
    \ num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key\
    \ (rest num)))]))\n", "  (cond [(empty? num) 0]\n        [(digit-char? (first\
    \ num)) (+ (first num) (hex_key (rest num)))]\n        [else (hex_key (rest num))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest\
    \ num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key\
    \ (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num)\
    \ 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\
    \ (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (subseq num 1)))]\n    [(equal?\
    \ (first num) 'B) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'C)\
    \ (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\
    \ (subseq num 1)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (subseq num 1)))]\n\
    \    [(equal? (first num) 'F) (+ 1 (hex_key (subseq num 1)))]\n    [else (+ 1\
    \ (hex_key (subseq num 1)))]\n  )\n)\n", "  (cond\n    [(empty? num) 0]\n    [(equal?\
    \ (char-code (first num)) (char #\\A)) 0]\n    [else (+ 1 (hex_key (rest num)))]))\n",
  "  (cond [(number? num) num]\n        [else (+ 1 (hex_key (number->string num)))]))\n",
  "  (cond [(empty? num) 0]\n        [(equal? (first num) 'A) (+ 1 (hex_key (rest\
    \ num)))]\n        [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n    \
    \    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n        [(equal? (first\
    \ num) 'D) (+ 1 (hex_key (rest num)))]\n        [(equal? (first num) 'E) (+ 1\
    \ (hex_key (rest num)))]\n        [(equal? (first num) 'F) (+ 1 (hex_key (rest\
    \ num)))]\n        [else (+ 1 (hex_key (rest num)))]))\n", "  (cond [(empty? num)\
    \ 0]\n        [(equal? (char-code (car num)) (char #\\A)) 0]\n        [(equal?\
    \ (char-code (car num)) (char #\\B)) 1]\n        [(equal? (char-code (car num))\
    \ (char #\\C)) 2]\n        [(equal? (char-code (car num)) (char #\\D)) 3]\n  \
    \      [(equal? (char-code (car num)) (char #\\E)) 4]\n        [(equal? (char-code\
    \ (car num)) (char #\\F)) 5]\n        [else (+ (hex_key (cdr num)) (hex_key (car\
    \ num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n  \
    \  [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n  \
    \  [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'B) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (subseq\
    \ num 1 2)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (subseq num 1 3)))]\n\
    \    [(equal? (first num) 'C) (+ 1 (hex_key (subseq num 1 4)))]\n    [(equal?\
    \ (first num) 'D) (+ 1 (hex_key (subseq num 1 5)))]\n    [(equal? (first num)\
    \ 'E) (+ 1 (hex_key (subseq num 1 6)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\
    \ (subseq num 1 7)))]\n    [else (+ 1 (hex_key (subseq num 1 8)))]\n  )\n)\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (subseq\
    \ num 1)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (subseq num 1)))]\n  \
    \  [(equal? (first num) 'C) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first\
    \ num) 'D) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'E) (+ 1\
    \ (hex_key (subseq num 1)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key (subseq\
    \ num 1)))]\n    [else (+ 1 (hex_key (subseq num 1)))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ (first num) (hex_key (subseq num 1)))]\n\
    \    [(equal? (first num) 'B) (+ (first num) (hex_key (subseq num 1)))]\n    [(equal?\
    \ (first num) 'C) (+ (first num) (hex_key (subseq num 1)))]\n    [(equal? (first\
    \ num) 'D) (+ (first num) (hex_key (subseq num 1)))]\n    [(equal? (first num)\
    \ 'E) (+ (first num) (hex_key (subseq num 1)))]\n    [(equal? (first num) 'F)\
    \ (+ (first num) (hex_key (subseq num 1)))]\n    [else (+ (first num) (hex_key\
    \ (subseq num 1)))]\n  )\n)\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first\
    \ num) 'A) (+ (first num) (hex_key (rest num)))]\n    [(equal? (first num) 'B)\
    \ (+ (first num) (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+ (first\
    \ num) (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+ (first num) (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'E) (+ (first num) (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'F) (+ (first num) (hex_key (rest num)))]\n    [else\
    \ (+ (first num) (hex_key (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n\
    \    [(equal? (first num) 'A) (+ 1 (hex_key (subseq num 1 2)))]\n    [(equal?\
    \ (first num) 'B) (+ 1 (hex_key (subseq num 1 3)))]\n    [(equal? (first num)\
    \ 'C) (+ 1 (hex_key (subseq num 1 4)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\
    \ (subseq num 1 5)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (subseq num\
    \ 1 6)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key (subseq num 1 7)))]\n  \
    \  [else (+ 1 (hex_key (subseq num 1 8)))]))\n", "  (cond\n    [(empty? num) 0]\n\
    \    [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest\
    \ num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key\
    \ (rest num)))]))\n", "  (cond [(empty? num) 0]\n        [(equal? (first num)\
    \ 'A) (+ 1 (hex_key (subseq num 1 2)))]\n        [(equal? (first num) 'B) (+ 1\
    \ (hex_key (subseq num 1 3)))]\n        [(equal? (first num) 'C) (+ 1 (hex_key\
    \ (subseq num 1 4)))]\n        [(equal? (first num) 'D) (+ 1 (hex_key (subseq\
    \ num 1 5)))]\n        [(equal? (first num) 'E) (+ 1 (hex_key (subseq num 1 6)))]\n\
    \        [(equal? (first num) 'F) (+ 1 (hex_key (subseq num 1 7)))]\n        [else\
    \ (+ 1 (hex_key (subseq num 1 8)))]))\n", "  (cond [(number? num) (hex_key_num\
    \ num)]\n        [else (hex_key_str num)]))\n", "  (cond\n    [(empty? num) 0]\n\
    \    [(equal? (first num) 'A) (+ 1 (hex_key (subseq num 1 2)))]\n    [(equal?\
    \ (first num) 'B) (+ 1 (hex_key (subseq num 1 3)))]\n    [(equal? (first num)\
    \ 'C) (+ 1 (hex_key (subseq num 1 4)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\
    \ (subseq num 1 5)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (subseq num\
    \ 1 6)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key (subseq num 1 7)))]\n  \
    \  [else (+ 1 (hex_key (subseq num 1 8)))]))\n", "  (cond [(empty? num) 0]\n \
    \       [(equal? (first num) 'A) (+ 1 (hex_key (subseq num 1 1)))]\n        [(equal?\
    \ (first num) 'B) (+ 1 (hex_key (subseq num 1 1)))]\n        [(equal? (first num)\
    \ 'C) (+ 1 (hex_key (subseq num 1 1)))]\n        [(equal? (first num) 'D) (+ 1\
    \ (hex_key (subseq num 1 1)))]\n        [(equal? (first num) 'E) (+ 1 (hex_key\
    \ (subseq num 1 1)))]\n        [(equal? (first num) 'F) (+ 1 (hex_key (subseq\
    \ num 1 1)))]\n        [else (+ 1 (hex_key (subseq num 1 1)))]))\n", "  (cond\n\
    \    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ (first num) (hex_key (subseq\
    \ num 1 2)))]\n    [(equal? (first num) 'B) (+ (first num) (hex_key (subseq num\
    \ 1 3)))]\n    [(equal? (first num) 'C) (+ (first num) (hex_key (subseq num 1\
    \ 4)))]\n    [(equal? (first num) 'D) (+ (first num) (hex_key (subseq num 1 5)))]\n\
    \    [(equal? (first num) 'E) (+ (first num) (hex_key (subseq num 1 6)))]\n  \
    \  [(equal? (first num) 'F) (+ (first num) (hex_key (subseq num 1 7)))]\n    [else\
    \ (+ (first num) (hex_key (subseq num 1 8)))]))\n", "  (cond\n    [(empty? num)\
    \ 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (sub1 num)))]\n    [(equal? (first\
    \ num) 'B) (+ 1 (hex_key (sub1 num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\
    \ (sub1 num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (sub1 num)))]\n  \
    \  [(equal? (first num) 'E) (+ 1 (hex_key (sub1 num)))]\n    [(equal? (first num)\
    \ 'F) (+ 1 (hex_key (sub1 num)))]\n    [else (+ 1 (hex_key (sub1 num)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (char-code (car num)) #\\A) (+ 1 (hex_key\
    \ (cdr num)))]\n    [else (+ 1 (hex_key (cdr num)))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ (hex_key (substring\
    \ num 1 1)) 1)]\n    [(equal? (first num) 'B) (+ (hex_key (substring num 1 1))\
    \ 2)]\n    [(equal? (first num) 'C) (+ (hex_key (substring num 1 1)) 3)]\n   \
    \ [(equal? (first num) 'D) (+ (hex_key (substring num 1 1)) 4)]\n    [(equal?\
    \ (first num) 'E) (+ (hex_key (substring num 1 1)) 5)]\n    [(equal? (first num)\
    \ 'F) (+ (hex_key (substring num 1 1)) 6)]\n    [else (+ (hex_key (substring num\
    \ 1 1)) 7)]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A)\
    \ (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (rest\
    \ num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'E) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n\
    \    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n\
    \    [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest\
    \ num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key\
    \ (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num)\
    \ 'A) (+ (first num) (hex_key (subseq num 1)))]\n    [(equal? (first num) 'B)\
    \ (+ (first num) (hex_key (subseq num 1)))]\n    [(equal? (first num) 'C) (+ (first\
    \ num) (hex_key (subseq num 1)))]\n    [(equal? (first num) 'D) (+ (first num)\
    \ (hex_key (subseq num 1)))]\n    [(equal? (first num) 'E) (+ (first num) (hex_key\
    \ (subseq num 1)))]\n    [(equal? (first num) 'F) (+ (first num) (hex_key (subseq\
    \ num 1)))]\n    [else (+ (first num) (hex_key (subseq num 1)))]\n  )\n)\n", " \
    \ (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (subseq\
    \ num 1 1)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (subseq num 1 1)))]\n\
    \    [(equal? (first num) 'C) (+ 1 (hex_key (subseq num 1 1)))]\n    [(equal?\
    \ (first num) 'D) (+ 1 (hex_key (subseq num 1 1)))]\n    [(equal? (first num)\
    \ 'E) (+ 1 (hex_key (subseq num 1 1)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\
    \ (subseq num 1 1)))]\n    [else (+ 1 (hex_key (subseq num 1 1)))]\n  )\n)\n",
  "  (cond\n    [(empty? num) 0]\n    [(digit-char? num) 1]\n    [else (+ (hex_key\
    \ (substring num 0 1)) (hex_key (substring num 1 1)))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (subseq num 1)))]\n    [(equal?\
    \ (first num) 'B) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'C)\
    \ (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\
    \ (subseq num 1)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (subseq num 1)))]\n\
    \    [(equal? (first num) 'F) (+ 1 (hex_key (subseq num 1)))]\n    [else (+ 1\
    \ (hex_key (subseq num 1)))]\n  )\n)\n", "  (cond\n    [(empty? num) 0]\n    [(equal?\
    \ (first num) 'A) (+ 1 (hex_key (substring num 1 1)))]\n    [(equal? (first num)\
    \ 'B) (+ 1 (hex_key (substring num 1 1)))]\n    [(equal? (first num) 'C) (+ 1\
    \ (hex_key (substring num 1 1)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\
    \ (substring num 1 1)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (substring\
    \ num 1 1)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key (substring num 1 1)))]\n\
    \    [else (+ 1 (hex_key (substring num 1 1)))]\n  )\n)\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(digit? (first num)) (+ (first num) (hex_key (rest num)))]\n \
    \   [else (hex_key (rest num))]))\n", "  (cond [(empty? num) 0]\n        [(equal?\
    \ (first num) 'A) (+ 1 (hex_key (sub1 num)))]\n        [(equal? (first num) 'B)\
    \ (+ 1 (hex_key (sub1 num)))]\n        [(equal? (first num) 'C) (+ 1 (hex_key\
    \ (sub1 num)))]\n        [(equal? (first num) 'D) (+ 1 (hex_key (sub1 num)))]\n\
    \        [(equal? (first num) 'E) (+ 1 (hex_key (sub1 num)))]\n        [(equal?\
    \ (first num) 'F) (+ 1 (hex_key (sub1 num)))]\n        [else (+ 1 (hex_key (sub1\
    \ num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n  \
    \  [else (+ 1 (hex_key (rest num)))]))\n", "  (cond [(empty? num) 0]\n       \
    \ [(= (length num) 1) 1]\n        [(= (length num) 2) 2]\n        [(= (length\
    \ num) 3) 3]\n        [(= (length num) 4) 4]\n        [(= (length num) 5) 5]\n\
    \        [(= (length num) 6) 6]\n        [(= (length num) 7) 7]\n        [(= (length\
    \ num) 8) 8]\n        [(= (length num) 9) 9]\n        [(= (length num) 10) 10]\n\
    \        [(= (length num) 11) 11]\n        [(= (length num) 12) 12]\n        [(=\
    \ (length num) 13) 13]\n        [(= (length num) 14) 14]\n        [(= (length\
    \ num) 15) 15]\n        [(= (length num) 16) 16]\n        [(= (length num) 17)\
    \ 17]\n        [(= (length num) 18) 18]\n        [(= (length num) 19) 19]\n  \
    \      [(= (length num) 20) 20]\n        [(= (length num) 21) 21]\n        [(=\
    \ (length num) 22) 22]\n        [(= (length num) 23) 23]\n        [(= (length\
    \ num) 24) 24]\n        [(= (length num) 25) 25]\n        [(= (length num) 26)\
    \ 26]\n        [(= (length num) 27) 27]\n        [(= (length num) 28) 28]\n  \
    \      [(= (length num) 29) 29]\n        [(= (length num) 30) 30]\n        [(=\
    \ (length num) 31) 31]\n        [(= (length num) 32) 32]\n        [(= (length\
    \ num) 33) 33]\n        [(= (length num) 34) 34]\n        [(= (length num) 35)\
    \ 35]\n        [(= (length num) 36) 36]\n        [(= (length num) 37) 37]\n  \
    \      [(= (length num) 38) 38]\n        [(= (length num) 39) 39]\n        [(=\
    \ (length num) 40) 40]\n        [(= (length num) 41) 41]\n        [(= (length\
    \ num) 42) 42]\n        [(= (length num) 43) 43]\n        [(= (length ", "  (cond\n\
    \    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ (first num) (hex_key (sub1\
    \ num)))]\n    [(equal? (first num) 'B) (+ (first num) (hex_key (sub1 num)))]\n\
    \    [(equal? (first num) 'C) (+ (first num) (hex_key (sub1 num)))]\n    [(equal?\
    \ (first num) 'D) (+ (first num) (hex_key (sub1 num)))]\n    [(equal? (first num)\
    \ 'E) (+ (first num) (hex_key (sub1 num)))]\n    [(equal? (first num) 'F) (+ (first\
    \ num) (hex_key (sub1 num)))]\n    [else (+ (first num) (hex_key (sub1 num)))]\n\
    \  )\n)\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1\
    \ (hex_key (subseq num 1)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (subseq\
    \ num 1)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (subseq num 1)))]\n  \
    \  [(equal? (first num) 'D) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first\
    \ num) 'E) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'F) (+ 1\
    \ (hex_key (subseq num 1)))]\n    [else (+ 1 (hex_key (subseq num 1)))]\n  )\n\
    )\n", "  (cond [(empty? num) 0]\n        [(equal? (first num) 'A) (+ 1 (hex_key\
    \ (rest num)))]\n        [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n\
    \        [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n        [(equal?\
    \ (first num) 'D) (+ 1 (hex_key (rest num)))]\n        [(equal? (first num) 'E)\
    \ (+ 1 (hex_key (rest num)))]\n        [(equal? (first num) 'F) (+ 1 (hex_key\
    \ (rest num)))]\n        [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n  \
    \  [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (subseq num 0\
    \ 1)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (subseq num 0 1)))]\n    [(equal?\
    \ (first num) 'C) (+ 1 (hex_key (subseq num 0 1)))]\n    [(equal? (first num)\
    \ 'D) (+ 1 (hex_key (subseq num 0 1)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\
    \ (subseq num 0 1)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key (subseq num\
    \ 0 1)))]\n    [else (+ 1 (hex_key (subseq num 0 1)))]\n  )\n)\n", "  (cond\n\
    \    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ (hex_key (substring num\
    \ 1 1)) 1)]\n    [(equal? (first num) 'B) (+ (hex_key (substring num 1 1)) 2)]\n\
    \    [(equal? (first num) 'C) (+ (hex_key (substring num 1 1)) 3)]\n    [(equal?\
    \ (first num) 'D) (+ (hex_key (substring num 1 1)) 4)]\n    [(equal? (first num)\
    \ 'E) (+ (hex_key (substring num 1 1)) 5)]\n    [(equal? (first num) 'F) (+ (hex_key\
    \ (substring num 1 1)) 6)]\n    [else (+ (hex_key (substring num 1 1)) 1)]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (char-code (first num)) (first 'A'))\
    \ (+ 1 (hex_key\n                                               (substring (second\
    \ num) 1)))]\n    [(equal? (char-code (first num)) (first 'B')) (+ 1 (hex_key\n\
    \                                               (substring (second num) 1)))]\n\
    \    [(equal? (char-code (first num)) (first 'C')) (+ 1 (hex_key\n           \
    \                                    (substring (second num) 1)))]\n    [(equal?\
    \ (char-code (first num)) (first 'D')) (+ 1 (hex_key\n                       \
    \                        (substring (second num) 1)))]\n    [(equal? (char-code\
    \ (first num)) (first 'E')) (+ 1 (hex_key\n                                  \
    \             (substring (second num) 1)))]\n    [(equal? (char-code (first num))\
    \ (first 'F')) (+ 1 (hex_key\n                                               (substring\
    \ (second num) 1)))]\n    [else (+ 1 (hex_key (substring (second num) 1)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest\
    \ num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key\
    \ (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (char-code\
    \ (car num)) (char #\\A)) 0]\n    [(equal? (char-code (car num)) (char #\\B))\
    \ 1]\n    [(equal? (char-code (car num)) (char #\\C)) 2]\n    [(equal? (char-code\
    \ (car num)) (char #\\D)) 3]\n    [(equal? (char-code (car num)) (char #\\E))\
    \ 4]\n    [(equal? (char-code (car num)) (char #\\F)) 5]\n    [else (+ 1 (hex_key\
    \ (cdr num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num)\
    \ 'A) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\
    \ (subseq num 1)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (subseq num 1)))]\n\
    \    [(equal? (first num) 'D) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first\
    \ num) 'E) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'F) (+ 1\
    \ (hex_key (subseq num 1)))]\n    [else (+ 1 (hex_key (subseq num 1)))]\n  )\n\
    )\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n  \
    \  [else (+ 1 (hex_key (rest num)))]\n  )\n)\n", "  (cond\n    [(empty? num) 0]\n\
    \    [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n",
  "  (cond [(number? num) (hex_key (number->string num))]\n        [(or (string=?\
    \ num \"A\") (string=? num \"B\") (string=? num \"C\") (string=? num \"D\") (string=?\
    \ num \"E\") (string=? num \"F\")) (hex_key (number->string num))]\n        [else\
    \ (hex_key (number->string num))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal?\
    \ (first num) 'A) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'B)\
    \ (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\
    \ (subseq num 1)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (subseq num 1)))]\n\
    \    [(equal? (first num) 'E) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first\
    \ num) 'F) (+ 1 (hex_key (subseq num 1)))]\n    [else (+ 1 (hex_key (subseq num\
    \ 1)))]\n  )\n)\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A)\
    \ (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (rest\
    \ num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'E) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n\
    \    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n\
    \    [(equal? (first num) 'A) (+ (first num) (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'B) (+ (first num) (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'C) (+ (first num) (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+ (first\
    \ num) (hex_key (rest num)))]\n    [(equal? (first num) 'E) (+ (first num) (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'F) (+ (first num) (hex_key (rest num)))]\n\
    \    [else (+ (first num) (hex_key (rest num)))]\n  )\n)\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ (first num) (hex_key (sub1 num)))]\n\
    \    [(equal? (first num) 'B) (+ (first num) (hex_key (sub1 num)))]\n    [(equal?\
    \ (first num) 'C) (+ (first num) (hex_key (sub1 num)))]\n    [(equal? (first num)\
    \ 'D) (+ (first num) (hex_key (sub1 num)))]\n    [(equal? (first num) 'E) (+ (first\
    \ num) (hex_key (sub1 num)))]\n    [(equal? (first num) 'F) (+ (first num) (hex_key\
    \ (sub1 num)))]\n    [else (+ (first num) (hex_key (sub1 num)))]))\n", "  (cond\n\
    \    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key\
    \ (rest num)))]))\n", "  (cond [(empty? num) 0]\n        [(equal? (first num)\
    \ 'A) (+ 1 (hex_key (rest num)))]\n        [(equal? (first num) 'B) (+ 1 (hex_key\
    \ (rest num)))]\n        [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n\
    \        [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n        [(equal?\
    \ (first num) 'E) (+ 1 (hex_key (rest num)))]\n        [(equal? (first num) 'F)\
    \ (+ 1 (hex_key (rest num)))]\n        [else (+ 1 (hex_key (rest num)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(digit-char? (first num)) (+ (first num) (hex_key\
    \ (rest num)))]\n    [else (hex_key (rest num))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (subseq num 1)))]\n    [(equal?\
    \ (first num) 'B) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'C)\
    \ (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\
    \ (subseq num 1)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (subseq num 1)))]\n\
    \    [(equal? (first num) 'F) (+ 1 (hex_key (subseq num 1)))]\n    [else (+ 1\
    \ (hex_key (subseq num 1)))]\n    )\n  )\n", "  (cond\n    [(empty? num) 0]\n\
    \    [(digit-char? num) \n     (if (= (digit-value num) 2)\n         (+ 1 (hex_key\
    \ (substring num 0 (- (length num) 1))))\n         (+ 1 (hex_key (substring num\
    \ 0 (- (length num) 2)))))]\n    [else (+ 1 (hex_key (substring num 0 (- (length\
    \ num) 1))))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A)\
    \ (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (rest\
    \ num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'E) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n\
    \    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n\
    \    [(equal? (first num) 'A) (+ (first num) (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'B) (+ (first num) (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'C) (+ (first num) (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+ (first\
    \ num) (hex_key (rest num)))]\n    [(equal? (first num) 'E) (+ (first num) (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'F) (+ (first num) (hex_key (rest num)))]\n\
    \    [else (+ (first num) (hex_key (rest num)))]\n  )\n)\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (subseq num 1 2)))]\n  \
    \  [(equal? (first num) 'B) (+ 1 (hex_key (subseq num 1 3)))]\n    [(equal? (first\
    \ num) 'C) (+ 1 (hex_key (subseq num 1 4)))]\n    [(equal? (first num) 'D) (+\
    \ 1 (hex_key (subseq num 1 5)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (subseq\
    \ num 1 6)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key (subseq num 1 7)))]\n\
    \    [else (+ 1 (hex_key (subseq num 1 8)))]\n  )\n)\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]\n\
    \  )\n)\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ (first\
    \ num) (hex_key (sub1 num)))]\n    [(equal? (first num) 'B) (+ (first num) (hex_key\
    \ (sub1 num)))]\n    [(equal? (first num) 'C) (+ (first num) (hex_key (sub1 num)))]\n\
    \    [(equal? (first num) 'D) (+ (first num) (hex_key (sub1 num)))]\n    [(equal?\
    \ (first num) 'E) (+ (first num) (hex_key (sub1 num)))]\n    [(equal? (first num)\
    \ 'F) (+ (first num) (hex_key (sub1 num)))]\n    [else (+ (first num) (hex_key\
    \ (sub1 num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num)\
    \ 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\
    \ (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (subseq num 1)))]\n    [(equal?\
    \ (first num) 'B) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'C)\
    \ (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\
    \ (subseq num 1)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (subseq num 1)))]\n\
    \    [(equal? (first num) 'F) (+ 1 (hex_key (subseq num 1)))]\n    [else (+ 1\
    \ (hex_key (subseq num 1)))]\n  )\n)\n", "  (cond\n    [(empty? num) 0]\n    [(equal?\
    \ (first num) 'A) (+ 1 (hex_key (subseq num 1 2)))]\n    [(equal? (first num)\
    \ 'B) (+ 1 (hex_key (subseq num 1 3)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\
    \ (subseq num 1 4)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (subseq num\
    \ 1 5)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (subseq num 1 6)))]\n  \
    \  [(equal? (first num) 'F) (+ 1 (hex_key (subseq num 1 7)))]\n    [else (+ 1\
    \ (hex_key (subseq num 1 8)))]\n  )\n)\n", "  (cond\n    [(empty? num) 0]\n  \
    \  [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'B) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (subseq\
    \ num 1)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (subseq num 1)))]\n  \
    \  [(equal? (first num) 'C) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first\
    \ num) 'D) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'E) (+ 1\
    \ (hex_key (subseq num 1)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key (subseq\
    \ num 1)))]\n    [else (+ 1 (hex_key (subseq num 1)))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ (hex_key (rest num)) 1)]\n    [(equal?\
    \ (first num) 'B) (+ (hex_key (rest num)) 2)]\n    [(equal? (first num) 'C) (+\
    \ (hex_key (rest num)) 3)]\n    [(equal? (first num) 'D) (+ (hex_key (rest num))\
    \ 4)]\n    [(equal? (first num) 'E) (+ (hex_key (rest num)) 5)]\n    [(equal?\
    \ (first num) 'F) (+ (hex_key (rest num)) 6)]\n    [else (+ (hex_key (rest num))\
    \ (hex_key (first num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first\
    \ num) 'A) (+ (first num) (hex_key (sub1 num)))]\n    [(equal? (first num) 'B)\
    \ (+ (first num) (hex_key (sub1 num)))]\n    [(equal? (first num) 'C) (+ (first\
    \ num) (hex_key (sub1 num)))]\n    [(equal? (first num) 'D) (+ (first num) (hex_key\
    \ (sub1 num)))]\n    [(equal? (first num) 'E) (+ (first num) (hex_key (sub1 num)))]\n\
    \    [(equal? (first num) 'F) (+ (first num) (hex_key (sub1 num)))]\n    [else\
    \ (+ (first num) (hex_key (sub1 num)))]))\n", "  (cond\n    [(empty? num) 0]\n\
    \    [(equal? (first num) 'A) (+ 1 (hex_key (sub1 num)))]\n    [(equal? (first\
    \ num) 'B) (+ 1 (hex_key (sub1 num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\
    \ (sub1 num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (sub1 num)))]\n  \
    \  [(equal? (first num) 'E) (+ 1 (hex_key (sub1 num)))]\n    [(equal? (first num)\
    \ 'F) (+ 1 (hex_key (sub1 num)))]\n    [else (+ 1 (hex_key (sub1 num)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest\
    \ num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key\
    \ (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num)\
    \ 'A) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\
    \ (subseq num 1)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (subseq num 1)))]\n\
    \    [(equal? (first num) 'D) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first\
    \ num) 'E) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'F) (+ 1\
    \ (hex_key (subseq num 1)))]\n    [else (+ 1 (hex_key (subseq num 1)))]\n  )\n\
    )\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key\
    \ (subseq num 1)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (subseq num 1)))]\n\
    \    [(equal? (first num) 'C) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first\
    \ num) 'D) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'E) (+ 1\
    \ (hex_key (subseq num 1)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key (subseq\
    \ num 1)))]\n    [else (+ 1 (hex_key (subseq num 1)))]\n  )\n)\n", "  (cond\n\
    \    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (subseq num\
    \ 0 1)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (subseq num 0 1)))]\n  \
    \  [(equal? (first num) 'C) (+ 1 (hex_key (subseq num 0 1)))]\n    [(equal? (first\
    \ num) 'D) (+ 1 (hex_key (subseq num 0 1)))]\n    [(equal? (first num) 'E) (+\
    \ 1 (hex_key (subseq num 0 1)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key (subseq\
    \ num 0 1)))]\n    [else (+ 1 (hex_key (subseq num 0 1)))]\n  )\n)\n", "  (cond\n\
    \    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key\
    \ (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num)\
    \ 'A) (+ (hex_key (substring num 1 2)) 1)]\n    [(equal? (first num) 'B) (+ (hex_key\
    \ (substring num 1 2)) 1)]\n    [(equal? (first num) 'C) (+ (hex_key (substring\
    \ num 1 2)) 1)]\n    [(equal? (first num) 'D) (+ (hex_key (substring num 1 2))\
    \ 1)]\n    [(equal? (first num) 'E) (+ (hex_key (substring num 1 2)) 1)]\n   \
    \ [(equal? (first num) 'F) (+ (hex_key (substring num 1 2)) 1)]\n    [else (+\
    \ (hex_key (substring num 1 2)) 1)]))\n", "  (cond\n    [(empty? num) 0]\n   \
    \ [(equal? (first num) 'A) (+ 1 (hex_key (subseq num 1 2)))]\n    [(equal? (first\
    \ num) 'B) (+ 1 (hex_key (subseq num 1 3)))]\n    [(equal? (first num) 'C) (+\
    \ 1 (hex_key (subseq num 1 4)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (subseq\
    \ num 1 5)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (subseq num 1 6)))]\n\
    \    [(equal? (first num) 'F) (+ 1 (hex_key (subseq num 1 7)))]\n    [else (+\
    \ 1 (hex_key (subseq num 1 8)))]))\n", "  (cond [(number? num) (hex_key (number->string\
    \ num))]\n        [(or (string=? (char->string #\\A) (char->string num)) \n  \
    \           (string=? (char->string #\\B) (char->string num))) \n         (hex_key\
    \ (number->string num))]\n        [(string=? (char->string #\\0) (char->string\
    \ num)) \n         (hex_key (number->string num))]\n        [(string=? (char->string\
    \ #\\1) (char->string num)) \n         (hex_key (number->string num))]\n     \
    \   [(string=? (char->string #\\2) (char->string num)) \n         (hex_key (number->string\
    \ num))]\n        [(string=? (char->string #\\3) (char->string num)) \n      \
    \   (hex_key (number->string num))]\n        [(string=? (char->string #\\4) (char->string\
    \ num)) \n         (hex_key (number->string num))]\n        [(string=? (char->string\
    \ #\\5) (char->string num)) \n         (hex_key (number->string num))]\n     \
    \   [(string=? (char->string #\\6) (char->string num)) \n         (hex_key (number->string\
    \ num))]\n        [(string=? (char->string #\\7) (char->string num)) \n      \
    \   (hex_key (number->string num))]\n        [(string=? (char->string #\\8) (char->string\
    \ num)) \n         (hex_key (number->string num))]\n        [(string=? (char->string\
    \ #\\9) (char->string num)) \n         (hex_key (number->string num))]\n     \
    \   [(string=? (char->string #\\A) (char->string num)) \n         (hex_key (number->string\
    \ num))]\n        [(string=? (char->string #\\B) (char->string num)) \n      \
    \   (hex_key (number->string num))]\n        [(string=? (char->string #\\C) (char->string\
    \ num)) \n         (hex_key (number->string num))]\n        [(string=? (char->string\
    \ #\\D) (char->string num)) \n         (hex_key (number->string num))]\n     \
    \   [(string=? (char->string #\\E) (char->string num)) \n         (hex_key (number->string\
    \ num))]\n        [(string=? (char->string #\\F) (char->string num)) \n      \
    \   (hex_key (number->string num))]\n        [(string=? (char->string #\\a) (char->string\
    \ num)) \n         (hex_key (number->", "  (cond\n    [(empty? num) 0]\n    [(equal?\
    \ (first num) 'A) (+ 1 (hex_key (subseq num 1 2)))]\n    [(equal? (first num)\
    \ 'B) (+ 1 (hex_key (subseq num 1 3)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\
    \ (subseq num 1 4)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (subseq num\
    \ 1 5)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (subseq num 1 6)))]\n  \
    \  [(equal? (first num) 'F) (+ 1 (hex_key (subseq num 1 7)))]\n    [else (+ 1\
    \ (hex_key (subseq num 1 8)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal?\
    \ (char-code (car num)) #\\A) (+ 1 (hex_key\n                                \
    \       (substring (num 2) 1)))]\n    [(equal? (char-code (car num)) #\\B) (+\
    \ 1 (hex_key\n                                       (substring (num 2) 1)))]\n\
    \    [(equal? (char-code (car num)) #\\C) (+ 1 (hex_key\n                    \
    \                   (substring (num 2) 1)))]\n    [(equal? (char-code (car num))\
    \ #\\D) (+ 1 (hex_key\n                                       (substring (num\
    \ 2) 1)))]\n    [(equal? (char-code (car num)) #\\E) (+ 1 (hex_key\n         \
    \                              (substring (num 2) 1)))]\n    [(equal? (char-code\
    \ (car num)) #\\F) (+ 1 (hex_key\n                                       (substring\
    \ (num 2) 1)))]\n    [else (+ 1 (hex_key (substring (num 2) 1)))]))\n", "  (cond\n\
    \    [(empty? num) 0]\n    [(digit-char? (first num)) (+ 1 (hex_key (rest num)))]\n\
    \    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n\
    \    [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (sub1\
    \ num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (sub1 num)))]\n    [(equal?\
    \ (first num) 'C) (+ 1 (hex_key (sub1 num)))]\n    [(equal? (first num) 'D) (+\
    \ 1 (hex_key (sub1 num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (sub1 num)))]\n\
    \    [(equal? (first num) 'F) (+ 1 (hex_key (sub1 num)))]\n    [else (+ 1 (hex_key\
    \ (sub1 num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num)\
    \ 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\
    \ (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (subseq num 1 2)))]\n  \
    \  [(equal? (first num) 'B) (+ 1 (hex_key (subseq num 1 3)))]\n    [(equal? (first\
    \ num) 'C) (+ 1 (hex_key (subseq num 1 4)))]\n    [(equal? (first num) 'D) (+\
    \ 1 (hex_key (subseq num 1 5)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (subseq\
    \ num 1 6)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key (subseq num 1 7)))]\n\
    \    [else (+ 1 (hex_key (subseq num 1 8)))]\n  )\n)\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (subseq num 1)))]\n    [(equal?\
    \ (first num) 'B) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'C)\
    \ (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\
    \ (subseq num 1)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (subseq num 1)))]\n\
    \    [(equal? (first num) 'F) (+ 1 (hex_key (subseq num 1)))]\n    [else (+ 1\
    \ (hex_key (subseq num 1)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal?\
    \ (first num) 'A) (+ (first num) (hex_key (subseq num 1 1)))]\n    [(equal? (first\
    \ num) 'B) (+ (first num) (hex_key (subseq num 1 1)))]\n    [(equal? (first num)\
    \ 'C) (+ (first num) (hex_key (subseq num 1 1)))]\n    [(equal? (first num) 'D)\
    \ (+ (first num) (hex_key (subseq num 1 1)))]\n    [(equal? (first num) 'E) (+\
    \ (first num) (hex_key (subseq num 1 1)))]\n    [(equal? (first num) 'F) (+ (first\
    \ num) (hex_key (subseq num 1 1)))]\n    [else (+ (first num) (hex_key (subseq\
    \ num 1 1)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A)\
    \ (+ (first num) (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+ (first\
    \ num) (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+ (first num) (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'D) (+ (first num) (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'E) (+ (first num) (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'F) (+ (first num) (hex_key (rest num)))]\n    [else (+ (first num)\
    \ (hex_key (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first\
    \ num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\
    \ (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (char-code (car num)) #\\A) (+ 1 (hex_key\
    \ (cdr num)))]\n    [(equal? (char-code (car num)) #\\B) (+ 1 (hex_key (cdr num)))]\n\
    \    [(equal? (char-code (car num)) #\\C) (+ 1 (hex_key (cdr num)))]\n    [(equal?\
    \ (char-code (car num)) #\\D) (+ 1 (hex_key (cdr num)))]\n    [(equal? (char-code\
    \ (car num)) #\\E) (+ 1 (hex_key (cdr num)))]\n    [(equal? (char-code (car num))\
    \ #\\F) (+ 1 (hex_key (cdr num)))]\n    [else (+ 1 (hex_key (cdr num)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest\
    \ num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key\
    \ (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num)\
    \ 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\
    \ (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (subseq num 1 2)))]\n  \
    \  [(equal? (first num) 'B) (+ 1 (hex_key (subseq num 1 3)))]\n    [(equal? (first\
    \ num) 'C) (+ 1 (hex_key (subseq num 1 4)))]\n    [(equal? (first num) 'D) (+\
    \ 1 (hex_key (subseq num 1 5)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (subseq\
    \ num 1 6)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key (subseq num 1 7)))]\n\
    \    [else (+ 1 (hex_key (subseq num 1 8)))]\n  )\n)\n", "  (cond [(empty? num)\
    \ 0]\n        [(equal? (first num) 'A) (+ 1 (hex_key (sub1 num)))]\n        [(equal?\
    \ (first num) 'B) (+ 1 (hex_key (sub1 num)))]\n        [(equal? (first num) 'C)\
    \ (+ 1 (hex_key (sub1 num)))]\n        [(equal? (first num) 'D) (+ 1 (hex_key\
    \ (sub1 num)))]\n        [(equal? (first num) 'E) (+ 1 (hex_key (sub1 num)))]\n\
    \        [(equal? (first num) 'F) (+ 1 (hex_key (sub1 num)))]\n        [else (+\
    \ 1 (hex_key (sub1 num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal?\
    \ (first num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\
    \ (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ (first num) (hex_key (sub1 num)))]\n\
    \    [(equal? (first num) 'B) (+ (first num) (hex_key (sub1 num)))]\n    [(equal?\
    \ (first num) 'C) (+ (first num) (hex_key (sub1 num)))]\n    [(equal? (first num)\
    \ 'D) (+ (first num) (hex_key (sub1 num)))]\n    [(equal? (first num) 'E) (+ (first\
    \ num) (hex_key (sub1 num)))]\n    [(equal? (first num) 'F) (+ (first num) (hex_key\
    \ (sub1 num)))]\n    [else (+ (first num) (hex_key (sub1 num)))]))\n", "  (cond\n\
    \    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (subseq num\
    \ 1 2)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (subseq num 1 3)))]\n  \
    \  [(equal? (first num) 'C) (+ 1 (hex_key (subseq num 1 4)))]\n    [(equal? (first\
    \ num) 'D) (+ 1 (hex_key (subseq num 1 5)))]\n    [(equal? (first num) 'E) (+\
    \ 1 (hex_key (subseq num 1 6)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key (subseq\
    \ num 1 7)))]\n    [else (+ 1 (hex_key (subseq num 1 8)))]\n  )\n)\n", "  (cond\
    \ [(number? num) num]\n        [else (cond [(= (length num) 1) (hex_key (substring\
    \ num 0 1))]\n                  [(= (length num) 2) (hex_key (substring num 0\
    \ 1))]\n                  [(= (length num) 3) (hex_key (substring num 0 1))]\n\
    \                  [(= (length num) 4) (hex_key (substring num 0 1))]\n      \
    \            [(= (length num) 5) (hex_key (substring num 0 1))]\n            \
    \      [(= (length num) 6) (hex_key (substring num 0 1))]\n                  [(=\
    \ (length num) 7) (hex_key (substring num 0 1))]\n                  [(= (length\
    \ num) 8) (hex_key (substring num 0 1))]\n                  [(= (length num) 9)\
    \ (hex_key (substring num 0 1))]\n                  [(= (length num) 10) (hex_key\
    \ (substring num 0 1))]\n                  [(= (length num) 11) (hex_key (substring\
    \ num 0 1))]\n                  [(= (length num) 12) (hex_key (substring num 0\
    \ 1))]\n                  [(= (length num) 13) (hex_key (substring num 0 1))]\n\
    \                  [(= (length num) 14) (hex_key (substring num 0 1))]\n     \
    \             [(= (length num) 15) (hex_key (substring num 0 1))]\n          \
    \        [(= (length num) 16) (hex_key (substring num 0 1))]\n               \
    \   [(= (length num) 17) (hex_key (substring num 0 1))]\n                  [(=\
    \ (length num) 18) (hex_key (substring num 0 1))]\n                  [(= (length\
    \ num) 19) (hex_key (substring num 0 1))]\n                  [(= (length num)\
    \ 20) (hex_key (substring num 0 1))]\n                  [(= (length num) 21) (hex_key\
    \ (substring num 0 1))]\n                  [(= (length num) 22) (hex_key (substring\
    \ num 0 1))]\n                  [(= (length num) 23) (hex_key (substring num 0\
    \ 1))]\n                  [(= (length num) 24) (hex_key (substring num 0 1))]\n\
    \                  [(= (length num) 25) (hex_key (substring num 0 1))]\n     \
    \             [(= (length num) 26) (hex_key (substring num 0 1))]\n          \
    \        [(= ", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n  \
    \  [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n  \
    \  [(equal? (first num) 'A) (+ (first num) (hex_key (sub1 num)))]\n    [(equal?\
    \ (first num) 'B) (+ (first num) (hex_key (sub1 num)))]\n    [(equal? (first num)\
    \ 'C) (+ (first num) (hex_key (sub1 num)))]\n    [(equal? (first num) 'D) (+ (first\
    \ num) (hex_key (sub1 num)))]\n    [(equal? (first num) 'E) (+ (first num) (hex_key\
    \ (sub1 num)))]\n    [(equal? (first num) 'F) (+ (first num) (hex_key (sub1 num)))]\n\
    \    [else (+ (first num) (hex_key (sub1 num)))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (char-code (car num)) #\\A) (+ 1 (hex_key (cdr num)))]\n\
    \    [else (+ 1 (hex_key (cdr num)))]))\n", "  (cond [(empty? num) 0]\n      \
    \  [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n        [(equal? (first\
    \ num) 'B) (+ 1 (hex_key (rest num)))]\n        [(equal? (first num) 'C) (+ 1\
    \ (hex_key (rest num)))]\n        [(equal? (first num) 'D) (+ 1 (hex_key (rest\
    \ num)))]\n        [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n    \
    \    [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n        [else (+ 1\
    \ (hex_key (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first\
    \ num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\
    \ (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (subseq num 1 1)))]\n  \
    \  [(equal? (first num) 'B) (+ 1 (hex_key (subseq num 1 1)))]\n    [(equal? (first\
    \ num) 'C) (+ 1 (hex_key (subseq num 1 1)))]\n    [(equal? (first num) 'D) (+\
    \ 1 (hex_key (subseq num 1 1)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (subseq\
    \ num 1 1)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key (subseq num 1 1)))]\n\
    \    [else (+ 1 (hex_key (subseq num 1 1)))]\n  )\n)\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (char-code (first num)) (digit-char (char-code (first\
    \ num))))\n     (+ 1 (hex_key (rest num)))]\n    [else (hex_key (rest num))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (subseq\
    \ num 0 1)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (subseq num 0 1)))]\n\
    \    [(equal? (first num) 'C) (+ 1 (hex_key (subseq num 0 1)))]\n    [(equal?\
    \ (first num) 'D) (+ 1 (hex_key (subseq num 0 1)))]\n    [(equal? (first num)\
    \ 'E) (+ 1 (hex_key (subseq num 0 1)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\
    \ (subseq num 0 1)))]\n    [else (+ 1 (hex_key (subseq num 0 1)))]\n  )\n)\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ (first num) (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'B) (+ (first num) (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'C) (+ (first num) (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'D) (+ (first num) (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'E) (+ (first num) (hex_key (rest num)))]\n    [(equal? (first num) 'F) (+ (first\
    \ num) (hex_key (rest num)))]\n    [else (+ (first num) (hex_key (rest num)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (substring\
    \ num 1 1)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (substring num 1 1)))]\n\
    \    [(equal? (first num) 'C) (+ 1 (hex_key (substring num 1 1)))]\n    [(equal?\
    \ (first num) 'D) (+ 1 (hex_key (substring num 1 1)))]\n    [(equal? (first num)\
    \ 'E) (+ 1 (hex_key (substring num 1 1)))]\n    [(equal? (first num) 'F) (+ 1\
    \ (hex_key (substring num 1 1)))]\n    [else (+ 1 (hex_key (substring num 1 1)))]\n\
    \  )\n)\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1\
    \ (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n  \
    \  [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n  \
    \  [(equal? (first num) 'A) (+ 1 (hex_key (subseq num 1 2)))]\n    [(equal? (first\
    \ num) 'B) (+ 1 (hex_key (subseq num 1 3)))]\n    [(equal? (first num) 'C) (+\
    \ 1 (hex_key (subseq num 1 4)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (subseq\
    \ num 1 5)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (subseq num 1 6)))]\n\
    \    [(equal? (first num) 'F) (+ 1 (hex_key (subseq num 1 7)))]\n    [else (+\
    \ 1 (hex_key (subseq num 1 8)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal?\
    \ (first num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\
    \ (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (subseq num 1 2)))]\n  \
    \  [(equal? (first num) 'B) (+ 1 (hex_key (subseq num 1 3)))]\n    [(equal? (first\
    \ num) 'C) (+ 1 (hex_key (subseq num 1 4)))]\n    [(equal? (first num) 'D) (+\
    \ 1 (hex_key (subseq num 1 5)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (subseq\
    \ num 1 6)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key (subseq num 1 7)))]\n\
    \    [else (+ 1 (hex_key (subseq num 1 8)))]))\n", "  (cond [(null? num) 0]\n\
    \        [(= (length num) 1) (length num)]\n        [(= (length num) 2) (length\
    \ num)]\n        [(= (length num) 3) (length num)]\n        [(= (length num) 4)\
    \ (length num)]\n        [(= (length num) 5) (length num)]\n        [(= (length\
    \ num) 6) (length num)]\n        [(= (length num) 7) (length num)]\n        [(=\
    \ (length num) 8) (length num)]\n        [(= (length num) 9) (length num)]\n \
    \       [(= (length num) 10) (length num)]\n        [(= (length num) 11) (length\
    \ num)]\n        [(= (length num) 12) (length num)]\n        [(= (length num)\
    \ 13) (length num)]\n        [(= (length num) 14) (length num)]\n        [(= (length\
    \ num) 15) (length num)]\n        [(= (length num) 16) (length num)]\n       \
    \ [(= (length num) 17) (length num)]\n        [(= (length num) 18) (length num)]\n\
    \        [(= (length num) 19) (length num)]\n        [(= (length num) 20) (length\
    \ num)]\n        [(= (length num) 21) (length num)]\n        [(= (length num)\
    \ 22) (length num)]\n        [(= (length num) 23) (length num)]\n        [(= (length\
    \ num) 24) (length num)]\n        [(= (length num) 25) (length num)]\n       \
    \ [(= (length num) 26) (length num)]\n        [(= (length num) 27) (length num)]\n\
    \        [(= (length num) 28) (length num)]\n        [(= (length num) 29) (length\
    \ num)]\n        [(= (length num) 30) (length num)]\n        [(= (length num)\
    \ 31) (length num)]\n        [(= (length num) 32) (length num)]\n        [(= (length\
    \ num) 33) (length num)]\n        [(= (length num) 34) (length num)]\n       \
    \ [(= (length num) 35) (length num)]\n        [(= (length num) 36) (length num)]\n\
    \        [(= (length num) 37) (length num)]\n        [(= (length num) 38) (length\
    \ num)]\n        [(= (length num) ", "  (cond\n    [(empty? num) 0]\n    [(equal?\
    \ (first num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\
    \ (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ (first num) 1)]\n    [(equal? (first\
    \ num) 'B) (+ (first num) 2)]\n    [(equal? (first num) 'C) (+ (first num) 3)]\n\
    \    [(equal? (first num) 'D) (+ (first num) 4)]\n    [(equal? (first num) 'E)\
    \ (+ (first num) 5)]\n    [(equal? (first num) 'F) (+ (first num) 6)]\n    [else\
    \ (+ (first num) (hex_key (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n\
    \    [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]\n  )\n\
    )\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (char-code (car num)) 'A) (+\
    \ 1 (hex_key\n                                     (substring (num 1) 1)))]\n\
    \    [(equal? (char-code (car num)) 'B) (+ 1 (hex_key\n                      \
    \               (substring (num 1) 1)))]\n    [(equal? (char-code (car num)) 'C)\
    \ (+ 1 (hex_key\n                                     (substring (num 1) 1)))]\n\
    \    [(equal? (char-code (car num)) 'D) (+ 1 (hex_key\n                      \
    \               (substring (num 1) 1)))]\n    [(equal? (char-code (car num)) 'E)\
    \ (+ 1 (hex_key\n                                     (substring (num 1) 1)))]\n\
    \    [(equal? (char-code (car num)) 'F) (+ 1 (hex_key\n                      \
    \               (substring (num 1) 1)))]\n    [else (+ 1 (hex_key (substring (num\
    \ 1) 1)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A)\
    \ (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (rest\
    \ num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'E) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n\
    \    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n\
    \    [(equal? (first num) 'A) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first\
    \ num) 'B) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'C) (+ 1\
    \ (hex_key (subseq num 1)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (subseq\
    \ num 1)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (subseq num 1)))]\n  \
    \  [(equal? (first num) 'F) (+ 1 (hex_key (subseq num 1)))]\n    [else (+ 1 (hex_key\
    \ (subseq num 1)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first\
    \ num) 'A) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'B) (+ 1\
    \ (hex_key (subseq num 1)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (subseq\
    \ num 1)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (subseq num 1)))]\n  \
    \  [(equal? (first num) 'E) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first\
    \ num) 'F) (+ 1 (hex_key (subseq num 1)))]\n    [else (+ 1 (hex_key (subseq num\
    \ 1)))]\n  )\n)\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A)\
    \ (+ 1 (hex_key (subseq num 1 1)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\
    \ (subseq num 1 1)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (subseq num\
    \ 1 1)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (subseq num 1 1)))]\n  \
    \  [(equal? (first num) 'E) (+ 1 (hex_key (subseq num 1 1)))]\n    [(equal? (first\
    \ num) 'F) (+ 1 (hex_key (subseq num 1 1)))]\n    [else (+ 1 (hex_key (subseq\
    \ num 1 1)))]\n  )\n)\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first\
    \ num) 'A) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'B) (+ 1\
    \ (hex_key (subseq num 1)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (subseq\
    \ num 1)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (subseq num 1)))]\n  \
    \  [(equal? (first num) 'E) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first\
    \ num) 'F) (+ 1 (hex_key (subseq num 1)))]\n    [else (+ 1 (hex_key (subseq num\
    \ 1)))]\n  )\n)\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A)\
    \ (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (rest\
    \ num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'E) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n\
    \    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n\
    \    [(equal? (first num) 'A) (+ (hex_key (rest num)) 1)]\n    [(equal? (first\
    \ num) 'B) (+ (hex_key (rest num)) 2)]\n    [(equal? (first num) 'C) (+ (hex_key\
    \ (rest num)) 3)]\n    [(equal? (first num) 'D) (+ (hex_key (rest num)) 4)]\n\
    \    [(equal? (first num) 'E) (+ (hex_key (rest num)) 5)]\n    [(equal? (first\
    \ num) 'F) (+ (hex_key (rest num)) 6)]\n    [else (+ (hex_key (rest num)) (hex_key\
    \ (first num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num)\
    \ 'A) (+ 1 (hex_key (sub1 num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\
    \ (sub1 num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (sub1 num)))]\n  \
    \  [(equal? (first num) 'D) (+ 1 (hex_key (sub1 num)))]\n    [(equal? (first num)\
    \ 'E) (+ 1 (hex_key (sub1 num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\
    \ (sub1 num)))]\n    [else (+ 1 (hex_key (sub1 num)))]\n  )\n)\n", "  (cond\n\
    \    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (sub1 num)))]\n\
    \    [(equal? (first num) 'B) (+ 1 (hex_key (sub1 num)))]\n    [(equal? (first\
    \ num) 'C) (+ 1 (hex_key (sub1 num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\
    \ (sub1 num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (sub1 num)))]\n  \
    \  [(equal? (first num) 'F) (+ 1 (hex_key (sub1 num)))]\n    [else (+ 1 (hex_key\
    \ (sub1 num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (char-code\
    \ (car num)) #\\A) (+ 1 (hex_key (cdr num)))]\n    [else (+ 1 (hex_key (cdr num)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest\
    \ num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key\
    \ (rest num)))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
