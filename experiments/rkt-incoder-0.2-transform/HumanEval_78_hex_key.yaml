name: HumanEval_78_hex_key
language: rkt
prompt: "#lang racket\n\n;; You have been tasked to write a function that receives\
  \ \n;; a hexadecimal number as a string and counts the number of hexadecimal \n\
  ;; digits that are primes (prime number, or a prime, is a natural number \n;; greater\
  \ than 1 that is not a product of two smaller natural numbers).\n;; Hexadecimal\
  \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n;; Prime numbers are\
  \ 2, 3, 5, 7, 11, 13, 17,...\n;; So you have to determine a number of the following\
  \ digits: 2, 3, 5, 7, \n;; B (=decimal 11), D (=decimal 13).\n;; Note: you may assume\
  \ the input is always correct or empty string, \n;; and symbols A,B,C,D,E,F are\
  \ always uppercase.\n;; Examples:\n;; >>> (hex_key \"AB\")\n;; 1\n;; >>> (hex_key\
  \ \"1077E\")\n;; 2\n;; >>> (hex_key \"ABED1A33\")\n;; 4\n;; >>> (hex_key \"123456789ABCDEF0\"\
  )\n;; 6\n;; >>> (hex_key \"2020\")\n;; 2\n(define (hex_key num)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate hex_key))\n\
  \    (check-equal? (candidate \"AB\") 1)\n    (check-equal? (candidate \"1077E\"\
  ) 2)\n    (check-equal? (candidate \"ABED1A33\") 4)\n    (check-equal? (candidate\
  \ \"2020\") 2)\n    (check-equal? (candidate \"123456789ABCDEF0\") 6)\n    (check-equal?\
  \ (candidate \"112233445566778899AABBCCDDEEFF00\") 12)\n))\n\n(test-humaneval)"
completions: ["  (cond [(empty? num) 0]\n        [(equal? (first num) 'A) (+ 1 (hex_key\
    \ (subseq num 1 1)))]\n        [(equal? (first num) 'B) (+ 1 (hex_key (subseq\
    \ num 1 1)))]\n        [(equal? (first num) 'C) (+ 1 (hex_key (subseq num 1 1)))]\n\
    \        [(equal? (first num) 'D) (+ 1 (hex_key (subseq num 1 1)))]\n        [(equal?\
    \ (first num) 'E) (+ 1 (hex_key (subseq num 1 1)))]\n        [(equal? (first num)\
    \ 'F) (+ 1 (hex_key (subseq num 1 1)))]\n        [else (+ 1 (hex_key (subseq num\
    \ 1 1)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+\
    \ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (subseq\
    \ num 1)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (subseq num 1)))]\n  \
    \  [(equal? (first num) 'D) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first\
    \ num) 'E) (+ 1 (hex_key (subseq num 1)))]\n    [(equal? (first num) 'F) (+ 1\
    \ (hex_key (subseq num 1)))]\n    [else (+ 1 (hex_key (subseq num 1)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ (first num) (hex_key\
    \ (subseq num 1)))]\n    [(equal? (first num) 'B) (+ (first num) (hex_key (subseq\
    \ num 1)))]\n    [(equal? (first num) 'C) (+ (first num) (hex_key (subseq num\
    \ 1)))]\n    [(equal? (first num) 'D) (+ (first num) (hex_key (subseq num 1)))]\n\
    \    [(equal? (first num) 'E) (+ (first num) (hex_key (subseq num 1)))]\n    [(equal?\
    \ (first num) 'F) (+ (first num) (hex_key (subseq num 1)))]\n    [else (+ (first\
    \ num) (hex_key (subseq num 1)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal?\
    \ (first num) 'A) (+ (first num) (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'B) (+ (first num) (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+ (first\
    \ num) (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+ (first num) (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'E) (+ (first num) (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'F) (+ (first num) (hex_key (rest num)))]\n    [else\
    \ (+ (first num) (hex_key (rest num)))]\n  )\n)\n", "  (cond\n    [(empty? num)\
    \ 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest\
    \ num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key\
    \ (rest num)))]\n  )\n)\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first\
    \ num) 'A) (+ (hex_key (subseq num 1 2)) 1)]\n    [(equal? (first num) 'B) (+\
    \ (hex_key (subseq num 1 2)) 1)]\n    [(equal? (first num) 'C) (+ (hex_key (subseq\
    \ num 1 2)) 1)]\n    [(equal? (first num) 'D) (+ (hex_key (subseq num 1 2)) 1)]\n\
    \    [(equal? (first num) 'E) (+ (hex_key (subseq num 1 2)) 1)]\n    [(equal?\
    \ (first num) 'F) (+ (hex_key (subseq num 1 2)) 1)]\n    [else (+ (hex_key (subseq\
    \ num 1 2)) (hex_key (subseq num 3 4)))]))\n", "  (cond\n    [(empty? num) 0]\n\
    \    [(equal? (first num) 'A) (+ 1 (hex_key (subseq num 1 1)))]\n    [(equal?\
    \ (first num) 'B) (+ 1 (hex_key (subseq num 1 1)))]\n    [(equal? (first num)\
    \ 'C) (+ 1 (hex_key (subseq num 1 1)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\
    \ (subseq num 1 1)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (subseq num\
    \ 1 1)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key (subseq num 1 1)))]\n  \
    \  [else (+ 1 (hex_key (subseq num 1 1)))]\n  )\n)\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ (hex_key (rest num)) (hex_key (rest\
    \ num)))]\n    [(equal? (first num) 'B) (+ (hex_key (rest num)) (hex_key (rest\
    \ num)))]\n    [(equal? (first num) 'C) (+ (hex_key (rest num)) (hex_key (rest\
    \ num)))]\n    [(equal? (first num) 'D) (+ (hex_key (rest num)) (hex_key (rest\
    \ num)))]\n    [(equal? (first num) 'E) (+ (hex_key (rest num)) (hex_key (rest\
    \ num)))]\n    [(equal? (first num) 'F) (+ (hex_key (rest num)) (hex_key (rest\
    \ num)))]\n    [else (+ (hex_key (rest num)) (hex_key (rest num)))]\n  )\n)\n",
  "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest\
    \ num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key\
    \ (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num)\
    \ 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key\
    \ (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty?\
    \ num) 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal?\
    \ (first num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]\n\
    \  )\n)\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+ 1\
    \ (hex_key (subseq num 1 2)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (subseq\
    \ num 1 3)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key (subseq num 1 4)))]\n\
    \    [(equal? (first num) 'D) (+ 1 (hex_key (subseq num 1 5)))]\n    [(equal?\
    \ (first num) 'E) (+ 1 (hex_key (subseq num 1 6)))]\n    [(equal? (first num)\
    \ 'F) (+ 1 (hex_key (subseq num 1 7)))]\n    [else (+ 1 (hex_key (subseq num 1\
    \ 8)))]))\n", "  (cond\n    [(empty? num) 0]\n    [(equal? (first num) 'A) (+\
    \ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n\
    \    [(equal? (first num) 'C) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'D) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n  \
    \  [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n  \
    \  [(equal? (char-code (first num)) (char #\\A)) 0]\n    [(equal? (char-code (first\
    \ num)) (char #\\B)) 1]\n    [(equal? (char-code (first num)) (char #\\C)) 2]\n\
    \    [(equal? (char-code (first num)) (char #\\D)) 3]\n    [(equal? (char-code\
    \ (first num)) (char #\\E)) 4]\n    [(equal? (char-code (first num)) (char #\\\
    F)) 5]\n    [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty? num)\
    \ 0]\n    [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n    [(equal? (first\
    \ num) 'B) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num) 'C) (+ 1 (hex_key\
    \ (rest num)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key (rest num)))]\n  \
    \  [(equal? (first num) 'E) (+ 1 (hex_key (rest num)))]\n    [(equal? (first num)\
    \ 'F) (+ 1 (hex_key (rest num)))]\n    [else (+ 1 (hex_key (rest num)))]))\n",
  "  (cond [(string=? (string-ref num 0) \"A\") 2]\n        [(string=? (string-ref\
    \ num 0) \"B\") 3]\n        [(string=? (string-ref num 0) \"C\") 4]\n        [(string=?\
    \ (string-ref num 0) \"D\") 5]\n        [(string=? (string-ref num 0) \"E\") 6]\n\
    \        [(string=? (string-ref num 0) \"F\") 7]\n        [(string=? (string-ref\
    \ num 0) \"0\") 8]\n        [(string=? (string-ref num 0) \"1\") 9]\n        [(string=?\
    \ (string-ref num 0) \"2\") 10]\n        [(string=? (string-ref num 0) \"3\")\
    \ 11]\n        [(string=? (string-ref num 0) \"4\") 12]\n        [(string=? (string-ref\
    \ num 0) \"5\") 13]\n        [(string=? (string-ref num 0) \"6\") 14]\n      \
    \  [(string=? (string-ref num 0) \"7\") 15]\n        [(string=? (string-ref num\
    \ 0) \"8\") 16]\n        [(string=? (string-ref num 0) \"9\") 17]\n        [(string=?\
    \ (string-ref num 0) \"a\") 18]\n        [(string=? (string-ref num 0) \"b\")\
    \ 19]\n        [(string=? (string-ref num 0) \"c\") 20]\n        [(string=? (string-ref\
    \ num 0) \"d\") 21]\n        [(string=? (string-ref num 0) \"e\") 22]\n      \
    \  [(string=? (string-ref num 0) \"f\") 23]\n        [(string=? (string-ref num\
    \ 0) \"0\") 24]\n        [(string=? (string-ref num 0) \"1\") 25]\n        [(string=?\
    \ (string-ref num 0) \"2\") 26]\n        [(string=? (string-ref num 0) \"3\")\
    \ 27]\n        [(string=? (string-ref num 0) \"4\") 28]\n        [(string=? (string-ref\
    \ num 0) \"5\") 29]\n        [(string=? (string-ref num 0) \"6\") 30]\n      \
    \  [(string=? (string-ref num 0) \"7\") 31]\n        [(string=? (string-ref num\
    \ 0) \"8\") 32]\n        [(string=? (string-ref num 0) \"9\") 33]\n        [(string=?\
    \ (string-ref num 0) \"A\") 34]\n        [(string=? (string-ref num 0) \"B\")\
    \ 35]\n        [(string=? (string-ref num 0) \"C\") 36]\n        [(string=? (string-ref\
    \ num 0) \"D\") 37]\n        [(string=? (string-ref num 0) \"E\") 38]\n", "  (cond\
    \ [(empty? num) 0]\n        [(equal? (first num) 'A) (+ 1 (hex_key (rest num)))]\n\
    \        [(equal? (first num) 'B) (+ 1 (hex_key (rest num)))]\n        [(equal?\
    \ (first num) 'C) (+ 1 (hex_key (rest num)))]\n        [(equal? (first num) 'D)\
    \ (+ 1 (hex_key (rest num)))]\n        [(equal? (first num) 'E) (+ 1 (hex_key\
    \ (rest num)))]\n        [(equal? (first num) 'F) (+ 1 (hex_key (rest num)))]\n\
    \        [else (+ 1 (hex_key (rest num)))]))\n", "  (cond\n    [(empty? num) 0]\n\
    \    [(equal? (first num) 'A) (+ 1 (hex_key (subseq num 1 2)))]\n    [(equal?\
    \ (first num) 'B) (+ 1 (hex_key (subseq num 1 3)))]\n    [(equal? (first num)\
    \ 'C) (+ 1 (hex_key (subseq num 1 4)))]\n    [(equal? (first num) 'D) (+ 1 (hex_key\
    \ (subseq num 1 5)))]\n    [(equal? (first num) 'E) (+ 1 (hex_key (subseq num\
    \ 1 6)))]\n    [(equal? (first num) 'F) (+ 1 (hex_key (subseq num 1 7)))]\n  \
    \  [else (+ 1 (hex_key (subseq num 1 8)))]))\n", "  (cond\n    [(empty? num) 0]\n\
    \    [(equal? (char-code (car num)) (digit-char (char-code (car num))))\n    \
    \ (+ 1 (hex_key (rest num)))]\n    [else (hex_key (rest num))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
