name: HumanEval_150_x_or_y
language: rkt
prompt: "#lang racket\n\n;; A simple program which should return the value of x if\
  \ n is \n;; a prime number and should return the value of y otherwise.\n;; Examples:\n\
  ;; >>> (x_or_y 7 34 12)\n;; 34\n;; >>> (x_or_y 15 8 5)\n;; 5\n(define (x_or_y n\
  \ x y)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate x_or_y))\n\
  \    (check-equal? (candidate 7 34 12) 34)\n    (check-equal? (candidate 15 8 5)\
  \ 5)\n    (check-equal? (candidate 3 33 5212) 33)\n    (check-equal? (candidate\
  \ 1259 3 52) 3)\n    (check-equal? (candidate 7919 -1 12) -1)\n    (check-equal?\
  \ (candidate 3609 1245 583) 583)\n    (check-equal? (candidate 91 56 129) 129)\n\
  \    (check-equal? (candidate 6 34 1234) 1234)\n    (check-equal? (candidate 1 2\
  \ 0) 0)\n    (check-equal? (candidate 2 2 0) 2)\n))\n\n(test-humaneval)"
completions: ["  (cond ((= n 1) x)\n        ((= (mod n 2) 0) y)\n        (else (cons\
    \ (* x x) (x_or_y (- n 1) x y))))))\n", "  (cond\n    [(= n 1) x]\n    [(= (mod\
    \ n 2) 0) y]\n    [else x_or_y (- n 1) x y]\n  ))\n", "  (cond ((= n 0) x)\n \
    \       ((= n 1) y)\n        (else (* n (x_or_y (n-1) (x y) (y x))))))\n", " \
    \ (cond [(= n 1) x]\n        [(= (mod n 2) 0) y]\n        [else x_or_y (- n 1)\
    \ x y]\n        ))\n", "  (cond [(= n 1) x]\n        [(= (mod n 2) 0) y]\n   \
    \     [else x_or_y (- n 1) x y]\n        ))\n", "  (cond\n    [(= n 2) x]\n  \
    \  [(= (mod n 2) 0) y]\n    [else x_or_y ((+ n 1) x) (x y) (y x)]))\n", "  (cond\
    \ [(= n 1) x]\n        [(= (mod n 2) 0) y]\n        [else (cond [(= (mod n 3)\
    \ 0) x]\n                   [(= (mod n 5) 0) y]\n                   [else (cond\
    \ [(= (mod n 7) 0) x]\n                              [(= (mod n 11) 0) y]\n  \
    \                            [else (cond [(= (mod n 13) 0) x]\n              \
    \                          [(= (mod n 17) 0) y]\n                            \
    \            [else (cond [(= (mod n 19) 0) x]\n                              \
    \                    [(= (mod n 23) 0) y]\n                                  \
    \                [else (cond [(= (mod n 29) 0) x]\n                          \
    \                                  [(= (mod n 31) 0) y]\n                    \
    \                                        [else (cond [(= (mod n 37) 0) x]\n  \
    \                                                                  [(= (mod n\
    \ 41) 0) y]\n                                                                \
    \    [else (cond [(= (mod n 43) 0) x]\n                                      \
    \                                        [(= (mod n 47) 0) y]\n              \
    \                                                                [else (cond [(=\
    \ (mod n 53) 0) x]\n                                                         \
    \                                           [(= (mod n 59) 0) y]\n           \
    \                                                                            \
    \             [else (cond [(= (mod n 61) 0) x]\n                             \
    \                                                                 [(= (mod n 67)\
    \ 0) y]\n                                                                    \
    \                          [else (cond [(= (mod n 71) 0) x]\n                \
    \                                                                            \
    \            [(= (mod n 73) 0) y]\n                                          \
    \                                                              [else (cond [(=\
    \ (mod n 79) 0) x]\n                                                         \
    \                                                         [(= (mod n 83) 0) y]\n\
    \                                                                            \
    \                                      [else (cond [(= (mod n 89) 0) x]\n    \
    \                                                                            \
    \                                            [(= (mod n 93) 0) y]\n          \
    \                                                                            \
    \                                      [else (cond [(= (mod n 97) 0) x]\n    \
    \                                                                            \
    \                                                    [(= (mod n 101) 0) y]\n \
    \                                                                            \
    \                                                       [else (cond [(= (mod n\
    \ 107) 0) x]\n                                                               \
    \                                                                            \
    \                   [(= (mod n 113) 0) y]\n                                  \
    \                                                                            \
    \                                                [else (cond [(= (mod n 119) 0)\
    \ x]\n                                                                       \
    \                                                                            \
    \                     [(= (mod n 125) 0) y]\n                                \
    \                                                                            \
    \                                                            [else (cond [(= (mod\
    \ n 131) 0) x]\n                                                             \
    \                                                                            \
    \                                         [(= (mod n 137) 0) y]\n            \
    \                                                                            \
    \                                                                            \
    \              [else (cond [(= (mod n 143) 0) x]\n                           \
    \                                                                            \
    \                                                                            \
    \         [(= (mod n 149) 0) y]\n                                            \
    \                                                                            \
    \                                                                    [", "  (cond\n\
    \    [(= n 1) x]\n    [(= (mod n 2) 0) y]\n    [else x_or_y (- n 1) x y]\n  )\n\
    )\n", "  (cond [(= n 1) x]\n        [(= (mod n 2) 0) y]\n        [else x_or_y\
    \ (- n 1) x y]))\n", "  (cond [(= n 2) x]\n        [(= (mod n 2) 0) y]\n     \
    \   [else x]))\n", "  (cond [(= n 1) x]\n        [(= (mod n 2) 0) y]\n       \
    \ [else x_or_y (- n 1) x y]\n        ))\n", "  (cond ((= n 0) x)\n        ((=\
    \ n 1) y)\n        (else (* n (x_or_y (n-1) (x y) (y x))))))\n", "  (cond [(=\
    \ n 1) x]\n        [(= (mod n 2) 0) y]\n        [else x_or_y (- n 1) x y]\n  \
    \      ))\n", "  (cond [(= n 0) x]\n        [(= (mod n 2) 0) y]\n        [else\
    \ x_or_y (- n 1) x y]\n        ))\n", "  (cond\n    [(= n 1) x]\n    [(= (mod\
    \ n 2) 0) y]\n    [else x_or_y (- n 1) x y]\n  ))\n", "  (cond\n    [(= n 1) x]\n\
    \    [(= (mod n 2) 0) y]\n    [else x_or_y (- n 1) x y]\n  )\n)\n", "  (cond [(=\
    \ n 0) x]\n        [(= (mod n 2) 0) y]\n        [else x_or_y (- n 1) x y]\n  \
    \      ))\n", "  (cond [(= n 1) x]\n        [(= (mod n 2) 0) y]\n        [else\
    \ x_or_y (- n 1) x y]\n        ))\n", "  (cond\n    [(= n 1) x]\n    [(= (mod\
    \ n 2) 0) y]\n    [else x_or_y (- n 1) x y]\n  ))\n", "  (cond\n    [(= n 1) x]\n\
    \    [(= (mod n 2) 0) y]\n    [else x_or_y (- n 1) x y]\n  )\n)\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
