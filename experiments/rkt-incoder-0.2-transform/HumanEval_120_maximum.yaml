name: HumanEval_120_maximum
language: rkt
prompt: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
  \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
  ;; Example 1:\n;; >>> (maximum (list -3 -4 5) 3)\n;; (list -4 -3 5)\n;; Example\
  \ 2:\n;; >>> (maximum (list 4 -4 4) 2)\n;; (list 4 4)\n;; Example 3:\n;; >>> (maximum\
  \ (list -3 2 1 2 -1 -2 1) 1)\n;; (list 2)\n;; Note:\n;; 1. The length of the array\
  \ will be in the range of [1, 1000].\n;; 2. The elements in the array will be in\
  \ the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n(define (maximum arr k)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maximum))\n\
  \    (check-equal? (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal?\
  \ (candidate (list 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3\
  \ 2 1 2 -1 -2 1) 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0\
  \ 1 2 -3) 3) (list 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2\
  \ -3) 4) (list 0 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0)\
  \ 7) (list -13 -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10)\
  \ 2) (list 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n  \
  \  (check-equal? (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate\
  \ (list -10 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23\
  \ 243 -400 0) 0) (list ))\n))\n\n(test-humaneval)"
completions: ["  (if (= k 0)\n      (list arr)\n      (append (maximum (rest arr)\
    \ (sub1 k)) (maximum (rest arr) (sub1 k))))))\n", "  (if (= k 0)\n      (list\
    \ arr)\n      (append (maximum (rest arr) (sub1 k)) (maximum (first arr) (sub1\
    \ k))))))\n", "  (if (= k 0)\n      (list arr)\n      (let ([head (first arr)])\n\
    \        (if (> (first arr) head)\n            (append (maximum (rest arr) (sub1\
    \ k)) (list head))\n            (append (maximum (rest arr) (sub1 k)) (list head))))))\n",
  "  (if (= k 0)\n      (list arr)\n      (let ([max-so-far #f (max-so-far-so-far\
    \ (car arr) k)]\n            [max-so-far-so-far (car max-so-far-so-far)\n    \
    \                       (maximum (cdr arr) (k - 1))])\n        (if (< k 1)\n \
    \           (cons max-so-far-so-far (maximum (cdr arr) k))\n            (cons\
    \ max-so-far-so-far (list max-so-far-so-far)))))) ; #lang racket\n", "  (if (=\
    \ k 0)\n      (list arr)\n      (let ([max-so-far #f max-so-far-idx #f max-so-far-idx\
    \ #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx\
    \ #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx\
    \ #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx\
    \ #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx\
    \ #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx\
    \ #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx\
    \ #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx\
    \ #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx\
    \ #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx\
    \ #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx\
    \ #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx\
    \ #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-",
  "  (if (= k 0)\n      (list arr)\n      (append (maximum (rest arr) (sub1 k)) (maximum\
    \ (first arr) (sub1 k)))))\n", "  (if (= k 0)\n      (list arr)\n      (let ([max-so-far\
    \ #f])\n        (let loop ([i 0] [arr arr] [k k] [max-so-far max-so-far])\n  \
    \        (cond [(< i k) (loop (+ i 1) (conj arr (car arr)) (- k 1) max-so-far)]\n\
    \                [else (loop (+ i 1) (conj arr (car arr)) k (if (> max-so-far\
    \ car arr) car arr))])))))\n", "  (if (= k 0)\n      (list arr)\n      (let ([max-so-far\
    \ #f max-so-far-so-far (maximum (rest arr) (k - 1))])\n        (if (< k max-so-far-so-far)\n\
    \            (let ([max-so-far max-so-far-so-far])\n              (if (< max-so-far\
    \ max-so-far-so-far)\n                  (let ([max-so-far max-so-far-so-far])\n\
    \                    (if (< max-so-far max-so-far-so-far)\n                  \
    \      (let ([max-so-far max-so-far-so-far])\n                          (if (<\
    \ max-so-far max-so-far-so-far)\n                              (let ([max-so-far\
    \ max-so-far-so-far])\n                                (if (< max-so-far max-so-far-so-far)\n\
    \                                    (let ([max-so-far max-so-far-so-far])\n \
    \                                     (if (< max-so-far max-so-far-so-far)\n \
    \                                         (let ([max-so-far max-so-far-so-far])\n\
    \                                            (if (< max-so-far max-so-far-so-far)\n\
    \                                                (let ([max-so-far max-so-far-so-far])\n\
    \                                                  (if (< max-so-far max-so-far-so-far)\n\
    \                                                      (let ([max-so-far max-so-far-so-far])\n\
    \                                                        (if (< max-so-far max-so-far-so-far)\n\
    \                                                            (let ([max-so-far\
    \ max-so-far-so-far])\n                                                      \
    \        (if (< max-so-far max-so-far-so-far)\n                              \
    \                                    (let ([max-so-far max-so-far-so-far])\n \
    \                                                                   (if (< max-so-far\
    \ max-so-far-so-far)\n                                                       \
    \                 (let ([max-so-far max-so-far-so-far])\n                    \
    \                                                      (if (< max-so-far max-so-far-so-far)\n\
    \                                                                            (let\
    \ ([max-so-far max-so-far-so-far])\n                                         \
    \                                     (if (< max-so-far max-so-far-so-far)\n \
    \                                                                            \
    \     (let ([max-so-far max-so-far-so-far])\n                                \
    \                                                    (if (< max-so-far ", "  (if\
    \ (= k 0)\n      (list arr)\n      (let ([max-so-far #f (max-so-far-so-far #f\
    \ (max-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so", "  (if (= k 0)\n      (list arr)\n      (let\
    \ ([max-so-far #f (max-so-far-so-far #f (max-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-",
  "  (if (= k 0)\n      (list 0)\n      (let ([max-so-far 0])\n        (if (null?\
    \ (rest arr))\n            (cons max-so-far arr)\n            (let ([curr (car\
    \ arr)])\n              (if (> curr max-so-far)\n                  (cons max-so-far\
    \ arr)\n                  (maximum (rest arr) (sub1 k))))))))\n", "  (if (= k\
    \ 0)\n      (list arr)\n      (let ([max-so-far #f max-so-far-so-far (sub1 k)]\n\
    \            [max-so-far-so-far-so-far #f max-so-far-so-far-so-far (sub1 k)]\n\
    \            [max-so-far-so-far-so-far-so-far #f max-so-far-so-far-so-far-so-far\
    \ #f max-so-far-so-far-so-far-so-far-so-far #f max-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f max-so-far-so-far-so-far-so-far-so-far-so-far-so-far #f max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-",
  "  (if (= k 0)\n      (list 0)\n      (let ([max-so-far 0])\n        (let loop ((arr\
    \ arr) (k k) (max-so-far max-so-far))\n          (cond ((null? arr) max-so-far)\n\
    \                ((< k 0)\n                 (loop (rest arr) k (cons (car arr)\
    \ max-so-far)))\n                (else (loop (rest arr) (- k 1) (cons (car arr)\
    \ max-so-far)))))))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first\
    \ arr)]\n    [else (cons (max (rest arr) (- k 1))\n                (maximum (rest\
    \ arr) (- k 1)))]))\n", "  (if (= k 0)\n      (list arr)\n      (let ([max (car\
    \ arr)])\n        (if (< (length arr) k)\n            (append (maximum (cdr arr)\
    \ (sub1 k)) (list max))\n            (append (list max) (maximum (cdr arr) (sub1\
    \ k)))))))\n", "  (if (= k 0)\n      (list arr)\n      (append (maximum (rest\
    \ arr) (sub1 k)) (maximum (first arr) (sub1 k)))))\n", "  (if (= k 0)\n      (list\
    \ 0)\n      (let ([max-so-far 0])\n        (loop for i from 0 to (- k 1) by -1\n\
    \              for j to (+ i 1)\n              for max-so-far in\n           \
    \   (if (< arr (car arr))\n                  (cons max-so-far arr)\n         \
    \         (cons arr max-so-far))\n              finally (return (cons max-so-far\
    \ max-so-far)))))\n</code>\n<|/ a tags=racket,scheme |>\n<| c |>\nI like your\
    \ solution, but I wonder why you used `for` instead of `for/list`?\n<|/ c |>\n\
    <| c |>\nI used `for` because I wanted to use an `if` statement to decide whether\
    \ to iterate over the array or not. `for/list` would have made more sense in this\
    \ case. `for/list` would also have made more sense if I was iterating over a list\
    \ rather than an array.\n<|/ c |>\n<| c |>\nI see. Thanks for the explanation!\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>", "  (if (= k 0)\n      (list arr)\n      (append\
    \ (maximum (rest arr) (sub1 k)) (maximum (rest arr) (sub1 k))))))\n", "  (if (=\
    \ k 0)\n      (list arr)\n      (let ([max-so-far #f]\n            [max-so-far-idx\
    \ #0]\n            [max-so-far-arr #(first arr)])\n        (if (null? arr)\n \
    \           (list arr)\n            (let ([cur-arr (car arr)])\n             \
    \ (if (< cur-arr max-so-far)\n                  (let ([new-arr (cons cur-arr (maximum\
    \ (rest arr) (sub1 k)))])\n                    (if (= k 1)\n                 \
    \       (cons new-arr max-so-far-arr)\n                        (let ([new-idx\
    \ (+ max-so-far-idx 1)])\n                          (cons new-arr (cons max-so-far-arr\
    \ (list new-idx))))))\n                  (let ([new-idx (+ max-so-far-idx 1)])\n\
    \                    (cons new-arr (cons max-so-far-arr (list new-idx)))))))))))\n",
  "  (if (= k 0)\n      (list arr)\n      (let ([max (car arr)])\n        (if (> (car\
    \ arr) max)\n            (cons max (maximum (cdr arr) (sub1 k)))\n           \
    \ (maximum (cdr arr) (sub1 k))))))\n", "  (if (= k 0)\n      (list arr)\n    \
    \  (append (maximum (rest arr) (sub1 k)) (maximum (rest arr) (sub1 k)))))\n",
  "  (if (= k 0)\n      (list arr)\n      (append (maximum (rest arr) (sub1 k)) (maximum\
    \ (first arr) (sub1 k))))))\n", "  (if (= k 0)\n      (list arr)\n      (let ([max-so-far\
    \ #f (max-so-far-so-far (car arr) arr k)]\n            [max-so-far-so-far #f (max-so-far-so-far\
    \ (car arr) arr k)]\n            [max-so-far-so-far-so-far #f (max-so-far-so-far\
    \ (car arr) arr k)]\n            [max-so-far-so-far-so-far-so-far #f (max-so-far-so-far\
    \ (car arr) arr k)])\n        (if (> max-so-far max-so-far-so-far)\n         \
    \   (set! max-so-far max-so-far-so-far)\n            (set! max-so-far-so-far max-so-far-so-far-so-far)\n\
    \            (set! max-so-far-so-far-so-far max-so-far-so-far-so-far-so-far)\n\
    \            (set! max-so-far-so-far-so-far-so-far-so-far max-so-far-so-far-so-far-so-far-so-far)))))\n",
  "  (if (= k 0)\n      (list arr)\n      (let ([max-so-far #f max-so-far-index 0])\n\
    \        (loop\n           (let ([cur-elem (first arr)])\n             (if (<\
    \ cur-elem max-so-far)\n                 (set! max-so-far cur-elem)\n        \
    \         (set! max-so-far-index cur-elem))\n             (set! arr (rest arr))\n\
    \             (if (= (- k 1) max-so-far-index)\n                 (if (< max-so-far-index\
    \ max-so-far)\n                     (set! max-so-far max-so-far-index)\n     \
    \                (set! max-so-far-index 0)))))))\n", "  (if (= k 0)\n      (list\
    \ arr)\n      (append (maximum (rest arr) (sub1 k)) (maximum (rest arr) (sub1\
    \ k))))) ;; #lang racket\n", "  (if (= k 0)\n      (list arr)\n      (let ([max-so-far\
    \ (first arr)])\n        (if (null? (rest arr))\n            (list max-so-far)\n\
    \            (let ([cur-max (maximum (rest arr) (sub1 k)))]\n              (if\
    \ (< (first cur-max) max-so-far)\n                  (cons max-so-far cur-max)\n\
    \                  (cons cur-max max-so-far)))))))\n", "  (cond\n    [(empty?\
    \ arr) (list 0)]\n    [(= k 0) (first arr)]\n    [else (append (maximum (rest\
    \ arr) (sub1 k)) (first arr))]))\n", "  (cond\n    [(empty? arr) (list '())]\n\
    \    [(= k 0) (first arr)]\n    [else (append (maximum (rest arr) (sub1 k)) (first\
    \ arr))]))\n", "  (if (= k 0)\n      (list 0)\n      (let ([max-so-far 0])\n \
    \       (if (null? (rest arr))\n            (cons (car arr) max-so-far)\n    \
    \        (let ([cur (car arr)])\n              (if (> cur max-so-far)\n      \
    \            (cons cur max-so-far)\n                  (maximum (rest arr) (sub1\
    \ k))))))))\n", "  (if (= k 0)\n      (list 0)\n      (let ([max-so-far 0])\n\
    \        (if (null? (rest arr))\n            (cons max-so-far arr)\n         \
    \   (let ([cur-max (car arr)])\n              (if (> cur-max max-so-far)\n   \
    \               (cons cur-max max-so-far)\n                  (maximum (cdr arr)\
    \ (sub1 k))))))))\n", "  (if (= k 0)\n      (list arr)\n      (let ([max-so-far\
    \ #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx\
    \ #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx\
    \ #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx\
    \ #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx\
    \ #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx\
    \ #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx\
    \ #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx\
    \ #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx\
    \ #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx\
    \ #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx\
    \ #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx\
    \ #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx\
    \ #f max-so-far-idx #f max-so-far-", "  (if (= k 0)\n      (list 0)\n      (let\
    \ ([max (car arr)])\n        (if (> (car arr) max)\n            (let ([max (car\
    \ arr)])\n              (if (> (car arr) max)\n                  (let ([max (car\
    \ arr)])\n                    (if (> (car arr) max)\n                        (let\
    \ ([max (car arr)])\n                          (if (> (car arr) max)\n       \
    \                       (let ([max (car arr)])\n                             \
    \   (if (> (car arr) max)\n                                    (let ([max (car\
    \ arr)])\n                                      (if (> (car arr) max)\n      \
    \                                    (let ([max (car arr)])\n                \
    \                            (if (> (car arr) max)\n                         \
    \                       (let ([max (car arr)])\n                             \
    \                     (if (> (car arr) max)\n                                \
    \                      (let ([max (car arr)])\n                              \
    \                          (if (> (car arr) max)\n                           \
    \                                 (let ([max (car arr)])\n                   \
    \                                           (if (> (car arr) max)\n          \
    \                                                        (let ([max (car arr)])\n\
    \                                                                    (if (> (car\
    \ arr) max)\n                                                                \
    \        (let ([max (car arr)])\n                                            \
    \                              (if (> (car arr) max)\n                       \
    \                                                       (let ([max (car arr)])\n\
    \                                                                            \
    \    (if (> (car arr) max)\n                                                 \
    \                                   (let ([max (car arr)])\n                 \
    \                                                                     (if (> (car\
    \ arr) max)\n                                                                \
    \                          (let ([max (car arr)])\n                          \
    \                                                                  (if (> (car\
    \ arr) max)\n                                                                \
    \                                (let ([max (car arr)])\n                    \
    \                                                                            \
    \  (if (> (car arr) max)\n                                                   \
    \                                                   (let ([max (car arr)])\n \
    \                                                                            \
    \                           (if (> (car arr) max)\n                          \
    \                                                                            \
    \      (let ([max (car arr)])\n                                              \
    \                                                                (if (> (car arr)\
    \ max)\n                                                                     \
    \                                             (let ([max (car arr)])\n       \
    \                                                                            \
    \                                 (if (> (car arr) max)\n                    \
    \                                                                            \
    \                        (let ([max (car arr)])\n                            \
    \                                                                            \
    \                  (if (> (car arr) max)\n                                   \
    \                                                                            \
    \               (let ([max (car arr)])\n                                     \
    \                                                                            \
    \               (if (> (car arr) max)\n                                      \
    \                                                                            \
    \                (let ([max (car arr)])\n                                    \
    \                                                                            \
    \                    (if (> (car arr) max)\n                                 \
    \                                                                            \
    \                           (let ([max (car arr)])\n                         \
    \                                                                            \
    \                                     (if (> (car arr) ", "  (if (= k 0)\n   \
    \   (list 0)\n      (let ([max (car arr)])\n        (if (> (car arr) max)\n  \
    \          (let ([new (car arr)])\n              (if (> (car arr) max)\n     \
    \             (let ([new (car arr)])\n                    (if (> (car arr) max)\n\
    \                        (let ([new (car arr)])\n                          (if\
    \ (> (car arr) max)\n                              (let ([new (car arr)])\n  \
    \                              (if (> (car arr) max)\n                       \
    \             (let ([new (car arr)])\n                                      (if\
    \ (> (car arr) max)\n                                          (let ([new (car\
    \ arr)])\n                                            (if (> (car arr) max)\n\
    \                                                (let ([new (car arr)])\n    \
    \                                              (if (> (car arr) max)\n       \
    \                                               (let ([new (car arr)])\n     \
    \                                                   (if (> (car arr) max)\n  \
    \                                                          (let ([new (car arr)])\n\
    \                                                              (if (> (car arr)\
    \ max)\n                                                                  (let\
    \ ([new (car arr)])\n                                                        \
    \            (if (> (car arr) max)\n                                         \
    \                               (let ([new (car arr)])\n                     \
    \                                                     (if (> (car arr) max)\n\
    \                                                                            \
    \  (let ([new (car arr)])\n                                                  \
    \                              (if (> (car arr) max)\n                       \
    \                                                             (let ([new (car\
    \ arr)])\n                                                                   \
    \                   (if (> (car arr) max)\n                                  \
    \                                                        (let ([new (car arr)])\n\
    \                                                                            \
    \                (if (> (car arr) max)\n                                     \
    \                                                           (let ([new (car arr)])\n\
    \                                                                            \
    \                      (if (> (car arr) max)\n                               \
    \                                                                       (let ([new\
    \ (car arr)])\n                                                              \
    \                                          (if (> (car arr) max)\n           \
    \                                                                            \
    \                     (let ([new (car arr)])\n                               \
    \                                                                            \
    \   (if (> (car arr) max)\n                                                  \
    \                                                                (let ([new (car\
    \ arr)])\n                                                                   \
    \                                                 (if (> (car arr) max)\n    \
    \                                                                            \
    \                                        (let ([new (car arr)])\n            \
    \                                                                            \
    \                                  (if (> (car arr) max)\n                   \
    \                                                                            \
    \                               (let ([new (car arr)])\n                     \
    \                                                                            \
    \                               (if (> (car arr) max)\n                      \
    \                                                                            \
    \                                  (let ([new (car arr)])\n                  \
    \                                                                            \
    \                                        (if (> (car arr) max)\n             \
    \                                                                            \
    \                                               (let ([new (car arr)])\n     \
    \                                                                            \
    \                                                         (if (> (car arr) max)",
  "  (if (= k 0)\n      (list arr)\n      (let ([max-so-far #f max-so-far-so-far (reverse\
    \ (list arr))])\n        (if (< (length max-so-far) k)\n            (let ([max-so-far\
    \ (append max-so-far max-so-far-so-far)])\n              (if (< (length max-so-far)\
    \ k)\n                  (let ([max-so-far-so-far (append max-so-far-so-far (list\
    \ max-so-far))])\n                    (if (< (length max-so-far-so-far) k)\n \
    \                       (let ([max-so-far-so-far (append max-so-far-so-far (list\
    \ max-so-far-so-far))])\n                          (if (< (length max-so-far-so-far)\
    \ k)\n                              (let ([max-so-far-so-far (append max-so-far-so-far\
    \ (list max-so-far-so-far))])\n                                (if (< (length\
    \ max-so-far-so-far) k)\n                                    (let ([max-so-far-so-far\
    \ (append max-so-far-so-far (list max-so-far-so-far))])\n                    \
    \                  (if (< (length max-so-far-so-far) k)\n                    \
    \                      (let ([max-so-far-so-far (append max-so-far-so-far (list\
    \ max-so-far-so-far))])\n                                            (if (< (length\
    \ max-so-far-so-far) k)\n                                                (let\
    \ ([max-so-far-so-far (append max-so-far-so-far (list max-so-far-so-far))])\n\
    \                                                  (if (< (length max-so-far-so-far)\
    \ k)\n                                                      (let ([max-so-far-so-far\
    \ (append max-so-far-so-far (list max-so-far-so-far))])\n                    \
    \                                    (if (< (length max-so-far-so-far) k)\n  \
    \                                                          (let ([max-so-far-so-far\
    \ (append max-so-far-so-far (list max-so-far-so-far))])\n                    \
    \                                          (if (< (length max-so-far-so-far) k)\n\
    \                                                                  (let ([max-so-far-so-far\
    \ (append max-so-far-so-far (list max-so-far-", "  (if (= k 0)\n      (list arr)\n\
    \      (append (maximum (rest arr) (sub1 k)) (maximum (rest arr) (sub1 k)))))\n",
  "  (if (= k 0)\n      (list arr)\n      (append (maximum (rest arr) (sub1 k)) (maximum\
    \ (first arr) (sub1 k)))))\n", "  (if (= k 0)\n      (list arr)\n      (append\
    \ (maximum (rest arr) (sub1 k)) (maximum (rest arr) (sub1 k))))\n  )\n", "  (if\
    \ (= k 0)\n      (list arr)\n      (let ([max (car arr)])\n        (if (> (car\
    \ arr) max)\n            (let ([max (car arr)])\n              (if (> (car arr)\
    \ max)\n                  (let ([max (car arr)])\n                    (if (> (car\
    \ arr) max)\n                        (let ([max (car arr)])\n                \
    \          (if (> (car arr) max)\n                              (let ([max (car\
    \ arr)])\n                                (if (> (car arr) max)\n            \
    \                        (let ([max (car arr)])\n                            \
    \          (if (> (car arr) max)\n                                          (let\
    \ ([max (car arr)])\n                                            (if (> (car arr)\
    \ max)\n                                                (let ([max (car arr)])\n\
    \                                                  (if (> (car arr) max)\n   \
    \                                                   (let ([max (car arr)])\n \
    \                                                       (if (> (car arr) max)\n\
    \                                                            (let ([max (car arr)])\n\
    \                                                              (if (> (car arr)\
    \ max)\n                                                                  (let\
    \ ([max (car arr)])\n                                                        \
    \            (if (> (car arr) max)\n                                         \
    \                               (let ([max (car arr)])\n                     \
    \                                                     (if (> (car arr) max)\n\
    \                                                                            \
    \  (let ([max (car arr)])\n                                                  \
    \                              (if (> (car arr) max)\n                       \
    \                                                             (let ([max (car\
    \ arr)])\n                                                                   \
    \                   (if (> (car arr) max)\n                                  \
    \                                                        (let ([max (car arr)])\n\
    \                                                                            \
    \                (if (> (car arr) max)\n                                     \
    \                                                           (let ([max (car arr)])\n\
    \                                                                            \
    \                      (if (> (car arr) max)\n                               \
    \                                                                       (let ([max\
    \ (car arr)])\n                                                              \
    \                                          (if (> (car arr) max)\n           \
    \                                                                            \
    \                     (let ([max (car arr)])\n                               \
    \                                                                            \
    \   (if (> (car arr) max)\n                                                  \
    \                                                                (let ([max (car\
    \ arr)])\n                                                                   \
    \                                                 (if (> (car arr) max)\n    \
    \                                                                            \
    \                                        (let ([max (car arr)])\n            \
    \                                                                            \
    \                                  (if (> (car arr) max)\n                   \
    \                                                                            \
    \                               (let ([max (car arr)])\n                     \
    \                                                                            \
    \                               (if (> (car arr) max)\n                      \
    \                                                                            \
    \                                  (let ([max (car arr)])\n                  \
    \                                                                            \
    \                                        (if (> (car arr) max)\n             \
    \                                                                            \
    \                                                 (let ([max (car arr)])\n   \
    \                                                                            \
    \                                                             (if (> (car arr)\
    \ max)", "  (if (= k 0)\n      (list arr)\n      (let ([max (car arr)])\n    \
    \    (if (> (car arr) max)\n            (cons max (maximum (cdr arr) (sub1 k)))\n\
    \            (maximum (cdr arr) (sub1 k))))))\n", "  (if (= k 0)\n      (list\
    \ arr)\n      (let ([max-so-far #f (max-so-far-so-far #f (max-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so",
  "  (if (= k 0)\n      (list arr)\n      (append (maximum (rest arr) (sub1 k)) (maximum\
    \ (rest arr) (sub1 k)))))\n", "  (if (= k 0)\n      (list arr)\n      (append\
    \ (maximum (rest arr) (sub1 k)) (maximum (first arr) (sub1 k))))))\n", "  (if\
    \ (= k 0)\n      (list arr)\n      (let ([max-so-far (first arr)])\n        (if\
    \ (null? (rest arr))\n            (list max-so-far)\n            (let ([next (maximum\
    \ (rest arr) (sub1 k))]\n                  [max-so-far (cons (max max-so-far next)\
    \ max-so-far)])\n              (if (= k 1)\n                  max-so-far\n   \
    \               (let ([max-so-far (cons (max max-so-far max-so-far) max-so-far)])\n\
    \                    (if (= k 2)\n                        max-so-far\n       \
    \                 (let ([max-so-far (cons (max max-so-far max-so-far) max-so-far)])\n\
    \                          (if (= k 3)\n                              max-so-far\n\
    \                              (let ([max-so-far (cons (max max-so-far max-so-far)\
    \ max-so-far)])\n                                (if (= k 4)\n               \
    \                     max-so-far\n                                    (let ([max-so-far\
    \ (cons (max max-so-far max-so-far) max-so-far)])\n                          \
    \            (if (= k 5)\n                                          max-so-far\n\
    \                                          (let ([max-so-far (cons (max max-so-far\
    \ max-so-far) max-so-far)])\n                                            (if (=\
    \ k 6)\n                                                max-so-far\n         \
    \                                       (let ([max-so-far (cons (max max-so-far\
    \ max-so-far) max-so-far)])\n                                                \
    \  (if (= k 7)\n                                                      max-so-far\n\
    \                                                      (let ([max-so-far (cons\
    \ (max max-so-far max-so-far) max-so-far)])\n                                \
    \                        (if (= k 8)\n                                       \
    \                     max-so-far\n                                           \
    \                 (let ([max-so-far (cons (max max-so-far max-so-far) max-so-far)])\n\
    \                                                              (if (= k 9)\n \
    \                                                                 max-so-far\n\
    \                                                                  (let ([max-so-far\
    \ (cons (max max-so-far max-so-far) max-so-far)])\n                          \
    \                                          (if (= k 10)\n                    \
    \                                                    max-so-far\n            \
    \                                                            (let ([max-so-far\
    \ (cons (max max-so-far max-so-far) max-so-far)])\n                          \
    \                                                (if (= k 11)\n              \
    \                                                                max-so-far\n\
    \                                                                            \
    \  (let ([max-so-far (cons (max max-so-far max-so-far", "  (cond\n    [(empty?\
    \ arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max (rest arr) k) (maximum\
    \ (rest arr) (sub1 k)))]))\n", "  (if (= k 0)\n      (list arr)\n      (append\
    \ (maximum (rest arr) (sub1 k)) (maximum (rest arr) (sub1 k)))))\n", "  (if (=\
    \ k 0)\n      (list 0)\n      (let ([max-so-far 0])\n        (let loop ([i 0])\n\
    \          (if (< i k)\n              (loop (+ i 1))\n              (loop (+ i\
    \ 1))\n              (if (> arr (sub1 max-so-far))\n                  (loop (+\
    \ i 1))\n                  (loop (+ i 1))\n                  (cons (car arr) (loop\
    \ (+ i 1)))))))\n        (loop (+ i 1)))))\n", "  (if (= k 0)\n      (list arr)\n\
    \      (append (maximum (rest arr) (sub1 k)) (maximum (first arr) (sub1 k)))))\n",
  "  (if (= k 0)\n      (list arr)\n      (let ([max (car arr)])\n        (if (> (car\
    \ arr) max)\n            (let ([max (car arr)])\n              (if (> (car arr)\
    \ max)\n                  (let ([max (car arr)])\n                    (if (> (car\
    \ arr) max)\n                        (let ([max (car arr)])\n                \
    \          (if (> (car arr) max)\n                              (let ([max (car\
    \ arr)])\n                                (if (> (car arr) max)\n            \
    \                        (let ([max (car arr)])\n                            \
    \          (if (> (car arr) max)\n                                          (let\
    \ ([max (car arr)])\n                                            (if (> (car arr)\
    \ max)\n                                                (let ([max (car arr)])\n\
    \                                                  (if (> (car arr) max)\n   \
    \                                                   (let ([max (car arr)])\n \
    \                                                       (if (> (car arr) max)\n\
    \                                                            (let ([max (car arr)])\n\
    \                                                              (if (> (car arr)\
    \ max)\n                                                                  (let\
    \ ([max (car arr)])\n                                                        \
    \            (if (> (car arr) max)\n                                         \
    \                               (let ([max (car arr)])\n                     \
    \                                                     (if (> (car arr) max)\n\
    \                                                                            \
    \  (let ([max (car arr)])\n                                                  \
    \                              (if (> (car arr) max)\n                       \
    \                                                             (let ([max (car\
    \ arr)])\n                                                                   \
    \                   (if (> (car arr) max)\n                                  \
    \                                                        (let ([max (car arr)])\n\
    \                                                                            \
    \                (if (> (car arr) max)\n                                     \
    \                                                           (let ([max (car arr)])\n\
    \                                                                            \
    \                      (if (> (car arr) max)\n                               \
    \                                                                       (let ([max\
    \ (car arr)])\n                                                              \
    \                                          (if (> (car arr) max)\n           \
    \                                                                            \
    \                     (let ([max (car arr)])\n                               \
    \                                                                            \
    \   (if (> (car arr) max)\n                                                  \
    \                                                                (let ([max (car\
    \ arr)])\n                                                                   \
    \                                                 (if (> (car arr) max)\n    \
    \                                                                            \
    \                                        (let ([max (car arr)])\n            \
    \                                                                            \
    \                                  (if (> (car arr) max)\n                   \
    \                                                                            \
    \                               (let ([max (car arr)])\n                     \
    \                                                                            \
    \                               (if (> (car arr) max)\n                      \
    \                                                                            \
    \                                  (let ([max (car arr)])\n                  \
    \                                                                            \
    \                                        (if (> (car arr) max)\n             \
    \                                                                            \
    \                                               (let ([max (car arr)])\n     \
    \                                                                            \
    \                                                         (if (> (car arr) max)",
  "  (if (= k 0)\n      (list arr)\n      (let ([max-so-far #f (max-so-far-so-far\
    \ (car arr) arr k)]\n            [max-so-far-so-far (car max-so-far-so-far) (cdr\
    \ max-so-far-so-far) k])\n        (if (< k 0)\n            (if (> max-so-far-so-far\
    \ (car arr))\n                (cons (car arr) (max-so-far-so-far)\n          \
    \             (cons (car max-so-far-so-far) max-so-far (cdr max-so-far-so-far)))\n\
    \                (cons (car arr) (max-so-far-so-far)\n                       (cons\
    \ (car max-so-far-so-far) (max-so-far-so-far) max-so-far)))\n            (if (>\
    \ max-so-far-so-far (car arr))\n                (cons (car arr) (max-so-far-so-far)\n\
    \                       (cons (car max-so-far-so-far) (max-so-far-so-far) max-so-far))\n\
    \            (if (> max-so-far-so-far (car arr))\n                (cons (car arr)\
    \ (max-so-far-so-far)\n                       (cons (car max-so-far-so-far) (max-so-far-so-far)\
    \ max-so-far))\n            (if (> max-so-far-so-far (car arr))\n            \
    \    (cons (car arr) (max-so-far-so-far)\n                       (cons (car max-so-far-so-far)\
    \ (max-so-far-so-far) max-so-far))\n            (if (> max-so-far-so-far (car\
    \ arr))\n                (cons (car arr) (max-so-far-so-far)\n               \
    \        (cons (car max-so-far-so-far) (max-so-far-so-far) max-so-far))\n    \
    \        (if (> max-so-far-so-far (car arr))\n                (cons (car arr)\
    \ (max-so-far-so-far)\n                       (cons (car max-so-far-so-far) (max-so-far-so-far)\
    \ max-so-far))", "  (if (= k 0)\n      (list 0)\n      (let ([max (first arr)])\n\
    \        (if (null? (rest arr))\n            (list max)\n            (let ([next\
    \ (maximum (rest arr) (sub1 k))]\n                  [max (if (> max next) max\
    \ next)])\n              (cons max max))))))\n", "  (cond\n    [(empty? arr) empty]\n\
    \    [(= k 0) (first arr)]\n    [else (cons (max (rest arr) k) (maximum (rest\
    \ arr) (sub1 k)))]))\n", "  (if (= k 0)\n      (list arr)\n      (append (maximum\
    \ (rest arr) (sub1 k)) (maximum (rest arr) (sub1 k))))))\n", "  (if (= k 0)\n\
    \      (list 0)\n      (let ([max (car arr)])\n        (if (> (car arr) max)\n\
    \            (let ([max (car arr)])\n              (if (> (car arr) max)\n   \
    \               (let ([max (car arr)])\n                    (if (> (car arr) max)\n\
    \                        (let ([max (car arr)])\n                          (if\
    \ (> (car arr) max)\n                              (let ([max (car arr)])\n  \
    \                              (if (> (car arr) max)\n                       \
    \             (let ([max (car arr)])\n                                      (if\
    \ (> (car arr) max)\n                                          (let ([max (car\
    \ arr)])\n                                            (if (> (car arr) max)\n\
    \                                                (let ([max (car arr)])\n    \
    \                                              (if (> (car arr) max)\n       \
    \                                               (let ([max (car arr)])\n     \
    \                                                   (if (> (car arr) max)\n  \
    \                                                          (let ([max (car arr)])\n\
    \                                                              (if (> (car arr)\
    \ max)\n                                                                  (let\
    \ ([max (car arr)])\n                                                        \
    \            (if (> (car arr) max)\n                                         \
    \                               (let ([max (car arr)])\n                     \
    \                                                     (if (> (car arr) max)\n\
    \                                                                            \
    \  (let ([max (car arr)])\n                                                  \
    \                              (if (> (car arr) max)\n                       \
    \                                                             (let ([max (car\
    \ arr)])\n                                                                   \
    \                   (if (> (car arr) max)\n                                  \
    \                                                        (let ([max (car arr)])\n\
    \                                                                            \
    \                (if (> (car arr) max)\n                                     \
    \                                                           (let ([max (car arr)])\n\
    \                                                                            \
    \                      (if (> (car arr) max)\n                               \
    \                                                                       (let ([max\
    \ (car arr)])\n                                                              \
    \                                          (if (> (car arr) max)\n           \
    \                                                                            \
    \                     (let ([max (car arr)])\n                               \
    \                                                                            \
    \   (if (> (car arr) max)\n                                                  \
    \                                                                (let ([max (car\
    \ arr)])\n                                                                   \
    \                                                 (if (> (car arr) max)\n    \
    \                                                                            \
    \                                        (let ([max (car arr)])\n            \
    \                                                                            \
    \                                  (if (> (car arr) max)\n                   \
    \                                                                            \
    \                               (let ([max (car arr)])\n                     \
    \                                                                            \
    \                               (if (> (car arr) max)\n                      \
    \                                                                            \
    \                                  (let ([max (car arr)])\n                  \
    \                                                                            \
    \                                        (if (> (car arr) max)\n             \
    \                                                                            \
    \                                                 (let ([max (car arr)])\n   \
    \                                                                            \
    \                                                             (if (> (car arr)\
    \ max)", "  (if (= k 0)\n      (list arr)\n      (append (maximum (rest arr) (sub1\
    \ k)) (maximum (first arr) (sub1 k)))))\n", "  (cond\n    [(empty? arr) empty]\n\
    \    [(= k 0) (first arr)]\n    [else (max (rest arr) (- k 1))]))\n", "  (if (=\
    \ k 0)\n      (list arr)\n      (append (maximum (rest arr) (sub1 k)) (maximum\
    \ (rest arr) (sub1 k)))))\n", "  (if (= k 0)\n      (list arr)\n      (append\
    \ (maximum (rest arr) (sub1 k)) (maximum (first arr) (sub1 k))))))\n", "  (if\
    \ (= k 0)\n      (list arr)\n      (append (maximum (rest arr) (sub1 k)) (maximum\
    \ (first arr) (sub1 k))))))\n", "  (if (= k 0)\n      (list arr)\n      (let ([max\
    \ (car arr)])\n        (if (> (car arr) max)\n            (let ([max (car arr)])\n\
    \              (if (> (car arr) max)\n                  (let ([max (car arr)])\n\
    \                    (if (> (car arr) max)\n                        (let ([max\
    \ (car arr)])\n                          (if (> (car arr) max)\n             \
    \                 (let ([max (car arr)])\n                                (if\
    \ (> (car arr) max)\n                                    (let ([max (car arr)])\n\
    \                                      (if (> (car arr) max)\n               \
    \                           (let ([max (car arr)])\n                         \
    \                   (if (> (car arr) max)\n                                  \
    \              (let ([max (car arr)])\n                                      \
    \            (if (> (car arr) max)\n                                         \
    \             (let ([max (car arr)])\n                                       \
    \                 (if (> (car arr) max)\n                                    \
    \                        (let ([max (car arr)])\n                            \
    \                                  (if (> (car arr) max)\n                   \
    \                                               (let ([max (car arr)])\n     \
    \                                                               (if (> (car arr)\
    \ max)\n                                                                     \
    \   (let ([max (car arr)])\n                                                 \
    \                         (if (> (car arr) max)\n                            \
    \                                                  (let ([max (car arr)])\n  \
    \                                                                            \
    \  (if (> (car arr) max)\n                                                   \
    \                                 (let ([max (car arr)])\n                   \
    \                                                                   (if (> (car\
    \ arr) max)\n                                                                \
    \                          (let ([max (car arr)])\n                          \
    \                                                                  (if (> (car\
    \ arr) max)\n                                                                \
    \                                (let ([max (car arr)])\n                    \
    \                                                                            \
    \  (if (> (car arr) max)\n                                                   \
    \                                                   (let ([max (car arr)])\n \
    \                                                                            \
    \                           (if (> (car arr) max)\n                          \
    \                                                                            \
    \      (let ([max (car arr)])\n                                              \
    \                                                                (if (> (car arr)\
    \ max)\n                                                                     \
    \                                             (let ([max (car arr)])\n       \
    \                                                                            \
    \                                 (if (> (car arr) max)\n                    \
    \                                                                            \
    \                        (let ([max (car arr)])\n                            \
    \                                                                            \
    \                  (if (> (car arr) max)\n                                   \
    \                                                                            \
    \               (let ([max (car arr)])\n                                     \
    \                                                                            \
    \               (if (> (car arr) max)\n                                      \
    \                                                                            \
    \                  (let ([max (car arr)])\n                                  \
    \                                                                            \
    \                        (if (> (car arr) max)\n                             \
    \                                                                            \
    \                               (let ([max (car arr)])\n                     \
    \                                                                            \
    \                                         (if (> (car arr) max)", "  (if (= k\
    \ 0)\n      (list arr)\n      (let ([max (first arr)])\n        (if (> (rest arr)\
    \ max)\n            (cons max \n                  (maximum (rest arr) (sub1 k)))\n\
    \            (maximum (rest arr) (sub1 k))))))\n", "  (if (= k 0)\n      (list\
    \ arr)\n      (append (maximum (rest arr) (sub1 k)) (maximum (first arr) (sub1\
    \ k)))))\n", "  (if (= k 0)\n      (list arr)\n      (append (maximum (rest arr)\
    \ (sub1 k)) (maximum (rest arr) (sub1 k))))))\n", "  (if (= k 0)\n      (list\
    \ arr)\n      (append (maximum (rest arr) (sub1 k)) (maximum (rest arr) (sub1\
    \ k))))))\n", "  (if (= k 0)\n      (list 0)\n      (let ([max-so-far 0])\n  \
    \      (let loop ([i 0])\n          (cond [(< i k) (loop (+ i 1))]\n         \
    \       [else (loop (+ i 1))]\n                (else (cons (max arr (- i 1)) max-so-far)))))\n\
    \        (loop (length arr))))))\n", "  (if (= k 0)\n      (list arr)\n      (append\
    \ (maximum (rest arr) (sub1 k)) (maximum (first arr) (sub1 k)))))\n", "  (if (=\
    \ k 0)\n      (list 0)\n      (let ([max-so-far 0])\n        (if (null? (rest\
    \ arr))\n            (cons (car arr) max-so-far)\n            (let ([cur (car\
    \ arr)])\n              (if (> (car arr) max-so-far)\n                  (cons\
    \ cur max-so-far)\n                  (let ([next (maximum (rest arr) (sub1 k))]\n\
    \                        (cons cur next)))))\n            (let ([next (maximum\
    \ (rest arr) (sub1 k))]\n                  (cons cur next)))))))\n", "  (if (=\
    \ k 0)\n      (list arr)\n      (append (maximum (rest arr) (sub1 k)) (maximum\
    \ (rest arr) (sub1 k))))\n)\n", "  (if (= k 0)\n      (list 0)\n      (let ([max-so-far\
    \ 0])\n        (let loop ([i 0])\n          (if (< i k)\n              (loop (+\
    \ i 1))\n              (let ([cur (car arr)])\n                (if (> cur max-so-far)\n\
    \                    (set! max-so-far cur)\n                    (loop (+ i 1))))))))\n\
    </code>\n<|/ a tags=racket,scheme |>\n<| c |>\nThis doesn't work. Try it with\
    \ `(maximum (list -3 -4 5) 3)`.\n<|/ c |>\n<| c |>\nI see what you mean. Fixed\
    \ now.\n<|/ c |>\n<| c |>\nI see what you mean. Fixed now.\n<|/ c |>\n<| c |>\n\
    I see what you mean. Fixed now.\n<|/ c |>\n<| c |>\nI see what you mean. Fixed\
    \ now.\n<|/ c |>\n<| a tags=racket,scheme |>\n<code>", "  (if (= k 0)\n      (list\
    \ arr)\n      (append (maximum (rest arr) (sub1 k)) (maximum (rest arr) (sub1\
    \ k)))))\n", "  (if (= k 0)\n      (list 0)\n      (let ([max (car arr)])\n  \
    \      (if (null? (cdr arr))\n            (cons max 0)\n            (let ([next\
    \ (maximum (cdr arr) (sub1 k))]\n                  [max (if (> max next) max next)])\n\
    \              (cons max next)))))\n", "  (if (= k 0)\n      (list 0)\n      (let\
    \ ([max (car arr)])\n        (if (> (car arr) max)\n            (let ([max (car\
    \ arr)])\n              (if (> (car arr) max)\n                  (let ([max (car\
    \ arr)])\n                    (if (> (car arr) max)\n                        (let\
    \ ([max (car arr)])\n                          (if (> (car arr) max)\n       \
    \                       (let ([max (car arr)])\n                             \
    \   (if (> (car arr) max)\n                                    (let ([max (car\
    \ arr)])\n                                      (if (> (car arr) max)\n      \
    \                                    (let ([max (car arr)])\n                \
    \                            (if (> (car arr) max)\n                         \
    \                       (let ([max (car arr)])\n                             \
    \                     (if (> (car arr) max)\n                                \
    \                      (let ([max (car arr)])\n                              \
    \                          (if (> (car arr) max)\n                           \
    \                                 (let ([max (car arr)])\n                   \
    \                                           (if (> (car arr) max)\n          \
    \                                                        (let ([max (car arr)])\n\
    \                                                                    (if (> (car\
    \ arr) max)\n                                                                \
    \        (let ([max (car arr)])\n                                            \
    \                              (if (> (car arr) max)\n                       \
    \                                                       (let ([max (car arr)])\n\
    \                                                                            \
    \    (if (> (car arr) max)\n                                                 \
    \                                   (let ([max (car arr)])\n                 \
    \                                                                     (if (> (car\
    \ arr) max)\n                                                                \
    \                          (let ([max (car arr)])\n                          \
    \                                                                  (if (> (car\
    \ arr) max)\n                                                                \
    \                                (let ([max (car arr)])\n                    \
    \                                                                            \
    \  (if (> (car arr) max)\n                                                   \
    \                                                   (let ([max (car arr)])\n \
    \                                                                            \
    \                           (if (> (car arr) max)\n                          \
    \                                                                            \
    \      (let ([max (car arr)])\n                                              \
    \                                                                (if (> (car arr)\
    \ max)\n                                                                     \
    \                                             (let ([max (car arr)])\n       \
    \                                                                            \
    \                                 (if (> (car arr) max)\n                    \
    \                                                                            \
    \                        (let ([max (car arr)])\n                            \
    \                                                                            \
    \                  (if (> (car arr) max)\n                                   \
    \                                                                            \
    \               (let ([max (car arr)])\n                                     \
    \                                                                            \
    \               (if (> (car arr) max)\n                                      \
    \                                                                            \
    \                (let ([max (car arr)])\n                                    \
    \                                                                            \
    \                    (if (> (car arr) max)\n                                 \
    \                                                                            \
    \                           (let ([max (car arr)])\n                         \
    \                                                                            \
    \                                     (if (> (car arr) ", "  (if (= k 0)\n   \
    \   (list 0)\n      (append (maximum (rest arr) (sub1 k)) (maximum (rest arr)\
    \ (sub1 k)))))\n", "  (if (= k 0)\n      (list arr)\n      (append (maximum (rest\
    \ arr) (sub1 k)) (maximum (rest arr) (sub1 k))))))\n", "  (if (= k 0)\n      (list\
    \ arr)\n      (let ([head (first arr)])\n        (if (< head (first arr))\n  \
    \          (maximum (rest arr) (sub1 k))\n            (maximum (rest arr) (sub1\
    \ k))))))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n\
    \    [else (cons (max (rest arr) k) (maximum (rest arr) (sub1 k)))]))\n", "  (if\
    \ (= k 0)\n      (list arr)\n      (append (maximum (rest arr) (sub1 k)) (maximum\
    \ (rest arr) (sub1 k))))) ;; #lang racket\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    Thanks for your answer! I understand your code, but I still don't understand why\
    \ it works. Could you please explain it to me?\n<|/ c |>\n<| c |>\nI added some\
    \ comments to the code. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer!\
    \ I understand your code, but I still don't understand why it works. Could you\
    \ please explain it to me?\n<|/ c |>\n<| c |>\nI added some comments to the code.\
    \ Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer! I understand your\
    \ code, but I still don't understand why it works. Could you please explain it\
    \ to me?\n<|/ c |>\n<| a tags=racket,scheme |>\n<code>", "  (if (= k 0)\n    \
    \  (list arr)\n      (let ([max-so-far #f (max-so-far #f (first arr))])\n    \
    \    (if (< k 1)\n            (cons max-so-far max-so-far)\n            (let ([i\
    \ (- k 1)])\n              (if (< i k)\n                  (cons max-so-far max-so-far)\n\
    \                  (let ([j (+ i 1)])\n                    (if (< j k)\n     \
    \                   (cons max-so-far max-so-far)\n                        (let\
    \ ([m (max arr (subseq arr i j))])\n                          (if (> m max-so-far)\n\
    \                              (cons max-so-far max-so-far)\n                \
    \              (maximum (subseq arr i j) k))))))))))\n", "  (if (= k 0)\n    \
    \  (list arr)\n      (append (maximum (rest arr) (sub1 k)) (maximum (rest arr)\
    \ (sub1 k)))))\n", "  (if (= k 0)\n      (list arr)\n      (append (maximum (rest\
    \ arr) (sub1 k)) (maximum (rest arr) (sub1 k))))))\n", "  (if (= k 0)\n      (list\
    \ arr)\n      (let ([head (first arr)])\n        (if (> head (first arr))\n  \
    \          (append (maximum (rest arr) (sub1 k)) (list head))\n            (append\
    \ (maximum (rest arr) (sub1 k)) (list head))))))\n", "  (if (= k 0)\n      (list\
    \ arr)\n      (append (maximum (rest arr) (sub1 k)) (maximum (rest arr) (sub1\
    \ k)))))\n", "  (if (= k 0)\n      (list arr)\n      (let ([max (first arr)])\n\
    \        (if (null? (rest arr))\n            (list max)\n            (let ([next\
    \ (maximum (rest arr) (sub1 k))]\n                  [max (if (> max next) max\
    \ next)])\n              (cons max max))))))\n", "  (if (= k 0)\n      (list arr)\n\
    \      (append (maximum (rest arr) (sub1 k)) (maximum (first arr) (sub1 k))))))\n",
  "  (if (= k 0)\n      (list arr)\n      (append (maximum (rest arr) (sub1 k)) (maximum\
    \ (first arr) (sub1 k))))))\n", "  (if (= k 0)\n      (list 0)\n      (let ([max\
    \ (car arr)])\n        (if (> (car arr) max)\n            (let ([max (car arr)])\n\
    \              (if (> (car arr) max)\n                  (let ([max (car arr)])\n\
    \                    (if (> (car arr) max)\n                        (let ([max\
    \ (car arr)])\n                          (if (> (car arr) max)\n             \
    \                 (let ([max (car arr)])\n                                (if\
    \ (> (car arr) max)\n                                    (let ([max (car arr)])\n\
    \                                      (if (> (car arr) max)\n               \
    \                           (let ([max (car arr)])\n                         \
    \                   (if (> (car arr) max)\n                                  \
    \              (let ([max (car arr)])\n                                      \
    \            (if (> (car arr) max)\n                                         \
    \             (let ([max (car arr)])\n                                       \
    \                 (if (> (car arr) max)\n                                    \
    \                        (let ([max (car arr)])\n                            \
    \                                  (if (> (car arr) max)\n                   \
    \                                               (let ([max (car arr)])\n     \
    \                                                               (if (> (car arr)\
    \ max)\n                                                                     \
    \   (let ([max (car arr)])\n                                                 \
    \                         (if (> (car arr) max)\n                            \
    \                                                  (let ([max (car arr)])\n  \
    \                                                                            \
    \  (if (> (car arr) max)\n                                                   \
    \                                 (let ([max (car arr)])\n                   \
    \                                                                   (if (> (car\
    \ arr) max)\n                                                                \
    \                          (let ([max (car arr)])\n                          \
    \                                                                  (if (> (car\
    \ arr) max)\n                                                                \
    \                                (let ([max (car arr)])\n                    \
    \                                                                            \
    \  (if (> (car arr) max)\n                                                   \
    \                                                   (let ([max (car arr)])\n \
    \                                                                            \
    \                           (if (> (car arr) max)\n                          \
    \                                                                            \
    \      (let ([max (car arr)])\n                                              \
    \                                                                (if (> (car arr)\
    \ max)\n                                                                     \
    \                                             (let ([max (car arr)])\n       \
    \                                                                            \
    \                                 (if (> (car arr) max)\n                    \
    \                                                                            \
    \                        (let ([max (car arr)])\n                            \
    \                                                                            \
    \                  (if (> (car arr) max)\n                                   \
    \                                                                            \
    \               (let ([max (car arr)])\n                                     \
    \                                                                            \
    \               (if (> (car arr) max)\n                                      \
    \                                                                            \
    \                (let ([max (car arr)])\n                                    \
    \                                                                            \
    \                    (if (> (car arr) max)\n                                 \
    \                                                                            \
    \                           (let ([max (car arr)])\n                         \
    \                                                                            \
    \                                     (if (> (car arr) ", "  (if (= k 0)\n   \
    \   (list 0)\n      (let ([max (car arr)])\n        (if (< (car arr) max)\n  \
    \          (cons max \n                   (maximum (cdr arr) (sub1 k)))\n    \
    \        (maximum (cdr arr) (sub1 k))))))\n", "  (cond\n    [(empty? arr) empty]\n\
    \    [(= k 0) (first arr)]\n    [else (max (rest arr) (- k 1))]))\n", "  (if (=\
    \ k 0)\n      (list arr)\n      (append (maximum (rest arr) (sub1 k)) (maximum\
    \ (first arr) (sub1 k))))))\n", "  (if (= k 0)\n      (list arr)\n      (append\
    \ (maximum (rest arr) (sub1 k)) (maximum (first arr) (sub1 k)))))\n", "  (if (=\
    \ k 0)\n      (list arr)\n      (append (maximum (rest arr) (sub1 k)) (maximum\
    \ (rest arr) (sub1 k)))))\n", "  (if (= k 0)\n      (list arr)\n      (let ([max-so-far\
    \ #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx\
    \ #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx\
    \ #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx\
    \ #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx\
    \ #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx\
    \ #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx\
    \ #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx\
    \ #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx\
    \ #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx\
    \ #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx\
    \ #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx\
    \ #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx\
    \ #f max-so-far-idx #f max-so-far-", "  (cond\n    [(empty? arr) empty]\n    [(=\
    \ k 0) (first arr)]\n    [else (max (rest arr) (- k 1))]))\n", "  (if (= k 0)\n\
    \      (list 0)\n      (let ([max (car arr)])\n        (if (< (car arr) max)\n\
    \            (cons max (maximum (cdr arr) (sub1 k)))\n            (maximum (cdr\
    \ arr) (sub1 k))))))\n", "  (if (= k 0)\n      (list 0)\n      (let ([max-so-far\
    \ 0])\n        (let loop ([i 0])\n          (if (< i k)\n              (loop (+\
    \ i 1))\n              (let ([cur (car arr)])\n                (if (> cur max-so-far)\n\
    \                    (set! max-so-far cur)\n                    (loop (+ i 1))))))))\n",
  "  (if (= k 0)\n      (list arr)\n      (append (maximum (rest arr) (sub1 k)) (maximum\
    \ (rest arr) (sub1 k))))))\n", "  (if (= k 0)\n      (list arr)\n      (append\
    \ (maximum (rest arr) (sub1 k)) (maximum (first arr) (sub1 k))))))\n", "  (cond\n\
    \    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (max (rest arr)\
    \ (- k 1))]))\n", "  (if (= k 0)\n      (list arr)\n      (append (maximum (rest\
    \ arr) (sub1 k)) (maximum (first arr) (sub1 k)))))\n", "  (if (= k 0)\n      (list\
    \ arr)\n      (append (maximum (rest arr) (sub1 k)) (maximum (rest arr) (sub1\
    \ k)))))\n", "  (if (= k 0)\n      (list arr)\n      (append (maximum (rest arr)\
    \ (sub1 k)) (maximum (rest arr) (sub1 k))))))\n", "  (if (= k 0)\n      (list\
    \ arr)\n      (append (maximum (rest arr) (sub1 k)) (maximum (first arr) (sub1\
    \ k))))))\n", "  (if (= k 0)\n      (list arr)\n      (let ([max (car arr)])\n\
    \        (if (< (length arr) k)\n            (cons max \n                   (maximum\
    \ (cdr arr) (sub1 k)))\n            (cons max \n                   (maximum (cdr\
    \ arr) (sub1 k)))))))\n", "  (if (= k 0)\n      (list arr)\n      (let ([max-so-far\
    \ #f max-so-far-idx #f max-so-far-idx max-so-far-idx max-so-far-idx max-so-far-idx\
    \ max-so-far-idx max-so-far-idx max-so-far-idx max-so-far-idx max-so-far-idx max-so-far-idx\
    \ max-so-far-idx max-so-far-idx max-so-far-idx max-so-far-idx max-so-far-idx max-so-far-idx\
    \ max-so-far-idx max-so-far-idx max-so-far-idx max-so-far-idx max-so-far-idx max-so-far-idx\
    \ max-so-far-idx max-so-far-idx max-so-far-idx max-so-far-idx max-so-far-idx max-so-far-idx\
    \ max-so-far-idx max-so-far-idx max-so-far-idx max-so-far-idx max-so-far-idx max-so-far-idx\
    \ max-so-far-idx max-so-far-idx max-so-far-idx max-so-far-idx max-so-far-idx max-so-far-idx\
    \ max-so-far-idx max-so-far-idx max-so-far-idx max-so-far-idx max-so-far-idx max-so-far-idx\
    \ max-so-far-idx max-so-far-idx max-so-far-idx max-so-far-idx max-so-far-idx max-so-far-idx\
    \ max-so-far-idx max-so-far-idx max-so-far-idx max-so-far-idx max-so-far-idx max-so-far-idx\
    \ max-so-far-idx max-so-far-idx max-so-far-idx max-so-far-idx max-so-far-idx max-so-far-idx\
    \ max-so-far-idx max-so-far-idx max-so-far-idx max-so-far-idx max-so-far-idx max-so-far-idx\
    \ max-so-far-idx max-so-far-idx max-so-far-idx max-so-far-idx max-so-far-idx max-so-far-idx\
    \ max-so-far-idx max-so-far-idx max-so-far-idx max-so-far-idx max-so-far-", " \
    \ (if (= k 0)\n      (list arr)\n      (append (maximum (rest arr) (sub1 k)) (maximum\
    \ (first arr) (sub1 k)))))\n", "  (if (= k 0)\n      (list arr)\n      (append\
    \ (maximum (rest arr) (sub1 k)) (maximum (rest arr) (sub1 k))))))\n", "  (if (=\
    \ k 0)\n      (list 0)\n      (let ([max-so-far 0])\n        (if (null? arr)\n\
    \            (list max-so-far)\n            (let ([cur (car arr)])\n         \
    \     (if (< cur max-so-far)\n                  (list max-so-far)\n          \
    \        (let ([new-max (max cur max-so-far)])\n                    (if (< new-max\
    \ max-so-far)\n                        (list new-max)\n                      \
    \  (let ([new-max-so-far (cons new-max max-so-far)])\n                       \
    \   (if (< new-max-so-far max-so-far)\n                              (list new-max-so-far)\n\
    \                              (maximum (cdr arr) (k - 1))))))))))))\n", "  (cond\n\
    \    [(empty? arr) (list -1)]\n    [(= k 0) (first arr)]\n    [else (append (maximum\
    \ (rest arr) (sub1 k)) (first arr))]\n  ))\n", "  (cond\n    [(empty? arr) (list\
    \ 0)]\n    [(= k 0) (first arr)]\n    [else (append (maximum (rest arr) (sub1\
    \ k)) (first arr))]))\n", "  (if (= k 0)\n      (list arr)\n      (let ([max-so-far\
    \ #f (max-so-far-so-far #f #f)])\n        (for ([i (in-range (+ k 1))])\n    \
    \      (let ([curr (car arr)])\n            (if (< i k)\n                (set!\
    \ max-so-far #t)\n                (set! max-so-far-so-far #f (max curr (car max-so-far-so-far))))\n\
    \            (if (> i k)\n                (set! max-so-far-so-far #f (max curr\
    \ (car max-so-far-so-far))))))))\n", "  (if (= k 0)\n      (list 0)\n      (let\
    \ ([max-so-far 0])\n        (let loop ([i 0] [arr arr] [k k])\n          (cond\
    \ [(< i k) (loop (+ i 1) (conj arr (car arr)) (- k 1))]\n                [else\
    \ (loop (+ i 1) (conj arr (car arr)) k)])))\n        (reverse (sort (loop (length\
    \ arr) arr k))))))\n", "  (if (= k 0)\n      (list arr)\n      (let ([max-so-far\
    \ #f])\n        (let loop ([i 0] [arr arr] [k k] [max-so-far max-so-far])\n  \
    \        (cond [(< i k) (loop (+ i 1) (append arr (list max-so-far)) (- k 1) max-so-far)]\n\
    \                [else (loop (+ i 1) arr (- k 1) (if (> max-so-far arr) arr max-so-far))])))))\n",
  "  (if (= k 0)\n      (list arr)\n      (let ([max-so-far #f max-so-far-index #f\
    \ max-so-far-value #f max-so-far-index #f max-so-far-value #f max-so-far-index\
    \ #f max-so-far-value #f max-so-far-index #f max-so-far-value #f max-so-far-index\
    \ #f max-so-far-value #f max-so-far-index #f max-so-far-value #f max-so-far-index\
    \ #f max-so-far-value #f max-so-far-index #f max-so-far-value #f max-so-far-index\
    \ #f max-so-far-value #f max-so-far-index #f max-so-far-value #f max-so-far-index\
    \ #f max-so-far-value #f max-so-far-index #f max-so-far-value #f max-so-far-index\
    \ #f max-so-far-value #f max-so-far-index #f max-so-far-value #f max-so-far-index\
    \ #f max-so-far-value #f max-so-far-index #f max-so-far-value #f max-so-far-index\
    \ #f max-so-far-value #f max-so-far-index #f max-so-far-value #f max-so-far-index\
    \ #f max-so-far-value #f max-so-far-index #f max-so-far-value #f max-so-far-index\
    \ #f max-so-far-value #f max-so-far-index #f max-so-far-value #f max-so-far-index\
    \ #f max-so-far-value #f max-so-far-index #f max-so-far-value #f max-so-far-index\
    \ #f max-so-far-value #f max-so-far-index #f max-so-far-value #f max-so-far-index\
    \ #f max-so-far-value #f max-so-far-index #f max-so-far-value #f max-so-far-index\
    \ #f max-so-far-value #f max-so-far-index #f max-so-far-value #f max-so-far-index\
    \ #f max-so-far-", "  (if (= k 0)\n      (list arr)\n      (let ([max-so-far #f\
    \ max-so-far-idx #f max-so-far-idx max-so-far-idx #f max-so-far-idx max-so-far-idx\
    \ #f max-so-far-idx max-so-far-idx #f max-so-far-idx max-so-far-idx #f max-so-far-idx\
    \ max-so-far-idx #f max-so-far-idx max-so-far-idx #f max-so-far-idx max-so-far-idx\
    \ #f max-so-far-idx max-so-far-idx #f max-so-far-idx max-so-far-idx #f max-so-far-idx\
    \ max-so-far-idx #f max-so-far-idx max-so-far-idx #f max-so-far-idx max-so-far-idx\
    \ #f max-so-far-idx max-so-far-idx #f max-so-far-idx max-so-far-idx #f max-so-far-idx\
    \ max-so-far-idx #f max-so-far-idx max-so-far-idx #f max-so-far-idx max-so-far-idx\
    \ #f max-so-far-idx max-so-far-idx #f max-so-far-idx max-so-far-idx #f max-so-far-idx\
    \ max-so-far-idx #f max-so-far-idx max-so-far-idx #f max-so-far-idx max-so-far-idx\
    \ #f max-so-far-idx max-so-far-idx #f max-so-far-idx max-so-far-idx #f max-so-far-idx\
    \ max-so-far-idx #f max-so-far-idx max-so-far-idx #f max-so-far-idx max-so-far-idx\
    \ #f max-so-far-idx max-so-far-idx #f max-so-far-idx max-so-far-idx #f max-so-far-idx\
    \ max-so-far-idx #f max-so-far-idx max-so-far-idx #f max-so-far-idx max-so-far-idx\
    \ #f max-so-far-idx max-so-far-idx #f max-so-far-idx max-so-far-idx #f max-so-far-idx\
    \ max-so-", "  (if (= k 0)\n      (list 0)\n      (let ([max (car arr)])\n   \
    \     (if (> (car arr) max)\n            (cons max (maximum (cdr arr) (sub1 k)))\n\
    \            (maximum (cdr arr) (sub1 k)))))) \n", "  (cond\n    [(empty? arr)\
    \ empty]\n    [(= k 0) (first arr)]\n    [else (append (maximum (rest arr) (sub1\
    \ k)) (first arr))]))\n", "  (if (= k 0)\n      (list 0)\n      (let ([max (car\
    \ arr)])\n        (if (> (car arr) max)\n            (let ([max (car arr)])\n\
    \              (if (> (car arr) max)\n                  (let ([max (car arr)])\n\
    \                    (if (> (car arr) max)\n                        (let ([max\
    \ (car arr)])\n                          (if (> (car arr) max)\n             \
    \                 (let ([max (car arr)])\n                                (if\
    \ (> (car arr) max)\n                                    (let ([max (car arr)])\n\
    \                                      (if (> (car arr) max)\n               \
    \                           (let ([max (car arr)])\n                         \
    \                   (if (> (car arr) max)\n                                  \
    \              (let ([max (car arr)])\n                                      \
    \            (if (> (car arr) max)\n                                         \
    \             (let ([max (car arr)])\n                                       \
    \                 (if (> (car arr) max)\n                                    \
    \                        (let ([max (car arr)])\n                            \
    \                                  (if (> (car arr) max)\n                   \
    \                                               (let ([max (car arr)])\n     \
    \                                                               (if (> (car arr)\
    \ max)\n                                                                     \
    \   (let ([max (car arr)])\n                                                 \
    \                         (if (> (car arr) max)\n                            \
    \                                                  (let ([max (car arr)])\n  \
    \                                                                            \
    \  (if (> (car arr) max)\n                                                   \
    \                                 (let ([max (car arr)])\n                   \
    \                                                                   (if (> (car\
    \ arr) max)\n                                                                \
    \                          (let ([max (car arr)])\n                          \
    \                                                                  (if (> (car\
    \ arr) max)\n                                                                \
    \                                (let ([max (car arr)])\n                    \
    \                                                                            \
    \  (if (> (car arr) max)\n                                                   \
    \                                                   (let ([max (car arr)])\n \
    \                                                                            \
    \                           (if (> (car arr) max)\n                          \
    \                                                                            \
    \      (let ([max (car arr)])\n                                              \
    \                                                                (if (> (car arr)\
    \ max)\n                                                                     \
    \                                             (let ([max (car arr)])\n       \
    \                                                                            \
    \                                 (if (> (car arr) max)\n                    \
    \                                                                            \
    \                        (let ([max (car arr)])\n                            \
    \                                                                            \
    \                  (if (> (car arr) max)\n                                   \
    \                                                                            \
    \               (let ([max (car arr)])\n                                     \
    \                                                                            \
    \               (if (> (car arr) max)\n                                      \
    \                                                                            \
    \                  (let ([max (car arr)])\n                                  \
    \                                                                            \
    \                        (if (> (car arr) max)\n                             \
    \                                                                            \
    \                               (let ([max (car arr)])\n                     \
    \                                                                            \
    \                                         (if (> (car arr) max)", "  (if (= k\
    \ 0)\n      (list arr)\n      (append (maximum (rest arr) (sub1 k)) (maximum (rest\
    \ arr) (sub1 k))))))\n", "  (if (= k 0)\n      (list arr)\n      (append (maximum\
    \ (rest arr) (sub1 k)) (maximum (rest arr) (sub1 k)))))\n", "  (if (= k 0)\n \
    \     (list arr)\n      (append (maximum (rest arr) (sub1 k)) (maximum (first\
    \ arr) (sub1 k)))))\n", "  (if (= k 0)\n      (list 0)\n      (let ([max-so-far\
    \ 0])\n        (let loop ([i 0])\n          (if (< i k)\n              (if (>\
    \ (car arr) (cdr max-so-far))\n                  (set! max-so-far car arr)\n \
    \                 (loop (+ i 1))\n              (loop (+ i 1))))))))\n", "  (if\
    \ (= k 0)\n      (list arr)\n      (let ([max-so-far #f (max-so-far (cdr arr)\
    \ k)]\n            [max-so-far-k #f (max-so-far-k arr k)]\n            [max-so-far-arr\
    \ #f (max-so-far-arr (cdr arr) k)]\n            [max-so-far-arr-k #f (max-so-far-arr-k\
    \ arr k)]\n            [max-so-far-arr-arr #f (max-so-far-arr-arr (cdr arr) k)]\n\
    \            [max-so-far-arr-arr-k #f (max-so-far-arr-arr-k arr k)]\n        \
    \    [max-so-far-arr-arr-arr #f (max-so-far-arr-arr-arr (cdr arr) k)])\n     \
    \   (if (< max-so-far max-so-far-k)\n            (if (< max-so-far max-so-far-arr)\n\
    \                (if (< max-so-far max-so-far-arr-k)\n                    (if\
    \ (< max-so-far max-so-far-arr-arr)\n                        (if (< max-so-far\
    \ max-so-far-arr-arr-k)\n                            (if (< max-so-far max-so-far-arr-arr-arr)\n\
    \                                (if (< max-so-far max-so-far-arr-arr-arr-k)\n\
    \                                    (if (< max-so-far max-so-far-arr-arr-arr-arr)\n\
    \                                        (if (< max-so-far max-so-far-arr-arr-arr-arr-k)\n\
    \                                            (if (< max-so-far max-so-far-arr-arr-arr-arr-arr)\n\
    \                                                (if (< max-so-far max-so-far-arr-arr-arr-arr-k)\n\
    \                                                    (if (< max-so-far max-so-far-arr-arr-arr-arr-arr)\n\
    \                                                        (if (< max-so-far max-so-far-arr-arr-arr-arr-arr-k)\n\
    \                                                            (if (< max-so-far\
    \ max-so-far-arr-arr-arr-arr-arr)\n                                          \
    \                      (if (< max-so-far max-so-far-arr-arr-arr-arr-arr-k)\n \
    \                                                                   (if (< max-so-far\
    \ max-so-far-arr-arr", "  (if (= k 0)\n      (list arr)\n      (let ([max (car\
    \ arr)])\n        (if (> (car arr) max)\n            (let ([new (car arr)])\n\
    \              (if (> (car arr) max)\n                  (list max)\n         \
    \         (list new))\n                (maximum (cdr arr) (sub1 k)))))))\n", " \
    \ (if (= k 0)\n      (list arr)\n      (let ([max-so-far #f (max-so-far-so-far\
    \ (car arr) k)]\n            [max-so-far-so-far (car arr) k (maximum (cdr arr)\
    \ k-1)])\n        (if (< max-so-far-so-far (car arr))\n            (cons (car\
    \ arr) max-so-far-so-far)\n            (cons (car arr) max-so-far))))))\n", " \
    \ (if (= k 0)\n      (list 0)\n      (let ([max-so-far 0])\n        (let loop\
    \ ([i 0] [arr arr] [k k] [max-so-far max-so-far])\n          (cond [(null? arr)\
    \ max-so-far]\n                [else (loop (+ i 1) (first arr) (- k 1) (max max-so-far\
    \ first arr))])))\n        (loop (length arr) arr k max-so-far)))) \n", "  (if\
    \ (= k 0)\n      (list arr)\n      (append (maximum (rest arr) (sub1 k)) (maximum\
    \ (rest arr) (sub1 k))))) \n", "  (if (= k 0)\n      (list arr)\n      (append\
    \ (maximum (rest arr) (sub1 k)) (maximum (rest arr) (sub1 k))))\n  )\n", "  (cond\n\
    \    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max (rest\
    \ arr) k) (maximum (rest arr) (sub1 k)))]))\n", "  (if (= k 0)\n      (list 0)\n\
    \      (let ([max-so-far 0])\n        (let loop ([i 0])\n          (if (< i k)\n\
    \              (loop (+ i 1))\n              (loop (+ i 1)\n                 \
    \   (cons (max arr (- i 1)) max-so-far)))))))))\n", "  (if (= k 0)\n      (list\
    \ arr)\n      (let ([max (car arr)])\n        (if (> (car arr) max)\n        \
    \    (let ([max (car arr)])\n              (if (> (car arr) max)\n           \
    \       (let ([max (car arr)])\n                    (if (> (car arr) max)\n  \
    \                      (let ([max (car arr)])\n                          (if (>\
    \ (car arr) max)\n                              (let ([max (car arr)])\n     \
    \                           (if (> (car arr) max)\n                          \
    \          (let ([max (car arr)])\n                                      (if (>\
    \ (car arr) max)\n                                          (let ([max (car arr)])\n\
    \                                            (if (> (car arr) max)\n         \
    \                                       (let ([max (car arr)])\n             \
    \                                     (if (> (car arr) max)\n                \
    \                                      (let ([max (car arr)])\n              \
    \                                          (if (> (car arr) max)\n           \
    \                                                 (let ([max (car arr)])\n   \
    \                                                           (if (> (car arr) max)\n\
    \                                                                  (let ([max\
    \ (car arr)])\n                                                              \
    \      (if (> (car arr) max)\n                                               \
    \                         (let ([max (car arr)])\n                           \
    \                                               (if (> (car arr) max)\n      \
    \                                                                        (let\
    \ ([max (car arr)])\n                                                        \
    \                        (if (> (car arr) max)\n                             \
    \                                                       (let ([max (car arr)])\n\
    \                                                                            \
    \          (if (> (car arr) max)\n                                           \
    \                                               (let ([max (car arr)])\n     \
    \                                                                            \
    \           (if (> (car arr) max)\n                                          \
    \                                                      (let ([max (car arr)])\n\
    \                                                                            \
    \                      (if (> (car arr) max)\n                               \
    \                                                                       (let ([max\
    \ (car arr)])\n                                                              \
    \                                          (if (> (car arr) max)\n           \
    \                                                                            \
    \                     (let ([max (car arr)])\n                               \
    \                                                                            \
    \   (if (> (car arr) max)\n                                                  \
    \                                                                (let ([max (car\
    \ arr)])\n                                                                   \
    \                                                 (if (> (car arr) max)\n    \
    \                                                                            \
    \                                        (let ([max (car arr)])\n            \
    \                                                                            \
    \                                  (if (> (car arr) max)\n                   \
    \                                                                            \
    \                               (let ([max (car arr)])\n                     \
    \                                                                            \
    \                               (if (> (car arr) max)\n                      \
    \                                                                            \
    \                                (let ([max (car arr)])\n                    \
    \                                                                            \
    \                                    (if (> (car arr) max)\n                 \
    \                                                                            \
    \                                           (let ([max (car arr)])\n         \
    \                                                                            \
    \                                                     (if (> (car arr) ", "  (if\
    \ (= k 0)\n      (list arr)\n      (let ([max (car arr)])\n        (if (> (car\
    \ arr) max)\n            (let ([max (car arr)])\n              (if (> (car arr)\
    \ max)\n                  (let ([max (car arr)])\n                    (if (> (car\
    \ arr) max)\n                        (let ([max (car arr)])\n                \
    \          (if (> (car arr) max)\n                              (let ([max (car\
    \ arr)])\n                                (if (> (car arr) max)\n            \
    \                        (let ([max (car arr)])\n                            \
    \          (if (> (car arr) max)\n                                          (let\
    \ ([max (car arr)])\n                                            (if (> (car arr)\
    \ max)\n                                                (let ([max (car arr)])\n\
    \                                                  (if (> (car arr) max)\n   \
    \                                                   (let ([max (car arr)])\n \
    \                                                       (if (> (car arr) max)\n\
    \                                                            (let ([max (car arr)])\n\
    \                                                              (if (> (car arr)\
    \ max)\n                                                                  (let\
    \ ([max (car arr)])\n                                                        \
    \            (if (> (car arr) max)\n                                         \
    \                               (let ([max (car arr)])\n                     \
    \                                                     (if (> (car arr) max)\n\
    \                                                                            \
    \  (let ([max (car arr)])\n                                                  \
    \                              (if (> (car arr) max)\n                       \
    \                                                             (let ([max (car\
    \ arr)])\n                                                                   \
    \                   (if (> (car arr) max)\n                                  \
    \                                                        (let ([max (car arr)])\n\
    \                                                                            \
    \                (if (> (car arr) max)\n                                     \
    \                                                           (let ([max (car arr)])\n\
    \                                                                            \
    \                      (if (> (car arr) max)\n                               \
    \                                                                       (let ([max\
    \ (car arr)])\n                                                              \
    \                                          (if (> (car arr) max)\n           \
    \                                                                            \
    \                     (let ([max (car arr)])\n                               \
    \                                                                            \
    \   (if (> (car arr) max)\n                                                  \
    \                                                                (let ([max (car\
    \ arr)])\n                                                                   \
    \                                                 (if (> (car arr) max)\n    \
    \                                                                            \
    \                                        (let ([max (car arr)])\n            \
    \                                                                            \
    \                                  (if (> (car arr) max)\n                   \
    \                                                                            \
    \                               (let ([max (car arr)])\n                     \
    \                                                                            \
    \                               (if (> (car arr) max)\n                      \
    \                                                                            \
    \                                  (let ([max (car arr)])\n                  \
    \                                                                            \
    \                                        (if (> (car arr) max)\n             \
    \                                                                            \
    \                                                 (let ([max (car arr)])\n   \
    \                                                                            \
    \                                                             (if (> (car arr)\
    \ max)", "  (if (= k 0)\n      (list arr)\n      (let ([max (car arr)])\n    \
    \    (if (> (car arr) max)\n            (let ([max (car arr)])\n             \
    \ (if (> (car arr) max)\n                  (let ([max (car arr)])\n          \
    \          (if (> (car arr) max)\n                        (let ([max (car arr)])\n\
    \                          (if (> (car arr) max)\n                           \
    \   (let ([max (car arr)])\n                                (if (> (car arr) max)\n\
    \                                    (let ([max (car arr)])\n                \
    \                      (if (> (car arr) max)\n                               \
    \           (let ([max (car arr)])\n                                         \
    \   (if (> (car arr) max)\n                                                (let\
    \ ([max (car arr)])\n                                                  (if (>\
    \ (car arr) max)\n                                                      (let ([max\
    \ (car arr)])\n                                                        (if (>\
    \ (car arr) max)\n                                                           \
    \ (let ([max (car arr)])\n                                                   \
    \           (if (> (car arr) max)\n                                          \
    \                        (let ([max (car arr)])\n                            \
    \                                        (if (> (car arr) max)\n             \
    \                                                           (let ([max (car arr)])\n\
    \                                                                          (if\
    \ (> (car arr) max)\n                                                        \
    \                      (let ([max (car arr)])\n                              \
    \                                                  (if (> (car arr) max)\n   \
    \                                                                            \
    \     (let ([max (car arr)])\n                                               \
    \                                       (if (> (car arr) max)\n              \
    \                                                                            (let\
    \ ([max (car arr)])\n                                                        \
    \                                    (if (> (car arr) max)\n                 \
    \                                                                            \
    \   (let ([max (car arr)])\n                                                 \
    \                                                 (if (> (car arr) max)\n    \
    \                                                                            \
    \                      (let ([max (car arr)])\n                              \
    \                                                                          (if\
    \ (> (car arr) max)\n                                                        \
    \                                                    (let ([max (car arr)])\n\
    \                                                                            \
    \                                  (if (> (car arr) max)\n                   \
    \                                                                            \
    \                   (let ([max (car arr)])\n                                 \
    \                                                                            \
    \       (if (> (car arr) max)\n                                              \
    \                                                                          (let\
    \ ([max (car arr)])\n                                                        \
    \                                                                  (if (> (car\
    \ arr) max)\n                                                                \
    \                                                              (let ([max (car\
    \ arr)])\n                                                                   \
    \                                                             (if (> (car arr)\
    \ max)\n                                                                     \
    \                                                               (let ([max (car\
    \ arr)])\n                                                                   \
    \                                                                   (if (> (car\
    \ arr) max)\n                                                                \
    \                                                                        (let\
    \ ([max (car arr)])\n                                                        \
    \                                                                            \
    \      (if (> (car arr) max)", "  (if (= k 0)\n      (list arr)\n      (append\
    \ (maximum (rest arr) (sub1 k)) (maximum (first arr) (sub1 k))))))\n", "  (if\
    \ (= k 0)\n      (list arr)\n      (let ([max (car arr)])\n        (if (> (car\
    \ arr) max)\n            (let ([max (car arr)])\n              (if (> (car arr)\
    \ max)\n                  (let ([max (car arr)])\n                    (if (> (car\
    \ arr) max)\n                        (let ([max (car arr)])\n                \
    \          (if (> (car arr) max)\n                              (let ([max (car\
    \ arr)])\n                                (if (> (car arr) max)\n            \
    \                        (let ([max (car arr)])\n                            \
    \          (if (> (car arr) max)\n                                          (let\
    \ ([max (car arr)])\n                                            (if (> (car arr)\
    \ max)\n                                                (let ([max (car arr)])\n\
    \                                                  (if (> (car arr) max)\n   \
    \                                                   (let ([max (car arr)])\n \
    \                                                       (if (> (car arr) max)\n\
    \                                                            (let ([max (car arr)])\n\
    \                                                              (if (> (car arr)\
    \ max)\n                                                                  (let\
    \ ([max (car arr)])\n                                                        \
    \            (if (> (car arr) max)\n                                         \
    \                               (let ([max (car arr)])\n                     \
    \                                                     (if (> (car arr) max)\n\
    \                                                                            \
    \  (let ([max (car arr)])\n                                                  \
    \                              (if (> (car arr) max)\n                       \
    \                                                             (let ([max (car\
    \ arr)])\n                                                                   \
    \                   (if (> (car arr) max)\n                                  \
    \                                                        (let ([max (car arr)])\n\
    \                                                                            \
    \                (if (> (car arr) max)\n                                     \
    \                                                           (let ([max (car arr)])\n\
    \                                                                            \
    \                      (if (> (car arr) max)\n                               \
    \                                                                       (let ([max\
    \ (car arr)])\n                                                              \
    \                                          (if (> (car arr) max)\n           \
    \                                                                            \
    \                     (let ([max (car arr)])\n                               \
    \                                                                            \
    \   (if (> (car arr) max)\n                                                  \
    \                                                                (let ([max (car\
    \ arr)])\n                                                                   \
    \                                                 (if (> (car arr) max)\n    \
    \                                                                            \
    \                                        (let ([max (car arr)])\n            \
    \                                                                            \
    \                                  (if (> (car arr) max)\n                   \
    \                                                                            \
    \                               (let ([max (car arr)])\n                     \
    \                                                                            \
    \                               (if (> (car arr) max)\n                      \
    \                                                                            \
    \                                  (let ([max (car arr)])\n                  \
    \                                                                            \
    \                                        (if (> (car arr) max)\n             \
    \                                                                            \
    \                                                 (let ([max (car arr)])\n   \
    \                                                                            \
    \                                                             (if (> (car arr)\
    \ max)", "  (if (= k 0)\n      (list 0)\n      (let ([max (first arr)])\n    \
    \    (if (> (rest arr) max)\n            (let ([next (maximum (rest arr) (sub1\
    \ k)))]\n              (cons max next))\n            (cons max max)))))\n", " \
    \ (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons\
    \ (max (rest arr) k) (maximum (rest arr) (sub1 k)))]))\n", "  (if (= k 0)\n  \
    \    (list arr)\n      (let ([max-so-far #f (max-so-far-so-far (car arr) k)]\n\
    \            [max-so-far-so-far (cdr arr) k])\n        (if (< k 0)\n         \
    \   (if (< max-so-far-so-far (car arr))\n                (cons max-so-far-so-far\
    \ (car arr))\n                (cons max-so-far-so-far (car arr))\n           \
    \   )\n            (if (< max-so-far-so-far (car arr))\n                (cons\
    \ max-so-far-so-far (car arr))\n                (cons max-so-far-so-far (car arr))\n\
    \              )\n            (if (< max-so-far-so-far (car arr))\n          \
    \      (cons max-so-far-so-far (car arr))\n                (cons max-so-far-so-far\
    \ (car arr))\n              )\n            (if (< max-so-far-so-far (car arr))\n\
    \                (cons max-so-far-so-far (car arr))\n                (cons max-so-far-so-far\
    \ (car arr))\n              )\n            (if (< max-so-far-so-far (car arr))\n\
    \                (cons max-so-far-so-far (car arr))\n                (cons max-so-far-so-far\
    \ (car arr))\n              )\n            (if (< max-so-far-so-far (car arr))\n\
    \                (cons max-so-far-so-far (car arr))\n                (cons max-so-far-so-far\
    \ (car arr))\n              )\n            (if (< max-so-far-so-far (car arr))\n\
    \                (cons max-so-far-so-far (car arr))\n                (cons max-so-far-so-far\
    \ (car arr))\n              )\n            (if (< max-so-far-so-far (car arr))\n\
    \                (cons max-so-far-so-far (car arr))\n                (cons max-so-far-so-far\
    \ (car arr))\n              )\n            (if (< max-so-far-so-far (car arr))\n\
    \                (cons max-", "  (if (= k 0)\n      (list arr)\n      (let ([max-so-far\
    \ #f (max-so-far-so-far #f (max-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-",
  "  (if (= k 0)\n      (list arr)\n      (let ([max-so-far #f (max-so-far-so-far\
    \ #f (max-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so", "  (if (= k 0)\n      (list 0)\n  \
    \    (let ([max-so-far 0])\n        (for ([i (in-range (length arr) k)]\n    \
    \          [el (car arr)])\n          (set! max-so-far (max max-so-far el))\n\
    \          (set! arr (cdr arr))\n          (set! k (- k 1))))))\n", "  (if (=\
    \ k 0)\n      (list arr)\n      (append (maximum (rest arr) (sub1 k)) (maximum\
    \ (first arr) (sub1 k))))))\n", "  (if (= k 0)\n      (list arr)\n      (let ([max\
    \ (car arr)])\n        (if (< (car arr) max)\n            (cons max (maximum (cdr\
    \ arr) (sub1 k)))\n            (maximum (cdr arr) (sub1 k))))))\n", "  (if (=\
    \ k 0)\n      (list 0)\n      (append (maximum (rest arr) (sub1 k)) (maximum (rest\
    \ arr) (sub1 k))))))\n", "  (if (= k 0)\n      (list 0)\n      (let ([max (car\
    \ arr)])\n        (if (> (car arr) max)\n            (cons max (maximum (cdr arr)\
    \ (sub1 k)))\n            (maximum (cdr arr) (sub1 k))))))\n", "  (if (= k 0)\n\
    \      (list arr)\n      (let ([max-so-far #f max-so-far-so-far (subseq arr 0\
    \ k)]\n            [max-so-far-so-far-so-far #f max-so-far-so-far-so-far (subseq\
    \ arr k (+ k 1))])\n        (if (< max-so-far max-so-far-so-far)\n           \
    \ (cons max-so-far max-so-far-so-far)\n            (cons max-so-far-so-far max-so-far-so-far-so-far)))))\n",
  "  (if (= k 0)\n      (list 0)\n      (let ([max-so-far 0])\n        (if (null?\
    \ arr)\n            (list 0)\n            (let ([cur (car arr)])\n           \
    \   (if (> cur max-so-far)\n                  (list cur)\n                  (let\
    \ ([max-so-far cur])\n                    (maximum (cdr arr) (sub1 k))))))))\n",
  "  (if (= k 0)\n      (list arr)\n      (let ([max-so-far #f max-so-far-index 0])\n\
    \        (loop\n           (set! max-so-far #f)\n           (set! max-so-far-index\
    \ 0)\n           (loop\n              (set! max-so-far #f)\n              (set!\
    \ max-so-far-index (+ max-so-far-index 1))\n              (if (>= (length arr)\
    \ max-so-far-index)\n                  (list arr)\n                  (let ([cur\
    \ (car arr)])\n                    (if (< cur max-so-far)\n                  \
    \      (set! max-so-far cur)\n                        (set! max-so-far-index 0)\n\
    \                        (loop\n                          (set! max-so-far #f)\n\
    \                          (set! max-so-far-index (+ max-so-far-index 1))))))))))))\n",
  "  (if (= k 0)\n      (list arr)\n      (append (maximum (rest arr) (sub1 k)) (maximum\
    \ (rest arr) (sub1 k))))) ;; #lang racket\n", "  (if (= k 0)\n      (list arr)\n\
    \      (let ([max (car arr)])\n        (if (> (car arr) max)\n            (let\
    \ ([max (car arr)])\n              (if (> (car arr) max)\n                  (let\
    \ ([max (car arr)])\n                    (if (> (car arr) max)\n             \
    \           (let ([max (car arr)])\n                          (if (> (car arr)\
    \ max)\n                              (let ([max (car arr)])\n               \
    \                 (if (> (car arr) max)\n                                    (let\
    \ ([max (car arr)])\n                                      (if (> (car arr) max)\n\
    \                                          (let ([max (car arr)])\n          \
    \                                  (if (> (car arr) max)\n                   \
    \                             (let ([max (car arr)])\n                       \
    \                           (if (> (car arr) max)\n                          \
    \                            (let ([max (car arr)])\n                        \
    \                                (if (> (car arr) max)\n                     \
    \                                       (let ([max (car arr)])\n             \
    \                                                 (if (> (car arr) max)\n    \
    \                                                              (let ([max (car\
    \ arr)])\n                                                                   \
    \ (if (> (car arr) max)\n                                                    \
    \                    (let ([max (car arr)])\n                                \
    \                                          (if (> (car arr) max)\n           \
    \                                                                   (let ([max\
    \ (car arr)])\n                                                              \
    \                  (if (> (car arr) max)\n                                   \
    \                                                 (let ([max (car arr)])\n   \
    \                                                                            \
    \       (if (> (car arr) max)\n                                              \
    \                                            (let ([max (car arr)])\n        \
    \                                                                            \
    \        (if (> (car arr) max)\n                                             \
    \                                                   (let ([max (car arr)])\n \
    \                                                                            \
    \                     (if (> (car arr) max)\n                                \
    \                                                                      (let ([max\
    \ (car arr)])\n                                                              \
    \                                          (if (> (car arr) max)\n           \
    \                                                                            \
    \                     (let ([max (car arr)])\n                               \
    \                                                                            \
    \   (if (> (car arr) max)\n                                                  \
    \                                                                (let ([max (car\
    \ arr)])\n                                                                   \
    \                                                 (if (> (car arr) max)\n    \
    \                                                                            \
    \                                        (let ([max (car arr)])\n            \
    \                                                                            \
    \                                  (if (> (car arr) max)\n                   \
    \                                                                            \
    \                               (let ([max (car arr)])\n                     \
    \                                                                            \
    \                               (if (> (car arr) max)\n                      \
    \                                                                            \
    \                                  (let ([max (car arr)])\n                  \
    \                                                                            \
    \                                        (if (> (car arr) max)\n             \
    \                                                                            \
    \                                                 (let ([max (car arr)])\n   \
    \                                                                            \
    \                                                             (if (> (car arr)\
    \ max)", "  (if (= k 0)\n      (list 0)\n      (let ([max-so-far 0])\n       \
    \ (let loop ([i 0] [arr arr])\n          (cond ((null? arr) '())\n           \
    \     ((< i (- k 1))\n                 (loop (+ i 1) (first arr)))\n         \
    \       (else (loop (+ i 1) (second arr)))))\n        (loop (+ i 1) (first arr)))))\n",
  "  (if (= k 0)\n      (list arr)\n      (let ([max (car arr)])\n        (if (> (car\
    \ arr) max)\n            (cons max \n                   (maximum (cdr arr) (sub1\
    \ k)))\n            (maximum (cdr arr) (sub1 k))))))\n", "  (if (= k 0)\n    \
    \  (list 0)\n      (let ([max (first arr)])\n        (if (null? (rest arr))\n\
    \            (list max)\n            (let ([next (maximum (rest arr) (sub1 k))]\n\
    \                  [max (if (> max next) max next)])\n              (cons max\
    \ max))))))\n", "  (if (= k 0)\n      (list arr)\n      (let ([max-so-far #f (max-so-far-so-far\
    \ #f (max-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far",
  "  (if (= k 0)\n      (list arr)\n      (let ([max-so-far #f (max-so-far-so-far\
    \ #f (max-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far",
  "  (if (= k 0)\n      (list arr)\n      (let ([max (car arr)])\n        (if (< (car\
    \ arr) max)\n            (let ([next (maximum (cdr arr) (sub1 k)))]\n        \
    \      (cons max next))\n            (maximum (cdr arr) (sub1 k))))))\n", "  (if\
    \ (= k 0)\n      (list arr)\n      (let ([max (car arr)]\n            [rest (cdr\
    \ arr)])\n        (if (< k 0)\n            (maximum (rest k) (- k 1))\n      \
    \      (append (list max) (maximum (rest k) (- k 1))))))))\n", "  (if (= k 0)\n\
    \      (list arr)\n      (let ([max-so-far #f (max-so-far-so-far #f (max-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-",
  "  (if (= k 0)\n      (list 0)\n      (let ([max-so-far 0])\n        (let loop ([i\
    \ 0] [arr arr] [k k])\n          (if (= i k)\n              (cons max-so-far arr)\n\
    \              (let ([new-arr (append (sub1 max-so-far) (max arr (sub1 i)))])\n\
    \                (if (> new-arr max-so-far)\n                    (loop (+ i 1)\
    \ new-arr (- k 1))\n                    (loop (+ i 1) new-arr k))))))))\n", " \
    \ (if (= k 0)\n      (list arr)\n      (append (maximum (rest arr) (sub1 k)) (maximum\
    \ (rest arr) (sub1 k))))))\n", "  (if (= k 0)\n      (list arr)\n      (append\
    \ (maximum (rest arr) (sub1 k)) (maximum (rest arr) (sub1 k)))))\n", "  (if (=\
    \ k 0)\n      (list 0)\n      (append (maximum (rest arr) (sub1 k)) (maximum (rest\
    \ arr) (sub1 k))))))\n", "  (if (= k 0)\n      (list arr)\n      (append (maximum\
    \ (rest arr) (sub1 k)) (maximum (first arr) (sub1 k))))))\n", "  (if (= k 0)\n\
    \      (list arr)\n      (append (maximum (rest arr) (sub1 k)) (maximum (first\
    \ arr) (sub1 k)))))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first\
    \ arr)]\n    [else (max (rest arr) (- k 1))]))\n", "  (cond\n    [(empty? arr)\
    \ (list 0)]\n    [(= k 0) (first arr)]\n    [else (append (maximum (rest arr)\
    \ (sub1 k)) (first arr))]))\n", "  (if (= k 0)\n      (list arr)\n      (append\
    \ (maximum (rest arr) (sub1 k)) (maximum (rest arr) (sub1 k))))))\n", "  (cond\n\
    \    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max (rest\
    \ arr) k) (maximum (rest arr) (sub1 k)))]))\n", "  (if (= k 0)\n      (list 0)\n\
    \      (let ([max (car arr)])\n        (if (> (car arr) max)\n            (let\
    \ ([max (car arr)])\n              (if (> (car arr) max)\n                  (let\
    \ ([max (car arr)])\n                    (if (> (car arr) max)\n             \
    \           (let ([max (car arr)])\n                          (if (> (car arr)\
    \ max)\n                              (let ([max (car arr)])\n               \
    \                 (if (> (car arr) max)\n                                    (let\
    \ ([max (car arr)])\n                                      (if (> (car arr) max)\n\
    \                                          (let ([max (car arr)])\n          \
    \                                  (if (> (car arr) max)\n                   \
    \                             (let ([max (car arr)])\n                       \
    \                           (if (> (car arr) max)\n                          \
    \                            (let ([max (car arr)])\n                        \
    \                                (if (> (car arr) max)\n                     \
    \                                       (let ([max (car arr)])\n             \
    \                                                 (if (> (car arr) max)\n    \
    \                                                              (let ([max (car\
    \ arr)])\n                                                                   \
    \ (if (> (car arr) max)\n                                                    \
    \                    (let ([max (car arr)])\n                                \
    \                                          (if (> (car arr) max)\n           \
    \                                                                   (let ([max\
    \ (car arr)])\n                                                              \
    \                  (if (> (car arr) max)\n                                   \
    \                                                 (let ([max (car arr)])\n   \
    \                                                                            \
    \       (if (> (car arr) max)\n                                              \
    \                                            (let ([max (car arr)])\n        \
    \                                                                            \
    \        (if (> (car arr) max)\n                                             \
    \                                                   (let ([max (car arr)])\n \
    \                                                                            \
    \                     (if (> (car arr) max)\n                                \
    \                                                                      (let ([max\
    \ (car arr)])\n                                                              \
    \                                          (if (> (car arr) max)\n           \
    \                                                                            \
    \                     (let ([max (car arr)])\n                               \
    \                                                                            \
    \   (if (> (car arr) max)\n                                                  \
    \                                                                (let ([max (car\
    \ arr)])\n                                                                   \
    \                                                 (if (> (car arr) max)\n    \
    \                                                                            \
    \                                        (let ([max (car arr)])\n            \
    \                                                                            \
    \                                  (if (> (car arr) max)\n                   \
    \                                                                            \
    \                               (let ([max (car arr)])\n                     \
    \                                                                            \
    \                               (if (> (car arr) max)\n                      \
    \                                                                            \
    \                                  (let ([max (car arr)])\n                  \
    \                                                                            \
    \                                        (if (> (car arr) max)\n             \
    \                                                                            \
    \                                                 (let ([max (car arr)])\n   \
    \                                                                            \
    \                                                             (if (> (car arr)\
    \ max)", "  (if (= k 0)\n      (list arr)\n      (append (maximum (rest arr) (sub1\
    \ k)) (maximum (rest arr) (sub1 k))))))\n", "  (cond\n    [(empty? arr) empty]\n\
    \    [(= k 0) (first arr)]\n    [else (cons (max (rest arr) (- k 1)) \n      \
    \          (maximum (rest arr) (- k 1)))]))\n", "  (cond\n    [(empty? arr) empty]\n\
    \    [(= k 0) (first arr)]\n    [else (cons (max (rest arr) k) (maximum (rest\
    \ arr) (sub1 k)))]))\n", "  (if (= k 0)\n      (list arr)\n      (append (maximum\
    \ (rest arr) (sub1 k)) (maximum (rest arr) (sub1 k)))))\n", "  (if (= k 0)\n \
    \     (list arr)\n      (let ([max-so-far #f max-so-far-idx #f max-so-far-idx\
    \ max-so-far max-so-far max-so-far max-so-far max-so-far max-so-far max-so-far\
    \ max-so-far max-so-far max-so-far max-so-far max-so-far max-so-far max-so-far\
    \ max-so-far max-so-far max-so-far max-so-far max-so-far max-so-far max-so-far\
    \ max-so-far max-so-far max-so-far max-so-far max-so-far max-so-far max-so-far\
    \ max-so-far max-so-far max-so-far max-so-far max-so-far max-so-far max-so-far\
    \ max-so-far max-so-far max-so-far max-so-far max-so-far max-so-far max-so-far\
    \ max-so-far max-so-far max-so-far max-so-far max-so-far max-so-far max-so-far\
    \ max-so-far max-so-far max-so-far max-so-far max-so-far max-so-far max-so-far\
    \ max-so-far max-so-far max-so-far max-so-far max-so-far max-so-far max-so-far\
    \ max-so-far max-so-far max-so-far max-so-far max-so-far max-so-far max-so-far\
    \ max-so-far max-so-far max-so-far max-so-far max-so-far max-so-far max-so-far\
    \ max-so-far max-so-far max-so-far max-so-far max-so-far max-so-far max-so-far\
    \ max-so-far max-so-far max-so-far max-so-far max-so-far max-so-far max-so-far\
    \ max-so-far max-so-far max-so-far max-so-far max-so-far max-so-far max-so-far\
    \ max-so-far max-so-far max-so-far max-so-far max-so-far max-so-far max-so-far\
    \ max-so-far max-so-far max-so-far max-so-far max-so-far max-so-far max-so-far\
    \ max-so-far max-so-far max-so-far max-so-far max-so-far max-so-far max-so-far\
    \ max-so-f", "  (if (= k 0)\n      (list arr)\n      (let ([max (first arr)])\n\
    \        (if (null? (rest arr))\n            (list max)\n            (let ([next\
    \ (maximum (rest arr) (sub1 k))]\n                  [max (max max next)])\n  \
    \            (cons max max))))))\n", "  (if (= k 0)\n      (list arr)\n      (append\
    \ (maximum (rest arr) (sub1 k)) (maximum (rest arr) (sub1 k))))))\n", "  (if (=\
    \ k 0)\n      (list arr)\n      (append (maximum (rest arr) (sub1 k)) (maximum\
    \ (rest arr) (sub1 k))))))\n", "  (if (= k 0)\n      (list 0)\n      (let ([max-so-far\
    \ 0])\n        (loop for i from 0 to (- k 1) do\n              (let ([cur (car\
    \ arr)])\n                (if (> cur max-so-far)\n                    (set! max-so-far\
    \ cur)\n                    (set! arr (cdr arr)))))\n        (append (list max-so-far)\
    \ (maximum (cdr arr) (- k 1))))))\n", "  (if (= k 0)\n      (list arr)\n     \
    \ (append (maximum (rest arr) (sub1 k)) (maximum (first arr) (sub1 k)))))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (append\
    \ (maximum (rest arr) (sub1 k)) (first arr))]\n  )\n)\n", "  (if (= k 0)\n   \
    \   (list arr)\n      (append (maximum (rest arr) (sub1 k)) (maximum (first arr)\
    \ (sub1 k))))))\n", "  (if (= k 0)\n      (list arr)\n      (append (maximum (rest\
    \ arr) (sub1 k)) (maximum (rest arr) (sub1 k))))))\n", "  (if (= k 0)\n      (list\
    \ arr)\n      (let ([max (car arr)])\n        (if (> (car arr) max)\n        \
    \    (let ([max (car arr)])\n              (if (> (car arr) max)\n           \
    \       (let ([max (car arr)])\n                    (if (> (car arr) max)\n  \
    \                      (let ([max (car arr)])\n                          (if (>\
    \ (car arr) max)\n                              (let ([max (car arr)])\n     \
    \                           (if (> (car arr) max)\n                          \
    \          (let ([max (car arr)])\n                                      (if (>\
    \ (car arr) max)\n                                          (let ([max (car arr)])\n\
    \                                            (if (> (car arr) max)\n         \
    \                                       (let ([max (car arr)])\n             \
    \                                     (if (> (car arr) max)\n                \
    \                                      (let ([max (car arr)])\n              \
    \                                          (if (> (car arr) max)\n           \
    \                                                 (let ([max (car arr)])\n   \
    \                                                           (if (> (car arr) max)\n\
    \                                                                  (let ([max\
    \ (car arr)])\n                                                              \
    \      (if (> (car arr) max)\n                                               \
    \                         (let ([max (car arr)])\n                           \
    \                                               (if (> (car arr) max)\n      \
    \                                                                        (let\
    \ ([max (car arr)])\n                                                        \
    \                        (if (> (car arr) max)\n                             \
    \                                                       (let ([max (car arr)])\n\
    \                                                                            \
    \          (if (> (car arr) max)\n                                           \
    \                                               (let ([max (car arr)])\n     \
    \                                                                            \
    \           (if (> (car arr) max)\n                                          \
    \                                                      (let ([max (car arr)])\n\
    \                                                                            \
    \                      (if (> (car arr) max)\n                               \
    \                                                                       (let ([max\
    \ (car arr)])\n                                                              \
    \                                          (if (> (car arr) max)\n           \
    \                                                                            \
    \                     (let ([max (car arr)])\n                               \
    \                                                                            \
    \   (if (> (car arr) max)\n                                                  \
    \                                                                (let ([max (car\
    \ arr)])\n                                                                   \
    \                                                 (if (> (car arr) max)\n    \
    \                                                                            \
    \                                        (let ([max (car arr)])\n            \
    \                                                                            \
    \                                  (if (> (car arr) max)\n                   \
    \                                                                            \
    \                               (let ([max (car arr)])\n                     \
    \                                                                            \
    \                               (if (> (car arr) max)\n                      \
    \                                                                            \
    \                                  (let ([max (car arr)])\n                  \
    \                                                                            \
    \                                        (if (> (car arr) max)\n             \
    \                                                                            \
    \                                                 (let ([max (car arr)])\n   \
    \                                                                            \
    \                                                             (if (> (car arr)\
    \ max)", "  (if (= k 0)\n      (list arr)\n      (append (maximum (rest arr) (sub1\
    \ k)) (maximum (first arr) (sub1 k))))))\n", "  (if (= k 0)\n      (list arr)\n\
    \      (append (maximum (rest arr) (sub1 k)) (maximum (rest arr) (sub1 k)))))\n",
  "  (if (= k 0)\n      (list arr)\n      (let ([max-so-far #f (max-so-far-so-far\
    \ #f (max-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-",
  "  (if (= k 0)\n      (list 0)\n      (let ([max-so-far 0])\n        (let loop ([i\
    \ 0])\n          (cond ((null? arr) (reverse (list max-so-far)))\n           \
    \     (else (let ([cur (car arr)])\n                         (if (> cur max-so-far)\n\
    \                             (set! max-so-far cur)\n                        \
    \     (loop (add1 i)))\n                         (loop (add1 i))))))))\n", " \
    \ (if (= k 0)\n      (list arr)\n      (let ([head (first arr)])\n        (if\
    \ (> (first arr) head)\n            (append (maximum (rest arr) (sub1 k)) (list\
    \ head))\n            (append (maximum (rest arr) (sub1 k)) (list head))))))\n",
  "  (if (= k 0)\n      (list 0)\n      (let ([max (car arr)])\n        (if (> (car\
    \ arr) max)\n            (let ([max (car arr)])\n              (if (> (car arr)\
    \ max)\n                  (let ([max (car arr)])\n                    (if (> (car\
    \ arr) max)\n                        (let ([max (car arr)])\n                \
    \          (if (> (car arr) max)\n                              (let ([max (car\
    \ arr)])\n                                (if (> (car arr) max)\n            \
    \                        (let ([max (car arr)])\n                            \
    \          (if (> (car arr) max)\n                                          (let\
    \ ([max (car arr)])\n                                            (if (> (car arr)\
    \ max)\n                                                (let ([max (car arr)])\n\
    \                                                  (if (> (car arr) max)\n   \
    \                                                   (let ([max (car arr)])\n \
    \                                                       (if (> (car arr) max)\n\
    \                                                            (let ([max (car arr)])\n\
    \                                                              (if (> (car arr)\
    \ max)\n                                                                  (let\
    \ ([max (car arr)])\n                                                        \
    \            (if (> (car arr) max)\n                                         \
    \                               (let ([max (car arr)])\n                     \
    \                                                     (if (> (car arr) max)\n\
    \                                                                            \
    \  (let ([max (car arr)])\n                                                  \
    \                              (if (> (car arr) max)\n                       \
    \                                                             (let ([max (car\
    \ arr)])\n                                                                   \
    \                   (if (> (car arr) max)\n                                  \
    \                                                        (let ([max (car arr)])\n\
    \                                                                            \
    \                (if (> (car arr) max)\n                                     \
    \                                                           (let ([max (car arr)])\n\
    \                                                                            \
    \                      (if (> (car arr) max)\n                               \
    \                                                                       (let ([max\
    \ (car arr)])\n                                                              \
    \                                          (if (> (car arr) max)\n           \
    \                                                                            \
    \                     (let ([max (car arr)])\n                               \
    \                                                                            \
    \   (if (> (car arr) max)\n                                                  \
    \                                                                (let ([max (car\
    \ arr)])\n                                                                   \
    \                                                 (if (> (car arr) max)\n    \
    \                                                                            \
    \                                        (let ([max (car arr)])\n            \
    \                                                                            \
    \                                  (if (> (car arr) max)\n                   \
    \                                                                            \
    \                               (let ([max (car arr)])\n                     \
    \                                                                            \
    \                               (if (> (car arr) max)\n                      \
    \                                                                            \
    \                                  (let ([max (car arr)])\n                  \
    \                                                                            \
    \                                        (if (> (car arr) max)\n             \
    \                                                                            \
    \                                                 (let ([max (car arr)])\n   \
    \                                                                            \
    \                                                             (if (> (car arr)\
    \ max)", "  (if (= k 0)\n      (list arr)\n      (let ([max-so-far #f max-so-far-idx\
    \ #f max-so-far-idx max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx\
    \ #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx\
    \ #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx\
    \ #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx\
    \ #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx\
    \ #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx\
    \ #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx\
    \ #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx\
    \ #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx\
    \ #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx\
    \ #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx\
    \ #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx\
    \ #f max-so-far-idx #", "  (if (= k 0)\n      (list arr)\n      (append (maximum\
    \ (rest arr) (sub1 k)) (maximum (rest arr) (sub1 k)))))\n", "  (cond\n    [(empty?\
    \ arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max (rest arr) k) (maximum\
    \ (rest arr) (sub1 k)))]))\n", "  (if (= k 0)\n      (list 0)\n      (let ([max\
    \ (car arr)])\n        (if (> (car arr) max)\n            (let ([new (car arr)])\n\
    \              (if (> (car arr) max)\n                  (list max)\n         \
    \         (list new))\n                (maximum (cdr arr) (sub1 k)))))))\n", " \
    \ (if (= k 0)\n      (list arr)\n      (let ([max-so-far #f max-so-far-index 0])\n\
    \        (loop\n           (let ([cur-elem (first arr)])\n             (if (>\
    \ cur-elem max-so-far)\n                 (set! max-so-far cur-elem)\n        \
    \         (set! max-so-far-index cur-elem))\n             (if (= k 1)\n      \
    \           (list max-so-far)\n                 (loop\n                    (let\
    \ ([next-elem (first arr)])\n                      (if (> next-elem max-so-far)\n\
    \                          (set! max-so-far next-elem)\n                     \
    \     (set! max-so-far-index next-elem))\n                      (if (= k 2)\n\
    \                          (list max-so-far)\n                          (loop\n\
    \                            (let ([next-elem (first arr)])\n                \
    \              (if (> next-elem max-so-far)\n                                \
    \  (set! max-so-far next-elem)\n                                  (set! max-so-far-index\
    \ next-elem))\n                              (if (= k 3)\n                   \
    \               (list max-so-far)\n                                  (loop\n \
    \                                   (let ([next-elem (first arr)])\n         \
    \                             (if (> next-elem max-so-far)\n                 \
    \                         (set! max-so-far next-elem)\n                      \
    \                    (set! max-so-far-index next-elem))\n                    \
    \                  (if (= k 4)\n                                          (list\
    \ max-so-far)\n                                          (loop\n             \
    \                               (let ([next-elem (first arr)])\n             \
    \                                 (if (> next-elem max-so-far)\n             \
    \                                     (set! max-so-far next-elem)\n          \
    \                                        (set! max-so-far-index next-elem))\n\
    \                                              (if (= k 5)\n                 \
    \                                 (list max-so-far)\n                        \
    \                          (loop\n                                           \
    \         (let ([next-elem (first arr)])\n                                   \
    \                   (if (> next-elem max-so-far)\n                           \
    \                               (set! max-so-far next-elem)\n                \
    \                                          (set! max-so-far-index next-elem))\n\
    \                                                      (if (= k 6)\n         \
    \                                                 (list max-so-far)\n        \
    \                                                  (loop\n                   \
    \                                         (let ([next-elem (first arr)])\n   \
    \                                                           (if (> next-elem max-so-far)\n\
    \                                                                  (set! max-so-far\
    \ next-elem)\n                                                               \
    \   (set! max-so-far-index next-elem))", "  (if (= k 0)\n      (list arr)\n  \
    \    (let ([max-so-far #f (max-so-far-so-far #f (max-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far",
  "  (if (= k 0)\n      (list arr)\n      (let ([max-so-far #f (max-so-far-so-far\
    \ #f (max-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-",
  "  (if (= k 0)\n      (list arr)\n      (let ([max-so-far #f (max-so-far-so-far\
    \ #f (max-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so",
  "  (if (= k 0)\n      (list arr)\n      (let ([max-so-far #f (max-so-far-so-far\
    \ #f (max-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so", "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first\
    \ arr)]\n    [else (cons (max (rest arr) k) (maximum (rest arr) (sub1 k)))]))\n",
  "  (if (= k 0)\n      (list arr)\n      (let ([max-so-far #f (max-so-far-so-far\
    \ #f (max-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so",
  "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first arr)]\n    [else (cons (max\
    \ (rest arr) k) (maximum (rest arr) (sub1 k)))]))\n", "  (cond\n    [(empty? arr)\
    \ empty]\n    [(= k 0) (first arr)]\n    [else (max (rest arr) (- k 1))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
