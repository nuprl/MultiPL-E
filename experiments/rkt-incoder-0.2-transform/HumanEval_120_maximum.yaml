name: HumanEval_120_maximum
language: rkt
prompt: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
  \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
  ;; Example 1:\n;; >>> (maximum (list -3 -4 5) 3)\n;; (list -4 -3 5)\n;; Example\
  \ 2:\n;; >>> (maximum (list 4 -4 4) 2)\n;; (list 4 4)\n;; Example 3:\n;; >>> (maximum\
  \ (list -3 2 1 2 -1 -2 1) 1)\n;; (list 2)\n;; Note:\n;; 1. The length of the array\
  \ will be in the range of [1, 1000].\n;; 2. The elements in the array will be in\
  \ the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n(define (maximum arr k)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maximum))\n\
  \    (check-equal? (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal?\
  \ (candidate (list 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3\
  \ 2 1 2 -1 -2 1) 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0\
  \ 1 2 -3) 3) (list 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2\
  \ -3) 4) (list 0 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0)\
  \ 7) (list -13 -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10)\
  \ 2) (list 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n  \
  \  (check-equal? (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate\
  \ (list -10 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23\
  \ 243 -400 0) 0) (list ))\n))\n\n(test-humaneval)"
completions: ["  (if (= k 0)\n      (list arr)\n      (append (maximum (rest arr)\
    \ (sub1 k)) (maximum (rest arr) (sub1 k))))))\n", "  (if (= k 0)\n      (list\
    \ arr)\n      (append (maximum (rest arr) (sub1 k)) (maximum (first arr) (sub1\
    \ k))))))\n", "  (if (= k 0)\n      (list arr)\n      (let ([head (first arr)])\n\
    \        (if (> (first arr) head)\n            (append (maximum (rest arr) (sub1\
    \ k)) (list head))\n            (append (maximum (rest arr) (sub1 k)) (list head))))))\n",
  "  (if (= k 0)\n      (list arr)\n      (let ([max-so-far #f (max-so-far-so-far\
    \ (car arr) k)]\n            [max-so-far-so-far (car max-so-far-so-far)\n    \
    \                       (maximum (cdr arr) (k - 1))])\n        (if (< k 1)\n \
    \           (cons max-so-far-so-far (maximum (cdr arr) k))\n            (cons\
    \ max-so-far-so-far (list max-so-far-so-far)))))) ; #lang racket\n", "  (if (=\
    \ k 0)\n      (list arr)\n      (let ([max-so-far #f max-so-far-idx #f max-so-far-idx\
    \ #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx\
    \ #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx\
    \ #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx\
    \ #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx\
    \ #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx\
    \ #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx\
    \ #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx\
    \ #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx\
    \ #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx\
    \ #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx\
    \ #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx\
    \ #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-idx #f max-so-far-",
  "  (if (= k 0)\n      (list arr)\n      (append (maximum (rest arr) (sub1 k)) (maximum\
    \ (first arr) (sub1 k)))))\n", "  (if (= k 0)\n      (list arr)\n      (let ([max-so-far\
    \ #f])\n        (let loop ([i 0] [arr arr] [k k] [max-so-far max-so-far])\n  \
    \        (cond [(< i k) (loop (+ i 1) (conj arr (car arr)) (- k 1) max-so-far)]\n\
    \                [else (loop (+ i 1) (conj arr (car arr)) k (if (> max-so-far\
    \ car arr) car arr))])))))\n", "  (if (= k 0)\n      (list arr)\n      (let ([max-so-far\
    \ #f max-so-far-so-far (maximum (rest arr) (k - 1))])\n        (if (< k max-so-far-so-far)\n\
    \            (let ([max-so-far max-so-far-so-far])\n              (if (< max-so-far\
    \ max-so-far-so-far)\n                  (let ([max-so-far max-so-far-so-far])\n\
    \                    (if (< max-so-far max-so-far-so-far)\n                  \
    \      (let ([max-so-far max-so-far-so-far])\n                          (if (<\
    \ max-so-far max-so-far-so-far)\n                              (let ([max-so-far\
    \ max-so-far-so-far])\n                                (if (< max-so-far max-so-far-so-far)\n\
    \                                    (let ([max-so-far max-so-far-so-far])\n \
    \                                     (if (< max-so-far max-so-far-so-far)\n \
    \                                         (let ([max-so-far max-so-far-so-far])\n\
    \                                            (if (< max-so-far max-so-far-so-far)\n\
    \                                                (let ([max-so-far max-so-far-so-far])\n\
    \                                                  (if (< max-so-far max-so-far-so-far)\n\
    \                                                      (let ([max-so-far max-so-far-so-far])\n\
    \                                                        (if (< max-so-far max-so-far-so-far)\n\
    \                                                            (let ([max-so-far\
    \ max-so-far-so-far])\n                                                      \
    \        (if (< max-so-far max-so-far-so-far)\n                              \
    \                                    (let ([max-so-far max-so-far-so-far])\n \
    \                                                                   (if (< max-so-far\
    \ max-so-far-so-far)\n                                                       \
    \                 (let ([max-so-far max-so-far-so-far])\n                    \
    \                                                      (if (< max-so-far max-so-far-so-far)\n\
    \                                                                            (let\
    \ ([max-so-far max-so-far-so-far])\n                                         \
    \                                     (if (< max-so-far max-so-far-so-far)\n \
    \                                                                            \
    \     (let ([max-so-far max-so-far-so-far])\n                                \
    \                                                    (if (< max-so-far ", "  (if\
    \ (= k 0)\n      (list arr)\n      (let ([max-so-far #f (max-so-far-so-far #f\
    \ (max-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so", "  (if (= k 0)\n      (list arr)\n      (let\
    \ ([max-so-far #f (max-so-far-so-far #f (max-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f (max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-",
  "  (if (= k 0)\n      (list 0)\n      (let ([max-so-far 0])\n        (if (null?\
    \ (rest arr))\n            (cons max-so-far arr)\n            (let ([curr (car\
    \ arr)])\n              (if (> curr max-so-far)\n                  (cons max-so-far\
    \ arr)\n                  (maximum (rest arr) (sub1 k))))))))\n", "  (if (= k\
    \ 0)\n      (list arr)\n      (let ([max-so-far #f max-so-far-so-far (sub1 k)]\n\
    \            [max-so-far-so-far-so-far #f max-so-far-so-far-so-far (sub1 k)]\n\
    \            [max-so-far-so-far-so-far-so-far #f max-so-far-so-far-so-far-so-far\
    \ #f max-so-far-so-far-so-far-so-far-so-far #f max-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f max-so-far-so-far-so-far-so-far-so-far-so-far-so-far #f max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far\
    \ #f max-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-so-far-",
  "  (if (= k 0)\n      (list 0)\n      (let ([max-so-far 0])\n        (let loop ((arr\
    \ arr) (k k) (max-so-far max-so-far))\n          (cond ((null? arr) max-so-far)\n\
    \                ((< k 0)\n                 (loop (rest arr) k (cons (car arr)\
    \ max-so-far)))\n                (else (loop (rest arr) (- k 1) (cons (car arr)\
    \ max-so-far)))))))\n", "  (cond\n    [(empty? arr) empty]\n    [(= k 0) (first\
    \ arr)]\n    [else (cons (max (rest arr) (- k 1))\n                (maximum (rest\
    \ arr) (- k 1)))]))\n", "  (if (= k 0)\n      (list arr)\n      (let ([max (car\
    \ arr)])\n        (if (< (length arr) k)\n            (append (maximum (cdr arr)\
    \ (sub1 k)) (list max))\n            (append (list max) (maximum (cdr arr) (sub1\
    \ k)))))))\n", "  (if (= k 0)\n      (list arr)\n      (append (maximum (rest\
    \ arr) (sub1 k)) (maximum (first arr) (sub1 k)))))\n", "  (if (= k 0)\n      (list\
    \ 0)\n      (let ([max-so-far 0])\n        (loop for i from 0 to (- k 1) by -1\n\
    \              for j to (+ i 1)\n              for max-so-far in\n           \
    \   (if (< arr (car arr))\n                  (cons max-so-far arr)\n         \
    \         (cons arr max-so-far))\n              finally (return (cons max-so-far\
    \ max-so-far)))))\n</code>\n<|/ a tags=racket,scheme |>\n<| c |>\nI like your\
    \ solution, but I wonder why you used `for` instead of `for/list`?\n<|/ c |>\n\
    <| c |>\nI used `for` because I wanted to use an `if` statement to decide whether\
    \ to iterate over the array or not. `for/list` would have made more sense in this\
    \ case. `for/list` would also have made more sense if I was iterating over a list\
    \ rather than an array.\n<|/ c |>\n<| c |>\nI see. Thanks for the explanation!\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>", "  (if (= k 0)\n      (list arr)\n      (append\
    \ (maximum (rest arr) (sub1 k)) (maximum (rest arr) (sub1 k))))))\n", "  (if (=\
    \ k 0)\n      (list arr)\n      (let ([max-so-far #f]\n            [max-so-far-idx\
    \ #0]\n            [max-so-far-arr #(first arr)])\n        (if (null? arr)\n \
    \           (list arr)\n            (let ([cur-arr (car arr)])\n             \
    \ (if (< cur-arr max-so-far)\n                  (let ([new-arr (cons cur-arr (maximum\
    \ (rest arr) (sub1 k)))])\n                    (if (= k 1)\n                 \
    \       (cons new-arr max-so-far-arr)\n                        (let ([new-idx\
    \ (+ max-so-far-idx 1)])\n                          (cons new-arr (cons max-so-far-arr\
    \ (list new-idx))))))\n                  (let ([new-idx (+ max-so-far-idx 1)])\n\
    \                    (cons new-arr (cons max-so-far-arr (list new-idx)))))))))))\n",
  "  (if (= k 0)\n      (list arr)\n      (let ([max (car arr)])\n        (if (> (car\
    \ arr) max)\n            (cons max (maximum (cdr arr) (sub1 k)))\n           \
    \ (maximum (cdr arr) (sub1 k))))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
