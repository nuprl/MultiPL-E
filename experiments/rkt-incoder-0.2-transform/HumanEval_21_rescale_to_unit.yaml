name: HumanEval_21_rescale_to_unit
language: rkt
prompt: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
  \ a linear transform to that list,\n;; such that the smallest number will become\
  \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
  \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
  \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
  \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list\
  \ 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate\
  \ (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
  \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
completions: ["  (let ((min (min numbers))\n        (max (max numbers)))\n    (map\
    \ (lambda (x) (/ x max)) numbers)))\n", "  (let ((min (min numbers)))\n    (let\
    \ ((max (max numbers)))\n      (map (lambda (x) (/ x max)) numbers))))\n", " \
    \ (let ((min (first numbers))\n        (max (second numbers)))\n    (map #(/ %\
    \ max) numbers)))\n", "  (let ((min (first numbers))\n        (max (second numbers)))\n\
    \    (map (lambda (x) (/ x max)) numbers)))\n", "  (let ((min (min numbers)))\n\
    \    (let ((max (max numbers)))\n      (map (lambda (x) (/ x max)) numbers))))\n",
  "  (let ((min (first numbers))\n        (max (second numbers)))\n    (map (lambda\
    \ (x) (/ (- x min) max)) numbers)))\n", "  (let ((min (first numbers))\n     \
    \   (max (second numbers)))\n    (if (= min max)\n        (list 0.0 1.0)\n   \
    \     (let ((range (- max min)))\n          (map (lambda (x) (/ x range)) numbers)))))\n",
  "  (let ((min (first numbers))\n        (max (second numbers)))\n    (map (lambda\
    \ (x) (/ (- x min) (- x max))) numbers)))\n", "  (let ((min (first numbers))\n\
    \        (max (second numbers)))\n    (map (lambda (x) (/ (- x min) max)) numbers)))\n",
  "  (let loop ((numbers numbers)\n             (result '()))\n    (if (null? numbers)\n\
    \        result\n        (loop (rest numbers)\n              (cons (min numbers)\
    \ result)))))\n", "  (let ((min (min numbers)))\n    (let ((max (max numbers)))\n\
    \      (map (lambda (x) (/ x max)) numbers))))\n", "  (let ((min (first numbers))\n\
    \        (max (second numbers)))\n    (map (lambda (x)\n           (/ (- x min)\
    \ (- max min)))\n         numbers)))\n", "  (let ((min (first numbers))\n    \
    \    (max (second numbers)))\n    (map (lambda (x) (/ x max)) numbers)))\n", " \
    \ (let ((min (first numbers))\n        (max (second numbers)))\n    (map (lambda\
    \ (x) (/ x max)) numbers)))\n", "  (let ((min (first numbers))\n        (max (second\
    \ numbers)))\n    (map (lambda (x) (/ (- x min) (- x max))) numbers)))\n", " \
    \ (let ((min (first numbers))\n        (max (second numbers)))\n    (map (lambda\
    \ (x) (/ (- x min) (- x max))) numbers)))\n", "  (let ((min (min numbers)))\n\
    \    (map #(/ % min) numbers)))\n", "  (let ((min (first numbers))\n        (max\
    \ (second numbers)))\n    (map (lambda (x) (/ (- x min) max)) numbers)))\n", " \
    \ (let ((min (min numbers)))\n    (map #(/ (- %1 min) 1.0) numbers)))\n", "  (let\
    \ ((min (first numbers))\n        (max (second numbers)))\n    (map (lambda (x)\
    \ (/ (- x min) max)) numbers)))\n", "  (let ((min (first numbers))\n        (max\
    \ (second numbers)))\n    (map (lambda (n) (/ n max)) numbers)))\n", "  (let ((min\
    \ (first numbers))\n        (max (second numbers)))\n    (map (lambda (x) (/ x\
    \ max)) numbers)))\n", "  (let ((min (first numbers))\n        (max (second numbers)))\n\
    \    (map (lambda (x) (/ x max)) numbers)))\n", "  (let ((min (first numbers))\n\
    \        (max (second numbers)))\n    (map (lambda (x) (/ x max)) numbers)))\n",
  "  (let ((min (min numbers)))\n    (map (lambda (x)\n           (/ (- x min) 1.0))\n\
    \         numbers)))\n", "  (let ((min (min numbers)))\n    (map (lambda (x) (/\
    \ x min)) numbers)))\n", "  (let ((min (min numbers)))\n    (map (lambda (x) (/\
    \ (- x min) max)) numbers)))\n", "  (let ((min (first numbers))\n        (max\
    \ (second numbers)))\n    (map (lambda (x)\n           (/ (- x min) max))\n  \
    \       numbers)))\n", "  (let ((min (min numbers)))\n    (map (lambda (x) (/\
    \ x min)) numbers)))\n", "  (let ((min (first numbers))\n        (max (second\
    \ numbers)))\n    (if (< min max)\n        (cons (- min max) numbers)\n      \
    \  numbers)))\n", "  (let ((min (first numbers))\n        (max (second numbers)))\n\
    \    (map #(/ % max) numbers)))\n", "  (let ((min (first numbers))\n        (max\
    \ (second numbers)))\n    (map (lambda (x)\n           (/ (- x min) max))\n  \
    \       numbers)))\n", "  (let ((min (first numbers))\n        (max (second numbers)))\n\
    \    (map (lambda (x) (/ (- x min) (- x max)))\n         numbers)))\n", "  (let\
    \ ((min (first numbers))\n        (max (second numbers)))\n    (map (lambda (x)\n\
    \           (/ (- x min) max))\n         numbers)))\n", "  (let ((min (min numbers)))\n\
    \    (map (lambda (x) (/ x min)) numbers)))\n", "  (let ((min (first numbers))\n\
    \        (max (second numbers)))\n    (map (lambda (x)\n           (/ (- x min)\
    \ max))\n         numbers)))\n", "  (let ((min (first numbers))\n        (max\
    \ (second numbers)))\n    (map (lambda (x)\n           (/ (- x min) max))\n  \
    \       numbers)))\n", "  (let ((min (first numbers))\n        (max (second numbers)))\n\
    \    (map (lambda (x) (/ x max)) numbers)\n    (map (lambda (x) (* x max)) numbers)\n\
    \    (map (lambda (x) (* x max)) numbers)\n    (map (lambda (x) (* x max)) numbers)\n\
    \    (map (lambda (x) (* x max)) numbers)\n    (map (lambda (x) (* x max)) numbers)\n\
    \    (map (lambda (x) (* x max)) numbers)\n    (map (lambda (x) (* x max)) numbers)\n\
    \    (map (lambda (x) (* x max)) numbers)\n    (map (lambda (x) (* x max)) numbers)\n\
    \    (map (lambda (x) (* x max)) numbers)\n    (map (lambda (x) (* x max)) numbers)\n\
    \    (map (lambda (x) (* x max)) numbers)\n    (map (lambda (x) (* x max)) numbers)\n\
    \    (map (lambda (x) (* x max)) numbers)\n    (map (lambda (x) (* x max)) numbers)\n\
    \    (map (lambda (x) (* x max)) numbers)\n    (map (lambda (x) (* x max)) numbers)\n\
    \    (map (lambda (x) (* x max)) numbers)\n    (map (lambda (x) (* x max)) numbers)\n\
    \    (map (lambda (x) (* x max)) numbers)\n    (map (lambda (x) (* x max)) numbers)\n\
    \    (map (lambda (x) (* x max)) numbers)\n    (map (lambda (x) (* x max)) numbers)\n\
    \    (map (lambda (x) (* x max)) numbers)\n    (map (lambda (x) (* x max)) numbers)\n\
    \    (map (lambda (x) (* x max)) numbers)\n    (map (lambda (x) (* x max)) numbers)\n\
    \    (map (lambda (x) (* x max)) numbers)\n    (map (lambda (x) (* x max)) numbers)\n\
    \    (map (lambda (x) (* x max)) numbers)\n    (map (lambda (x) (* x max)) numbers)\n\
    \    (map (lambda (x) (* x max)) numbers)\n    (map (lambda (x) (* x max)) numbers)\n\
    \    (map (lambda (x) (* x max)) numbers)\n    (map (lambda (x) (* x max)) numbers)\n\
    \    (map (lambda (x) (* x max)) numbers)\n    (map (lambda (x) (* x max)) numbers)\n\
    \    (map", "  (let ((min (first numbers))\n        (max (second numbers)))\n\
    \    (map (lambda (x) (/ x max)) numbers)))\n", "  (let loop ((numbers numbers)\n\
    \             (result '()))\n    (if (null? numbers)\n        result\n       \
    \ (loop (cdr numbers)\n              (cons (min numbers)\n                   \
    \ (loop (cdr numbers)\n                          (cons (max numbers)\n       \
    \                         result)))))))\n", "  (let ((min (first numbers))\n \
    \       (max (second numbers)))\n    (map (lambda (x)\n           (/ (- x min)\
    \ max))\n         numbers)))\n", "  (let ((min (min numbers)))\n    (let ((max\
    \ (max numbers)))\n      (map (lambda (x) (/ x max)) numbers))))\n", "  (let ((min\
    \ (first numbers))\n        (max (second numbers)))\n    (map (lambda (x) (/ (-\
    \ x min) max)) numbers)))\n", "  (let ((min (first numbers))\n        (max (second\
    \ numbers)))\n    (map (lambda (x)\n           (/ (- x min) max))\n         numbers)))\n",
  "  (let ((min (first numbers))\n        (max (second numbers)))\n    (if (< min\
    \ max)\n        (let ((diff (- max min)))\n          (cons 0 (cons diff (rescale_to_unit\
    \ (subseq numbers 1 ))))\n          (cons 1 (cons diff (rescale_to_unit (subseq\
    \ numbers (+ 1 ))))))\n        numbers)))\n", "  (let ((min (first numbers))\n\
    \        (max (second numbers)))\n    (map (lambda (x) (/ (- x min) max)) numbers)))\n",
  "  (let ((min (first numbers))\n        (max (second numbers)))\n    (map (lambda\
    \ (x) (/ x max)) numbers)))\n", "  (let ((min (min numbers)))\n    (let ((max\
    \ (max numbers)))\n      (map #(/ (- %1 min) max) numbers))))\n", "  (let ((min\
    \ (min numbers)))\n    (let ((max (max numbers)))\n      (map (lambda (x) (/ (-\
    \ x min) max)) numbers)))\n", "  (let ((min (first numbers))\n        (max (second\
    \ numbers)))\n    (map (lambda (x) (/ x max)) numbers)))\n", "  (let ((min (min\
    \ numbers))\n        (max (max numbers)))\n    (map #(/ % max) numbers)))\n",
  "  (let ((min (min numbers))\n        (max (max numbers)))\n    (map (lambda (n)\
    \ (/ n max)) numbers)))\n", "  (let ((min (min numbers)))\n    (let ((max (max\
    \ numbers)))\n      (map (lambda (x) (/ x max)) numbers))))\n", "  (let ((min\
    \ (min numbers)))\n    (map #(/ % min) numbers)))\n", "  (let ((min (first numbers))\n\
    \        (max (second numbers)))\n    (map (lambda (x) (/ (- x min) max)) numbers)))\n",
  "  (let ((min (min numbers)))\n    (map (lambda (x) (/ x min)) numbers)))\n", " \
    \ (let ((min (first numbers))\n        (max (second numbers)))\n    (map (lambda\
    \ (x) (/ (- x min) max)) numbers)))\n", "  (let ((min (first numbers))\n     \
    \   (max (second numbers)))\n    (map (lambda (x) (/ x max)) numbers)))\n", " \
    \ (let ((min (first numbers))\n        (max (second numbers)))\n    (if (< min\
    \ max)\n        (let ((diff (- max min)))\n          (map (lambda (x) (/ x diff))\
    \ numbers))\n        numbers)))\n", "  (let ((min (first numbers))\n        (max\
    \ (second numbers)))\n    (map (lambda (x) (/ x max)) numbers)))\n", "  (let ((min\
    \ (first numbers))\n        (max (second numbers)))\n    (map (lambda (x) (/ (-\
    \ x min) max)) numbers)))\n", "  (let ((min (first numbers))\n        (max (second\
    \ numbers)))\n    (map (lambda (n) (/ n max)) numbers)))\n", "  (let ((min (first\
    \ numbers))\n        (max (second numbers)))\n    (map (lambda (n) (/ n max))\
    \ numbers)))\n", "  (let ((min (min numbers)))\n    (map #(/ (- %1 min) 1.0) numbers)))\n",
  "  (let ((min (min numbers)))\n    (map (lambda (x) (/ x min)) numbers)))\n", " \
    \ (let ((min (first numbers))\n        (max (second numbers)))\n    (map (lambda\
    \ (x) (/ (- x min) max)) numbers)))\n", "  (let ((min (first numbers))\n     \
    \   (max (second numbers)))\n    (map (lambda (x) (/ (- x min) max)) numbers)))\n",
  "  (let ((min (first numbers))\n        (max (second numbers)))\n    (map (lambda\
    \ (x)\n           (/ (- x min) max))\n         numbers)))\n", "  (let ((min (first\
    \ numbers))\n        (max (second numbers)))\n    (map (lambda (x) (/ (- x min)\
    \ (- x max)))\n         numbers)))\n", "  (let ((min (first numbers))\n      \
    \  (max (second numbers)))\n    (map (lambda (n) (/ (- n min) max)) numbers)))\n",
  "  (let ((min (first numbers))\n        (max (second numbers)))\n    (if (< (min\
    \ max) 0.0)\n        (cons 0 (cons 1 (rescale_to_unit (rest numbers))))\n    \
    \    (cons 1 (cons 0 (rescale_to_unit (rest numbers)))))))\n", "  (let ((min (first\
    \ numbers))\n        (max (second numbers)))\n    (map (lambda (x) (/ (- x min)\
    \ max)) numbers)))\n", "  (let ((min (first numbers))\n        (max (second numbers)))\n\
    \    (map (lambda (x) (/ x max)) numbers)))\n", "  (let ((min (first numbers))\n\
    \        (max (second numbers)))\n    (map #(/ (- %1 min) (- %2 max)) numbers)))\n",
  "  (let ((min (min numbers)))\n    (let ((max (max numbers)))\n      (map (lambda\
    \ (x) (/ (- x min) max)) numbers))))\n", "  (let ((min (min numbers)))\n    (map\
    \ (lambda (x) (/ x min)) numbers)))\n", "  (let ((min (first numbers))\n     \
    \   (max (second numbers)))\n    (map (lambda (x)\n           (/ (- x min) max))\n\
    \         numbers)))\n", "  (let ((min (first numbers))\n        (max (second\
    \ numbers)))\n    (map (lambda (n) (/ (- n min) max)) numbers)))\n", "  (let ((min\
    \ (first numbers))\n        (max (second numbers)))\n    (map (lambda (n) (/ n\
    \ max)) numbers)))\n", "  (let ((min (first numbers))\n        (max (second numbers)))\n\
    \    (map (lambda (x) (/ x max)) numbers)\n    (map (lambda (x) (* x max)) numbers)\n\
    \    (map (lambda (x) (* x max)) numbers)\n    (map (lambda (x) (/ x min)) numbers)\n\
    \    (map (lambda (x) (* x min)) numbers)\n    (map (lambda (x) (+ x min)) numbers)\n\
    \    (map (lambda (x) (+ x min)) numbers)\n    (map (lambda (x) (+ x min)) numbers)\n\
    \    (map (lambda (x) (+ x min)) numbers)\n    (map (lambda (x) (+ x min)) numbers)\n\
    \    (map (lambda (x) (+ x min)) numbers)\n    (map (lambda (x) (+ x min)) numbers)\n\
    \    (map (lambda (x) (+ x min)) numbers)\n    (map (lambda (x) (+ x min)) numbers)\n\
    \    (map (lambda (x) (+ x min)) numbers)\n    (map (lambda (x) (+ x min)) numbers)\n\
    \    (map (lambda (x) (+ x min)) numbers)\n    (map (lambda (x) (+ x min)) numbers)\n\
    \    (map (lambda (x) (+ x min)) numbers)\n    (map (lambda (x) (+ x min)) numbers)\n\
    \    (map (lambda (x) (+ x min)) numbers)\n    (map (lambda (x) (+ x min)) numbers)\n\
    \    (map (lambda (x) (+ x min)) numbers)\n    (map (lambda (x) (+ x min)) numbers)\n\
    \    (map (lambda (x) (+ x min)) numbers)\n    (map (lambda (x) (+ x min)) numbers)\n\
    \    (map (lambda (x) (+ x min)) numbers)\n    (map (lambda (x) (+ x min)) numbers)\n\
    \    (map (lambda (x) (+ x min)) numbers)\n    (map (lambda (x) (+ x min)) numbers)\n\
    \    (map (lambda (x) (+ x min)) numbers)\n    (map (lambda (x) (+ x min)) numbers)\n\
    \    (map (lambda (x) (+ x min)) numbers)\n    (map (lambda (x) (+ x min)) numbers)\n\
    \    (map (lambda (x) (+ x min)) numbers)\n    (map (lambda (x) (+ x min)) numbers)\n\
    \    (map (lambda (x) (+ x min)) numbers)\n    (map (lambda (x) (+ x min)) numbers)\n\
    \    (map", "  (let ((min (first numbers))\n        (max (second numbers)))\n\
    \    (map #(/ (- %1 min) max) numbers)))\n", "  (let ((min (first numbers))\n\
    \        (max (second numbers)))\n    (map #(/ (- %1 min) (- %2 max)) numbers)))\n",
  "  (let ((min (first numbers))\n        (max (second numbers)))\n    (map (lambda\
    \ (n) (/ (- n min) (- max min))) numbers)))\n", "  (let ((min (first numbers))\n\
    \        (max (second numbers)))\n    (if (< min max)\n        (let ((diff (-\
    \ max min)))\n          (cons (/ (- diff 1.0) diff) numbers))\n        numbers)))\n",
  "  (let ((min (min numbers)))\n    (map #(/ % min) numbers)))\n", "  (let ((min\
    \ (first numbers))\n        (max (second numbers)))\n    (map (lambda (x) (/ (-\
    \ x min) max)) numbers)))\n", "  (let ((min (first numbers))\n        (max (second\
    \ numbers)))\n    (map (lambda (x) (/ x max)) numbers)))\n", "  (let ((min (first\
    \ numbers))\n        (max (second numbers)))\n    (map (lambda (x) (/ x max))\
    \ numbers)\n    (map (lambda (x) (* x max)) numbers)\n    (map (lambda (x) (+\
    \ x min)) numbers)))\n", "  (let ((min (min numbers)))\n    (map #(/ (- %1 min)\
    \ 1.0) numbers)))\n", "  (let ((min (first numbers))\n        (max (second numbers)))\n\
    \    (map #(/ (- %1 min) (- max min)) numbers)))\n", "  (let ((min (first numbers))\n\
    \        (max (second numbers)))\n    (map (lambda (n) (/ n max)) numbers)))\n",
  "  (let ((min (first numbers))\n        (max (second numbers)))\n    (if (< min\
    \ max)\n        (let ((diff (- min max)))\n          (cons (/ (- diff 1) diff)\n\
    \                (rescale_to_unit (cons (- diff 1) numbers))))\n        (cons\
    \ min (rescale_to_unit (cons max numbers))))))\n", "  (let ((min (first numbers))\n\
    \        (max (second numbers)))\n    (map (lambda (x) (/ (- x min) (- x max)))\
    \ numbers)))\n", "  (let ((min (min numbers)))\n    (map (lambda (x) (/ x min))\
    \ numbers)))\n", "  (let ((min (first numbers))\n        (max (second numbers)))\n\
    \    (map (lambda (x) (/ x max)) numbers)))\n", "  (let ((min (first numbers))\n\
    \        (max (second numbers)))\n    (map (lambda (x) (/ x max)) numbers)))\n",
  "  (let ((min (first numbers))\n        (max (second numbers)))\n    (if (< (min\
    \ max) 0.0)\n        (let ((range (/ (- max min) 2.0)))\n          (cons (/ (-\
    \ min 0.0) range)\n                (/ (- max 0.0) range))))\n      numbers)))\n",
  "  (let ((min (first numbers))\n        (max (second numbers)))\n    (map (lambda\
    \ (x)\n           (/ (- x min) max))\n         numbers)))\n", "  (let ((min (first\
    \ numbers))\n        (max (second numbers)))\n    (map #(/ % max) numbers)))\n",
  "  (let ((min (first numbers))\n        (max (second numbers)))\n    (map (lambda\
    \ (n) (/ n max)) numbers)))\n", "  (let ((min (first numbers))\n        (max (second\
    \ numbers)))\n    (map #(/ (- %1 min) (- max min)) numbers)))\n", "  (let ((min\
    \ (first numbers))\n        (max (second numbers)))\n    (map (lambda (x) (/ x\
    \ max)) numbers)))\n", "  (let ((min (min numbers)))\n    (map #(/ (- %1 min)\
    \ 1.0) numbers)))\n", "  (let ((min (first numbers))\n        (max (second numbers)))\n\
    \    (if (< min max)\n        (let ((diff (- max min)))\n          (cons (/ (-\
    \ diff (* diff (length numbers))) diff)\n                (cons (- min) (cons 1\
    \ (- max))))))\n    (let ((diff (- min max)))\n      (cons (/ (- diff (* diff\
    \ (length numbers))) diff)\n            (cons 0 (cons 1 (- max)))))))\n", "  (let\
    \ loop ((numbers (reverse numbers))\n             (min (first numbers))\n    \
    \         (max (second numbers)))\n    (if (null? numbers)\n        (reverse numbers)\n\
    \        (loop (rest numbers)\n              (if (< min max)\n               \
    \   (/ min max)\n                  min)\n              max))))\n", "  (let ((min\
    \ (min numbers)))\n    (map #(/ % min) numbers)))\n", "  (let ((min (first numbers))\n\
    \        (max (second numbers)))\n    (map (lambda (x) (/ (- x min) max)) numbers)))\n",
  "  (let ((min (first numbers))\n        (max (second numbers)))\n    (map (lambda\
    \ (x) (/ (- x min) max)) numbers)))\n", "  (let ((min (first numbers))\n     \
    \   (max (second numbers)))\n    (map (lambda (x) (/ (- x min) max)) numbers)))\n",
  "  (let ((min (first numbers))\n        (max (second numbers)))\n    (map (lambda\
    \ (x) (/ x max)) numbers)))\n", "  (let ((min (min numbers)))\n    (let ((max\
    \ (max numbers)))\n      (map #(/ % max) numbers))))\n", "  (let ((min (min numbers)))\n\
    \    (let ((max (max numbers)))\n      (map #(/ (- %1 min) max) numbers))))\n",
  "  (let ((min (min numbers)))\n    (map #(/ % min) numbers)))\n", "  (let ((min\
    \ (min numbers)))\n    (map #(/ % min) numbers)))\n", "  (let ((min (first numbers))\n\
    \        (max (second numbers)))\n    (map (lambda (x) (/ x max)) numbers)))\n",
  "  (let ((min (first numbers))\n        (max (second numbers)))\n    (if (< min\
    \ max)\n        (cons 0 (rescale_to_unit (rest numbers))))\n    (cons 1 (rescale_to_unit\
    \ (rest numbers)))))\n", "  (let ((min (first numbers))\n        (max (second\
    \ numbers)))\n    (map #(/ (- %1 min) (- max min)) numbers)))\n", "  (let ((min\
    \ (min numbers)))\n    (let ((max (max numbers)))\n      (map (lambda (n) (/ (-\
    \ n min) max)) numbers))))\n", "  (let ((min (first numbers))\n        (max (second\
    \ numbers)))\n    (map (lambda (x) (/ (- x min) (- max min))) numbers)))\n", " \
    \ (let ((min (min numbers)))\n    (map (lambda (x)\n           (/ (- x min) 1.0))\n\
    \         numbers)))\n", "  (let loop ((numbers numbers)\n             (result\
    \ '()))\n    (cond ((null? numbers) result)\n          ((< (car numbers) 0) (loop\
    \ (cdr numbers) (cons (car numbers) result)))\n          ((> (car numbers) 1)\
    \ (loop (cdr numbers) (cons (car numbers) result)))\n          (else (loop (cdr\
    \ numbers) (cons (car numbers) result))))))\n", "  (let ((min (min numbers)))\n\
    \    (map (lambda (x)\n           (/ (- x min) 1.0))\n         numbers)))\n",
  "  (let ((min (first numbers))\n        (max (second numbers)))\n    (map (lambda\
    \ (x) (/ x max)) numbers)))\n", "  (let ((min (min numbers)))\n    (let ((max\
    \ (max numbers)))\n      (map (lambda (x) (/ x max)) numbers))))\n", "  (let ((min\
    \ (min numbers))\n        (max (max numbers)))\n    (map (lambda (x) (/ x max))\
    \ numbers)))\n", "  (let ((min (min numbers)))\n    (let ((max (max numbers)))\n\
    \      (map (lambda (x) (/ x max)) numbers))))\n", "  (let ((min (min numbers)))\n\
    \    (let ((max (max numbers)))\n      (map #(/ % max) numbers)))\n", "  (let\
    \ ((min (first numbers))\n        (max (second numbers)))\n    (map (lambda (x)\
    \ (/ (- x min) max)) numbers)))\n", "  (let ((min (first numbers))\n        (max\
    \ (second numbers)))\n    (map (lambda (n) (/ n max)) numbers)))\n", "  (let ((min\
    \ (first numbers))\n        (max (second numbers)))\n    (map (lambda (n) (/ n\
    \ max)) numbers)))\n", "  (let ((min (first numbers))\n        (max (second numbers)))\n\
    \    (map #(/ (- %1 min) (- max min)) numbers)))\n", "  (let ((min (min numbers)))\n\
    \    (let ((max (max numbers)))\n      (map (lambda (n) (/ n max)) numbers))))\n",
  "  (let ((min (min numbers))\n        (max (max numbers)))\n    (map (lambda (x)\n\
    \           (/ (- x min) max))\n         numbers)))\n", "  (let ((min (first numbers))\n\
    \        (max (second numbers)))\n    (map (lambda (x) (/ (- x min) max)) numbers)))\n",
  "  (let ((min (min numbers))\n        (max (max numbers)))\n    (map (lambda (x)\n\
    \           (/ (- x min) (- max min)))\n         numbers)))\n", "  (let ((min\
    \ (first numbers))\n        (max (second numbers)))\n    (map (lambda (n) (/ n\
    \ max)) numbers)))\n", "  (let ((min (first numbers))\n        (max (second numbers)))\n\
    \    (map (lambda (x) (/ (- x min) max)) numbers)))\n", "  (let ((min (min numbers)))\n\
    \    (let ((max (max numbers)))\n      (map (lambda (x) (/ x max)) numbers))))\n",
  "  (let ((min (first numbers))\n        (max (second numbers)))\n    (map (lambda\
    \ (x) (/ x max)) numbers)))\n", "  (let ((min (first numbers))\n        (max (second\
    \ numbers)))\n    (map (lambda (x) (/ (- x min) (- max min))) numbers)))\n", " \
    \ (let ((min (min numbers)))\n    (map (lambda (n) (/ (- n min) 1.0))\n      \
    \   numbers)))\n", "  (let ((min (min numbers)))\n    (map (lambda (x) (/ x min))\
    \ numbers)))\n", "  (let ((min (first numbers))\n        (max (second numbers)))\n\
    \    (map (lambda (x) (/ x max)) numbers)))\n", "  (let ((min (min numbers)))\n\
    \    (let ((max (max numbers)))\n      (map (lambda (x) (/ x max)) numbers))))\n",
  "  (let ((min (first numbers))\n        (max (second numbers)))\n    (if (< min\
    \ max)\n        (let ((diff (- max min)))\n          (cons 0 (map #(/ % diff)\
    \ numbers))))\n    numbers))\n", "  (let ((min (min numbers))\n        (max (max\
    \ numbers)))\n    (map #(/ % 1.0) numbers)))\n", "  (let ((min (first numbers))\n\
    \        (max (second numbers)))\n    (map (lambda (x) (/ x max)) numbers)))\n",
  "  (let ((min (min numbers)))\n    (map #(/ (- %1 min) 1.0) numbers)))\n", "  (let\
    \ ((min (first numbers))\n        (max (second numbers)))\n    (map (lambda (n)\
    \ (/ (- n min) max)) numbers)))\n", "  (let ((min (first numbers))\n        (max\
    \ (second numbers)))\n    (map (lambda (x)\n           (/ (- x min) max))\n  \
    \       numbers)))\n", "  (let ((min (min numbers)))\n    (map (lambda (x) (/\
    \ x min)) numbers)))\n", "  (let ((min (first numbers))\n        (max (second\
    \ numbers)))\n    (map (lambda (x) (/ (- x min) max)) numbers)))\n", "  (let ((min\
    \ (first numbers))\n        (max (second numbers)))\n    (if (< min max)\n   \
    \     (let ((range (- max min)))\n          (map (lambda (x) (/ x range)) numbers))\n\
    \        numbers)))\n", "  (let ((min (min numbers)))\n    (let ((max (max numbers)))\n\
    \      (map (lambda (x)\n             (/ (- x min) max))\n           numbers))))\n",
  "  (let ((min (first numbers))\n        (max (second numbers)))\n    (map (lambda\
    \ (x) (/ x max)) numbers)))\n", "  (let ((min (min numbers)))\n    (let ((max\
    \ (max numbers)))\n      (map (lambda (x) (/ (- x min) max)) numbers)))\n  ;;\
    \ TODO: handle empty list\n  ;; TODO: handle non-numeric list\n  ;; TODO: handle\
    \ negative numbers\n  ;; TODO: handle negative numbers\n  ;; TODO: handle negative\
    \ numbers\n  ;; TODO: handle negative numbers\n  ;; TODO: handle negative numbers\n\
    \  ;; TODO: handle negative numbers\n  ;; TODO: handle negative numbers\n  ;;\
    \ TODO: handle negative numbers\n  ;; TODO: handle negative numbers\n  ;; TODO:\
    \ handle negative numbers\n  ;; TODO: handle negative numbers\n  ;; TODO: handle\
    \ negative numbers\n  ;; TODO: handle negative numbers\n  ;; TODO: handle negative\
    \ numbers\n  ;; TODO: handle negative numbers\n  ;; TODO: handle negative numbers\n\
    \  ;; TODO: handle negative numbers\n  ;; TODO: handle negative numbers\n  ;;\
    \ TODO: handle negative numbers\n  ;; TODO: handle negative numbers\n  ;; TODO:\
    \ handle negative numbers\n  ;; TODO: handle negative numbers\n  ;; TODO: handle\
    \ negative numbers\n  ;; TODO: handle negative numbers\n  ;; TODO: handle negative\
    \ numbers\n  ;; TODO: handle negative numbers\n  ;; TODO: handle negative numbers\n\
    \  ;; TODO: handle negative numbers\n  ;; TODO: handle negative numbers\n  ;;\
    \ TODO: handle negative numbers\n  ;; TODO: handle negative numbers\n  ;; TODO:\
    \ handle negative numbers\n  ;; TODO: handle negative numbers\n  ;; TODO: handle\
    \ negative numbers\n  ;; TODO: handle negative numbers\n  ;; TODO: handle negative\
    \ numbers\n  ;; TODO: handle negative numbers\n  ;; TODO: handle negative numbers\n\
    \  ;; TODO: handle negative numbers\n  ;; TODO: handle negative numbers\n  ;;\
    \ TODO: handle negative numbers\n  ;; TODO: handle negative numbers\n  ;; TODO:\
    \ handle negative numbers\n  ;; TODO: handle negative numbers\n  ;; TODO: handle\
    \ negative numbers\n  ;; TODO: handle negative numbers\n  ;; TODO: handle negative\
    \ numbers\n  ;; TODO: handle negative numbers\n  ;; TODO: handle negative numbers\n\
    \  ;; TODO: handle negative numbers\n  ;; TODO: handle negative numbers\n  ;;\
    \ TODO: handle negative numbers\n  ;; TODO: handle negative numbers\n  ;; TODO:\
    \ handle negative numbers\n  ;; TODO: handle negative numbers\n  ;; TODO: handle\
    \ negative numbers\n  ;; TODO: handle negative numbers\n  ;; TODO: handle ", " \
    \ (let ((min (first numbers))\n        (max (second numbers)))\n    (map (lambda\
    \ (x) (/ (- x min) max)) numbers)))\n", "  (let ((min (first numbers))\n     \
    \   (max (second numbers)))\n    (map #(/ % max) numbers)))\n", "  (let ((min\
    \ (first numbers))\n        (max (second numbers)))\n    (map (lambda (x) (/ (-\
    \ x min) max)) numbers)))\n", "  (let ((min (min numbers))\n        (max (max\
    \ numbers)))\n    (map #(/ % max) numbers)))\n", "  (let ((min (first numbers))\n\
    \        (max (second numbers)))\n    (map (lambda (x) (/ (- x min) (- max min)))\
    \ numbers)))\n", "  (let loop ((numbers numbers)\n             (result '()))\n\
    \    (if (null? numbers)\n        result\n        (loop (cdr numbers)\n      \
    \        (cons (min numbers)\n                    (loop (cdr numbers)\n      \
    \                    (cons (max numbers)\n                                result)))))))\n",
  "  (let ((min (first numbers))\n        (max (second numbers)))\n    (map (lambda\
    \ (x) (/ (- x min) max)) numbers)))\n", "  (let ((min (min numbers)))\n    (let\
    \ ((max (max numbers)))\n      (map (lambda (x) (/ x max)) numbers))))\n", " \
    \ (let ((min (first numbers))\n        (max (second numbers)))\n    (map (lambda\
    \ (x) (/ (- x min) (- max min))) numbers)))\n", "  (let ((min (first numbers))\n\
    \        (max (second numbers)))\n    (map (lambda (n) (/ n max)) numbers)))\n",
  "  (let ((min (min numbers)))\n    (map (lambda (n) (/ n min)) numbers)))\n", " \
    \ (let ((min (min numbers)))\n    (let ((max (max numbers)))\n      (map (lambda\
    \ (n) (/ (- n min) max)) numbers))))\n", "  (let ((min (first numbers))\n    \
    \    (max (second numbers)))\n    (map (lambda (x) (/ x max)) numbers)))\n", " \
    \ (let ((min (min numbers)))\n    (map (lambda (x) (/ x min)) numbers)))\n", " \
    \ (let ((min (first numbers))\n        (max (second numbers)))\n    (map #(/ %\
    \ 1.0) numbers)\n    (map #(* 1.0 %) numbers)\n    (map #(+ min %) numbers)\n\
    \    (map #(+ max %) numbers)))\n", "  (let ((min (first numbers))\n        (max\
    \ (second numbers)))\n    (map (lambda (x) (/ x max)) numbers)))\n", "  (let ((min\
    \ (min numbers)))\n    (let ((max (max numbers)))\n      (map (lambda (n) (/ (-\
    \ n min) max)) numbers))))\n", "  (let ((min (first numbers))\n        (max (second\
    \ numbers)))\n    (map #(/ % max) numbers)))\n", "  (let ((min (first numbers))\n\
    \        (max (second numbers)))\n    (map (lambda (x) (/ (- x min) (- max min)))\
    \ numbers)))\n", "  (let ((min (min numbers)))\n    (let ((max (max numbers)))\n\
    \      (map (lambda (x) (/ x max)) numbers))))\n", "  (let ((min (first numbers))\n\
    \        (max (second numbers)))\n    (map (lambda (x) (/ (- x min) max)) numbers)))\n",
  "  (let ((min (first numbers))\n        (max (second numbers)))\n    (if (< min\
    \ max)\n        (let ((range (- max min)))\n          (map (lambda (x) (/ x range))\
    \ numbers))\n        numbers)))\n", "  (let ((min (first numbers))\n        (max\
    \ (second numbers)))\n    (map (lambda (x)\n           (/ (- x min) max))\n  \
    \       numbers)))\n", "  (let ((min (first numbers))\n        (max (second numbers)))\n\
    \    (map (lambda (n) (/ (- n min) max)) numbers)))\n", "  (let ((min (first numbers))\n\
    \        (max (second numbers)))\n    (if (< min max)\n        (let ((diff (-\
    \ max min)))\n          (cons (/ (- diff (* min (- diff max))) diff)\n       \
    \         (cons min (cons diff max))))\n        (cons min (cons max min)))))\n",
  "  (let loop ((numbers numbers)\n             (result '()))\n    (cond ((null? numbers)\
    \ result)\n          ((< (first numbers) (first result)) (loop (rest numbers)\
    \ (cons (first numbers) result)))\n          ((> (first numbers) (first result))\
    \ (loop (rest numbers) (cons (first result) (first numbers))))\n          (else\
    \ (loop (rest numbers) (cons (first result) (first numbers)))))))\n", "  (let\
    \ ((min (first numbers))\n        (max (second numbers)))\n    (map (lambda (x)\
    \ (/ (- x min) max)) numbers)))\n", "  (let ((min (min numbers)))\n    (map (lambda\
    \ (x) (/ x min)) numbers)))\n", "  (let ((min (first numbers))\n        (max (second\
    \ numbers)))\n    (map (lambda (x) (/ (- x min) max)) numbers)))\n", "  (let ((min\
    \ (min numbers)))\n    (let ((max (max numbers)))\n      (map (lambda (x) (/ x\
    \ max)) numbers))))\n", "  (let ((min (min numbers)))\n    (map (lambda (n) (/\
    \ n min)) numbers)))\n", "  (let ((min (min numbers)))\n    (map (lambda (x) (/\
    \ x min)) numbers)))\n", "  (let ((min (first numbers))\n        (max (second\
    \ numbers)))\n    (map (lambda (x) (/ (- x min) max)) numbers)))\n", "  (let ((min\
    \ (min numbers)))\n    (map (lambda (n) (/ n min)) numbers)))\n", "  (let ((min\
    \ (first numbers))\n        (max (second numbers)))\n    (map (lambda (x) (/ (-\
    \ x min) (- max min))) numbers)))\n", "  (let ((min (first numbers))\n       \
    \ (max (second numbers)))\n    (map #(/ (- %1 min) (- max min)) numbers)))\n",
  "  (let ((min (min numbers)))\n    (map (lambda (x) (/ x min)) numbers)))\n", " \
    \ (let ((min (first numbers))\n        (max (second numbers)))\n    (map (lambda\
    \ (x) (/ x max)) numbers)))\n", "  (let ((min (first numbers))\n        (max (second\
    \ numbers)))\n    (map #(/ (- %1 min) max) numbers)))\n", "  (let ((min (first\
    \ numbers))\n        (max (second numbers)))\n    (map (lambda (x) (/ x max))\
    \ numbers)))\n", "  (let ((min (first numbers))\n        (max (second numbers)))\n\
    \    (map (lambda (x)\n           (/ (- x min) max))\n         numbers)))\n",
  "  (let ((min (first numbers))\n        (max (second numbers)))\n    (map #(/ %\
    \ max) numbers)))\n", "  (let ((min (min numbers))\n        (max (max numbers)))\n\
    \    (map (lambda (x) (/ x max)) numbers)))\n", "  (let ((min (min numbers)))\n\
    \    (let ((max (max numbers)))\n      (map (lambda (x) (/ x max)) numbers))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
