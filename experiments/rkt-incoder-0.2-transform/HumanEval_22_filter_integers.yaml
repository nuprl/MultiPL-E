name: HumanEval_22_filter_integers
language: rkt
prompt: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
  ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
  \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
  \ values)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
  \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate (list\
  \ 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
  \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
completions: ["  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n", "  (filter (lambda (x) (and (number? x) (integer? x)))\
    \ values))\n", "  (cond ((null? values) '())\n        ((number? (car values))\
    \ (cons (car values) (filter_integers (cdr values))))\n        (else (filter_integers\
    \ (cdr values)))))\n", "  (cond\n    [(empty? values) '()]\n    [(number? (car\
    \ values)) (cons (car values) (filter_integers (cdr values)))]\n    [else (filter_integers\
    \ (cdr values))]))\n", "  (cond [(empty? values) '()]\n        [(number? (car\
    \ values)) (cons (car values) (filter_integers (cdr values)))]\n        [else\
    \ (filter_integers (cdr values))]))\n", "  (cond [(null? values) '()]\n      \
    \  [(number? values) values]\n        [else (cons (car values) (filter_integers\
    \ (cdr values)))]))\n", "  (cond [(null? values) '()]\n        [(number? values)\
    \ values]\n        [else (cons (car values) (filter_integers (cdr values)))]))\n",
  "  (cond [(empty? values) '()]\n        [(number? (car values)) (cons (car values)\
    \ (filter_integers (cdr values)))]\n        [else (filter_integers (cdr values))]))\n",
  "  (cond [(empty? values) '()]\n        [(number? (car values)) (cons (car values)\
    \ (filter_integers (cdr values)))]\n        [else (filter_integers (cdr values))]))\n",
  "  (cond [(empty? values) '()]\n        [(number? (car values)) (cons (car values)\
    \ (filter_integers (cdr values)))]\n        [else (filter_integers (cdr values))]))\n",
  "  (filter (lambda (x) (and (number? x) (integer? x))) values))\n", "  (filter (lambda\
    \ (x) (and (number? x) (integer? x))) values))\n", "  (cond [(empty? values) '()]\n\
    \        [(number? values) values]\n        [else (append (filter_integers (first\
    \ values))\n                      (filter_integers (rest values)))]))\n", "  (cond\
    \ [(empty? values) '()]\n        [(number? (car values)) (cons (car values) (filter_integers\
    \ (cdr values)))]\n        [else (filter_integers (cdr values))]))\n", "  (cond\
    \ [(empty? values) '()]\n        [(number? (car values)) (cons (car values) (filter_integers\
    \ (cdr values)))]\n        [else (filter_integers (cdr values))]))\n", "  (cond\
    \ [(empty? values) '()]\n        [(number? (first values)) (cons (first values)\
    \ (filter_integers (rest values)))]\n        [else (filter_integers (rest values))]))\n",
  "  (cond [(null? values) '()]\n        [(number? values) values]\n        [else\
    \ (cons (car values) (filter_integers (cdr values)))]))\n", "  (filter (lambda\
    \ (x) (number? x))\n         values))\n", "  (cond [(null? values) '()]\n    \
    \    [(number? values) values]\n        [else (cons (car values) (filter_integers\
    \ (cdr values)))]))\n", "  (cond [(empty? values) '()]\n        [(number? (car\
    \ values)) (cons (car values) (filter_integers (cdr values)))]\n        [else\
    \ (filter_integers (cdr values))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
