name: HumanEval_10_make_palindrome
language: rkt
prompt: "#lang racket\n\n;; Find the shortest palindrome that begins with a supplied\
  \ string.\n;; Algorithm idea is simple:\n;; - Find the longest postfix of supplied\
  \ string that is a palindrome.\n;; - Append to the end of the string reverse of\
  \ a string prefix that comes before the palindromic suffix.\n;; >>> (make_palindrome\
  \ \"\")\n;; \"\"\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome\
  \ \"cata\")\n;; \"catac\"\n(define (make_palindrome string)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate make_palindrome))\n\
  \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"x\") \"\
  x\")\n    (check-equal? (candidate \"xyz\") \"xyzyx\")\n    (check-equal? (candidate\
  \ \"xyx\") \"xyx\")\n    (check-equal? (candidate \"jerry\") \"jerryrrej\")\n))\n\
  \n(test-humaneval)"
completions: ["  (let ((longest (longest-postfix string)))\n    (if (null? longest)\n\
    \        \"\"\n        (append (substring string 0 (- (length string) longest))\
    \ (substring string longest))))\n)\n", "  (define (helper string result)\n   \
    \ (if (string-empty? string)\n        result\n        (helper (substring string\
    \ 1) (append result (substring string 0)))))\n  (helper string \"\"))\n", "  (let\
    \ ((longest-palindromic-suffix (longest-palindromic-suffix string)))\n    (if\
    \ (null? longest-palindromic-suffix)\n        \"\"\n        (append string (make-reverse-string\
    \ longest-palindromic-suffix))))))\n", '  (let ((longest-postfix longest-postfix-of-palindrome-suffix
    longest-postfix-of-palindrome-suffix longest-postfix-of-palindrome-suffix longest-postfix-of-palindrome-suffix
    longest-postfix-of-palindrome-suffix longest-postfix-of-palindrome-suffix longest-postfix-of-palindrome-suffix
    longest-postfix-of-palindrome-suffix longest-postfix-of-palindrome-suffix longest-postfix-of-palindrome-suffix
    longest-postfix-of-palindrome-suffix longest-postfix-of-palindrome-suffix longest-postfix-of-palindrome-suffix
    longest-postfix-of-palindrome-suffix longest-postfix-of-palindrome-suffix longest-postfix-of-palindrome-suffix
    longest-postfix-of-palindrome-suffix longest-postfix-of-palindrome-suffix longest-postfix-of-palindrome-suffix
    longest-postfix-of-palindrome-suffix longest-postfix-of-palindrome-suffix longest-postfix-of-palindrome-suffix
    longest-postfix-of-palindrome-suffix longest-postfix-of-palindrome-suffix longest-postfix-of-palindrome-suffix
    longest-postfix-of-palindrome-suffix longest-postfix-of-palindrome-suffix longest-postfix-of-palindrome-suffix
    longest-postfix-of-palindrome-suffix longest-postfix-of-palindrome-suffix longest-postfix-of-palindrome-suffix
    longest-postfix-of-palindrome-suffix longest-postfix-of-palindrome-suffix longest-postfix-of-palindrome-suffix
    longest-postfix-of-palindrome-suffix longest-postfix-of-palindrome-suffix longest-postfix-of-palindrome-suffix
    longest-postfix-of-palindrome-suffix longest-postfix-of-palindrome-suffix longest-postfix-of-palindrome-suffix
    longest-postfix-of-palindrome-suffix longest-postfix-of-palindrome-suffix longest-postfix-of-palindrome-suffix
    longest-postfix-of-palindrome-suffix longest-postfix-of-palindrome-suffix longest-postfix-of-palindrome-',
  "  (let ((longest-palindromic-suffix (longest-palindromic-suffix string)))\n   \
    \ (if (null? longest-palindromic-suffix)\n        string\n        (append string\
    \ (reverse (substring string 0 (- (length string) longest-palindromic-suffix)))))\n\
    \    ))\n", "  (let ((longest-palindromic-suffix (longest-palindromic-suffix string)))\n\
    \    (if (null? longest-palindromic-suffix)\n        \"\"\n        (append (substring\
    \ string 0 (- (length string) longest-palindromic-suffix))\n                (substring\
    \ string longest-palindromic-suffix 0)))))\n", "  (let ((longest (string-length\
    \ string))\n        (prefix (substring string 0 (- longest 1)))\n        (suffix\
    \ (substring string longest 1)))\n    (string-append (make_palindrome_prefix prefix)\
    \ (make_palindrome_suffix suffix))))\n", "  (let ((longest-postfix (longest-postfix\
    \ string)))\n    (if (null? longest-postfix)\n        string\n        (append\
    \ (substring string 0 (- (length string) longest-postfix))\n                (substring\
    \ string longest-postfix 0)))))\n", "  (let ((prefix (reverse string)))\n    (append\
    \ string prefix)))\n", "  (let ((longest (longest-postfix string)))\n    (if (null?\
    \ longest)\n        \"\"\n        (append (substring string 0 (- (length string)\
    \ longest)) (make-palindrome (substring string longest))))))\n", "  (let ((longest\
    \ (length string)))\n    (let loop ((i 0) (string string) (result '()))\n    \
    \  (if (< i longest)\n          (loop (+ i 1) (append string (substring string\
    \ i (- i longest))) (append result (substring string 0 (- i longest))))\n    \
    \      (append result string)))))\n", "  (let ((longest-postfix \n         (longest-postfix-of-palindrome\
    \ string)))\n    (if (null? longest-postfix)\n        \"\"\n        (append (substring\
    \ string 0 (- (length string) longest-postfix))\n                (substring string\
    \ longest-postfix 0)))))\n", "  (let ((longest (string-length string)))\n    (let\
    \ ((prefix (substring string 0 (- longest 1))))\n      (let ((suffix (substring\
    \ string 1 (string-length string))))\n        (if (equal? (reverse prefix) suffix)\n\
    \            (string-append string (reverse suffix))\n            (string-append\
    \ (make_palindrome suffix) (substring prefix longest))\n          )\n        )\n\
    \      )\n    )\n  )\n", "  (let ((longest-palindromic-suffix (longest-palindromic-suffix\
    \ string)))\n    (if (null? longest-palindromic-suffix)\n        \"\"\n      \
    \  (append string (make-reverse-string (substring string 0 (- (length string)\
    \ longest-palindromic-suffix))) longest-palindromic-suffix))))\n", "  (let ((longest-palindromic-suffix\
    \ (longest-palindromic-suffix string)))\n    (if (null? longest-palindromic-suffix)\n\
    \        string\n        (append string (reverse (substring string 0 (- (length\
    \ string) longest-palindromic-suffix)))))\n    ))\n", "  (let ((prefix (reverse\
    \ string)))\n    (append string prefix)))\n", "  (let ((longest-palindromic-suffix\
    \ (longest-palindromic-suffix string)))\n    (append string (make-reverse-string\
    \ string longest-palindromic-suffix))))\n", "  (let ((len (string-length string)))\n\
    \    (if (= len 0)\n        \"\"\n        (let ((palindrome (make-string len)))\n\
    \          (let ((i (string-index string #\\)))\n            (if (< i len)\n \
    \               (set! palindrome (append palindrome (substring string 0 (- i len))))\n\
    \                (set! palindrome (append palindrome (substring string i (- i\
    \ len))))))\n          (set! palindrome (append palindrome (substring string 0\
    \ (- len 1))))\n          (set! palindrome (append palindrome (substring string\
    \ 1 (- len 1))))\n          (set! palindrome (append palindrome (substring string\
    \ 0 (- len 1))))\n          (set! palindrome (append palindrome (substring string\
    \ 1 (- len 1))))\n          (set! palindrome (append palindrome (substring string\
    \ 0 (- len 1))))\n          (set! palindrome (append palindrome (substring string\
    \ 1 (- len 1))))\n          (set! palindrome (append palindrome (substring string\
    \ 0 (- len 1))))\n          (set! palindrome (append palindrome (substring string\
    \ 1 (- len 1))))\n          (set! palindrome (append palindrome (substring string\
    \ 0 (- len 1))))\n          (set! palindrome (append palindrome (substring string\
    \ 1 (- len 1))))\n          (set! palindrome (append palindrome (substring string\
    \ 0 (- len 1))))\n          (set! palindrome (append palindrome (substring string\
    \ 1 (- len 1))))\n          (set! palindrome (append palindrome (substring string\
    \ 0 (- len 1))))\n          (set! palindrome (append palindrome (substring string\
    \ 1 (- len 1))))\n          (set! palindrome (append palindrome (substring string\
    \ 0 (- len 1))))\n          (set! palindrome (append palindrome (substring string\
    \ 1 (- len 1))))\n          (set! palindrome (append palindrome (substring string\
    \ 0 (- len 1))))\n          (set! palindro", "  (let ((longest (length string)))\n\
    \    (let loop ((i 0)\n               (palindrome (substring string 0 (- i longest))))\n\
    \      (if (= i longest)\n          palindrome\n          (loop (+ i 1) (append\
    \ palindrome (substring string i (- i longest))))))))\n", "  (let ((longest-postfix\
    \ '())\n        (longest-postfix-length 0))\n    (loop for char across string\n\
    \          for i from 0 to (string-length string)\n          for j from 0 to (string-length\
    \ string)\n          when (char=? (substring string i j)\n                   \
    \    (substring string (string-length string) (string-length string)))\n     \
    \     do (set! longest-postfix (cons char longest-postfix))\n          do (set!\
    \ longest-postfix-length (max (+ 1 (length longest-postfix)) longest-postfix-length))\n\
    \          until (equal? longest-postfix '())\n          do (set! longest-postfix\
    \ (cdr longest-postfix))\n          do (set! longest-postfix-length (max (+ 1\
    \ (length longest-postfix)) longest-postfix-length))\n          until (equal?\
    \ longest-postfix '())\n          do (set! longest-postfix (cdr longest-postfix))\n\
    \          do (set! longest-postfix-length (max (+ 1 (length longest-postfix))\
    \ longest-postfix-length))\n          until (equal? longest-postfix '())\n   \
    \       do (set! longest-postfix (cdr longest-postfix))\n          do (set! longest-postfix-length\
    \ (max (+ 1 (length longest-postfix)) longest-postfix-length))\n          until\
    \ (equal? longest-postfix '())\n          do (set! longest-postfix (cdr longest-postfix))\n\
    \          do (set! longest-postfix-length (max (+ 1 (length longest-postfix))\
    \ longest-postfix-length))\n          until (equal? longest-postfix '())\n   \
    \       do (set! longest-postfix (cdr longest-postfix))\n          do (set! longest-postfix-length\
    \ (max (+ 1 (length longest-postfix)) longest-postfix-length))\n          until\
    \ (equal? longest-postfix '())\n          do (set! longest-postfix (cdr longest-postfix))\n\
    \          do (set! longest-postfix-length (max (+ 1 (length longest-postfix))\
    \ longest-postfix-length))\n          until (equal? longest-postfix '())\n   \
    \       do (set! longest-postfix (cdr longest-postfix))\n          do (set! longest-postfix-length\
    \ (max (+ 1 (length longest-postfix)) longest"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
