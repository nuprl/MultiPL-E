name: HumanEval_93_encode
language: rkt
prompt: "#lang racket\n\n;; Write a function that takes a message, and encodes in\
  \ such a \n;; way that it swaps case of all letters, replaces all vowels in \n;;\
  \ the message with the letter that appears 2 places ahead of that \n;; vowel in\
  \ the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> (encode\
  \ \"test\")\n;; \"TGST\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C\
  \ MGSSCGG\"\n(define (encode message)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n\
  \    (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate\
  \ \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n  \
  \  (check-equal? (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
  \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
  \n(test-humaneval)"
completions: ["  (let ((vowels '(a e i o u)))\n    (cond\n      [(empty? message)\
    \ \"\"]\n      [(member (first message) vowels) (cons (first message) (encode\
    \ (substring message 1 (length message))))]\n      [else (cons (first message)\
    \ (encode (substring message 1 (length message))))])))\n", "  (let ((vowels '(a\
    \ e i o u)))\n    (cond\n      [(empty? message) \"\"]\n      [(member (first\
    \ message) vowels) (first message)]\n      [else (cons (first message)\n     \
    \             (encode (substring message 1 (- (length message) 1)))]))))\n", " \
    \ (define (helper message i j)\n    (cond [(= i j) message]\n          [(char-alphabet\
    \ (char message)) (char message)]\n          [(char-alphabet (char message)) (helper\
    \ (substring message i (+ i 1)) j)]\n          [(char-alphabet (char message))\
    \ (helper (substring message (+ i 1) (+ i 1)) j)]\n          [else (helper (substring\
    \ message i (+ i 1)) j)]))\n  (helper message 0 0))\n", "  (let ((vowels '(a e\
    \ i o u)))\n    (cond [(empty? message) \"\"]\n          [(member (first message)\
    \ vowels) (cons (first message) (encode (substring message 1 (length message))))]\n\
    \          [else (cons (first message) (encode (substring message 1 (length message))))])))\n",
  "  (cond\n    [(empty? message) \"\"]\n    [(equal? (first message) ?a) (encode-a\
    \ message)]\n    [(equal? (first message) ?e) (encode-e message)]\n    [(equal?\
    \ (first message) ?i) (encode-i message)]\n    [(equal? (first message) ?o) (encode-o\
    \ message)]\n    [(equal? (first message) ?u) (encode-u message)]\n    [else (encode-others\
    \ message)]))\n", "  (define (helper message index vowels)\n    (cond\n      [(empty?\
    \ message) message]\n      [(equal? (char-ref message index) vowel) (char-ref\
    \ message (+ index 2))]\n      [else (helper (substring message 0 index) (+ index\
    \ 1) vowels (cons (char-ref message index) vowels))]))\n  (helper message 0 '()))\n",
  "  (let ((vowels '(a e i o u)))\n    (cond\n      [(empty? message) \"\"]\n    \
    \  [(member (first message) vowels) (first message)]\n      [else (cons (first\
    \ message)\n                   (encode (substring message 1 \n               \
    \                    (length (first message)))))])))\n", "  (let ((vowels '(a\
    \ e i o u)))\n    (cond\n      [(empty? message) \"\"]\n      [(char-alphabet\
    \ (first message)) (cons (first message) (encode (substring message 1 (char-alphabet\
    \ (first message)))))]\n      [else (cons (first message)\n                  (encode\
    \ (substring message 1 (char-alphabet (first message))))\n                  (encode\
    \ (substring message (char-alphabet (first message)) (length message))))]))\n",
  "  (let ((letters '(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l\
    \ #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z))\n       \
    \ (vowels '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J #\\K #\\L #\\M #\\\
    N #\\O #\\P #\\Q #\\R #\\S #\\T #\\V #\\W #\\X #\\Y #\\Z)))\n    (cond\n     \
    \ [(empty? message) \"\"]\n      [(char-alphabet (first message)) (cons (first\
    \ message) (encode (rest message)))]\n      [else (cond\n             [(char-alphabet\
    \ (first message)) (cons (first message) (encode (rest message)))]\n         \
    \    [(char-alphabet (first message)) (cons (first message) (encode (rest message)))]\n\
    \             [(char-alphabet (first message)) (cons (first message) (encode (rest\
    \ message)))]\n             [(char-alphabet (first message)) (cons (first message)\
    \ (encode (rest message)))]\n             [(char-alphabet (first message)) (cons\
    \ (first message) (encode (rest message)))]\n             [(char-alphabet (first\
    \ message)) (cons (first message) (encode (rest message)))]\n             [(char-alphabet\
    \ (first message)) (cons (first message) (encode (rest message)))]\n         \
    \    [(char-alphabet (first message)) (cons (first message) (encode (rest message)))]\n\
    \             [(char-alphabet (first message)) (cons (first message) (encode (rest\
    \ message)))]\n             [(char-alphabet (first message)) (cons (first message)\
    \ (encode (rest message)))]\n             [(char-alphabet (first message)) (cons\
    \ (first message) (encode (rest message)))]\n             [(char-alphabet (first\
    \ message)) (cons (first message) (encode (rest message)))]\n             [(char-alphabet\
    \ (first message)) (cons (first message) (encode (rest message)))]\n         \
    \    [(char-alphabet (first message)) (cons (first ", "  (define (swap-case message)\n\
    \    (define (swap-case-helper message)\n      (define (swap-case-helper-helper\
    \ message)\n        (define (swap-case-helper-helper-helper message)\n       \
    \   (define (swap-case-helper-helper-helper-helper message)\n            (define\
    \ (swap-case-helper-helper-helper-helper-helper message)\n              (define\
    \ (swap-case-helper-helper-helper-helper-helper-helper message)\n            \
    \    (define (swap-case-helper-helper-helper-helper-helper-helper-helper message)\n\
    \                  (define (swap-case-helper-helper-helper-helper-helper-helper-helper\
    \ message)\n                    (define (swap-case-helper-helper-helper-helper-helper-helper-helper\
    \ message)\n                      (define (swap-case-helper-helper-helper-helper-helper-helper-helper\
    \ message)\n                        (define (swap-case-helper-helper-helper-helper-helper-helper-helper\
    \ message)\n                          (define (swap-case-helper-helper-helper-helper-helper-helper-helper\
    \ message)\n                            (define (swap-case-helper-helper-helper-helper-helper-helper-helper\
    \ message)\n                              (define (swap-case-helper-helper-helper-helper-helper-helper-helper\
    \ message)\n                                (define (swap-case-helper-helper-helper-helper-helper-helper-helper\
    \ message)\n                                  (define (swap-case-helper-helper-helper-helper-helper-helper-helper\
    \ message)\n                                    (define (swap-case-helper-helper-helper-helper-helper-helper-helper\
    \ message)\n                                      (define (swap-case-helper-helper-helper-helper-helper-helper-helper\
    \ message)\n                                        (define (swap-case-helper-helper-helper-helper-helper-helper-helper\
    \ message)\n                                          (define (swap-case-helper-helper-helper-helper-helper-helper-helper\
    \ message)\n                                            (define (swap-case-helper-helper-helper-helper-helper-helper-helper\
    \ message)\n                                              (define (swap-case-helper-helper-helper-helper-helper-helper-helper\
    \ message)\n                                                (define (swap-case-helper-helper-helper-helper-helper-helper-helper\
    \ message)\n                                                  (define (swap-case-helper-helper-helper-helper-helper-helper-helper\
    \ message)\n                                                    ", "  (let ([vowels\
    \ '(a e i o u)])\n    (cond\n      [(empty? message) message]\n      [(member\
    \ (first message) vowels) (cons (first message) (encode (substring message 1 (length\
    \ (first message))))) ]\n      [else (cons (first message) (encode (substring\
    \ message 1 (length (first message))))) ]\n    )\n  )\n)\n", "  (define (helper\
    \ message index)\n    (cond [(empty? message) message]\n          [(equal? (char-ref\
    \ message index) ?a) (char-ref message (+ index 1))]\n          [(equal? (char-ref\
    \ message index) ?e) (char-ref message (+ index 2))]\n          [(equal? (char-ref\
    \ message index) ?i) (char-ref message (+ index 3))]\n          [(equal? (char-ref\
    \ message index) ?o) (char-ref message (+ index 4))]\n          [(equal? (char-ref\
    \ message index) ?u) (char-ref message (+ index 5))]\n          [(equal? (char-ref\
    \ message index) ?A) (char-ref message (+ index 6))]\n          [(equal? (char-ref\
    \ message index) ?E) (char-ref message (+ index 7))]\n          [(equal? (char-ref\
    \ message index) ?I) (char-ref message (+ index 8))]\n          [(equal? (char-ref\
    \ message index) ?O) (char-ref message (+ index 9))]\n          [(equal? (char-ref\
    \ message index) ?U) (char-ref message (+ index 10))]\n          [(equal? (char-ref\
    \ message index) ?n) (char-ref message (+ index 11))]\n          [(equal? (char-ref\
    \ message index) ?p) (char-ref message (+ index 12))]\n          [(equal? (char-ref\
    \ message index) ?r) (char-ref message (+ index 13))]\n          [(equal? (char-ref\
    \ message index) ?s) (char-ref message (+ index 14))]\n          [(equal? (char-ref\
    \ message index) ?t) (char-ref message (+ index 15))]\n          [(equal? (char-ref\
    \ message index) ?g) (char-ref message (+ index 16))]\n          [(equal? (char-ref\
    \ message index) ?c) (char-ref message (+ index 17))]\n          [(equal? (char-ref\
    \ message index) ?m) (char-ref message (+ index 18))]\n          [(equal? (char-ref\
    \ message index) ?g) (char-ref message (+ index 19))]\n          [(equal? (char-ref\
    \ message index) ?g) (char-ref message (+ index 20))]\n          [(equal? (char-ref\
    \ message index) ?s) (char-ref message (+ index 21))]\n          [(equal? (char-ref\
    \ message index) ?c", "  (define (helper message index count)\n    (cond [(zero?\
    \ count) (list message)]\n          [(equal? (char-code (char message index))\
    \ #\\a) (list message)]\n          [(equal? (char-code (char message index)) #\\\
    e) (list message)]\n          [(equal? (char-code (char message index)) #\\i)\
    \ (list message)]\n          [(equal? (char-code (char message index)) #\\o) (list\
    \ message)]\n          [(equal? (char-code (char message index)) #\\u) (list message)]\n\
    \          [(equal? (char-code (char message index)) #\\y) (list message)]\n \
    \         [(equal? (char-code (char message index)) #\\A) (list message)]\n  \
    \        [(equal? (char-code (char message index)) #\\E) (list message)]\n   \
    \       [(equal? (char-code (char message index)) #\\I) (list message)]\n    \
    \      [(equal? (char-code (char message index)) #\\O) (list message)]\n     \
    \     [(equal? (char-code (char message index)) #\\U) (list message)]\n      \
    \    [(equal? (char-code (char message index)) #\\Y) (list message)]\n       \
    \   [(equal? (char-code (char message index)) #\\a) (list message)]\n        \
    \  [(equal? (char-code (char message index)) #\\e) (list message)]\n         \
    \ [(equal? (char-code (char message index)) #\\i) (list message)]\n          [(equal?\
    \ (char-code (char message index)) #\\o) (list message)]\n          [(equal? (char-code\
    \ (char message index)) #\\u) (list message)]\n          [(equal? (char-code (char\
    \ message index)) #\\y) (list message)]\n          [(equal? (char-code (char message\
    \ index)) #\\A) (list message)]\n          [(equal? (char-code (char message index))\
    \ #\\E) (list message)]\n          [(equal? (char-code (char message index)) #\\\
    I) (list message)]\n          [(equal? (char-code (char message index)) #\\O)\
    \ (list message)]\n          [(equal? (char-code (char message index)) #\\U) (list\
    \ message)]\n          [(equal? (char-code (char message index)) #\\Y) (list message)]\n\
    \          [(equal? (char-code (char message index)) ", "  (cond\n    [(empty?\
    \ message) \"\"]\n    [(equal? (first message) ?a) (encode-a message)]\n    [(equal?\
    \ (first message) ?e) (encode-e message)]\n    [(equal? (first message) ?i) (encode-i\
    \ message)]\n    [(equal? (first message) ?o) (encode-o message)]\n    [(equal?\
    \ (first message) ?u) (encode-u message)]\n    [else (encode-other (first message))]))\n",
  "  (cond\n    [(empty? message) \"\"]\n    [(equal? (first message) ?a) (encode\
    \ (substring message 1 2))]\n    [(equal? (first message) ?e) (encode (substring\
    \ message 1 3))]\n    [(equal? (first message) ?i) (encode (substring message\
    \ 1 4))]\n    [(equal? (first message) ?o) (encode (substring message 1 5))]\n\
    \    [(equal? (first message) ?u) (encode (substring message 1 6))]\n    [(equal?\
    \ (first message) ?A) (encode (substring message 1 7))] \n    [(equal? (first\
    \ message) ?E) (encode (substring message 1 8))] \n    [(equal? (first message)\
    \ ?I) (encode (substring message 1 9))] \n    [(equal? (first message) ?O) (encode\
    \ (substring message 1 10))] \n    [(equal? (first message) ?U) (encode (substring\
    \ message 1 11))] \n    [(equal? (first message) ?a) (encode (substring message\
    \ 1 12))] \n    [(equal? (first message) ?e) (encode (substring message 1 13))]\
    \ \n    [(equal? (first message) ?i) (encode (substring message 1 14))] \n   \
    \ [(equal? (first message) ?o) (encode (substring message 1 15))] \n    [(equal?\
    \ (first message) ?u) (encode (substring message 1 16))] \n    [(equal? (first\
    \ message) ?A) (encode (substring message 1 17))] \n    [(equal? (first message)\
    \ ?E) (encode (substring message 1 18))] \n    [(equal? (first message) ?I) (encode\
    \ (substring message 1 19))] \n    [(equal? (first message) ?O) (encode (substring\
    \ message 1 20))] \n    [(equal? (first message) ?U) (encode (substring message\
    \ 1 21))] \n    [(equal? (first message) ?a) (encode (substring message 1 22))]\
    \ \n    [(equal? (first message) ?e) (encode (substring message 1 23))] \n   \
    \ [(equal? (first message) ?i) (encode (substring message 1 24))] \n    [(equal?\
    \ (first message) ?o) (encode (substring message 1 25))] \n    [(equal? (first\
    \ message) ?u) (encode (substring message 1 26))] \n    [(equal? (first message)\
    \ ?A) (", "  (let ([vowels '(a e i o u)])\n    (cond\n      [(empty? message)\
    \ \"\"]\n      [(char-alphabet (first message)) (cons (first message) (encode\
    \ (substring message 1 (char-alphabet (first message)))))]\n      [(char-alphabet\
    \ (first message)) (cons (first message) (encode (substring message 1 (char-alphabet\
    \ (first message)))))]\n      [else (cons (first message) (encode (substring message\
    \ 1 (char-alphabet (first message)))))])))\n", "  (cond\n    [(empty? message)\
    \ \"\"]\n    [(equal? (first message) ?a) (encode-a message)]\n    [(equal? (first\
    \ message) ?e) (encode-e message)]\n    [(equal? (first message) ?i) (encode-i\
    \ message)]\n    [(equal? (first message) ?o) (encode-o message)]\n    [(equal?\
    \ (first message) ?u) (encode-u message)]\n    [else (encode-others message)]))\n",
  "  (define (enc-helper msg i j)\n    (cond\n      [(char=? (char-code (char msg\
    \ i)) #\\a) (char-code (char msg i))]\n      [(char=? (char-code (char msg i))\
    \ #\\e) (char-code (char msg i))]\n      [(char=? (char-code (char msg i)) #\\\
    i) (char-code (char msg i))]\n      [(char=? (char-code (char msg i)) #\\o) (char-code\
    \ (char msg i))]\n      [(char=? (char-code (char msg i)) #\\u) (char-code (char\
    \ msg i))]\n      [(char=? (char-code (char msg i)) #\\y) (char-code (char msg\
    \ i))]\n      [else (char msg i)]))\n  (define (enc-loop msg i j)\n    (cond\n\
    \      [(char=? (char-code (char msg i)) #\\a) (enc-helper (char msg i) (i + 1)\
    \ (j + 1))]\n      [(char=? (char-code (char msg i)) #\\e) (enc-helper (char msg\
    \ i) (i + 1) (j + 2))]\n      [(char=? (char-code (char msg i)) #\\i) (enc-helper\
    \ (char msg i) (i + 1) (j + 3))]\n      [(char=? (char-code (char msg i)) #\\\
    o) (enc-helper (char msg i) (i + 1) (j + 4))]\n      [(char=? (char-code (char\
    \ msg i)) #\\u) (enc-helper (char msg i) (i + 1) (j + 5))]\n      [(char=? (char-code\
    \ (char msg i)) #\\y) (enc-helper (char msg i) (i + 1) (j + 6))]\n      [else\
    \ (enc-loop msg (i + 1) j)]))\n  (enc-loop message 0 0))\n", "  (define (vowel-position\
    \ letter)\n    (cond\n      [(char=? (char-code letter) 'a) (- 'a 'z)]\n     \
    \ [(char=? (char-code letter) 'e) (- 'a 'z)]\n      [(char=? (char-code letter)\
    \ 'i) (- 'a 'z)]\n      [(char=? (char-code letter) 'o) (- 'a 'z)]\n      [(char=?\
    \ (char-code letter) 'u) (- 'a 'z)]\n      [else 0]))\n  (define (vowel-position\
    \ letter position)\n    (cond\n      [(char=? (char-code letter) 'a) (- 'a 'z)]\n\
    \      [(char=? (char-code letter) 'e) (- 'a 'z)]\n      [(char=? (char-code letter)\
    \ 'i) (- 'a 'z)]\n      [(char=? (char-code letter) 'o) (- 'a 'z)]\n      [(char=?\
    \ (char-code letter) 'u) (- 'a 'z)]\n      [else (+ position 'z)])))\n  (define\
    \ (vowel-position letter position)\n    (cond\n      [(char=? (char-code letter)\
    \ 'a) (- 'a 'z)]\n      [(char=? (char-code letter) 'e) (- 'a 'z)]\n      [(char=?\
    \ (char-code letter) 'i) (- 'a 'z)]\n      [(char=? (char-code letter) 'o) (-\
    \ 'a 'z)]\n      [(char=? (char-code letter) 'u) (- 'a 'z)]\n      [else (+ position\
    \ 'z)])))\n  (define (vowel-position letter position)\n    (cond\n      [(char=?\
    \ (char-code letter) 'a) (- 'a 'z)]\n      [(char=? (char-code letter) 'e) (-\
    \ 'a 'z)]\n      [(char=? (char-code letter) 'i) (- 'a 'z)]\n      [(char=? (char-code\
    \ letter) 'o) (- 'a 'z)]\n      [(char=? (char-code letter) 'u) (- 'a 'z)]\n \
    \     [else (+ position 'z)])))\n  (define (vowel-position letter position)\n\
    \    (cond\n      [(char=? (char-code letter) 'a) (- 'a 'z)]\n      [(char=? (char-code\
    \ letter) 'e) (- 'a 'z)]", "  (let ((vowels '(a e i o u)))\n    (cond\n      [(empty?\
    \ message) \"\"]\n      [(member (first message) vowels) (cons (first message)\
    \ (encode (substring message 1 2)))]\n      [else (cons (first message) (encode\
    \ (substring message 1 1)))])))\n", "  (define (helper message i j)\n    (cond\n\
    \      [(char=? (char-code message) 'a) (char-code (substring message i (+ i 1)))]\n\
    \      [(char=? (char-code message) 'e) (char-code (substring message i (+ i 1)))]\n\
    \      [(char=? (char-code message) 'i) (char-code (substring message i (+ i 1)))]\n\
    \      [(char=? (char-code message) 'o) (char-code (substring message i (+ i 1)))]\n\
    \      [(char=? (char-code message) 'u) (char-code (substring message i (+ i 1)))]\n\
    \      [else (substring message i (+ i 1))]))\n  (define (helper message i j)\n\
    \    (cond\n      [(char=? (char-code message) 'a) (char-code (substring message\
    \ i (+ i 1)))]\n      [(char=? (char-code message) 'e) (char-code (substring message\
    \ i (+ i 1)))]\n      [(char=? (char-code message) 'i) (char-code (substring message\
    \ i (+ i 1)))]\n      [(char=? (char-code message) 'o) (char-code (substring message\
    \ i (+ i 1)))]\n      [(char=? (char-code message) 'u) (char-code (substring message\
    \ i (+ i 1)))]\n      [else (substring message i (+ i 1))]))\n  (define (helper\
    \ message i j)\n    (cond\n      [(char=? (char-code message) 'a) (char-code (substring\
    \ message i (+ i 1)))]\n      [(char=? (char-code message) 'e) (char-code (substring\
    \ message i (+ i 1)))]\n      [(char=? (char-code message) 'i) (char-code (substring\
    \ message i (+ i 1)))]\n      [(char=? (char-code message) 'o) (char-code (substring\
    \ message i (+ i 1)))]\n      [(char=? (char-code message) 'u) (char-code (substring\
    \ message i (+ i 1)))]\n      [else (substring message i (+ i 1))]))\n  (define\
    \ (helper message i j)\n    (cond\n      [(char=? (char-code message) 'a) (char-code\
    \ (substring message i (+ i 1)))]\n      [(char=? (char-code message) 'e) (char-code ",
  "  (let ((vowels '(a e i o u)))\n    (cond\n      [(empty? message) \"\"]\n    \
    \  [(member (first message) vowels) (first message)]\n      [else (cons (first\
    \ message)\n                   (encode (substring message 1 \n               \
    \                   (length (first message))))]))))\n", "  (cond\n    [(empty?\
    \ message) \"\"]\n    [(equal? (first message) ?a) (encode-a message)]\n    [(equal?\
    \ (first message) ?e) (encode-e message)]\n    [(equal? (first message) ?i) (encode-i\
    \ message)]\n    [(equal? (first message) ?o) (encode-o message)]\n    [(equal?\
    \ (first message) ?u) (encode-u message)]\n    [else (encode-others message)]))\n",
  "  (let ([vowels '(a e i o u)])\n    (cond\n      [(empty? message) message]\n \
    \     [(member (first message) vowels) (cons (first message) (encode (substring\
    \ message 1 (length message))))]\n      [else (cons (first message) (encode (substring\
    \ message 1 (length message))))])))\n", "  (cond\n    [(empty? message) \"\"]\n\
    \    [(equal? (first message) ?a) (encode (substring message 1 2))]\n    [(equal?\
    \ (first message) ?e) (encode (substring message 1 3))]\n    [(equal? (first message)\
    \ ?i) (encode (substring message 1 4))]\n    [(equal? (first message) ?o) (encode\
    \ (substring message 1 5))]\n    [(equal? (first message) ?u) (encode (substring\
    \ message 1 6))]\n    [(equal? (first message) ?A) (encode (substring message\
    \ 1 7))] \n    [(equal? (first message) ?E) (encode (substring message 1 8))]\
    \ \n    [(equal? (first message) ?I) (encode (substring message 1 9))] \n    [(equal?\
    \ (first message) ?O) (encode (substring message 1 10))] \n    [(equal? (first\
    \ message) ?U) (encode (substring message 1 11))] \n    [(equal? (first message)\
    \ ?a) (encode (substring message 1 12))]\n    [(equal? (first message) ?e) (encode\
    \ (substring message 1 13))]\n    [(equal? (first message) ?i) (encode (substring\
    \ message 1 14))]\n    [(equal? (first message) ?o) (encode (substring message\
    \ 1 15))]\n    [(equal? (first message) ?u) (encode (substring message 1 16))]\n\
    \    [(equal? (first message) ?A) (encode (substring message 1 17))]\n    [(equal?\
    \ (first message) ?E) (encode (substring message 1 18))]\n    [(equal? (first\
    \ message) ?I) (encode (substring message 1 19))]\n    [(equal? (first message)\
    \ ?O) (encode (substring message 1 20))] \n    [(equal? (first message) ?U) (encode\
    \ (substring message 1 21))]\n    [(equal? (first message) ?a) (encode (substring\
    \ message 1 22))]\n    [(equal? (first message) ?e) (encode (substring message\
    \ 1 23))]\n    [(equal? (first message) ?i) (encode (substring message 1 24))]\n\
    \    [(equal? (first message) ?o) (encode (substring message 1 25))]\n    [(equal?\
    \ (first message) ?u) (encode (substring message 1 26))]\n    [(equal? (first\
    \ message) ?A) (encode (substring message 1 27))]\n    [(equal", "  (let ((vowels\
    \ '(a e i o u)))\n    (cond\n      [(empty? message) \"\"]\n      [(char-alphabet\
    \ (car message)) (cons (char-alphabet (car message)) (encode (cdr message)))]\n\
    \      [(char-alphabet (car message)) (cons (char-alphabet (car message)) (encode\
    \ (cdr message)))]\n      [(char-alphabet (car message)) (cons (char-alphabet\
    \ (car message)) (encode (cdr message)))]\n      [(char-alphabet (car message))\
    \ (cons (char-alphabet (car message)) (encode (cdr message)))]\n      [(char-alphabet\
    \ (car message)) (cons (char-alphabet (car message)) (encode (cdr message)))]\n\
    \      [(char-alphabet (car message)) (cons (char-alphabet (car message)) (encode\
    \ (cdr message)))]\n      [(char-alphabet (car message)) (cons (char-alphabet\
    \ (car message)) (encode (cdr message)))]\n      [(char-alphabet (car message))\
    \ (cons (char-alphabet (car message)) (encode (cdr message)))]\n      [(char-alphabet\
    \ (car message)) (cons (char-alphabet (car message)) (encode (cdr message)))]\n\
    \      [(char-alphabet (car message)) (cons (char-alphabet (car message)) (encode\
    \ (cdr message)))]\n      [(char-alphabet (car message)) (cons (char-alphabet\
    \ (car message)) (encode (cdr message)))]\n      [(char-alphabet (car message))\
    \ (cons (char-alphabet (car message)) (encode (cdr message)))]\n      [(char-alphabet\
    \ (car message)) (cons (char-alphabet (car message)) (encode (cdr message)))]\n\
    \      [(char-alphabet (car message)) (cons (char-alphabet (car message)) (encode\
    \ (cdr message)))]\n      [(char-alphabet (car message)) (cons (char-alphabet\
    \ (car message)) (encode (cdr message)))]\n      [(char-alphabet (car message))\
    \ (cons (char-alphabet (car message)) (encode (cdr message)))]\n      [(char-alphabet\
    \ (c", "  (let ((vowels '(a e i o u)))\n    (cond\n      [(empty? message) \"\"\
    ]\n      [(member (first message) vowels) (cons (first message) (encode (substring\
    \ message 1 (length message))))]\n      [else (cons (first message) (encode (substring\
    \ message 1 (length message))))])))\n", "  (let ((vowels '(a e i o u)))\n    (map\
    \ (lambda (letter) (if (member letter vowels) \n                             \
    \  (cons letter \n                                     (sub (length vowels) \n\
    \                                         (length letter)))\n                \
    \               (cons letter '()))\n          message))\n  )\n", "  (define (helper\
    \ message vowels)\n    (if (null? message)\n        '()\n        (cons (char->integer\
    \ (char->string (car message))) \n              (helper (cdr message) vowels))))\n\
    \  (helper (reverse message) '(a e i o u)))\n", "  (define (helper message index)\n\
    \    (cond\n      [(empty? message) message]\n      [(char-alphabet (first message))\
    \ (helper (rest message) (+ index 1))]\n      [else (cons (char-alphabet (first\
    \ message)) \n                (helper (rest message) (+ index 1)))]))\n  (helper\
    \ message 0))\n", "  (cond\n    [(empty? message) \"\"]\n    [(equal? (first message)\
    \ ?a) (encode (substring message 1 2))]\n    [(equal? (first message) ?e) (encode\
    \ (substring message 1 3))]\n    [(equal? (first message) ?i) (encode (substring\
    \ message 1 4))]\n    [(equal? (first message) ?o) (encode (substring message\
    \ 1 5))]\n    [(equal? (first message) ?u) (encode (substring message 1 6))]\n\
    \    [else (cons (first message)\n               (encode (substring message 2))))]))\n",
  "  (define (helper message vowel)\n    (cond\n      [(empty? message) message]\n\
    \      [(char-lower? (first message)) (cons (first message) (helper (rest message)\
    \ vowel))]\n      [(char-upper? (first message)) (cons (first message) (helper\
    \ (rest message) vowel))]\n      [(char-alpha? (first message)) (cons (first message)\
    \ (helper (rest message) vowel))]\n      [(char-digit? (first message)) (cons\
    \ (first message) (helper (rest message) vowel))]\n      [(char-symbol? (first\
    \ message)) (cons (first message) (helper (rest message) vowel))]\n      [else\
    \ (helper (rest message) vowel)])\n    (cond\n      [(char-lower? (first message))\
    \ (cons (first message) (helper (rest message) vowel))]\n      [(char-upper? (first\
    \ message)) (cons (first message) (helper (rest message) vowel))]\n      [(char-alpha?\
    \ (first message)) (cons (first message) (helper (rest message) vowel))]\n   \
    \   [(char-digit? (first message)) (cons (first message) (helper (rest message)\
    \ vowel))]\n      [(char-symbol? (first message)) (cons (first message) (helper\
    \ (rest message) vowel))]\n      [else (helper (rest message) vowel)])\n    (cond\n\
    \      [(char-lower? (first message)) (cons (first message) (helper (rest message)\
    \ vowel))]\n      [(char-upper? (first message)) (cons (first message) (helper\
    \ (rest message) vowel))]\n      [(char-alpha? (first message)) (cons (first message)\
    \ (helper (rest message) vowel))]\n      [(char-digit? (first message)) (cons\
    \ (first message) (helper (rest message) vowel))]\n      [(char-symbol? (first\
    \ message)) (cons (first message) (helper (rest message) vowel))]\n      [else\
    \ (helper (rest message) vowel)])\n    (cond\n      [(char-lower? (first message))\
    \ (cons (first message) (helper (rest message) vowel))]\n      [(char-upper? (first\
    \ message)) (cons (first message) (helper (rest message) vowel))]\n      [(char-alpha?\
    \ (first message)) (cons (first message) (helper (rest message) vowel))]\n   \
    \   [(char-digit? (first message)) (cons (first message) (helper (rest message)\
    \ vowel))]\n      [(char-symbol? (first message)) (cons (first ", "  (cond\n \
    \   [(empty? message) \"\"]\n    [(equal? (first message) ?a) (encode (substring\
    \ message 1 2))]\n    [(equal? (first message) ?e) (encode (substring message\
    \ 1 3))]\n    [(equal? (first message) ?i) (encode (substring message 1 4))]\n\
    \    [(equal? (first message) ?o) (encode (substring message 1 5))]\n    [(equal?\
    \ (first message) ?u) (encode (substring message 1 6))]\n    [else (cons (first\
    \ message)\n                (encode (substring message 2))\n                (encode\
    \ (substring message 3))\n                (encode (substring message 4))\n   \
    \             (encode (substring message 5))\n                (encode (substring\
    \ message 6)))]))\n", "  (cond\n    [(empty? message) \"\"]\n    [(equal? (first\
    \ message) ?a) (encode-a message)]\n    [(equal? (first message) ?e) (encode-e\
    \ message)]\n    [(equal? (first message) ?i) (encode-i message)]\n    [(equal?\
    \ (first message) ?o) (encode-o message)]\n    [(equal? (first message) ?u) (encode-u\
    \ message)]\n    [else (encode-others message)]))\n", "  (cond\n    [(empty? message)\
    \ \"\"]\n    [(equal? (first message) ?a) (cond\n                            \
    \ [(equal? (second message) ?e) (cond\n                                      \
    \                 [(equal? (third message) ?i) (cond\n                       \
    \                                                        [(equal? (fourth message)\
    \ ?o) (cond\n                                                                \
    \                                        [(equal? (fifth message) ?u) (cond\n\
    \                                                                            \
    \                                   [(equal? (sixth message) ?A) (cond\n     \
    \                                                                            \
    \                                       [(equal? (seventh message) ?E) (cond\n\
    \                                                                            \
    \                                                   [(equal? (eighth message)\
    \ ?I) (cond\n                                                                \
    \                                                                    [(equal?\
    \ (ninth message) ?O) (cond\n                                                \
    \                                                                            \
    \                                            [(equal? (tenth message) ?U) (cond\n\
    \                                                                            \
    \                                                                            \
    \                       [(equal? (eleventh message) ?a) (cond\n              \
    \                                                                            \
    \                                                                            \
    \                  [(equal? (twelfth message) ?e) (cond\n                    \
    \                                                                            \
    \                                                                            \
    \                   [(equal? (thirteenth message) ?i) (cond\n                \
    \                                                                            \
    \                                                                            \
    \                            [(equal? (fourteenth message) ?o) (cond\n       \
    \                                                                            \
    \                                                                            \
    \                                                                         [(equal?\
    \ (fifteenth message) ?u) (cond\n                                            \
    \                                                                            \
    \                                                                            \
    \                                           [(equal? (sixteenth message) ?A) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                    [(equal? (seventeenth message) ?E) (cond\n              \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \             [(equal? (eighteenth message) ?I) (cond\n                      \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \          [(equal? (nineteenth message) ?O) (cond\n                         \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                           [(equal? (twentieth message) ?U) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                           [(equal?\
    \ (twenty-first message) ?a) (cond\n                                         \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                           [(equal? (thirtieth message) ?e) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \               [(equal? (fourtieth message) ?i) (cond\n                     \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                           [(equal?\
    \ (fiftieth message) ?o) (cond\n                                             \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \           [(equal? (sixtieth message) ?A) (cond\n                          \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                     [(equal? (seventieth message) ?E) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                        [(equal?\
    \ (eightieth message) ?I) (cond\n                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                   [(equal? (ninetieth message) ?O) (cond\n \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \       [(equal? (twenty-second message) ?U) (cond\n                         \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                          [(equal? (twent", "  (cond\n    [(empty? message) \"\
    \"]\n    [(equal? (first message) ?a) (encode-a message)]\n    [(equal? (first\
    \ message) ?e) (encode-e message)]\n    [(equal? (first message) ?i) (encode-i\
    \ message)]\n    [(equal? (first message) ?o) (encode-o message)]\n    [(equal?\
    \ (first message) ?u) (encode-u message)]\n    [else (encode-other (first message))]))\n",
  "  (let ((vowels '(a e i o u)))\n    (cond\n      [(empty? message) \"\"]\n    \
    \  [(member (first message) vowels) (cons (first message) (encode (substring message\
    \ 1 (length (first message))))]\n      [else (cons (first message) (encode (substring\
    \ message 1 (length (first message))))])]))) \n", "  (let ([vowels '(a e i o u)])\n\
    \    (cond\n      [(empty? message) \"\"]\n      [(member (first message) vowels)\
    \ (cons (first message) (encode (substring (second message) 0 (- (length message)\
    \ 1)))) ]\n      [else (cons (first message) (encode (substring (second message)\
    \ 0 (- (length message) 1)))) ])))\n", "  (let ((vowels '(a e i o u)))\n    (cond\n\
    \      [(empty? message) \"\"]\n      [(member (first message) vowels) (second\
    \ message)]\n      [else (cons (first message) (encode (second message)))])))\n",
  "  (let ((vowels '(a e i o u)))\n    (cond\n      [(empty? message) \"\"]\n    \
    \  [(member (first message) vowels) (first message)]\n      [else (cons (first\
    \ message)\n                  (encode (substring message 1 (- (length message)\
    \ 1)))]))))\n", "  (let ((vowels '(a e i o u)))\n    (cond\n      [(empty? message)\
    \ message]\n      [(member (first message) vowels) (second message)]\n      [else\
    \ (cons (first message) (encode (second message)))])))\n", "  (let ((vowels '(a\
    \ e i o u)))\n    (map (lambda (c)\n           (if (member c vowels)\n       \
    \        (cons c (substring message (+ 2 (char-index c message))))\n         \
    \      (cons c (substring message (char-index c message))))) \n         message)))\n",
  "  (define (helper i j)\n    (cond [(= i j) (string message)]\n          [(char-alphabet\
    \ (char message i)) (string message)]\n          [(char-alphabet (char message\
    \ j)) (string message)]\n          [else (helper (+ i 1) (+ j 1))]))\n  (helper\
    \ 0 0))\n", "  (define (helper index message)\n    (if (null? message)\n     \
    \   '()\n        (cond ((char=? (car message) (car index))\n               (helper\
    \ (cdr index) (cdr message)))\n              ((char=? (car message) (cdr index))\n\
    \               (helper (cdr index) (cdr message)))\n              (else\n   \
    \            (cons (char->string (car message))\n                     (helper\
    \ (cdr index) (cdr message))))))\n  (helper '() message))\n", "  (cond\n    [(empty?\
    \ message) \"\"]\n    [(equal? (first message) ?a) (cond\n                   \
    \          [(equal? (second message) ?e) (cond\n                             \
    \                             [(equal? (third message) ?i) (cond\n           \
    \                                                                [(equal? (fourth\
    \ message) ?o) (cond\n                                                       \
    \                                                 [(equal? (fifth message) ?u)\
    \ (cond\n                                                                    \
    \                                                   [(equal? (sixth message) ?A)\
    \ (cond\n                                                                    \
    \                                                            [(equal? (seventh\
    \ message) ?E) (cond\n                                                       \
    \                                                                            \
    \                   [(equal? (eighth message) ?I) (cond\n                    \
    \                                                                            \
    \                                                                   [(equal? (ninth\
    \ message) ?O) (cond\n                                                       \
    \                                                                            \
    \                                     [(equal? (tenth message) ?U) (cond\n   \
    \                                                                            \
    \                                                                            \
    \                           [(equal? (eleventh message) ?a) (cond\n          \
    \                                                                            \
    \                                                                            \
    \                                     [(equal? (twelfth message) ?e) (cond\n \
    \                                                                            \
    \                                                                            \
    \                                               [(equal? (thirteenth message)\
    \ ?i) (cond\n                                                                \
    \                                                                            \
    \                                                              [(equal? (fourteenth\
    \ message) ?o) (cond\n                                                       \
    \                                                                            \
    \                                                                         [(equal?\
    \ (fifteenth message) ?u) (cond\n                                            \
    \                                                                            \
    \                                                                            \
    \          [(equal? (sixteenth message) ?A) (cond\n                          \
    \                                                                            \
    \                                                                            \
    \                              [(equal? (seventeenth message) ?E) (cond\n    \
    \                                                                            \
    \                                                                            \
    \                                                      [(equal? (eighteenth message)\
    \ ?I) (cond\n                                                                \
    \                                                                            \
    \                                                                        [(equal?\
    \ (nineteenth message) ?O) (cond\n                                           \
    \                                                                            \
    \                                                                            \
    \                   [(equal? (twentieth message) ?U) (cond\n                 \
    \                                                                            \
    \                                                                            \
    \                                               [(null message) \"\"])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])",
  "  (cond\n    [(empty? message) \"\"]\n    [(equal? (first message) ?a) (encode\
    \ (substring message 1 2))]\n    [(equal? (first message) ?e) (encode (substring\
    \ message 1 3))]\n    [(equal? (first message) ?i) (encode (substring message\
    \ 1 4))]\n    [(equal? (first message) ?o) (encode (substring message 1 5))]\n\
    \    [(equal? (first message) ?u) (encode (substring message 1 6))]\n    [else\
    \ (cons (first message)\n               (encode (substring message 2))\n     \
    \          (encode (substring message 3))\n               (encode (substring message\
    \ 4))\n               (encode (substring message 5))\n               (encode (substring\
    \ message 6)))]))\n", "  (cond\n    [(empty? message) \"\"]\n    [(equal? (first\
    \ message) ?a) (encode-a message)]\n    [(equal? (first message) ?e) (encode-e\
    \ message)]\n    [(equal? (first message) ?i) (encode-i message)]\n    [(equal?\
    \ (first message) ?o) (encode-o message)]\n    [(equal? (first message) ?u) (encode-u\
    \ message)]\n    [else (encode-other (first message))]))\n", "  (cond\n    [(empty?\
    \ message) \"\"]\n    [(equal? (first message) ?a) (encode (substring message\
    \ 1 2))]\n    [(equal? (first message) ?e) (encode (substring message 1 3))]\n\
    \    [(equal? (first message) ?i) (encode (substring message 1 4))]\n    [(equal?\
    \ (first message) ?o) (encode (substring message 1 5))]\n    [(equal? (first message)\
    \ ?u) (encode (substring message 1 6))]\n    [else (cons (first message)\n   \
    \           (encode (substring message 2)))]))\n", "  (let ((vowels '(a e i o\
    \ u)))\n    (cond\n      [(empty? message) \"\"]\n      [(char-alphabet message)\
    \ message]\n      [(char-alphabet (first message)) (encode (first message))]\n\
    \      [else (cons (first message)\n                   (encode (substring message\
    \ 1 (length message))))])))\n", "  (let ((vowels '(a e i o u)))\n    (cond ((null?\
    \ message) \"\")\n          ((char-alphabet (car message)) \n           (string-append\
    \ (encode (cdr message)) \n                           (string-append (substring\
    \ vowels \n                                                   (+ 2 (car message)))\
    \ \n                                            (substring vowels (+ 2 (car message))))))\n\
    \          (else (cons (string-append (substring vowels (+ 2 (car message))) \n\
    \                                   (substring vowels (+ 2 (car message))))\n\
    \                    (encode (cdr message))))))\n", "  (define (helper i j)\n\
    \    (if (= i j)\n        (cons (char->integer (char->string (car message))) '())\n\
    \        (helper (+ i 1) (+ j 1))))\n  (helper 0 0))\n", "  (cond\n    [(empty?\
    \ message) \"\"]\n    [(equal? (first message) ?a) (encode-a message)]\n    [(equal?\
    \ (first message) ?e) (encode-e message)]\n    [(equal? (first message) ?i) (encode-i\
    \ message)]\n    [(equal? (first message) ?o) (encode-o message)]\n    [(equal?\
    \ (first message) ?u) (encode-u message)]\n    [else (encode-others message)]))\n",
  "  (define (helper i j)\n    (cond\n      [(char=? (char-code (substring message\
    \ i j)) #\\a) (substring message i j)]\n      [(char=? (char-code (substring message\
    \ i j)) #\\e) (substring message i j)]\n      [(char=? (char-code (substring message\
    \ i j)) #\\i) (substring message i j)]\n      [(char=? (char-code (substring message\
    \ i j)) #\\o) (substring message i j)]\n      [(char=? (char-code (substring message\
    \ i j)) #\\u) (substring message i j)]\n      [(char=? (char-code (substring message\
    \ i j)) #\\y) (substring message i j)]\n      [else (substring message i j)]))\n\
    \  (define (helper i j)\n    (cond\n      [(char=? (char-code (substring message\
    \ i j)) #\\a) (substring message i j)]\n      [(char=? (char-code (substring message\
    \ i j)) #\\e) (substring message i j)]\n      [(char=? (char-code (substring message\
    \ i j)) #\\i) (substring message i j)]\n      [(char=? (char-code (substring message\
    \ i j)) #\\o) (substring message i j)]\n      [(char=? (char-code (substring message\
    \ i j)) #\\u) (substring message i j)]\n      [(char=? (char-code (substring message\
    \ i j)) #\\y) (substring message i j)]\n      [else (substring message i j)]))\n\
    \  (define (helper i j)\n    (cond\n      [(char=? (char-code (substring message\
    \ i j)) #\\a) (substring message i j)]\n      [(char=? (char-code (substring message\
    \ i j)) #\\e) (substring message i j)]\n      [(char=? (char-code (substring message\
    \ i j)) #\\i) (substring message i j)]\n      [(char=? (char-code (substring message\
    \ i j)) #\\o) (substring message i j)]\n      [(char=? (char-code (substring message\
    \ i j)) #\\u) (substring message i j)]\n      [(char=? (char-code (substring message\
    \ i j)) #\\y) (sub", "  (define (helper message index)\n    (cond\n      [(empty?\
    \ message) message]\n      [(equal? (char-ref message index) ?a) (char-ref message\
    \ (+ index 1))]\n      [(equal? (char-ref message index) ?e) (char-ref message\
    \ (+ index 2))]\n      [(equal? (char-ref message index) ?i) (char-ref message\
    \ (+ index 3))]\n      [(equal? (char-ref message index) ?o) (char-ref message\
    \ (+ index 4))]\n      [(equal? (char-ref message index) ?u) (char-ref message\
    \ (+ index 5))]\n      [else (helper (substring message (+ index 1) 1) (+ index\
    \ 1))]))\n  (helper message 0))\n", "  (define (helper i j)\n    (if (= i j)\n\
    \        (list message)\n        (if (char-alphabet (char message i))\n      \
    \      (cons (char message i)\n                   (helper (+ i 1) (+ j 1))\n \
    \                  (helper (+ i 1) j))\n            (helper (+ i 1) j))))\n  (helper\
    \ 0 0))\n", "  (cond\n    [(empty? message) \"\"]\n    [(equal? (first message)\
    \ ?a) (encode (substring message 1 2))]\n    [(equal? (first message) ?e) (encode\
    \ (substring message 1 3))]\n    [(equal? (first message) ?i) (encode (substring\
    \ message 1 4))]\n    [(equal? (first message) ?o) (encode (substring message\
    \ 1 5))]\n    [(equal? (first message) ?u) (encode (substring message 1 6))]\n\
    \    [else (cons (first message)\n               (encode (substring message 2))])]))\n",
  "  (let ((vowels '(a e i o u)))\n    (cond\n      [(empty? message) \"\"]\n    \
    \  [(member (first message) vowels) (cons (first message) (encode (substring (second\
    \ message) 0 (- (length message) 1)))) ]\n      [else (cons (first message) (encode\
    \ (substring (second message) 0 (- (length message) 1)))) ]\n    )\n  )\n)\n",
  "  (cond\n    [(empty? message) \"\"]\n    [(equal? (first message) ?a) (encode-a\
    \ message)]\n    [(equal? (first message) ?e) (encode-e message)]\n    [(equal?\
    \ (first message) ?i) (encode-i message)]\n    [(equal? (first message) ?o) (encode-o\
    \ message)]\n    [(equal? (first message) ?u) (encode-u message)]\n    [else (encode-others\
    \ message)]))\n", "  (define (helper message index)\n    (cond [(null? message)\
    \ message]\n          [(char=? (car message) 'a) (helper (substring message 0\
    \ index) index)]\n          [(char=? (car message) 'e) (helper (substring message\
    \ 0 index) index)]\n          [(char=? (car message) 'i) (helper (substring message\
    \ 0 index) index)]\n          [(char=? (car message) 'o) (helper (substring message\
    \ 0 index) index)]\n          [(char=? (car message) 'u) (helper (substring message\
    \ 0 index) index)]\n          [(char=? (car message) 'A) (helper (substring message\
    \ 0 index) index)]\n          [(char=? (car message) 'E) (helper (substring message\
    \ 0 index) index)]\n          [(char=? (car message) 'I) (helper (substring message\
    \ 0 index) index)]\n          [(char=? (car message) 'O) (helper (substring message\
    \ 0 index) index)]\n          [(char=? (car message) 'U) (helper (substring message\
    \ 0 index) index)]\n          [(char=? (car message) 'a) (helper (substring message\
    \ 0 index) index)]\n          [(char=? (car message) 'e) (helper (substring message\
    \ 0 index) index)]\n          [(char=? (car message) 'i) (helper (substring message\
    \ 0 index) index)]\n          [(char=? (car message) 'o) (helper (substring message\
    \ 0 index) index)]\n          [(char=? (car message) 'u) (helper (substring message\
    \ 0 index) index)]\n          [(char=? (car message) 'A) (helper (substring message\
    \ 0 index) index)]\n          [(char=? (car message) 'E) (helper (substring message\
    \ 0 index) index)]\n          [(char=? (car message) 'I) (helper (substring message\
    \ 0 index) index)]\n          [(char=? (car message) 'O) (helper (substring message\
    \ 0 index) index)]\n          [(char=? (car message) 'U) (helper (substring message\
    \ 0 index) index)]\n          [(char=? (car message) 'b) (helper (substring message\
    \ 0 index) index)]\n          [(char=? (car message) 'c", "  (cond\n    [(empty?\
    \ message) \"\"]\n    [(equal? (first message) ?a) (encode (substring message\
    \ 1 2))]\n    [(equal? (first message) ?e) (encode (substring message 1 3))]\n\
    \    [(equal? (first message) ?i) (encode (substring message 1 4))]\n    [(equal?\
    \ (first message) ?o) (encode (substring message 1 5))]\n    [(equal? (first message)\
    \ ?u) (encode (substring message 1 6))]\n    [else (cons (first message)\n   \
    \             (encode (substring message 2)))]))\n", "  (define (vowel-position\
    \ letter)\n    (cond [(char=? (char-code letter) 'a) (char-code (char letter (+\
    \ 1 1)))]\n          [(char=? (char-code letter) 'e) (char-code (char letter (+\
    \ 1 2)))]\n          [(char=? (char-code letter) 'i) (char-code (char letter (+\
    \ 1 3)))]\n          [(char=? (char-code letter) 'o) (char-code (char letter (+\
    \ 1 4)))]\n          [(char=? (char-code letter) 'u) (char-code (char letter (+\
    \ 1 5)))]\n          [else (error \"Invalid letter: ~a\" letter)]\n          ))\n\
    \  (define (swap-case letter)\n    (cond [(char=? (char-code letter) 'A) (char-code\
    \ (char letter (+ 1 0)))]\n          [(char=? (char-code letter) 'a) (char-code\
    \ (char letter (+ 1 1)))]\n          [(char=? (char-code letter) 'E) (char-code\
    \ (char letter (+ 1 2)))]\n          [(char=? (char-code letter) 'e) (char-code\
    \ (char letter (+ 1 3)))]\n          [(char=? (char-code letter) 'I) (char-code\
    \ (char letter (+ 1 4)))]\n          [(char=? (char-code letter) 'i) (char-code\
    \ (char letter (+ 1 5)))]\n          [(char=? (char-code letter) 'O) (char-code\
    \ (char letter (+ 1 6)))]\n          [(char=? (char-code letter) 'o) (char-code\
    \ (char letter (+ 1 7)))]\n          [(char=? (char-code letter) 'U) (char-code\
    \ (char letter (+ 1 8)))]\n          [(char=? (char-code letter) 'u) (char-code\
    \ (char letter (+ 1 9)))]\n          [else (error \"Invalid letter: ~a\" letter)]\n\
    \          ))\n  (define (vowel-position letter)\n    (cond [(char=? (char-code\
    \ letter) 'a) (char-code (char letter (+ 1 1)))]\n          [(char=? (char-code\
    \ letter) 'e) (char-code (char letter (+ 1 2)))]\n          [(char=? (char-code\
    \ letter", "  (cond\n    [(empty? message) \"\"]\n    [(equal? (first message)\
    \ ?a) (encode (substring message 1 2))]\n    [(equal? (first message) ?e) (encode\
    \ (substring message 1 3))]\n    [(equal? (first message) ?i) (encode (substring\
    \ message 1 4))]\n    [(equal? (first message) ?o) (encode (substring message\
    \ 1 5))]\n    [(equal? (first message) ?u) (encode (substring message 1 6))]\n\
    \    [else (cons (first message)\n               (encode (substring message 2))))]))\n",
  "  (cond\n    [(empty? message) \"\"]\n    [(equal? (first message) ?a) (encode\
    \ (substring message 1 2))]\n    [(equal? (first message) ?e) (encode (substring\
    \ message 1 3))]\n    [(equal? (first message) ?i) (encode (substring message\
    \ 1 4))]\n    [(equal? (first message) ?o) (encode (substring message 1 5))]\n\
    \    [(equal? (first message) ?u) (encode (substring message 1 6))]\n    [else\
    \ (cons (first message)\n               (encode (substring message 2)))]))\n",
  "  (let ((vowels '(a e i o u)))\n    (cond\n      [(empty? message) \"\"]\n    \
    \  [(member (first message) vowels) (cons (first message) (encode (substring message\
    \ 1 (- (length message) 1)))) ]\n      [else (cons (first message) (encode (substring\
    \ message 1 (- (length message) 1)))) ])))\n", "  (let ((letters '(#\\A #\\B #\\\
    C #\\D #\\E #\\F #\\G #\\H #\\I #\\J #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\\
    S #\\T #\\U #\\V #\\W #\\X #\\Y #\\Z)))\n    (define (vowel-position letter)\n\
    \      (let ((vowels '(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k\
    \ #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\u #\\v #\\w #\\x #\\y #\\z)))\n\
    \        (cond\n          [(member letter vowels) 0]\n          [else 1]))\n \
    \   (define (vowel-position letter)\n      (let ((vowels '(#\\A #\\B #\\C #\\\
    D #\\E #\\F #\\G #\\H #\\I #\\J #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\\
    T #\\U #\\V #\\W #\\X #\\Y #\\Z)))\n        (cond\n          [(member letter vowels)\
    \ 0]\n          [else 1]))\n    (define (vowel-position letter)\n      (let ((vowels\
    \ '(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\\
    o #\\p #\\q #\\r #\\s #\\t #\\u #\\v #\\w #\\x #\\y #\\z)))\n        (cond\n \
    \         [(member letter vowels) 0]\n          [else 1]))\n    (define (vowel-position\
    \ letter)\n      (let ((vowels '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I\
    \ #\\J #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V #\\W #\\X #\\\
    Y #\\Z)))\n        (cond\n          [(member ", "  (let ((vowels '(a e i o u)))\n\
    \    (cond\n      [(empty? message) \"\"]\n      [(member (first message) vowels)\
    \ (first message)]\n      [else (cons (first message)\n                   (encode\
    \ (substring (encode (substring message 1 \n                                 \
    \                    1)\n                                                   (second\
    \ message)))))])))\n", "  (cond\n    [(empty? message) \"\"]\n    [(equal? (first\
    \ message) ?a) (encode (substring message 1 2))]\n    [(equal? (first message)\
    \ ?e) (encode (substring message 1 3))]\n    [(equal? (first message) ?i) (encode\
    \ (substring message 1 4))]\n    [(equal? (first message) ?o) (encode (substring\
    \ message 1 5))]\n    [(equal? (first message) ?u) (encode (substring message\
    \ 1 6))]\n    [else (cons (first message)\n               (encode (substring message\
    \ 2)))]))\n", "  (define (helper message i j)\n    (cond [(null? message) \"\"\
    ]\n          [(equal? (char-code (char message i)) #\\a) (char message (+ i 2))]\n\
    \          [(equal? (char-code (char message i)) #\\e) (char message (+ i 2))]\n\
    \          [(equal? (char-code (char message i)) #\\i) (char message (+ i 2))]\n\
    \          [(equal? (char-code (char message i)) #\\o) (char message (+ i 2))]\n\
    \          [(equal? (char-code (char message i)) #\\u) (char message (+ i 2))]\n\
    \          [(equal? (char-code (char message i)) #\\y) (char message (+ i 2))]\n\
    \          [(equal? (char-code (char message i)) #\\A) (char message (+ i 2))]\n\
    \          [(equal? (char-code (char message i)) #\\E) (char message (+ i 2))]\n\
    \          [(equal? (char-code (char message i)) #\\I) (char message (+ i 2))]\n\
    \          [(equal? (char-code (char message i)) #\\O) (char message (+ i 2))]\n\
    \          [(equal? (char-code (char message i)) #\\U) (char message (+ i 2))]\n\
    \          [(equal? (char-code (char message i)) #\\Y) (char message (+ i 2))]\n\
    \          [(equal? (char-code (char message i)) #\\a) (char message (+ i 2))]\n\
    \          [(equal? (char-code (char message i)) #\\e) (char message (+ i 2))]\n\
    \          [(equal? (char-code (char message i)) #\\i) (char message (+ i 2))]\n\
    \          [(equal? (char-code (char message i)) #\\o) (char message (+ i 2))]\n\
    \          [(equal? (char-code (char message i)) #\\u) (char message (+ i 2))]\n\
    \          [(equal? (char-code (char message i)) #\\y) (char message (+ i 2))]\n\
    \          [(equal? (char-code (char message i)) #\\A) (char message (+ i 2))]\n\
    \          [(equal? (char-code (char message i)) #\\E) (char message (+ i 2))]\n\
    \          [(equal? (char-code (char message i)) #", "  (let ((vowels '(a e i\
    \ o u)))\n    (cond\n      [(empty? message) \"\"]\n      [(char-alphabet (first\
    \ message)) (cons (first message) (encode (rest message)))]\n      [else (cons\
    \ (first message)\n                   (map (lambda (letter)\n                \
    \           (let ((vowel (assoc letter vowels)))\n                           \
    \  (cond\n                              [(empty? vowel) letter]\n            \
    \                  [(not (empty? vowel)) (cons (car vowel) (cdr vowel))]\n   \
    \                           [else (cons (car vowel) letter)]))\n             \
    \            (encode (rest message)))]))]))\n", "  (define (helper message index)\n\
    \    (if (null? message)\n        '()\n        (cond ((char=? (car message) (car\
    \ index)) \n               (helper (cdr message) (cdr index)))\n             \
    \ ((char=? (car message) (cdr index)) \n               (helper (cdr message) (cdr\
    \ index)))\n              (else \n               (cons (char->string (+ (char->number\
    \ (car message)) \n                                     (char->number ((car index))))\n\
    \                       (helper (cdr message) (cdr index)))))))\n  (helper message\
    \ '()))\n", "  (cond\n    [(empty? message) \"\"]\n    [(equal? (first message)\
    \ ?a) (encode (substring message 1 2))]\n    [(equal? (first message) ?e) (encode\
    \ (substring message 1 3))]\n    [(equal? (first message) ?i) (encode (substring\
    \ message 1 4))]\n    [(equal? (first message) ?o) (encode (substring message\
    \ 1 5))]\n    [(equal? (first message) ?u) (encode (substring message 1 6))]\n\
    \    [else (cons (first message)\n                (encode (substring message 1\
    \ 6))\n                (encode (substring message 2 6))\n                (encode\
    \ (substring message 3 6))\n                (encode (substring message 4 6))\n\
    \                (encode (substring message 5 6))\n                (encode (substring\
    \ message 6 6)))]))\n", "  (cond\n    [(empty? message) \"\"]\n    [(equal? (first\
    \ message) ?a) (encode (substring message 1 2))]\n    [(equal? (first message)\
    \ ?e) (encode (substring message 1 3))]\n    [(equal? (first message) ?i) (encode\
    \ (substring message 1 4))]\n    [(equal? (first message) ?o) (encode (substring\
    \ message 1 5))]\n    [(equal? (first message) ?u) (encode (substring message\
    \ 1 6))]\n    [else (cons (first message)\n               (encode (substring message\
    \ 2)))]))\n", "  (let ((vowels '(a e i o u)))\n    (cond\n      [(empty? message)\
    \ \"\"]\n      [(member (first message) vowels) (second message)]\n      [else\
    \ (cons (first message)\n                  (encode (substring message 1 (- (length\
    \ message) 1))))]))) \n", "  (let ((vowels '(a e i o u)))\n    (cond ((null? message)\
    \ \"\")\n          ((char-alphabet message) message)\n          ((char-alphabet\
    \ (first message)) (encode (first message)))\n          ((char-alphabet (second\
    \ message)) (encode (second message)))\n          ((char-alphabet (third message))\
    \ (encode (third message)))\n          ((char-alphabet (fourth message)) (encode\
    \ (fourth message)))\n          ((char-alphabet (fifth message)) (encode (fifth\
    \ message)))\n          ((char-alphabet (sixth message)) (encode (sixth message)))\n\
    \          ((char-alphabet (seventh message)) (encode (seventh message)))\n  \
    \        ((char-alphabet (eighth message)) (encode (eighth message)))\n      \
    \    ((char-alphabet (ninth message)) (encode (ninth message)))\n          ((char-alphabet\
    \ (tenth message)) (encode (tenth message)))\n          ((char-alphabet (eleventh\
    \ message)) (encode (eleventh message)))\n          ((char-alphabet (twelfth message))\
    \ (encode (twelfth message)))\n          ((char-alphabet (thirteenth message))\
    \ (encode (thirteenth message)))\n          ((char-alphabet (fourteenth message))\
    \ (encode (fourteenth message)))\n          ((char-alphabet (fifteenth message))\
    \ (encode (fifteenth message)))\n          ((char-alphabet (sixteenth message))\
    \ (encode (sixteenth message)))\n          ((char-alphabet (seventeenth message))\
    \ (encode (seventeenth message)))\n          ((char-alphabet (eighteenth message))\
    \ (encode (eighteenth message)))\n          ((char-alphabet (nineteenth message))\
    \ (encode (nineteenth message)))\n          ((char-alphabet (twentieth message))\
    \ (encode (twentieth message)))\n          ((char-alphabet (twenty-first message))\
    \ (encode (twenty-first message)))\n          ((char-alphabet (twenty-second message))\
    \ (encode (twenty-second message)))\n          ((char-alphabet (twenty-third message))\
    \ (encode (twenty-third message)))\n          ((char-alphabet (tw", "  (let ((vowels\
    \ '(a e i o u)))\n    (cond\n      [(empty? message) \"\"]\n      [(member (first\
    \ message) vowels) (cons (first message) (encode (substring (second message) 0\
    \ (- (length message) 1)))) ]\n      [else (cons (first message) (encode (substring\
    \ (second message) 0 (- (length message) 1)))) ])))\n", "  (cond\n    [(empty?\
    \ message) \"\"]\n    [(equal? (first message) ?a) (encode (substring message\
    \ 1 2))]\n    [(equal? (first message) ?e) (encode (substring message 1 3))]\n\
    \    [(equal? (first message) ?i) (encode (substring message 1 4))]\n    [(equal?\
    \ (first message) ?o) (encode (substring message 1 5))]\n    [(equal? (first message)\
    \ ?u) (encode (substring message 1 6))]\n    [(equal? (first message) ?A) (encode\
    \ (substring message 1 7))] \n    [(equal? (first message) ?E) (encode (substring\
    \ message 1 8))] \n    [(equal? (first message) ?I) (encode (substring message\
    \ 1 9))] \n    [(equal? (first message) ?O) (encode (substring message 1 10))]\
    \ \n    [(equal? (first message) ?U) (encode (substring message 1 11))] \n   \
    \ [(equal? (first message) ?a) (encode (substring message 1 12))]\n    [(equal?\
    \ (first message) ?e) (encode (substring message 1 13))]\n    [(equal? (first\
    \ message) ?i) (encode (substring message 1 14))]\n    [(equal? (first message)\
    \ ?o) (encode (substring message 1 15))]\n    [(equal? (first message) ?u) (encode\
    \ (substring message 1 16))]\n    [(equal? (first message) ?A) (encode (substring\
    \ message 1 17))]\n    [(equal? (first message) ?E) (encode (substring message\
    \ 1 18))]\n    [(equal? (first message) ?I) (encode (substring message 1 19))]\n\
    \    [(equal? (first message) ?O) (encode (substring message 1 20))] \n    [(equal?\
    \ (first message) ?U) (encode (substring message 1 21))]\n    [(equal? (first\
    \ message) ?a) (encode (substring message 1 22))]\n    [(equal? (first message)\
    \ ?e) (encode (substring message 1 23))]\n    [(equal? (first message) ?i) (encode\
    \ (substring message 1 24))]\n    [(equal? (first message) ?o) (encode (substring\
    \ message 1 25))]\n    [(equal? (first message) ?u) (encode (substring message\
    \ 1 26))]\n    [(equal? (first message) ?A) (encode (substring message 1 27))]\n\
    \    [(equal", "  (define (helper message index)\n    (cond [(empty? message)\
    \ \"\"]\n          [(equal? (char-ref message index) ?a) (char-ref message (+\
    \ index 1))]\n          [(equal? (char-ref message index) ?e) (char-ref message\
    \ (+ index 2))]\n          [(equal? (char-ref message index) ?i) (char-ref message\
    \ (+ index 3))]\n          [(equal? (char-ref message index) ?o) (char-ref message\
    \ (+ index 4))]\n          [(equal? (char-ref message index) ?u) (char-ref message\
    \ (+ index 5))]\n          [(equal? (char-ref message index) ?A) (char-ref message\
    \ (+ index 6))]\n          [(equal? (char-ref message index) ?E) (char-ref message\
    \ (+ index 7))]\n          [(equal? (char-ref message index) ?I) (char-ref message\
    \ (+ index 8))]\n          [(equal? (char-ref message index) ?O) (char-ref message\
    \ (+ index 9))]\n          [(equal? (char-ref message index) ?U) (char-ref message\
    \ (+ index 10))]\n          [(equal? (char-ref message index) ?n) (char-ref message\
    \ (+ index 11))]\n          [(equal? (char-ref message index) ?h) (char-ref message\
    \ (+ index 12))]\n          [(equal? (char-ref message index) ?a) (char-ref message\
    \ (+ index 13))]\n          [(equal? (char-ref message index) ?e) (char-ref message\
    \ (+ index 14))]\n          [(equal? (char-ref message index) ?i) (char-ref message\
    \ (+ index 15))]\n          [(equal? (char-ref message index) ?o) (char-ref message\
    \ (+ index 16))]\n          [(equal? (char-ref message index) ?u) (char-ref message\
    \ (+ index 17))]\n          [(equal? (char-ref message index) ?A) (char-ref message\
    \ (+ index 18))]\n          [(equal? (char-ref message index) ?E) (char-ref message\
    \ (+ index 19))]\n          [(equal? (char-ref message index) ?I) (char-ref message\
    \ (+ index 20))]\n          [(equal? (char-ref message index) ?O) (char-ref message\
    \ (+ index 21))]\n          [(equal? (char-ref message index) ", "  (let ([letters\
    \ (string->list message)])\n    (let ([vowels '(a e i o u)])\n      (let ([index\
    \ (length letters)])\n        (let ([letter (first letters)])\n          (cond\n\
    \            [(empty? letters) message]\n            [(member (first letters)\
    \ vowels) (cons (first letters) message)]\n            [else (cons (first letters)\
    \ (encode (subseq letters 0 (add1 (first letters)))))]\n          )))))))\n",
  "  (cond\n    [(empty? message) \"\"]\n    [(equal? (first message) ?a) (encode-a\
    \ message)]\n    [(equal? (first message) ?e) (encode-e message)]\n    [(equal?\
    \ (first message) ?i) (encode-i message)]\n    [(equal? (first message) ?o) (encode-o\
    \ message)]\n    [(equal? (first message) ?u) (encode-u message)]\n    [else (encode-others\
    \ message)]))\n", "  (cond\n    [(empty? message) \"\"]\n    [(equal? (first message)\
    \ ?a) (encode (substring message 1 2))]\n    [(equal? (first message) ?e) (encode\
    \ (substring message 1 3))]\n    [(equal? (first message) ?i) (encode (substring\
    \ message 1 4))]\n    [(equal? (first message) ?o) (encode (substring message\
    \ 1 5))]\n    [(equal? (first message) ?u) (encode (substring message 1 6))]\n\
    \    [else (cons (first message)\n               (encode (substring message 2))])]))\n",
  "  (define (helper message vowels)\n    (cond\n      [(empty? message) message]\n\
    \      [(equal? (first message) vowels) (second message)]\n      [else (helper\
    \ (rest message) (cons (first message) vowels))]))\n  (helper message '(a e i\
    \ o u)))\n", "  (cond\n    [(empty? message) \"\"]\n    [(equal? (first message)\
    \ ?a) (encode (substring message 1 2))]\n    [(equal? (first message) ?e) (encode\
    \ (substring message 1 3))]\n    [(equal? (first message) ?i) (encode (substring\
    \ message 1 4))]\n    [(equal? (first message) ?o) (encode (substring message\
    \ 1 5))]\n    [(equal? (first message) ?u) (encode (substring message 1 6))]\n\
    \    [else (cons (first message)\n               (encode (substring message 2)))]))\n",
  "  (let ((vowels '(a e i o u)))\n    (define (vowel-pair letter)\n      (cond ((member\
    \ letter vowels) (list letter))\n            ((member letter (cdr vowels)) (list\
    \ letter (car vowels)))\n            (else (list letter))))\n    (define (vowel-pairs\
    \ letters)\n      (map (lambda (letter) (vowel-pair letter)) letters)))\n  (define\
    \ (vowel-pairs-list letters)\n    (map (lambda (letter) (vowel-pairs letter))\
    \ letters)))\n  (define (vowel-pairs-list-map letters)\n    (map (lambda (letter)\
    \ (vowel-pairs-list letter)) letters)))\n  (define (vowel-pairs-list-map (letters))\n\
    \    (vowel-pairs-list-map letters))\n  (define (vowel-pairs-list-map (letters))\n\
    \    (vowel-pairs-list-map letters))\n  (define (vowel-pairs-list-map (letters))\n\
    \    (vowel-pairs-list-map letters))\n  (define (vowel-pairs-list-map (letters))\n\
    \    (vowel-pairs-list-map letters))\n  (define (vowel-pairs-list-map (letters))\n\
    \    (vowel-pairs-list-map letters))\n  (define (vowel-pairs-list-map (letters))\n\
    \    (vowel-pairs-list-map letters))\n  (define (vowel-pairs-list-map (letters))\n\
    \    (vowel-pairs-list-map letters))\n  (define (vowel-pairs-list-map (letters))\n\
    \    (vowel-pairs-list-map letters))\n  (define (vowel-pairs-list-map (letters))\n\
    \    (vowel-pairs-list-map letters))\n  (define (vowel-pairs-list-map (letters))\n\
    \    (vowel-pairs-list-map letters))\n  (define (vowel-pairs-list-map (letters))\n\
    \    (vowel-pairs-list-map letters))\n  (define (vowel-pairs-list-map (letters))\n\
    \    (vowel-pairs-list-map letters))\n  (define (vowel-pairs-list-map (letters))\n\
    \    (vowel-pairs-list-map letters))\n  (define (vowel-pairs-list-map (letters))\n\
    \    (vowel-pairs-list-map letters))\n  (define (vowel-pairs-list-map (letters))\n\
    \    (vowel-pairs-list-map letters))\n  (define (vowel-pairs-list-map (letters))\n\
    \    (vowel-pairs-list-map letters))\n  (define (", "  (cond\n    [(empty? message)\
    \ \"\"]\n    [(equal? (first message) ?a) (encode (substring message 1 2))]\n\
    \    [(equal? (first message) ?e) (encode (substring message 1 3))]\n    [(equal?\
    \ (first message) ?i) (encode (substring message 1 4))]\n    [(equal? (first message)\
    \ ?o) (encode (substring message 1 5))]\n    [(equal? (first message) ?u) (encode\
    \ (substring message 1 6))]\n    [(equal? (first message) ?A) (encode (substring\
    \ message 1 7))]\n    [(equal? (first message) ?E) (encode (substring message\
    \ 1 8))]\n    [(equal? (first message) ?I) (encode (substring message 1 9))]\n\
    \    [(equal? (first message) ?O) (encode (substring message 1 10))]\n    [(equal?\
    \ (first message) ?U) (encode (substring message 1 11))]\n    [(equal? (first\
    \ message) ?a) (encode (substring message 1 12))]\n    [(equal? (first message)\
    \ ?e) (encode (substring message 1 13))]\n    [(equal? (first message) ?i) (encode\
    \ (substring message 1 14))]\n    [(equal? (first message) ?o) (encode (substring\
    \ message 1 15))]\n    [(equal? (first message) ?u) (encode (substring message\
    \ 1 16))]\n    [(equal? (first message) ?A) (encode (substring message 1 17))]\n\
    \    [(equal? (first message) ?E) (encode (substring message 1 18))]\n    [(equal?\
    \ (first message) ?I) (encode (substring message 1 19))]\n    [(equal? (first\
    \ message) ?O) (encode (substring message 1 20))]\n    [(equal? (first message)\
    \ ?U) (encode (substring message 1 21))]\n    [else (cons (first message)\n  \
    \            (encode (substring message 2 )))]))\n", "  (cond\n    [(empty? message)\
    \ \"\"]\n    [(equal? (first message) ?a) (encode-a message)]\n    [(equal? (first\
    \ message) ?e) (encode-e message)]\n    [(equal? (first message) ?i) (encode-i\
    \ message)]\n    [(equal? (first message) ?o) (encode-o message)]\n    [(equal?\
    \ (first message) ?u) (encode-u message)]\n    [else (encode-others message)]))\n",
  "  (let ((vowels '(a e i o u)))\n    (cond ((null? message) '())\n          ((member\
    \ (first message) vowels) (cons (first message) (encode (sub1 message))))\n  \
    \        (else (cons (first message) (encode (sub1 message)))))))\n", "  (let\
    \ ((vowels '(a e i o u)))\n    (cond\n      [(empty? message) \"\"]\n      [(member\
    \ (first message) vowels) (cons (first message) (encode (substring message 1 (length\
    \ message))))]\n      [else (cons (first message) (encode (substring message 1\
    \ (length message))))])))\n", "  (cond\n    [(empty? message) \"\"]\n    [(equal?\
    \ (first message) ?a) (encode (substring message 1 2))]\n    [(equal? (first message)\
    \ ?e) (encode (substring message 1 3))]\n    [(equal? (first message) ?i) (encode\
    \ (substring message 1 4))]\n    [(equal? (first message) ?o) (encode (substring\
    \ message 1 5))]\n    [(equal? (first message) ?u) (encode (substring message\
    \ 1 6))]\n    [(equal? (first message) ?A) (encode (substring message 1 7))] \n\
    \    [(equal? (first message) ?E) (encode (substring message 1 8))] \n    [(equal?\
    \ (first message) ?I) (encode (substring message 1 9))] \n    [(equal? (first\
    \ message) ?O) (encode (substring message 1 10))] \n    [(equal? (first message)\
    \ ?U) (encode (substring message 1 11))] \n    [(equal? (first message) ?a) (encode\
    \ (substring message 1 12))] \n    [(equal? (first message) ?e) (encode (substring\
    \ message 1 13))] \n    [(equal? (first message) ?i) (encode (substring message\
    \ 1 14))] \n    [(equal? (first message) ?o) (encode (substring message 1 15))]\
    \ \n    [(equal? (first message) ?u) (encode (substring message 1 16))] \n   \
    \ [(equal? (first message) ?A) (encode (substring message 1 17))] \n    [(equal?\
    \ (first message) ?E) (encode (substring message 1 18))] \n    [(equal? (first\
    \ message) ?I) (encode (substring message 1 19))] \n    [(equal? (first message)\
    \ ?O) (encode (substring message 1 20))] \n    [(equal? (first message) ?U) (encode\
    \ (substring message 1 21))] \n    [(equal? (first message) ?a) (encode (substring\
    \ message 1 22))] \n    [(equal? (first message) ?e) (encode (substring message\
    \ 1 23))] \n    [(equal? (first message) ?i) (encode (substring message 1 24))]\
    \ \n    [(equal? (first message) ?o) (encode (substring message 1 25))] \n   \
    \ [(equal? (first message) ?u) (encode (substring message 1 26))] \n    [(equal?\
    \ (first message) ?A) (", "  (let ((vowels '(a e i o u)))\n    (cond\n      [(empty?\
    \ message) message]\n      [(member (first message) vowels) (cons (first message)\
    \ (encode (substring message 1 (length message))))]\n      [else (cons (first\
    \ message) (encode (substring message 1 (length message))))])))\n", "  (cond\n\
    \    [(empty? message) \"\"]\n    [(equal? (first message) ?a) (encode (substring\
    \ message 1 2))]\n    [(equal? (first message) ?e) (encode (substring message\
    \ 1 3))]\n    [(equal? (first message) ?i) (encode (substring message 1 4))]\n\
    \    [(equal? (first message) ?o) (encode (substring message 1 5))]\n    [(equal?\
    \ (first message) ?u) (encode (substring message 1 6))]\n    [else (cons (first\
    \ message)\n               (encode (substring message 2)))]))\n", "  (define (helper\
    \ message vowel)\n    (cond\n      [(empty? message) message]\n      [(equal?\
    \ (first message) vowel) (second message)]\n      [else (helper (rest message)\
    \ (cons vowel (first message)))]))\n  (helper message 'a))\n", "  (let ((letters\
    \ '(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\\
    o #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z))\n        (vowels '(#\\A\
    \ #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J #\\K #\\L #\\M #\\N #\\O #\\P #\\\
    Q #\\R #\\S #\\T #\\V #\\W #\\X #\\Y #\\Z)))\n    (cond\n      [(empty? message)\
    \ \"\"]\n      [(equal? (first message) ?a) (cons (first message) (encode (substring\
    \ message 1 (- (length message) 1)))]\n      [(equal? (first message) ?b) (cons\
    \ (first message) (encode (substring message 1 (- (length message) 1)))]\n   \
    \   [(equal? (first message) ?c) (cons (first message) (encode (substring message\
    \ 1 (- (length message) 1)))]\n      [(equal? (first message) ?d) (cons (first\
    \ message) (encode (substring message 1 (- (length message) 1)))]\n      [(equal?\
    \ (first message) ?e) (cons (first message) (encode (substring message 1 (- (length\
    \ message) 1)))]\n      [(equal? (first message) ?f) (cons (first message) (encode\
    \ (substring message 1 (- (length message) 1)))]\n      [(equal? (first message)\
    \ ?g) (cons (first message) (encode (substring message 1 (- (length message) 1)))]\n\
    \      [(equal? (first message) ?h) (cons (first message) (encode (substring message\
    \ 1 (- (length message) 1)))]\n      [(equal? (first message) ?i) (cons (first\
    \ message) (encode (substring message 1 (- (length message) 1)))]\n      [(equal?\
    \ (first message) ?j) (cons (first message) (encode (substring message 1 (- (length\
    \ message) 1)))]\n      [(equal? (first message) ?k) (cons (first message) (encode\
    \ (substring message 1 (- (length message) 1)))]\n      [(equal? (first message)\
    \ ?l) (cons (first message) (encode (substring message 1 (- (length message) 1)))]\n\
    \      [(equal? (first ", "  (cond\n    [(empty? message) \"\"]\n    [(equal?\
    \ (first message) ?a) (encode (substring message 1 2))]\n    [(equal? (first message)\
    \ ?e) (encode (substring message 1 3))]\n    [(equal? (first message) ?i) (encode\
    \ (substring message 1 4))]\n    [(equal? (first message) ?o) (encode (substring\
    \ message 1 5))]\n    [(equal? (first message) ?u) (encode (substring message\
    \ 1 6))]\n    [else (cons (first message)\n               (encode (substring message\
    \ 2))])]))\n", "  (let ((vowels '(a e i o u)))\n    (cond\n      [(empty? message)\
    \ \"\"]\n      [(char-alphabet message) message]\n      [(char-alphabet (first\
    \ message)) (encode (first message))]\n      [(char-alphabet (second message))\
    \ (encode (second message))]\n      [(char-alphabet (third message)) (encode (third\
    \ message))]\n      [(char-alphabet (fourth message)) (encode (fourth message))]\n\
    \      [(char-alphabet (fifth message)) (encode (fifth message))]\n      [(char-alphabet\
    \ (sixth message)) (encode (sixth message))]\n      [(char-alphabet (seventh message))\
    \ (encode (seventh message))]\n      [(char-alphabet (last message)) (encode (last\
    \ message))]\n      [(char-alphabet (first vowels)) (encode (first vowels))]\n\
    \      [(char-alphabet (second vowels)) (encode (second vowels))]\n      [(char-alphabet\
    \ (third vowels)) (encode (third vowels))]\n      [(char-alphabet (fourth vowels))\
    \ (encode (fourth vowels))]\n      [(char-alphabet (fifth vowels)) (encode (fifth\
    \ vowels))]\n      [(char-alphabet (sixth vowels)) (encode (sixth vowels))]\n\
    \      [(char-alphabet (seventh vowels)) (encode (seventh vowels))]\n      [(char-alphabet\
    \ (last vowels)) (encode (last vowels))]\n      [else (cons (char-alphabet (first\
    \ message)) (encode (first message)))])))\n", "  (let ([vowels '(a e i o u)])\n\
    \    (cond\n      [(empty? message) \"\"]\n      [(member (first message) vowels)\
    \ (cons (first message) (encode (substring message 1 (length message))))]\n  \
    \    [else (cons (first message) (encode (substring message 1 (length message))))])))\n",
  "  (cond\n    [(empty? message) \"\"]\n    [(equal? (first message) ?a) (encode-a\
    \ message)]\n    [(equal? (first message) ?e) (encode-e message)]\n    [(equal?\
    \ (first message) ?i) (encode-i message)]\n    [(equal? (first message) ?o) (encode-o\
    \ message)]\n    [(equal? (first message) ?u) (encode-u message)]\n    [else (encode-others\
    \ message)]))\n", "  (define (helper message vowels)\n    (cond\n      [(empty?\
    \ message) \"\"]\n      [(equal? (first message) vowels) (second message)]\n \
    \     [else (helper (rest message) (cons (first message) vowels))]))\n  (helper\
    \ message '(a e i o u)))\n", "  (let ((vowels '(a e i o u)))\n    (cond\n    \
    \  [(empty? message) message]\n      [(member (first message) vowels) (second\
    \ message)]\n      [else (cons (first message)\n                   (encode (substring\
    \ message 1 \n                                  (length (first message)))))])))\n",
  "  (cond\n    [(empty? message) \"\"]\n    [(equal? (first message) ?a) (encode\
    \ (substring message 1 2))]\n    [(equal? (first message) ?e) (encode (substring\
    \ message 1 3))]\n    [(equal? (first message) ?i) (encode (substring message\
    \ 1 4))]\n    [(equal? (first message) ?o) (encode (substring message 1 5))]\n\
    \    [(equal? (first message) ?u) (encode (substring message 1 6))]\n    [else\
    \ (cons (first message)\n               (encode (substring message 2)))]))\n",
  "  (let ((vowels '(a e i o u)))\n    (cond\n      [(empty? message) \"\"]\n    \
    \  [(member (first message) vowels) (second message)]\n      [else (cons (first\
    \ message)\n                   (encode (substring message 1 (- (length message)\
    \ 1)))]))))\n", "  (cond\n    [(empty? message) \"\"]\n    [(equal? (first message)\
    \ ?a) (encode-a message)]\n    [(equal? (first message) ?e) (encode-e message)]\n\
    \    [(equal? (first message) ?i) (encode-i message)]\n    [(equal? (first message)\
    \ ?o) (encode-o message)]\n    [(equal? (first message) ?u) (encode-u message)]\n\
    \    [else (encode-others message)]))\n", "  (cond\n    [(empty? message) \"\"\
    ]\n    [(equal? (first message) ?a) (encode (substring message 1 2))]\n    [(equal?\
    \ (first message) ?e) (encode (substring message 1 3))]\n    [(equal? (first message)\
    \ ?i) (encode (substring message 1 4))]\n    [(equal? (first message) ?o) (encode\
    \ (substring message 1 5))]\n    [(equal? (first message) ?u) (encode (substring\
    \ message 1 6))]\n    [else (cons (first message)\n               (encode (substring\
    \ message 2))])]))\n", "  (cond\n    [(empty? message) \"\"]\n    [(equal? (first\
    \ message) ?a) (encode (substring message 1 2))]\n    [(equal? (first message)\
    \ ?e) (encode (substring message 1 3))]\n    [(equal? (first message) ?i) (encode\
    \ (substring message 1 4))]\n    [(equal? (first message) ?o) (encode (substring\
    \ message 1 5))]\n    [(equal? (first message) ?u) (encode (substring message\
    \ 1 6))]\n    [else (cons (first message)\n               (encode (substring message\
    \ 2 length)))]))\n", "  (let ((vowels '(a e i o u)))\n    (cond\n      [(empty?\
    \ message) \"\"]\n      [(char-alphabet (first message)) (cons (first message)\
    \ (encode (rest message)))]\n      [else (cons (first message)\n             \
    \     (encode (rest message))\n                  (encode (first vowels))\n   \
    \               (encode (rest vowels)))])))\n", "  (let ((vowels '(a e i o u)))\n\
    \    (cond\n      [(empty? message) \"\"]\n      [(member (first message) vowels)\
    \ (first message)]\n      [else (cons (first message)\n                  (encode\
    \ (substring message 1 \n                                (length message))))])))\n",
  "  (let ((vowels '(a e i o u)))\n    (cond\n      [(empty? message) \"\"]\n    \
    \  [(member (first message) vowels) (second message)]\n      [else (cons (first\
    \ message)\n                   (encode\n                    (substring message\
    \ 2\n                              (length message))\n                    (substring\
    \ message 0\n                              (length message))))])))\n", "  (let\
    \ ((vowels '(a e i o u)))\n    (cond\n      [(empty? message) \"\"]\n      [(member\
    \ (first message) vowels) (cons (first message) (encode (substring message 1 (length\
    \ (first message)))))]\n      [else (cons (first message) (encode (substring message\
    \ 1 (length (first message))))))]))\n", "  (let ((vowels '(a e i o u)))\n    (cond\n\
    \      [(empty? message) \"\"]\n      [(member (first message) vowels) (cons (first\
    \ message) (encode (substring message 1 (length message))))]\n      [else (cons\
    \ (first message) (encode (substring message 1 (length message))))])))\n", " \
    \ (define (swap-case letter)\n    (if (char=? letter #\\a)\n        #\\A\n   \
    \     (char=? (char-after letter) #\\a)\n        (char=? (char-after letter) #\\\
    A)\n        (char=? (char-after letter) #\\a)\n        (char=? (char-after letter)\
    \ #\\A)\n        (char=? (char-after letter) #\\a)\n        (char=? (char-after\
    \ letter) #\\A)\n        (char=? (char-after letter) #\\a)\n        (char=? (char-after\
    \ letter) #\\A)\n        (char=? (char-after letter) #\\a)\n        (char=? (char-after\
    \ letter) #\\A)\n        (char=? (char-after letter) #\\a)\n        (char=? (char-after\
    \ letter) #\\A)\n        (char=? (char-after letter) #\\a)\n        (char=? (char-after\
    \ letter) #\\A)\n        (char=? (char-after letter) #\\a)\n        (char=? (char-after\
    \ letter) #\\A)\n        (char=? (char-after letter) #\\a)\n        (char=? (char-after\
    \ letter) #\\A)\n        (char=? (char-after letter) #\\a)\n        (char=? (char-after\
    \ letter) #\\A)\n        (char=? (char-after letter) #\\a)\n        (char=? (char-after\
    \ letter) #\\A)\n        (char=? (char-after letter) #\\a)\n        (char=? (char-after\
    \ letter) #\\A)\n        (char=? (char-after letter) #\\a)\n        (char=? (char-after\
    \ letter) #\\A)\n        (char=? (char-after letter) #\\a)\n        (char=? (char-after\
    \ letter) #\\A)\n        (char=? (char-after letter) #\\a)\n        (char=? (char-after\
    \ letter) #\\A)\n        (char=? (char-after letter) #\\a)\n        (char=? (char-after\
    \ letter) #\\A)\n        (char=? (char-after letter) #\\a)\n        (char=? (char-after\
    \ letter) #\\A)\n        (char=? (char-after letter) #\\a)\n        (char=? (char-after\
    \ letter) #\\A)\n        (char=? (char-after letter) #\\a)\n        (char=? (char-after\
    \ letter) #\\A)\n        (char=? (char-after letter) #\\a)\n        (char=? (char-after\
    \ letter) #\\A)\n        (char=? (char-after letter) #", "  (let ((vowels '(a\
    \ e i o u)))\n    (cond ((null? message) \"\")\n          ((member (char-ref message\
    \ 0) vowels) (char 0 (char-ref message 0) message))\n          (else (cons (char\
    \ (char-ref message 0) message) (encode (char-ref message 1))))))\n", "  (let\
    \ ((vowels '(a e i o u)))\n    (cond\n      [(empty? message) \"\"]\n      [(member\
    \ (first message) vowels) (cons (first message) (encode (substring message 1 (length\
    \ message))))]\n      [else (cons (first message) (encode (substring message 1\
    \ (length message))))])))\n", "  (let ((vowels '(a e i o u)))\n    (cond\n   \
    \   [(empty? message) \"\"]\n      [(member (first message) vowels) (cons (first\
    \ message) (encode (substring message 1 (length message))))]\n      [else (cons\
    \ (first message) (encode (substring message 1 (length message))))])))\n", " \
    \ (let ((vowels '(a e i o u)))\n    (cond\n      [(empty? message) \"\"]\n   \
    \   [(member (first message) vowels) (cons (first message) (encode (substring\
    \ (second message) 0 (- (length message) 1)))) ]\n      [else (cons (first message)\
    \ (encode (substring (second message) 0 (- (length message) 1)))) ]\n    )\n \
    \ )\n)\n", "  (cond\n    [(empty? message) \"\"]\n    [(equal? (first message)\
    \ ?a) (encode (substring message 1 2))]\n    [(equal? (first message) ?e) (encode\
    \ (substring message 1 3))]\n    [(equal? (first message) ?i) (encode (substring\
    \ message 1 4))]\n    [(equal? (first message) ?o) (encode (substring message\
    \ 1 5))]\n    [(equal? (first message) ?u) (encode (substring message 1 6))]\n\
    \    [else (cons (first message)\n               (encode (substring message 2)))]))\n",
  "  (define (helper message index result)\n    (cond\n      [(empty? message) result]\n\
    \      [(char-alphabet (first message)) (helper (rest message) (+ index 1) (cons\
    \ (first message) (helper (rest message) (+ index 1) result)))]\n      [else (helper\
    \ (rest message) (+ index 1) (cons (first message) (helper (rest message) (+ index\
    \ 1) result)))]))\n  (helper message 0 '()))\n", "  (let ((letters '(a b c d e\
    \ f g h i j k l m n o p q r s t u v w x y z)))\n    (let loop ((i 0))\n      (if\
    \ (null? message)\n          \"\"\n          (cons (char (char (char (char (char\
    \ (char (char (char (char (char (char (char (char (char (char (char (char (char\
    \ (char (char (char (char (char (char (char (char (char (char (char (char (char\
    \ (char (char (char (char (char (char (char (char (char (char (char (char (char\
    \ (char (char (char (char (char (char (char (char (char (char (char (char (char\
    \ (char (char (char (char (char (char (char (char (char (char (char (char (char\
    \ (char (char (char (char (char (char (char (char (char (char (char (char (char\
    \ (char (char (char (char (char (char (char (char (char (char (char (char (char\
    \ (char (char (char (char (char (char (char (char (char (char (char (char (char\
    \ (char (char (char (char (char (char (char (char (char (char (char (char (char\
    \ (char (char (char (char (char (char (char (char (char (char (char (char (char\
    \ (char (char (char (char (char (char (char (char (char (char (char (char (char\
    \ (char (char (char (char (char (char (char (char (char (char (char (char (char\
    \ (char (char (char (char (char (char (char (char (char (char (char (char (char\
    \ (char (char (char (char (char (char (char (char (char (char (char (char (char\
    \ (char (char (char (char (char (char (char (char (char (char (char (char (char\
    \ (char (char (char (char (char (char (char (char (char (char (char (char (char\
    \ (char (char (char (char (char (char (char (char (char (char (char (char (char\
    \ (char (char (char", "  (let ((vowels '(a e i o u)))\n    (cond\n      [(empty?\
    \ message) \"\"]\n      [(member (first message) vowels) (first message)]\n  \
    \    [else (cons (first message) (encode (substring message 1 (length message))))])))\n",
  "  (cond\n    [(empty? message) \"\"]\n    [(equal? (first message) ?a) (encode\
    \ (substring message 1 2))]\n    [(equal? (first message) ?e) (encode (substring\
    \ message 1 3))]\n    [(equal? (first message) ?i) (encode (substring message\
    \ 1 4))]\n    [(equal? (first message) ?o) (encode (substring message 1 5))]\n\
    \    [(equal? (first message) ?u) (encode (substring message 1 6))]\n    [(equal?\
    \ (first message) ?A) (encode (substring message 1 7))] \n    [(equal? (first\
    \ message) ?E) (encode (substring message 1 8))] \n    [(equal? (first message)\
    \ ?I) (encode (substring message 1 9))] \n    [(equal? (first message) ?O) (encode\
    \ (substring message 1 10))] \n    [(equal? (first message) ?U) (encode (substring\
    \ message 1 11))] \n    [(equal? (first message) ?a) (encode (substring message\
    \ 1 12))] \n    [(equal? (first message) ?e) (encode (substring message 1 13))]\
    \ \n    [(equal? (first message) ?i) (encode (substring message 1 14))] \n   \
    \ [(equal? (first message) ?o) (encode (substring message 1 15))] \n    [(equal?\
    \ (first message) ?u) (encode (substring message 1 16))] \n    [(equal? (first\
    \ message) ?A) (encode (substring message 1 17))] \n    [(equal? (first message)\
    \ ?E) (encode (substring message 1 18))] \n    [(equal? (first message) ?I) (encode\
    \ (substring message 1 19))] \n    [(equal? (first message) ?O) (encode (substring\
    \ message 1 20))] \n    [(equal? (first message) ?U) (encode (substring message\
    \ 1 21))] \n    [(equal? (first message) ?a) (encode (substring message 1 22))]\
    \ \n    [(equal? (first message) ?e) (encode (substring message 1 23))] \n   \
    \ [(equal? (first message) ?i) (encode (substring message 1 24))] \n    [(equal?\
    \ (first message) ?o) (encode (substring message 1 25))] \n    [(equal? (first\
    \ message) ?u) (encode (substring message 1 26))] \n    [(equal? (first message)\
    \ ?A) (", "  (let ((vowels '(a e i o u)))\n    (cond\n      [(empty? message)\
    \ \"\"]\n      [(char-alphabetic? message) message]\n      [else (cons (char-alphabetic?\
    \ (first message)) (encode (rest message)))])))\n", "  (let ((vowels '(a e i o\
    \ u)))\n    (cond\n      [(empty? message) \"\"]\n      [(member (first message)\
    \ vowels) (second message)]\n      [else (cons (first message)\n             \
    \     (encode (substring message 1 (- (length message) 1)))]))))\n", "  (cond\n\
    \    [(empty? message) \"\"]\n    [(equal? (first message) ?a) (encode-a message)]\n\
    \    [(equal? (first message) ?e) (encode-e message)]\n    [(equal? (first message)\
    \ ?i) (encode-i message)]\n    [(equal? (first message) ?o) (encode-o message)]\n\
    \    [(equal? (first message) ?u) (encode-u message)]\n    [else (encode-others\
    \ message)]))\n", "  (cond\n    [(empty? message) \"\"]\n    [(equal? (first message)\
    \ ?a) (encode (substring message 1 2))]\n    [(equal? (first message) ?e) (encode\
    \ (substring message 1 3))]\n    [(equal? (first message) ?i) (encode (substring\
    \ message 1 4))]\n    [(equal? (first message) ?o) (encode (substring message\
    \ 1 5))]\n    [(equal? (first message) ?u) (encode (substring message 1 6))]\n\
    \    [(equal? (first message) ?A) (encode (substring message 1 7))]\n    [(equal?\
    \ (first message) ?E) (encode (substring message 1 8))]\n    [(equal? (first message)\
    \ ?I) (encode (substring message 1 9))]\n    [(equal? (first message) ?O) (encode\
    \ (substring message 1 10))]\n    [(equal? (first message) ?U) (encode (substring\
    \ message 1 11))]\n    [(equal? (first message) ?a) (encode (substring message\
    \ 1 12))]\n    [(equal? (first message) ?e) (encode (substring message 1 13))]\n\
    \    [(equal? (first message) ?i) (encode (substring message 1 14))]\n    [(equal?\
    \ (first message) ?o) (encode (substring message 1 15))]\n    [(equal? (first\
    \ message) ?u) (encode (substring message 1 16))]\n    [(equal? (first message)\
    \ ?A) (encode (substring message 1 17))]\n    [(equal? (first message) ?E) (encode\
    \ (substring message 1 18))]\n    [(equal? (first message) ?I) (encode (substring\
    \ message 1 19))]\n    [(equal? (first message) ?O) (encode (substring message\
    \ 1 20))]\n    [(equal? (first message) ?U) (encode (substring message 1 21))]\n\
    \    [else (cons (first message)\n               (encode (substring message 2)))]))\n",
  "  (cond\n    [(empty? message) \"\"]\n    [(equal? (first message) ?a) (encode\
    \ (substring message 1 2))]\n    [(equal? (first message) ?e) (encode (substring\
    \ message 1 3))]\n    [(equal? (first message) ?i) (encode (substring message\
    \ 1 4))]\n    [(equal? (first message) ?o) (encode (substring message 1 5))]\n\
    \    [(equal? (first message) ?u) (encode (substring message 1 6))]\n    [(equal?\
    \ (first message) ?A) (encode (substring message 1 7))] \n    [(equal? (first\
    \ message) ?E) (encode (substring message 1 8))] \n    [(equal? (first message)\
    \ ?I) (encode (substring message 1 9))] \n    [(equal? (first message) ?O) (encode\
    \ (substring message 1 10))] \n    [(equal? (first message) ?U) (encode (substring\
    \ message 1 11))] \n    [(equal? (first message) ?a) (encode (substring message\
    \ 1 12))]\n    [(equal? (first message) ?e) (encode (substring message 1 13))]\n\
    \    [(equal? (first message) ?i) (encode (substring message 1 14))]\n    [(equal?\
    \ (first message) ?o) (encode (substring message 1 15))]\n    [(equal? (first\
    \ message) ?u) (encode (substring message 1 16))]\n    [(equal? (first message)\
    \ ?A) (encode (substring message 1 17))]\n    [(equal? (first message) ?E) (encode\
    \ (substring message 1 18))]\n    [(equal? (first message) ?I) (encode (substring\
    \ message 1 19))]\n    [(equal? (first message) ?O) (encode (substring message\
    \ 1 20))] \n    [(equal? (first message) ?U) (encode (substring message 1 21))]\n\
    \    [else (cons (first message)\n              (encode (substring message 2 length)))]))\n",
  "  (let ((vowels '(a e i o u)))\n    (cond\n      [(empty? message) message]\n \
    \     [(member (first message) vowels) (cons (first message) (encode (substring\
    \ message 1 (- (length message) 1))))]\n      [else (cons (first message) (encode\
    \ (substring message 1 (- (length message) 1)))\n                (encode (substring\
    \ message 0 (- (length message) 1)))\n                (encode (substring message\
    \ (- (length message) 1) (length message))))])))\n", "  (cond\n    [(empty? message)\
    \ \"\"]\n    [(equal? (first message) ?a) (encode (substring message 1 2))]\n\
    \    [(equal? (first message) ?e) (encode (substring message 1 3))]\n    [(equal?\
    \ (first message) ?i) (encode (substring message 1 4))]\n    [(equal? (first message)\
    \ ?o) (encode (substring message 1 5))]\n    [(equal? (first message) ?u) (encode\
    \ (substring message 1 6))]\n    [(equal? (first message) ?A) (encode (substring\
    \ message 1 7))] \n    [(equal? (first message) ?E) (encode (substring message\
    \ 1 8))] \n    [(equal? (first message) ?I) (encode (substring message 1 9))]\
    \ \n    [(equal? (first message) ?O) (encode (substring message 1 10))] \n   \
    \ [(equal? (first message) ?U) (encode (substring message 1 11))] \n    [(equal?\
    \ (first message) ?a) (encode (substring message 1 12))] \n    [(equal? (first\
    \ message) ?e) (encode (substring message 1 13))] \n    [(equal? (first message)\
    \ ?i) (encode (substring message 1 14))] \n    [(equal? (first message) ?o) (encode\
    \ (substring message 1 15))] \n    [(equal? (first message) ?u) (encode (substring\
    \ message 1 16))] \n    [(equal? (first message) ?A) (encode (substring message\
    \ 1 17))] \n    [(equal? (first message) ?E) (encode (substring message 1 18))]\
    \ \n    [(equal? (first message) ?I) (encode (substring message 1 19))] \n   \
    \ [(equal? (first message) ?O) (encode (substring message 1 20))] \n    [(equal?\
    \ (first message) ?U) (encode (substring message 1 21))] \n    [(equal? (first\
    \ message) ?a) (encode (substring message 1 22))] \n    [(equal? (first message)\
    \ ?e) (encode (substring message 1 23))] \n    [(equal? (first message) ?i) (encode\
    \ (substring message 1 24))] \n    [(equal? (first message) ?o) (encode (substring\
    \ message 1 25))] \n    [(equal? (first message) ?u) (encode (substring message\
    \ 1 26))] \n    [(equal? (first message) ?A) (", "  (cond\n    [(empty? message)\
    \ \"\"]\n    [(equal? (first message) ?a) (encode-a message)]\n    [(equal? (first\
    \ message) ?e) (encode-e message)]\n    [(equal? (first message) ?i) (encode-i\
    \ message)]\n    [(equal? (first message) ?o) (encode-o message)]\n    [(equal?\
    \ (first message) ?u) (encode-u message)]\n    [else (encode-others message)]))\n",
  "  (let ((vowels '(a e i o u)))\n    (cond\n      [(empty? message) message]\n \
    \     [(member (first message) vowels) (cons (first message) (encode (substring\
    \ message 1 (length message))))]\n      [else (cons (first message) (encode (substring\
    \ message 1 (length message))))])))\n", "  (let ((vowels '(a e i o u)))\n    (cond\n\
    \      [(empty? message) \"\"]\n      [(member (first message) vowels) (cons (first\
    \ message) (encode (substring message 1 (length message))))]\n      [else (cons\
    \ (first message) (encode (substring message 1 (length message))))])))\n", " \
    \ (let ((letters '(a b c d e f g h i j k l m n o p q r s t u v w x y z)))\n  \
    \  (cond\n      [(empty? message) \"\"]\n      [(equal? (first message) ?a) (cons\
    \ (first message) (encode (substring message 1 (length message))))]\n      [(equal?\
    \ (first message) ?b) (cons (first message) (encode (substring message 1 (length\
    \ message))))]\n      [(equal? (first message) ?c) (cons (first message) (encode\
    \ (substring message 1 (length message))))]\n      [(equal? (first message) ?d)\
    \ (cons (first message) (encode (substring message 1 (length message))))]\n  \
    \    [(equal? (first message) ?e) (cons (first message) (encode (substring message\
    \ 1 (length message))))]\n      [(equal? (first message) ?f) (cons (first message)\
    \ (encode (substring message 1 (length message))))]\n      [(equal? (first message)\
    \ ?g) (cons (first message) (encode (substring message 1 (length message))))]\n\
    \      [(equal? (first message) ?h) (cons (first message) (encode (substring message\
    \ 1 (length message))))]\n      [(equal? (first message) ?i) (cons (first message)\
    \ (encode (substring message 1 (length message))))]\n      [(equal? (first message)\
    \ ?j) (cons (first message) (encode (substring message 1 (length message))))]\n\
    \      [(equal? (first message) ?k) (cons (first message) (encode (substring message\
    \ 1 (length message))))]\n      [(equal? (first message) ?l) (cons (first message)\
    \ (encode (substring message 1 (length message))))]\n      [(equal? (first message)\
    \ ?m) (cons (first message) (encode (substring message 1 (length message))))]\n\
    \      [(equal? (first message) ?n) (cons (first message) (encode (substring message\
    \ 1 (length message))))]\n      [(equal? (first message) ?o) (cons (first message)\
    \ (encode (substring message 1 (length message))))]\n      [(equal? (first message)\
    \ ?p) (cons (first message) (encode (substring message 1 (length message))))]\n\
    \      [(equal? (first message) ?q) (cons (first message) (encode (substring message\
    \ 1 (length message))))]\n      [(equal? (first message) ?r) (cons (first message)\
    \ (encode (substring message 1 (length message))))", "  (define (helper message\
    \ index)\n    (cond\n      [(empty? message) message]\n      [(char=? (first message)\
    \ 'A) (cons (char->string (char->integer 'A)) (helper (rest message) (+ index\
    \ 1)))]\n      [(char=? (first message) 'a) (cons (char->string (char->integer\
    \ 'a)) (helper (rest message) (+ index 1)))]\n      [(char=? (first message) 'E)\
    \ (cons (char->string (char->integer 'E)) (helper (rest message) (+ index 1)))]\n\
    \      [(char=? (first message) 'e) (cons (char->string (char->integer 'e)) (helper\
    \ (rest message) (+ index 1)))]\n      [(char=? (first message) 'I) (cons (char->string\
    \ (char->integer 'I)) (helper (rest message) (+ index 1)))]\n      [(char=? (first\
    \ message) 'i) (cons (char->string (char->integer 'i)) (helper (rest message)\
    \ (+ index 1)))]\n      [(char=? (first message) 'O) (cons (char->string (char->integer\
    \ 'O)) (helper (rest message) (+ index 1)))]\n      [(char=? (first message) 'o)\
    \ (cons (char->string (char->integer 'o)) (helper (rest message) (+ index 1)))]\n\
    \      [(char=? (first message) 'U) (cons (char->string (char->integer 'U)) (helper\
    \ (rest message) (+ index 1)))]\n      [(char=? (first message) 'u) (cons (char->string\
    \ (char->integer 'u)) (helper (rest message) (+ index 1)))]\n      [else (cons\
    \ (char->string (char->integer message)) (helper (rest message) (+ index 1)))\
    \ ]))\n  (helper message 0))\n", "  (cond\n    [(empty? message) \"\"]\n    [(equal?\
    \ (first message) ?a) (cond\n                             [(equal? (second message)\
    \ ?e) (cond\n                                                      [(equal? (third\
    \ message) ?i) (cond\n                                                       \
    \                    [(equal? (fourth message) ?o) (cond\n                   \
    \                                                                            \
    \      [(equal? (fifth message) ?u) (cond\n                                  \
    \                                                                            \
    \             [(equal? (sixth message) ?A) (cond\n                           \
    \                                                                            \
    \                                    [(equal? (seventh message) ?E) (cond\n  \
    \                                                                            \
    \                                                                            \
    \   [(equal? (eighth message) ?I) (cond\n                                    \
    \                                                                            \
    \                                                 [(equal? (ninth message) ?O)\
    \ (cond\n                                                                    \
    \                                                                            \
    \                       [(equal? (tenth message) ?U) (cond\n                 \
    \                                                                            \
    \                                                                            \
    \      [(equal? (eleventh message) ?a) (cond\n                               \
    \                                                                            \
    \                                                                            [(equal?\
    \ (twelfth message) ?e) (cond\n                                              \
    \                                                                            \
    \                                                                 [(equal? (thirteenth\
    \ message) ?i) (cond\n                                                       \
    \                                                                            \
    \                                                                [(equal? (fourteenth\
    \ message) ?o) (cond\n                                                       \
    \                                                                            \
    \                                                                [(equal? (fifteenth\
    \ message) ?u) (cond\n                                                       \
    \                                                                            \
    \                                                                [(equal? (sixteenth\
    \ message) ?A) (cond\n                                                       \
    \                                                                            \
    \                                                                [(equal? (seventeenth\
    \ message) ?E) (cond\n                                                       \
    \                                                                            \
    \                                                                [(equal? (eighteenth\
    \ message) ?I) (cond\n                                                       \
    \                                                                            \
    \                                                                [(equal? (nineteenth\
    \ message) ?O) (cond\n                                                       \
    \                                                                            \
    \                                                                [(equal? (twentieth\
    \ message) ?U) (cond\n                                                       \
    \                                                                            \
    \                                                                [(equal? (twenty-first\
    \ message) ?a) (cond\n                                                       \
    \                                                                            \
    \                                                                [(equal? (twenty-second\
    \ message) ?e) (cond\n                                                       \
    \                                                                            \
    \                                                                [(equal? (twenty-third\
    \ message) ?i) (cond\n                                                       \
    \                                                                            \
    \                                                                [(equal? (twenty-fourth\
    \ message) ?o) (cond\n                                                       \
    \                                                                            \
    \                                                                [(equal? (twenty-fifth\
    \ message) ?u) (cond\n                                                       \
    \                                                                            \
    \                                                                [(equal? (twenty-sixth\
    \ message) ?A) (cond\n                                                       \
    \                                                                            \
    \                                                                [(equal? (twenty-seventh\
    \ message) ?E) (cond\n                                                       \
    \                                                                            \
    \                                                                [(equal? (twenty-eighth\
    \ message) ?I) (cond\n                                                       \
    \                                                                            \
    \                                                                [(equal? (twenty-ninth\
    \ message) ?O) (cond\n                                                       \
    \                                                                            \
    \                                                                [(equal? (thirtieth\
    \ message) ?U) (cond", "  (let ((vowels '(a e i o u)))\n    (cond\n      [(empty?\
    \ message) \"\"]\n      [(member (first message) vowels) (cons (first message)\
    \ (encode (substring message 1 (length message))))]\n      [else (cons (first\
    \ message) (encode (substring message 1 (length message))))])))\n", "  (let ((vowels\
    \ '(a e i o u)))\n    (cond\n      [(empty? message) message]\n      [(member\
    \ (first message) vowels) (cons (first message) (encode (substring message 1 (length\
    \ message))))]\n      [else (cons (first message) (encode (substring message 1\
    \ (length message))))])))\n", "  (cond\n    [(empty? message) \"\"]\n    [(equal?\
    \ (first message) ?a) (encode (substring message 1 2))]\n    [(equal? (first message)\
    \ ?e) (encode (substring message 1 3))]\n    [(equal? (first message) ?i) (encode\
    \ (substring message 1 4))]\n    [(equal? (first message) ?o) (encode (substring\
    \ message 1 5))]\n    [(equal? (first message) ?u) (encode (substring message\
    \ 1 6))]\n    [(equal? (first message) ?A) (encode (substring message 1 7))] \n\
    \    [(equal? (first message) ?E) (encode (substring message 1 8))] \n    [(equal?\
    \ (first message) ?I) (encode (substring message 1 9))] \n    [(equal? (first\
    \ message) ?O) (encode (substring message 1 10))] \n    [(equal? (first message)\
    \ ?U) (encode (substring message 1 11))] \n    [(equal? (first message) ?a) (encode\
    \ (substring message 1 12))] \n    [(equal? (first message) ?e) (encode (substring\
    \ message 1 13))] \n    [(equal? (first message) ?i) (encode (substring message\
    \ 1 14))] \n    [(equal? (first message) ?o) (encode (substring message 1 15))]\
    \ \n    [(equal? (first message) ?u) (encode (substring message 1 16))] \n   \
    \ [(equal? (first message) ?A) (encode (substring message 1 17))] \n    [(equal?\
    \ (first message) ?E) (encode (substring message 1 18))] \n    [(equal? (first\
    \ message) ?I) (encode (substring message 1 19))] \n    [(equal? (first message)\
    \ ?O) (encode (substring message 1 20))] \n    [(equal? (first message) ?U) (encode\
    \ (substring message 1 21))] \n    [(equal? (first message) ?a) (encode (substring\
    \ message 1 22))] \n    [(equal? (first message) ?e) (encode (substring message\
    \ 1 23))] \n    [(equal? (first message) ?i) (encode (substring message 1 24))]\
    \ \n    [(equal? (first message) ?o) (encode (substring message 1 25))] \n   \
    \ [(equal? (first message) ?u) (encode (substring message 1 26))] \n    [(equal?\
    \ (first message) ?A) (", "  (let ((letters '(#\\a #\\b #\\c #\\d #\\e #\\f #\\\
    g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\\
    x #\\y #\\z))\n        (vowels '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I\
    \ #\\J #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\V #\\W #\\X #\\Y #\\\
    Z)))\n    (cond\n      [(empty? message) \"\"]\n      [(char-alphabetic? message)\
    \ (char-alphabetic? (char-lower-case? message))]\n      [(char-alphabetic? (char-upper-case?\
    \ message)) (cons (char-upper-case? (char-lower-case? message)) (encode (char-lower-case?\
    \ message)))]\n      [else (cons (char-upper-case? (char-lower-case? (char-upper-case?\
    \ message))) (encode (char-lower-case? (char-upper-case? message))))]))\n", " \
    \ (cond\n    [(empty? message) \"\"]\n    [(equal? (first message) ?a) (encode-a\
    \ message)]\n    [(equal? (first message) ?e) (encode-e message)]\n    [(equal?\
    \ (first message) ?i) (encode-i message)]\n    [(equal? (first message) ?o) (encode-o\
    \ message)]\n    [(equal? (first message) ?u) (encode-u message)]\n    [else (encode-others\
    \ message)]))\n", "  (let ((vowels '(a e i o u)))\n    (cond\n      [(empty? message)\
    \ \"\"]\n      [(member (first message) vowels) (cons (first message) (encode\
    \ (substring message 1 (- (length message) 1)))) ]\n      [else (cons (first message)\
    \ (encode (substring message 1 (- (length message) 1)))) ]\n      )))\n", "  (let\
    \ ((vowels '(a e i o u)))\n    (cond\n      [(empty? message) message]\n     \
    \ [(member (first message) vowels) (second message)]\n      [else (cons (first\
    \ message)\n                   (map (lambda (vowel) (if (equal? (first message)\
    \ vowel)\n                                         (second message)\n        \
    \                                 (first message)))\n                        \
    \ vowels))])))\n", "  (cond\n    [(empty? message) \"\"]\n    [(equal? (first\
    \ message) ?a) (encode (substring message 1 2))]\n    [(equal? (first message)\
    \ ?e) (encode (substring message 1 3))]\n    [(equal? (first message) ?i) (encode\
    \ (substring message 1 4))]\n    [(equal? (first message) ?o) (encode (substring\
    \ message 1 5))]\n    [(equal? (first message) ?u) (encode (substring message\
    \ 1 6))]\n    [else (cons (first message)\n              (encode (substring message\
    \ 2))])]))\n", "  (cond\n    [(empty? message) \"\"]\n    [(equal? (first message)\
    \ ?a) (encode (substring message 1 2))]\n    [(equal? (first message) ?e) (encode\
    \ (substring message 1 3))]\n    [(equal? (first message) ?i) (encode (substring\
    \ message 1 4))]\n    [(equal? (first message) ?o) (encode (substring message\
    \ 1 5))]\n    [(equal? (first message) ?u) (encode (substring message 1 6))]\n\
    \    [else (cons (first message)\n              (encode (substring message 2))))]))\n",
  "  (let ([vowels '(a e i o u)])\n    (cond\n      [(empty? message) \"\"]\n    \
    \  [(member (first message) vowels) (first message)]\n      [else (cons (first\
    \ message)\n                   (encode (substring message 1 (- (length message)\
    \ 1)))]))))\n", "  (define (helper message vowels)\n    (cond\n      [(empty?\
    \ message) message]\n      [(member (car message) vowels) (helper (cdr message)\
    \ (cons (car message) vowels))]\n      [else (helper (cdr message) (cons (car\
    \ message) vowels))]))\n  (helper (reverse message) '(a e i o u)))\n", "  (let\
    \ ((letters '(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\\
    m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z))\n        (vowels\
    \ '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J #\\K #\\L #\\M #\\N #\\\
    O #\\P #\\Q #\\R #\\S #\\T #\\V #\\W #\\X #\\Y #\\Z)))\n    (cond\n      [(empty?\
    \ message) \"\"]\n      [(char-alphabet (first message)) (cons (first message)\
    \ (encode (rest message)))]\n      [else (cons (first message)\n             \
    \      (map (lambda (letter)\n                           (cond\n             \
    \                [(char-alphabet letter) (cons (first letter) (encode (rest message)))]\n\
    \                             [else (cons (first letter)\n                   \
    \                      (map (lambda (vowel)\n                                \
    \                 (cond\n                                                   [(char-alphabet\
    \ vowel) (cons (first vowel) (encode (rest message)))]\n                     \
    \                              [else (cons (first vowel)\n                   \
    \                                          (map (lambda (vowel)\n            \
    \                                                         (cond\n            \
    \                                                         [(char-alphabet vowel)\
    \ (cons (first vowel) (encode (rest message)))]\n                            \
    \                                         [else (cons (first vowel)\n        \
    \                                                                    (map (lambda\
    \ (vowel)\n                                                                  \
    \                   (cond\n                                                  \
    \                                     [(char-alphabet vowel) (cons (first vowel)\
    \ (encode (rest message)))]\n                                                \
    \                                       [else (cons (first vowel)\n          \
    \                                                                            \
    \        (map (lambda (vowel)\n                                              \
    \                                                       (cond\n              \
    \                                                                            \
    \           [(char-alphabet vowel) (cons (first vowel) (encode (rest message)))]\n\
    \                                                                            \
    \                         [else (cons (first vowel)\n                        \
    \                                                                      (map (lambda\
    \ (vowel)\n                                                                  \
    \                                   (cond\n                                  \
    \                                                                   [(char-alphabet\
    \ vowel) (cons (first vowel) (encode (rest message)))]\n                     \
    \                                                                            \
    \    [else (cons (first vowel)\n                                             \
    \                                                 (map (lambda (vowel)\n     \
    \                                                                            \
    \                    (cond\n                                                 \
    \                                                    [(char-alphabet vowel) (cons\
    \ (first vowel) (encode (rest message)))", "  (let ((vowels '(a e i o u)))\n \
    \   (cond\n      [(empty? message) message]\n      [(member (first message) vowels)\
    \ (second message)]\n      [else (cons (first message)\n                  (encode\
    \ (substring message 1 (- (length message) 1)))]))))\n", "  (define (helper message\
    \ vowels)\n    (cond\n      [(empty? message) \"\"]\n      [(equal? (first message)\
    \ vowels) (second message)]\n      [(equal? (first message) (second message))\
    \ (third message)]\n      [(equal? (first message) (third message)) (fourth message)]\n\
    \      [(equal? (first message) (fourth message)) (fifth message)]\n      [(equal?\
    \ (first message) (fifth message)) (sixth message)]\n      [(equal? (first message)\
    \ (sixth message)) (seventh message)]\n      [(equal? (first message) (seventh\
    \ message)) (first message)]\n      [else (helper (rest message) (conj vowels\
    \ (first message)))]))\n  (helper message '()))\n", "  (let ((vowels '(a e i o\
    \ u)))\n    (cond\n      [(empty? message) \"\"]\n      [(member (first message)\
    \ vowels) (cons (first message) (encode (substring message 1 (- (length message)\
    \ 1)))) ]\n      [(member (first message) vowels) (cons (first message) (encode\
    \ (substring message 1 (- (length message) 1)))) ]\n      [(member (first message)\
    \ vowels) (cons (first message) (encode (substring message 1 (- (length message)\
    \ 1)))) ]\n      [(member (first message) vowels) (cons (first message) (encode\
    \ (substring message 1 (- (length message) 1)))) ]\n      [(member (first message)\
    \ vowels) (cons (first message) (encode (substring message 1 (- (length message)\
    \ 1)))) ]\n      [(member (first message) vowels) (cons (first message) (encode\
    \ (substring message 1 (- (length message) 1)))) ]\n      [(member (first message)\
    \ vowels) (cons (first message) (encode (substring message 1 (- (length message)\
    \ 1)))) ]\n      [(member (first message) vowels) (cons (first message) (encode\
    \ (substring message 1 (- (length message) 1)))) ]\n      [(member (first message)\
    \ vowels) (cons (first message) (encode (substring message 1 (- (length message)\
    \ 1)))) ]\n      [(member (first message) vowels) (cons (first message) (encode\
    \ (substring message 1 (- (length message) 1)))) ]\n      [(member (first message)\
    \ vowels) (cons (first message) (encode (substring message 1 (- (length message)\
    \ 1)))) ]\n      [(member (first message) vowels) (cons (first message) (encode\
    \ (substring message 1 (- (length message) 1)))) ]\n      [(member (first message)\
    \ vowels) (cons (first message) (encode (substring message 1 (- (length message)\
    \ 1)))) ]\n      [(member (first message) vowels) (cons (first message) (encode\
    \ (substring message 1 (- (length message) 1)))) ]\n      [(member (first message)\
    \ vowels) (cons (first message) (encode (substring message 1 (- (length message)\
    \ 1)))) ]\n      [(member (first message) vowels) (cons (first message) (encode\
    \ (substring message 1 (- (length message) 1)))) ]\n      [(member (first message)\
    \ vowels) (cons (first message) (encode (substring message 1 (- (length ", " \
    \ (let ((vowels '(a e i o u)))\n    (cond ((null? message) '())\n          ((member\
    \ (char-ref message 0) vowels) (substring message 0 1))\n          ((member (char-ref\
    \ message 0) '(a e i o u)) (substring message 0 2))\n          (else (cons (char-ref\
    \ message 0) (encode (substring message 1 )))))))\n", "  (define (helper message\
    \ i j)\n    (cond\n      [(char=? (char-code message) 97) (char-code (substring\
    \ message i (+ i 1)))]\n      [(char=? (char-code message) 65) (char-code (substring\
    \ message i (+ i 1)))]\n      [(char=? (char-code message) 97) (char-code (substring\
    \ message (+ i 1) (+ i 1)))]\n      [(char=? (char-code message) 65) (char-code\
    \ (substring message (+ i 1) (+ i 1)))]\n      [(char=? (char-code message) 65)\
    \ (char-code (substring message (+ j 1) (+ j 1)))]\n      [(char=? (char-code\
    \ message) 97) (char-code (substring message (+ j 1) (+ j 1)))]\n      [(char=?\
    \ (char-code message) 65) (char-code (substring message (+ j 1) (+ j 1)))]\n \
    \     [(char=? (char-code message) 65) (char-code (substring message (+ i 1) (+\
    \ i 1)))]\n      [(char=? (char-code message) 97) (char-code (substring message\
    \ (+ i 1) (+ i 1)))]\n      [(char=? (char-code message) 65) (char-code (substring\
    \ message (+ i 1) (+ i 1)))]\n      [(char=? (char-code message) 65) (char-code\
    \ (substring message (+ j 1) (+ j 1)))]\n      [(char=? (char-code message) 97)\
    \ (char-code (substring message (+ j 1) (+ j 1)))]\n      [(char=? (char-code\
    \ message) 65) (char-code (substring message (+ j 1) (+ j 1)))]\n      [(char=?\
    \ (char-code message) 65) (char-code (substring message (+ i 1) (+ i 1)))]\n \
    \     [(char=? (char-code message) 97) (char-code (substring message (+ i 1) (+\
    \ i 1)))]\n      [(char=? (char-code message) 65) (char-code (substring message\
    \ (+ i 1) (+ i 1)))]\n      [(char=? (char-code message) 65) (char-code (substring\
    \ message (+ j 1) (+ j 1)))]\n      [(char=? (char-code message) 97) (char-code\
    \ (", "  (cond\n    [(empty? message) \"\"]\n    [(equal? (first message) ?a)\
    \ (encode-a message)]\n    [(equal? (first message) ?e) (encode-e message)]\n\
    \    [(equal? (first message) ?i) (encode-i message)]\n    [(equal? (first message)\
    \ ?o) (encode-o message)]\n    [(equal? (first message) ?u) (encode-u message)]\n\
    \    [else (encode-others message)]))\n", "  (let ((vowels '(a e i o u)))\n  \
    \  (cond\n      [(empty? message) \"\"]\n      [(member (first message) vowels)\
    \ (cons (first message) (encode (substring message 1 (length message))))]\n  \
    \    [else (cons (first message) (encode (substring message 1 (length message))))])))\n",
  "  (define (swap-case letter)\n    (if (char-alphabetic? letter)\n        (char-upper-case?\
    \ letter)\n        (char-lower-case? letter)))\n  (define (replace-vowels letter)\n\
    \    (if (char-vowel? letter)\n        (char-upper-case? letter)\n        (char-lower-case?\
    \ letter)))\n  (define (replace-vowels-2 letter)\n    (if (char-vowel? letter)\n\
    \        (char-upper-case? letter)\n        (char-lower-case? letter)))\n  (define\
    \ (replace-vowels-3 letter)\n    (if (char-vowel? letter)\n        (char-upper-case?\
    \ letter)\n        (char-lower-case? letter)))\n  (define (replace-vowels-4 letter)\n\
    \    (if (char-vowel? letter)\n        (char-upper-case? letter)\n        (char-lower-case?\
    \ letter)))\n  (define (replace-vowels-5 letter)\n    (if (char-vowel? letter)\n\
    \        (char-upper-case? letter)\n        (char-lower-case? letter)))\n  (define\
    \ (replace-vowels-6 letter)\n    (if (char-vowel? letter)\n        (char-upper-case?\
    \ letter)\n        (char-lower-case? letter)))\n  (define (replace-vowels-7 letter)\n\
    \    (if (char-vowel? letter)\n        (char-upper-case? letter)\n        (char-lower-case?\
    \ letter)))\n  (define (replace-vowels-8 letter)\n    (if (char-vowel? letter)\n\
    \        (char-upper-case? letter)\n        (char-lower-case? letter)))\n  (define\
    \ (replace-vowels-9 letter)\n    (if (char-vowel? letter)\n        (char-upper-case?\
    \ letter)\n        (char-lower-case? letter)))\n  (define (replace-vowels-10 letter)\n\
    \    (if (char-vowel? letter)\n        (char-upper-case? letter)\n        (char-lower-case?\
    \ letter)))\n  (define (replace-vowels-11 letter)\n    (if (char-vowel? letter)\n\
    \        (char-upper-case? letter)\n        (char-lower-case? letter)))\n  (define\
    \ (replace-vowels-12 letter)\n    (if (char-vowel? letter)\n        (char-upper-case?\
    \ letter)\n        (char", "  (cond\n    [(empty? message) \"\"]\n    [(equal?\
    \ (first message) ?a) (encode-a message)]\n    [(equal? (first message) ?e) (encode-e\
    \ message)]\n    [(equal? (first message) ?i) (encode-i message)]\n    [(equal?\
    \ (first message) ?o) (encode-o message)]\n    [(equal? (first message) ?u) (encode-u\
    \ message)]\n    [else (encode-others message)]))\n", "  (define (helper i j)\n\
    \    (cond\n      [(char=? (char-ref message i) (char-ref message j)) (char-ref\
    \ message j)]\n      [(char=? (char-ref message i) 'a) (char-ref message (+ i\
    \ 2))]\n      [(char=? (char-ref message i) 'e) (char-ref message (+ i 2))]\n\
    \      [(char=? (char-ref message i) 'i) (char-ref message (+ i 2))]\n      [(char=?\
    \ (char-ref message i) 'o) (char-ref message (+ i 2))]\n      [(char=? (char-ref\
    \ message i) 'u) (char-ref message (+ i 2))]\n      [else (char-ref message (+\
    \ i 2))]))\n  (define (helper-helper i j)\n    (cond\n      [(char=? (char-ref\
    \ message i) (char-ref message j)) (char-ref message j)]\n      [(char=? (char-ref\
    \ message i) 'a) (char-ref message (+ i 2))]\n      [(char=? (char-ref message\
    \ i) 'e) (char-ref message (+ i 2))]\n      [(char=? (char-ref message i) 'i)\
    \ (char-ref message (+ i 2))]\n      [(char=? (char-ref message i) 'o) (char-ref\
    \ message (+ i 2))]\n      [(char=? (char-ref message i) 'u) (char-ref message\
    \ (+ i 2))]\n      [else (char-ref message (+ i 2))]))\n  (define (helper-helper-helper\
    \ i j)\n    (cond\n      [(char=? (char-ref message i) (char-ref message j)) (char-ref\
    \ message j)]\n      [(char=? (char-ref message i) 'a) (char-ref message (+ i\
    \ 2))]\n      [(char=? (char-ref message i) 'e) (char-ref message (+ i 2))]\n\
    \      [(char=? (char-ref message i) 'i) (char-ref message (+ i 2))]\n      [(char=?\
    \ (char-ref message i) 'o) (char-ref message (+ i 2))]\n      [(char=? (char-ref\
    \ message i) 'u) (char-ref message (+ i 2))]\n      [else (char-ref message (+\
    \ i 2))]))\n  (define (helper-helper-helper-helper i j)\n    (cond\n      [(char=?\
    \ (char-ref message i) ", "  (let ((vowels '(a e i o u)))\n    (cond\n      [(empty?\
    \ message) \"\"]\n      [(member (first message) vowels) (first message)]\n  \
    \    [else (cons (first message)\n                   (encode (substring message\
    \ 1 \n                                  (length (first message)))))])))\n", " \
    \ (cond\n    [(empty? message) \"\"]\n    [(equal? (first message) ?a) (encode-a\
    \ message)]\n    [(equal? (first message) ?e) (encode-e message)]\n    [(equal?\
    \ (first message) ?i) (encode-i message)]\n    [(equal? (first message) ?o) (encode-o\
    \ message)]\n    [(equal? (first message) ?u) (encode-u message)]\n    [else (encode-other\
    \ (first message))]))\n", "  (define (helper message i j)\n    (cond [(null? message)\
    \ \"\"]\n          [(char=? (car message) (car alphabet)) (helper (cdr message)\
    \ i (+ i j))\n            (helper (cdr message) (+ i 1) j)]\n          [else (cons\
    \ (char=? (car message) (car alphabet)) \n                    (helper (cdr message)\
    \ (+ i 1) j))]))\n  (helper message 0 0))\n", "  (cond\n    [(empty? message)\
    \ \"\"]\n    [(equal? (first message) ?a) (cond\n                            \
    \ [(equal? (second message) ?e) (cond\n                                      \
    \                [(equal? (third message) ?i) (cond\n                        \
    \                                                       [(equal? (fourth message)\
    \ ?o) (cond\n                                                                \
    \                                        [(equal? (fifth message) ?u) (cond\n\
    \                                                                            \
    \                                                           [(equal? (sixth message)\
    \ ?A) (cond\n                                                                \
    \                                                                            \
    \                  [(equal? (seventh message) ?E) (cond\n                    \
    \                                                                            \
    \                                                                            \
    \       [(equal? (eighth message) ?I) (cond\n                                \
    \                                                                            \
    \                                                                            [(equal?\
    \ (ninth message) ?O) (cond\n                                                \
    \                                                                            \
    \                                                                            \
    \                     [(equal? (tenth message) ?U) (cond\n                   \
    \                                                                            \
    \                                                                            \
    \                                                                        [(equal?\
    \ (eleventh message) ?A) (cond\n                                             \
    \                                                                            \
    \                                                                            \
    \                                                   [(equal? (twelfth message)\
    \ ?E) (cond\n                                                                \
    \                                                                            \
    \                                                                            \
    \                                                                     [(equal?\
    \ (thirteenth message) ?I) (cond\n                                           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                    [(equal? (fourteenth message) ?O) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \        [(equal? (fifteenth message) ?U) (cond\n                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                 [(equal? (sixteenth message) ?A) (cond\n                   \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                [(equal? (seventeenth message)\
    \ ?E) (cond\n                                                                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \        [(equal? (eighteenth message) ?I) (cond\n                           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \      [(equal? (nineteenth message) ?O) (cond\n                             \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                          [(equal? (twentieth message) ?U) (cond\n          \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                  [(equal? (twenty-first message)\
    \ ?A) (cond\n                                                                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                 [(equal? (twenty-second message) ?E) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                           [(equal? (twenty-third message) ?I)\
    \ (cond\n                                                                    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                        [(equal? (twenty-fourth\
    \ message) ?O) (cond\n                                                       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                              [(equal? (twenty-fifth message) ?U) (cond\n   \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                            [(equal? (twenty-sixth message) ?A) (cond\n     \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                               [(equal? (twenty-seventh message) ?E) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \    ", "  (define (helper message index vowels)\n    (cond\n      [(empty? message)\
    \ message]\n      [(equal? (char-ref message index) vowel) (char-ref message (+\
    \ index 2))]\n      [else (helper (cdr message) (+ index 1) vowels (char-ref message\
    \ index))]))\n  (helper message 0 '(a e i o u)))\n", "  (cond\n    [(empty? message)\
    \ \"\"]\n    [(equal? (first message) ?a) (cond\n                            [(equal?\
    \ (second message) ?e) (cond\n                                               \
    \       [(equal? (third message) ?i) (cond\n                                 \
    \                                             [(equal? (fourth message) ?o) (cond\n\
    \                                                                            \
    \                            [(equal? (fifth message) ?u) (cond\n            \
    \                                                                            \
    \                                                      [(equal? (sixth message)\
    \ ?A) (cond\n                                                                \
    \                                                                            \
    \                            [(equal? (seventh message) ?E) (cond\n          \
    \                                                                            \
    \                                                                            \
    \                                            [(equal? (eighth message) ?I) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \    [(equal? (ninth message) ?O) (cond\n                                    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \      [(equal? (tenth message) ?U) (cond\n                                  \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                  [(equal? (eleventh message) ?a) (cond\n   \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                           [(equal? (twelfth message) ?e) (cond\n           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                             [(equal? (thirteenth message) ?i)\
    \ (cond\n                                                                    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                          [(equal? (fourteenth message) ?o) (cond\n         \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                   [(equal? (fifteenth message) ?u) (cond\n \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \     [(equal? (sixteenth message) ?A) (cond\n                               \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \ [(equal? (seventeenth message) ?E) (cond\n                                 \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                     [(equal? (eighteenth message) ?I) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                    [(equal? (nineteenth message) ?O) (cond\n               \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                           [(equal? (twentieth message) ?U) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \        [(equal? (twenty-first message) ?a) (cond\n                         \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                     [(equal? (thirtieth message) ?e) (cond\n               \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                         [(equal? (fourtieth\
    \ message) ?i) (cond\n                                                       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                 [(equal? (fiftieth message) ?o) (cond\n                    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                    [(equal? (sixtieth message)\
    \ ?A) (cond\n                                                                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \        [(equal? (seventieth message) ?E) (", "  (cond\n    [(empty? message)\
    \ \"\"]\n    [(equal? (first message) ?a) (encode (substring message 1 2))]\n\
    \    [(equal? (first message) ?e) (encode (substring message 1 2))]\n    [(equal?\
    \ (first message) ?i) (encode (substring message 1 2))]\n    [(equal? (first message)\
    \ ?o) (encode (substring message 1 2))]\n    [(equal? (first message) ?u) (encode\
    \ (substring message 1 2))]\n    [else (cons (first message)\n               \
    \ (encode (substring message 2)))]))\n", "  (let ((vowels '(a e i o u)))\n   \
    \ (cond\n      [(empty? message) empty]\n      [(member (first message) vowels)\
    \ (cons (first message) (encode (substring message 1 (- (length message) 1))))\
    \ ]\n      [else (cons (first message) (encode (substring message 1 (- (length\
    \ message) 1)))) ])))\n", "  (let ((letters '(a b c d e f g h i j k l m n o p\
    \ q r s t u v w x y z)))\n    (define (swap-case letter)\n      (let ((letter\
    \ (assoc letter letters)))\n        (cond ((null? letter) 'z)\n              ((null?\
    \ (cdr letter)) (assoc letter letters))\n              (else (assoc letter (cdr\
    \ letter)))))\n    (define (replace-vowel vowel)\n      (let ((vowel (assoc vowel\
    \ vowels)))\n        (cond ((null? vowel) 'z)\n              ((null? (cdr vowel))\
    \ (assoc vowel vowels))\n              (else (assoc vowel (cdr vowel)))))\n  \
    \  (define (replace-vowels letter)\n      (let ((letter (assoc letter letters)))\n\
    \        (cond ((null? letter) 'z)\n              ((null? (cdr letter)) (assoc\
    \ letter letters))\n              (else (assoc letter (replace-vowels (cdr letter)))))\n\
    \    (define (replace-vowels-2 letter)\n      (let ((letter (assoc letter letters)))\n\
    \        (cond ((null? letter) 'z)\n              ((null? (cdr letter)) (assoc\
    \ letter letters))\n              (else (assoc letter (replace-vowels-2 (cdr letter)))))\n\
    \    (define (replace-vowels-3 letter)\n      (let ((letter (assoc letter letters)))\n\
    \        (cond ((null? letter) 'z)\n              ((null? (cdr letter)) (assoc\
    \ letter letters))\n              (else (assoc letter (replace-vowels-3 (cdr letter)))))\n\
    \    (define (replace-vowels-4 letter)\n      (let ((letter (assoc letter letters)))\n\
    \        (cond ((null? letter) 'z)\n              ((null? (cdr letter)) (assoc\
    \ letter letters))\n              (else (assoc letter (replace-vowels-4 (cdr letter)))))\n\
    \    (define (replace-vowels-5 letter)\n      (let ((letter (assoc letter letters)))\n\
    \        (cond ((null? letter) 'z)\n              ((null? (cdr letter)) (assoc\
    \ letter letters))\n              (else (assoc letter (replace-vowels-5 (cdr letter)))))\n\
    \    (define (replace-vowels-6 letter)\n      (let ((letter (assoc letter letter",
  "  (let ((vowels '(a e i o u)))\n    (cond\n      [(empty? message) empty]\n   \
    \   [(member (first message) vowels) (cons (first message) (encode (substring\
    \ message 1 (- (length message) 1))))]\n      [else (cons (first message) (encode\
    \ (substring message 1 (- (length message) 1)))\n                (cons (first\
    \ message) (encode (substring message 1 (- (length message) 1)))))]))) \n", " \
    \ (define (vowel-position letter)\n    (cond [(char=? (char-code letter) 'a) (char-code\
    \ (char letter (+ 1 1)))]\n          [(char=? (char-code letter) 'e) (char-code\
    \ (char letter (+ 1 2)))]\n          [(char=? (char-code letter) 'i) (char-code\
    \ (char letter (+ 1 3)))]\n          [(char=? (char-code letter) 'o) (char-code\
    \ (char letter (+ 1 4)))]\n          [(char=? (char-code letter) 'u) (char-code\
    \ (char letter (+ 1 5)))]\n          [else (error \"Invalid letter: ~a\" letter)]))\n\
    \  (define (swap-case letter)\n    (cond [(char=? (char-code letter) 'A) (char-code\
    \ (char letter (+ 1 0)))]\n          [(char=? (char-code letter) 'a) (char-code\
    \ (char letter (+ 1 1)))]\n          [(char=? (char-code letter) 'E) (char-code\
    \ (char letter (+ 1 2)))]\n          [(char=? (char-code letter) 'e) (char-code\
    \ (char letter (+ 1 3)))]\n          [(char=? (char-code letter) 'I) (char-code\
    \ (char letter (+ 1 4)))]\n          [(char=? (char-code letter) 'i) (char-code\
    \ (char letter (+ 1 5)))]\n          [(char=? (char-code letter) 'O) (char-code\
    \ (char letter (+ 1 6)))]\n          [(char=? (char-code letter) 'o) (char-code\
    \ (char letter (+ 1 7)))]\n          [(char=? (char-code letter) 'U) (char-code\
    \ (char letter (+ 1 8)))]\n          [(char=? (char-code letter) 'u) (char-code\
    \ (char letter (+ 1 9)))]\n          [else (error \"Invalid letter: ~a\" letter)]))\n\
    \  (define (swap-vowels letter)\n    (cond [(char=? (char-code letter) 'a) (char-code\
    \ (char letter (+ 1 0)))]\n          [(char=? (char-code letter) 'A) (char-code\
    \ (char letter (+ 1 0)))]\n          [(char=? (char-code letter) ", "  (cond\n\
    \    [(empty? message) \"\"]\n    [(equal? (first message) ?a) (encode (substring\
    \ message 1 2))]\n    [(equal? (first message) ?e) (encode (substring message\
    \ 1 2))]\n    [(equal? (first message) ?i) (encode (substring message 1 2))]\n\
    \    [(equal? (first message) ?o) (encode (substring message 1 2))]\n    [(equal?\
    \ (first message) ?u) (encode (substring message 1 2))]\n    [(equal? (first message)\
    \ ?A) (encode (substring message 1 2))]\n    [(equal? (first message) ?E) (encode\
    \ (substring message 1 2))]\n    [(equal? (first message) ?I) (encode (substring\
    \ message 1 2))]\n    [(equal? (first message) ?O) (encode (substring message\
    \ 1 2))]\n    [(equal? (first message) ?U) (encode (substring message 1 2))]\n\
    \    [else (cons (first message)\n              (encode (substring message 2 length)))]))\n",
  "  (cond\n    [(empty? message) \"\"]\n    [(equal? (first message) ?a) (encode-a\
    \ message)]\n    [(equal? (first message) ?e) (encode-e message)]\n    [(equal?\
    \ (first message) ?i) (encode-i message)]\n    [(equal? (first message) ?o) (encode-o\
    \ message)]\n    [(equal? (first message) ?u) (encode-u message)]\n    [else (encode-others\
    \ message)]))\n", "  (define (helper message vowel)\n    (cond\n      [(empty?\
    \ message) message]\n      [(equal? vowel (first message)) (second message)]\n\
    \      [else (helper (rest message) (cons vowel (first message)))]))\n  (helper\
    \ message 'a))\n", "  (let ((vowels '(a e i o u)))\n    (cond\n      [(empty?\
    \ message) \"\"]\n      [(member (first message) vowels) (cons (first message)\
    \ (encode (substring (second message) 0 (- (length message) 1)))) ]\n      [(member\
    \ (first message) vowels) (cons (first message) (encode (substring (second message)\
    \ 1 (- (length message) 1)))) ]\n      [(member (first message) vowels) (cons\
    \ (first message) (encode (substring (second message) 2 (- (length message) 1))))\
    \ ]\n      [(member (first message) vowels) (cons (first message) (encode (substring\
    \ (second message) 3 (- (length message) 1)))) ]\n      [(member (first message)\
    \ vowels) (cons (first message) (encode (substring (second message) 4 (- (length\
    \ message) 1)))) ]\n      [(member (first message) vowels) (cons (first message)\
    \ (encode (substring (second message) 5 (- (length message) 1)))) ]\n      [(member\
    \ (first message) vowels) (cons (first message) (encode (substring (second message)\
    \ 6 (- (length message) 1)))) ]\n      [(member (first message) vowels) (cons\
    \ (first message) (encode (substring (second message) 7 (- (length message) 1))))\
    \ ]\n      [(member (first message) vowels) (cons (first message) (encode (substring\
    \ (second message) 8 (- (length message) 1)))) ]\n      [(member (first message)\
    \ vowels) (cons (first message) (encode (substring (second message) 9 (- (length\
    \ message) 1)))) ]\n      [(member (first message) vowels) (cons (first message)\
    \ (encode (substring (second message) 10 (- (length message) 1)))) ]\n      [(member\
    \ (first message) vowels) (cons (first message) (encode (substring (second message)\
    \ 11 (- (length message) 1)))) ]\n      [(member (first message) vowels) (cons\
    \ (first message) (encode (substring (second message) 12 (- (length message) 1))))\
    \ ]\n      [(member (first message) vowels) (cons (first message) (encode (substring\
    \ (second message) 13 (- (length message) 1)))) ]\n      [(member (first message)\
    \ vowels) (cons (first message) (encode (substring (second message) 14 (- (length\
    \ message) 1)))) ]\n      [(member (first message) vowels) (con", "  (let ((vowels\
    \ '(a e i o u)))\n    (cond ((null? message) \"\")\n          ((member (char-ref\
    \ message 0) vowels) \n           (char-ref message 0))\n          (else (let\
    \ ((vowel (char-ref message 0)))\n                   (cond ((null? (char-ref message\
    \ 1))\n                           (char-append vowel vowel))\n               \
    \          ((member (char-ref message 1) vowels)\n                           (char-append\
    \ vowel (char-ref message 1)))\n                         (else (let ((vowel1 (char-ref\
    \ message 1)))\n                                   (cond ((null? (char-ref message\
    \ 2))\n                                           (char-append vowel vowel1))\n\
    \                                         ((member (char-ref message 2) vowels)\n\
    \                                           (char-append vowel1 (char-ref message\
    \ 2)))\n                                         (else (let ((vowel2 (char-ref\
    \ message 2)))\n                                                   (cond ((null?\
    \ (char-ref message 3))\n                                                    \
    \       (char-append vowel vowel2))\n                                        \
    \                 ((member (char-ref message 3) vowels)\n                    \
    \                                       (char-append vowel1 (char-ref message\
    \ 3)))\n                                                         (else (let ((vowel3\
    \ (char-ref message 3)))\n                                                   \
    \                (cond ((null? (char-ref message 4))\n                       \
    \                                                     (char-append vowel vowel3))\n\
    \                                                                         ((member\
    \ (char-ref message 4) vowels)\n                                             \
    \                            (char-append vowel1 (char-ref message 4)))\n    \
    \                                                                     (else (let\
    \ ((vowel4 (char-ref message 4)))\n                                          \
    \                                         (cond ((null? (char-ref message 5))\n\
    \                                                                            \
    \               (char-append vowel vowel4))\n                                \
    \                                                         ((member (char-ref message\
    \ 5) vowels)\n                                                               \
    \                          (char-append vowel1 (char-ref message 5)))\n      \
    \                                                                            \
    \       (else (let ((vowel5 (char-ref message 5)))\n                         \
    \                                                                          (cond\
    \ ((null? (char-ref message 6))\n                                            \
    \                                                             (char-append vowel\
    \ vowel5))\n                                                                 \
    \                                      ((member (char-ref message 6) vowels)\n\
    \                                                                            \
    \                             (char-append vowel1 (char-ref message 6)))\n   \
    \                                                                            \
    \                        (else (let ((vowel6 (char-ref message 6)))\n        \
    \                                                                            \
    \                         (cond ((null? (char-ref message 7))\n              \
    \                                                                            \
    \                         (char-append vowel vowel6))\n                      \
    \                                                                            \
    \               ((member (char-ref message 7) vowels)\n                      \
    \                                                                            \
    \               (char-append vowel1 (char-ref message 7)))\n                 \
    \                                               ", "  (cond\n    [(empty? message)\
    \ \"\"]\n    [(equal? (first message) ?a) (encode (substring message 1 2))]\n\
    \    [(equal? (first message) ?e) (encode (substring message 1 3))]\n    [(equal?\
    \ (first message) ?i) (encode (substring message 1 4))]\n    [(equal? (first message)\
    \ ?o) (encode (substring message 1 5))]\n    [(equal? (first message) ?u) (encode\
    \ (substring message 1 6))]\n    [(equal? (first message) ?A) (encode (substring\
    \ message 1 7))]\n    [(equal? (first message) ?E) (encode (substring message\
    \ 1 8))]\n    [(equal? (first message) ?I) (encode (substring message 1 9))]\n\
    \    [(equal? (first message) ?O) (encode (substring message 1 10))]\n    [(equal?\
    \ (first message) ?U) (encode (substring message 1 11))]\n    [(equal? (first\
    \ message) ?a) (encode (substring message 1 12))]\n    [(equal? (first message)\
    \ ?e) (encode (substring message 1 13))]\n    [(equal? (first message) ?i) (encode\
    \ (substring message 1 14))]\n    [(equal? (first message) ?o) (encode (substring\
    \ message 1 15))]\n    [(equal? (first message) ?u) (encode (substring message\
    \ 1 16))]\n    [(equal? (first message) ?A) (encode (substring message 1 17))]\n\
    \    [(equal? (first message) ?E) (encode (substring message 1 18))]\n    [(equal?\
    \ (first message) ?I) (encode (substring message 1 19))]\n    [(equal? (first\
    \ message) ?O) (encode (substring message 1 20))]\n    [(equal? (first message)\
    \ ?U) (encode (substring message 1 21))]\n    [else (cons (first message)\n  \
    \             (encode (substring message 2 length)))]))\n", "  (let ([vowels '(a\
    \ e i o u)])\n    (cond\n      [(empty? message) \"\"]\n      [(char-alphabet\
    \ (first message)) (cons (first message) (encode (substring message 1 (char-alphabet\
    \ (first message))))]\n      [else (cons (first message)\n                  (encode\n\
    \                   (substring message 1 (char-alphabet (first message))))\n \
    \                 (encode\n                   (substring message (char-alphabet\
    \ (first message)) (length message)))\n                  (encode\n           \
    \        (substring message (char-alphabet (first message)) (length message)))\n\
    \                  (encode\n                   (substring message (char-alphabet\
    \ (first message)) (length message)))\n                  (encode\n           \
    \        (substring message (char-alphabet (first message)) (length message)))\n\
    \                  (encode\n                   (substring message (char-alphabet\
    \ (first message)) (length message)))\n                  (encode\n           \
    \        (substring message (char-alphabet (first message)) (length message)))\n\
    \                  (encode\n                   (substring message (char-alphabet\
    \ (first message)) (length message)))\n                  (encode\n           \
    \        (substring message (char-alphabet (first message)) (length message)))\n\
    \                  (encode\n                   (substring message (char-alphabet\
    \ (first message)) (length message)))\n                  (encode\n           \
    \        (substring message (char-alphabet (first message)) (length message)))\n\
    \                  (encode\n                   (substring message (char-alphabet\
    \ (first message)) (length message)))\n                  (encode\n           \
    \        (substring message (char-alphabet (first message)) (length message)))\n\
    \                  (encode\n                   (substring message (char-alphabet\
    \ (first message)) (length message)))\n                  (encode\n           \
    \        (substring message (char-alphabet (first message)) (length message)))\n\
    \                  (encode\n                   (substring message (char-alphabet\
    \ (first message)) (length message)))\n                  (encode\n           \
    \        (substring message (char-alphabet (first message)) (length message)))\n\
    \                  (encode\n                   (substring message (char-alphabet\
    \ (first message)) (length message)))\n                  (encode\n           \
    \        (substring message (char-alphabet (first message)) (length message)))\n\
    \                  (encode\n                   (substring message (char-alphabet\
    \ (first message)) (length message)))\n                  (encode\n           \
    \        (substring message (char", "  (define (swap-case letter)\n    (cond [(char=?\
    \ (char-upcase letter) 'A) (char-lowercase letter)]\n          [(char=? (char-upcase\
    \ letter) 'a) (char-lowercase letter)]\n          [else letter]))\n  (define (replace-vowel\
    \ letter)\n    (cond [(char=? (char-upcase letter) 'A) (char-uppercase letter)]\n\
    \          [(char=? (char-upcase letter) 'a) (char-uppercase letter)]\n      \
    \    [else letter]))\n  (define (replace-vowels letter)\n    (cond [(char=? (char-upcase\
    \ letter) 'A) (char-uppercase letter)]\n          [(char=? (char-upcase letter)\
    \ 'a) (char-uppercase letter)]\n          [else letter]))\n  (define (replace-vowels-2\
    \ letter)\n    (cond [(char=? (char-upcase letter) 'A) (char-uppercase letter)]\n\
    \          [(char=? (char-upcase letter) 'a) (char-uppercase letter)]\n      \
    \    [else letter]))\n  (define (replace-vowels-3 letter)\n    (cond [(char=?\
    \ (char-upcase letter) 'A) (char-uppercase letter)]\n          [(char=? (char-upcase\
    \ letter) 'a) (char-uppercase letter)]\n          [(char=? (char-upcase letter)\
    \ 'O) (char-uppercase letter)]\n          [(char=? (char-upcase letter) 'o) (char-uppercase\
    \ letter)]\n          [else letter]))\n  (define (replace-vowels-4 letter)\n \
    \   (cond [(char=? (char-upcase letter) 'A) (char-uppercase letter)]\n       \
    \   [(char=? (char-upcase letter) 'a) (char-uppercase letter)]\n          [(char=?\
    \ (char-upcase letter) 'O) (char-uppercase letter)]\n          [(char=? (char-upcase\
    \ letter) 'o) (char-uppercase letter)]\n          [(char=? (char-upcase letter)\
    \ 'U) (char-uppercase letter)]\n          [(char=? (char-upcase letter) 'u) (char-uppercase\
    \ letter)]\n          [else letter]))\n  (define (replace-vowels-5 letter)\n \
    \   (cond [(char=? (char-upcase letter) 'A) (char-uppercase letter)]\n       \
    \   [(char=? (char-upcase letter", "  (cond\n    [(empty? message) \"\"]\n   \
    \ [(equal? (first message) ?a) (encode (substring message 1 2))]\n    [(equal?\
    \ (first message) ?e) (encode (substring message 1 3))]\n    [(equal? (first message)\
    \ ?i) (encode (substring message 1 4))]\n    [(equal? (first message) ?o) (encode\
    \ (substring message 1 5))]\n    [(equal? (first message) ?u) (encode (substring\
    \ message 1 6))]\n    [(equal? (first message) ?A) (encode (substring message\
    \ 1 7))] \n    [(equal? (first message) ?E) (encode (substring message 1 8))]\
    \ \n    [(equal? (first message) ?I) (encode (substring message 1 9))] \n    [(equal?\
    \ (first message) ?O) (encode (substring message 1 10))] \n    [(equal? (first\
    \ message) ?U) (encode (substring message 1 11))] \n    [(equal? (first message)\
    \ ?a) (encode (substring message 1 12))] \n    [(equal? (first message) ?e) (encode\
    \ (substring message 1 13))] \n    [(equal? (first message) ?i) (encode (substring\
    \ message 1 14))] \n    [(equal? (first message) ?o) (encode (substring message\
    \ 1 15))] \n    [(equal? (first message) ?u) (encode (substring message 1 16))]\
    \ \n    [(equal? (first message) ?A) (encode (substring message 1 17))] \n   \
    \ [(equal? (first message) ?E) (encode (substring message 1 18))] \n    [(equal?\
    \ (first message) ?I) (encode (substring message 1 19))] \n    [(equal? (first\
    \ message) ?O) (encode (substring message 1 20))] \n    [(equal? (first message)\
    \ ?U) (encode (substring message 1 21))] \n    [(equal? (first message) ?a) (encode\
    \ (substring message 1 22))] \n    [(equal? (first message) ?e) (encode (substring\
    \ message 1 23))] \n    [(equal? (first message) ?i) (encode (substring message\
    \ 1 24))] \n    [(equal? (first message) ?o) (encode (substring message 1 25))]\
    \ \n    [(equal? (first message) ?u) (encode (substring message 1 26))] \n   \
    \ [(equal? (first message) ?A) (", "  (cond\n    [(empty? message) \"\"]\n   \
    \ [(equal? (first message) ?a) (encode (substring message 1 2))]\n    [(equal?\
    \ (first message) ?e) (encode (substring message 1 3))]\n    [(equal? (first message)\
    \ ?i) (encode (substring message 1 4))]\n    [(equal? (first message) ?o) (encode\
    \ (substring message 1 5))]\n    [(equal? (first message) ?u) (encode (substring\
    \ message 1 6))]\n    [(equal? (first message) ?A) (encode (substring message\
    \ 1 7))] \n    [(equal? (first message) ?E) (encode (substring message 1 8))]\
    \ \n    [(equal? (first message) ?I) (encode (substring message 1 9))] \n    [(equal?\
    \ (first message) ?O) (encode (substring message 1 10))] \n    [(equal? (first\
    \ message) ?U) (encode (substring message 1 11))] \n    [(equal? (first message)\
    \ ?a) (encode (substring message 1 12))]\n    [(equal? (first message) ?e) (encode\
    \ (substring message 1 13))]\n    [(equal? (first message) ?i) (encode (substring\
    \ message 1 14))]\n    [(equal? (first message) ?o) (encode (substring message\
    \ 1 15))]\n    [(equal? (first message) ?u) (encode (substring message 1 16))]\n\
    \    [(equal? (first message) ?A) (encode (substring message 1 17))]\n    [(equal?\
    \ (first message) ?E) (encode (substring message 1 18))]\n    [(equal? (first\
    \ message) ?I) (encode (substring message 1 19))]\n    [(equal? (first message)\
    \ ?O) (encode (substring message 1 20))] \n    [(equal? (first message) ?U) (encode\
    \ (substring message 1 21))]\n    [(equal? (first message) ?a) (encode (substring\
    \ message 1 22))]\n    [(equal? (first message) ?e) (encode (substring message\
    \ 1 23))]\n    [(equal? (first message) ?i) (encode (substring message 1 24))]\n\
    \    [(equal? (first message) ?o) (encode (substring message 1 25))]\n    [(equal?\
    \ (first message) ?u) (encode (substring message 1 26))]\n    [(equal? (first\
    \ message) ?A) (encode (substring message 1 27))]\n    [(equal", "  (let ((vowels\
    \ '(a e i o u)))\n    (cond\n      [(empty? message) \"\"]\n      [(char-alphabet\
    \ (first message)) (cons (first message) (encode (rest message)))]\n      [else\
    \ (cons (first message) (encode (rest message)))])))\n", "  (let ((vowels '(a\
    \ e i o u)))\n    (cond ((null? message) \"\")\n          ((member (char-ref message\
    \ 0) vowels) \n           (char-ref message 0))\n          (else (let ((vowel\
    \ (char-ref message 0)))\n                   (cond ((null? (char-ref message 1))\n\
    \                           (char-append vowel (char-ref message 0)))\n      \
    \                   ((member (char-ref message 1) vowels)\n                  \
    \         (char-append vowel (char-ref message 1)))\n                        \
    \ (else (let ((vowel1 (char-ref message 1))\n                                \
    \     (vowel2 (char-ref message 2)))\n                                   (cond\
    \ ((null? (char-ref message 3))\n                                           (char-append\
    \ vowel1 (char-ref message 2)))\n                                         ((member\
    \ (char-ref message 3) vowels)\n                                           (char-append\
    \ vowel1 (char-ref message 3)))\n                                         (else\
    \ (let ((vowel1 (char-ref message 3))\n                                      \
    \               (vowel2 (char-ref message 4)))\n                             \
    \                    (cond ((null? (char-ref message 5))\n                   \
    \                                      (char-append vowel1 (char-ref message 4)))\n\
    \                                                       ((member (char-ref message\
    \ 5) vowels)\n                                                         (char-append\
    \ vowel1 (char-ref message 5)))\n                                            \
    \           (else (let ((vowel1 (char-ref message 5))\n                      \
    \                                           (vowel2 (char-ref message 6)))\n \
    \                                                            (cond ((null? (char-ref\
    \ message 7))\n                                                     (char-append\
    \ vowel1 (char-ref message 6)))\n                                            \
    \                 ((member (char-ref message 7) vowels)\n                    \
    \                                         (char-append vowel1 (char-ref message\
    \ 7)))\n                                                             (else (let\
    \ ((vowel1 (char-ref message 7))\n                                           \
    \                      (vowel2 (char-ref message 8)))\n                      \
    \                                 (cond ((null? (char-ref message 9))\n      \
    \                                                         (char-append vowel1\
    \ (char-ref message 8)))\n                                                   \
    \    ((member (char-ref message 9) vowels)\n                                 \
    \                              (char-append vowel1 (char-ref message 9)))\n  \
    \                                                     (else (let ((vowel1 (char-ref\
    \ message 9))\n                                                              \
    \   (vowel2 (char-ref message 10)))\n                                        \
    \                     (cond ((null? (char-ref message 11))\n                 \
    \                                    (char-append vowel1 (char-ref message 10)))\n\
    \                                                             ((member (char-ref\
    \ message 11) vowels)\n                                                      \
    \       (char-append vowel1 (char-ref message 11)))\n                        \
    \                                     (else (let ", "  (let ((vowels '(a e i o\
    \ u)))\n    (cond\n      [(empty? message) message]\n      [(member (first message)\
    \ vowels) (second message)]\n      [else (cons (first message)\n             \
    \     (encode (substring message 1 (- (length message) 1))))]))))\n", "  (let\
    \ ((vowels '(a e i o u)))\n    (cond\n      [(empty? message) message]\n     \
    \ [(member (first message) vowels) (cons (first message) (encode (substring (second\
    \ message) 0 (- (length message) 1)))) ]\n      [(member (first message) vowels)\
    \ (cons (first message) (encode (substring (second message) 1 (- (length message)\
    \ 1)))) ]\n      [(member (first message) vowels) (cons (first message) (encode\
    \ (substring (second message) 2 (- (length message) 1)))) ]\n      [(member (first\
    \ message) vowels) (cons (first message) (encode (substring (second message) 3\
    \ (- (length message) 1)))) ]\n      [(member (first message) vowels) (cons (first\
    \ message) (encode (substring (second message) 4 (- (length message) 1)))) ]\n\
    \      [(member (first message) vowels) (cons (first message) (encode (substring\
    \ (second message) 5 (- (length message) 1)))) ]\n      [(member (first message)\
    \ vowels) (cons (first message) (encode (substring (second message) 6 (- (length\
    \ message) 1)))) ]\n      [(member (first message) vowels) (cons (first message)\
    \ (encode (substring (second message) 7 (- (length message) 1)))) ]\n      [(member\
    \ (first message) vowels) (cons (first message) (encode (substring (second message)\
    \ 8 (- (length message) 1)))) ]\n      [(member (first message) vowels) (cons\
    \ (first message) (encode (substring (second message) 9 (- (length message) 1))))\
    \ ]\n      [(member (first message) vowels) (cons (first message) (encode (substring\
    \ (second message) 10 (- (length message) 1)))) ]\n      [(member (first message)\
    \ vowels) (cons (first message) (encode (substring (second message) 11 (- (length\
    \ message) 1)))) ]\n      [(member (first message) vowels) (cons (first message)\
    \ (encode (substring (second message) 12 (- (length message) 1)))) ]\n      [(member\
    \ (first message) vowels) (cons (first message) (encode (substring (second message)\
    \ 13 (- (length message) 1)))) ]\n      [(member (first message) vowels) (cons\
    \ (first message) (encode (substring (second message) 14 (- (length message) 1))))\
    \ ]\n      [(member (first message) vowels) (con", "  (cond\n    [(empty? message)\
    \ \"\"]\n    [(equal? (first message) ?a) (encode-a message)]\n    [(equal? (first\
    \ message) ?e) (encode-e message)]\n    [(equal? (first message) ?i) (encode-i\
    \ message)]\n    [(equal? (first message) ?o) (encode-o message)]\n    [(equal?\
    \ (first message) ?u) (encode-u message)]\n    [else (encode-other (first message))]))\n",
  "  (let ((letters '(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l\
    \ #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z))\n       \
    \ (vowels '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J #\\K #\\L #\\M #\\\
    N #\\O #\\P #\\Q #\\R #\\S #\\T #\\V #\\W #\\X #\\Y #\\Z)))\n    (cond [(empty?\
    \ message) \"\"]\n          [(member (first message) letters) (cons (first message)\
    \ (encode (rest message)))]\n          [(member (first message) vowels) (cons\
    \ (first message) (encode (rest message)))]\n          [else (cons (first message)\
    \ (encode (rest message)))])))\n", "  (cond\n    [(empty? message) \"\"]\n   \
    \ [(equal? (first message) ?a) (encode (substring message 1 2))]\n    [(equal?\
    \ (first message) ?e) (encode (substring message 1 3))]\n    [(equal? (first message)\
    \ ?i) (encode (substring message 1 4))]\n    [(equal? (first message) ?o) (encode\
    \ (substring message 1 5))]\n    [(equal? (first message) ?u) (encode (substring\
    \ message 1 6))]\n    [(equal? (first message) ?A) (encode (substring message\
    \ 1 7))] \n    [(equal? (first message) ?E) (encode (substring message 1 8))]\
    \ \n    [(equal? (first message) ?I) (encode (substring message 1 9))] \n    [(equal?\
    \ (first message) ?O) (encode (substring message 1 10))] \n    [(equal? (first\
    \ message) ?U) (encode (substring message 1 11))] \n    [(equal? (first message)\
    \ ?a) (encode (substring message 1 12))] \n    [(equal? (first message) ?e) (encode\
    \ (substring message 1 13))] \n    [(equal? (first message) ?i) (encode (substring\
    \ message 1 14))] \n    [(equal? (first message) ?o) (encode (substring message\
    \ 1 15))] \n    [(equal? (first message) ?u) (encode (substring message 1 16))]\
    \ \n    [(equal? (first message) ?A) (encode (substring message 1 17))] \n   \
    \ [(equal? (first message) ?E) (encode (substring message 1 18))] \n    [(equal?\
    \ (first message) ?I) (encode (substring message 1 19))] \n    [(equal? (first\
    \ message) ?O) (encode (substring message 1 20))] \n    [(equal? (first message)\
    \ ?U) (encode (substring message 1 21))] \n    [(equal? (first message) ?a) (encode\
    \ (substring message 1 22))] \n    [(equal? (first message) ?e) (encode (substring\
    \ message 1 23))] \n    [(equal? (first message) ?i) (encode (substring message\
    \ 1 24))] \n    [(equal? (first message) ?o) (encode (substring message 1 25))]\
    \ \n    [(equal? (first message) ?u) (encode (substring message 1 26))] \n   \
    \ [(equal? (first message) ?A) (", "  (let ((vowels '(a e i o u)))\n    (cond\n\
    \      [(empty? message) \"\"]\n      [(member (first message) vowels) (cons (first\
    \ message) (encode (substring message 1 (- (length message) 1))))]\n      [else\
    \ (cons (first message) (encode (substring message 1 (- (length message) 1)))\n\
    \                (encode (substring message 0 (- (length message) 1)))\n     \
    \           (encode (substring message 1 (- (length message) 1)))\n          \
    \      (encode (substring message 0 (- (length message) 1)))\n               \
    \ (encode (substring message 1 (- (length message) 1)))\n                (encode\
    \ (substring message 0 (- (length message) 1)))\n                (encode (substring\
    \ message 1 (- (length message) 1)))\n                (encode (substring message\
    \ 0 (- (length message) 1)))\n                (encode (substring message 1 (-\
    \ (length message) 1)))\n                (encode (substring message 0 (- (length\
    \ message) 1)))\n                (encode (substring message 1 (- (length message)\
    \ 1)))\n                (encode (substring message 0 (- (length message) 1)))\n\
    \                (encode (substring message 1 (- (length message) 1)))\n     \
    \           (encode (substring message 0 (- (length message) 1)))\n          \
    \      (encode (substring message 1 (- (length message) 1)))\n               \
    \ (encode (substring message 0 (- (length message) 1)))\n                (encode\
    \ (substring message 1 (- (length message) 1)))\n                (encode (substring\
    \ message 0 (- (length message) 1)))\n                (encode (substring message\
    \ 1 (- (length message) 1)))\n                (encode (substring message 0 (-\
    \ (length message) 1)))\n                (encode (substring message 1 (- (length\
    \ message) 1)))\n                (encode (substring message 0 (- (length message)\
    \ 1)))\n                (encode (substring message 1 (- (length message) 1)))\n\
    \                (encode (substring message 0 (- (length message) 1)))\n     \
    \           (encode (substring message 1 (- (length message) 1)))\n          \
    \      (encode (substring message 0 (- (length message) 1)))\n               \
    \ (encode (substring message 1 (- (length message) 1)))\n                (encode\
    \ (substring message 0 (- (length message) 1)))\n                (encode (substring\
    \ message 1 (- (length message) 1)))\n                (encode (substring message\
    \ 0 (- (length message) 1)))\n                (encode (substring message 1 (-\
    \ (length message) 1)))\n                (encode (substring message 0 (- (length\
    \ message) 1)))\n                (encode (substring message 1 (- (length message)\
    \ 1)))\n                (encode (substring message 0 (- (length message) 1)))\n\
    \                (encode (substring message 1 (- (length message", "  (let ((vowels\
    \ '(a e i o u)))\n    (cond\n      [(empty? message) \"\"]\n      [(member (first\
    \ message) vowels) (first message)]\n      [else (cons (first message)\n     \
    \             (encode (substring message 1 (- (length message) 1)))]))))\n", " \
    \ (define (helper message index)\n    (if (null? message)\n        '()\n     \
    \   (cond [(char=? (char-ref message index) 'A) (char-ref message (+ index 1))]\n\
    \              [(char=? (char-ref message index) 'E) (char-ref message (+ index\
    \ 2))]\n              [(char=? (char-ref message index) 'I) (char-ref message\
    \ (+ index 3))]\n              [(char=? (char-ref message index) 'O) (char-ref\
    \ message (+ index 4))]\n              [(char=? (char-ref message index) 'U) (char-ref\
    \ message (+ index 5))]\n              [(char=? (char-ref message index) 'Y) (char-ref\
    \ message (+ index 6))]\n              [(char=? (char-ref message index) 'a) (char-ref\
    \ message (+ index 1))]\n              [(char=? (char-ref message index) 'e) (char-ref\
    \ message (+ index 2))]\n              [(char=? (char-ref message index) 'i) (char-ref\
    \ message (+ index 3))]\n              [(char=? (char-ref message index) 'o) (char-ref\
    \ message (+ index 4))]\n              [(char=? (char-ref message index) 'u')\
    \ (char-ref message (+ index 5))]\n              [(char=? (char-ref message index)\
    \ 'y) (char-ref message (+ index 6))]\n              [(char=? (char-ref message\
    \ index) 'A) (char-ref message (+ index 1))]\n              [(char=? (char-ref\
    \ message index) 'E) (char-ref message (+ index 2))]\n              [(char=? (char-ref\
    \ message index) 'I) (char-ref message (+ index 3))]\n              [(char=? (char-ref\
    \ message index) 'O) (char-ref message (+ index 4))]\n              [(char=? (char-ref\
    \ message index) 'U) (char-ref message (+ index 5))]\n              [(char=? (char-ref\
    \ message index) 'Y) (char-ref message (+ index 6))]\n              [(char=? (char-ref\
    \ message index) 'a) (char-ref message (+ index 1))]\n              [(char=? (char-ref\
    \ message index) 'e) (char-ref message (+ index 2))]\n              [(char=? (char-ref\
    \ message index) 'i) (", "  (let ([vowels '(a e i o u)])\n    (cond\n      [(empty?\
    \ message) message]\n      [(member (first message) vowels) (cons (first message)\
    \ (encode (substring message 1 (- (length message) 1))))]\n      [else (cons (first\
    \ message) (encode (substring message 1 (- (length message) 1)))\n           \
    \     (encode (substring message 0 (- (length message) 1)))]))))\n", "  (define\
    \ (helper message vowels)\n    (cond\n      [(empty? message) \"\"]\n      [(equal?\
    \ (first message) vowels) (second message)]\n      [else (helper (rest message)\
    \ (cons (first message) vowels))]))\n  (helper (reverse message) '()))\n", " \
    \ (define (vowel-position letter)\n    (cond [(char=? (char-upcase letter) 'A)\
    \ (- 'A)]\n          [(char=? (char-upcase letter) 'E) (- 'A)]\n          [(char=?\
    \ (char-upcase letter) 'I) (- 'A)]\n          [(char=? (char-upcase letter) 'O)\
    \ (- 'A)]\n          [(char=? (char-upcase letter) 'U) (- 'A)]\n          [(char=?\
    \ (char-upcase letter) 'Y) (- 'A)]\n          [(char=? (char-upcase letter) 'a)\
    \ (- 'A)]\n          [(char=? (char-upcase letter) 'e) (- 'A)]\n          [(char=?\
    \ (char-upcase letter) 'i) (- 'A)]\n          [(char=? (char-upcase letter) 'o)\
    \ (- 'A)]\n          [(char=? (char-upcase letter) 'u) (- 'A)]\n          [(char=?\
    \ (char-upcase letter) 'y) (- 'A)]\n          [else (- 'A)]))\n  (define (vowel-position\
    \ letter)\n    (cond [(char=? (char-upcase letter) 'A) (- 'A)]\n          [(char=?\
    \ (char-upcase letter) 'E) (- 'A)]\n          [(char=? (char-upcase letter) 'I)\
    \ (- 'A)]\n          [(char=? (char-upcase letter) 'O) (- 'A)]\n          [(char=?\
    \ (char-upcase letter) 'U) (- 'A)]\n          [(char=? (char-upcase letter) 'Y)\
    \ (- 'A)]\n          [(char=? (char-upcase letter) 'a) (- 'A)]\n          [(char=?\
    \ (char-upcase letter) 'e) (- 'A)]\n          [(char=? (char-upcase letter) 'i)\
    \ (- 'A)]\n          [(char=? (char-upcase letter) 'o) (- 'A)]\n          [(char=?\
    \ (char-upcase letter) 'u) (- 'A)]\n          [(char=? (char-upcase letter) 'y)\
    \ (- 'A)]\n          [else (- 'A)]))\n  (define (vowel-position letter)\n    (cond\
    \ [(char=? (char-upcase letter) 'A) (- 'A)]\n          [(char=? (char-upcase letter)\
    \ '", "  (cond\n    [(empty? message) \"\"]\n    [(equal? (first message) ?a)\
    \ (encode (substring message 1 2))]\n    [(equal? (first message) ?e) (encode\
    \ (substring message 1 3))]\n    [(equal? (first message) ?i) (encode (substring\
    \ message 1 4))]\n    [(equal? (first message) ?o) (encode (substring message\
    \ 1 5))]\n    [(equal? (first message) ?u) (encode (substring message 1 6))]\n\
    \    [else (cons (first message)\n              (encode (substring message 2))\n\
    \              (encode (substring message 3))\n              (encode (substring\
    \ message 4))\n              (encode (substring message 5))\n              (encode\
    \ (substring message 6)))]))\n", "  (let loop ((message message) (result '()))\n\
    \    (if (empty? message)\n        result\n        (loop (rest message) (cons\
    \ (char->string\n                                     (char->integer (char-code\
    \ (first message)))\n                                     (char->integer (char-code\
    \ (second message)))\n                                     (char->integer (char-code\
    \ (third message)))\n                                     (char->integer (char-code\
    \ (fourth message)))\n                                     (char->integer (char-code\
    \ (fifth message)))\n                                     (char->integer (char-code\
    \ (sixth message)))\n                                     (char->integer (char-code\
    \ (seventh message)))\n                                     (char->integer (char-code\
    \ (eigth message)))\n                                     (char->integer (char-code\
    \ (ninth message)))\n                                     (char->integer (char-code\
    \ (tenth message)))\n                                     (char->integer (char-code\
    \ (elevth message)))\n                                     (char->integer (char-code\
    \ (twelfth message)))\n                                     (char->integer (char-code\
    \ (thirteenth message)))\n                                     (char->integer\
    \ (char-code (fourteenth message)))\n                                     (char->integer\
    \ (char-code (fifteenth message)))\n                                     (char->integer\
    \ (char-code (sixteenth message)))\n                                     (char->integer\
    \ (char-code (seventeenth message)))\n                                     (char->integer\
    \ (char-code (eighteenth message)))\n                                     (char->integer\
    \ (char-code (nineteenth message)))\n                                     (char->integer\
    \ (char-code (twentieth message)))\n                                     (char->integer\
    \ (char-code (twenty-first message)))\n                                     (char->integer\
    \ (char-code (twenty-second message)))\n                                     (char->integer\
    \ (char-code (twenty-third message)))\n                                     (char->integer\
    \ (char-code (twenty-fourth message)))\n                                     (char->integer\
    \ (char-code (twenty-fifth message)))\n                                     (char->integer\
    \ (char-code (twenty-sixth message)))\n                                     (char->integer\
    \ (char-code (twenty-seventh message)))\n                                    \
    \ (char->integer (char-code (twenty-eighth message)))\n                      \
    \               (char->integer (char-code (twenty-ninth message)))\n         \
    \                            (char->integer (char-", "  (cond\n    [(empty? message)\
    \ \"\"]\n    [(equal? (first message) ?a) (encode (substring message 1 2))]\n\
    \    [(equal? (first message) ?e) (encode (substring message 1 3))]\n    [(equal?\
    \ (first message) ?i) (encode (substring message 1 4))]\n    [(equal? (first message)\
    \ ?o) (encode (substring message 1 5))]\n    [(equal? (first message) ?u) (encode\
    \ (substring message 1 6))]\n    [else (cons (first message)\n               (encode\
    \ (substring message 2)))]))\n", "  (let ([vowels '(a e i o u)])\n    (cond\n\
    \      [(empty? message) \"\"]\n      [(member (first message) vowels) (cons (first\
    \ message) (encode (substring message 1 (- (length message) 1)))) ]\n      [else\
    \ (cons (first message) (encode (substring message 1 (- (length message) 1))))\
    \ ]\n    )\n  )\n)\n", "  (cond\n    [(empty? message) \"\"]\n    [(equal? (first\
    \ message) ?a) (cond\n                             [(equal? (second message) ?e)\
    \ (cond\n                                                        [(equal? (third\
    \ message) ?i) (cond\n                                                       \
    \                [(equal? (fourth message) ?o) (cond\n                       \
    \                                                                            \
    \ [(equal? (fifth message) ?u) (cond\n                                       \
    \                                                                            \
    \        [(equal? (sixth message) ?A) (cond\n                                \
    \                                                                            \
    \                           [(equal? (seventh message) ?E) (cond\n           \
    \                                                                            \
    \                                                                            \
    \ [(equal? (eighth message) ?I) (cond\n                                      \
    \                                                                            \
    \                                                                         [(equal?\
    \ (ninth message) ?O) (cond\n                                                \
    \                                                                            \
    \                                                                            \
    \              [(equal? (tenth message) ?U) (cond\n                          \
    \                                                                            \
    \                                                                            \
    \                                                                     [(equal?\
    \ (eleventh message) ?A) (cond\n                                             \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \     [(equal? (twelfth message) ?E) (cond\n                                 \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                  [(equal? (thirteenth message)\
    \ ?I) (cond\n                                                                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                  [(equal? (fourteenth message)\
    \ ?O) (cond\n                                                                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \       [(equal? (fifteenth message) ?U) (cond\n                             \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                         [(equal?\
    \ (sixteenth message) ?A) (cond\n                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \               [(equal? (seventeenth message) ?E) (cond\n                   \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                       [(equal?\
    \ (eighteenth message) ?I) (cond\n                                           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \    [(equal? (nineteenth message) ?O) (cond\n                               \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                               [(equal? (twentieth message) ?U)\
    \ (cond\n                                                                    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                           [(equal? (twenty-first message) ?A)\
    \ (cond\n                                                                    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                               [(equal? (twenty-second message) ?E) (cond\n \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                      [(equal? (twenty-third message) ?I) (cond\n           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            [(equal?\
    \ (twenty-fourth message) ?O) (cond\n                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                               [(equal? (twenty-fifth message)\
    \ ?U) (cond\n                                                                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                       [(equal? (twenty-sixth message) ?A) (cond\n          \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                  ", "  (cond\n    [(empty? message) \"\"]\n\
    \    [(equal? (first message) ?a) (encode (substring message 1 2))]\n    [(equal?\
    \ (first message) ?e) (encode (substring message 1 3))]\n    [(equal? (first message)\
    \ ?i) (encode (substring message 1 4))]\n    [(equal? (first message) ?o) (encode\
    \ (substring message 1 5))]\n    [(equal? (first message) ?u) (encode (substring\
    \ message 1 6))]\n    [(equal? (first message) ?A) (encode (substring message\
    \ 1 7))] \n    [(equal? (first message) ?E) (encode (substring message 1 8))]\
    \ \n    [(equal? (first message) ?I) (encode (substring message 1 9))] \n    [(equal?\
    \ (first message) ?O) (encode (substring message 1 10))] \n    [(equal? (first\
    \ message) ?U) (encode (substring message 1 11))] \n    [(equal? (first message)\
    \ ?a) (encode (substring message 1 12))] \n    [(equal? (first message) ?e) (encode\
    \ (substring message 1 13))] \n    [(equal? (first message) ?i) (encode (substring\
    \ message 1 14))] \n    [(equal? (first message) ?o) (encode (substring message\
    \ 1 15))] \n    [(equal? (first message) ?u) (encode (substring message 1 16))]\
    \ \n    [(equal? (first message) ?A) (encode (substring message 1 17))] \n   \
    \ [(equal? (first message) ?E) (encode (substring message 1 18))] \n    [(equal?\
    \ (first message) ?I) (encode (substring message 1 19))] \n    [(equal? (first\
    \ message) ?O) (encode (substring message 1 20))] \n    [(equal? (first message)\
    \ ?U) (encode (substring message 1 21))] \n    [(equal? (first message) ?a) (encode\
    \ (substring message 1 22))] \n    [(equal? (first message) ?e) (encode (substring\
    \ message 1 23))] \n    [(equal? (first message) ?i) (encode (substring message\
    \ 1 24))] \n    [(equal? (first message) ?o) (encode (substring message 1 25))]\
    \ \n    [(equal? (first message) ?u) (encode (substring message 1 26))] \n   \
    \ [(equal? (first message) ?A) (", "  (cond\n    [(empty? message) \"\"]\n   \
    \ [(equal? (first message) ?a) (encode (substring message 1 2))]\n    [(equal?\
    \ (first message) ?e) (encode (substring message 1 3))]\n    [(equal? (first message)\
    \ ?i) (encode (substring message 1 4))]\n    [(equal? (first message) ?o) (encode\
    \ (substring message 1 5))]\n    [(equal? (first message) ?u) (encode (substring\
    \ message 1 6))]\n    [else (cons (first message)\n              (encode (substring\
    \ message 2)))]))\n", "  (cond\n    [(empty? message) \"\"]\n    [(equal? (first\
    \ message) ?a) (cons (first message) (encode (rest message)))]\n    [(equal? (first\
    \ message) ?e) (cons (first message) (encode (rest message)))]\n    [(equal? (first\
    \ message) ?i) (cons (first message) (encode (rest message)))]\n    [(equal? (first\
    \ message) ?o) (cons (first message) (encode (rest message)))]\n    [(equal? (first\
    \ message) ?u) (cons (first message) (encode (rest message)))]\n    [(equal? (first\
    \ message) ?A) (cons (first message) (encode (rest message)))]\n    [(equal? (first\
    \ message) ?E) (cons (first message) (encode (rest message)))]\n    [(equal? (first\
    \ message) ?I) (cons (first message) (encode (rest message)))]\n    [(equal? (first\
    \ message) ?O) (cons (first message) (encode (rest message)))]\n    [(equal? (first\
    \ message) ?U) (cons (first message) (encode (rest message)))]\n    [else (cons\
    \ (first message) (encode (rest message)))]))\n", "  (define (helper message index\
    \ count)\n    (if (= count 0)\n        (list message)\n        (helper (substring\
    \ message 0 index) (add1 index) \n               (substring message index count))))\n\
    \  (helper message 0 0))\n", "  (let ((vowels '(a e i o u)))\n    (cond\n    \
    \  [(empty? message) \"\"]\n      [(member (first message) vowels) (second message)]\n\
    \      [else (cons (first message)\n                  (encode (substring message\
    \ 1 (- (length message) 1))))]))) \n", "  (cond\n    [(empty? message) \"\"]\n\
    \    [(equal? (first message) ?a) (encode (substring message 1 2))]\n    [(equal?\
    \ (first message) ?e) (encode (substring message 1 3))]\n    [(equal? (first message)\
    \ ?i) (encode (substring message 1 4))]\n    [(equal? (first message) ?o) (encode\
    \ (substring message 1 5))]\n    [(equal? (first message) ?u) (encode (substring\
    \ message 1 6))]\n    [else (cons (first message)\n               (encode (substring\
    \ message 2)))]))\n", "  (let ((vowels '(a e i o u)))\n    (cond\n      [(empty?\
    \ message) \"\"]\n      [(member (first message) vowels) (first message)]\n  \
    \    [else (cons (first message)\n                  (encode (substring message\
    \ 1 (- (length message) 1))))])))\n", "  (define (helper message i j)\n    (cond\n\
    \      [(empty? message) message]\n      [(equal? (char-ref message i) (char-ref\
    \ message j)) (char-ref message j)]\n      [(char-ref message i) (char-ref message\
    \ j)]\n      [else (helper (substring message i (+ i j)) i (+ j 1))]\n      ))\n\
    \  (helper message 0 (length message)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
