name: HumanEval_93_encode
language: rkt
prompt: "#lang racket\n\n;; Write a function that takes a message, and encodes in\
  \ such a \n;; way that it swaps case of all letters, replaces all vowels in \n;;\
  \ the message with the letter that appears 2 places ahead of that \n;; vowel in\
  \ the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> (encode\
  \ \"test\")\n;; \"TGST\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C\
  \ MGSSCGG\"\n(define (encode message)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n\
  \    (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate\
  \ \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n  \
  \  (check-equal? (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
  \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
  \n(test-humaneval)"
completions: ["  (let ((vowels '(a e i o u)))\n    (cond\n      [(empty? message)\
    \ \"\"]\n      [(member (first message) vowels) (cons (first message) (encode\
    \ (substring message 1 (length message))))]\n      [else (cons (first message)\
    \ (encode (substring message 1 (length message))))])))\n", "  (let ((vowels '(a\
    \ e i o u)))\n    (cond\n      [(empty? message) \"\"]\n      [(member (first\
    \ message) vowels) (first message)]\n      [else (cons (first message)\n     \
    \             (encode (substring message 1 (- (length message) 1)))]))))\n", " \
    \ (define (helper message i j)\n    (cond [(= i j) message]\n          [(char-alphabet\
    \ (char message)) (char message)]\n          [(char-alphabet (char message)) (helper\
    \ (substring message i (+ i 1)) j)]\n          [(char-alphabet (char message))\
    \ (helper (substring message (+ i 1) (+ i 1)) j)]\n          [else (helper (substring\
    \ message i (+ i 1)) j)]))\n  (helper message 0 0))\n", "  (let ((vowels '(a e\
    \ i o u)))\n    (cond [(empty? message) \"\"]\n          [(member (first message)\
    \ vowels) (cons (first message) (encode (substring message 1 (length message))))]\n\
    \          [else (cons (first message) (encode (substring message 1 (length message))))])))\n",
  "  (cond\n    [(empty? message) \"\"]\n    [(equal? (first message) ?a) (encode-a\
    \ message)]\n    [(equal? (first message) ?e) (encode-e message)]\n    [(equal?\
    \ (first message) ?i) (encode-i message)]\n    [(equal? (first message) ?o) (encode-o\
    \ message)]\n    [(equal? (first message) ?u) (encode-u message)]\n    [else (encode-others\
    \ message)]))\n", "  (define (helper message index vowels)\n    (cond\n      [(empty?\
    \ message) message]\n      [(equal? (char-ref message index) vowel) (char-ref\
    \ message (+ index 2))]\n      [else (helper (substring message 0 index) (+ index\
    \ 1) vowels (cons (char-ref message index) vowels))]))\n  (helper message 0 '()))\n",
  "  (let ((vowels '(a e i o u)))\n    (cond\n      [(empty? message) \"\"]\n    \
    \  [(member (first message) vowels) (first message)]\n      [else (cons (first\
    \ message)\n                   (encode (substring message 1 \n               \
    \                    (length (first message)))))])))\n", "  (let ((vowels '(a\
    \ e i o u)))\n    (cond\n      [(empty? message) \"\"]\n      [(char-alphabet\
    \ (first message)) (cons (first message) (encode (substring message 1 (char-alphabet\
    \ (first message)))))]\n      [else (cons (first message)\n                  (encode\
    \ (substring message 1 (char-alphabet (first message))))\n                  (encode\
    \ (substring message (char-alphabet (first message)) (length message))))]))\n",
  "  (let ((letters '(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l\
    \ #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z))\n       \
    \ (vowels '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J #\\K #\\L #\\M #\\\
    N #\\O #\\P #\\Q #\\R #\\S #\\T #\\V #\\W #\\X #\\Y #\\Z)))\n    (cond\n     \
    \ [(empty? message) \"\"]\n      [(char-alphabet (first message)) (cons (first\
    \ message) (encode (rest message)))]\n      [else (cond\n             [(char-alphabet\
    \ (first message)) (cons (first message) (encode (rest message)))]\n         \
    \    [(char-alphabet (first message)) (cons (first message) (encode (rest message)))]\n\
    \             [(char-alphabet (first message)) (cons (first message) (encode (rest\
    \ message)))]\n             [(char-alphabet (first message)) (cons (first message)\
    \ (encode (rest message)))]\n             [(char-alphabet (first message)) (cons\
    \ (first message) (encode (rest message)))]\n             [(char-alphabet (first\
    \ message)) (cons (first message) (encode (rest message)))]\n             [(char-alphabet\
    \ (first message)) (cons (first message) (encode (rest message)))]\n         \
    \    [(char-alphabet (first message)) (cons (first message) (encode (rest message)))]\n\
    \             [(char-alphabet (first message)) (cons (first message) (encode (rest\
    \ message)))]\n             [(char-alphabet (first message)) (cons (first message)\
    \ (encode (rest message)))]\n             [(char-alphabet (first message)) (cons\
    \ (first message) (encode (rest message)))]\n             [(char-alphabet (first\
    \ message)) (cons (first message) (encode (rest message)))]\n             [(char-alphabet\
    \ (first message)) (cons (first message) (encode (rest message)))]\n         \
    \    [(char-alphabet (first message)) (cons (first ", "  (define (swap-case message)\n\
    \    (define (swap-case-helper message)\n      (define (swap-case-helper-helper\
    \ message)\n        (define (swap-case-helper-helper-helper message)\n       \
    \   (define (swap-case-helper-helper-helper-helper message)\n            (define\
    \ (swap-case-helper-helper-helper-helper-helper message)\n              (define\
    \ (swap-case-helper-helper-helper-helper-helper-helper message)\n            \
    \    (define (swap-case-helper-helper-helper-helper-helper-helper-helper message)\n\
    \                  (define (swap-case-helper-helper-helper-helper-helper-helper-helper\
    \ message)\n                    (define (swap-case-helper-helper-helper-helper-helper-helper-helper\
    \ message)\n                      (define (swap-case-helper-helper-helper-helper-helper-helper-helper\
    \ message)\n                        (define (swap-case-helper-helper-helper-helper-helper-helper-helper\
    \ message)\n                          (define (swap-case-helper-helper-helper-helper-helper-helper-helper\
    \ message)\n                            (define (swap-case-helper-helper-helper-helper-helper-helper-helper\
    \ message)\n                              (define (swap-case-helper-helper-helper-helper-helper-helper-helper\
    \ message)\n                                (define (swap-case-helper-helper-helper-helper-helper-helper-helper\
    \ message)\n                                  (define (swap-case-helper-helper-helper-helper-helper-helper-helper\
    \ message)\n                                    (define (swap-case-helper-helper-helper-helper-helper-helper-helper\
    \ message)\n                                      (define (swap-case-helper-helper-helper-helper-helper-helper-helper\
    \ message)\n                                        (define (swap-case-helper-helper-helper-helper-helper-helper-helper\
    \ message)\n                                          (define (swap-case-helper-helper-helper-helper-helper-helper-helper\
    \ message)\n                                            (define (swap-case-helper-helper-helper-helper-helper-helper-helper\
    \ message)\n                                              (define (swap-case-helper-helper-helper-helper-helper-helper-helper\
    \ message)\n                                                (define (swap-case-helper-helper-helper-helper-helper-helper-helper\
    \ message)\n                                                  (define (swap-case-helper-helper-helper-helper-helper-helper-helper\
    \ message)\n                                                    ", "  (let ([vowels\
    \ '(a e i o u)])\n    (cond\n      [(empty? message) message]\n      [(member\
    \ (first message) vowels) (cons (first message) (encode (substring message 1 (length\
    \ (first message))))) ]\n      [else (cons (first message) (encode (substring\
    \ message 1 (length (first message))))) ]\n    )\n  )\n)\n", "  (define (helper\
    \ message index)\n    (cond [(empty? message) message]\n          [(equal? (char-ref\
    \ message index) ?a) (char-ref message (+ index 1))]\n          [(equal? (char-ref\
    \ message index) ?e) (char-ref message (+ index 2))]\n          [(equal? (char-ref\
    \ message index) ?i) (char-ref message (+ index 3))]\n          [(equal? (char-ref\
    \ message index) ?o) (char-ref message (+ index 4))]\n          [(equal? (char-ref\
    \ message index) ?u) (char-ref message (+ index 5))]\n          [(equal? (char-ref\
    \ message index) ?A) (char-ref message (+ index 6))]\n          [(equal? (char-ref\
    \ message index) ?E) (char-ref message (+ index 7))]\n          [(equal? (char-ref\
    \ message index) ?I) (char-ref message (+ index 8))]\n          [(equal? (char-ref\
    \ message index) ?O) (char-ref message (+ index 9))]\n          [(equal? (char-ref\
    \ message index) ?U) (char-ref message (+ index 10))]\n          [(equal? (char-ref\
    \ message index) ?n) (char-ref message (+ index 11))]\n          [(equal? (char-ref\
    \ message index) ?p) (char-ref message (+ index 12))]\n          [(equal? (char-ref\
    \ message index) ?r) (char-ref message (+ index 13))]\n          [(equal? (char-ref\
    \ message index) ?s) (char-ref message (+ index 14))]\n          [(equal? (char-ref\
    \ message index) ?t) (char-ref message (+ index 15))]\n          [(equal? (char-ref\
    \ message index) ?g) (char-ref message (+ index 16))]\n          [(equal? (char-ref\
    \ message index) ?c) (char-ref message (+ index 17))]\n          [(equal? (char-ref\
    \ message index) ?m) (char-ref message (+ index 18))]\n          [(equal? (char-ref\
    \ message index) ?g) (char-ref message (+ index 19))]\n          [(equal? (char-ref\
    \ message index) ?g) (char-ref message (+ index 20))]\n          [(equal? (char-ref\
    \ message index) ?s) (char-ref message (+ index 21))]\n          [(equal? (char-ref\
    \ message index) ?c", "  (define (helper message index count)\n    (cond [(zero?\
    \ count) (list message)]\n          [(equal? (char-code (char message index))\
    \ #\\a) (list message)]\n          [(equal? (char-code (char message index)) #\\\
    e) (list message)]\n          [(equal? (char-code (char message index)) #\\i)\
    \ (list message)]\n          [(equal? (char-code (char message index)) #\\o) (list\
    \ message)]\n          [(equal? (char-code (char message index)) #\\u) (list message)]\n\
    \          [(equal? (char-code (char message index)) #\\y) (list message)]\n \
    \         [(equal? (char-code (char message index)) #\\A) (list message)]\n  \
    \        [(equal? (char-code (char message index)) #\\E) (list message)]\n   \
    \       [(equal? (char-code (char message index)) #\\I) (list message)]\n    \
    \      [(equal? (char-code (char message index)) #\\O) (list message)]\n     \
    \     [(equal? (char-code (char message index)) #\\U) (list message)]\n      \
    \    [(equal? (char-code (char message index)) #\\Y) (list message)]\n       \
    \   [(equal? (char-code (char message index)) #\\a) (list message)]\n        \
    \  [(equal? (char-code (char message index)) #\\e) (list message)]\n         \
    \ [(equal? (char-code (char message index)) #\\i) (list message)]\n          [(equal?\
    \ (char-code (char message index)) #\\o) (list message)]\n          [(equal? (char-code\
    \ (char message index)) #\\u) (list message)]\n          [(equal? (char-code (char\
    \ message index)) #\\y) (list message)]\n          [(equal? (char-code (char message\
    \ index)) #\\A) (list message)]\n          [(equal? (char-code (char message index))\
    \ #\\E) (list message)]\n          [(equal? (char-code (char message index)) #\\\
    I) (list message)]\n          [(equal? (char-code (char message index)) #\\O)\
    \ (list message)]\n          [(equal? (char-code (char message index)) #\\U) (list\
    \ message)]\n          [(equal? (char-code (char message index)) #\\Y) (list message)]\n\
    \          [(equal? (char-code (char message index)) ", "  (cond\n    [(empty?\
    \ message) \"\"]\n    [(equal? (first message) ?a) (encode-a message)]\n    [(equal?\
    \ (first message) ?e) (encode-e message)]\n    [(equal? (first message) ?i) (encode-i\
    \ message)]\n    [(equal? (first message) ?o) (encode-o message)]\n    [(equal?\
    \ (first message) ?u) (encode-u message)]\n    [else (encode-other (first message))]))\n",
  "  (cond\n    [(empty? message) \"\"]\n    [(equal? (first message) ?a) (encode\
    \ (substring message 1 2))]\n    [(equal? (first message) ?e) (encode (substring\
    \ message 1 3))]\n    [(equal? (first message) ?i) (encode (substring message\
    \ 1 4))]\n    [(equal? (first message) ?o) (encode (substring message 1 5))]\n\
    \    [(equal? (first message) ?u) (encode (substring message 1 6))]\n    [(equal?\
    \ (first message) ?A) (encode (substring message 1 7))] \n    [(equal? (first\
    \ message) ?E) (encode (substring message 1 8))] \n    [(equal? (first message)\
    \ ?I) (encode (substring message 1 9))] \n    [(equal? (first message) ?O) (encode\
    \ (substring message 1 10))] \n    [(equal? (first message) ?U) (encode (substring\
    \ message 1 11))] \n    [(equal? (first message) ?a) (encode (substring message\
    \ 1 12))] \n    [(equal? (first message) ?e) (encode (substring message 1 13))]\
    \ \n    [(equal? (first message) ?i) (encode (substring message 1 14))] \n   \
    \ [(equal? (first message) ?o) (encode (substring message 1 15))] \n    [(equal?\
    \ (first message) ?u) (encode (substring message 1 16))] \n    [(equal? (first\
    \ message) ?A) (encode (substring message 1 17))] \n    [(equal? (first message)\
    \ ?E) (encode (substring message 1 18))] \n    [(equal? (first message) ?I) (encode\
    \ (substring message 1 19))] \n    [(equal? (first message) ?O) (encode (substring\
    \ message 1 20))] \n    [(equal? (first message) ?U) (encode (substring message\
    \ 1 21))] \n    [(equal? (first message) ?a) (encode (substring message 1 22))]\
    \ \n    [(equal? (first message) ?e) (encode (substring message 1 23))] \n   \
    \ [(equal? (first message) ?i) (encode (substring message 1 24))] \n    [(equal?\
    \ (first message) ?o) (encode (substring message 1 25))] \n    [(equal? (first\
    \ message) ?u) (encode (substring message 1 26))] \n    [(equal? (first message)\
    \ ?A) (", "  (let ([vowels '(a e i o u)])\n    (cond\n      [(empty? message)\
    \ \"\"]\n      [(char-alphabet (first message)) (cons (first message) (encode\
    \ (substring message 1 (char-alphabet (first message)))))]\n      [(char-alphabet\
    \ (first message)) (cons (first message) (encode (substring message 1 (char-alphabet\
    \ (first message)))))]\n      [else (cons (first message) (encode (substring message\
    \ 1 (char-alphabet (first message)))))])))\n", "  (cond\n    [(empty? message)\
    \ \"\"]\n    [(equal? (first message) ?a) (encode-a message)]\n    [(equal? (first\
    \ message) ?e) (encode-e message)]\n    [(equal? (first message) ?i) (encode-i\
    \ message)]\n    [(equal? (first message) ?o) (encode-o message)]\n    [(equal?\
    \ (first message) ?u) (encode-u message)]\n    [else (encode-others message)]))\n",
  "  (define (enc-helper msg i j)\n    (cond\n      [(char=? (char-code (char msg\
    \ i)) #\\a) (char-code (char msg i))]\n      [(char=? (char-code (char msg i))\
    \ #\\e) (char-code (char msg i))]\n      [(char=? (char-code (char msg i)) #\\\
    i) (char-code (char msg i))]\n      [(char=? (char-code (char msg i)) #\\o) (char-code\
    \ (char msg i))]\n      [(char=? (char-code (char msg i)) #\\u) (char-code (char\
    \ msg i))]\n      [(char=? (char-code (char msg i)) #\\y) (char-code (char msg\
    \ i))]\n      [else (char msg i)]))\n  (define (enc-loop msg i j)\n    (cond\n\
    \      [(char=? (char-code (char msg i)) #\\a) (enc-helper (char msg i) (i + 1)\
    \ (j + 1))]\n      [(char=? (char-code (char msg i)) #\\e) (enc-helper (char msg\
    \ i) (i + 1) (j + 2))]\n      [(char=? (char-code (char msg i)) #\\i) (enc-helper\
    \ (char msg i) (i + 1) (j + 3))]\n      [(char=? (char-code (char msg i)) #\\\
    o) (enc-helper (char msg i) (i + 1) (j + 4))]\n      [(char=? (char-code (char\
    \ msg i)) #\\u) (enc-helper (char msg i) (i + 1) (j + 5))]\n      [(char=? (char-code\
    \ (char msg i)) #\\y) (enc-helper (char msg i) (i + 1) (j + 6))]\n      [else\
    \ (enc-loop msg (i + 1) j)]))\n  (enc-loop message 0 0))\n", "  (define (vowel-position\
    \ letter)\n    (cond\n      [(char=? (char-code letter) 'a) (- 'a 'z)]\n     \
    \ [(char=? (char-code letter) 'e) (- 'a 'z)]\n      [(char=? (char-code letter)\
    \ 'i) (- 'a 'z)]\n      [(char=? (char-code letter) 'o) (- 'a 'z)]\n      [(char=?\
    \ (char-code letter) 'u) (- 'a 'z)]\n      [else 0]))\n  (define (vowel-position\
    \ letter position)\n    (cond\n      [(char=? (char-code letter) 'a) (- 'a 'z)]\n\
    \      [(char=? (char-code letter) 'e) (- 'a 'z)]\n      [(char=? (char-code letter)\
    \ 'i) (- 'a 'z)]\n      [(char=? (char-code letter) 'o) (- 'a 'z)]\n      [(char=?\
    \ (char-code letter) 'u) (- 'a 'z)]\n      [else (+ position 'z)])))\n  (define\
    \ (vowel-position letter position)\n    (cond\n      [(char=? (char-code letter)\
    \ 'a) (- 'a 'z)]\n      [(char=? (char-code letter) 'e) (- 'a 'z)]\n      [(char=?\
    \ (char-code letter) 'i) (- 'a 'z)]\n      [(char=? (char-code letter) 'o) (-\
    \ 'a 'z)]\n      [(char=? (char-code letter) 'u) (- 'a 'z)]\n      [else (+ position\
    \ 'z)])))\n  (define (vowel-position letter position)\n    (cond\n      [(char=?\
    \ (char-code letter) 'a) (- 'a 'z)]\n      [(char=? (char-code letter) 'e) (-\
    \ 'a 'z)]\n      [(char=? (char-code letter) 'i) (- 'a 'z)]\n      [(char=? (char-code\
    \ letter) 'o) (- 'a 'z)]\n      [(char=? (char-code letter) 'u) (- 'a 'z)]\n \
    \     [else (+ position 'z)])))\n  (define (vowel-position letter position)\n\
    \    (cond\n      [(char=? (char-code letter) 'a) (- 'a 'z)]\n      [(char=? (char-code\
    \ letter) 'e) (- 'a 'z)]", "  (let ((vowels '(a e i o u)))\n    (cond\n      [(empty?\
    \ message) \"\"]\n      [(member (first message) vowels) (cons (first message)\
    \ (encode (substring message 1 2)))]\n      [else (cons (first message) (encode\
    \ (substring message 1 1)))])))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
