name: HumanEval_105_by_length
language: rkt
prompt: "#lang racket\n\n;; Given an array of integers, sort the integers that are\
  \ between 1 and 9 inclusive,\n;; reverse the resulting array, and then replace each\
  \ digit by its corresponding name from\n;; \"One\", \"Two\", \"Three\", \"Four\"\
  , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n;; For example:\n;; >>> (by_length\
  \ (list 2 1 1 4 5 8 2 3))\n;; (list \"Eight\" \"Five\" \"Four\" \"Three\" \"Two\"\
  \ \"Two\" \"One\" \"One\")\n;; If the array is empty, return an empty array:\n;;\
  \ >>> (by_length (list ))\n;; (list )\n;; If the array has any strange number ignore\
  \ it:\n;; >>> (by_length (list 1 -1 55))\n;; (list \"One\")\n(define (by_length\
  \ arr)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate by_length))\n\
  \    (check-equal? (candidate (list 2 1 1 4 5 8 2 3)) (list \"Eight\" \"Five\" \"\
  Four\" \"Three\" \"Two\" \"Two\" \"One\" \"One\"))\n    (check-equal? (candidate\
  \ (list )) (list ))\n    (check-equal? (candidate (list 1 -1 55)) (list \"One\"\
  ))\n    (check-equal? (candidate (list 1 -1 3 2)) (list \"Three\" \"Two\" \"One\"\
  ))\n    (check-equal? (candidate (list 9 4 8)) (list \"Nine\" \"Eight\" \"Four\"\
  ))\n))\n\n(test-humaneval)"
completions: ["  (if (null? arr)\n      '()\n      (let ([head (car arr)])\n     \
    \   (if (< head 9)\n            (cons (string-append \"One\" (number->string head))\n\
    \                  (by_length (cdr arr)))\n            (cons (string-append \"\
    Nine\" (number->string head))\n                  (by_length (cdr arr)))))))\n",
  "  (if (empty? arr)\n      '()\n      (let ([arr (reverse arr)])\n        (let ([digits\
    \ (map #(if (>= (length %) 1) (substring % 0 1) (substring % 1 0)) arr)])\n  \
    \        (map #(cond [(string=? (name %) digits) (cons (name %) digits)]\n   \
    \                  [(string=? (name %) digits) (cons (name %) digits)]\n     \
    \                [(string=? (name %) \"One\") (cons (name %) \"One\")]\n     \
    \                [(string=? (name %) \"Two\") (cons (name %) \"Two\")]\n     \
    \                [(string=? (name %) \"Three\") (cons (name %) \"Three\")]\n \
    \                    [(string=? (name %) \"Four\") (cons (name %) \"Four\")]\n\
    \                     [(string=? (name %) \"Five\") (cons (name %) \"Five\")]\n\
    \                     [(string=? (name %) \"Six\") (cons (name %) \"Six\")]\n\
    \                     [(string=? (name %) \"Seven\") (cons (name %) \"Seven\"\
    )]\n                     [(string=? (name %) \"Eight\") (cons (name %) \"Eight\"\
    )]\n                     [(string=? (name %) \"Nine\") (cons (name %) \"Nine\"\
    )]\n                     [(string=? (name %) \"\") (cons (name %) \"\")]\n   \
    \                  [(string=? (name %) \"One\") (cons (name %) \"One\")]\n   \
    \                  [(string=? (name %) \"Two\") (cons (name %) \"Two\")]\n   \
    \                  [(string=? (name %) \"Three\") (cons (name %) \"Three\")]\n\
    \                     [(string=? (name %) \"Four\") (cons (name %) \"Four\")]\n\
    \                     [(string=? (name %) \"Five\") (cons (name %) \"Five\")]\n\
    \                     [(string=? (name %) \"Six\") (cons (name %) \"Six\")]\n\
    \                     [(string=? (name %) \"Seven\") (cons (name %) \"Seven\"\
    )]\n                     [(string=? (name %) \"Eight\") (cons (name %) \"Eight\"\
    )]\n                     [(string=? (name %) \"Nine\") (cons (name %) \"Nine\"\
    )]\n                     [(string=? (name %) \"\") (cons (name %) \"\")]\n   \
    \                  [(string=? (name %) \"One\") (cons (name %) \"One\")]\n   \
    \                  [(string", "  (if (null? arr)\n      '()\n      (let ([head\
    \ (car arr)])\n        (if (< head 9)\n            (append (reverse (map by_length_helper\
    \ arr))\n                    (map by_length_helper (by_length_helper arr)))\n\
    \            (append (reverse (map by_length_helper arr))\n                  \
    \  (map by_length_helper (by_length_helper arr))))))\n", "  (if (empty? arr)\n\
    \      '()\n      (let ([head (car arr)])\n        (if (< head 9)\n          \
    \  (cons (string->symbol (string->string head)) (by_length (cdr arr)))\n     \
    \       (cons (string->symbol (string->string head)) (by_length (cdr arr)))))\n\
    \      )\n    )\n", "  (if (null? arr)\n      '()\n      (let ([l (length arr)])\n\
    \        (if (= l 1)\n            (cons (cons (car arr) (car arr)) '())\n    \
    \        (let ([i (car arr)])\n              (if (< i 9)\n                  (cons\
    \ (cons (car arr) (car arr)) '())\n                  (cons (cons (car arr) (by_length\
    \ (cdr arr)))\n                        (by_length (cdr arr))))))))\n", "  (if\
    \ (empty? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head\
    \ 10)\n            (append (reverse (map #(cond [(< head 10) \"One\"]\n      \
    \                                 [(< head 10) \"Two\"]\n                    \
    \                   [(< head 10) \"Three\"]\n                                \
    \       [(< head 10) \"Four\"]\n                                       [(< head\
    \ 10) \"Five\"]\n                                       [(< head 10) \"Six\"]\n\
    \                                       [(< head 10) \"Seven\"]\n            \
    \                           [(< head 10) \"Eight\"]\n                        \
    \               [(< head 10) \"Nine\"]\n                                     \
    \  [else (number->string head)]) (reverse (map #(number->string %) (reverse arr))))\n\
    \            (append (reverse (map #(number->string %) (reverse arr)))))))\n</code>\n\
    <|/ a tags=racket,scheme |>\n<| a tags=racket,scheme |>\n<code>", "  (if (null?\
    \ arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head 9)\n   \
    \         (cons (string->symbol (string->string head)) (by_length (cdr arr)))\n\
    \            (cons (string->symbol (string->string head)) (by_length (cdr arr)))))\n\
    \      )\n    )\n", "  (if (null? arr)\n      '()\n      (let ([arr (reverse arr)])\n\
    \        (map (lambda (x) (cond ((< x 9) (cons (cons \"One\" x) \"Ten\"))\n  \
    \                              ((< x 10) (cons (cons \"Two\" x) \"Eleven\"))\n\
    \                                ((< x 100) (cons (cons \"Three\" x) \"Twelve\"\
    ))\n                                ((< x 1000) (cons (cons \"Four\" x) \"Thirteen\"\
    ))\n                                ((< x 10000) (cons (cons \"Five\" x) \"Fourteen\"\
    ))\n                                ((< x 100000) (cons (cons \"Six\" x) \"Fifteen\"\
    ))\n                                ((< x 1000000) (cons (cons \"Seven\" x) \"\
    Sixteen\"))\n                                ((< x 10000000) (cons (cons \"Eight\"\
    \ x) \"Seventeen\"))\n                                ((< x 100000000) (cons (cons\
    \ \"Nine\" x) \"Eighteen\"))\n                                ((< x 1000000000)\
    \ (cons (cons \"Ten\" x) \"Nineteen\"))\n                                (else\
    \ (cons (cons \"Zero\" x) \"Zero\"))))\n              arr))))\n", "  (if (empty?\
    \ arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head 9)\n   \
    \         (cons (string-append (symbol->string head) \"One\")\n              \
    \    (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Two\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Three\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Four\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Five\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Six\")\n           \
    \       (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Seven\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Eight\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Nine\"\
    )\n                  (by_length (cdr arr)))))))\n", "  (if (null? arr)\n     \
    \ '()\n      (let ([len (length arr)])\n        (if (= len 0)\n            '()\n\
    \            (let ([head (car arr)])\n              (if (< head 10)\n        \
    \          (cons (cons head \"One\") (by_length (cdr arr)))\n                \
    \  (cons (cons head \"Two\") (by_length (cdr arr)))\n                  (cons (cons\
    \ head \"Three\") (by_length (cdr arr)))\n                  (cons (cons head \"\
    Four\") (by_length (cdr arr)))\n                  (cons (cons head \"Five\") (by_length\
    \ (cdr arr)))\n                  (cons (cons head \"Six\") (by_length (cdr arr)))\n\
    \                  (cons (cons head \"Seven\") (by_length (cdr arr)))\n      \
    \            (cons (cons head \"Eight\") (by_length (cdr arr)))\n            \
    \      (cons (cons head \"Nine\") (by_length (cdr arr))))))))\n", "  (if (null?\
    \ arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head 9)\n   \
    \         (cons (string->symbol (symbol->string head)) (by_length (cdr arr)))\n\
    \            (cons (symbol->string head) (by_length (cdr arr)))))))\n", "  (if\
    \ (empty? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head\
    \ 9)\n            (cons (string-append (name head) (by_length (cdr arr)))\n  \
    \                (by_length (cdr arr)))\n            (cons (string-append \"One\"\
    \ (by_length (cdr arr)))\n                  (by_length (cdr arr)))))))\n", " \
    \ (if (empty? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head\
    \ 9)\n            (append (by_length (cdr arr))\n                    (list (by_length_name\
    \ head \"One\")\n                          (by_length_name head \"Two\")\n   \
    \                       (by_length_name head \"Three\")\n                    \
    \      (by_length_name head \"Four\")\n                          (by_length_name\
    \ head \"Five\")\n                          (by_length_name head \"Six\")\n  \
    \                        (by_length_name head \"Seven\")\n                   \
    \       (by_length_name head \"Eight\")\n                          (by_length_name\
    \ head \"Nine\"))\n            (append (by_length (cdr arr))\n               \
    \     (list (by_length_name head \"Ten\")\n                          (by_length_name\
    \ head \"Eleven\")\n                          (by_length_name head \"Twelve\"\
    )\n                          (by_length_name head \"Thirteen\")\n            \
    \              (by_length_name head \"Fourteen\")\n                          (by_length_name\
    \ head \"Fifteen\")\n                          (by_length_name head \"Sixteen\"\
    )\n                          (by_length_name head \"Seventeen\")\n           \
    \               (by_length_name head \"Eighteen\")\n                         \
    \ (by_length_name head \"Nineteen\"))))))))\n", "  (if (empty? arr)\n      '()\n\
    \      (let ([head (first arr)])\n        (if (< head 9)\n            (cons (cons\
    \ head (cons \"One\" \"Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"\
    Eight\" \"Nine\")) (by_length (rest arr)))\n            (cons (cons head (cons\
    \ \"Ten\" \"Eleven\" \"Twelve\" \"Thirteen\" \"Fourteen\" \"Fifteen\" \"Sixteen\"\
    \ \"Seventeen\" \"Eighteen\" \"Nineteen\")) (by_length (rest arr)))))))\n", " \
    \ (if (empty? arr)\n      '()\n      (let ([head (first arr)])\n        (if (<\
    \ head 9)\n            (cons (string-append (number->string head) \"One\")\n \
    \                 (by_length (rest arr)))\n            (cons (string-append (number->string\
    \ head) \"Two\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (number->string head) \"Three\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (number->string head) \"Four\"\
    )\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (number->string head) \"Five\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (number->string head) \"Six\")\n           \
    \       (by_length (rest arr)))\n            (cons (string-append (number->string\
    \ head) \"Seven\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (number->string head) \"Eight\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (number->string head) \"Nine\"\
    )\n                  (by_length (rest arr)))))))\n", "  (if (null? arr)\n    \
    \  '()\n      (let ([head (car arr)])\n        (if (< head 9)\n            (cons\
    \ (string-append (symbol->string head) \"-\") (by_length (cdr arr)))\n       \
    \     (cons (symbol->string head) (by_length (cdr arr)))))))\n", "  (if (empty?\
    \ arr)\n      '()\n      (let ([head (first arr)])\n        (if (number? head)\n\
    \            (let ([tail (by_length (rest arr))])\n              (cons (cond [(<\
    \ head 10) \"One\"]\n                          [(< head 100) \"Two\"]\n      \
    \                    [(< head 1000) \"Three\"]\n                          [(<\
    \ head 10000) \"Four\"]\n                          [(< head 100000) \"Five\"]\n\
    \                          [(< head 1000000) \"Six\"]\n                      \
    \    [(< head 10000000) \"Seven\"]\n                          [(< head 100000000)\
    \ \"Eight\"]\n                          [(< head 1000000000) \"Nine\"]\n     \
    \                     [(< head 10000000000) \"Ten\"]\n                       \
    \   [(< head 100000000000) \"Eleven\"]\n                          [(< head 1000000000000)\
    \ \"Twelve\"]\n                          [(< head 10000000000000) \"Thirteen\"\
    ]\n                          [(< head 100000000000000) \"Fourteen\"]\n       \
    \                   [(< head 1000000000000000) \"Fifteen\"]\n                \
    \          [(< head 10000000000000000) \"Sixteen\"]\n                        \
    \  [(< head 100000000000000000) \"Seventeen\"]\n                          [(<\
    \ head 1000000000000000000) \"Eighteen\"]\n                          [(< head\
    \ 10000000000000000000) \"Nineteen\"]\n                          [(< head 100000000000000000000)\
    \ \"Twenty\"]\n                          [(< head 1000000000000000000000) \"Twenty-one\"\
    ]\n                          [(< head 10000000000000000000000) \"Twenty-two\"\
    ]\n                          [(< head 100000000000000000000000) \"Twenty-three\"\
    ]\n                          [(< head 1000000000000000000000000) \"Twenty-four\"\
    ]\n                          [(< head 10000000000000000000000000) \"Twenty-five\"\
    ]\n                          [(< head 100000000000000000000000000) \"Twenty-six\"\
    ]\n                          [(< head 1000000000000000000000000000) \"Twenty-seven\"\
    ]\n                          [(< head 10000000000000000000000000000) \"Twenty-eight\"\
    ]\n                          [(< head 100000000000000000000000000000) \"Twenty-nine\"\
    ]\n                          [(< head 1000000000000000000000000000000) \"Twenty-ten\"\
    ]\n                          [(< head 10000000000000000000000000000000) \"Twenty-eleven\"\
    ]\n                          [(< head 100000000000000000000000000000000) \"Twenty-twelve\"\
    ]\n                          [(< head 1000000000000000000000000000000000) \"Twenty-thirteen\"\
    ]\n                          [(< head 1000000000000000000000000000000000) \"Twenty-fourteen\"\
    ]\n                          [(< head 1000000000000000000000000000000000) \"Twenty-fifteen\"\
    ]\n                          [(< head 1000000000000000000000000000000000) \"Twenty-",
  "  (if (empty? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head\
    \ 9)\n            (cons (string->symbol (+ head 1)) (by_length (cdr arr)))\n \
    \           (cons (symbol->string (+ head 1)) (by_length (cdr arr)))))))\n", " \
    \ (if (empty? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head\
    \ 9)\n            (cons (string-append (symbol->string head) \"One\")\n      \
    \            (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Two\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Three\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Four\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Five\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Six\")\n           \
    \       (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Seven\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Eight\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Nine\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Ten\")\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append (symbol->string head) \"Eleven\")\n         \
    \         (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Twelve\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Thirteen\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Fourteen\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Fifteen\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Sixteen\")\n       \
    \           (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Seventeen\")\n                  (by_length (cdr arr)))\n           \
    \ (cons (string-append (symbol->string head) \"Eighteen\")\n                 \
    \ (by_length (cdr arr)))\n            (cons (string-append (symbol->string head)\
    \ \"Nineteen\")\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Tw", "  (if (null? arr)\n      '()\n      (let ([len\
    \ (length arr)])\n        (if (= len 0)\n            '()\n            (let ([head\
    \ (car arr)])\n              (if (< head 9)\n                  (cons (string-append\
    \ (symbol->string head) \"-\") (by_length (cdr arr)))\n                  (cons\
    \ (symbol->string head) (by_length (cdr arr))))))))\n", "  (if (empty? arr)\n\
    \      '()\n      (let ([head (first arr)])\n        (if (< head 10)\n       \
    \     (append (reverse-sort (map #(cons (string->number %) '(One Two Three Four\
    \ Five Six Seven Eight Nine)) (filter (lambda (x) (>= x 1)) arr)))\n         \
    \   (append (reverse-sort (map #(cons (string->number %) '(One Two Three Four\
    \ Five Six Seven Eight Nine)) (filter (lambda (x) (>= x 9)) arr)))\n         \
    \   (append (reverse-sort (map #(cons (string->number %) '(One Two Three Four\
    \ Five Six Seven Eight Nine)) (filter (lambda (x) (>= x 10)) arr)))\n        \
    \    (append (reverse-sort (map #(cons (string->number %) '(One Two Three Four\
    \ Five Six Seven Eight Nine)) (filter (lambda (x) (>= x 100)) arr)))\n       \
    \     (append (reverse-sort (map #(cons (string->number %) '(One Two Three Four\
    \ Five Six Seven Eight Nine)) (filter (lambda (x) (>= x 1000)) arr)))\n      \
    \      (append (reverse-sort (map #(cons (string->number %) '(One Two Three Four\
    \ Five Six Seven Eight Nine)) (filter (lambda (x) (>= x 10000)) arr)))\n     \
    \       (append (reverse-sort (map #(cons (string->number %) '(One Two Three Four\
    \ Five Six Seven Eight Nine)) (filter (lambda (x) (>= x 100000)) arr)))\n    \
    \        (append (reverse-sort (map #(cons (string->number %) '(One Two Three\
    \ Four Five Six Seven Eight Nine)) (filter (lambda (x) (>= x 1000000)) arr)))\n\
    \            (append (reverse-sort (map #(cons (string->number %) '(One Two Three\
    \ Four Five Six Seven Eight Nine)) (filter (lambda (x) (>= x 100000000)) arr)))\n\
    \            (append (reverse-sort (map #(cons (string->number %) '(One Two Three\
    \ Four Five Six Seven Eight Nine)) (filter (lambda (x) (>= x 1000000000)) ", " \
    \ (if (null? arr)\n      '()\n      (let ([arr (reverse arr)])\n        (map (lambda\
    \ (x) (cond ((< x 9) (cons (cons \"One\" x) \"Nine\"))\n                     \
    \            ((< x 8) (cons (cons \"Two\" x) \"Eight\"))\n                   \
    \              ((< x 7) (cons (cons \"Three\" x) \"Seven\"))\n               \
    \                  ((< x 6) (cons (cons \"Four\" x) \"Six\"))\n              \
    \                   ((< x 5) (cons (cons \"Five\" x) \"Five\"))\n            \
    \                     ((< x 4) (cons (cons \"Six\" x) \"Four\"))\n           \
    \                      ((< x 3) (cons (cons \"Seven\" x) \"Three\"))\n       \
    \                          ((< x 2) (cons (cons \"Eight\" x) \"Two\"))\n     \
    \                            ((< x 1) (cons (cons \"Nine\" x) \"One\"))\n    \
    \                             (else x))\n                 arr))))\n", "  (if (empty?\
    \ arr)\n      '()\n      (let ([nums (map number->string (reverse (filter (\u03BB\
    \ (x) (and (<= x 9) (>= x 1))))\n                                   (map string->number\
    \ (map string->string arr))))\n            strs (map string->string nums)])\n\
    \        (cond [(empty? strs) '()]\n              [(equal? (first strs) \"One\"\
    ) (cons (first strs) (by_length (rest strs)))]\n              [(equal? (first\
    \ strs) \"Two\") (cons (first strs) (by_length (rest strs)))]\n              [(equal?\
    \ (first strs) \"Three\") (cons (first strs) (by_length (rest strs)))]\n     \
    \         [(equal? (first strs) \"Four\") (cons (first strs) (by_length (rest\
    \ strs)))]\n              [(equal? (first strs) \"Five\") (cons (first strs) (by_length\
    \ (rest strs)))]\n              [(equal? (first strs) \"Six\") (cons (first strs)\
    \ (by_length (rest strs)))]\n              [(equal? (first strs) \"Seven\") (cons\
    \ (first strs) (by_length (rest strs)))]\n              [(equal? (first strs)\
    \ \"Eight\") (cons (first strs) (by_length (rest strs)))]\n              [(equal?\
    \ (first strs) \"Nine\") (cons (first strs) (by_length (rest strs)))]\n      \
    \        [(equal? (first strs) \"Ten\") (cons (first strs) (by_length (rest strs)))]\n\
    \              [(equal? (first strs) \"Eleven\") (cons (first strs) (by_length\
    \ (rest strs)))]\n              [(equal? (first strs) \"Twelve\") (cons (first\
    \ strs) (by_length (rest strs)))]\n              [(equal? (first strs) \"Thirteen\"\
    ) (cons (first strs) (by_length (rest strs)))]\n              [(equal? (first\
    \ strs) \"Fourteen\") (cons (first strs) (by_length (rest strs)))]\n         \
    \     [(equal? (first strs) \"Fifteen\") (cons (first strs) (by_length (rest strs)))]\n\
    \              [(equal? (first strs) \"Sixteen\") (cons (first strs) (by_length\
    \ (rest strs)))]\n              [(equal? (first strs) \"Seventeen\") (cons (first\
    \ strs) (by_length (rest strs)))]", "  (if (empty? arr)\n      '()\n      (let\
    \ ([head (car arr)])\n        (if (< head 10)\n            (cons (string-append\
    \ (symbol->string head) \"One\")\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append (symbol->string head) \"Two\")\n            \
    \      (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Three\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Four\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Five\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Six\")\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append (symbol->string head) \"Seven\")\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Eight\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Nine\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Ten\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Eleven\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Twelve\")\n        \
    \          (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Thirteen\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Fourteen\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Fifteen\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Sixteen\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Seventeen\")\n     \
    \             (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Eighteen\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Nineteen\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Tw", " \
    \ (if (null? arr)\n      '()\n      (let ([arr (reverse arr)])\n        (let ([len\
    \ (length arr)])\n          (if (= len 0)\n              arr\n              (let\
    \ ([digit (modulo (car arr) 10)])\n                (cond [(< digit 9) (cons (cons\
    \ \"One\" (cdr arr)) arr)]\n                      [(< digit 8) (cons (cons \"\
    Two\" (cdr arr)) arr)]\n                      [(< digit 7) (cons (cons \"Three\"\
    \ (cdr arr)) arr)]\n                      [(< digit 6) (cons (cons \"Four\" (cdr\
    \ arr)) arr)]\n                      [(< digit 5) (cons (cons \"Five\" (cdr arr))\
    \ arr)]\n                      [(< digit 4) (cons (cons \"Six\" (cdr arr)) arr)]\n\
    \                      [(< digit 3) (cons (cons \"Seven\" (cdr arr)) arr)]\n \
    \                     [(< digit 2) (cons (cons \"Eight\" (cdr arr)) arr)]\n  \
    \                    [(< digit 1) (cons (cons \"Nine\" (cdr arr)) arr)]\n    \
    \                  [else (cons (cons \"Zero\" (cdr arr)) arr)])\n            \
    \  )\n            )\n          )\n        )\n      )\n    )\n  )\n", "  (if (null?\
    \ arr)\n      '()\n      (let ([nums (map number->string arr)])\n        (let\
    \ ([sorted (sort nums '<)])\n          (let ([reverse (sort nums '<)])\n     \
    \       (map (lambda (x) (if (<= (length x) 9) (cons (reverse x) sorted) x))\n\
    \                   (map string->number nums))))))\n", "  (if (empty? arr)\n \
    \     '()\n      (let ([head (car arr)])\n        (if (< head 9)\n           \
    \ (append (reverse-sort (map #(cond [(< head %) %]\n                         \
    \                 [(= head %) %]\n                                          [(>\
    \ head %) %]\n                                          [(= head 1) \"One\"]\n\
    \                                          [(= head 2) \"Two\"]\n            \
    \                              [(= head 3) \"Three\"]\n                      \
    \                    [(= head 4) \"Four\"]\n                                 \
    \         [(= head 5) \"Five\"]\n                                          [(=\
    \ head 6) \"Six\"]\n                                          [(= head 7) \"Seven\"\
    ]\n                                          [(= head 8) \"Eight\"]\n        \
    \                                  [(= head 9) \"Nine\"]\n                   \
    \                       [(= head 10) \"Ten\"]\n                              \
    \            [(= head 11) \"Eleven\"]\n                                      \
    \    [(= head 12) \"Twelve\"]\n                                          [(= head\
    \ 13) \"Thirteen\"]\n                                          [(= head 14) \"\
    Fourteen\"]\n                                          [(= head 15) \"Fifteen\"\
    ]\n                                          [(= head 16) \"Sixteen\"]\n     \
    \                                     [(= head 17) \"Seventeen\"]\n          \
    \                                [(= head 18) \"Eighteen\"]\n                \
    \                          [(= head 19) \"Nineteen\"]\n                      \
    \                    [(= head 20) \"Twenty\"]\n                              \
    \            [(= head 21) \"Twenty-one\"]\n                                  \
    \        [(= head 22) \"Twenty-two\"]\n                                      \
    \    [(= head 23) \"Twenty-three\"]\n                                        \
    \  [(= head 24) \"Twenty-four\"]\n                                          [(=\
    \ head 25) \"Twenty-five\"]\n                                          [(= head\
    \ 26) \"Twenty-six\"]\n                                          [(= head 27)\
    \ \"Twenty-seven\"]\n                                          [(= head 28) \"\
    Twenty-eight\"]\n                                          [(= head 29) \"Twenty-nine\"\
    ]\n                                          [(= head 30) \"Thirty\"]\n      \
    \                                    [(= head 31) \"Thirty-one\"]\n          \
    \                                [(= head 32) \"Thirty-two\"]\n              \
    \                            [(= head 33) \"Thirty-three\"]\n                \
    \                          [(= head 34) \"Thirty-four\"]\n                   \
    \                       [(= head 35) \"Thirty-five\"]\n                      \
    \                    [(= head 36) \"Thirty-six\"]\n                          \
    \                [(= head 37) \"Thirty-seven\"]\n                            \
    \              [(= head 38) \"Thirty-eight\"]\n                              \
    \            [(= head 39) \"Thirty-nine\"]\n                                 \
    \         [(= head 40) \"Forty\"]\n                                          [(=\
    \ head 4", "  (if (null? arr)\n      '()\n      (let ([head (car arr)])\n    \
    \    (if (< head 9)\n            (append (by_length (cdr arr))\n             \
    \       (list (by_length \n                           (list (modulo head 10) (modulo\
    \ head 10))))\n                    (list (by_length \n                       \
    \    (list (modulo head 10) (modulo head 10))))\n                    (list (by_length\
    \ \n                           (list (modulo head 10) (modulo head 10))))\n  \
    \                  (list (by_length \n                           (list (modulo\
    \ head 10) (modulo head 10))))\n                    (list (by_length \n      \
    \                     (list (modulo head 10) (modulo head 10))))\n           \
    \         (list (by_length \n                           (list (modulo head 10)\
    \ (modulo head 10))))\n                    (list (by_length \n               \
    \            (list (modulo head 10) (modulo head 10))))\n                    (list\
    \ (by_length \n                           (list (modulo head 10) (modulo head\
    \ 10))))\n                    (list (by_length \n                           (list\
    \ (modulo head 10) (modulo head 10))))\n                    (list (by_length \n\
    \                           (list (modulo head 10) (modulo head 10))))\n     \
    \               (list (by_length \n                           (list (modulo head\
    \ 10) (modulo head 10))))\n                    (list (by_length \n           \
    \                (list (modulo head 10) (modulo head 10))))\n                \
    \    (list (by_length \n                           (list (modulo head 10) (modulo\
    \ head 10))))\n                    (list (by_length \n                       \
    \    (list (modulo head 10) (modulo head 10))))\n                    (list (by_length\
    \ \n                           (list (modulo head 10) (modulo head 10))))\n  \
    \                  (list (by_length \n                           (list (modulo\
    \ head 10) (modulo head 10))))\n                    (list (by_length \n      \
    \                     (list (modulo head 10) (modulo head 10))))\n           \
    \         (list (by_length \n                           (list (modulo head 10)\
    \ (modulo head 10))))\n                    (list (by_length \n               \
    \            (list (modulo head 10) (modulo head 10))))\n                    (list\
    \ (by_length \n                           (list (modulo head 10) (modulo head\
    \ 10))))\n                    (list (by_length \n                           (list\
    \ (modulo head 10) (modulo head 10))))\n                    (list (by_length \n\
    \                           (list (modulo head 10) (modulo head 10))))\n     \
    \               (list (by_length \n                           (list (modulo head\
    \ 10) (modulo head 10))))\n                    (list (by_length \n           \
    \                (list (modulo head 10) (modulo head 10))))\n                \
    \    (list (by_length \n                           (list (modulo head 10) (modulo\
    \ head 10))))\n                    (list (", "  (if (empty? arr)\n      '()\n\
    \      (let ([arr (reverse arr)])\n        (map (lambda (x) (cond ((< x 9) (cons\
    \ (cons \"One\" x) arr))\n                                 ((< x 10) (cons (cons\
    \ \"Two\" x) arr))\n                                 ((< x 100) (cons (cons \"\
    Three\" x) arr))\n                                 ((< x 1000) (cons (cons \"\
    Four\" x) arr))\n                                 ((< x 10000) (cons (cons \"\
    Five\" x) arr))\n                                 ((< x 100000) (cons (cons \"\
    Six\" x) arr))\n                                 ((< x 1000000) (cons (cons \"\
    Seven\" x) arr))\n                                 ((< x 10000000) (cons (cons\
    \ \"Eight\" x) arr))\n                                 ((< x 100000000) (cons\
    \ (cons \"Nine\" x) arr))\n                                 (else (cons x arr)))))\n\
    \              (range 10)))))\n", "  (if (null? arr)\n      '()\n      (let ([head\
    \ (car arr)])\n        (if (< head 9)\n            (cons (string-append \"One\"\
    \ (string-to-int head))\n                  (by_length (cdr arr)))\n          \
    \  (cons (string-append \"Nine\" (string-to-int head))\n                  (by_length\
    \ (cdr arr)))))))\n", "  (if (empty? arr)\n      '()\n      (let ([arr (reverse\
    \ arr)])\n        (let ([nums (map #(cons (string->number %) '(One Two Three Four\
    \ Five Six Seven Eight Nine)) arr)])\n          (map #(cons (string->name %) nums)\
    \ nums)))))\n", "  (if (empty? arr)\n      '()\n      (let ([head (first arr)])\n\
    \        (if (< head 9)\n            (cons (string-append (symbol->string head)\
    \ \"-\") (by_length (rest arr)))\n            (cons (symbol->string head) (by_length\
    \ (rest arr)))))))\n", "  (if (empty? arr)\n      '()\n      (let ([head (first\
    \ arr)])\n        (if (< head 9)\n            (cons (cons head (cons \"One\" \"\
    Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")) (by_length\
    \ (rest arr)))\n            (cons (cons head (cons \"Ten\" \"Eleven\" \"Twelve\"\
    \ \"Thirteen\" \"Fourteen\" \"Fifteen\" \"Sixteen\" \"Seventeen\" \"Eighteen\"\
    \ \"Nineteen\")) (by_length (rest arr)))))))\n", "  (if (empty? arr)\n      '()\n\
    \      (let ([arr (reverse arr)])\n        (let ([num (first arr)])\n        \
    \  (if (< num 9)\n              (cons (string->symbol (symbol->string num)) (rest_of\
    \ arr))\n              (cons (string->symbol (symbol->string num)) (rest_of arr)))))))\n",
  "  (if (empty? arr)\n      '()\n      (let ([head (first arr)])\n        (if (<\
    \ head 9)\n            (cons (cons head (name-of head)) (rest_of arr))\n     \
    \       (cons (cons head (name-of head)) (by_length (rest_of arr)))))))\n", " \
    \ (if (null? arr)\n      '()\n      (let ([len (length arr)])\n        (if (<\
    \ len 9)\n            (let ([nums (range 1 len)]\n                  [nums (reverse\
    \ nums)])\n              (map (lambda (x)\n                     (let ([x (string->symbol\
    \ (symbol->string x)))])\n                       (cons x nums))))\n          \
    \  (let ([nums (range 1 len)]\n                  [nums (reverse nums)])\n    \
    \          (map (lambda (x)\n                     (let ([x (string->symbol (symbol->string\
    \ x)))])\n                       (cons x nums)))))))\n", "  (if (null? arr)\n\
    \      '()\n      (let ([head (car arr)])\n        (if (< head 9)\n          \
    \  (cons (string-append (number->string head) \"One\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Two\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Three\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Four\")\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Five\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Six\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Seven\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Eight\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Nine\")\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Ten\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Eleven\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Twelve\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Thirteen\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Fourteen\")\n      \
    \            (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Fifteen\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Sixteen\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Seventeen\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Eighteen\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Nineteen\")\n      \
    \            (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Tw", "  (cond\n    [(empty? arr) empty]\n    [(number? (car arr)) (cons\
    \ (by_length (cdr arr)) (cons (by_length (cdr arr)) empty))]\n    [else (cons\
    \ (by_length (cdr arr)) (by_length (cdr arr)))]))\n", "  (if (null? arr)\n   \
    \   '()\n      (let ([l (length arr)])\n        (if (= l 9)\n            (let\
    \ ([i (first arr)])\n              (cond [(< i 9) (list \"Nine\" \"Eight\" \"\
    Seven\" \"Six\" \"Five\" \"Four\" \"Three\" \"Two\" \"One\")]\n              \
    \      [else (list \"Nine\" \"Eight\" \"Seven\" \"Six\" \"Five\" \"Four\" \"Three\"\
    \ \"Two\" \"One\")]))\n            (let ([i (first arr)])\n              (cond\
    \ [(< i 9) (list \"Nine\" \"Eight\" \"Seven\" \"Six\" \"Five\" \"Four\" \"Three\"\
    \ \"Two\" \"One\")]\n                    [else (list \"Nine\" \"Eight\" \"Seven\"\
    \ \"Six\" \"Five\" \"Four\" \"Three\" \"Two\" \"One\")])))))\n", "  (cond\n  \
    \  [(empty? arr) empty]\n    [(number? (first arr)) (cons (first arr) (by_length\
    \ (rest arr)))]\n    [else (cons (first arr) (by_length (rest arr)))]))\n", " \
    \ (if (empty? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head\
    \ 9)\n            (cons (string-append (number->string head) \"One\")\n      \
    \            (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Two\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Three\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Four\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Five\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Six\")\n           \
    \       (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Seven\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Eight\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Nine\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Ten\")\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append (number->string head) \"Eleven\")\n         \
    \         (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Twelve\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Thirteen\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Fourteen\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Fifteen\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Sixteen\")\n       \
    \           (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Seventeen\")\n                  (by_length (cdr arr)))\n           \
    \ (cons (string-append (number->string head) \"Eighteen\")\n                 \
    \ (by_length (cdr arr)))\n            (cons (string-append (number->string head)\
    \ \"Nineteen\")\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Tw", "  (if (null? arr)\n      '()\n      (let ([l (length\
    \ arr)])\n        (if (= l 1)\n            (cons (string->symbol (car arr)) (by_length\
    \ (cdr arr)))\n            (let ([i (car arr)])\n              (if (< i 9)\n \
    \                 (cons (string->symbol (string->int (number->string i))) (by_length\
    \ (cdr arr)))\n                  (cons (string->symbol (string->int (number->string\
    \ i))) (by_length (cdr arr))))))))\n", "  (if (empty? arr)\n      '()\n      (let\
    \ ([head (first arr)])\n        (if (< head 9)\n            (cons (string-append\
    \ (symbol->string head) (string-append \"One\"))\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (symbol->string head) (string-append\
    \ \"Two\"))\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (symbol->string head) (string-append \"Three\"))\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (symbol->string head) (string-append\
    \ \"Four\"))\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (symbol->string head) (string-append \"Five\"))\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (symbol->string head) (string-append\
    \ \"Six\"))\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (symbol->string head) (string-append \"Seven\"))\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (symbol->string head) (string-append\
    \ \"Eight\"))\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (symbol->string head) (string-append \"Nine\"))\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (symbol->string head) (string-append\
    \ \"Ten\"))\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (symbol->string head) (string-append \"Eleven\"))\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (symbol->string head) (string-append\
    \ \"Twelve\"))\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (symbol->string head) (string-append \"Thirteen\"))\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (symbol->string head) (string-append\
    \ \"Fourteen\"))\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (symbol->string head) (string-append \"Fifteen\"))\n        \
    \          (by_length (rest arr)))\n            (cons (string-append (symbol->string\
    \ head) (string-append \"Sixteen\"))\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (symbol->string head) (string-append \"Seventeen\"\
    ))\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (symbol->string head) (string-", "  (if (null? arr)\n      '()\n      (let ([len\
    \ (length arr)])\n        (if (= len 0)\n            '()\n            (let ([head\
    \ (first arr)])\n              (if (< head 9)\n                  (cons (string->symbol\
    \ (string->string head)) (by_length (rest arr)))\n                  (cons (symbol->string\
    \ head) (by_length (rest arr))))))))\n", "  (if (empty? arr)\n      '()\n    \
    \  (let ([head (first arr)])\n        (if (< head 9)\n            (cons (string-append\
    \ (number->string head) \"One\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (number->string head) \"Two\")\n           \
    \       (by_length (rest arr)))\n            (cons (string-append (number->string\
    \ head) \"Three\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (number->string head) \"Four\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (number->string head) \"Five\"\
    )\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (number->string head) \"Six\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (number->string head) \"Seven\")\n         \
    \         (by_length (rest arr)))\n            (cons (string-append (number->string\
    \ head) \"Eight\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (number->string head) \"Nine\")\n                  (by_length\
    \ (rest arr)))))))\n", "  (if (empty? arr)\n      '()\n      (let ([head (first\
    \ arr)])\n        (if (< head 9)\n            (cons (string->symbol (symbol->string\
    \ head)) (by_length (rest arr)))\n            (cons (string->symbol (symbol->string\
    \ head)) (by_length (rest arr)))))\n      )\n    )\n  )\n", "  (if (empty? arr)\n\
    \      '()\n      (let ([head (car arr)])\n        (if (< head 9)\n          \
    \  (cons (string->symbol (string->string head)) (by_length (cdr arr)))\n     \
    \       (cons (string->symbol (string->string head)) (by_length (cdr arr)))))\n\
    \      )\n    )\n  )\n", "  (cond\n    [(empty? arr) empty]\n    [(number? (first\
    \ arr)) (cons (first arr) (by_length (rest arr)))]\n    [else (cons (first arr)\
    \ (by_length (rest arr)))]))\n", "  (if (empty? arr)\n      '()\n      (let ([head\
    \ (car arr)])\n        (if (< head 9)\n            (cons (string-append (symbol->string\
    \ head) \"One\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Two\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Three\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Four\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Five\")\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Six\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Seven\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Eight\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Nine\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Zero\")\n          \
    \        (by_length (cdr arr)))))))\n", "  (if (null? arr)\n      '()\n      (let\
    \ ([nums (map number->string arr)])\n        (if (= (length nums) 9)\n       \
    \     (let ([nums (reverse nums)])\n              (map string->number nums))\n\
    \            (map string->number nums)))))\n", "  (if (empty? arr)\n      '()\n\
    \      (let ([head (car arr)])\n        (if (< head 9)\n            (append (reverse-sort\
    \ (sub1 head arr))\n                    (map #(cond [(< head 1) \"One\"]\n   \
    \                            [(< head 2) \"Two\"]\n                          \
    \     [(< head 3) \"Three\"]\n                               [(< head 4) \"Four\"\
    ]\n                               [(< head 5) \"Five\"]\n                    \
    \           [(< head 6) \"Six\"]\n                               [(< head 7) \"\
    Seven\"]\n                               [(< head 8) \"Eight\"]\n            \
    \                   [(< head 9) \"Nine\"]\n                               [else\
    \ (cond [(< head 10) \"Ten\"]\n                                          [(< head\
    \ 11) \"Eleven\"]\n                                          [(< head 12) \"Twelve\"\
    ]\n                                          [(< head 13) \"Thirteen\"]\n    \
    \                                      [(< head 14) \"Fourteen\"]\n          \
    \                                [(< head 15) \"Fifteen\"]\n                 \
    \                         [(< head 16) \"Sixteen\"]\n                        \
    \                  [(< head 17) \"Seventeen\"]\n                             \
    \             [(< head 18) \"Eighteen\"]\n                                   \
    \       [(< head 19) \"Nineteen\"]\n                                         \
    \ [(< head 20) \"Twenty\"]\n                                          [(< head\
    \ 21) \"Twenty-one\"]\n                                          [(< head 22)\
    \ \"Twenty-two\"]\n                                          [(< head 23) \"Twenty-three\"\
    ]\n                                          [(< head 24) \"Twenty-four\"]\n \
    \                                         [(< head 25) \"Twenty-five\"]\n    \
    \                                      [(< head 26) \"Twenty-six\"]\n        \
    \                                  [(< head 27) \"Twenty-seven\"]\n          \
    \                                [(< head 28) \"Twenty-eight\"]\n            \
    \                              [(< head 29) \"Twenty-nine\"]\n               \
    \                           [(< head 30) \"Thirty\"]\n                       \
    \                   [(< head 31) \"Thirty-one\"]\n                           \
    \               [(< head 32) \"Thirty-two\"]\n                               \
    \           [(< head 33) \"Thirty-three\"]\n                                 \
    \         [(< head 34) \"Thirty-four\"]\n                                    \
    \      [(< head 35) \"Thirty-five\"]\n                                       \
    \   [(< head 36) \"Thirty-six\"]\n                                          [(<\
    \ head 37) \"Thirty-seven\"]\n                                          [(< head\
    \ 38) \"Thirty-eight\"]\n                                          [(< head 39)\
    \ \"Thirty-nine\"]\n                                          [(< head 40) \"\
    Forty\"]\n                                          [(< head 41) \"Forty-one\"\
    ]\n                                          [(< head 42) \"For", "  (if (null?\
    \ arr)\n      '()\n      (let ([len (length arr)])\n        (if (= len 0)\n  \
    \          '()\n            (let ([start (first arr)])\n              (if (< start\
    \ 9)\n                  (cons (cons start \"One\") (by_length (rest arr)))\n \
    \                 (cons (cons start \"Two\") (by_length (rest arr)))\n       \
    \           (cons (cons start \"Three\") (by_length (rest arr)))\n           \
    \       (cons (cons start \"Four\") (by_length (rest arr)))\n                \
    \  (cons (cons start \"Five\") (by_length (rest arr)))\n                  (cons\
    \ (cons start \"Six\") (by_length (rest arr)))\n                  (cons (cons\
    \ start \"Seven\") (by_length (rest arr)))\n                  (cons (cons start\
    \ \"Eight\") (by_length (rest arr)))\n                  (cons (cons start \"Nine\"\
    ) (by_length (rest arr))))))))\n", "  (if (empty? arr)\n      '()\n      (let\
    \ ([head (first arr)])\n        (if (< head 9)\n            (cons (string-append\
    \ (symbol->string head) \"One\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (symbol->string head) \"Two\")\n           \
    \       (by_length (rest arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Three\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Four\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (symbol->string head) \"Five\"\
    )\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Six\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (symbol->string head) \"Seven\")\n         \
    \         (by_length (rest arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Eight\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Nine\")\n                  (by_length\
    \ (rest arr)))))))\n", "  (if (empty? arr)\n      '()\n      (let ([head (first\
    \ arr)])\n        (if (< head 9)\n            (cons (cons head (cons \"One\" \"\
    Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")) (by_length\
    \ (rest arr)))\n            (cons (cons head (cons \"Ten\" \"Eleven\" \"Twelve\"\
    \ \"Thirteen\" \"Fourteen\" \"Fifteen\" \"Sixteen\" \"Seventeen\" \"Eighteen\"\
    \ \"Nineteen\")) (by_length (rest arr)))))))\n", "  (if (empty? arr)\n      '()\n\
    \      (let ([head (car arr)])\n        (if (< head 10)\n            (cons (string-append\
    \ \"One\" (string-to-int head))\n                  (by_length (cdr arr)))\n  \
    \          (cons (string-append \"Ten\" (string-to-int head))\n              \
    \    (by_length (cdr arr)))\n            (cons (string-append \"Eleven\" (string-to-int\
    \ head))\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ \"Twelve\" (string-to-int head))\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append \"Thirteen\" (string-to-int head))\n       \
    \           (by_length (cdr arr)))\n            (cons (string-append \"Fourteen\"\
    \ (string-to-int head))\n                  (by_length (cdr arr)))\n          \
    \  (cons (string-append \"Fifteen\" (string-to-int head))\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append \"Sixteen\" (string-to-int head))\n\
    \                  (by_length (cdr arr)))\n            (cons (string-append \"\
    Seventeen\" (string-to-int head))\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append \"Eighteen\" (string-to-int head))\n       \
    \           (by_length (cdr arr)))\n            (cons (string-append \"Nineteen\"\
    \ (string-to-int head))\n                  (by_length (cdr arr)))\n          \
    \  (cons (string-append \"Twenty\" (string-to-int head))\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append \"TwentyOne\" (string-to-int head))\n\
    \                  (by_length (cdr arr)))\n            (cons (string-append \"\
    TwentyTwo\" (string-to-int head))\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append \"TwentyThree\" (string-to-int head))\n    \
    \              (by_length (cdr arr)))\n            (cons (string-append \"TwentyFour\"\
    \ (string-to-int head))\n                  (by_length (cdr arr)))\n          \
    \  (cons (string-append \"TwentyFive\" (string-to-int head))\n               \
    \   (by_length (cdr arr)))\n            (cons (string-append \"TwentySix\" (string-to-int\
    \ head))\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ \"TwentySeven\" (string-to-int head))\n                  ", "  (if (empty? arr)\n\
    \      '()\n      (let ([head (first arr)])\n        (if (< head 9)\n        \
    \    (cons (cons head (cons \"One\" \"Two\" \"Three\" \"Four\" \"Five\" \"Six\"\
    \ \"Seven\" \"Eight\" \"Nine\"))\n                  (by_length (rest arr)))\n\
    \            (cons (cons head (cons \"Zero\" \"One\" \"Two\" \"Three\" \"Four\"\
    \ \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\"))\n                  (by_length\
    \ (rest arr)))))))\n", "  (if (empty? arr)\n      '()\n      (let ([head (first\
    \ arr)])\n        (if (< head 9)\n            (cons (string-append \"One\" (sub1\
    \ head))\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ \"Nine\" (sub1 head))\n                  (by_length (rest arr)))))))\n", " \
    \ (if (empty? arr)\n      '()\n      (let ([len (length arr)])\n        (if (=\
    \ len 1)\n            (cons (string->symbol (car arr)) (by_length (cdr arr)))\n\
    \            (let ([head (car arr)])\n              (if (< head 9)\n         \
    \         (cons (string->symbol (string->number (string->symbol head))) (by_length\
    \ (cdr arr)))\n                  (cons (string->symbol (string->number (string->symbol\
    \ head))) (by_length (cdr arr))))))))\n", "  (cond\n    [(empty? arr) empty]\n\
    \    [(number? (first arr)) (cons (first arr) (map #(cons % \"One\") (by_length\
    \ (rest arr))))]\n    [else (by_length (rest arr))]))\n", "  (cond\n    [(empty?\
    \ arr) empty]\n    [(number? (car arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) empty))]\n    [else (cons (by_length (cdr arr)) (by_length (cdr arr)))]))\n",
  "  (if (empty? arr)\n      '()\n      (let ([head (first arr)])\n        (if (<\
    \ head 9)\n            (cons (string->symbol (string->string head)) (by_length\
    \ (rest arr)))\n            (cons (string->symbol (string->string head)) (by_length\
    \ (rest arr)))))\n      )\n    )\n", "  (if (empty? arr)\n      '()\n      (let\
    \ ([head (first arr)])\n        (if (< head 9)\n            (cons (string-append\
    \ (symbol->string head) \"One\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (symbol->string head) \"Two\")\n           \
    \       (by_length (rest arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Three\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Four\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (symbol->string head) \"Five\"\
    )\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Six\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (symbol->string head) \"Seven\")\n         \
    \         (by_length (rest arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Eight\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Nine\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (symbol->string head) \"Ten\"\
    )\n                  (by_length (rest arr)))))))\n", "  (if (null? arr)\n    \
    \  '()\n      (let ([nums (map number->string arr)\n            lengths (map length\
    \ (map string->number nums))\n            lengths-sorted (sort lengths reverse\
    \ #:key (lambda (x y) (- x y)))\n            lengths-reversed (sort lengths-sorted\
    \ #:key (lambda (x y) (- y x)))\n            lengths-reversed-names (map string->string\
    \ lengths-reversed)])\n        (map (lambda (x y) (cond [(< x 9) (cons \"Nine\"\
    \ y)] [(< x 8) \"Eight\" y] [(< x 7) \"Seven\" y] [(< x 6) \"Six\" y] [(< x 5)\
    \ \"Five\" y] [(< x 4) \"Four\" y] [(< x 3) \"Three\" y] [(< x 2) \"Two\" y] [(<\
    \ x 1) \"One\" y] [(> x 1) (cons \"One\" y)])) nums lengths-reversed-names))))\n",
  "  (if (null? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head\
    \ 9)\n            (cons (cons (string->symbol (string->string head)) (by_length\
    \ (cdr arr)))\n                  (by_length (cdr arr)))\n            (cons (string->symbol\
    \ (string->string head))\n                  (by_length (cdr arr)))))))\n", " \
    \ (if (empty? arr)\n      '()\n      (let ([head (first arr)])\n        (if (<\
    \ head 10)\n            (cons (string->symbol (string->string head)) (by_length\
    \ (rest arr)))\n            (cons (string->symbol (string->string head)) (by_length\
    \ (rest arr)))))\n      )\n    )\n  )\n", "  (if (null? arr)\n      '()\n    \
    \  (let ([arr (reverse arr)])\n        (map (lambda (x) (cond ((< x 9) (cons (string->symbol\
    \ (string->string x)) '()))\n                                 ((> x 9) (cons (string->symbol\
    \ (string->string x)) '()))\n                                 (else (cons (string->symbol\
    \ (string->string x)) '()))))\n              arr))))\n", "  (if (empty? arr)\n\
    \      '()\n      (let ([head (car arr)])\n        (if (< head 9)\n          \
    \  (cons (string-append (symbol->string head) \"One\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Two\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Three\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Four\")\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Five\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Six\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Seven\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Eight\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Nine\")\n          \
    \        (by_length (cdr arr)))))))\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>", "  (if (empty? arr)\n      '()\n      (let ([arr (reverse arr)])\n\
    \        (map (lambda (x)\n               (cond [(< x 9) (list \"One\" \"Two\"\
    \ \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")]\n       \
    \              [(< x 8) (list \"Eight\" \"Five\" \"Four\" \"Three\" \"Two\" \"\
    Two\" \"One\" \"One\")]\n                     [(< x 7) (list \"Seven\" \"Six\"\
    \ \"Five\" \"Four\" \"Three\" \"Two\" \"Two\" \"One\" \"One\")]\n            \
    \         [(< x 6) (list \"Six\" \"Five\" \"Four\" \"Three\" \"Two\" \"Two\" \"\
    One\" \"One\")]\n                     [(< x 5) (list \"Five\" \"Four\" \"Three\"\
    \ \"Two\" \"Two\" \"One\" \"One\")]\n                     [(< x 4) (list \"Four\"\
    \ \"Three\" \"Two\" \"Two\" \"One\" \"One\")]\n                     [(< x 3) (list\
    \ \"Three\" \"Two\" \"Two\" \"One\" \"One\")]\n                     [(< x 2) (list\
    \ \"Two\" \"Two\" \"One\" \"One\")]\n                     [(< x 1) (list \"One\"\
    \ \"Two\" \"One\" \"One\")]\n                     [else (list \"One\" \"Two\"\
    \ \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")]))\n     \
    \         arr))))\n", "  (if (empty? arr)\n      '()\n      (let ([head (car arr)])\n\
    \        (if (< head 9)\n            (cons (string-append (symbol->string head)\
    \ \"One\")\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Two\")\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append (symbol->string head) \"Three\")\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Four\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Five\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Six\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Seven\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Eight\")\n         \
    \         (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Nine\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Ten\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Eleven\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Twelve\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Thirteen\")\n      \
    \            (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Fourteen\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Fifteen\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Sixteen\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Seventeen\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Eighteen\")\n      \
    \            (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Nineteen\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Tw", "  (if (empty? arr)\n      '()\n\
    \      (let ([arr (reverse arr)])\n        (map (lambda (x) (cond [(< x 9) (list\
    \ \"Nine\" \"Eight\" \"Seven\" \"Six\" \"Five\" \"Four\" \"Three\" \"Two\" \"\
    One\")\n                                   (else (list \"One\" \"Two\" \"Three\"\
    \ \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\"))])\n              arr))))\n",
  "  (if (empty? arr)\n      '()\n      (let ([head (first arr)])\n        (if (<\
    \ head 9)\n            (cons (string->symbol (symbol->string head)) (by_length\
    \ (rest arr)))\n            (cons (string->symbol (symbol->string head)) (by_length\
    \ (rest arr)))))\n      )\n    )\n  )\n", "  (if (empty? arr)\n      '()\n   \
    \   (let ([head (car arr)])\n        (if (< head 9)\n            (cons (string-append\
    \ \"One\" (number->string head))\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append \"Nine\" (number->string head))\n           \
    \       (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"-\" (number->string (car arr)))\n                  (by_length (cdr arr))))))\n",
  "  (if (empty? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head\
    \ 9)\n            (cons (string-append (symbol->string head) \"One\")\n      \
    \            (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Two\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Three\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Four\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Five\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Six\")\n           \
    \       (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Seven\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Eight\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Nine\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Ten\")\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append (symbol->string head) \"Eleven\")\n         \
    \         (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Twelve\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Thirteen\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Fourteen\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Fifteen\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Sixteen\")\n       \
    \           (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Seventeen\")\n                  (by_length (cdr arr)))\n           \
    \ (cons (string-append (symbol->string head) \"Eighteen\")\n                 \
    \ (by_length (cdr arr)))\n            (cons (string-append (symbol->string head)\
    \ \"Nineteen\")\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Tw", "  (if (empty? arr)\n      '()\n      (let ([head\
    \ (car arr)])\n        (if (< head 9)\n            (cons (string-append (symbol->string\
    \ head) \"-\" (symbol->string head)) (by_length (cdr arr)))\n            (cons\
    \ (symbol->string head) (by_length (cdr arr)))))))\n", "  (if (null? arr)\n  \
    \    '()\n      (let ([len (length arr)])\n        (if (= len 0)\n           \
    \ '()\n            (let ([head (car arr)])\n              (if (< head 10)\n  \
    \                (cons (string-append (symbol->string head) \"One\")\n       \
    \                 (by_length (cdr arr)))\n                  (cons (string-append\
    \ (symbol->string head) \"Two\")\n                        (by_length (cdr arr)))\n\
    \                  (cons (string-append (symbol->string head) \"Three\")\n   \
    \                     (by_length (cdr arr)))\n                  (cons (string-append\
    \ (symbol->string head) \"Four\")\n                        (by_length (cdr arr)))\n\
    \                  (cons (string-append (symbol->string head) \"Five\")\n    \
    \                    (by_length (cdr arr)))\n                  (cons (string-append\
    \ (symbol->string head) \"Six\")\n                        (by_length (cdr arr)))\n\
    \                  (cons (string-append (symbol->string head) \"Seven\")\n   \
    \                     (by_length (cdr arr)))\n                  (cons (string-append\
    \ (symbol->string head) \"Eight\")\n                        (by_length (cdr arr)))\n\
    \                  (cons (string-append (symbol->string head) \"Nine\")\n    \
    \                    (by_length (cdr arr))))))))\n", "  (if (empty? arr)\n   \
    \   '()\n      (let ([head (first arr)])\n        (if (< head 9)\n           \
    \ (cons (string->symbol (string->string head)) (by_length (rest arr)))\n     \
    \       (cons (string->symbol (string->string head)) (by_length (rest arr)))))\n\
    \      )\n    )\n  )\n", "  (if (null? arr)\n      '()\n      (let ([head (car\
    \ arr)])\n        (if (< head 9)\n            (cons (string-append (symbol->string\
    \ head) \"One\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Two\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Three\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Four\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Five\")\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Six\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Seven\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Eight\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Nine\")\n                  (by_length (cdr arr)))))))\n",
  "  (if (empty? arr)\n      '()\n      (let ([head (first arr)])\n        (if (<\
    \ head 9)\n            (cons (cons head (cons \"One\" \"Two\" \"Three\" \"Four\"\
    \ \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")) (by_length (rest arr)))\n  \
    \          (cons (cons head (cons \"Ten\" \"Eleven\" \"Twelve\" \"Thirteen\" \"\
    Fourteen\" \"Fifteen\" \"Sixteen\" \"Seventeen\" \"Eighteen\" \"Nineteen\")) (by_length\
    \ (rest arr)))))))\n", "  (if (null? arr)\n      '()\n      (let ([head (car arr)])\n\
    \        (if (< head 9)\n            (cons (cons (substring head 1 1) (substring\
    \ head 2 1))\n                  (by_length (cdr arr)))\n            (cons (substring\
    \ head 1 1) (by_length (cdr arr)))))))\n", "  (if (null? arr)\n      '()\n   \
    \   (let ([nums (map number->string (reverse (sort (map string->number (range\
    \ 1 9))))])\n            (strs (map string->string nums))])\n        (map string->string\
    \ (reverse (sort (map string->number (range 1 9))))\n             (map string->string\
    \ nums)))))\n", "  (if (empty? arr)\n      '()\n      (let ([head (car arr)])\n\
    \        (if (< head 9)\n            (cons (string-append (number->string head)\
    \ \"One\")\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Two\")\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append (number->string head) \"Three\")\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Four\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Five\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Six\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Seven\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Eight\")\n         \
    \         (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Nine\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Ten\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Eleven\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Twelve\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Thirteen\")\n      \
    \            (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Fourteen\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Fifteen\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Sixteen\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Seventeen\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Eighteen\")\n      \
    \            (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Nineteen\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Tw", "  (if (null? arr)\n      '()\n\
    \      (let ([arr (sort arr (lambda (x) (< (length x) 9))\n                  \
    \     (lambda (x) (< (length x) 9) (< x 9)))])\n        (map (lambda (x) (if (<\
    \ x 9) (cond [(< x 1) \"One\"]\n                                        [(< x\
    \ 2) \"Two\"]\n                                        [(< x 3) \"Three\"]\n \
    \                                       [(< x 4) \"Four\"]\n                 \
    \                       [(< x 5) \"Five\"]\n                                 \
    \       [(< x 6) \"Six\"]\n                                        [(< x 7) \"\
    Seven\"]\n                                        [(< x 8) \"Eight\"]\n      \
    \                                  [(< x 9) \"Nine\"]\n                      \
    \                  [else \"???\"])\n                        x))\n        (reverse\
    \ arr))))\n", "  (if (empty? arr)\n      '()\n      (let ([head (car arr)])\n\
    \        (if (< head 9)\n            (cons (string-append (symbol->string head)\
    \ \"One\")\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Two\")\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append (symbol->string head) \"Three\")\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Four\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Five\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Six\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Seven\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Eight\")\n         \
    \         (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Nine\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Ten\")\n                  (by_length\
    \ (cdr arr)))))))\n", "  (if (empty? arr)\n      '()\n      (let ([head (car arr)])\n\
    \        (if (< head 9)\n            (cons (string-append (symbol->string head)\
    \ \"One\")\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Two\")\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append (symbol->string head) \"Three\")\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Four\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Five\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Six\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Seven\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Eight\")\n         \
    \         (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Nine\")\n                  (by_length (cdr arr)))))))\n", "  (if (empty?\
    \ arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head 9)\n   \
    \         (cons (string-append (name head) (by_length (cdr arr)))\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append (name head)\
    \ (by_length (cdr arr)))\n                  (by_length (cdr arr)))))))\n", " \
    \ (if (empty? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head\
    \ 9)\n            (cons (reverse (cons (string->number head) '(One Two Three Four\
    \ Five Six Seven Eight Nine))) (by_length (cdr arr)))\n            (cons (reverse\
    \ (cons (string->number head) '(One Two Three Four Five Six Seven Eight Nine)))\
    \ (by_length (cdr arr)))))\n  )\n)\n", "  (if (empty? arr)\n      '()\n      (let\
    \ ([head (first arr)])\n        (if (< head 9)\n            (cons (string-append\
    \ (symbol->string head) \"One\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (symbol->string head) \"Two\")\n           \
    \       (by_length (rest arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Three\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Four\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (symbol->string head) \"Five\"\
    )\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Six\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (symbol->string head) \"Seven\")\n         \
    \         (by_length (rest arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Eight\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Nine\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (symbol->string head) \"Ten\"\
    )\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Eleven\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (symbol->string head) \"Twelve\")\n        \
    \          (by_length (rest arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Thirteen\")\n                  (by_length (rest arr)))\n           \
    \ (cons (string-append (symbol->string head) \"Fourteen\")\n                 \
    \ (by_length (rest arr)))\n            (cons (string-append (symbol->string head)\
    \ \"Fifteen\")\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Sixteen\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (symbol->string head) \"Seventeen\")\n     \
    \             (by_length (rest arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Eighteen\")\n                  (by_length (rest arr)))\n           \
    \ (cons (string-append (symbol->string head) \"Nineteen\")\n                 \
    \ (by_length (rest arr)))\n            (cons (string-append (symbol->string head)\
    \ \"Twenty\")\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (symbol", "  (if (empty? arr)\n      '()\n      (let ([head (car arr)])\n  \
    \      (if (< head 9)\n            (append (reverse-sort (map #(cons (number->string\
    \ %) '(One Two Three Four Five Six Seven Eight Nine)) arr))\n            (append\
    \ (reverse-sort (map #(cons (number->string head) '(One Two Three Four Five Six\
    \ Seven Eight Nine)) arr))\n            (append (reverse-sort (map #(cons (number->string\
    \ head) '(One Two Three Four Five Six Seven Eight Nine)) arr))\n            (append\
    \ (reverse-sort (map #(cons (number->string head) '(One Two Three Four Five Six\
    \ Seven Eight Nine)) arr))\n            (append (reverse-sort (map #(cons (number->string\
    \ head) '(One Two Three Four Five Six Seven Eight Nine)) arr))\n            (append\
    \ (reverse-sort (map #(cons (number->string head) '(One Two Three Four Five Six\
    \ Seven Eight Nine)) arr))\n            (append (reverse-sort (map #(cons (number->string\
    \ head) '(One Two Three Four Five Six Seven Eight Nine)) arr))\n            (append\
    \ (reverse-sort (map #(cons (number->string head) '(One Two Three Four Five Six\
    \ Seven Eight Nine)) arr))\n            (append (reverse-sort (map #(cons (number->string\
    \ head) '(One Two Three Four Five Six Seven Eight Nine)) arr))\n            (append\
    \ (reverse-sort (map #(cons (number->string head) '(One Two Three Four Five Six\
    \ Seven Eight Nine)) arr))\n            (append (reverse-sort (map #(cons (number->string\
    \ head) '(One Two Three Four Five Six Seven Eight Nine)) arr))\n            (append\
    \ (reverse-sort (map #(cons (number->string head) '(One Two Three Four Five Six\
    \ Seven Eight Nine)) arr))\n            (append (reverse-sort (map #(cons (number->string\
    \ head) '(One ", "  (if (null? arr)\n      '()\n      (let ([head (car arr)])\n\
    \        (if (< head 9)\n            (cons (string-append \"One\" (by_length (cdr\
    \ arr)))\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ \"Nine\" (by_length (cdr arr)))\n                  (by_length (cdr arr)))))))\n",
  "  (if (empty? arr)\n      '()\n      (let ([head (first arr)])\n        (if (<\
    \ head 9)\n            (cons (string-append (number->string head) \"One\")\n \
    \                 (by_length (rest arr)))\n            (cons (string-append (number->string\
    \ head) \"Two\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (number->string head) \"Three\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (number->string head) \"Four\"\
    )\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (number->string head) \"Five\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (number->string head) \"Six\")\n           \
    \       (by_length (rest arr)))\n            (cons (string-append (number->string\
    \ head) \"Seven\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (number->string head) \"Eight\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (number->string head) \"Nine\"\
    )\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (number->string head) \"Ten\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (number->string head) \"Eleven\")\n        \
    \          (by_length (rest arr)))\n            (cons (string-append (number->string\
    \ head) \"Twelve\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (number->string head) \"Thirteen\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (number->string head) \"Fourteen\"\
    )\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (number->string head) \"Fifteen\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (number->string head) \"Sixteen\")\n       \
    \           (by_length (rest arr)))\n            (cons (string-append (number->string\
    \ head) \"Seventeen\")\n                  (by_length (rest arr)))\n          \
    \  (cons (string-append (number->string head) \"Eighteen\")\n                \
    \  (by_length (rest arr)))\n            (cons (string-append (number->string head)\
    \ \"Nineteen\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (number->string head) \"Twenty\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (number", "  (if (empty? arr)\n\
    \      '()\n      (let ([nums (map number->string (reverse (range 1 9))))\n  \
    \          (nums (map string->number (map string->string nums)))\n           \
    \ (nums (map string->string nums))]\n        (cons (if (< 1 (length nums)) \"\"\
    \ nums) (by_length (rest arr)))))\n", "  (if (empty? arr)\n      '()\n      (let\
    \ ([head (first arr)])\n        (if (< head 9)\n            (cons (reverse (map\
    \ #(cons (string-append \"One\" (regexp-replace (number->string %) \"\\\\D\"))\n\
    \                                        (number->string head)))\n           \
    \        (by_length (rest arr)))\n            (cons (reverse (map #(cons (string-append\
    \ \"Nine\" (regexp-replace (number->string %) \"\\\\D\"))\n                  \
    \                      (number->string head)))\n                   (by_length\
    \ (rest arr)))))))\n", "  (if (null? arr)\n      '()\n      (let ([head (car arr)])\n\
    \        (if (< head 9)\n            (cons (string-append (symbol->string head)\
    \ \"One\")\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Two\")\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append (symbol->string head) \"Three\")\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Four\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Five\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Six\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Seven\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Eight\")\n         \
    \         (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Nine\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Ten\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Eleven\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Twelve\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Thirteen\")\n      \
    \            (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Fourteen\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Fifteen\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Sixteen\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Seventeen\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Eighteen\")\n      \
    \            (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Nineteen\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Tw", "  (if (empty? arr)\n      '()\n\
    \      (let ([head (car arr)])\n        (if (< head 9)\n            (cons (cons\
    \ head (cons \"One\" \"Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"\
    Eight\" \"Nine\"))\n                  (by_length (cdr arr)))\n            (cons\
    \ (cons head (cons \"Ten\" \"Eleven\" \"Twelve\" \"Thirteen\" \"Fourteen\" \"\
    Fifteen\" \"Sixteen\" \"Seventeen\" \"Eighteen\" \"Nineteen\"))\n            \
    \      (by_length (cdr arr))))))\n", "  (if (empty? arr)\n      '()\n      (let\
    \ ([head (car arr)])\n        (if (< head 9)\n            (cons (reverse (map\
    \ #(cons \"Nine\" 9) #(cons \"Eight\" 8) #(cons \"Seven\" 7) #(cons \"Six\" 6)\
    \ #(cons \"Five\" 5) #(cons \"Four\" 4) #(cons \"Three\" 3) #(cons \"Two\" 2)\
    \ #(cons \"One\" head))))\n            (cons (reverse (map #(cons \"One\" 1) #(cons\
    \ \"Two\" 2) #(cons \"Three\" 3) #(cons \"Four\" 4) #(cons \"Five\" 5) #(cons\
    \ \"Six\" 6) #(cons \"Seven\" 7) #(cons \"Eight\" 8) #(cons \"Nine\" 9))))))))\n",
  "  (if (null? arr)\n      '()\n      (let ([nums (map number->string arr)\n    \
    \        lengths (map length (map string->number nums))\n            lengths-sorted\
    \ (sort lengths reverse <)\n            lengths-reversed (sort lengths-sorted\
    \ <)])\n        (map (\u03BB (n) (cond [(< n 9) (cons \"Nine\" (n/10))]\n    \
    \                      [(< n 8) (cons \"Eight\" (n/10))]\n                   \
    \       [(< n 7) (cons \"Seven\" (n/10))]\n                          [(< n 6)\
    \ (cons \"Six\" (n/10))]\n                          [(< n 5) (cons \"Five\" (n/10))]\n\
    \                          [(< n 4) (cons \"Four\" (n/10))]\n                \
    \          [(< n 3) (cons \"Three\" (n/10))]\n                          [(< n\
    \ 2) (cons \"Two\" (n/10))]\n                          [(< n 1) (cons \"One\"\
    \ (n/10))]\n                          [else (cons \"Zero\" (n/10))])) nums))))\n",
  "  (if (empty? arr)\n      '()\n      (let ([head (first arr)])\n        (if (<\
    \ head 9)\n            (cons (string->symbol (string->string head)) (by_length\
    \ (rest arr)))\n            (cons (string->symbol (string->string head)) (by_length\
    \ (rest arr)))))\n      )\n    )\n  )\n", "  (if (null? arr)\n      '()\n    \
    \  (let ([head (car arr)])\n        (if (< head 9)\n            (cons (reverse\
    \ (cons (cons \"One\" head) (cdr arr)))\n                  (by_length (cdr arr)))\n\
    \            (cons (reverse (cons (cons \"Two\" head) (cdr arr)))\n          \
    \        (by_length (cdr arr)))\n            (cons (reverse (cons (cons \"Three\"\
    \ head) (cdr arr)))\n                  (by_length (cdr arr)))\n            (cons\
    \ (reverse (cons (cons \"Four\" head) (cdr arr)))\n                  (by_length\
    \ (cdr arr)))\n            (cons (reverse (cons (cons \"Five\" head) (cdr arr)))\n\
    \                  (by_length (cdr arr)))\n            (cons (reverse (cons (cons\
    \ \"Six\" head) (cdr arr)))\n                  (by_length (cdr arr)))\n      \
    \      (cons (reverse (cons (cons \"Seven\" head) (cdr arr)))\n              \
    \    (by_length (cdr arr)))\n            (cons (reverse (cons (cons \"Eight\"\
    \ head) (cdr arr)))\n                  (by_length (cdr arr)))\n            (cons\
    \ (reverse (cons (cons \"Nine\" head) (cdr arr)))\n                  (by_length\
    \ (cdr arr))))))\n", "  (if (null? arr)\n      '()\n      (let ([head (car arr)])\n\
    \        (if (< head 10)\n            (cons (string->symbol (string->string head))\
    \ (by_length (cdr arr)))\n            (cons (string->symbol (string->string head))\
    \ (by_length (cdr arr)))))\n      )\n    )\n", "  (if (empty? arr)\n      '()\n\
    \      (let ([head (first arr)])\n        (if (< head 9)\n            (cons (cons\
    \ (string->symbol (string->string head)) (cons (string->symbol \"One\") (by_length\
    \ (rest arr))))\n                  (by_length (rest arr)))\n            (cons\
    \ (cons (string->symbol (string->string head)) (cons (string->symbol \"One\")\
    \ (by_length (rest arr))))\n                  (by_length (rest arr))))))\n", " \
    \ (cond\n    [(empty? arr) empty]\n    [(= (length arr) 1) (cons (first arr) empty)]\n\
    \    [else (cons (first arr) (sort_by_length (rest arr)))]))\n", "  (if (empty?\
    \ arr)\n      '()\n      (let ([head (first arr)])\n        (if (< head 9)\n \
    \           (cons (cons head (cons \"One\" \"Two\" \"Three\" \"Four\" \"Five\"\
    \ \"Six\" \"Seven\" \"Eight\" \"Nine\")) (by_length (rest arr)))\n           \
    \ (cons (cons head (cons \"Ten\" \"Eleven\" \"Twelve\" \"Thirteen\" \"Fourteen\"\
    \ \"Fifteen\" \"Sixteen\" \"Seventeen\" \"Eighteen\" \"Nineteen\")) (by_length\
    \ (rest arr)))))))\n", "  (if (null? arr)\n      '()\n      (let ([head (car arr)])\n\
    \        (if (< head 9)\n            (cons (string->symbol (string->string head))\
    \ (by_length (cdr arr)))\n            (cons (string->symbol (string->string head))\
    \ (by_length (cdr arr)))))\n      )\n  )\n", "  (if (null? arr)\n      '()\n \
    \     (let ([head (car arr)])\n        (if (< head 9)\n            (cons (string->symbol\
    \ (string->string head)) (by_length (cdr arr)))\n            (cons (string->symbol\
    \ (string->string head)) (by_length (cdr arr)))))\n      )\n    )\n", "  (if (empty?\
    \ arr)\n      '()\n      (let ([head (first arr)])\n        (if (< head 9)\n \
    \           (cons (cons head (cons \"One\" \"Two\" \"Three\" \"Four\" \"Five\"\
    \ \"Six\" \"Seven\" \"Eight\" \"Nine\"))\n                  (by_length (rest arr)))\n\
    \            (cons (cons head (cons \"Zero\" \"One\" \"Two\" \"Three\" \"Four\"\
    \ \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\"))\n                  (by_length\
    \ (rest arr)))))))\n", "  (if (empty? arr)\n      '()\n      (let ([head (first\
    \ arr)])\n        (if (< head 9)\n            (let ([tail (by_length (rest arr))])\n\
    \              (cons (cons head (cons \"One\" \"Two\" \"Three\" \"Four\" \"Five\"\
    \ \"Six\" \"Seven\" \"Eight\" \"Nine\")) tail))\n            (cons (cons head\
    \ (cons \"One\" \"Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\"\
    \ \"Nine\")) (by_length (rest arr)))))\n      ))\n", "  (cond\n    [(empty? arr)\
    \ empty]\n    [(number? (first arr)) (cons (first arr) (by_length (rest arr)))]\n\
    \    [else (cons (first arr) (by_length (rest arr)))]))\n", "  (if (empty? arr)\n\
    \      '()\n      (let ([head (first arr)])\n        (if (< head 9)\n        \
    \    (cons (string-append (name head) (by_length (rest arr)))\n              \
    \    (by_length (rest arr)))\n            (cons (string-append (name head) (by_length\
    \ (rest arr)))\n                  (by_length (rest arr)))))))\n", "  (if (empty?\
    \ arr)\n      '()\n      (let ([head (first arr)])\n        (if (< head 9)\n \
    \           (cons (string-append (number->string head) \"One\")\n            \
    \      (by_length (rest arr)))\n            (cons (string-append (number->string\
    \ head) \"Two\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (number->string head) \"Three\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (number->string head) \"Four\"\
    )\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (number->string head) \"Five\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (number->string head) \"Six\")\n           \
    \       (by_length (rest arr)))\n            (cons (string-append (number->string\
    \ head) \"Seven\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (number->string head) \"Eight\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (number->string head) \"Nine\"\
    )\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (number->string head) \"Ten\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (number->string head) \"Eleven\")\n        \
    \          (by_length (rest arr)))\n            (cons (string-append (number->string\
    \ head) \"Twelve\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (number->string head) \"Thirteen\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (number->string head) \"Fourteen\"\
    )\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (number->string head) \"Fifteen\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (number->string head) \"Sixteen\")\n       \
    \           (by_length (rest arr)))\n            (cons (string-append (number->string\
    \ head) \"Seventeen\")\n                  (by_length (rest arr)))\n          \
    \  (cons (string-append (number->string head) \"Eighteen\")\n                \
    \  (by_length (rest arr)))\n            (cons (string-append (number->string head)\
    \ \"Nineteen\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (number->string head) \"Twenty\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (number", "  (if (null? arr)\n\
    \      '()\n      (let ([head (car arr)])\n        (if (< head 9)\n          \
    \  (cons (string-append \"One\" (number->string head))\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append \"Nine\" (number->string head))\n\
    \                  (by_length (cdr arr)))))))\n", "  (if (empty? arr)\n      '()\n\
    \      (let ([head (first arr)])\n        (if (< head 9)\n            (cons (cons\
    \ head (cons \"One\" (by_length (rest arr)))) (cons head (cons \"Two\" (by_length\
    \ (rest arr))))\n            (cons (cons head (cons \"Three\" (by_length (rest\
    \ arr)))) (cons head (cons \"Four\" (by_length (rest arr))))\n            (cons\
    \ (cons head (cons \"Five\" (by_length (rest arr)))) (cons head (cons \"Six\"\
    \ (by_length (rest arr))))\n            (cons (cons head (cons \"Seven\" (by_length\
    \ (rest arr)))) (cons head (cons \"Eight\" (by_length (rest arr))))\n        \
    \    (cons (cons head (cons \"Nine\" (by_length (rest arr)))) (cons head (cons\
    \ \"Ten\" (by_length (rest arr))))\n            (cons (cons head (cons \"Eleven\"\
    \ (by_length (rest arr)))) (cons head (cons \"Twelve\" (by_length (rest arr))))\n\
    \            (cons (cons head (cons \"Thirteen\" (by_length (rest arr)))) (cons\
    \ head (cons \"Fourteen\" (by_length (rest arr))))\n            (cons (cons head\
    \ (cons \"Fifteen\" (by_length (rest arr)))) (cons head (cons \"Sixteen\" (by_length\
    \ (rest arr))))\n            (cons (cons head (cons \"Seventeen\" (by_length (rest\
    \ arr)))) (cons head (cons \"Eighteen\" (by_length (rest arr))))\n           \
    \ (cons (cons head (cons \"Nineteen\" (by_length (rest arr)))) (cons head (cons\
    \ \"Twenty\" (by_length (rest arr))))\n            (cons (cons head (cons \"Twenty-one\"\
    \ (by_length (rest arr)))) (cons head (cons \"Twenty-two\" (by_length (rest arr))))\n\
    \            (cons (cons head (cons \"Twenty-three\" (by_length (rest arr))))\
    \ (cons head (cons \"Twenty-four\" (by_length (rest arr))))\n            (cons\
    \ (cons head (cons \"Twenty-five\" (by_length (rest arr)))) (cons head (cons \"\
    Twenty-six\" ", "  (if (empty? arr)\n      '()\n      (let ([head (car arr)])\n\
    \        (if (< head 9)\n            (cons (string->symbol (symbol->string head))\
    \ (by_length (cdr arr)))\n            (cons (string->symbol (symbol->string head))\
    \ (by_length (cdr arr)))))\n      )\n    )\n", "  (if (empty? arr)\n      '()\n\
    \      (let ([head (first arr)])\n        (if (< head 9)\n            (cons (string-append\
    \ (symbol->string head) \" \") (by_length (rest arr)))\n            (cons (symbol->string\
    \ head) (by_length (rest arr)))))))\n", "  (if (empty? arr)\n      '()\n     \
    \ (let ([len (length arr)])\n        (if (= len 0)\n            '()\n        \
    \    (let ([head (first arr)])\n              (if (< head 9)\n               \
    \   (cons (string-append (number->string head) \"One\")\n                    \
    \    (by_length (rest arr)))\n                  (cons (string-append (number->string\
    \ head) \"Two\")\n                        (by_length (rest arr)))\n          \
    \        (cons (string-append (number->string head) \"Three\")\n             \
    \           (by_length (rest arr)))\n                  (cons (string-append (number->string\
    \ head) \"Four\")\n                        (by_length (rest arr)))\n         \
    \         (cons (string-append (number->string head) \"Five\")\n             \
    \           (by_length (rest arr)))\n                  (cons (string-append (number->string\
    \ head) \"Six\")\n                        (by_length (rest arr)))\n          \
    \        (cons (string-append (number->string head) \"Seven\")\n             \
    \           (by_length (rest arr)))\n                  (cons (string-append (number->string\
    \ head) \"Eight\")\n                        (by_length (rest arr)))\n        \
    \          (cons (string-append (number->string head) \"Nine\")\n            \
    \            (by_length (rest arr))))))))\n", "  (if (null? arr)\n      '()\n\
    \      (let ([arr (sort arr (lambda (x y) (< (length x) 9) (< (length y) 9)))])\n\
    \        (let ([arr (reverse arr)])\n          (let ([arr (map #(cond [(< x 9)\
    \ (cons \"One\" x)]\n                                  [(< x 10) (cons \"Two\"\
    \ x)]\n                                  [(< x 100) (cons \"Three\" x)]\n    \
    \                              [(< x 1000) (cons \"Four\" x)]\n              \
    \                    [(< x 10000) (cons \"Five\" x)]\n                       \
    \           [(< x 100000) (cons \"Six\" x)]\n                                \
    \  [(< x 1000000) (cons \"Seven\" x)]\n                                  [(< x\
    \ 10000000) (cons \"Eight\" x)]\n                                  [(< x 100000000)\
    \ (cons \"Nine\" x)]\n                                  [(< x 1000000000) (cons\
    \ \"Ten\" x)]\n                                  [(< x 10000000000) (cons \"Eleven\"\
    \ x)]\n                                  [(< x 100000000000) (cons \"Twelve\"\
    \ x)]\n                                  [(< x 1000000000000) (cons \"Thirteen\"\
    \ x)]\n                                  [(< x 10000000000000) (cons \"Fourteen\"\
    \ x)]\n                                  [(< x 100000000000000) (cons \"Fifteen\"\
    \ x)]\n                                  [(< x 1000000000000000) (cons \"Sixteen\"\
    \ x)]\n                                  [(< x 10000000000000000) (cons \"Seventeen\"\
    \ x)]\n                                  [(< x 100000000000000000) (cons \"Eighteen\"\
    \ x)]\n                                  [(< x 1000000000000000000) (cons \"Nineteen\"\
    \ x)]\n                                  [(< x 10000000000000000000) (cons \"\
    Twenty\" x)]\n                                  [(< x 100000000000000000000) (cons\
    \ \"Twenty-one\" x)]\n                                  [(< x 1000000000000000000000)\
    \ (cons \"Twenty-two\" x)]\n                                  [(< x 10000000000000000000000)\
    \ (cons \"Twenty-three\" x)]\n                                  [(< x 100000000000000000000000)\
    \ (cons \"Twenty-four\" x)]\n                                  [(< x 1000000000000000000000000)\
    \ (cons \"Twenty-five\" x)]\n                                  [(< x 10000000000000000000000000)\
    \ (cons \"Twenty-six\" x)]\n                                  [(< x 100000000000000000000000000)\
    \ (cons \"Twenty-seven\" x)]\n                                  [(< x 1000000000000000000000000000)\
    \ (cons \"Twenty-eight\" x)]\n                                  [(< x 100000000000000000000000000",
  "  (if (empty? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head\
    \ 9)\n            (cons (cons head (cons \"One\" \"Two\" \"Three\" \"Four\" \"\
    Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\"))\n                  (by_length (cdr\
    \ arr)))\n            (cons (cons head (cons \"Ten\" \"Eleven\" \"Twelve\" \"\
    Thirteen\" \"Fourteen\" \"Fifteen\" \"Sixteen\" \"Seventeen\" \"Eighteen\" \"\
    Nineteen\"))\n                  (by_length (cdr arr))))))\n", "  (if (empty? arr)\n\
    \      '()\n      (let ([head (car arr)])\n        (if (< head 9)\n          \
    \  (cons (string-append (symbol->string head) \"One\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Two\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Three\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Four\")\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Five\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Six\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Seven\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Eight\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Nine\")\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Ten\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Eleven\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Twelve\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Thirteen\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Fourteen\")\n      \
    \            (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Fifteen\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Sixteen\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Seventeen\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Eighteen\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Nineteen\")\n      \
    \            (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Tw", "  (if (empty? arr)\n      '()\n      (let ([head (first arr)])\n\
    \        (if (< head 9)\n            (cons (string->symbol (string->string head))\
    \ (by_length (rest arr)))\n            (cons (symbol->string head) (by_length\
    \ (rest arr)))))))\n", "  (if (empty? arr)\n      '()\n      (let ([head (car\
    \ arr)])\n        (if (< head 9)\n            (cons (string-append (symbol->string\
    \ head) \"-\" (rev (cdr arr)))\n                  (by_length (cdr arr)))\n   \
    \         (cons (symbol->string head) (by_length (cdr arr)))))))\n", "  (if (empty?\
    \ arr)\n      '()\n      (let ([arr (reverse arr)])\n        (map (lambda (x)\
    \ (cond [(< x 9) (cons \"Nine\" (reverse (substring x 0 1)))]\n              \
    \                   [(< x 8) (cons \"Eight\" (reverse (substring x 0 1)))]\n \
    \                                [(< x 7) (cons \"Seven\" (reverse (substring\
    \ x 0 1)))]\n                                 [(< x 6) (cons \"Six\" (reverse\
    \ (substring x 0 1)))]\n                                 [(< x 5) (cons \"Five\"\
    \ (reverse (substring x 0 1)))]\n                                 [(< x 4) (cons\
    \ \"Four\" (reverse (substring x 0 1)))]\n                                 [(<\
    \ x 3) (cons \"Three\" (reverse (substring x 0 1)))]\n                       \
    \          [(< x 2) (cons \"Two\" (reverse (substring x 0 1)))]\n            \
    \                     [(< x 1) (cons \"One\" (reverse (substring x 0 1)))]\n \
    \                                [(< x 0) (cons \"Zero\" (reverse (substring x\
    \ 0 1)))]\n                                 [else (cons x (reverse (substring\
    \ x 0 1)))]))\n               arr))))\n", "  (if (empty? arr)\n      '()\n   \
    \   (let ([head (car arr)])\n        (if (< head 9)\n            (append (by_length\
    \ (cdr arr))\n                    (list (by_length \n                        \
    \  (filter (lambda (x) (= x head)) \n                                 arr)))\n\
    \            (append (by_length (cdr arr))\n                    (list (by_length\
    \ \n                          (filter (lambda (x) (not (= x head)) \n        \
    \                         arr)))\n                    (list (by_length \n    \
    \                      (filter (lambda (x) (= x head)) \n                    \
    \             arr)))))\n        (by_length (cdr arr)))))\n", "  (if (empty? arr)\n\
    \      '()\n      (let ([head (car arr)])\n        (if (< head 9)\n          \
    \  (cons (string-append (symbol->string head) \"-\") (by_length (cdr arr)))\n\
    \            (cons (symbol->string head) (by_length (cdr arr)))))))\n", "  (if\
    \ (empty? arr)\n      '()\n      (let ([head (first arr)])\n        (if (< head\
    \ 9)\n            (cons (string->symbol (symbol->string head)) (by_length (rest\
    \ arr)))\n            (cons (string->symbol (symbol->string head)) (by_length\
    \ (rest arr)))))\n      )\n    )\n", "  (if (empty? arr)\n      '()\n      (let\
    \ ([head (car arr)])\n        (if (< head 9)\n            (cons (cons head (cons\
    \ \"One\" \"Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\"\
    )) (by_length (cdr arr)))\n            (cons (cons head (cons \"Ten\" \"Eleven\"\
    \ \"Twelve\" \"Thirteen\" \"Fourteen\" \"Fifteen\" \"Sixteen\" \"Seventeen\" \"\
    Eighteen\" \"Nineteen\")) (by_length (cdr arr))))))\n", "  (if (empty? arr)\n\
    \      '()\n      (let ([head (car arr)])\n        (if (< head 10)\n         \
    \   (cons (string-append (symbol->string head) \"One\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Two\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Three\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Four\")\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Five\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Six\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Seven\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Eight\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Nine\")\n          \
    \        (by_length (cdr arr)))))))\n", "  (if (null? arr)\n      '()\n      (let\
    \ ([head (car arr)])\n        (if (< head 9)\n            (cons (string->symbol\
    \ (symbol->string head)) (by_length (cdr arr)))\n            (cons (string->symbol\
    \ (symbol->string head)) (by_length (cdr arr)))))\n      )\n    )\n", "  (if (empty?\
    \ arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head 9)\n   \
    \         (cons (string-append (symbol->string head) \"One\")\n              \
    \    (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Two\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Three\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Four\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Five\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Six\")\n           \
    \       (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Seven\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Eight\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Nine\"\
    )\n                  (by_length (cdr arr)))))))\n", "  (if (null? arr)\n     \
    \ '()\n      (let ([head (car arr)])\n        (if (< head 9)\n            (cons\
    \ (string-append (number->string head) \"One\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Two\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Three\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Four\")\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Five\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Six\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Seven\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Eight\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Nine\")\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Ten\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Eleven\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Twelve\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Thirteen\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Fourteen\")\n      \
    \            (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Fifteen\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Sixteen\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Seventeen\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Eighteen\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Nineteen\")\n      \
    \            (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Tw", "  (if (empty? arr)\n      '()\n      (let ([head (first arr)])\n\
    \        (if (< head 9)\n            (cons (string-append (number->string head)\
    \ \"One\")\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (number->string head) \"Two\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (number->string head) \"Three\")\n         \
    \         (by_length (rest arr)))\n            (cons (string-append (number->string\
    \ head) \"Four\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (number->string head) \"Five\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (number->string head) \"Six\"\
    )\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (number->string head) \"Seven\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (number->string head) \"Eight\")\n         \
    \         (by_length (rest arr)))\n            (cons (string-append (number->string\
    \ head) \"Nine\")\n                  (by_length (rest arr)))))))\n", "  (if (empty?\
    \ arr)\n      '()\n      (let ([head (first arr)])\n        (if (< head 9)\n \
    \           (cons (string-append (symbol->string head) \"-\" (reverse (subseq\
    \ arr (+ head 1))))\n                  (by_length (rest arr)))\n            (cons\
    \ (symbol->string head) (by_length (rest arr)))))))\n", "  (if (empty? arr)\n\
    \      '()\n      (let ([head (car arr)])\n        (if (< head 9)\n          \
    \  (cons (string-append \"One\" (substring head 1 1))\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append \"Nine\" (substring head 1 1))\n\
    \                  (by_length (cdr arr)))\n            (cons (string-append \"\
    Two\" (substring head 1 1))\n                  (by_length (cdr arr)))\n      \
    \      (cons (string-append \"Three\" (substring head 1 1))\n                \
    \  (by_length (cdr arr)))\n            (cons (string-append \"Four\" (substring\
    \ head 1 1))\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ \"Five\" (substring head 1 1))\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append \"Six\" (substring head 1 1))\n             \
    \     (by_length (cdr arr)))\n            (cons (string-append \"Seven\" (substring\
    \ head 1 1))\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ \"Eight\" (substring head 1 1))\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append \"Nine\" (substring head 1 1))\n           \
    \       (by_length (cdr arr))))))\n", "  (if (empty? arr)\n      '()\n      (let\
    \ ([head (car arr)])\n        (if (< head 9)\n            (append (reverse (map\
    \ #(cond [(< head %) %]\n                                        [(= head %) %]\n\
    \                                        [else (cons \"One\" %)]) (by_length (cdr\
    \ arr))))\n                   (map #(cond [(< head %) %]\n                   \
    \          [(= head %) %]\n                             [else (cons \"Two\" %)])\
    \ (by_length (cdr arr))))\n            (append (reverse (map #(cond [(< head %)\
    \ %]\n                                        [(= head %) %]\n               \
    \                         [else (cons \"Three\" %)]) (by_length (cdr arr))))\n\
    \                   (map #(cond [(< head %) %]\n                             [(=\
    \ head %) %]\n                             [else (cons \"Four\" %)]) (by_length\
    \ (cdr arr))))\n            (append (reverse (map #(cond [(< head %) %]\n    \
    \                                    [(= head %) %]\n                        \
    \                [else (cons \"Five\" %)]) (by_length (cdr arr))))\n         \
    \          (map #(cond [(< head %) %]\n                             [(= head %)\
    \ %]\n                             [else (cons \"Six\" %)]) (by_length (cdr arr))))\n\
    \            (append (reverse (map #(cond [(< head %) %]\n                   \
    \                     [(= head %) %]\n                                       \
    \ [else (cons \"Seven\" %)]) (by_length (cdr arr))))\n                   (map\
    \ #(cond [(< head %) %]\n                             [(= head %) %]\n       \
    \                      [else (cons \"Eight\" %)]) (by_length (cdr arr))))\n  \
    \          (append (reverse (map #(cond [(< head %) %]\n                     \
    \                   [(= head %) %]\n                                        [else\
    \ (cons \"Nine\" %)]) (by_length (cdr arr))))))))\n", "  (if (empty? arr)\n  \
    \    '()\n      (let ([head (car arr)])\n        (if (< head 9)\n            (cons\
    \ (cons head (cons \"One\" (by_length (cdr arr))))\n                  (by_length\
    \ (cdr arr)))\n            (cons (cons head (cons \"Two\" (by_length (cdr arr))))\n\
    \                  (by_length (cdr arr)))\n            (cons (cons head (cons\
    \ \"Three\" (by_length (cdr arr))))\n                  (by_length (cdr arr)))\n\
    \            (cons (cons head (cons \"Four\" (by_length (cdr arr))))\n       \
    \           (by_length (cdr arr)))\n            (cons (cons head (cons \"Five\"\
    \ (by_length (cdr arr))))\n                  (by_length (cdr arr)))\n        \
    \    (cons (cons head (cons \"Six\" (by_length (cdr arr))))\n                \
    \  (by_length (cdr arr)))\n            (cons (cons head (cons \"Seven\" (by_length\
    \ (cdr arr))))\n                  (by_length (cdr arr)))\n            (cons (cons\
    \ head (cons \"Eight\" (by_length (cdr arr))))\n                  (by_length (cdr\
    \ arr)))\n            (cons (cons head (cons \"Nine\" (by_length (cdr arr))))\n\
    \                  (by_length (cdr arr)))))))\n", "  (if (null? arr)\n      '()\n\
    \      (let ([len (length arr)])\n        (if (= len 0)\n            '()\n   \
    \         (let ([head (first arr)])\n              (if (< head 1)\n          \
    \        (cons (cons head \"One\") (by_length (rest arr)))\n                 \
    \ (cons (cons head \"Two\") (by_length (rest arr)))\n                  (cons (cons\
    \ head \"Three\") (by_length (rest arr)))\n                  (cons (cons head\
    \ \"Four\") (by_length (rest arr)))\n                  (cons (cons head \"Five\"\
    ) (by_length (rest arr)))\n                  (cons (cons head \"Six\") (by_length\
    \ (rest arr)))\n                  (cons (cons head \"Seven\") (by_length (rest\
    \ arr)))\n                  (cons (cons head \"Eight\") (by_length (rest arr)))\n\
    \                  (cons (cons head \"Nine\") (by_length (rest arr))))))))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(number? (first arr)) (cons (first arr)\
    \ (by_length (rest arr)))]\n    [else (cons (first arr) (by_length (rest arr)))]))\n",
  "  (if (null? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head\
    \ 9)\n            (cons (reverse (cons (cons \"One\" head) (by_length (cdr arr))))\n\
    \                  (by_length (cdr arr)))\n            (cons (reverse (cons (cons\
    \ \"Two\" head) (by_length (cdr arr))))\n                  (by_length (cdr arr)))\n\
    \            (cons (reverse (cons (cons \"Three\" head) (by_length (cdr arr))))\n\
    \                  (by_length (cdr arr)))\n            (cons (reverse (cons (cons\
    \ \"Four\" head) (by_length (cdr arr))))\n                  (by_length (cdr arr)))\n\
    \            (cons (reverse (cons (cons \"Five\" head) (by_length (cdr arr))))\n\
    \                  (by_length (cdr arr)))\n            (cons (reverse (cons (cons\
    \ \"Six\" head) (by_length (cdr arr))))\n                  (by_length (cdr arr)))\n\
    \            (cons (reverse (cons (cons \"Seven\" head) (by_length (cdr arr))))\n\
    \                  (by_length (cdr arr)))\n            (cons (reverse (cons (cons\
    \ \"Eight\" head) (by_length (cdr arr))))\n                  (by_length (cdr arr)))\n\
    \            (cons (reverse (cons (cons \"Nine\" head) (by_length (cdr arr))))\n\
    \                  (by_length (cdr arr))))))\n", "  (if (empty? arr)\n      '()\n\
    \      (let ([head (first arr)])\n        (if (< head 9)\n            (cons (string->symbol\
    \ (string->string head)) (by_length (rest arr)))\n            (cons (symbol->string\
    \ head) (by_length (rest arr)))))))\n", "  (if (empty? arr)\n      '()\n     \
    \ (let ([head (car arr)])\n        (if (< head 9)\n            (cons (string-append\
    \ \"One\" (number->string head))\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append \"Nine\" (number->string head))\n           \
    \       (by_length (cdr arr)))))))\n", "  (if (null? arr)\n      '()\n      (let\
    \ ([l (length arr)])\n        (if (= l 9)\n            (let ([x (car arr)])\n\
    \              (cond [(< x 10) (by_length (cdr arr))]\n                    [else\
    \ (cons (cons (car arr) 'One) (by_length (cdr arr)))]\n                    [else\
    \ (cons (cons (car arr) 'Two) (by_length (cdr arr)))]\n                    [else\
    \ (cons (cons (car arr) 'Three) (by_length (cdr arr)))]\n                    [else\
    \ (cons (cons (car arr) 'Four) (by_length (cdr arr)))]\n                    [else\
    \ (cons (cons (car arr) 'Five) (by_length (cdr arr)))]\n                    [else\
    \ (cons (cons (car arr) 'Six) (by_length (cdr arr)))]\n                    [else\
    \ (cons (cons (car arr) 'Seven) (by_length (cdr arr)))]\n                    [else\
    \ (cons (cons (car arr) 'Eight) (by_length (cdr arr)))]\n                    [else\
    \ (cons (cons (car arr) 'Nine) (by_length (cdr arr)))]\n                    [else\
    \ (cons (cons (car arr) 'Ten) (by_length (cdr arr)))]\n                    [else\
    \ (cons (cons (car arr) 'Eleven) (by_length (cdr arr)))]\n                   \
    \ [else (cons (cons (car arr) 'Twelve) (by_length (cdr arr)))]\n             \
    \       [else (cons (cons (car arr) 'Thirteen) (by_length (cdr arr)))]\n     \
    \               [else (cons (cons (car arr) 'Fourteen) (by_length (cdr arr)))]\n\
    \                    [else (cons (cons (car arr) 'Fifteen) (by_length (cdr arr)))]\n\
    \                    [else (cons (cons (car arr) 'Sixteen) (by_length (cdr arr)))]\n\
    \                    [else (cons (cons (car arr) 'Seventeen) (by_length (cdr arr)))]\n\
    \                    [else (cons (cons (car arr) 'Eighteen) (by_length (cdr arr)))]\n\
    \                    [else (cons (cons (car arr) ", "  (if (empty? arr)\n    \
    \  '()\n      (let ([head (car arr)])\n        (if (< head 9)\n            (cons\
    \ (reverse (map #(cons (string->symbol (string->string %)) (list \"One\" \"Two\"\
    \ \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\"))\n       \
    \                     (filter (lambda (x) (<= x head)) arr)))\n            (cons\
    \ (reverse (map #(cons (string->symbol (string->string %)) (list \"One\" \"Two\"\
    \ \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\"))\n       \
    \                     (filter (lambda (x) (> x head)) arr)))))))\n", "  (if (empty?\
    \ arr)\n      '()\n      (let ([arr (reverse (sort arr (lambda (x) (and (<= x\
    \ 9) (>= x 1)))))]\n            (map #(cond [(< x 10) \"One\"]\n             \
    \           [(< x 100) \"Two\"]\n                        [(< x 1000) \"Three\"\
    ]\n                        [(< x 10000) \"Four\"]\n                        [(<\
    \ x 100000) \"Five\"]\n                        [(< x 1000000) \"Six\"]\n     \
    \                   [(< x 10000000) \"Seven\"]\n                        [(< x\
    \ 100000000) \"Eight\"]\n                        [(< x 1000000000) \"Nine\"]\n\
    \                        [(< x 10000000000) \"Ten\"]\n                       \
    \ [(< x 100000000000) \"Eleven\"]\n                        [(< x 1000000000000)\
    \ \"Twelve\"]\n                        [(< x 10000000000000) \"Thirteen\"]\n \
    \                       [(< x 100000000000000) \"Fourteen\"]\n               \
    \         [(< x 1000000000000000) \"Fifteen\"]\n                        [(< x\
    \ 10000000000000000) \"Sixteen\"]\n                        [(< x 100000000000000000)\
    \ \"Seventeen\"]\n                        [(< x 1000000000000000000) \"Eighteen\"\
    ]\n                        [(< x 10000000000000000000) \"Nineteen\"]\n       \
    \                 [(< x 1000000000000000000) \"Twenty\"]\n                   \
    \     [(< x 10000000000000000000) \"Twenty one\"]\n                        [(<\
    \ x 100000000000000000000) \"Twenty two\"]\n                        [(< x 1000000000000000000000)\
    \ \"Twenty three\"]\n                        [(< x 10000000000000000000000) \"\
    Twenty four\"]\n                        [(< x 100000000000000000000000) \"Twenty\
    \ five\"]\n                        [(< x 1000000000000000000000000) \"Twenty six\"\
    ]\n                        [(< x 10000000000000000000000000) \"Twenty seven\"\
    ]\n                        [(< x 100000000000000000000000000) \"Twenty eight\"\
    ]\n                        [(< x 1000000000000000000000000000) \"Twenty nine\"\
    ]\n                        [(< x 10000000000000000000000000000) \"Twenty ten\"\
    ]\n                        [(< x 100000000000000000000000000000) \"Twenty eleven\"\
    ]\n                        [(< x 1000000000000000000000000000000) \"Twenty twelve\"\
    ]\n                        [(< x 10000000000000000000000000000000) \"Twenty thirteen\"\
    ]\n                        [(< x 100000000000000000000000000000000) \"Twenty fourteen\"\
    ]\n                        [(< x 1000000000000000000000000000000000) \"Twenty\
    \ fifteen\"]\n                        [(< x 10000000000000000000000000000000000)\
    \ \"Twenty sixteen\"]\n", "  (if (empty? arr)\n      '()\n      (let ([head (first\
    \ arr)])\n        (if (< head 9)\n            (cons (cons (substring head 1 1)\
    \ \"One\")\n                  (by_length (rest arr)))\n            (cons (cons\
    \ (substring head 1 1) \"Two\")\n                  (by_length (rest arr)))\n \
    \           (cons (cons (substring head 1 1) \"Three\")\n                  (by_length\
    \ (rest arr)))\n            (cons (cons (substring head 1 1) \"Four\")\n     \
    \             (by_length (rest arr)))\n            (cons (cons (substring head\
    \ 1 1) \"Five\")\n                  (by_length (rest arr)))\n            (cons\
    \ (cons (substring head 1 1) \"Six\")\n                  (by_length (rest arr)))\n\
    \            (cons (cons (substring head 1 1) \"Seven\")\n                  (by_length\
    \ (rest arr)))\n            (cons (cons (substring head 1 1) \"Eight\")\n    \
    \              (by_length (rest arr)))\n            (cons (cons (substring head\
    \ 1 1) \"Nine\")\n                  (by_length (rest arr)))\n            (cons\
    \ (cons (substring head 1 1) \"Ten\")\n                  (by_length (rest arr)))\n\
    \            (cons (cons (substring head 1 1) \"Eleven\")\n                  (by_length\
    \ (rest arr)))\n            (cons (cons (substring head 1 1) \"Twelve\")\n   \
    \               (by_length (rest arr)))\n            (cons (cons (substring head\
    \ 1 1) \"Thirteen\")\n                  (by_length (rest arr)))\n            (cons\
    \ (cons (substring head 1 1) \"Fourteen\")\n                  (by_length (rest\
    \ arr)))\n            (cons (cons (substring head 1 1) \"Fifteen\")\n        \
    \          (by_length (rest arr)))\n            (cons (cons (substring head 1\
    \ 1) \"Sixteen\")\n                  (by_length (rest arr)))\n            (cons\
    \ (cons (substring head 1 1) \"Seventeen\")\n                  (by_length (rest\
    \ arr)))\n            (cons (cons (substring head 1 1) \"Eighteen\")\n       \
    \           (by_length (rest arr)))\n            (cons (cons (substring head 1\
    \ 1) \"Nineteen\")\n                  (by_length (rest arr)))\n            (cons\
    \ (cons (substring head 1 1) \"Twenty\")\n                  (by_length (rest arr)))\n\
    \            (cons (cons (substring ", "  (if (null? arr)\n      '()\n      (let\
    \ ([arr (sort arr (lambda (x y) (< (length x) 9) (< (length y) 9)))])\n      \
    \  (let ([arr (reverse arr)])\n          (let ([arr (map #(cond [(< x 9) (cons\
    \ \"One\" x)]\n                                    [(< x 9) (cons \"Two\" x)]\n\
    \                                    [(< x 9) (cons \"Three\" x)]\n          \
    \                          [(< x 9) (cons \"Four\" x)]\n                     \
    \               [(< x 9) (cons \"Five\" x)]\n                                \
    \    [(< x 9) (cons \"Six\" x)]\n                                    [(< x 9)\
    \ (cons \"Seven\" x)]\n                                    [(< x 9) (cons \"Eight\"\
    \ x)]\n                                    [(< x 9) (cons \"Nine\" x)]\n     \
    \                               [(> x 9) (cons \"Ten\" x)]\n                 \
    \                   [(> x 9) (cons \"Eleven\" x)]\n                          \
    \          [(> x 9) (cons \"Twelve\" x)]\n                                   \
    \ [(> x 9) (cons \"Thirteen\" x)]\n                                    [(> x 9)\
    \ (cons \"Fourteen\" x)]\n                                    [(> x 9) (cons \"\
    Fifteen\" x)]\n                                    [(> x 9) (cons \"Sixteen\"\
    \ x)]\n                                    [(> x 9) (cons \"Seventeen\" x)]\n\
    \                                    [(> x 9) (cons \"Eighteen\" x)]\n       \
    \                             [(> x 9) (cons \"Nineteen\" x)]\n              \
    \                      [(< x 9) (cons \"Twenty\" x)]\n                       \
    \             [(< x 9) (cons \"Twenty one\" x)]\n                            \
    \        [(< x 9) (cons \"Twenty two\" x)]\n                                 \
    \   [(< x 9) (cons \"Twenty three\" x)]\n                                    [(<\
    \ x 9) (cons \"Twenty four\" x)]\n                                    [(< x 9)\
    \ (cons \"Twenty five\" x)]\n                                    [(< x 9) (cons\
    \ \"Twenty six\" x)]\n                                    [(< x 9) (cons \"Twenty\
    \ seven\" x)]\n                                    [(< x 9) (cons \"Twenty eight\"\
    \ x)]\n                                    [(< x 9) (cons \"Twenty nine\" x)])])\n\
    \                      (cons \"\" arr)))))\n", "  (if (null? arr)\n      '()\n\
    \      (let ([len (length arr)])\n        (if (= len 0)\n            '()\n   \
    \         (let ([head (car arr)])\n              (if (< head 10)\n           \
    \       (cons (string-append (symbol->string head) \" \") (by_length (cdr arr)))\n\
    \                  (cons (symbol->string head) (by_length (cdr arr))))))))\n",
  "  (if (empty? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head\
    \ 10)\n            (cons (string-append (symbol->string head) \" \") (by_length\
    \ (cdr arr)))\n            (cons (symbol->string head) (by_length (cdr arr)))))))\n",
  "  (if (null? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head\
    \ 9)\n            (cons (string-append (symbol->string head) \"One\")\n      \
    \            (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Two\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Three\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Four\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Five\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Six\")\n           \
    \       (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Seven\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Eight\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Nine\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Ten\")\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append (symbol->string head) \"Eleven\")\n         \
    \         (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Twelve\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Thirteen\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Fourteen\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Fifteen\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Sixteen\")\n       \
    \           (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Seventeen\")\n                  (by_length (cdr arr)))\n           \
    \ (cons (string-append (symbol->string head) \"Eighteen\")\n                 \
    \ (by_length (cdr arr)))\n            (cons (string-append (symbol->string head)\
    \ \"Nineteen\")\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Tw", "  (if (empty? arr)\n      '()\n      (let ([arr\
    \ (reverse arr)])\n        (let ([digits (map #(if (<= (length %) 9)\n       \
    \                       (substring % 0 1)\n                              (substring\
    \ % 1 0))\n                          arr)])\n          (map #(cond [(= (length\
    \ %) 9)\n                       (cond [(= (substring % 0 1) \"One\")\n       \
    \                       (cond [(= (substring % 1 0) \"Two\")\n               \
    \                       (cond [(= (substring % 2 0) \"Three\")\n             \
    \                                 (cond [(= (substring % 3 0) \"Four\")\n    \
    \                                                  (cond [(= (substring % 4 0)\
    \ \"Five\")\n                                                              (cond\
    \ [(= (substring % 5 0) \"Six\")\n                                           \
    \                               (cond [(= (substring % 6 0) \"Seven\")\n     \
    \                                                                            \
    \ (cond [(= (substring % 7 0) \"Eight\")\n                                   \
    \                                                       (cond [(= (substring %\
    \ 8 0) \"Nine\")\n                                                           \
    \                                       (cons % \"?\")])])])])])])\n         \
    \              (cond [(= (substring % 0 1) \"Two\")\n                        \
    \      (cond [(= (substring % 1 0) \"Three\")\n                              \
    \        (cond [(= (substring % 2 0) \"Four\")\n                             \
    \                 (cond [(= (substring % 3 0) \"Five\")\n                    \
    \                                  (cond [(= (substring % 4 0) \"Six\")\n    \
    \                                                          (cond [(= (substring\
    \ % 5 0) \"Seven\")\n                                                        \
    \                  (cond [(= (substring % 6 0) \"Eight\")\n                  \
    \                                                                (cond [(= (substring\
    \ % 7 0) \"Nine\")\n                                                         \
    \                                 (cons % \"?\")])])])])])])\n               \
    \        (cond [(= (substring % 0 1) \"Three\")\n                            \
    \  (cond [(= (substring % 1 0) \"Four\")\n                                   \
    \   (cond [(= (substring % 2 0) \"Five\")\n                                  \
    \            (cond [(= (substring % 3 0) \"Six\")\n                          \
    \                            (cond [(= (substring % 4 0) \"Seven\")\n        \
    \                                                      (cond [(= (substring %\
    \ 5 0) \"Eight\")\n                                                          \
    \                (cond [(= (substring % 6 0) \"Nine\")\n                     \
    \                                                             (cons % \"?\")",
  "  (if (null? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head\
    \ 9)\n            (cons (string-append (symbol->string head) \"-\") (by_length\
    \ (cdr arr)))\n            (cons (symbol->string head) (by_length (cdr arr)))))))\n",
  "  (if (null? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head\
    \ 9)\n            (cons (string-append (symbol->string head) \"One\")\n      \
    \            (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Two\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Three\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Four\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Five\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Six\")\n           \
    \       (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Seven\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Eight\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Nine\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Ten\")\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append (symbol->string head) \"Eleven\")\n         \
    \         (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Twelve\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Thirteen\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Fourteen\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Fifteen\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Sixteen\")\n       \
    \           (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Seventeen\")\n                  (by_length (cdr arr)))\n           \
    \ (cons (string-append (symbol->string head) \"Eighteen\")\n                 \
    \ (by_length (cdr arr)))\n            (cons (string-append (symbol->string head)\
    \ \"Nineteen\")\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Tw", "  (if (null? arr)\n      '()\n      (let ([head\
    \ (car arr)])\n        (if (< head 9)\n            (cons (cons (string->symbol\
    \ (string->string head)) (by_length (cdr arr)))\n                  (by_length\
    \ (cdr arr)))\n            (cons (string->symbol (string->string head))\n    \
    \              (by_length (cdr arr)))))))\n", "  (if (empty? arr)\n      '()\n\
    \      (let ([head (car arr)])\n        (if (< head 9)\n            (cons (string-append\
    \ (symbol->string head) (string-append \"One\"))\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) (string-append\
    \ \"Two\"))\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) (string-append \"Three\"))\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) (string-append\
    \ \"Four\"))\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) (string-append \"Five\"))\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) (string-append\
    \ \"Six\"))\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) (string-append \"Seven\"))\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) (string-append\
    \ \"Eight\"))\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) (string-append \"Nine\"))\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) (string-append\
    \ \"Ten\"))\n                  (by_length (cdr arr))))))\n", "  (if (empty? arr)\n\
    \      '()\n      (let ([head (car arr)])\n        (if (< head 9)\n          \
    \  (cons (string-append (symbol->string head) \"-\") (by_length (cdr arr)))\n\
    \            (cons (symbol->string head) (by_length (cdr arr)))))))\n", "  (if\
    \ (null? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head 9)\n\
    \            (cons (cons head (cons \"One\" \"Two\" \"Three\" \"Four\" \"Five\"\
    \ \"Six\" \"Seven\" \"Eight\" \"Nine\"))\n                  (by_length (cdr arr)))\n\
    \            (cons (cons head (cons \"Ten\" \"Eleven\" \"Twelve\" \"Thirteen\"\
    \ \"Fourteen\" \"Fifteen\" \"Sixteen\" \"Seventeen\" \"Eighteen\" \"Nineteen\"\
    ))\n                  (by_length (cdr arr))))))\n", "  (if (null? arr)\n     \
    \ '()\n      (let ([arr (sort arr (lambda (x y) (< (length x) 9) (< (length y)\
    \ 9)))])\n        (let ([arr (reverse arr)])\n          (map (lambda (x) (cond\
    \ [(= (length x) 9) (cons (substring x 1 1) (cons \"Nine\" '()))]\n          \
    \                         [(= (length x) 8) (cons (substring x 1 1) (cons \"Eight\"\
    \ '()))]\n                                   [(= (length x) 7) (cons (substring\
    \ x 1 1) (cons \"Seven\" '()))]\n                                   [(= (length\
    \ x) 6) (cons (substring x 1 1) (cons \"Six\" '()))]\n                       \
    \            [(= (length x) 5) (cons (substring x 1 1) (cons \"Five\" '()))]\n\
    \                                   [(= (length x) 4) (cons (substring x 1 1)\
    \ (cons \"Four\" '()))]\n                                   [(= (length x) 3)\
    \ (cons (substring x 1 1) (cons \"Three\" '()))]\n                           \
    \        [(= (length x) 2) (cons (substring x 1 1) (cons \"Two\" '()))]\n    \
    \                               [(= (length x) 1) (cons (substring x 1 1) (cons\
    \ \"One\" '()))]\n                                   [else (cons (substring x\
    \ 1 1) '()))])\n                 arr))))\n", "  (if (empty? arr)\n      '()\n\
    \      (let ([head (car arr)])\n        (if (< head 9)\n            (cons (string-append\
    \ (symbol->string head) \"One\")\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append (symbol->string head) \"Two\")\n            \
    \      (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Three\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Four\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Five\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Six\")\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append (symbol->string head) \"Seven\")\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Eight\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Nine\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Ten\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Eleven\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Twelve\")\n        \
    \          (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Thirteen\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Fourteen\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Fifteen\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Sixteen\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Seventeen\")\n     \
    \             (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Eighteen\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Nineteen\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Tw", " \
    \ (if (empty? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head\
    \ 9)\n            (cons (cons head (cons \"One\" \"Two\" \"Three\" \"Four\" \"\
    Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\"))\n                  (by_length (cdr\
    \ arr)))\n            (cons (cons head (cons \"Ten\" \"Eleven\" \"Twelve\" \"\
    Thirteen\" \"Fourteen\" \"Fifteen\" \"Sixteen\" \"Seventeen\" \"Eighteen\" \"\
    Nineteen\"))\n                  (by_length (cdr arr))))))\n", "  (if (empty? arr)\n\
    \      '()\n      (let ([head (first arr)])\n        (if (< head 9)\n        \
    \    (cons (string->symbol (string->string head)) (by_length (rest arr)))\n  \
    \          (cons (string->symbol (string->string head)) (by_length (rest arr)))))\n\
    \      )\n    )\n  )\n", "  (if (empty? arr)\n      '()\n      (let ([head (first\
    \ arr)])\n        (if (< head 9)\n            (cons (string-append \"One\" (string-to-int\
    \ (first arr)))\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append \"Two\" (string-to-int (first arr)))\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append \"Three\" (string-to-int (first\
    \ arr)))\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ \"Four\" (string-to-int (first arr)))\n                  (by_length (rest arr)))\n\
    \            (cons (string-append \"Five\" (string-to-int (first arr)))\n    \
    \              (by_length (rest arr)))\n            (cons (string-append \"Six\"\
    \ (string-to-int (first arr)))\n                  (by_length (rest arr)))\n  \
    \          (cons (string-append \"Seven\" (string-to-int (first arr)))\n     \
    \             (by_length (rest arr)))\n            (cons (string-append \"Eight\"\
    \ (string-to-int (first arr)))\n                  (by_length (rest arr)))\n  \
    \          (cons (string-append \"Nine\" (string-to-int (first arr)))\n      \
    \            (by_length (rest arr)))))))\n", "  (if (empty? arr)\n      '()\n\
    \      (let ([head (first arr)])\n        (if (< head 9)\n            (cons (reverse\
    \ (cons (string->symbol (string->string head)) (rest_of_list (rest arr))))\n \
    \                 (by_length (rest_of_list (rest arr))))\n            (cons (reverse\
    \ (cons (string->symbol (string->string head)) '()))\n                  (by_length\
    \ (rest_of_list (rest arr))))))))\n", "  (cond\n    [(empty? arr) empty]\n   \
    \ [(number? (car arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr))\
    \ (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr\
    \ arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length\
    \ (cdr arr)) (cons (by_length (cdr arr)) (cons (by_length (cdr arr)) (con", " \
    \ (if (empty? arr)\n      '()\n      (let ([head (first arr)])\n        (if (number?\
    \ head)\n            (cons (string->symbol (string->number head)) (by_length (rest\
    \ arr)))\n            (cons (string->symbol (string->number head)) (by_length\
    \ (rest arr)))))))\n", "  (if (empty? arr)\n      '()\n      (let ([head (car\
    \ arr)])\n        (if (< head 9)\n            (cons (string-append (number->string\
    \ head) \"One\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Two\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Three\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Four\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Five\")\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Six\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Seven\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Eight\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Nine\")\n                  (by_length (cdr arr)))))))\n",
  "  (if (empty? arr)\n      '()\n      (let ([nums (map number->string (reverse (filter\
    \ number->boolean (map number->int arr))))])\n        (map string->number (map\
    \ string->string nums)))))\n", "  (if (empty? arr)\n      '()\n      (let ([head\
    \ (first arr)])\n        (if (< head 9)\n            (cons (reverse (map #(cons\
    \ (nth arr (- head 1)) #(cons nth \"One\"))))\n                  (by_length (rest\
    \ arr)))\n            (cons (reverse (map #(cons (nth arr (- head 1)) #(cons nth\
    \ \"Two\"))))\n                  (by_length (rest arr)))\n            (cons (reverse\
    \ (map #(cons (nth arr (- head 1)) #(cons nth \"Three\"))))\n                \
    \  (by_length (rest arr)))\n            (cons (reverse (map #(cons (nth arr (-\
    \ head 1)) #(cons nth \"Four\"))))\n                  (by_length (rest arr)))\n\
    \            (cons (reverse (map #(cons (nth arr (- head 1)) #(cons nth \"Five\"\
    ))))\n                  (by_length (rest arr)))\n            (cons (reverse (map\
    \ #(cons (nth arr (- head 1)) #(cons nth \"Six\"))))\n                  (by_length\
    \ (rest arr)))\n            (cons (reverse (map #(cons (nth arr (- head 1)) #(cons\
    \ nth \"Seven\"))))\n                  (by_length (rest arr)))\n            (cons\
    \ (reverse (map #(cons (nth arr (- head 1)) #(cons nth \"Eight\"))))\n       \
    \           (by_length (rest arr)))\n            (cons (reverse (map #(cons (nth\
    \ arr (- head 1)) #(cons nth \"Nine\"))))\n                  (by_length (rest\
    \ arr)))\n            (cons (reverse (map #(cons (nth arr (- head 1)) #(cons nth\
    \ \"Ten\"))))\n                  (by_length (rest arr)))\n            (cons (reverse\
    \ (map #(cons (nth arr (- head 1)) #(cons nth \"Eleven\"))))\n               \
    \   (by_length (rest arr)))\n            (cons (reverse (map #(cons (nth arr (-\
    \ head 1)) #(cons nth \"Twelve\"))))\n                  (by_length (rest arr)))\n\
    \            (cons (reverse (map #(cons (nth arr (- head 1)) #(cons nth \"Thirteen\"\
    ))))\n                  (by_length (rest arr", "  (if (null? arr)\n      '()\n\
    \      (let ([len (length arr)])\n        (if (= len 0)\n            '()\n   \
    \         (let ([head (car arr)])\n              (if (< head 9)\n            \
    \      (cons (string->symbol (string->string head)) (by_length (cdr arr)))\n \
    \                 (cons (string->symbol (string->string head)) (by_length (cdr\
    \ arr)))))\n            (by_length (cdr arr)))))\n", "  (if (empty? arr)\n   \
    \   '()\n      (let ([nums (map number->string arr)\n            lengths (map\
    \ length (map string->number nums))])\n        (if (= (length nums) (length lengths))\n\
    \            (let ([sorted (sort (map string->number nums) <)\n              \
    \    reverse (map string->number sorted)\n                  names (map string->string\
    \ (reverse reverse))])\n              (map string->string (reverse sorted))\n\
    \              (cons nums (map string->string names)))))))\n", "  (if (empty?\
    \ arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head 9)\n   \
    \         (cons (reverse (cons (string->symbol (string->string head)) '()))\n\
    \                  (by_length (cdr arr)))\n            (cons (reverse (cons (string->symbol\
    \ (string->string head)) '()))\n                  (by_length (cdr arr)))))\n \
    \ )\n)\n", "  (if (empty? arr)\n      '()\n      (let ([head (first arr)])\n \
    \       (if (< head 9)\n            (cons (string-append (symbol->string head)\
    \ \"One\")\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Two\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (symbol->string head) \"Three\")\n         \
    \         (by_length (rest arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Four\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Five\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (symbol->string head) \"Six\"\
    )\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Seven\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (symbol->string head) \"Eight\")\n         \
    \         (by_length (rest arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Nine\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Ten\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (symbol->string head) \"Eleven\"\
    )\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Twelve\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (symbol->string head) \"Thirteen\")\n      \
    \            (by_length (rest arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Fourteen\")\n                  (by_length (rest arr)))\n           \
    \ (cons (string-append (symbol->string head) \"Fifteen\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (symbol->string head) \"Sixteen\"\
    )\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Seventeen\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (symbol->string head) \"Eighteen\")\n      \
    \            (by_length (rest arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Nineteen\")\n                  (by_length (rest arr)))\n           \
    \ (cons (string-append (symbol->string head) \"Twenty\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (symbol", "  (if (empty? arr)\n\
    \      '()\n      (let ([head (car arr)])\n        (if (< head 10)\n         \
    \   (cons (string-append (symbol->string head) \"One\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Two\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Three\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Four\")\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Five\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Six\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Seven\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Eight\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Nine\")\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Zero\")\n                  (by_length (cdr arr)))))))\n", "  (if (empty?\
    \ arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head 9)\n   \
    \         (cons (string-append (symbol->string head) \"One\")\n              \
    \    (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Two\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Three\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Four\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Five\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Six\")\n           \
    \       (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Seven\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Eight\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Nine\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Ten\")\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append (symbol->string head) \"Eleven\")\n         \
    \         (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Twelve\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Thirteen\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Fourteen\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Fifteen\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Sixteen\")\n       \
    \           (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Seventeen\")\n                  (by_length (cdr arr)))\n           \
    \ (cons (string-append (symbol->string head) \"Eighteen\")\n                 \
    \ (by_length (cdr arr)))\n            (cons (string-append (symbol->string head)\
    \ \"Nineteen\")\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Tw", "  (if (empty? arr)\n      '()\n      (let ([head\
    \ (first arr)])\n        (if (< head 10)\n            (cons (string-append (symbol->string\
    \ head) \" \") (by_length (rest arr)))\n            (cons (symbol->string head)\
    \ (by_length (rest arr)))))))\n", "  (if (null? arr)\n      '()\n      (let ([head\
    \ (car arr)])\n        (if (< head 9)\n            (cons (string-append (symbol->string\
    \ head) \"-\" (reverse (symbol->string head)))\n                  (by_length (cdr\
    \ arr)))\n            (cons (symbol->string head) (by_length (cdr arr)))))))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(number? (car arr)) (cons (by_length (cdr\
    \ arr)) (cons (car arr) empty))]\n    [else (cons (by_length (cdr arr)) (cons\
    \ (car arr) empty))]\n  ))\n", "  (if (empty? arr)\n      '()\n      (let ([head\
    \ (car arr)])\n        (if (< head 9)\n            (cons (reverse (cons (string->symbol\
    \ (string->string head)) '()))\n                  (by_length (cdr arr)))\n   \
    \         (cons (reverse (cons (string->symbol (string->string head)) '()))\n\
    \                  (by_length (cdr arr)))))))\n", "  (if (empty? arr)\n      '()\n\
    \      (let ([head (first arr)])\n        (if (< head 9)\n            (let ([tail\
    \ (by_length (rest arr))])\n              (cons (cons head (cons \"One\" \"Two\"\
    \ \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")) tail))\n\
    \            (cons (cons head (cons \"One\" \"Two\" \"Three\" \"Four\" \"Five\"\
    \ \"Six\" \"Seven\" \"Eight\" \"Nine\")) (by_length (rest arr)))))\n      ))\n",
  "  (if (empty? arr)\n      '()\n      (let ([arr (reverse arr)])\n        (map (lambda\
    \ (x) (cond [(< x 9) (cons (cons \"Nine\" x) \"Nine\")\n                     \
    \                ((< x 8) \"Eight\")\n                                     ((<\
    \ x 7) \"Seven\")\n                                     ((< x 6) \"Six\")\n  \
    \                                   ((< x 5) \"Five\")\n                     \
    \                ((< x 4) \"Four\")\n                                     ((<\
    \ x 3) \"Three\")\n                                     ((< x 2) \"Two\")\n  \
    \                                   ((< x 1) \"One\")\n                      \
    \               (else (cons \"Zero\" x))])) arr))))\n", "  (if (empty? arr)\n\
    \      '()\n      (let ([head (car arr)])\n        (if (< head 9)\n          \
    \  (cons (string-append (number->string head) \"One\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Two\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Three\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Four\")\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Five\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Six\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Seven\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Eight\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Nine\")\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Ten\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Eleven\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Twelve\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Thirteen\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Fourteen\")\n      \
    \            (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Fifteen\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Sixteen\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Seventeen\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Eighteen\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Nineteen\")\n      \
    \            (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Tw", "  (if (null? arr)\n      '()\n      (let ([len (length arr)])\n\
    \        (if (= len 0)\n            '()\n            (let ([head (car arr)])\n\
    \              (if (< head 9)\n                  (cons (string->symbol (string->string\
    \ head)) (by_length (cdr arr)))\n                  (cons (string->symbol (string->string\
    \ head)) (by_length (cdr arr)))))\n            (let ([head (car arr)])\n     \
    \         (if (< head 9)\n                  (cons (string->symbol (string->string\
    \ head)) (by_length (cdr arr)))\n                  (cons (string->symbol (string->string\
    \ head)) (by_length (cdr arr)))))\n            (let ([head (car arr)])\n     \
    \         (if (< head 9)\n                  (cons (string->symbol (string->string\
    \ head)) (by_length (cdr arr)))\n                  (cons (string->symbol (string->string\
    \ head)) (by_length (cdr arr)))))\n            (let ([head (car arr)])\n     \
    \         (if (< head 9)\n                  (cons (string->symbol (string->string\
    \ head)) (by_length (cdr arr)))\n                  (cons (string->symbol (string->string\
    \ head)) (by_length (cdr arr)))))\n            (let ([head (car arr)])\n     \
    \         (if (< head 9)\n                  (cons (string->symbol (string->string\
    \ head)) (by_length (cdr arr)))\n                  (cons (string->symbol (string->string\
    \ head)) (by_length (cdr arr)))))\n            (let ([head (car arr)])\n     \
    \         (if (< head 9)\n                  (cons (string->symbol (string->string\
    \ head)) (by_length (cdr arr)))\n                  (cons (string->symbol (string->string\
    \ head)) (by_length (cdr arr)))))\n            (let ([head (car arr)])\n     \
    \         (if (< head 9)\n                  (cons (string->symbol (string->string\
    \ head)) (by_length (cdr arr)))\n                  (cons (string->symbol (string->string\
    \ head)) (by_length (cdr arr)))))\n            (let ([head (car arr)])\n     \
    \         (if (< head 9)\n                  (cons (string->symbol (string->string\
    \ head)) (by_length (cdr arr)))\n                  (cons (string->symbol (string->string\
    \ head)) (by_length (cdr arr", "  (if (empty? arr)\n      '()\n      (let ([head\
    \ (car arr)])\n        (if (< head 9)\n            (cons (string-append (number->string\
    \ head) \"One\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Two\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Three\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Four\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Five\")\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Six\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Seven\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Eight\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Nine\")\n                  (by_length (cdr arr)))))))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(= (length arr) 1) (list \"One\")]\n  \
    \  [(= (length arr) 2) (list \"Two\")]\n    [(= (length arr) 3) (list \"Three\"\
    )]\n    [(= (length arr) 4) (list \"Four\")]\n    [(= (length arr) 5) (list \"\
    Five\")]\n    [(= (length arr) 6) (list \"Six\")]\n    [(= (length arr) 7) (list\
    \ \"Seven\")]\n    [(= (length arr) 8) (list \"Eight\")]\n    [(= (length arr)\
    \ 9) (list \"Nine\")]\n    [else (let ([len (length arr)])\n               (reverse\
    \ (map #(cons (string-append \"One\" (regexp-replace-all #rx\"^[0-9]\" (regexp-quote\
    \ (symbol->string %)) \"One\"))\n                                 (take len arr)))\n\
    \               (map #(cons (string-append \"Two\" (regexp-replace-all #rx\"^[0-9]\"\
    \ (regexp-quote (symbol->string %)) \"Two\"))\n                              \
    \   (take len arr)))\n               (map #(cons (string-append \"Three\" (regexp-replace-all\
    \ #rx\"^[0-9]\" (regexp-quote (symbol->string %)) \"Three\"))\n              \
    \                   (take len arr)))\n               (map #(cons (string-append\
    \ \"Four\" (regexp-replace-all #rx\"^[0-9]\" (regexp-quote (symbol->string %))\
    \ \"Four\"))\n                                 (take len arr)))\n            \
    \   (map #(cons (string-append \"Five\" (regexp-replace-all #rx\"^[0-9]\" (regexp-quote\
    \ (symbol->string %)) \"Five\"))\n                                 (take len arr)))\n\
    \               (map #(cons (string-append \"Six\" (regexp-replace-all #rx\"^[0-9]\"\
    \ (regexp-quote (symbol->string %)) \"Six\"))\n                              \
    \   (take len arr)))\n               (map #(cons (string-append \"Seven\" (regexp-replace-all\
    \ #rx\"^[0-9]\" (regexp-quote (symbol->string %)) \"Seven\"))\n              \
    \                   (take len arr)))\n               (map #(cons (string-append\
    \ \"Eight\" (regexp-replace-all #rx\"^[0-9]\" (regex", "  (if (empty? arr)\n \
    \     '()\n      (let ([nums (map number->string (reverse (range 1 9)))])\n  \
    \      (map (lambda (num)\n               (if (< num 9)\n                   (cond\
    \ [(number->string num) nums]\n                         [else (cond [(number->string\
    \ num) 'One]\n                                   [else (cond [(number->string\
    \ num) 'Two]\n                                           [else (cond [(number->string\
    \ num) 'Three]\n                                                   [else (cond\
    \ [(number->string num) 'Four]\n                                             \
    \              [else (cond [(number->string num) 'Five]\n                    \
    \                                               [else (cond [(number->string num)\
    \ 'Six]\n                                                                    \
    \       [else (cond [(number->string num) 'Seven]\n                          \
    \                                         [else (cond [(number->string num) 'Eight]\n\
    \                                                                           [else\
    \ (cond [(number->string num) 'Nine]\n                                       \
    \                            [else (cond [(number->string num) '?]\n         \
    \                                                                  [else (cond\
    \ [(number->string num) '?])])])])])])])])])])\n               (reverse nums)))))\n",
  "  (if (null? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head\
    \ 9)\n            (cons (string-append (number->string head) \"One\")\n      \
    \            (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Two\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Three\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Four\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Five\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Six\")\n           \
    \       (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Seven\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Eight\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Nine\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Ten\")\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append (number->string head) \"Eleven\")\n         \
    \         (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Twelve\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (number->string head) \"Thirteen\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) \"Fourteen\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Fifteen\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (number->string head) \"Sixteen\")\n       \
    \           (by_length (cdr arr)))\n            (cons (string-append (number->string\
    \ head) \"Seventeen\")\n                  (by_length (cdr arr)))\n           \
    \ (cons (string-append (number->string head) \"Eighteen\")\n                 \
    \ (by_length (cdr arr)))\n            (cons (string-append (number->string head)\
    \ \"Nineteen\")\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) \"Tw", "  (if (empty? arr)\n      '()\n      (let ([head\
    \ (car arr)])\n        (if (< head 9)\n            (cons (string-append (symbol->string\
    \ head) \" \") (by_length (cdr arr)))\n            (cons (symbol->string head)\
    \ (by_length (cdr arr)))))))\n", "  (if (null? arr)\n      '()\n      (let ([head\
    \ (car arr)])\n        (if (< head 9)\n            (cons (string-append (number->string\
    \ head) (string-append \"One\"))\n                  (by_length (cdr arr)))\n \
    \           (cons (string-append (number->string head) (string-append \"Two\"\
    ))\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) (string-append \"Three\"))\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) (string-append\
    \ \"Four\"))\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) (string-append \"Five\"))\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) (string-append\
    \ \"Six\"))\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) (string-append \"Seven\"))\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) (string-append\
    \ \"Eight\"))\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (number->string head) (string-append \"Nine\"))\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (number->string head) (string-append\
    \ \"Zero\"))\n                  (by_length (cdr arr))))))\n", "  (if (empty? arr)\n\
    \      '()\n      (let ([head (first arr)])\n        (if (number? head)\n    \
    \        (cons (string->number head) (by-length (rest arr)))\n            (cons\
    \ (string->name head) (by-length (rest arr)))))))\n", "  (if (null? arr)\n   \
    \   '()\n      (let ([head (car arr)])\n        (if (< head 9)\n            (cons\
    \ (string-append (symbol->string head) \"One\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Two\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Three\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Four\")\n          \
    \        (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Five\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Six\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Seven\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Eight\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Nine\")\n          \
    \        (by_length (cdr arr)))))))\n</cell>\n<cell>\n#lang racket\n", "  (if\
    \ (null? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head 9)\n\
    \            (cons (string-append (symbol->string head) \"One\")\n           \
    \       (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Two\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Three\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Four\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Five\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Six\")\n           \
    \       (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Seven\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Eight\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Nine\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Ten\")\n                  (by_length (cdr arr)))))))\n",
  "  (if (empty? arr)\n      '()\n      (let ([head (car arr)])\n        (if (< head\
    \ 9)\n            (cons (string-append (symbol->string head) \"One\")\n      \
    \            (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Two\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Three\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Four\"\
    )\n                  (by_length (cdr arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Five\")\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append (symbol->string head) \"Six\")\n           \
    \       (by_length (cdr arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Seven\")\n                  (by_length (cdr arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Eight\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Nine\"\
    )\n                  (by_length (cdr arr)))))))\n", "  (if (empty? arr)\n    \
    \  '()\n      (let ([head (car arr)])\n        (if (< head 9)\n            (cons\
    \ (string->symbol (symbol->string head)) (by_length (cdr arr)))\n            (cons\
    \ (symbol->string head) (by_length (cdr arr)))))))\n", "  (if (null? arr)\n  \
    \    '()\n      (let ([head (car arr)])\n        (if (< head 10)\n           \
    \ (cons (string-append (symbol->string head) \"One\")\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append (symbol->string head) \"Ten\"\
    )\n                  (by_length (cdr arr)))))))\n", "  (if (empty? arr)\n    \
    \  '()\n      (let ([arr (reverse arr)])\n        (map (lambda (x)\n         \
    \     (cond [(< x 9) (cons \"Nine\" (reverse (substring x 0 1)))]\n          \
    \          [else (cons \"One\" (reverse (substring x 0 1)))])) arr))))\n", " \
    \ (if (empty? arr)\n      '()\n      (let ([head (first arr)])\n        (if (<\
    \ head 9)\n            (cons (string-append (symbol->string head) \"One\")\n \
    \                 (by_length (rest arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Two\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Three\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (symbol->string head) \"Four\"\
    )\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (symbol->string head) \"Five\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (symbol->string head) \"Six\")\n           \
    \       (by_length (rest arr)))\n            (cons (string-append (symbol->string\
    \ head) \"Seven\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (symbol->string head) \"Eight\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (symbol->string head) \"Nine\"\
    )\n                  (by_length (rest arr)))))))\n", "  (if (empty? arr)\n   \
    \   '()\n      (let ([head (car arr)])\n        (if (< head 9)\n            (cons\
    \ (string-append \"One\" (rev (by_length (cdr arr))))\n                  (by_length\
    \ (cdr arr)))\n            (cons (string-append \"Two\" (rev (by_length (cdr arr))))\n\
    \                  (by_length (cdr arr)))\n            (cons (string-append \"\
    Three\" (rev (by_length (cdr arr))))\n                  (by_length (cdr arr)))\n\
    \            (cons (string-append \"Four\" (rev (by_length (cdr arr))))\n    \
    \              (by_length (cdr arr)))\n            (cons (string-append \"Five\"\
    \ (rev (by_length (cdr arr))))\n                  (by_length (cdr arr)))\n   \
    \         (cons (string-append \"Six\" (rev (by_length (cdr arr))))\n        \
    \          (by_length (cdr arr)))\n            (cons (string-append \"Seven\"\
    \ (rev (by_length (cdr arr))))\n                  (by_length (cdr arr)))\n   \
    \         (cons (string-append \"Eight\" (rev (by_length (cdr arr))))\n      \
    \            (by_length (cdr arr)))\n            (cons (string-append \"Nine\"\
    \ (rev (by_length (cdr arr))))\n                  (by_length (cdr arr)))))))\n",
  "  (if (empty? arr)\n      '()\n      (let ([head (first arr)])\n        (if (<\
    \ head 9)\n            (cons (string-append (number->string head) \"One\")\n \
    \                 (by_length (rest arr)))\n            (cons (string-append (number->string\
    \ head) \"Two\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (number->string head) \"Three\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (number->string head) \"Four\"\
    )\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (number->string head) \"Five\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (number->string head) \"Six\")\n           \
    \       (by_length (rest arr)))\n            (cons (string-append (number->string\
    \ head) \"Seven\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (number->string head) \"Eight\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (number->string head) \"Nine\"\
    )\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (number->string head) \"Ten\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (number->string head) \"Eleven\")\n        \
    \          (by_length (rest arr)))\n            (cons (string-append (number->string\
    \ head) \"Twelve\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (number->string head) \"Thirteen\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (number->string head) \"Fourteen\"\
    )\n                  (by_length (rest arr)))\n            (cons (string-append\
    \ (number->string head) \"Fifteen\")\n                  (by_length (rest arr)))\n\
    \            (cons (string-append (number->string head) \"Sixteen\")\n       \
    \           (by_length (rest arr)))\n            (cons (string-append (number->string\
    \ head) \"Seventeen\")\n                  (by_length (rest arr)))\n          \
    \  (cons (string-append (number->string head) \"Eighteen\")\n                \
    \  (by_length (rest arr)))\n            (cons (string-append (number->string head)\
    \ \"Nineteen\")\n                  (by_length (rest arr)))\n            (cons\
    \ (string-append (number->string head) \"Twenty\")\n                  (by_length\
    \ (rest arr)))\n            (cons (string-append (number", "  (if (empty? arr)\n\
    \      '()\n      (let ([head (car arr)])\n        (if (< head 10)\n         \
    \   (append (by_length (filter (lambda (x) (>= x 1)) arr))\n                 \
    \   (list \"One\")\n                    (append (by_length (filter (lambda (x)\
    \ (>= x 2)) arr))\n                            (list \"Two\")\n              \
    \              (append (by_length (filter (lambda (x) (>= x 3)) arr))\n      \
    \                              (list \"Three\")\n                            \
    \        (append (by_length (filter (lambda (x) (>= x 4)) arr))\n            \
    \                                (list \"Four\")\n                           \
    \                 (append (by_length (filter (lambda (x) (>= x 5)) arr))\n   \
    \                                                 (list \"Five\")\n          \
    \                                          (append (by_length (filter (lambda\
    \ (x) (>= x 6)) arr))\n                                                      \
    \      (list \"Six\")\n                                                      \
    \      (append (by_length (filter (lambda (x) (>= x 7)) arr))\n              \
    \                                                      (list \"Seven\")\n    \
    \                                                                (append (by_length\
    \ (filter (lambda (x) (>= x 8)) arr))\n                                      \
    \                                      (list \"Eight\")\n                    \
    \                                                        (append (by_length (filter\
    \ (lambda (x) (>= x 9)) arr))\n                                              \
    \                                      (list \"Nine\")\n                     \
    \                                                               (append (by_length\
    \ (filter (lambda (x) (not (= x head)) arr))\n                               \
    \                                                             (list \"One\")\n\
    \                                                                            \
    \                (append (by_length (filter (lambda (x) (not (= x head)) arr))\n\
    \                                                                            \
    \                        (list \"Two\")\n                                    \
    \                                                                (append (by_length\
    \ (filter (lambda (x) (not (= x head)) arr))\n                               \
    \                                                                            \
    \  (list \"Three\")\n                                                        \
    \                                                     (append (by_length (filter\
    \ (lambda (x) (not (= x head)) arr))\n                                       \
    \                                                                            \
    \ (list \"Four\")\n                                                          \
    \                                                          (append (by_length\
    \ (filter (lambda (x) (not (= x head)) arr))\n                               \
    \                                                                            \
    \                 (list \"Five\")\n                                          \
    \                                                                            \
    \      (append (by_length (filter (lambda (x) (not (= x head)) arr))\n       \
    \                                                                            \
    \                                                 (list \"Six\")\n           \
    \                                                                            \
    \                                             (append (by_length (filter (lambda\
    \ (x) (not (= x head)) arr))\n                                               \
    \                                                                            \
    \                 (list \"Seven\")\n                                         \
    \                                                                            \
    \                       (append (by_length (filter (lambda (x) (not (= x head))\
    \ arr))\n                                                                    \
    \                                                                            \
    \    (list \"Eight\")\n                                                      \
    \                                                                            \
    \                  (append (by_", "  (if (empty? arr)\n      '()\n      (let ([len\
    \ (length arr)])\n        (if (= len 0)\n            '()\n            (let ([head\
    \ (first arr)])\n              (if (< head 9)\n                  (cons (string->symbol\
    \ (string->string head)) (by_length (rest arr)))\n                  (cons (string->symbol\
    \ (string->string head)) (by_length (rest arr)))))\n            (let ([head (first\
    \ arr)])\n              (if (< head 9)\n                  (cons (string->symbol\
    \ (string->string head)) (by_length (rest arr)))\n                  (cons (string->symbol\
    \ (string->string head)) (by_length (rest arr)))))\n            (let ([head (first\
    \ arr)])\n              (if (< head 9)\n                  (cons (string->symbol\
    \ (string->string head)) (by_length (rest arr)))\n                  (cons (string->symbol\
    \ (string->string head)) (by_length (rest arr)))))\n            (let ([head (first\
    \ arr)])\n              (if (< head 9)\n                  (cons (string->symbol\
    \ (string->string head)) (by_length (rest arr)))\n                  (cons (string->symbol\
    \ (string->string head)) (by_length (rest arr)))))\n            (let ([head (first\
    \ arr)])\n              (if (< head 9)\n                  (cons (string->symbol\
    \ (string->string head)) (by_length (rest arr)))\n                  (cons (string->symbol\
    \ (string->string head)) (by_length (rest arr)))))\n            (let ([head (first\
    \ arr)])\n              (if (< head 9)\n                  (cons (string->symbol\
    \ (string->string head)) (by_length (rest arr)))\n                  (cons (string->symbol\
    \ (string->string head)) (by_length (rest arr)))))\n            (let ([head (first\
    \ arr)])\n              (if (< head 9)\n                  (cons (string->symbol\
    \ (string->string head)) (by_length (rest arr)))\n                  (cons (string->symbol\
    \ (string->string head)) (by_length (rest arr)))))\n            (let ([head (first\
    \ arr)])\n              (if (< head 9)\n                  (cons (string->symbol\
    \ (string->string head)) (by_length (rest arr)))\n                  (cons (string->symbol\
    \ (string->string head)) (by_length (rest arr)))))\n            (let ([head (first\
    \ arr)])\n              (if (< ", "  (if (null? arr)\n      '()\n      (let ([arr\
    \ (sort arr (lambda (x y) (< (length x) 9) (< (length y) 9)))])\n        (let\
    \ ([arr (reverse arr)])\n          (let ([arr (map #(cond [(< x 9) (cons \"One\"\
    \ x)]\n                                  [(< x 10) (cons \"Two\" x)]\n       \
    \                           [(< x 100) (cons \"Three\" x)]\n                 \
    \                 [(< x 1000) (cons \"Four\" x)]\n                           \
    \       [(< x 10000) (cons \"Five\" x)]\n                                  [(<\
    \ x 100000) (cons \"Six\" x)]\n                                  [(< x 1000000)\
    \ (cons \"Seven\" x)]\n                                  [(< x 10000000) (cons\
    \ \"Eight\" x)]\n                                  [(< x 100000000) (cons \"Nine\"\
    \ x)]\n                                  [(< x 1000000000) (cons \"Ten\" x)]\n\
    \                                  [(< x 10000000000) (cons \"Eleven\" x)]\n \
    \                                 [(< x 100000000000) (cons \"Twelve\" x)]\n \
    \                                 [(< x 1000000000000) (cons \"Thirteen\" x)]\n\
    \                                  [(< x 10000000000000) (cons \"Fourteen\" x)]\n\
    \                                  [(< x 100000000000000) (cons \"Fifteen\" x)]\n\
    \                                  [(< x 1000000000000000) (cons \"Sixteen\" x)]\n\
    \                                  [(< x 10000000000000000) (cons \"Seventeen\"\
    \ x)]\n                                  [(< x 100000000000000000) (cons \"Eighteen\"\
    \ x)]\n                                  [(< x 1000000000000000000) (cons \"Nineteen\"\
    \ x)]\n                                  [(< x 10000000000000000000) (cons \"\
    Twenty\" x)]\n                                  [(< x 100000000000000000000) (cons\
    \ \"Twenty-one\" x)]\n                                  [(< x 1000000000000000000000)\
    \ (cons \"Twenty-two\" x)]\n                                  [(< x 10000000000000000000000)\
    \ (cons \"Twenty-three\" x)]\n                                  [(< x 100000000000000000000000)\
    \ (cons \"Twenty-four\" x)]\n                                  [(< x 1000000000000000000000000)\
    \ (cons \"Twenty-five\" x)]\n                                  [(< x 10000000000000000000000000)\
    \ (cons \"Twenty-six\" x)]\n                                  [(< x 100000000000000000000000000)\
    \ (cons \"Twenty-seven\" x)]\n                                  [(< x 1000000000000000000000000000)\
    \ (cons \"Twenty-eight\" x)]\n                                  [(< x 100000000000000000000000000",
  "  (if (null? arr)\n      '()\n      (let ([len (length arr)])\n        (if (= len\
    \ 0)\n            '()\n            (let ([first (car arr)])\n              (if\
    \ (< first 9)\n                  (cons (string-append (symbol->string first) \"\
    One\")\n                        (by_length (cdr arr)))\n                  (cons\
    \ (string-append (symbol->string first) \"Ten\")\n                        (by_length\
    \ (cdr arr))))))))\n", "  (if (empty? arr)\n      '()\n      (let ([head (car\
    \ arr)])\n        (if (< head 9)\n            (cons (string-append (symbol->string\
    \ head) \" \") (by_length (cdr arr)))\n            (cons (symbol->string head)\
    \ (by_length (cdr arr)))))))\n", "  (if (empty? arr)\n      '()\n      (let ([head\
    \ (car arr)])\n        (if (< head 9)\n            (cons (string-append (name\
    \ head) (by_length (cdr arr)))\n                  (by_length (cdr arr)))\n   \
    \         (cons (string-append (name head) (by_length (cdr arr)))\n          \
    \        (by_length (cdr arr)))))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
