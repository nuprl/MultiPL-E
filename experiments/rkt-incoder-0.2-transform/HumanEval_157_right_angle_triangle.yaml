name: HumanEval_157_right_angle_triangle
language: rkt
prompt: "#lang racket\n\n;; Given the lengths of the three sides of a triangle. Return\
  \ True if the three\n;; sides form a right-angled triangle, False otherwise.\n;;\
  \ A right-angled triangle is a triangle in which one angle is right angle or \n\
  ;; 90 degree.\n;; Example:\n;; >>> (right_angle_triangle 3 4 5)\n;; #t\n;; >>> (right_angle_triangle\
  \ 1 2 3)\n;; #f\n(define (right_angle_triangle a b c)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate right_angle_triangle))\n\
  \    (check-equal? (candidate 3 4 5) #t)\n    (check-equal? (candidate 1 2 3) #f)\n\
  \    (check-equal? (candidate 10 6 8) #t)\n    (check-equal? (candidate 2 2 2) #f)\n\
  \    (check-equal? (candidate 7 24 25) #t)\n    (check-equal? (candidate 10 5 7)\
  \ #f)\n    (check-equal? (candidate 5 12 13) #t)\n    (check-equal? (candidate 15\
  \ 8 17) #t)\n    (check-equal? (candidate 48 55 73) #t)\n    (check-equal? (candidate\
  \ 1 1 1) #f)\n    (check-equal? (candidate 2 2 10) #f)\n))\n\n(test-humaneval)"
completions: ["  (< (abs (- a b)) (abs (- a c)) (abs (- b c))))\n", "  (< (abs (-\
    \ a b)) (abs (- c b)))\n  (< (abs (- a c)) (abs (- b c)))\n  (< (abs (- b c))\
    \ (abs (- a c))))\n", "  (< (abs (- a b)) (abs (- a c)))\n  (< (abs (- b c)) (abs\
    \ (- b a)))\n  (< (abs (- c a)) (abs (- c b))))\n", "  (< (abs (- a b)) (abs (-\
    \ c b)))\n  (< (abs (- a c)) (abs (- b c)))\n  (< (abs (- b c)) (abs (- a c))))\n",
  "  (< (abs (- a b)) (abs (- a c)) (abs (- b c))))\n", "  (< (abs (- a b)) (abs (-\
    \ a c))) (< (abs (- b c)) (abs (- b a))))\n", "  (< (abs (- a b)) (abs (- a c)))\
    \ (< (abs (- b c)) (abs (- b a))) (< (abs (- c b)) (abs (- c a))))\n)\n", "  (<\
    \ (abs (- a b)) (abs (- c b)))\n  (< (abs (- a c)) (abs (- b c)))\n  (< (abs (-\
    \ a b)) (abs (- c c)))\n  (< (abs (- b c)) (abs (- a c)))\n  (< (abs (- b a))\
    \ (abs (- c a)))\n  (< (abs (- c a)) (abs (- b a)))\n  (< (abs (- c b)) (abs (-\
    \ a b))))\n", "  (< (abs (- a b)) (abs (- a c)))\n  (< (abs (- b c)) (abs (- b\
    \ a)))\n  (< (abs (- c a)) (abs (- c b))))\n", "  (< (abs (- a b)) (abs (- a c)))\
    \ (< (abs (- b c)) (abs (- b a))) (< (abs (- c a)) (abs (- c b))))\n)\n", "  (<\
    \ (abs (- a b)) (abs (- c b))))\n", "  (< (abs (- a b)) (abs (- a c)) (abs (-\
    \ b c))))\n", "  (< (abs (- a b)) (abs (- c b)))\n  (< (abs (- a c)) (abs (- b\
    \ c)))\n  (< (abs (- b c)) (abs (- a c))))\n", "  (< (abs (- a b)) (abs (- a c)))\
    \ (< (abs (- b c)) (abs (- b a))) (< (abs (- c a)) (abs (- c b))))\n)\n", "  (<\
    \ (abs (- a b)) (abs (- b c))))\n", "  (< (abs (- a b)) (abs (- a c)) (abs (-\
    \ b c))))\n", "  (< (abs (- a b)) (abs (- c b)))\n  (< (abs (- a c)) (abs (- b\
    \ c)))\n  (< (abs (- b c)) (abs (- a c))))\n", "  (< (abs (- a b)) (abs (- a c)))\
    \ (< (abs (- b c)) (abs (- b a))))\n", '  (< (abs (- a b)) (abs (- a c))) (< (abs
    (- b c)) (abs (- b a))))', "  (< (abs (- a b)) (abs (- c b)))\n  (< (abs (- a\
    \ c)) (abs (- b c)))\n  (< (abs (- b c)) (abs (- a c))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
