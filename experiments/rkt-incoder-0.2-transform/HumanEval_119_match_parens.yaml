name: HumanEval_119_match_parens
language: rkt
prompt: "#lang racket\n\n;; You are given a list of two strings, both strings consist\
  \ of open\n;; parentheses '(' or close parentheses ')' only.\n;; Your job is to\
  \ check if it is possible to concatenate the two strings in\n;; some order, that\
  \ the resulting string will be good.\n;; A string S is considered to be good if\
  \ and only if all parentheses in S\n;; are balanced. For example: the string '(())()'\
  \ is good, while the string\n;; '())' is not.\n;; Return 'Yes' if there's a way\
  \ to make a good string, and return 'No' otherwise.\n;; Examples:\n;; >>> (match_parens\
  \ (list \"()(\" \")\"))\n;; \"Yes\"\n;; >>> (match_parens (list \")\" \")\"))\n\
  ;; \"No\"\n(define (match_parens lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate match_parens))\n\
  \    (check-equal? (candidate (list \"()(\" \")\")) \"Yes\")\n    (check-equal?\
  \ (candidate (list \")\" \")\")) \"No\")\n    (check-equal? (candidate (list \"\
  (()(())\" \"())())\")) \"No\")\n    (check-equal? (candidate (list \")())\" \"(()()(\"\
  )) \"Yes\")\n    (check-equal? (candidate (list \"(())))\" \"(()())((\")) \"Yes\"\
  )\n    (check-equal? (candidate (list \"()\" \"())\")) \"No\")\n    (check-equal?\
  \ (candidate (list \"(()(\" \"()))()\")) \"Yes\")\n    (check-equal? (candidate\
  \ (list \"((((\" \"((())\")) \"No\")\n    (check-equal? (candidate (list \")(()\"\
  \ \"(()(\")) \"No\")\n    (check-equal? (candidate (list \")(\" \")(\")) \"No\"\
  )\n    (check-equal? (candidate (list \"(\" \")\")) \"Yes\")\n    (check-equal?\
  \ (candidate (list \")\" \"(\")) \"Yes\")\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? lst) \"No\"]\n    [(equal? (first lst) '(') (match_parens\
    \ (rest lst)))]\n    [else (match_parens (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst)\n     (string-equal? \"()\" \"()\")]\n    [(equal? (car lst) '(')\n   \
    \  (match_parens (cdr lst))]\n    [else\n     (match_parens (cdr lst))]))\n",
  "  (cond\n    [(empty? lst) \"No\"]\n    [(equal? (first lst) '(') (match_parens\
    \ (rest lst)))]\n    [else (match_parens (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) \"No\"]\n    [(equal? (first lst) '(') (match_parens (rest lst)))]\n  \
    \  [else (match_parens (rest lst))]))\n", "  (cond\n    [(empty? lst)\n     (string->symbol\
    \ \"No\")]\n    [(equal? (first lst) '())\n     (match_parens (rest lst))]\n \
    \   [else\n     (match_parens (rest lst))]))\n", "  (cond\n    [(empty? lst) \"\
    No\"]\n    [(equal? (first lst) '(') (match_parens (rest lst)))]\n    [(equal?\
    \ (first lst) ')') \"No\"]\n    [else (match_parens (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst)\n     (string->symbol \"No\")]\n    [(equal? (car lst) '(')\n\
    \     (match_parens (cdr lst))]\n    [else\n     (match_parens (cdr lst))]))\n",
  "  (cond\n    [(empty? lst) \"No\"]\n    [(equal? (car lst) '(') (match_parens (cdr\
    \ lst)))]\n    [else (match_parens (cdr lst))]))\n", "  (cond\n    [(empty? lst)\
    \ \"No\"]\n    [(equal? (first lst) '(') (match_parens (rest lst)))]\n    [(equal?\
    \ (first lst) ')') \"No\"]\n    [else (match_parens (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) \"No\"]\n    [(equal? (first lst) '(') (match_parens (rest\
    \ lst)))]\n    [(equal? (first lst) ')') \"No\"]\n    [else (match_parens (rest\
    \ lst))]))\n", "  (cond\n    [(empty? lst) \"No\"]\n    [(equal? (first lst) '(')\
    \ (match_parens (rest lst)))]\n    [(equal? (first lst) ')') \"No\"]\n    [else\
    \ (match_parens (rest lst))]))\n", "  (cond\n    [(empty? lst) \"No\"]\n    [(equal?\
    \ (car lst) '(') (match_parens (cdr lst)))]\n    [else (match_parens (cdr lst))]))\n",
  "  (cond\n    [(empty? lst) \"No\"]\n    [(equal? (car lst) '(') (match_parens (cdr\
    \ lst)))]\n    [else (match_parens (cdr lst))]))\n", "  (cond\n    [(empty? lst)\
    \ \"No\"]\n    [(equal? (first lst) '(') (match_parens (rest lst)))]\n    [(equal?\
    \ (first lst) ')') \"No\"]\n    [else (match_parens (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) \"No\"]\n    [(equal? (first lst) '(') (match_parens (rest\
    \ lst)))]\n    [(equal? (first lst) ')') \"No\"]\n    [else (match_parens (rest\
    \ lst))]))\n", "  (cond\n    [(empty? lst)\n     (string->list \"Yes\")]\n   \
    \ [(equal? (car lst) '(())())\n     (string->list \"Yes\")]\n    [else\n     (cond\n\
    \       [(equal? (car lst) '())\n        (string->list \"No\")]\n       [else\n\
    \        (cond\n         [(equal? (car lst) '(())())\n          (string->list\
    \ \"Yes\")]\n         [else\n          (cond\n            [(equal? (car lst) '())\n\
    \             (string->list \"No\")]\n            [else\n             (match_parens\
    \ (cdr lst))]))]))]))]))\n", "  (cond\n    [(empty? lst) \"No\"]\n    [(equal?\
    \ (first lst) '(') (match_parens (rest lst)))]\n    [(equal? (first lst) ')')\
    \ \"No\"]\n    [else (match_parens (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ \"No\"]\n    [(equal? (car lst) '(') (match_parens (cdr lst)))]\n    [else (match_parens\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) 'No]\n    [(equal? (first lst)\
    \ '(') (match_parens (rest lst)))]\n    [(equal? (first lst) ')') (match_parens\
    \ (rest lst))]\n    [else (match_parens (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) \"No\"]\n    [(equal? (first lst) '(') (match_parens (rest lst)))]\n  \
    \  [(equal? (first lst) ')') (match_parens (rest lst))]\n    [else (match_parens\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst)\n     (string->symbol \"No\"\
    )]\n    [(equal? (car lst) '(')\n     (match_parens (cdr lst))]\n    [else\n \
    \    (match_parens (cdr lst))]))\n", "  (cond\n    [(empty? lst)\n     (string->symbol\
    \ \"No\")]\n    [(equal? (car lst) '())\n     (match_parens (cdr lst))]\n    [else\n\
    \     (match_parens (cdr lst))]))\n", "  (cond\n    [(empty? lst) 'No]\n    [(equal?\
    \ (car lst) '(') (match_parens (cdr lst)))]\n    [else (match_parens (cdr lst))]))\n",
  "  (cond\n    [(empty? lst)\n     (string->list \"Yes\")]\n    [(equal? (first lst)\
    \ '(')\n     (match_parens (rest lst))]\n    [else\n     (match_parens (rest lst))]))\n",
  "  (cond\n    [(empty? lst) \"No\"]\n    [(equal? (first lst) '(') (match_parens\
    \ (rest lst)))]\n    [else (match_parens (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst)\n     (string? \"Yes\")]\n    [(equal? (first lst) '(())())\n     (match_parens\
    \ (rest lst))]\n    [else\n     (match_parens (rest lst))]))\n", "  (cond [(empty?\
    \ lst) \"No\"]\n        [(equal? (first lst) '(') (match_parens (rest lst)))]\n\
    \        [(equal? (first lst) ')') \"No\"]\n        [else (match_parens (rest\
    \ lst))]))\n", "  (cond\n    [(empty? lst) \"No\"]\n    [(equal? (first lst) '(')\
    \ (match_parens (rest lst)))]\n    [(equal? (first lst) ')') \"No\"]\n    [else\
    \ (match_parens (rest lst))]))\n", "  (cond\n    [(empty? lst) 'Yes]\n    [(equal?\
    \ (first lst) '(') (match_parens (rest lst)))]\n    [else (match_parens (rest\
    \ lst))]))\n", "  (cond\n    [(empty? lst) \"No\"]\n    [(equal? (car lst) '(')\
    \ (match_parens (cdr lst)))]\n    [(equal? (car lst) ')') \"Yes\"]\n    [else\
    \ (match_parens (cdr lst))]))\n", "  (cond\n    [(empty? lst) \"No\"]\n    [(equal?\
    \ (first lst) '(') (match_parens (rest lst)))]\n    [(equal? (first lst) ')')\
    \ \"No\"]\n    [else (match_parens (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 'No]\n    [(equal? (first lst) '(') (match_parens (rest lst)))]\n    [(equal?\
    \ (first lst) ')') (match_parens (rest lst))]\n    [else (match_parens (rest lst))]))\n",
  "  (cond\n    [(empty? lst) \"No\"]\n    [(equal? (first lst) '(') (match_parens\
    \ (rest lst)))]\n    [(equal? (first lst) ')') \"No\"]\n    [else (match_parens\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) \"No\"]\n    [(equal? (first\
    \ lst) '(') (match_parens (rest lst)))]\n    [(equal? (first lst) ')') \"No\"\
    ]\n    [else (match_parens (rest lst))]))\n", "  (cond\n    [(empty? lst)\n  \
    \   (eq? '() '())]\n    [(equal? (car lst) '())\n     (match_parens (cdr lst))]\n\
    \    [else\n     (match_parens (cdr lst))]))\n", "  (cond\n    [(empty? lst) \"\
    No\"]\n    [(equal? (first lst) '(') (match_parens (rest lst)))]\n    [(equal?\
    \ (first lst) ')') (match_parens (rest lst))]\n    [else (match_parens (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 'No]\n    [(equal? (first lst) '(') (match_parens (rest\
    \ lst)))]\n    [else (match_parens (rest lst))]))\n", "  (cond\n    [(empty? lst)\n\
    \     (string-match \"()\" \"\")]\n    [(equal? (first lst) '())\n     (string-match\
    \ \"()\" \"\")]\n    [else\n     (cond\n       [(equal? (first lst) '(()))\n \
    \       (string-match \"()\" \"\")]\n       [(equal? (first lst) '(()))\n    \
    \    (string-match \"()\" \"\")]\n       [(equal? (first lst) '(()))\n       \
    \ (string-match \"()\" \"\")]\n       [(equal? (first lst) '(()))\n        (string-match\
    \ \"()\" \"\")]\n       [(equal? (first lst) '(()))\n        (string-match \"\
    ()\" \"\")]\n       [(equal? (first lst) '(()))\n        (string-match \"()\"\
    \ \"\")]\n       [(equal? (first lst) '(()))\n        (string-match \"()\" \"\"\
    )]\n       [(equal? (first lst) '(()))\n        (string-match \"()\" \"\")]\n\
    \       [(equal? (first lst) '(()))\n        (string-match \"()\" \"\")]\n   \
    \    [(equal? (first lst) '(()))\n        (string-match \"()\" \"\")]\n      \
    \ [(equal? (first lst) '(()))\n        (string-match \"()\" \"\")]\n       [(equal?\
    \ (first lst) '(()))\n        (string-match \"()\" \"\")]\n       [(equal? (first\
    \ lst) '(()))\n        (string-match \"()\" \"\")]\n       [(equal? (first lst)\
    \ '(()))\n        (string-match \"()\" \"\")]\n       [(equal? (first lst) '(()))\n\
    \        (string-match \"()\" \"\")]\n       [(equal? (first lst) '(()))\n   \
    \     (string-match \"()\" \"\")]\n       [(equal? (first lst) '(()))\n      \
    \  (string-match \"()\" \"\")]\n       [(equal? (first lst) '(()))\n        (string-match\
    \ \"()\" \"\")]\n       [(equal? (first lst) '(()))\n        (string-match \"\
    ()\" \"\")]\n       [(equal? (first lst) '(()))\n        (string-match \"()\"\
    \ \"\")]\n       [(equal? (first lst) '(()))\n        (string-match \"()\" \"\"\
    )]\n       [(equal? (first lst) '(()))\n        (string-match \"()\" \"\")]\n\
    \       [(equal? (first lst) '(()))\n        (string-match \"()\" \"\")]\n   \
    \    [(equal? (first lst) ", "  (cond\n    [(empty? lst) \"No\"]\n    [(equal?\
    \ (car lst) '(') (match_parens (cdr lst)))]\n    [else (match_parens (cdr lst))]))\n",
  "  (cond\n    [(empty? lst) \"No\"]\n    [(equal? (first lst) '(') (match_parens\
    \ (rest lst)))]\n    [(equal? (first lst) ')') \"No\"]\n    [else (match_parens\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst)\n     (string->symbol \"No\"\
    )]\n    [(equal? (first lst) '())\n     (match_parens (rest lst))]\n    [else\n\
    \     (match_parens (rest lst))]))\n", "  (cond\n    [(empty? lst)\n     (string->symbol\
    \ \"No\")]\n    [(equal? (first lst) '(())())\n     (string->symbol \"Yes\")]\n\
    \    [else\n     (match_parens (rest lst))]))\n", "  (cond\n    [(empty? lst)\n\
    \     (string->symbol \"No\")]\n    [(equal? (first lst) '(')\n     (match_parens\
    \ (rest lst))]\n    [(equal? (first lst) ')')\n     (match_parens (rest lst))]\n\
    \    [else\n     (match_parens (rest lst))]\n    ))\n", "  (cond\n    [(empty?\
    \ lst) \"No\"]\n    [(equal? (first lst) '(') (match_parens (rest lst)))]\n  \
    \  [else (match_parens (rest lst))]))\n", "  (cond\n    [(empty? lst) \"No\"]\n\
    \    [(equal? (first lst) '(') (match_parens (rest lst)))]\n    [(equal? (first\
    \ lst) ')') \"No\"]\n    [else (match_parens (rest lst))]))\n", "  (cond\n   \
    \ [(empty? lst)\n     (string->symbol \"No\")]\n    [(equal? (car lst) '())\n\
    \     (match_parens (cdr lst))]\n    [else\n     (match_parens (cdr lst))]))\n",
  "  (cond\n    [(empty? lst) 'No]\n    [(equal? (first lst) '(') (match_parens (rest\
    \ lst)))]\n    [else (match_parens (rest lst))]))\n", "  (cond [(empty? lst) 'No]\n\
    \        [(equal? (first lst) '(') (match_parens (rest lst)))]\n        [(equal?\
    \ (first lst) ')') (match_parens (rest lst))]\n        [else (match_parens (rest\
    \ lst))]))\n", "  (cond\n    [(empty? lst)\n     (string->symbol \"No\")]\n  \
    \  [(equal? (first lst) '(())())\n     (string->symbol \"Yes\")]\n    [else\n\
    \     (match_parens (rest lst))]))\n", "  (cond\n    [(empty? lst) \"No\"]\n \
    \   [(equal? (first lst) '(') (match_parens (rest lst)))]\n    [(equal? (first\
    \ lst) ')') \"No\"]\n    [else (match_parens (rest lst))]))\n", "  (cond\n   \
    \ [(empty? lst) 'No]\n    [(equal? (car lst) '(') (match_parens (cdr lst)))]\n\
    \    [else (match_parens (cdr lst))]))\n", "  (cond\n    [(empty? lst) \"No\"\
    ]\n    [(equal? (first lst) '(') (match_parens (rest lst)))]\n    [(equal? (first\
    \ lst) ')') \"No\"]\n    [else (match_parens (rest lst))]))\n", "  (cond\n   \
    \ [(empty? lst) \"No\"]\n    [(equal? (first lst) '(') (match_parens (rest lst)))]\n\
    \    [(equal? (first lst) ')') (match_parens (rest lst))]\n    [else (match_parens\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst)\n     (string? \"Yes\")]\n  \
    \  [(equal? (first lst) '(())())\n     (match_parens (rest lst))]\n    [else\n\
    \     (match_parens (rest lst))]))\n", "  (cond\n    [(empty? lst) \"No\"]\n \
    \   [(equal? (car lst) '(') (match_parens (cdr lst)))]\n    [else (match_parens\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst)\n     (string=? (car lst) '())]\n\
    \    [else\n     (match_parens (cdr lst))]))\n", "  (cond\n    [(empty? lst)\n\
    \     (string=? \"Yes\" \"No\")]\n    [(equal? (first lst) '(')\n     (match_parens\
    \ (rest lst))]\n    [else\n     (match_parens (rest lst))]))\n", "  (cond\n  \
    \  [(empty? lst)\n     (string->list \"Yes\")]\n    [(equal? (car lst) '(')\n\
    \     (match_parens (cdr lst))]\n    [else\n     (match_parens (cdr lst))]\n \
    \   [else (match_parens (cdr lst))]))\n", "  (cond\n    [(empty? lst)\n     (string=?\
    \ (first lst) '())]\n    [else\n     (cond\n       [(string=? (first lst) '())\
    \ (match_parens (rest lst))]\n       [(string=? (first lst) '(())) (match_parens\
    \ (rest lst))]\n       [(string=? (first lst) '(())()) (match_parens (rest lst))]\n\
    \       [(string=? (first lst) '())()) (match_parens (rest lst))]\n       [(string=?\
    \ (first lst) '())())\n        (match_parens (rest lst))]\n       [else (match_parens\
    \ (rest lst))]\n       )])]))\n", "  (cond\n    [(empty? lst)\n     (string->symbol\
    \ \"No\")]\n    [(equal? (first lst) '(#\\))\n     (match_parens (rest lst))]\n\
    \    [else\n     (match_parens (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ \"No\"]\n    [(equal? (car lst) '(') (match_parens (cdr lst)))]\n    [else (match_parens\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) \"No\"]\n    [(equal? (first lst)\
    \ '(') (match_parens (rest lst)))]\n    [else (match_parens (rest lst))]))\n",
  "  (cond\n    [(empty? lst) \"No\"]\n    [(equal? (first lst) '(') (match_parens\
    \ (rest lst)))]\n    [else (match_parens (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 'No]\n    [(equal? (first lst) '(') (match_parens (rest lst)))]\n    [else\
    \ (match_parens (rest lst))]))\n", "  (cond\n    [(empty? lst) 'No]\n    [(equal?\
    \ (first lst) '(') (match_parens (rest lst)))]\n    [else (match_parens (rest\
    \ lst))]))\n", "  (cond\n    [(empty? lst) \"No\"]\n    [(equal? (car lst) '(')\
    \ (match_parens (cdr lst)))]\n    [else (match_parens (cdr lst))]))\n", "  (cond\n\
    \    [(empty? lst) \"No\"]\n    [(equal? (first lst) '(') (match_parens (rest\
    \ lst)))]\n    [(equal? (first lst) ')') \"No\"]\n    [else (match_parens (rest\
    \ lst))]))\n", "  (cond\n    [(empty? lst) 'No]\n    [(equal? (first lst) '(')\
    \ (match_parens (rest lst)))]\n    [else (match_parens (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) \"No\"]\n    [(equal? (car lst) '(') (match_parens (cdr lst)))]\n\
    \    [else (match_parens (cdr lst))]))\n", "  (cond\n    [(empty? lst)\n     (string=?\
    \ \"()\" \"()\")]\n    [else\n     (cond\n       [(string=? (car lst) \")\")\n\
    \        (match_parens (cdr lst))]\n       [(string=? (car lst) \"(\")\n     \
    \   (match_parens (cdr lst))]\n       [else\n        (match_parens (cdr lst))]\n\
    \       ])]))\n", "  (cond\n    [(empty? lst) \"No\"]\n    [(equal? (first lst)\
    \ '(') (match_parens (rest lst)))]\n    [(equal? (first lst) ')') (match_parens\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst)\n     (string=? \"()\" \"()\"\
    )]\n    [(equal? (car lst) '(')\n     (match_parens (cdr lst))]\n    [(equal?\
    \ (car lst) ')')\n     (match_parens (cdr lst))]\n    [else\n     (match_parens\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) \"No\"]\n    [(equal? (first lst)\
    \ '(') (match_parens (rest lst)))]\n    [(equal? (first lst) ')') \"No\"]\n  \
    \  [else (match_parens (rest lst))]))\n", "  (cond\n    [(empty? lst) 'No]\n \
    \   [(equal? (first lst) '(') (match_parens (rest lst)))]\n    [else (match_parens\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst)\n     (string->symbol \"No\"\
    )]\n    [(equal? (car lst) '())\n     (string->symbol \"Yes\")]\n    [else\n \
    \    (match_parens (cdr lst))]))\n", "  (cond\n    [(empty? lst) \"No\"]\n   \
    \ [(equal? (first lst) '(') (match_parens (rest lst)))]\n    [(equal? (first lst)\
    \ ')') \"No\"]\n    [else (match_parens (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) \"No\"]\n    [(equal? (first lst) '(') (match_parens (rest lst)))]\n  \
    \  [else (match_parens (rest lst))]))\n", "  (cond\n    [(empty? lst)\n     (string->symbol\
    \ \"No\")]\n    [(equal? (first lst) '(')\n     (match_parens (rest lst))]\n \
    \   [else\n     (match_parens (rest lst))]))\n", "  (cond\n    [(empty? lst) \"\
    No\"]\n    [(equal? (car lst) '(') (match_parens (cdr lst)))]\n    [else (match_parens\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) 'No]\n    [(equal? (first lst)\
    \ '(') (match_parens (rest lst)))]\n    [else (match_parens (rest lst))]))\n",
  "  (cond\n    [(empty? lst) \"No\"]\n    [(equal? (first lst) '(') (match_parens\
    \ (rest lst)))]\n    [(equal? (first lst) ')') \"Yes\"]\n    [else (match_parens\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst)\n     (string->symbol \"No\"\
    )]\n    [(equal? (car lst) '(')\n     (match_parens (cdr lst))]\n    [else\n \
    \    (match_parens (cdr lst))]))\n", "  (cond\n    [(empty? lst) \"No\"]\n   \
    \ [(equal? (car lst) '(') (match_parens (cdr lst)))]\n    [else (match_parens\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) \"No\"]\n    [(equal? (car lst)\
    \ '(') (match_parens (cdr lst)))]\n    [else (match_parens (cdr lst))]))\n", " \
    \ (cond\n    [(empty? lst)\n     (string->list \"Yes\")]\n    [(equal? (first\
    \ lst) '(())())\n     (string->list \"Yes\")]\n    [(equal? (first lst) '())\n\
    \     (string->list \"No\")]\n    [else\n     (match_parens (rest lst))]))\n",
  "  (cond\n    [(empty? lst) \"No\"]\n    [(equal? (car lst) '(') (match_parens (cdr\
    \ lst)))]\n    [else (match_parens (cdr lst))]))\n", "  (cond\n    [(empty? lst)\
    \ \"No\"]\n    [(equal? (car lst) '(') (match_parens (cdr lst)))]\n    [else (match_parens\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst)\n     (string->symbol \"No\")]\n\
    \    [(equal? (first lst) '(')\n     (match_parens (rest lst))]\n    [else\n \
    \    (match_parens (rest lst))]))\n", "  (cond\n    [(empty? lst) \"No\"]\n  \
    \  [(equal? (first lst) '(') (match_parens (rest lst)))]\n    [(equal? (first\
    \ lst) ')') \"No\"]\n    [else (match_parens (rest lst))]))\n", "  (cond\n   \
    \ [(empty? lst) \"No\"]\n    [(equal? (car lst) '(') (match_parens (cdr lst)))]\n\
    \    [else (match_parens (cdr lst))]))\n", "  (cond\n    [(empty? lst)\n     (string->symbol\
    \ \"No\")]\n    [(equal? (car lst) '(')\n     (match_parens (cdr lst))]\n    [(equal?\
    \ (car lst) ')')\n     (match_parens (cdr lst))]\n    [else\n     (match_parens\
    \ (cdr lst))]\n  ))\n", "  (cond\n    [(empty? lst) \"No\"]\n    [(equal? (car\
    \ lst) '(') (match_parens (cdr lst)))]\n    [(equal? (car lst) ')') \"No\"]\n\
    \    [else (match_parens (cdr lst))]))\n", "  (cond\n    [(empty? lst) \"No\"\
    ]\n    [(equal? (car lst) '(') (match_parens (cdr lst)))]\n    [else (match_parens\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) \"No\"]\n    [(equal? (car lst)\
    \ '(') (match_parens (cdr lst)))]\n    [else (match_parens (cdr lst))]))\n", " \
    \ (cond\n    [(empty? lst) \"No\"]\n    [(equal? (first lst) '(') (match_parens\
    \ (rest lst)))]\n    [(equal? (first lst) ')') \"No\"]\n    [else (match_parens\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst)\n     (string->list \"Yes\")]\n\
    \    [(equal? (first lst) '(())())\n     (match_parens (rest lst))]\n    [(equal?\
    \ (first lst) '())\n     (match_parens (rest lst))]\n    [else\n     (match_parens\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) \"No\"]\n    [(equal? (car lst)\
    \ '(') (match_parens (cdr lst)))]\n    [else (match_parens (cdr lst))]))\n", " \
    \ (cond\n    [(empty? lst) \"No\"]\n    [(equal? (first lst) '(') (match_parens\
    \ (rest lst)))]\n    [(equal? (first lst) ')') \"No\"]\n    [else (match_parens\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) \"No\"]\n    [(equal? (first\
    \ lst) '(') (match_parens (rest lst)))]\n    [(equal? (first lst) ')') \"No\"\
    ]\n    [else (match_parens (rest lst))]))\n", "  (cond\n    [(empty? lst) \"No\"\
    ]\n    [(equal? (car lst) '(') (match_parens (cdr lst)))]\n    [else (match_parens\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) \"No\"]\n    [(equal? (first lst)\
    \ '(') (match_parens (rest lst)))]\n    [else (match_parens (rest lst))]))\n",
  "  (cond\n    [(empty? lst)\n     (string->symbol \"No\")]\n    [(equal? (first\
    \ lst) '())\n     (match_parens (rest lst))]\n    [else\n     (match_parens (rest\
    \ lst))]))\n", "  (cond\n    [(empty? lst) \"No\"]\n    [(equal? (first lst) '(')\
    \ (match_parens (rest lst)))]\n    [(equal? (first lst) ')') \"Yes\"]\n    [else\
    \ (match_parens (rest lst))]))\n", "  (cond [(empty? lst) \"No\"]\n        [(equal?\
    \ (car lst) '(') (match_parens (cdr lst)))]\n        [(equal? (car lst) ')') \"\
    Yes\"]\n        [else (match_parens (cdr lst))]))\n", "  (cond\n    [(empty? lst)\
    \ \"No\"]\n    [(equal? (car lst) '(') (match_parens (cdr lst)))]\n    [else (match_parens\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) \"No\"]\n    [(equal? (first lst)\
    \ '(') (match_parens (rest lst)))]\n    [(equal? (first lst) ')') \"No\"]\n  \
    \  [else (match_parens (rest lst))]))\n", "  (cond [(empty? lst)\n         'No]\n\
    \        [(equal? (car lst) '(')\n         (match_parens (cdr lst))]\n       \
    \ [else\n         (match_parens (cdr lst))]\n        [(equal? (car lst) ')')\n\
    \         (match_parens (cdr lst))]\n        [else\n         (match_parens (cdr\
    \ lst))]\n        [else\n         'Yes]))\n", "  (cond\n    [(empty? lst)\n  \
    \   (string->list \"Yes\")]\n    [(equal? (first lst) '(')\n     (match_parens\
    \ (rest lst))]\n    [(equal? (first lst) ')')\n     (match_parens (rest lst))]\n\
    \    [else\n     (match_parens (rest lst))]))\n", "  (cond\n    [(empty? lst)\n\
    \     (string->symbol \"No\")]\n    [(equal? (car lst) '(')\n     (match_parens\
    \ (cdr lst))]\n    [else\n     (match_parens (cdr lst))]))\n", "  (cond\n    [(empty?\
    \ lst) \"No\"]\n    [(equal? (car lst) '(') (match_parens (cdr lst)))]\n    [else\
    \ (match_parens (cdr lst))]))\n", "  (cond\n    [(empty? lst)\n     (string->symbol\
    \ \"No\")]\n    [(equal? (first lst) '(')\n     (match_parens (rest lst))]\n \
    \   [else\n     (match_parens (rest lst))]))\n", "  (cond\n    [(empty? lst)\n\
    \     (string->list \"Yes\")]\n    [(equal? (first lst) '(())())\n     (string->list\
    \ \"Yes\")]\n    [else\n     (cond\n       [(equal? (first lst) '())\n       \
    \ (string->list \"No\")]\n       [else\n        (cond\n          [(equal? (first\
    \ lst) '(())())\n           (string->list \"Yes\")]\n          [else\n       \
    \    (cond\n             [(equal? (first lst) '())\n               (string->list\
    \ \"No\")]\n             [else\n               (cond\n                 [(equal?\
    \ (first lst) '(())())\n                   (string->list \"Yes\")]\n         \
    \        [else\n                   (cond\n                     [(equal? (first\
    \ lst) '())\n                       (string->list \"No\")]\n                 \
    \    [else\n                       (match_parens (rest lst))]\n              \
    \     )\n                 ])\n              ])\n          ])\n       ])\n    \
    \ ])\n   ])\n)\n", "  (cond\n    [(empty? lst) \"No\"]\n    [(equal? (first lst)\
    \ '(') (match_parens (rest lst)))]\n    [else (match_parens (rest lst))]))\n",
  "  (cond\n    [(empty? lst)\n     (string=? \"()\" \"()\")]\n    [(equal? (car lst)\
    \ '(')\n     (match_parens (cdr lst))]\n    [else\n     (match_parens (cdr lst))]))\n",
  "  (cond\n    [(empty? lst) \"No\"]\n    [(equal? (car lst) '(') (match_parens (cdr\
    \ lst)))]\n    [else (match_parens (cdr lst))]))\n", "  (cond\n    [(empty? lst)\
    \ \"No\"]\n    [(equal? (car lst) '(') (match_parens (cdr lst)))]\n    [else (match_parens\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst)\n     (string->list \"Yes\")]\n\
    \    [(equal? (first lst) '(')\n     (match_parens (rest lst))]\n    [else\n \
    \    (match_parens (rest lst))]))\n", "  (cond\n    [(empty? lst) 'No]\n    [(equal?\
    \ (car lst) '(') (match_parens (cdr lst)))]\n    [else (match_parens (cdr lst))]))\n",
  "  (cond\n    [(empty? lst) \"No\"]\n    [(equal? (first lst) '(') (match_parens\
    \ (rest lst)))]\n    [else (match_parens (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst)\n     (string->symbol \"No\")]\n    [(equal? (car lst) '())\n     (match_parens\
    \ (cdr lst))]\n    [else\n     (match_parens (cdr lst))]))\n", "  (cond\n    [(empty?\
    \ lst)\n     (string=? \"()\" \"()\")]\n    [(equal? (first lst) '(')\n     (match_parens\
    \ (rest lst))]\n    [else\n     (match_parens (rest lst))]))\n", "  (cond\n  \
    \  [(empty? lst) 'No]\n    [(equal? (first lst) '(') (match_parens (rest lst)))]\n\
    \    [else (match_parens (rest lst))]))\n", "  (cond\n    [(empty? lst) 'No]\n\
    \    [(equal? (car lst) '(') (match_parens (cdr lst)))]\n    [else (match_parens\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) \"No\"]\n    [(equal? (first lst)\
    \ '(') (match_parens (rest lst)))]\n    [(equal? (first lst) ')') \"No\"]\n  \
    \  [else (match_parens (rest lst))]))\n", "  (cond\n    [(empty? lst) \"No\"]\n\
    \    [(equal? (first lst) '(') (match_parens (rest lst)))]\n    [(equal? (first\
    \ lst) ')') \"No\"]\n    [else (match_parens (rest lst))]))\n", "  (cond [(empty?\
    \ lst) 'No]\n        [(equal? (car lst) '(') (match_parens (cdr lst)))]\n    \
    \    [(equal? (car lst) ')') 'Yes]\n        [else (match_parens (cdr lst))]))\n",
  "  (cond\n    [(empty? lst) 'No]\n    [(equal? (first lst) '(') (match_parens (rest\
    \ lst)))]\n    [else (match_parens (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ \"No\"]\n    [(equal? (first lst) '(') (match_parens (rest lst)))]\n    [(equal?\
    \ (first lst) ')') \"No\"]\n    [else (match_parens (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 'No]\n    [(equal? (first lst) '(') (match_parens (rest lst)))]\n\
    \    [(equal? (first lst) ')') (match_parens (rest lst))]\n    [else (match_parens\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) \"No\"]\n    [(equal? (first\
    \ lst) '(') (match_parens (rest lst)))]\n    [else (match_parens (rest lst))]))\n",
  "  (cond\n    [(empty? lst)\n     (string->list \"No\")]\n    [(equal? (first lst)\
    \ '(')\n     (match_parens (rest lst))]\n    [(equal? (first lst) ')')\n     (match_parens\
    \ (rest lst))]\n    [else\n     (match_parens (rest lst))]))\n", "  (cond\n  \
    \  [(empty? lst)\n     (string->symbol \"No\")]\n    [(equal? (first lst) '(')\n\
    \     (match_parens (rest lst))]\n    [(equal? (first lst) ')')\n     (match_parens\
    \ (rest lst))]\n    [else\n     (match_parens (rest lst))]\n    [else\n     (match_parens\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) \"No\"]\n    [(equal? (first\
    \ lst) '(') (match_parens (rest lst)))]\n    [else (match_parens (rest lst))]))\n",
  "  (cond\n    [(empty? lst) \"No\"]\n    [(equal? (first lst) '(') (match_parens\
    \ (rest lst)))]\n    [(equal? (first lst) ')') \"No\"]\n    [else (match_parens\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) \"No\"]\n    [(equal? (first\
    \ lst) '(') (match_parens (rest lst)))]\n    [else (match_parens (rest lst))]))\n",
  "  (cond\n    [(empty? lst) \"No\"]\n    [(equal? (first lst) '(') (match_parens\
    \ (rest lst)))]\n    [(equal? (first lst) ')') \"No\"]\n    [else (match_parens\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) \"No\"]\n    [(equal? (first\
    \ lst) '(') (match_parens (rest lst)))]\n    [(equal? (first lst) ')') \"No\"\
    ]\n    [else (match_parens (rest lst))]))\n", "  (cond\n    [(empty? lst) \"No\"\
    ]\n    [(equal? (first lst) '(') (match_parens (rest lst)))]\n    [else (match_parens\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) \"No\"]\n    [(equal? (car lst)\
    \ '(') (match_parens (cdr lst)))]\n    [else (match_parens (cdr lst))]))\n", " \
    \ (cond\n    [(empty? lst) \"No\"]\n    [(equal? (car lst) '(') (match_parens\
    \ (cdr lst)))]\n    [else (match_parens (cdr lst))]))\n", "  (cond\n    [(empty?\
    \ lst)\n     (string->list \"Yes\")]\n    [(equal? (first lst) '(')\n     (match_parens\
    \ (rest lst))]\n    [(equal? (first lst) ')')\n     (match_parens (rest lst))]\n\
    \    [else\n     (match_parens (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ \"No\"]\n    [(equal? (first lst) '(') (match_parens (rest lst)))]\n    [(equal?\
    \ (first lst) ')') \"No\"]\n    [else (match_parens (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) \"No\"]\n    [(equal? (car lst) '(') (match_parens (cdr lst)))]\n\
    \    [else (match_parens (cdr lst))]))\n", "  (cond\n    [(empty? lst) 'No]\n\
    \    [(equal? (car lst) '(') (match_parens (cdr lst)))]\n    [else (match_parens\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) 'No]\n    [(equal? (first lst)\
    \ '(') (match_parens (rest lst)))]\n    [(equal? (first lst) ')') (match_parens\
    \ (rest lst))]\n    [else (match_parens (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 'No]\n    [(equal? (car lst) '(') (match_parens (cdr lst)))]\n    [else\
    \ (match_parens (cdr lst))]))\n", "  (cond\n    [(empty? lst)\n     (string->symbol\
    \ \"No\")]\n    [(equal? (car lst) '())\n     (string->symbol \"Yes\")]\n    [else\n\
    \     (match_parens (cdr lst))]))\n", "  (cond\n    [(empty? lst)\n     (string->list\
    \ \"Yes\")]\n    [(equal? (first lst) '(') (match_parens (rest lst)))]\n    [else\n\
    \     (match_parens (rest lst))]))\n", "  (cond\n    [(empty? lst)\n     (string->list\
    \ \"Yes\")]\n    [(equal? (car lst) '())\n     (match_parens (cdr lst))]\n   \
    \ [else\n     (match_parens (cdr lst))]))\n", "  (cond\n    [(empty? lst)\n  \
    \   (string=? \"()\" \"()\")\n     (string=? \"()\" \"()\")\n     (string=? \"\
    ()\" \"()\")\n     (string=? \"()\" \"()\")\n     (string=? \"()\" \"()\")\n \
    \    (string=? \"()\" \"()\")\n     (string=? \"()\" \"()\")\n     (string=? \"\
    ()\" \"()\")\n     (string=? \"()\" \"()\")\n     (string=? \"()\" \"()\")\n \
    \    (string=? \"()\" \"()\")\n     (string=? \"()\" \"()\")\n     (string=? \"\
    ()\" \"()\")\n     (string=? \"()\" \"()\")\n     (string=? \"()\" \"()\")\n \
    \    (string=? \"()\" \"()\")\n     (string=? \"()\" \"()\")\n     (string=? \"\
    ()\" \"()\")\n     (string=? \"()\" \"()\")\n     (string=? \"()\" \"()\")\n \
    \    (string=? \"()\" \"()\")\n     (string=? \"()\" \"()\")\n     (string=? \"\
    ()\" \"()\")\n     (string=? \"()\" \"()\")\n     (string=? \"()\" \"()\")\n \
    \    (string=? \"()\" \"()\")\n     (string=? \"()\" \"()\")\n     (string=? \"\
    ()\" \"()\")\n     (string=? \"()\" \"()\")\n     (string=? \"()\" \"()\")\n \
    \    (string=? \"()\" \"()\")\n     (string=? \"()\" \"()\")\n     (string=? \"\
    ()\" \"()\")\n     (string=? \"()\" \"()\")\n     (string=? \"()\" \"()\")\n \
    \    (string=? \"()\" \"()\")\n     (string=? \"()\" \"()\")\n     (string=? \"\
    ()\" \"()\")\n     (string=? \"()\" \"()\")\n     (string=? \"()\" \"()\")\n \
    \    (string=? \"()\" \"()\")\n     (string=? \"()\" \"()\")\n     (string=? \"\
    ()\" \"()\")\n     (string=? \"()\" \"()\")\n     (string=? \"()\" \"()\")\n \
    \    (string=? \"()\" \"()\")\n     (string=? \"()\" \"()\")\n     (string=? \"\
    ()\" \"()\")\n     (string=? \"()\" \"()\")\n     (string=? \"()\" \"()\")\n \
    \    (string=? \"()\" \"()\")\n     (string=? \"()\" \"()\")\n     (string=? \"\
    ()\" \"()\")\n     (string=? \"()\" \"()\")\n     (string=? \"()\" \"()\")\n \
    \    (string=? \"()\" \"()", "  (cond\n    [(empty? lst) \"No\"]\n    [(equal?\
    \ (first lst) '(') (match_parens (rest lst)))]\n    [else (match_parens (rest\
    \ lst))]))\n", "  (cond\n    [(empty? lst) \"No\"]\n    [(equal? (first lst) '(')\
    \ (match_parens (rest lst)))]\n    [(equal? (first lst) ')') (match_parens (rest\
    \ lst))]\n    [else (match_parens (rest lst))]))\n", "  (cond\n    [(empty? lst)\n\
    \     (string->symbol \"No\")]\n    [(equal? (car lst) '(())())\n     (string->symbol\
    \ \"Yes\")]\n    [else\n     (match_parens (cdr lst))]))\n", "  (cond\n    [(empty?\
    \ lst)\n     (string->symbol \"No\")]\n    [(equal? (first lst) '(())())\n   \
    \  (string->symbol \"Yes\")]\n    [else\n     (match_parens (rest lst))]))\n",
  "  (cond\n    [(empty? lst) \"No\"]\n    [(equal? (first lst) '(') (match_parens\
    \ (rest lst)))]\n    [(equal? (first lst) ')') (match_parens (rest lst))]\n  \
    \  [else (match_parens (rest lst))]))\n", "  (cond\n    [(empty? lst) 'No]\n \
    \   [(equal? (car lst) '(') (match_parens (cdr lst)))]\n    [else (match_parens\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) \"No\"]\n    [(equal? (car lst)\
    \ '(') (match_parens (cdr lst)))]\n    [else (match_parens (cdr lst))]))\n", " \
    \ (cond\n    [(empty? lst) 'No]\n    [(equal? (first lst) '(') (match_parens (rest\
    \ lst)))]\n    [else (match_parens (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ \"No\"]\n    [(equal? (car lst) '(') (match_parens (cdr lst)))]\n    [else (match_parens\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst)\n     (string->symbol \"No\")]\n\
    \    [(equal? (car lst) '())\n     (string->symbol \"Yes\")]\n    [else\n    \
    \ (match_parens (cdr lst))]))\n", "  (cond\n    [(empty? lst) 'No]\n    [(equal?\
    \ (car lst) '(') (match_parens (cdr lst)))]\n    [(equal? (car lst) ')') 'Yes]\n\
    \    [else (match_parens (cdr lst))]))\n", "  (cond\n    [(empty? lst) \"No\"\
    ]\n    [(equal? (first lst) '(') (match_parens (rest lst)))]\n    [(equal? (first\
    \ lst) ')') \"No\"]\n    [else (match_parens (rest lst))]))\n", "  (cond\n   \
    \ [(empty? lst) \"No\"]\n    [(equal? (first lst) '(') (match_parens (rest lst)))]\n\
    \    [(equal? (first lst) ')') \"No\"]\n    [else (match_parens (rest lst))]))\n",
  "  (cond\n    [(empty? lst) \"No\"]\n    [(equal? (first lst) '(') (match_parens\
    \ (rest lst)))]\n    [(equal? (first lst) ')') \"No\"]\n    [else (match_parens\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) \"No\"]\n    [(equal? (car lst)\
    \ '(') (match_parens (cdr lst)))]\n    [else (match_parens (cdr lst))]))\n", " \
    \ (cond\n    [(empty? lst) \"No\"]\n    [(equal? (car lst) '(') (match_parens\
    \ (cdr lst)))]\n    [(equal? (car lst) ')') \"Yes\"]\n    [else (match_parens\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) 'No]\n    [(equal? (car lst) '(')\
    \ (match_parens (cdr lst)))]\n    [else (match_parens (cdr lst))]))\n", "  (cond\n\
    \    [(empty? lst) \"No\"]\n    [(equal? (car lst) '(') (match_parens (cdr lst)))]\n\
    \    [else (match_parens (cdr lst))]))\n", "  (cond\n    [(empty? lst) \"No\"\
    ]\n    [(equal? (first lst) '(') (match_parens (rest lst)))]\n    [else (match_parens\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst)\n     (string->list \"Yes\")]\n\
    \    [(equal? (car lst) '(')\n     (match_parens (cdr lst))]\n    [else\n    \
    \ (match_parens (cdr lst))]\n    [else (match_parens (cdr lst))]))\n", "  (cond\n\
    \    [(empty? lst) \"No\"]\n    [(equal? (car lst) '(') (match_parens (cdr lst)))]\n\
    \    [else (match_parens (cdr lst))]))\n", "  (cond\n    [(empty? lst)\n     (string->symbol\
    \ \"No\")]\n    [(equal? (first lst) '(())())\n     (string->symbol \"Yes\")]\n\
    \    [else\n     (match_parens (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ \"No\"]\n    [(equal? (car lst) '(') (match_parens (cdr lst)))]\n    [else (match_parens\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) \"No\"]\n    [(equal? (car lst)\
    \ '(') (match_parens (cdr lst)))]\n    [else (match_parens (cdr lst))]))\n", " \
    \ (cond\n    [(empty? lst) 'No]\n    [(equal? (first lst) '(') (match_parens (rest\
    \ lst)))]\n    [else (match_parens (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ \"No\"]\n    [(equal? (car lst) '(') (match_parens (cdr lst)))]\n    [else (match_parens\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst)\n     (string->symbol \"No\")]\n\
    \    [(equal? (car lst) '())\n     (match_parens (cdr lst))]\n    [else\n    \
    \ (match_parens (cdr lst))]))\n", "  (cond\n    [(empty? lst) \"No\"]\n    [(equal?\
    \ (first lst) '(') (match_parens (rest lst)))]\n    [(equal? (first lst) ')')\
    \ \"No\"]\n    [else (match_parens (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ \"No\"]\n    [(equal? (first lst) '(') (match_parens (rest lst)))]\n    [(equal?\
    \ (first lst) ')') \"No\"]\n    [else (match_parens (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 'Yes]\n    [(equal? (first lst) '(') (match_parens (rest lst)))]\n\
    \    [else (match_parens (rest lst))]))\n", "  (cond\n    [(empty? lst) 'No]\n\
    \    [(equal? (car lst) '(') (match_parens (cdr lst)))]\n    [(equal? (car lst)\
    \ ')') 'Yes]\n    [else (match_parens (cdr lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 'No]\n    [(equal? (first lst) '(') (match_parens (rest lst)))]\n    [else\
    \ (match_parens (rest lst))]))\n", "  (cond\n    [(empty? lst)\n     (string->symbol\
    \ \"No\")]\n    [(equal? (car lst) '(')\n     (match_parens (cdr lst))]\n    [else\n\
    \     (match_parens (cdr lst))]\n    [else (match_parens (cdr lst))]))\n", " \
    \ (cond\n    [(empty? lst)\n     (string=? \"()\" \"()\")]\n    [(equal? (car\
    \ lst) '(')\n     (match_parens (cdr lst))]\n    [(equal? (car lst) ')')\n   \
    \  (match_parens (cdr lst))]\n    [else\n     (match_parens (cdr lst))]))\n",
  "  (cond\n    [(empty? lst)\n     (string->symbol \"No\")]\n    [(equal? (first\
    \ lst) '(')\n     (match_parens (rest lst))]\n    [(equal? (first lst) ')')\n\
    \     (match_parens (rest lst))]\n    [else\n     (match_parens (rest lst))]))\n",
  "  (cond\n    [(empty? lst) \"No\"]\n    [(equal? (first lst) '(') (match_parens\
    \ (rest lst)))]\n    [(equal? (first lst) ')') \"No\"]\n    [else (match_parens\
    \ (rest lst))]))\n", "  (cond [(empty? lst) \"No\"]\n        [(equal? (first lst)\
    \ '(') (match_parens (rest lst)))]\n        [(equal? (first lst) ')') \"No\"]\n\
    \        [else (match_parens (rest lst))]))\n", "  (cond\n    [(empty? lst) \"\
    No\"]\n    [(equal? (first lst) '(') (match_parens (rest lst)))]\n    [(equal?\
    \ (first lst) ')') \"No\"]\n    [else (match_parens (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) \"No\"]\n    [(equal? (car lst) '(') (match_parens (cdr lst)))]\n\
    \    [else (match_parens (cdr lst))]))\n", "  (cond\n    [(empty? lst) \"No\"\
    ]\n    [(equal? (car lst) '(') (match_parens (cdr lst)))]\n    [else (match_parens\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) \"No\"]\n    [(equal? (first lst)\
    \ '(') (match_parens (rest lst)))]\n    [(equal? (first lst) ')') (match_parens\
    \ (rest lst))]\n    [else (match_parens (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst)\n     (string->symbol \"No\")]\n    [(equal? (first lst) '(())())\n   \
    \  (string->symbol \"Yes\")]\n    [else\n     (match_parens (rest lst))]))\n",
  "  (cond\n    [(empty? lst) \"No\"]\n    [(equal? (car lst) '(') (match_parens (cdr\
    \ lst)))]\n    [(equal? (car lst) ')') \"Yes\"]\n    [else (match_parens (cdr\
    \ lst))]))\n", "  (cond\n    [(empty? lst) \"No\"]\n    [(equal? (car lst) '(')\
    \ (match_parens (cdr lst)))]\n    [else (match_parens (cdr lst))]))\n", "  (cond\
    \ [(empty? lst) 'No]\n        [(equal? (car lst) '(') (match_parens (cdr lst)))]\n\
    \        [(equal? (car lst) ')') (match_parens (cdr lst))]\n        [else (match_parens\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) 'No]\n    [(equal? (first lst)\
    \ '(') (match_parens (rest lst)))]\n    [else (match_parens (rest lst))]))\n",
  "  (cond\n    [(empty? lst)\n     (string=? \"Yes\" \"No\")]\n    [(equal? (first\
    \ lst) '(')\n     (match_parens (rest lst))]\n    [(equal? (first lst) ')')\n\
    \     (match_parens (rest lst))]\n    [else\n     (match_parens (rest lst))]))\n",
  "  (cond\n    [(empty? lst)\n     (string->list \"Yes\")]\n    [(equal? (car lst)\
    \ '(')\n     (match_parens (cdr lst))]\n    [else\n     (match_parens (cdr lst))]))\n",
  "  (cond\n    [(empty? lst)\n     (string=? \"()\" \"()\")\n     (string=? \"()\"\
    \ \"()\")\n     (string=? \"()\" \"()\")\n     (string=? \"()\" \"()\")\n    \
    \ (string=? \"()\" \"()\")\n     (string=? \"()\" \"()\")\n     (string=? \"()\"\
    \ \"()\")\n     (string=? \"()\" \"()\")\n     (string=? \"()\" \"()\")\n    \
    \ (string=? \"()\" \"()\")\n     (string=? \"()\" \"()\")\n     (string=? \"()\"\
    \ \"()\")\n     (string=? \"()\" \"()\")\n     (string=? \"()\" \"()\")\n    \
    \ (string=? \"()\" \"()\")\n     (string=? \"()\" \"()\")\n     (string=? \"()\"\
    \ \"()\")\n     (string=? \"()\" \"()\")\n     (string=? \"()\" \"()\")\n    \
    \ (string=? \"()\" \"()\")\n     (string=? \"()\" \"()\")\n     (string=? \"()\"\
    \ \"()\")\n     (string=? \"()\" \"()\")\n     (string=? \"()\" \"()\")\n    \
    \ (string=? \"()\" \"()\")\n     (string=? \"()\" \"()\")\n     (string=? \"()\"\
    \ \"()\")\n     (string=? \"()\" \"()\")\n     (string=? \"()\" \"()\")\n    \
    \ (string=? \"()\" \"()\")\n     (string=? \"()\" \"()\")\n     (string=? \"()\"\
    \ \"()\")\n     (string=? \"()\" \"()\")\n     (string=? \"()\" \"()\")\n    \
    \ (string=? \"()\" \"()\")\n     (string=? \"()\" \"()\")\n     (string=? \"()\"\
    \ \"()\")\n     (string=? \"()\" \"()\")\n     (string=? \"()\" \"()\")\n    \
    \ (string=? \"()\" \"()\")\n     (string=? \"()\" \"()\")\n     (string=? \"()\"\
    \ \"()\")\n     (string=? \"()\" \"()\")\n     (string=? \"()\" \"()\")\n    \
    \ (string=? \"()\" \"()\")\n     (string=? \"()\" \"()\")\n     (string=? \"()\"\
    \ \"()\")\n     (string=? \"()\" \"()\")\n     (string=? \"()\" \"()\")\n    \
    \ (string=? \"()\" \"()\")\n     (string=? \"()\" \"()\")\n     (string=? \"()\"\
    \ \"()\")\n     (string=? \"()\" \"()\")\n     (string=? \"()\" \"()\")\n    \
    \ (string=? \"()\" \"()\")\n     (string=? \"()\" \"()", "  (cond\n    [(empty?\
    \ lst) 'Yes]\n    [(equal? (first lst) '(') (match_parens (rest lst)))]\n    [else\
    \ (match_parens (rest lst))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
