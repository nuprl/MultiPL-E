name: HumanEval_44_change_base
language: rkt
prompt: "#lang racket\n\n;; Change numerical base of input number x to base.\n;; return\
  \ string representation after the conversion.\n;; base numbers are less than 10.\n\
  ;; >>> (change_base 8 3)\n;; \"22\"\n;; >>> (change_base 8 2)\n;; \"1000\"\n;; >>>\
  \ (change_base 7 2)\n;; \"111\"\n(define (change_base x base)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate change_base))\n\
  \    (check-equal? (candidate 8 3) \"22\")\n    (check-equal? (candidate 9 3) \"\
  100\")\n    (check-equal? (candidate 234 2) \"11101010\")\n    (check-equal? (candidate\
  \ 16 2) \"10000\")\n    (check-equal? (candidate 8 2) \"1000\")\n    (check-equal?\
  \ (candidate 7 2) \"111\")\n    (check-equal? (candidate 2 3) \"2\")\n    (check-equal?\
  \ (candidate 3 4) \"3\")\n    (check-equal? (candidate 4 5) \"4\")\n    (check-equal?\
  \ (candidate 5 6) \"5\")\n    (check-equal? (candidate 6 7) \"6\")\n    (check-equal?\
  \ (candidate 7 8) \"7\")\n))\n\n(test-humaneval)"
completions: ["  (if (< base 10)\n      (number->string x (+ base base))\n      (number->string\
    \ x (- base base))))\n", "  (if (< base 10)\n      (number->string x (+ base base))\n\
    \      (number->string x (- base base))))\n", "  (if (< base 10)\n      (number->string\
    \ x)\n      (number->string x (- base 10))))\n", "  (if (< base 10)\n      (number->string\
    \ x (/ base 10))\n      (number->string x (+ (/ base 10) 10))))\n", "  (if (<\
    \ base 10)\n      (* base x)\n      (quotient x base)))\n", "  (cond\n    [(<\
    \ base 10) (string-append (number->string x) (number->string base))]\n    [else\
    \ (change_base (/ x base) (+ base 1))]))\n", "  (if (< base 10)\n      (number->string\
    \ x (+ base (- base base)))\n      (number->string x (- base base))))\n", "  (if\
    \ (< base 10)\n      (number->string x)\n      (number->string x (- base 10))))\n",
  "  (cond\n    [(< base 10)\n     (string-append (number->string x) \"0\")]\n   \
    \ [(< base 2)\n     (string-append (number->string x) \"0\")]\n    [else\n   \
    \  (string-append (number->string x) \"0\")]))\n", "  (cond\n    [(< base 10)\
    \ (number->string x)]\n    [else (cons (string->number ((number->string x) base)\n\
    \                           (number->string x (+ base 1))) '())]))\n", "  (cond\n\
    \    [(< base 10) (string-append (number->string x) (number->string base))]\n\
    \    [else (change_base (/ x base) (+ base 1))]))\n", "  (cond\n    [(< base 10)\
    \ (string-append (number->string x) (number->string base))]\n    [else (change_base\
    \ (/ x base) (+ base 1))]))\n", "  (if (< base 10)\n      (number->string x)\n\
    \      (number->string x (- base 10))))\n", "  (cond\n    [(< base 10) (string-append\
    \ (number->string x) (number->string base))]\n    [else (change_base (/ x base)\
    \ (+ base 1))]))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n     (cond\n       [(= base 10) (string-append \"\
    0\" x)\n        (cond\n         [(< x 10) (string-append \"0\" x)\n          (cond\n\
    \            [(< x 100) (string-append \"00\" x)\n             (cond\n       \
    \       [(< x 1000) (string-append \"000\" x)\n               (cond\n        \
    \         [(< x 10000) (string-append \"0000\" x)\n                   (cond\n\
    \                     [(< x 100000) (string-append \"00000\" x)\n            \
    \           (cond\n                         [(< x 1000000) (string-append \"000000\"\
    \ x)\n                           (cond\n                             [(< x 10000000)\
    \ (string-append \"0000000\" x)\n                               (cond\n      \
    \                           [(< x 100000000) (string-append \"00000000\" x)\n\
    \                                   (cond\n                                  \
    \   [(< x 1000000000) (string-append \"000000000\" x)\n                      \
    \                 (cond\n                                         [(< x 10000000000)\
    \ (string-append \"0000000000\" x)\n                                         \
    \  (cond\n                                             [(< x 100000000000) (string-append\
    \ \"00000000000\" x)\n                                               (cond\n \
    \                                                [(< x 1000000000000) (string-append\
    \ \"000000000000\" x)\n                                                   (cond\n\
    \                                                     [(< x 10000000000000) (string-append\
    \ \"0000000000000\" x)\n                                                     \
    \  (cond\n                                                         [(< x 100000000000000)\
    \ (string-append \"00000000000000\" x)\n                                     \
    \                      (cond\n                                               \
    \              [(< x 1000000000000000) (string-append \"000000000000000\" x)\n\
    \                                                               (cond\n      \
    \                                                           [(< x 10000000000000000)\
    \ (string-append \"0000000000000000\" x)\n                                   \
    \                               (cond\n                                      \
    \                             [(< x 100000000000000000) (string-append \"00000000000000000\"\
    \ x)\n                                                                    (cond\n\
    \                                                                     [(< x 1000000000000000000)\
    \ (string-append \"000000000000000000\" x)\n                                 \
    \                                     (cond\n                                \
    \                                       [(< x 10000000000000000000) (string-append\
    \ \"0000000000000000000\" x)\n                                               \
    \                         (cond\n                                            \
    \                             [(< x 100000000000000000000) (string-append \"00000000000000000000\"\
    \ x)\n                                                                       \
    \   (cond\n                                                                  \
    \          [(< x 1000000000000000000000) (string-append \"000000000000000000000\"\
    \ x)\n                                                                       \
    \      (cond\n                                                               \
    \                [(< x 10000000000000000000000) (string-append \"0000000000000000000000\"\
    \ x)\n                                                                       \
    \         (cond\n                                                            \
    \                     [(< x 100000000000000000000000) (string-append \"00000000000000000000000\"\
    \ x)\n                                                                       \
    \            (cond\n                                                         \
    \                            [(< x 1000000000000000000000000) (string-", "  (cond\n\
    \    [(< base 10) (string-append (number->string x) (number->string base))]\n\
    \    [else (change_base (/ x base) (+ base 1))]))\n", "  (cond [(< base 10)\n\
    \         (string-append (number->string x) (number->string base))\n         ]\n\
    \        [(= base 0)\n         (number->string x)\n         ]\n        [else\n\
    \         (number->string x (- base 10))\n         (number->string base)\n   \
    \      ]\n        ))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n     (cond\n       [(< base 2) (string-append (number->string\
    \ x) (number->string base))\n        (cond\n         [(< base 1) (string-append\
    \ \"0\" (number->string base))\n          (cond\n           [(< base 0) (string-append\
    \ \"0\" (number->string base))\n            (cond\n             [(< base -1) (string-append\
    \ \"0\" (number->string base))\n              (cond\n               [(< base -2)\
    \ (string-append \"0\" (number->string base))\n                (cond\n       \
    \          [(< base -3) (string-append \"0\" (number->string base))\n        \
    \          (cond\n                   [(< base -4) (string-append \"0\" (number->string\
    \ base))\n                    (cond\n                     [(< base -5) (string-append\
    \ \"0\" (number->string base))\n                      (cond\n                \
    \       [(< base -6) (string-append \"0\" (number->string base))\n           \
    \             (cond\n                         [(< base -7) (string-append \"0\"\
    \ (number->string base))\n                          (cond\n                  \
    \         [(< base -8) (string-append \"0\" (number->string base))\n         \
    \                   (cond\n                             [(< base -9) (string-append\
    \ \"0\" (number->string base))\n                              (cond\n        \
    \                       [(< base -10) (string-append \"0\" (number->string base))\n\
    \                                (cond\n                                 [(< base\
    \ -11) (string-append \"0\" (number->string base))\n                         \
    \         (cond\n                                   [(< base -12) (string-append\
    \ \"0\" (number->string base))\n                                    (cond\n  \
    \                                   [(< base -13) (string-append \"0\" (number->string\
    \ base))\n                                      (cond\n                      \
    \                 [(< base -14) (string-append \"0\" (number->string base))\n\
    \                                        (cond\n                             \
    \            [(< base -15) (string-append \"0\" (number->string base))\n     \
    \                                     (cond\n                                \
    \           [(< base -16) (string-append \"0\" (number->string base))\n      \
    \                                       (cond\n                              \
    \                 [(< base -17) (string-append \"0\" (number->string base))\n\
    \                                                (cond\n                     \
    \                            [(< base -18) (string-append \"0\" (number->string\
    \ base))\n                                                  (cond\n          \
    \                                         [(< base -19) (string-append \"0\" (number->string\
    \ base))\n                                                    (cond\n        \
    \                                             [(< base -20) (string-", "  (cond\n\
    \    [(< base 10) (* x base)]\n    [else (change_base (/ x base) (+ base 1))]))\n",
  "  (cond\n    [(< base 10) (string-append (number->string x) (number->string base))]\n\
    \    [else (change_base (/ x base) (+ base 1))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
