name: HumanEval_44_change_base
language: rkt
prompt: "#lang racket\n\n;; Change numerical base of input number x to base.\n;; return\
  \ string representation after the conversion.\n;; base numbers are less than 10.\n\
  ;; >>> (change_base 8 3)\n;; \"22\"\n;; >>> (change_base 8 2)\n;; \"1000\"\n;; >>>\
  \ (change_base 7 2)\n;; \"111\"\n(define (change_base x base)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate change_base))\n\
  \    (check-equal? (candidate 8 3) \"22\")\n    (check-equal? (candidate 9 3) \"\
  100\")\n    (check-equal? (candidate 234 2) \"11101010\")\n    (check-equal? (candidate\
  \ 16 2) \"10000\")\n    (check-equal? (candidate 8 2) \"1000\")\n    (check-equal?\
  \ (candidate 7 2) \"111\")\n    (check-equal? (candidate 2 3) \"2\")\n    (check-equal?\
  \ (candidate 3 4) \"3\")\n    (check-equal? (candidate 4 5) \"4\")\n    (check-equal?\
  \ (candidate 5 6) \"5\")\n    (check-equal? (candidate 6 7) \"6\")\n    (check-equal?\
  \ (candidate 7 8) \"7\")\n))\n\n(test-humaneval)"
completions: ["  (if (< base 10)\n      (number->string x (+ base base))\n      (number->string\
    \ x (- base base))))\n", "  (if (< base 10)\n      (number->string x (+ base base))\n\
    \      (number->string x (- base base))))\n", "  (if (< base 10)\n      (number->string\
    \ x)\n      (number->string x (- base 10))))\n", "  (if (< base 10)\n      (number->string\
    \ x (/ base 10))\n      (number->string x (+ (/ base 10) 10))))\n", "  (if (<\
    \ base 10)\n      (* base x)\n      (quotient x base)))\n", "  (cond\n    [(<\
    \ base 10) (string-append (number->string x) (number->string base))]\n    [else\
    \ (change_base (/ x base) (+ base 1))]))\n", "  (if (< base 10)\n      (number->string\
    \ x (+ base (- base base)))\n      (number->string x (- base base))))\n", "  (if\
    \ (< base 10)\n      (number->string x)\n      (number->string x (- base 10))))\n",
  "  (cond\n    [(< base 10)\n     (string-append (number->string x) \"0\")]\n   \
    \ [(< base 2)\n     (string-append (number->string x) \"0\")]\n    [else\n   \
    \  (string-append (number->string x) \"0\")]))\n", "  (cond\n    [(< base 10)\
    \ (number->string x)]\n    [else (cons (string->number ((number->string x) base)\n\
    \                           (number->string x (+ base 1))) '())]))\n", "  (cond\n\
    \    [(< base 10) (string-append (number->string x) (number->string base))]\n\
    \    [else (change_base (/ x base) (+ base 1))]))\n", "  (cond\n    [(< base 10)\
    \ (string-append (number->string x) (number->string base))]\n    [else (change_base\
    \ (/ x base) (+ base 1))]))\n", "  (if (< base 10)\n      (number->string x)\n\
    \      (number->string x (- base 10))))\n", "  (cond\n    [(< base 10) (string-append\
    \ (number->string x) (number->string base))]\n    [else (change_base (/ x base)\
    \ (+ base 1))]))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n     (cond\n       [(= base 10) (string-append \"\
    0\" x)\n        (cond\n         [(< x 10) (string-append \"0\" x)\n          (cond\n\
    \            [(< x 100) (string-append \"00\" x)\n             (cond\n       \
    \       [(< x 1000) (string-append \"000\" x)\n               (cond\n        \
    \         [(< x 10000) (string-append \"0000\" x)\n                   (cond\n\
    \                     [(< x 100000) (string-append \"00000\" x)\n            \
    \           (cond\n                         [(< x 1000000) (string-append \"000000\"\
    \ x)\n                           (cond\n                             [(< x 10000000)\
    \ (string-append \"0000000\" x)\n                               (cond\n      \
    \                           [(< x 100000000) (string-append \"00000000\" x)\n\
    \                                   (cond\n                                  \
    \   [(< x 1000000000) (string-append \"000000000\" x)\n                      \
    \                 (cond\n                                         [(< x 10000000000)\
    \ (string-append \"0000000000\" x)\n                                         \
    \  (cond\n                                             [(< x 100000000000) (string-append\
    \ \"00000000000\" x)\n                                               (cond\n \
    \                                                [(< x 1000000000000) (string-append\
    \ \"000000000000\" x)\n                                                   (cond\n\
    \                                                     [(< x 10000000000000) (string-append\
    \ \"0000000000000\" x)\n                                                     \
    \  (cond\n                                                         [(< x 100000000000000)\
    \ (string-append \"00000000000000\" x)\n                                     \
    \                      (cond\n                                               \
    \              [(< x 1000000000000000) (string-append \"000000000000000\" x)\n\
    \                                                               (cond\n      \
    \                                                           [(< x 10000000000000000)\
    \ (string-append \"0000000000000000\" x)\n                                   \
    \                               (cond\n                                      \
    \                             [(< x 100000000000000000) (string-append \"00000000000000000\"\
    \ x)\n                                                                    (cond\n\
    \                                                                     [(< x 1000000000000000000)\
    \ (string-append \"000000000000000000\" x)\n                                 \
    \                                     (cond\n                                \
    \                                       [(< x 10000000000000000000) (string-append\
    \ \"0000000000000000000\" x)\n                                               \
    \                         (cond\n                                            \
    \                             [(< x 100000000000000000000) (string-append \"00000000000000000000\"\
    \ x)\n                                                                       \
    \   (cond\n                                                                  \
    \          [(< x 1000000000000000000000) (string-append \"000000000000000000000\"\
    \ x)\n                                                                       \
    \      (cond\n                                                               \
    \                [(< x 10000000000000000000000) (string-append \"0000000000000000000000\"\
    \ x)\n                                                                       \
    \         (cond\n                                                            \
    \                     [(< x 100000000000000000000000) (string-append \"00000000000000000000000\"\
    \ x)\n                                                                       \
    \            (cond\n                                                         \
    \                            [(< x 1000000000000000000000000) (string-", "  (cond\n\
    \    [(< base 10) (string-append (number->string x) (number->string base))]\n\
    \    [else (change_base (/ x base) (+ base 1))]))\n", "  (cond [(< base 10)\n\
    \         (string-append (number->string x) (number->string base))\n         ]\n\
    \        [(= base 0)\n         (number->string x)\n         ]\n        [else\n\
    \         (number->string x (- base 10))\n         (number->string base)\n   \
    \      ]\n        ))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n     (cond\n       [(< base 2) (string-append (number->string\
    \ x) (number->string base))\n        (cond\n         [(< base 1) (string-append\
    \ \"0\" (number->string base))\n          (cond\n           [(< base 0) (string-append\
    \ \"0\" (number->string base))\n            (cond\n             [(< base -1) (string-append\
    \ \"0\" (number->string base))\n              (cond\n               [(< base -2)\
    \ (string-append \"0\" (number->string base))\n                (cond\n       \
    \          [(< base -3) (string-append \"0\" (number->string base))\n        \
    \          (cond\n                   [(< base -4) (string-append \"0\" (number->string\
    \ base))\n                    (cond\n                     [(< base -5) (string-append\
    \ \"0\" (number->string base))\n                      (cond\n                \
    \       [(< base -6) (string-append \"0\" (number->string base))\n           \
    \             (cond\n                         [(< base -7) (string-append \"0\"\
    \ (number->string base))\n                          (cond\n                  \
    \         [(< base -8) (string-append \"0\" (number->string base))\n         \
    \                   (cond\n                             [(< base -9) (string-append\
    \ \"0\" (number->string base))\n                              (cond\n        \
    \                       [(< base -10) (string-append \"0\" (number->string base))\n\
    \                                (cond\n                                 [(< base\
    \ -11) (string-append \"0\" (number->string base))\n                         \
    \         (cond\n                                   [(< base -12) (string-append\
    \ \"0\" (number->string base))\n                                    (cond\n  \
    \                                   [(< base -13) (string-append \"0\" (number->string\
    \ base))\n                                      (cond\n                      \
    \                 [(< base -14) (string-append \"0\" (number->string base))\n\
    \                                        (cond\n                             \
    \            [(< base -15) (string-append \"0\" (number->string base))\n     \
    \                                     (cond\n                                \
    \           [(< base -16) (string-append \"0\" (number->string base))\n      \
    \                                       (cond\n                              \
    \                 [(< base -17) (string-append \"0\" (number->string base))\n\
    \                                                (cond\n                     \
    \                            [(< base -18) (string-append \"0\" (number->string\
    \ base))\n                                                  (cond\n          \
    \                                         [(< base -19) (string-append \"0\" (number->string\
    \ base))\n                                                    (cond\n        \
    \                                             [(< base -20) (string-", "  (cond\n\
    \    [(< base 10) (* x base)]\n    [else (change_base (/ x base) (+ base 1))]))\n",
  "  (cond\n    [(< base 10) (string-append (number->string x) (number->string base))]\n\
    \    [else (change_base (/ x base) (+ base 1))]))\n", "  (if (< base 10)\n   \
    \   (number->string x (+ base 1))\n      (number->string x (- base 1))))\n", " \
    \ (cond\n    [(< base 10) (string-append (number->string x) (number->string base))]\n\
    \    [else (change_base (/ x base) (+ base 1))]))\n", "  (if (< base 10)\n   \
    \   (number->string x (+ base base))\n      (number->string x (- base base))))\n",
  "  (if (< base 10)\n      (number->string x (+ base base))\n      (number->string\
    \ x (- base base))))\n", "  (if (< base 10)\n      (number->string x (+ base base))\n\
    \      (number->string x (- base base))))\n", "  (if (< base 10)\n      (number->string\
    \ x (+ base base))\n      (number->string x (- base base))))\n", "  (cond\n  \
    \  [(< base 10) (string-append (number->string x) (number->string base))\n   \
    \  (cond\n       [(< base 2) (string-append (number->string x) (number->string\
    \ base))\n        (cond\n         [(< base 1) (string-append (number->string x)\
    \ (number->string base))\n          (cond\n           [(< base 0) (string-append\
    \ \"0\" \"\")\n            (cond\n             [(< base -1) (string-append \"\
    -1\" \"\")\n              (cond\n               [(< base -2) (string-append \"\
    -2\" \"\")\n                (cond\n                 [(< base -3) (string-append\
    \ \"-3\" \"\")\n                  (cond\n                   [(< base -4) (string-append\
    \ \"-4\" \"\")\n                    (cond\n                     [(< base -5) (string-append\
    \ \"-5\" \"\")\n                      (cond\n                       [(< base -6)\
    \ (string-append \"-6\" \"\")\n                        (cond\n               \
    \          [(< base -7) (string-append \"-7\" \"\")\n                        \
    \  (cond\n                           [(< base -8) (string-append \"-8\" \"\")\n\
    \                            (cond\n                             [(< base -9)\
    \ (string-append \"-9\" \"\")\n                              (cond\n         \
    \                      [(< base -10) (string-append \"-10\" \"\")\n          \
    \                      (cond\n                                 [(< base -11) (string-append\
    \ \"-11\" \"\")\n                                  (cond\n                   \
    \                [(< base -12) (string-append \"-12\" \"\")\n                \
    \                    (cond\n                                     [(< base -13)\
    \ (string-append \"-13\" \"\")\n                                      (cond\n\
    \                                       [(< base -14) (string-append \"-14\" \"\
    \")\n                                        (cond\n                         \
    \                [(< base -15) (string-append \"-15\" \"\")\n                \
    \                          (cond\n                                           [(<\
    \ base -16) (string-append \"-16\" \"\")\n                                   \
    \         (cond\n                                             [(< base -17) (string-append\
    \ \"-17\" \"\")\n                                              (cond\n       \
    \                                        [(< base -18) (string-append \"-18\"\
    \ \"\")\n                                                (cond\n             \
    \                                    [(< base -19) (string-append \"-19\" \"\"\
    )\n                                                  (cond\n                 \
    \                                  [(< base -20) (string-append \"-20\" \"\")\n\
    \                                                    (cond\n                 \
    \                                    [(< base -21) (string-append \"-21\" \"\"\
    )\n                                                      (cond\n             \
    \                                          [(< base -22) (string-append \"-22\"\
    \ \"\")\n                                                        (cond\n     \
    \                                                    [(< base -23) (string-append\
    \ \"-23\" \"\")\n                                                          (cond\n\
    \                                                           [(< base -24) (string-append ",
  "  (if (< base 10)\n      (number->string x (+ base 1))\n      (number->string x\
    \ (- base 1))))\n", "  (if (< base 10)\n      (number->string x (+ base (- base\
    \ base)))\n      (number->string x (- base base))))\n", "  (if (< base 10)\n \
    \     (number->string x)\n      (number->string (quotient x base) (quotient (-\
    \ x base) base))))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))]\n    [else (change_base (/ x base) (+ base 1))]))\n",
  "  (cond\n    [(< base 10) (string-append (number->string x) (number->string base))]\n\
    \    [else (change_base (/ x base) (+ base 1))]))\n", "  (if (< base 10)\n   \
    \   (number->string x (+ base (- base base)))\n      (number->string x (- base\
    \ base))))\n", "  (cond\n    [(< base 10)\n     (string-append (number->string\
    \ x) (number->string base))\n     (cond\n       [(< base 2)\n        (string-append\
    \ \"0\" (number->string x))\n        (cond\n         [(< x 0)\n          (error\
    \ \"Negative numbers are not supported\")\n          (change_base (- x) (- base))]\n\
    \         [else (change_base (- x) (- base))]))]\n    [else (error \"Base must\
    \ be less than 10\")]))\n</code>\n<|/ a |>\n<| c |>\nThanks for your answer. Your\
    \ code works perfectly for base 10 and base 2, but for base 7 and base 3, it returns\
    \ \"111\" instead of \"11110111\".\n<|/ c |>\n<| c |>\nI fixed the bug. Now it\
    \ works for all bases up to base 10 and base 2.\n<|/ c |>\n<| c |>\nThanks again.\
    \ Your code works perfectly for base 10 and base 2, but for base 7 and base 3,\
    \ it returns \"111\" instead of \"11110111\".\n<|/ c |>\n<| c |>\nI fixed the\
    \ bug. Now it works for all bases up to base 10 and base 2.\n<|/ c |>\n<| c |>\n\
    Thanks again. Your code works perfectly for base 10 and base 2, but for base 7\
    \ and base 3, it returns \"111\" instead of \"11110111\".\n<|/ c |>\n<| a tags=racket,scheme\
    \ |>\nHere's a solution that uses recursion and a helper function:\n<code>", " \
    \ (cond\n    [(< base 10) (string-append (number->string x) (number->string base))]\n\
    \    [else (change_base (/ x base) (+ base 1))]))\n", "  (if (< base 10)\n   \
    \   (number->string x)\n      (number->string (quotient x base) (quotient (- x\
    \ base) base))))\n", "  (if (< base 10)\n      (number->string x (+ base (- base\
    \ base)))\n      (number->string x (- base base))))\n", "  (cond [(< base 10)\
    \ (string-append (number->string x) (number->string base))])\n        (else (change_base\
    \ (/ x base) (- base 10)))))\n", "  (if (< base 10)\n      (number->string x (+\
    \ base base))\n      (number->string x (- base base))))\n", "  (if (< base 10)\n\
    \      (number->string x (+ base 1))\n      (number->string x (- base 1))))\n",
  "  (cond\n    [(< base 10) (number->string x)]\n    [else (number->string (quotient\
    \ x base))]))\n", "  (if (< base 10)\n      (number->string x (+ base 1))\n  \
    \    (number->string x (- base 1))))\n", "  (cond\n    [(< base 10)\n     (string-append\
    \ (number->string x) (number->string base))]\n    [(< base 2)\n     (string-append\
    \ (number->string x) (number->string base) (number->string base))]\n    [else\n\
    \     (number->string x (- base 10))]))\n", "  (if (< base 10)\n      (number->string\
    \ x (/ base 10))\n      (number->string x (- base 10))))\n", "  (if (< base 10)\n\
    \      (number->string x (+ base (- base base)))\n      (number->string x (- base\
    \ base))))\n", "  (if (< base 10)\n      (number->string x (/ base 10))\n    \
    \  (number->string x (- base 10))))\n", "  (if (< base 10)\n      (number->string\
    \ x (/ base 10))\n      (number->string x (- base 10))))\n", "  (cond\n    [(<\
    \ base 10) (string-append (number->string x) (number->string base))]\n    [else\
    \ (change_base (/ x base) (+ base 1))]))\n", "  (cond\n    [(< base 10) (* x base)\n\
    \     (cond\n       [(< base 2) (+ x base)\n        (cond\n         [(< base 3)\
    \ (+ x base)\n          (cond\n           [(< base 4) (+ x base)\n           \
    \ (cond\n             [(< base 5) (+ x base)\n              (cond\n          \
    \     [(< base 6) (+ x base)\n                (cond\n                 [(< base\
    \ 7) (+ x base)\n                  (cond\n                   [(< base 8) (+ x\
    \ base)\n                    (cond\n                     [(< base 9) (+ x base)\n\
    \                      (cond\n                       [(< base 10) (+ x base)\n\
    \                        (cond\n                         [(< base 11) (+ x base)\n\
    \                          (cond\n                           [(< base 12) (+ x\
    \ base)\n                            (cond\n                             [(< base\
    \ 13) (+ x base)\n                              (cond\n                      \
    \         [(< base 14) (+ x base)\n                                (cond\n   \
    \                              [(< base 15) (+ x base)\n                     \
    \             (cond\n                                   [(< base 16) (+ x base)\n\
    \                                    (cond\n                                 \
    \    [(< base 17) (+ x base)\n                                      (cond\n  \
    \                                     [(< base 18) (+ x base)\n              \
    \                          (cond\n                                         [(<\
    \ base 19) (+ x base)\n                                          (cond\n     \
    \                                      [(< base 20) (+ x base)\n             \
    \                               (cond\n                                      \
    \       [(< base 21) (+ x base)\n                                            \
    \  (cond\n                                               [(< base 22) (+ x base)\n\
    \                                                (cond\n                     \
    \                            [(< base 23) (+ x base)\n                       \
    \                           (cond\n                                          \
    \         [(< base 24) (+ x base)\n                                          \
    \          (cond\n                                                     [(< base\
    \ 25) (+ x base)\n                                                      (cond\n\
    \                                                       [(< base 26) (+ x base)\n\
    \                                                        (cond\n             \
    \                                            [(< base 27) (+ x base)\n       \
    \                                                   (cond\n                  \
    \                                         [(< base 28) (+ x base)\n          \
    \                                                  (cond\n                   \
    \                                          [(< base 29) (+ x base)\n         \
    \                                                     (cond\n                \
    \                                               [(< base 30) (+ x base)\n    \
    \                                                            (cond\n         \
    \                                                       [(< base 31) (+ x base)\n\
    \                                                                  (cond\n   \
    \                                                                 [(< base 32)\
    \ (+ x base)\n                                                               \
    \     (cond\n                                                                \
    \     [(< base 33) (+ x base)\n                                              \
    \                       (cond\n                                              \
    \                       [(< base 34) (+ x base)\n                            \
    \                                         (cond\n                            \
    \                                         [(< base 35) (+ x base)\n          \
    \                                                           (cond\n          \
    \                                                           [(< base 36) (+ x\
    \ base)\n                                                                    \
    \ (cond\n", "  (if (< base 10)\n      (number->string x (+ base (- base base)))\n\
    \      (number->string x (- base base))))\n", "  (cond\n    [(< base 10) (string-append\
    \ (number->string x) (number->string base))]\n    [else (change_base (/ x base)\
    \ (+ base 1))]))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))]\n    [else (change_base (/ x base) (+ base 1))]))\n",
  "  (if (< base 10)\n      (number->string x (+ base base))\n      (number->string\
    \ x (- base base))))\n", "  (if (< base 10)\n      (number->string x (+ base 1))\n\
    \      (number->string x (- base 1))))\n", "  (if (< base 10)\n      (number->string\
    \ x (/ base 10))\n      (number->string x (- base 10))))\n", "  (cond\n    [(<\
    \ base 10) (string-append (number->string x) (number->string base))]\n    [else\
    \ (change_base (/ x base) (+ base 1))]))\n", "  (cond\n    [(< base 10) (number->string\
    \ x)]\n    [else (number->string (quotient x base))]))\n", "  (cond\n    [(< base\
    \ 10) (string-append (number->string x) (number->string base))]\n    [else (change_base\
    \ (/ x base) (+ base 1))]))\n", "  (if (< base 10)\n      (number->string x (+\
    \ base (- base base)))\n      (number->string x (- base base))))\n", "  (cond\n\
    \    [(< base 10) (string-append (number->string x) (number->string base))]\n\
    \    [else (change_base (/ x base) (+ base 1))]))\n", "  (if (< base 10)\n   \
    \   (number->string x (+ base base))\n      (number->string x (- base base))))\n",
  "  (cond\n    [(< base 10) (string-append (number->string x) (number->string base))\n\
    \     (cond\n       [(< base 2) (string-append \"0\" (number->string x))\n   \
    \     (cond\n         [(< base 3) (string-append \"00\" (number->string x))\n\
    \          (cond\n           [(< base 4) (string-append \"000\" (number->string\
    \ x))\n            (cond\n             [(< base 5) (string-append \"0000\" (number->string\
    \ x))\n              (cond\n               [(< base 6) (string-append \"00000\"\
    \ (number->string x))\n                (cond\n                 [(< base 7) (string-append\
    \ \"000000\" (number->string x))\n                  (cond\n                  \
    \ [(< base 8) (string-append \"0000000\" (number->string x))\n               \
    \     (cond\n                     [(< base 9) (string-append \"00000000\" (number->string\
    \ x))\n                      (cond\n                       [(< base 10) (string-append\
    \ \"000000000\" (number->string x))\n                        (cond\n         \
    \                [(< base 11) (string-append \"0000000000\" (number->string x))\n\
    \                          (cond\n                           [(< base 12) (string-append\
    \ \"00000000000\" (number->string x))\n                            (cond\n   \
    \                          [(< base 13) (string-append \"000000000000\" (number->string\
    \ x))\n                              (cond\n                               [(<\
    \ base 14) (string-append \"0000000000000\" (number->string x))\n            \
    \                    (cond\n                                 [(< base 15) (string-append\
    \ \"00000000000000\" (number->string x))\n                                  (cond\n\
    \                                   [(< base 16) (string-append \"000000000000000\"\
    \ (number->string x))\n                                    (cond\n           \
    \                          [(< base 17) (string-append \"0000000000000000\" (number->string\
    \ x))\n                                      (cond\n                         \
    \              [(< base 18) (string-append \"00000000000000000\" (number->string\
    \ x))\n                                        (cond\n                       \
    \                  [(< base 19) (string-append \"000000000000000000\" (number->string\
    \ x))\n                                          (cond\n                     \
    \                      [(< base 20) (string-append \"0000000000000000000\" (number->string\
    \ x))\n                                             (cond\n                  \
    \                           [(< base 21) (string-append \"00000000000000000000\"\
    \ (number->string x))\n                                               (cond\n\
    \                                               [(< base 22) (string-append \"\
    000000000000000000000\" (number->string x))\n                                \
    \                 (cond\n                                                 [(<\
    \ base 23) (string-append \"0000000000000000000000\" (number->string x))\n   \
    \                                                (cond\n                     \
    \                              [(< base 24) (string-append \"00000000000000000000000\"\
    \ (number->string ", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))]\n    [else (change_base (/ x base) (+ base 1))]))\n",
  "  (if (< base 10)\n      (number->string x (/ base 10))\n      (number->string\
    \ x (- base 10))))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))]\n    [else (change_base (/ x base) (+ base 1))]))\n",
  "  (if (< base 10)\n      (number->string x)\n      (number->string ((expt x base)))))\
    \ ;; #lang racket\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))]\n    [else (change_base (/ x base) (+ base 1))]))\n",
  "  (cond\n    [(< base 10) (string-append (number->string x) (number->string base))]\n\
    \    [else (change_base (/ x base) (+ base 1))]))\n", "  (if (< base 10)\n   \
    \   (number->string x)\n      (number->string ((expt x base))))\n  )\n", "  (cond\n\
    \    [(< base 10) (string-append (number->string x) (number->string base))\n \
    \    (cond\n       [(< base 2) (string-append (number->string x) (number->string\
    \ base))\n        (cond\n         [(< base 1) (string-append (number->string x)\
    \ (number->string base))\n          (cond\n            [(< base 0) (string-append\
    \ (number->string x) (number->string base))\n             (string->number (string-append\
    \ \"0\" x))]\n            [else (string-append (number->string x) (number->string\
    \ base))])]\n         [else (string-append (number->string x) (number->string\
    \ base))])]\n       [else (string-append (number->string x) (number->string base))])]\n\
    \    [else (string-append (number->string x) (number->string base))]))\n", " \
    \ (if (< base 10)\n      (number->string x (+ base 1))\n      (number->string\
    \ x (- base 1))))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))]\n    [else (change_base (/ x base) (+ base 1))]))\n",
  "  (if (< base 10)\n      (number->string x (+ base 1))\n      (number->string x\
    \ (- base 1))))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))]\n    [else (change_base (/ x base) (+ base 1))]))\n",
  "  (if (< base 10)\n      (number->string x (+ base base))\n      (number->string\
    \ x (- base base))))\n", "  (if (< base 10)\n      (number->string x (+ base base))\n\
    \      (number->string x (- base base))))\n", "  (cond\n    [(< base 10) (string-append\
    \ (number->string x) (number->string base))]\n    [else (change_base (/ x base)\
    \ (+ base 1))]))\n", "  (if (< base 10)\n      (number->string x (+ base (- base\
    \ base)))\n      (number->string x (- base base))))\n", "  (if (< base 10)\n \
    \     (number->string x (+ base base))\n      (number->string x (- base base))))\n",
  "  (cond\n    [(< base 10) (string-append (number->string x) (number->string base))]\n\
    \    [else (change_base (/ x base) (+ base 1))]))\n", "  (cond\n    [(< base 10)\
    \ (string-append (number->string x) (number->string base))]\n    [else (change_base\
    \ (/ x base) (+ base 1))]))\n", "  (if (< base 10)\n      (number->string x (+\
    \ base 1))\n      (number->string x (- base 1))))\n", "  (cond\n    [(< base 10)\
    \ (string-append (number->string x) (number->string base))\n     (cond\n     \
    \  [(< base 2) (string-append (number->string x) (number->string base))\n    \
    \    (cond\n         [(< base 3) (string-append (number->string x) (number->string\
    \ base))\n          (cond\n           [(< base 4) (string-append (number->string\
    \ x) (number->string base))\n            (cond\n             [(< base 5) (string-append\
    \ (number->string x) (number->string base))\n              (cond\n           \
    \    [(< base 6) (string-append (number->string x) (number->string base))\n  \
    \              (cond\n                 [(< base 7) (string-append (number->string\
    \ x) (number->string base))\n                  (cond\n                   [(< base\
    \ 8) (string-append (number->string x) (number->string base))\n              \
    \      (cond\n                     [(< base 9) (string-append (number->string\
    \ x) (number->string base))\n                      (cond\n                   \
    \    [(< base 10) (string-append (number->string x) (number->string base))\n \
    \                       (number->string x)]\n                      [else (number->string\
    \ x)]\n                      )]\n                    [else (number->string x)]\n\
    \                    )]\n                 [else (number->string x)]\n        \
    \         )]\n              [else (number->string x)]\n              )]\n    \
    \        [else (number->string x)]\n            [else (number->string x)]\n  \
    \          )]]\n         [else (number->string x)]\n         )]\n       [else\
    \ (number->string x)]\n       )]\n    [else (number->string x)]\n    [else (number->string\
    \ x)]\n    [else (number->string x)]\n    [else (number->string x)]\n    [else\
    \ (number->string x)]\n    [else (number->string x)]\n    [else (number->string\
    \ x)]\n    [else (number->string x)]\n    [else (number->string x)]\n    [else\
    \ (number->string x)]\n    [else (number->string x)]\n    [else (number->string\
    \ x)]\n    [else (number->string x)]\n    [else (number->string x)]\n    [else\
    \ (number->string x)]\n    [else (number->string x)]\n    [else (number->string\
    \ x)]\n    [else (number->string x)]\n    [else (number->string x)]\n    [", " \
    \ (if (< base 10)\n      (number->string x (+ base 1))\n      (number->string\
    \ x (- base 1))))\n", "  (if (< base 10)\n      (number->string x (+ base base))\n\
    \      (number->string x (- base base))))\n", "  (cond\n    [(< base 10) (string-append\
    \ (number->string x) (number->string base))]\n    [else (change_base (/ x base)\
    \ (+ base 1))]))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))]\n    [else (change_base (/ x base) (+ base 1))]))\n",
  "  (if (< base 10)\n      (number->string x (+ base base))\n      (number->string\
    \ x (- base base))))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))]\n    [else (change_base (/ x base) (+ base 1))]))\n",
  "  (if (< base 10)\n      (number->string x (+ base (- base 10)))\n      (number->string\
    \ x (- base 10))))\n", "  (if (< base 10)\n      (number->string x (+ base 1))\n\
    \      (number->string x (- base 1))))\n", "  (if (< base 10)\n      (number->string\
    \ x)\n      (number->string (quotient x base) (quotient x base))))\n", "  (if\
    \ (< base 10)\n      (number->string x)\n      (number->string x (- base 10))))\n",
  "  (if (< base 10)\n      (number->string x)\n      (number->string (quotient x\
    \ base) (quotient (- x base) base))))\n", "  (cond\n    [(< base 10) (string-append\
    \ (number->string x) (number->string base))]\n    [else (change_base (/ x base)\
    \ (+ base 1))]))\n", "  (if (< base 10)\n      (number->string x (+ base 1))\n\
    \      (number->string x (- base 1))))\n", "  (cond\n    [(< base 10) (string-append\
    \ (number->string x) (number->string base))]\n    [else (change_base (/ x base)\
    \ (+ base 1))]))\n", "  (if (< base 10)\n      (number->string x (+ base base))\n\
    \      (number->string x (- base base))))\n", "  (cond\n    [(< base 10) (string-append\
    \ (number->string x) (number->string base))]\n    [else (change_base (/ x base)\
    \ (+ base 1))]))\n", "  (if (< base 10)\n      (number->string x)\n      (number->string\
    \ x (- base 10))))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n     (cond\n       [(< base 2) (string-append (number->string\
    \ x) (number->string base))\n        (cond\n         [(< base 3) (string-append\
    \ (number->string x) (number->string base))\n          (cond\n            [(<\
    \ base 4) (string-append (number->string x) (number->string base))\n         \
    \    (cond\n              [(< base 5) (string-append (number->string x) (number->string\
    \ base))\n               (cond\n                 [(< base 6) (string-append (number->string\
    \ x) (number->string base))\n                   (cond\n                     [(<\
    \ base 7) (string-append (number->string x) (number->string base))\n         \
    \             (cond\n                       [(< base 8) (string-append (number->string\
    \ x) (number->string base))\n                        (cond\n                 \
    \        [(< base 9) (string-append (number->string x) (number->string base))\n\
    \                          (cond\n                           [(< base 10) (string-append\
    \ (number->string x) (number->string base))\n                            (cond\n\
    \                             [(< base 11) (string-append (number->string x) (number->string\
    \ base))\n                              (cond\n                              \
    \ [(< base 12) (string-append (number->string x) (number->string base))\n    \
    \                            (cond\n                                 [(< base\
    \ 13) (string-append (number->string x) (number->string base))\n             \
    \                     (cond\n                                   [(< base 14) (string-append\
    \ (number->string x) (number->string base))\n                                \
    \    (cond\n                                     [(< base 15) (string-append (number->string\
    \ x) (number->string base))\n                                      (cond\n   \
    \                                    [(< base 16) (string-append (number->string\
    \ x) (number->string base))\n                                        (cond\n \
    \                                        [(< base 17) (string-append (number->string\
    \ x) (number->string base))\n                                          (cond\n\
    \                                           [(< base 18) (string-append (number->string\
    \ x) (number->string base))\n                                             (cond\n\
    \                                              [(< base 19) (string-append (number->string\
    \ x) (number->string base))\n                                               (cond\n\
    \                                                 [(< base 20) (string-append\
    \ (number->string x) (number->string base))\n                                \
    \                  (cond\n                                                   [(<\
    \ base 21) (string-append (number->string x) (number->string base))\n        \
    \                                            ", "  (if (< base 10)\n      (number->string\
    \ x (/ base 10))\n      (number->string x (/ base 10) (quotient x base))))\n",
  "  (if (< base 10)\n      (number->string x (+ base base))\n      (number->string\
    \ x (- base base))))\n", "  (cond\n    [(< base 10) (number->string x)]\n    [else\
    \ (number->string (quotient x base))]))\n", "  (if (< base 10)\n      (number->string\
    \ x (+ base base))\n      (number->string x (- base base))))\n", "  (cond\n  \
    \  [(< base 10) (string-append (number->string x) (number->string base))\n   \
    \  (cond\n       [(< base 2) (string-append (number->string x) (number->string\
    \ base))\n        (cond\n         [(< base 3) (string-append (number->string x)\
    \ (number->string base))\n          (cond\n           [(< base 4) (string-append\
    \ (number->string x) (number->string base))\n            (cond\n             [(<\
    \ base 5) (string-append (number->string x) (number->string base))\n         \
    \     (cond\n               [(< base 6) (string-append (number->string x) (number->string\
    \ base))\n                (cond\n                 [(< base 7) (string-append (number->string\
    \ x) (number->string base))\n                  (cond\n                   [(< base\
    \ 8) (string-append (number->string x) (number->string base))\n              \
    \      (cond\n                     [(< base 9) (string-append (number->string\
    \ x) (number->string base))\n                      (cond\n                   \
    \    [(< base 10) (string-append (number->string x) (number->string base))\n \
    \                       (cond\n                         [(< base 11) (string-append\
    \ (number->string x) (number->string base))\n                          (cond\n\
    \                           [(< base 12) (string-append (number->string x) (number->string\
    \ base))\n                            (cond\n                             [(<\
    \ base 13) (string-append (number->string x) (number->string base))\n        \
    \                      (cond\n                               [(< base 14) (string-append\
    \ (number->string x) (number->string base))\n                                (cond\n\
    \                                 [(< base 15) (string-append (number->string\
    \ x) (number->string base))\n                                  (cond\n       \
    \                            [(< base 16) (string-append (number->string x) (number->string\
    \ base))\n                                    (cond\n                        \
    \             [(< base 17) (string-append (number->string x) (number->string base))\n\
    \                                      (cond\n                               \
    \        [(< base 18) (string-append (number->string x) (number->string base))\n\
    \                                        (cond\n                             \
    \            [(< base 19) (string-append (number->string x) (number->string base))\n\
    \                                          (cond\n                           \
    \                [(< base 20) (string-append (number->string x) (number->string\
    \ base))\n                                            (cond\n                \
    \                             [(< base 21) (string-append (number->string x) (number->string\
    \ base))\n                                              (cond", "  (if (< base\
    \ 10)\n      (number->string x (+ base (- base base)))\n      (number->string\
    \ x (- base base))))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))]\n    [else (change_base (/ x base) (+ base 1))]))\n",
  "  (if (< base 10)\n      (number->string x (+ base 1))\n      (number->string x\
    \ (- base 1))))\n", "  (if (< base 10)\n      (number->string x (/ base 10))\n\
    \      (number->string x (* base 10))))\n", "  (cond\n    [(< base 10) (* x base)]\n\
    \    [else (change_base (/ x base) base)]))\n", "  (cond\n    [(< base 10) (string-append\
    \ (number->string x) (number->string base))]\n    [else (change_base (/ x base)\
    \ (+ base 1))]))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n     (cond\n       [(= base 10) (string-append \"\
    0\" x)\n        (cond\n         [(< x 10) (string-append \"0\" x)\n          (cond\n\
    \            [(< x 100) (string-append \"00\" x)\n             (cond\n       \
    \       [(< x 1000) (string-append \"000\" x)\n               (cond\n        \
    \         [(< x 10000) (string-append \"0000\" x)\n                   (cond\n\
    \                     [(< x 100000) (string-append \"00000\" x)\n            \
    \           (cond\n                         [(< x 1000000) (string-append \"000000\"\
    \ x)\n                           (cond\n                             [(< x 10000000)\
    \ (string-append \"0000000\" x)\n                               (cond\n      \
    \                           [(< x 100000000) (string-append \"00000000\" x)\n\
    \                                   (cond\n                                  \
    \   [(< x 1000000000) (string-append \"000000000\" x)\n                      \
    \                 (cond\n                                         [(< x 10000000000)\
    \ (string-append \"0000000000\" x)\n                                         \
    \  (cond\n                                             [(< x 100000000000) (string-append\
    \ \"00000000000\" x)\n                                               (cond\n \
    \                                                [(< x 1000000000000) (string-append\
    \ \"000000000000\" x)\n                                                   (cond\n\
    \                                                     [(< x 10000000000000) (string-append\
    \ \"0000000000000\" x)\n                                                     \
    \  (cond\n                                                         [(< x 100000000000000)\
    \ (string-append \"00000000000000\" x)\n                                     \
    \                      (cond\n                                               \
    \              [(< x 1000000000000000) (string-append \"000000000000000\" x)\n\
    \                                                               (cond\n      \
    \                                                           [(< x 10000000000000000)\
    \ (string-append \"0000000000000000\" x)\n                                   \
    \                               (cond\n                                      \
    \                             [(< x 100000000000000000) (string-append \"00000000000000000\"\
    \ x)\n                                                                    (cond\n\
    \                                                                     [(< x 1000000000000000000)\
    \ (string-append \"000000000000000000\" x)\n                                 \
    \                                     (cond\n                                \
    \                                       [(< x 10000000000000000000) (string-append\
    \ \"0000000000000000000\" x)\n                                               \
    \                         (cond\n                                            \
    \                             [(< x 100000000000000000000) (string-append \"00000000000000000000\"\
    \ x)\n                                                                       \
    \   (cond\n                                                                  \
    \          [(< x 1000000000000000000000) (string-append \"000000000000000000000\"\
    \ x)\n                                                                       \
    \      (cond\n                                                               \
    \                [(< x 10000000000000000000000) (string-append \"0000000000000000000000\"\
    \ x)\n                                                                       \
    \         (cond\n                                                            \
    \                     [(< x 100000000000000000000000) (string-append \"00000000000000000000000\"\
    \ x)\n                                                                       \
    \           (cond\n                                                          \
    \                         [(< x 1000000000000000000000000) (string-", "  (cond\n\
    \    [(< base 10) (string-append (number->string x) (number->string base))]\n\
    \    [else (change_base (/ x base) (+ base 1))]))\n", "  (cond\n    [(< base 10)\
    \ (string-append (number->string x) (number->string base))\n     (cond\n     \
    \  [(< base 2) (string-append (number->string x) (number->string base))\n    \
    \    (cond\n         [(< base 3) (string-append (number->string x) (number->string\
    \ base))\n          (cond\n            [(< base 4) (string-append (number->string\
    \ x) (number->string base))\n             (cond\n              [(< base 5) (string-append\
    \ (number->string x) (number->string base))\n               (cond\n          \
    \       [(< base 6) (string-append (number->string x) (number->string base))\n\
    \                   (cond\n                     [(< base 7) (string-append (number->string\
    \ x) (number->string base))\n                       (cond\n                  \
    \       [(< base 8) (string-append (number->string x) (number->string base))\n\
    \                           (cond\n                             [(< base 9) (string-append\
    \ (number->string x) (number->string base))\n                               (cond\n\
    \                                 [(< base 10) (string-append (number->string\
    \ x) (number->string base))\n                                   (cond\n      \
    \                               [(< base 11) (string-append (number->string x)\
    \ (number->string base))\n                                       (cond\n     \
    \                                    [(< base 12) (string-append (number->string\
    \ x) (number->string base))\n                                           (cond\n\
    \                                             [(< base 13) (string-append (number->string\
    \ x) (number->string base))\n                                               (cond\n\
    \                                                 [(< base 14) (string-append\
    \ (number->string x) (number->string base))\n                                \
    \                   (cond\n                                                  \
    \   [(< base 15) (string-append (number->string x) (number->string base))\n  \
    \                                                     (cond\n                \
    \                                         [(< base 16) (string-append (number->string\
    \ x) (number->string base))\n                                                \
    \           (cond\n                                                          \
    \   [(< base 17) (string-append (number->string x) (number->string base))\n  \
    \                                                             (cond\n        \
    \                                                        [(< base 18) (string-append\
    \ (number->string x) (number->string base))\n                                \
    \                                 (cond\n                                    \
    \                               [(< base 19) (string-append (number->string x)\
    \ (number->string base))\n                                                   \
    \                  (cond\n                                                   \
    \                  [(< base 20) (string-append (number->string x) (number->string\
    \ base))\n                                                                   \
    \    (cond\n                                                                 \
    \        [(< base 21) (string-append (number->string x) (number", "  (if (< base\
    \ 10)\n      (number->string x (+ base base))\n      (number->string x (- base\
    \ base))))\n", "  (if (< base 10)\n      (number->string x)\n      (number->string\
    \ x (- base 10))))\n", "  (cond\n    [(< base 10) (number->string x)]\n    [else\
    \ (number->string (remainder x base))]))\n", "  (cond [(< base 10)\n         (string-append\
    \ (number->string x) (number->string base))\n         ]\n        [(< base 2)\n\
    \         (string-append (number->string x) (number->string base))\n         ]\n\
    \        [else\n         (string-append (number->string x) (number->string base))\n\
    \         ]))\n", "  (if (< base 10)\n      (number->string x)\n      (number->string\
    \ (quotient x base) (quotient (- x base) base))))\n", "  (cond\n    [(< base 10)\
    \ (string-append (number->string x) (number->string base))]\n    [else (change_base\
    \ (/ x base) (+ base 1))]))\n", "  (if (< base 10)\n      (number->string x (+\
    \ base base))\n      (number->string x (- base base))))\n", "  (cond\n    [(<\
    \ base 10) (string-append (number->string x) (number->string base))]\n    [else\
    \ (change_base (/ x base) (+ base 1))]))\n", "  (if (< base 10)\n      (number->string\
    \ x)\n      (number->string x (- base 10))))\n", "  (if (< base 10)\n      (number->string\
    \ x)\n      (number->string x (- base 10))))\n", "  (if (< base 10)\n      (number->string\
    \ x (+ base 1))\n      (number->string x (- base 1))))\n", "  (cond\n    [(< base\
    \ 10) (string-append (number->string x) (number->string base))]\n    [else (change_base\
    \ (/ x base) (+ base 1))]))\n", "  (if (< base 10)\n      (number->string x (+\
    \ base base))\n      (number->string x (- base base))))\n", "  (cond\n    [(<\
    \ base 10) (string-append (number->string x) (number->string base))]\n    [else\
    \ (change_base (/ x base) (+ base 1))]))\n", "  (cond\n    [(< base 10) (string-append\
    \ (number->string x) (number->string base))]\n    [else (change_base (/ x base)\
    \ (+ base 1))]))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))]\n    [else (change_base (/ x base) (+ base 1))]))\n",
  "  (if (< base 10)\n      (number->string x (+ base base))\n      (number->string\
    \ x (- base base))))\n", "  (if (< base 10)\n      (number->string x)\n      (number->string\
    \ x (- base 10))))\n", "  (cond\n    [(< base 10)\n     (string-append (number->string\
    \ x) (number->string base))]\n    [(< base 2)\n     (string-append (number->string\
    \ x) (number->string base) (number->string base))]\n    [else\n     (number->string\
    \ x (- base 10))]))\n", "  (cond\n    [(< base 10) (number->string x)]\n    [else\
    \ (cons (string->number (number->string x) (- base 10)) (change_base x (+ base\
    \ 10)))]))\n", "  (cond\n    [(< base 10) (string-append (number->string x) (number->string\
    \ base))]\n    [else (change_base (/ x base) (+ base 1))]))\n", "  (if (< base\
    \ 10)\n      (number->string x (+ base 1))\n      (number->string x (- base 1))))\n",
  "  (cond\n    [(< base 10) (string-append (number->string x) (number->string base))]\n\
    \    [else (change_base (/ x base) (+ base 1))]))\n", "  (cond\n    [(< base 10)\
    \ (string-append (number->string x) (number->string base))]\n    [else (change_base\
    \ (/ x base) (+ base 1))]))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))]\n    [else (change_base (/ x base) (+ base 1))]))\n",
  "  (if (< base 10)\n      (number->string x)\n      (number->string (quotient x\
    \ base) (quotient (- x base) base))))\n", "  (if (< base 10)\n      (number->string\
    \ x)\n      (number->string x (- base 10))))\n", "  (cond\n    [(< base 10) (string-append\
    \ (number->string x) (number->string base))]\n    [else (change_base (/ x base)\
    \ (+ base 1))]))\n", "  (if (< base 10)\n      (number->string x)\n      (number->string\
    \ x (- base 10))))\n", "  (cond\n    [(< base 10)\n     (string-append (number->string\
    \ x) \"0\"]\n    [else\n     (string-append (number->string x) \"0\" (number->string\
    \ (quotient x base)) \"0\"])))\n", "  (if (< base 10)\n      (number->string x\
    \ (+ base 1))\n      (number->string x (- base 1))))\n", "  (cond\n    [(< base\
    \ 10) (string-append (number->string x) (number->string base))]\n    [else (change_base\
    \ (/ x base) (+ base 1))]))\n", "  (if (< base 10)\n      (number->string x (+\
    \ base (- base 10)))\n      (number->string x (- base 10))))\n", "  (cond\n  \
    \  [(< base 10) (string-append (number->string x) (number->string base))]\n  \
    \  [else (change_base (/ x base) (+ base 1))]))\n", "  (if (< base 10)\n     \
    \ (number->string x (+ base base))\n      (number->string x (- base base))))\n",
  "  (cond\n    [(< base 10) (string-append (number->string x) (number->string base))\n\
    \     (cond\n       [(< base 2) (string-append (number->string x) (number->string\
    \ base))\n        (cond\n         [(< base 3) (string-append (number->string x)\
    \ (number->string base))\n          (cond\n           [(< base 4) (string-append\
    \ (number->string x) (number->string base))\n            (cond\n             [(<\
    \ base 5) (string-append (number->string x) (number->string base))\n         \
    \     (cond\n               [(< base 6) (string-append (number->string x) (number->string\
    \ base))\n                (cond\n                 [(< base 7) (string-append (number->string\
    \ x) (number->string base))\n                  (cond\n                   [(< base\
    \ 8) (string-append (number->string x) (number->string base))\n              \
    \      (cond\n                     [(< base 9) (string-append (number->string\
    \ x) (number->string base))\n                      (cond\n                   \
    \    [(< base 10) (string-append (number->string x) (number->string base))\n \
    \                       (cond\n                         [(< base 11) (string-append\
    \ (number->string x) (number->string base))\n                          (cond\n\
    \                           [(< base 12) (string-append (number->string x) (number->string\
    \ base))\n                            (cond\n                             [(<\
    \ base 13) (string-append (number->string x) (number->string base))\n        \
    \                      (cond\n                               [(< base 14) (string-append\
    \ (number->string x) (number->string base))\n                                (cond\n\
    \                                 [(< base 15) (string-append (number->string\
    \ x) (number->string base))\n                                  (cond\n       \
    \                            [(< base 16) (string-append (number->string x) (number->string\
    \ base))\n                                    (cond\n                        \
    \             [(< base 17) (string-append (number->string x) (number->string base))\n\
    \                                      (cond\n                               \
    \        [(< base 18) (string-append (number->string x) (number->string base))\n\
    \                                        (cond\n                             \
    \            [(< base 19) (string-append (number->string x) (number->string base))\n\
    \                                          (cond\n                           \
    \                [(< base 20) (string-append (number->string x) (number->string\
    \ base))\n                                             (cond\n               \
    \                              [(< base 21) (string-append (number->string x)\
    \ (number->string base))\n                                              (cond",
  "  (if (< base 10)\n      (number->string x (/ base 10))\n      (number->string\
    \ x (+ (* base 10) (number->list (number->string x (/ base 10)))))))\n", "  (cond\n\
    \    [(< base 10)\n     (string-append (number->string x) (number->string base))\n\
    \     (cond\n       [(< base 2)\n        (string-append \"0\" (number->string\
    \ base))\n        (cond\n         [(< x 10)\n          (change_base (- x base)\
    \ base)]\n         [else (change_base (- x base) base) (number->string base)])]\n\
    \       [else (change_base (- x base) base) (number->string base)])]\n    [else\
    \ (number->string x) (number->string base)])\n  )\n", "  (if (< base 10)\n   \
    \   (number->string x (/ base 10))\n      (number->string x (- base 10))))\n",
  "  (cond\n    [(< base 10) (string-append (number->string x) (number->string base))\n\
    \     (cond\n       [(< base 2) (string-append (number->string x) (number->string\
    \ base))\n        (cond\n         [(< base 3) (string-append (number->string x)\
    \ (number->string base))\n          (cond\n            [(< base 4) (string-append\
    \ (number->string x) (number->string base))\n             (cond\n            \
    \  [(< base 5) (string-append (number->string x) (number->string base))\n    \
    \           (cond\n                 [(< base 6) (string-append (number->string\
    \ x) (number->string base))\n                   (cond\n                     [(<\
    \ base 7) (string-append (number->string x) (number->string base))\n         \
    \              (cond\n                         [(< base 8) (string-append (number->string\
    \ x) (number->string base))\n                           (cond\n              \
    \               [(< base 9) (string-append (number->string x) (number->string\
    \ base))\n                               (number->string x)]\n               \
    \              [else (number->string x)]\n                             )]\n  \
    \                       [else (number->string x)]\n                         )]\n\
    \                     [else (number->string x)]\n                     )]\n   \
    \              [else (number->string x)]\n                 )]\n             [else\
    \ (number->string x)]\n             )]\n         [else (number->string x)]\n \
    \        )]\n       [else (number->string x)]\n       )]\n    [else (number->string\
    \ x)]\n    ))\n</code>\n<|/ a tags=scheme,racket,numbers,base,converter |>\n<|\
    \ a dscore=0 |>\n<code>", "  (cond\n    [(< base 10) (* x base)]\n    [else (change_base\
    \ (/ x base) (+ base 1))]))\n", "  (if (< base 10)\n      (number->string x)\n\
    \      (number->string x (- base 10))))\n", "  (cond [(< base 10)\n         (string-append\
    \ (number->string x) (number->string base))\n         ]\n        [(< base 2)\n\
    \         (string-append (number->string x) (number->string base))\n         ]\n\
    \        [else\n         (string-append (number->string x) (number->string base))\n\
    \         ]))\n", "  (if (< base 10)\n      (number->string x (+ base 1))\n  \
    \    (number->string x (- base 1))))\n", "  (if (< base 10)\n      (number->string\
    \ x)\n      (number->string x (- base 10))))\n", "  (if (< base 10)\n      (number->string\
    \ x (/ base 10))\n      (number->string x (- base 10))))\n", "  (if (< base 10)\n\
    \      (number->string x (+ base base))\n      (number->string x (- base base))))\n",
  "  (cond\n    [(< base 10) (string-append (number->string x) (number->string base))]\n\
    \    [else (change_base (/ x base) (+ base 1))]))\n", "  (cond\n    [(< base 10)\
    \ (string-append (number->string x) (number->string base))]\n    [else (change_base\
    \ (/ x base) (+ base 1))]))\n", "  (if (< base 10)\n      (number->string x (+\
    \ base (- base base)))\n      (number->string x (- base base))))\n", "  (if (<\
    \ base 10)\n      (number->string x (+ base base))\n      (number->string x (-\
    \ base base))))\n", "  (if (< base 10)\n      (number->string x (+ base base))\n\
    \      (number->string x (- base base))))\n", "  (cond\n    [(< base 10) (string-append\
    \ (number->string x) (number->string base))]\n    [else (change_base (/ x base)\
    \ (+ base 1))]))\n", "  (if (< base 10)\n      (number->string x (+ base 1))\n\
    \      (number->string x (- base 1))))\n", "  (if (< base 10)\n      (number->string\
    \ x (+ base base))\n      (number->string x (- base base))))\n", "  (cond [(<\
    \ base 10)\n         (number->string x)]\n        [else\n         (string-append\
    \ (number->string x)\n                        (number->string (expt x base)))]))\n",
  "  (cond\n    [(< base 10) (string-append (number->string x) (number->string base))]\n\
    \    [else (change_base (/ x base) (+ base 1))]))\n", "  (if (< base 10)\n   \
    \   (number->string x (+ base base))\n      (number->string x (- base base))))\n",
  "  (if (< base 10)\n      (number->string x (+ base base))\n      (number->string\
    \ x (- base base))))\n", "  (if (< base 10)\n      (number->string x (+ base base))\n\
    \      (number->string x (- base base))))\n", "  (cond\n    [(< base 10) (string-append\
    \ (number->string x) (number->string base))]\n    [else (change_base (/ x base)\
    \ (+ base 1))]))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))]\n    [else (change_base (/ x base) (+ base 1))]))\n",
  "  (if (< base 10)\n      (number->string x)\n      (number->string ((expt x base)))))\
    \ ;; #lang racket\n", "  (if (< base 10)\n      (number->string x (+ base 1))\n\
    \      (number->string x (- base 1))))\n", "  (cond\n    [(< base 10) (string-append\
    \ (number->string x) (number->string base))]\n    [else (change_base (/ x base)\
    \ (+ base 1))]))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))]\n    [else (change_base (/ x base) (+ base 1))]))\n",
  "  (if (< base 10)\n      (number->string x)\n      (number->string x (- base 10))))\n",
  "  (if (< base 10)\n      (number->string x (+ base base))\n      (number->string\
    \ x (- base base))))\n", "  (if (< base 10)\n      (number->string x)\n      (number->string\
    \ x (- base 10))))\n", "  (cond\n    [(< base 10)\n     (string-append (number->string\
    \ x) (number->string base))\n     (cond\n       [(= base 2)\n        (string-append\
    \ \"10\" (number->string x))\n        (cond\n         [(= x 0)\n          (cond\n\
    \           [(= x 0)\n            (string-append \"0\")\n            (number->string\
    \ 0)]\n           [else\n            (number->string 0)])]\n         [else\n \
    \         (number->string 0)])]\n       [else\n        (number->string 0)])]\n\
    \    [else\n     (number->string 0)]))\n", "  (if (< base 10)\n      (number->string\
    \ x (+ base base))\n      (number->string x (- base base))))\n", "  (cond\n  \
    \  [(< base 10) (string-append (number->string x) (number->string base))\n   \
    \  (cond\n       [(= base 10) (string-append \"0\" x)\n        (cond\n       \
    \  [(< x 10) (string-append \"0\" x)\n          (cond\n            [(< x 100)\
    \ (string-append \"00\" x)\n             (cond\n              [(< x 1000) (string-append\
    \ \"000\" x)\n               (cond\n                 [(< x 10000) (string-append\
    \ \"0000\" x)\n                   (cond\n                     [(< x 100000) (string-append\
    \ \"00000\" x)\n                       (cond\n                         [(< x 1000000)\
    \ (string-append \"000000\" x)\n                           (cond\n           \
    \                  [(< x 10000000) (string-append \"0000000\" x)\n           \
    \                    (cond\n                                 [(< x 100000000)\
    \ (string-append \"00000000\" x)\n                                   (cond\n \
    \                                    [(< x 1000000000) (string-append \"000000000\"\
    \ x)\n                                       (cond\n                         \
    \                [(< x 10000000000) (string-append \"0000000000\" x)\n       \
    \                                    (cond\n                                 \
    \            [(< x 100000000000) (string-append \"00000000000\" x)\n         \
    \                                      (cond\n                               \
    \                  [(< x 1000000000000) (string-append \"000000000000\" x)\n \
    \                                                  (cond\n                   \
    \                                  [(< x 10000000000000) (string-append \"0000000000000\"\
    \ x)\n                                                       (cond\n         \
    \                                                [(< x 100000000000000) (string-append\
    \ \"00000000000000\" x)\n                                                    \
    \       (cond\n                                                             [(<\
    \ x 1000000000000000) (string-append \"000000000000000\" x)\n                \
    \                                               (cond\n                      \
    \                                           [(< x 10000000000000000) (string-append\
    \ \"0000000000000000\" x)\n                                                  \
    \                (cond\n                                                     \
    \              [(< x 100000000000000000) (string-append \"00000000000000000\"\
    \ x)\n                                                                    (cond\n\
    \                                                                     [(< x 1000000000000000000)\
    \ (string-append \"000000000000000000\" x)\n                                 \
    \                                     (cond\n                                \
    \                                        [(< x 10000000000000000000) (string-append\
    \ \"0000000000000000000\" x)\n                                               \
    \                          (cond\n                                           \
    \                                 [(< x 100000000000000000000) (string-append\
    \ \"00000000000000000000\" x)\n                                              \
    \                               (cond\n                                      \
    \                                         [(< x 1000000000000000000000) (string-append\
    \ \"000000000000000000000\" x)\n                                             \
    \                                   (cond\n                                  \
    \                                               [(< x 10000000000000000000000)\
    \ (string-append \"0000000000000000000000\" x)\n                             \
    \                                                      (cond\n               \
    \                                                                      [(< x 100000000000000000000000)\
    \ (string-append \"00000000000000000000000\" x)\n                            \
    \                                                           (cond\n          \
    \                                                                            \
    \   [(< x 1000000000000000000000000) (string-", "  (if (< base 10)\n      (number->string\
    \ x (+ base base))\n      (number->string x (- base base))))\n", "  (if (< base\
    \ 10)\n      (number->string x (/ base 10))\n      (number->string x (+ (/ base\
    \ 10) 10))))\n", "  (cond\n    [(< base 10) (string-append (number->string x)\
    \ (number->string base))]\n    [else (change_base (/ x base) (+ base 1))]))\n",
  "  (cond\n    [(< base 10) (string-append (number->string x) (number->string base))]\n\
    \    [else (change_base (/ x base) (+ base 1))]))\n", "  (if (< base 10)\n   \
    \   (number->string x (+ base base))\n      (number->string x (- base base))))\n",
  "  (if (< base 10)\n      (number->string x)\n      (number->string (quotient x\
    \ base) (quotient x base))))\n", "  (if (< base 10)\n      (number->string x (+\
    \ base base))\n      (number->string x (- base base))))\n", "  (cond\n    [(<\
    \ base 10)\n     (string-append (number->string x) (number->string base))]\n \
    \   [else\n     (string-append (number->string x) (number->string (- base 10)))]))\n",
  "  (if (< base 10)\n      (number->string x (+ base 1))\n      (number->string x\
    \ (- base 1))))\n", "  (cond\n    [(< base 10) (string-append (number->string\
    \ x) (number->string base))]\n    [else (change_base (/ x base) (+ base 1))]))\n",
  "  (cond\n    [(< base 10) (string-append (number->string x) (number->string base))]\n\
    \    [else (change_base (/ x base) (+ base 1))]))\n", "  (cond\n    [(< base 10)\
    \ (string-append (number->string x) (number->string base))]\n    [else (change_base\
    \ (/ x base) (+ base 1))]))\n", "  (if (< base 10)\n      (number->string x)\n\
    \      (number->string (quotient x base) (quotient x base))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
