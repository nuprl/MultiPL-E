language: rkt
name: HumanEval_117_select_words
results:
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0) '()]\n    [(=\
    \ (length s) n) (cons (first s) (select_words (rest s) n))]\n    [else (cons (first\
    \ s) (select_words (rest s) (- n 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdpso7aq8.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpdpso7aq8.rkt:33:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdpso7aq8.rkt:34:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdpso7aq8.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdpso7aq8.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdpso7aq8.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdpso7aq8.rkt:38:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040386
- exit_code: 1
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) (list ())]\n    [(equal? (length s) n) (cons (first s) (select_words\
    \ (rest s) n))]\n    [else (cons (first s) (select_words (rest s) n))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpiuw815ss.rkt:21:22: #%app: missing procedure expression;\n probably\
    \ originally (), which is an illegal empty application\n  in: (#%app)\n  location...:\n\
    \   /tmp/tmpiuw815ss.rkt:21:22\n"
  stdout: ''
  timestamp: 1660040444
- exit_code: 1
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) (list ())]\n    [(= n 0) (list s)]\n    [else (cons (first s)\n\
    \                (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpdszkz6ex.rkt:21:22: #%app: missing procedure expression;\n probably\
    \ originally (), which is an illegal empty application\n  in: (#%app)\n  location...:\n\
    \   /tmp/tmpdszkz6ex.rkt:21:22\n"
  stdout: ''
  timestamp: 1660040386
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s)\n                (select_words (rest s) (sub1 n)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:33:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:35:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:36:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:37:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:38:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s) (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ozkmpd.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp50ozkmpd.rkt:32:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp50ozkmpd.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ozkmpd.rkt:34:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp50ozkmpd.rkt:35:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ozkmpd.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp50ozkmpd.rkt:37:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0) '()]\n    [else\
    \ (cons (first s)\n                (select_words (rest s) (sub1 n)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdji679i3.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpdji679i3.rkt:33:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdji679i3.rkt:34:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdji679i3.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdji679i3.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdji679i3.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdji679i3.rkt:38:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040386
- exit_code: 1
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) (list ())]\n    [(= n 0) (list s)]\n    [(= n 1) (list '())]\n\
    \    [else (cons (first s)\n                (select_words (rest s)\n         \
    \                    (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpa_fvinln.rkt:21:22: #%app: missing procedure expression;\n probably\
    \ originally (), which is an illegal empty application\n  in: (#%app)\n  location...:\n\
    \   /tmp/tmpa_fvinln.rkt:21:22\n"
  stdout: ''
  timestamp: 1660040444
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) n) (cons (first s)\
    \ (select_words (rest s) n))]\n    [else (cons (first s) (select_words (rest s)\
    \ (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate select_words))\n    (check-equal? (candidate \"Mary had a little lamb\"\
    \ 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\"\
    \ 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\"\
    \ 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"\
    ))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmgyyl04j.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpmgyyl04j.rkt:32:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpmgyyl04j.rkt:33:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmgyyl04j.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmgyyl04j.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmgyyl04j.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmgyyl04j.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s)\n                (select_words (rest s) (sub1 n)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:33:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:35:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:36:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:37:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:38:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [else (cons (first s)\n        \
    \        (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp33u2wcdo.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp33u2wcdo.rkt:32:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp33u2wcdo.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp33u2wcdo.rkt:34:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp33u2wcdo.rkt:35:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp33u2wcdo.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp33u2wcdo.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) (list)]\n    [(= n 0) (list)]\n    [(= n 1) (cons (first s) (select_words\
    \ (rest s) 0))]\n    [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpry78fncr.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpry78fncr.rkt:32:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpry78fncr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpry78fncr.rkt:34:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpry78fncr.rkt:35:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpry78fncr.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpry78fncr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040386
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [else (cons (first s)\n        \
    \        (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp33u2wcdo.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp33u2wcdo.rkt:32:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp33u2wcdo.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp33u2wcdo.rkt:34:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp33u2wcdo.rkt:35:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp33u2wcdo.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp33u2wcdo.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) (list)]\n    [(= n 0) (list)]\n    [(= n 1) (cons (first s) (select_words\
    \ (rest s) 0))]\n    [else (cons (first s)\n                (select_words (rest\
    \ s) (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzkveruxn.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpzkveruxn.rkt:33:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzkveruxn.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzkveruxn.rkt:35:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpzkveruxn.rkt:36:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzkveruxn.rkt:37:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzkveruxn.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040387
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0) '()]\n    [else\
    \ (cons (first s)\n                (select_words (rest s) (sub1 n)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdji679i3.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpdji679i3.rkt:33:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdji679i3.rkt:34:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdji679i3.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdji679i3.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdji679i3.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdji679i3.rkt:38:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040386
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0) '()]\n    [(=\
    \ n 1) (cons (first s) (select_words (rest s) 0))]\n    [else (cons (first s)\
    \ (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2063zrcn.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp2063zrcn.rkt:33:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2063zrcn.rkt:34:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2063zrcn.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2063zrcn.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2063zrcn.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2063zrcn.rkt:38:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040387
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0) '()]\n    [(=\
    \ (length s) n) '()]\n    [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ssyhvi9.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0ssyhvi9.rkt:33:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ssyhvi9.rkt:34:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ssyhvi9.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ssyhvi9.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ssyhvi9.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ssyhvi9.rkt:38:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040386
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0) '()]\n    [(=\
    \ (length s) n) '()]\n    [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ssyhvi9.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0ssyhvi9.rkt:33:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ssyhvi9.rkt:34:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ssyhvi9.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ssyhvi9.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ssyhvi9.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ssyhvi9.rkt:38:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040386
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s)\n                (select_words (rest s) (sub1 n)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:33:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:35:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:36:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:37:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:38:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s)\n                (select_words (rest s)\n                        \
    \    (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbun647u8.rkt:33:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpbun647u8.rkt:34:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpbun647u8.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbun647u8.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpbun647u8.rkt:37:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbun647u8.rkt:38:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpbun647u8.rkt:39:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0) '()]\n    [else\
    \ (cons (first s) (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpfd38zu.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpcpfd38zu.rkt:32:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpfd38zu.rkt:33:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpfd38zu.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpfd38zu.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpfd38zu.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpfd38zu.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s) (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ozkmpd.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp50ozkmpd.rkt:32:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp50ozkmpd.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ozkmpd.rkt:34:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp50ozkmpd.rkt:35:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ozkmpd.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp50ozkmpd.rkt:37:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s)\n                (select_words (rest s)\n                        \
    \    (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbun647u8.rkt:33:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpbun647u8.rkt:34:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpbun647u8.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbun647u8.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpbun647u8.rkt:37:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbun647u8.rkt:38:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpbun647u8.rkt:39:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) (list)]\n    [(= n 0) (list)]\n    [else (cons (first s) (select_words\
    \ (rest s) (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had a\
    \ little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"\
    simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7ivjwc0a.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp7ivjwc0a.rkt:31:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp7ivjwc0a.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7ivjwc0a.rkt:33:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp7ivjwc0a.rkt:34:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7ivjwc0a.rkt:35:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp7ivjwc0a.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(equal? (length s) n) s]\n    [else (cons (first s)\
    \ (select_words (rest s) n))]\n  )\n)\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf6cmgc45.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpf6cmgc45.rkt:33:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpf6cmgc45.rkt:34:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf6cmgc45.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf6cmgc45.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf6cmgc45.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf6cmgc45.rkt:38:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040444
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) (list)]\n    [(= n 0) (list)]\n    [(= (length s) 0) (list)]\n\
    \    [(= (length s) n) (list s)]\n    [else (cons (first s) (select_words (rest\
    \ s) (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptgcfveaa.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmptgcfveaa.rkt:33:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmptgcfveaa.rkt:34:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptgcfveaa.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptgcfveaa.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptgcfveaa.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptgcfveaa.rkt:38:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040444
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s)\n                (select_words (rest s) (sub1 n)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:33:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:35:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:36:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:37:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:38:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s) (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ozkmpd.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp50ozkmpd.rkt:32:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp50ozkmpd.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ozkmpd.rkt:34:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp50ozkmpd.rkt:35:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ozkmpd.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp50ozkmpd.rkt:37:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(equal? (length s) n) (cons (car s) (select_words\
    \ (cdr s) n))]\n    [else (cons (car s)\n                (select_words (cdr s)\
    \ n))]\n    ))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate select_words))\n    (check-equal? (candidate \"Mary had a little lamb\"\
    \ 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\"\
    \ 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\"\
    \ 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"\
    ))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptzu74qsq.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmptzu74qsq.rkt:33:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmptzu74qsq.rkt:34:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptzu74qsq.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptzu74qsq.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptzu74qsq.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptzu74qsq.rkt:38:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040444
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(equal? (length s) n) s]\n    [else (cons (first s)\n\
    \                (select_words (rest s) n))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp22h_srvv.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp22h_srvv.rkt:32:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp22h_srvv.rkt:33:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp22h_srvv.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp22h_srvv.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp22h_srvv.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp22h_srvv.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 1
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) (list ())]\n    [(= n 0) (list s)]\n    [else (cons (first s)\
    \ (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp_is95nzi.rkt:21:22: #%app: missing procedure expression;\n probably\
    \ originally (), which is an illegal empty application\n  in: (#%app)\n  location...:\n\
    \   /tmp/tmp_is95nzi.rkt:21:22\n"
  stdout: ''
  timestamp: 1660040386
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0) '()]\n    [else\
    \ (cons (first s)\n                (select_words (rest s) (sub1 n)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdji679i3.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpdji679i3.rkt:33:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdji679i3.rkt:34:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdji679i3.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdji679i3.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdji679i3.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdji679i3.rkt:38:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040386
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(equal? (first s) (first '())) (cons (first s) (select_words\
    \ (rest s) n))]\n    [else (cons (first s) (select_words (rest s) n))]\n  ))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqe9f1wqq.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpqe9f1wqq.rkt:32:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpqe9f1wqq.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqe9f1wqq.rkt:34:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpqe9f1wqq.rkt:35:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqe9f1wqq.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpqe9f1wqq.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040444
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s)\n                (select_words (rest s)\n                        \
    \     (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpybcz_p5q.rkt:33:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpybcz_p5q.rkt:34:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpybcz_p5q.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpybcz_p5q.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpybcz_p5q.rkt:37:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpybcz_p5q.rkt:38:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpybcz_p5q.rkt:39:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s)\n                (select_words (rest s)\n                        \
    \     (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpybcz_p5q.rkt:33:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpybcz_p5q.rkt:34:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpybcz_p5q.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpybcz_p5q.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpybcz_p5q.rkt:37:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpybcz_p5q.rkt:38:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpybcz_p5q.rkt:39:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 1
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) (list ())]\n    [(= n 0) (list s)]\n    [else (cons (first s)\
    \ (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp_is95nzi.rkt:21:22: #%app: missing procedure expression;\n probably\
    \ originally (), which is an illegal empty application\n  in: (#%app)\n  location...:\n\
    \   /tmp/tmp_is95nzi.rkt:21:22\n"
  stdout: ''
  timestamp: 1660040386
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) n) (list s)]\n  \
    \  [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpxtnq_0cj.rkt:32:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:33:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) n) (list s)]\n  \
    \  [else (cons (first s)\n                (select_words (rest s) (sub1 n)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbh1dn18t.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpbh1dn18t.rkt:33:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbh1dn18t.rkt:34:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbh1dn18t.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbh1dn18t.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbh1dn18t.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbh1dn18t.rkt:38:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s)\n                (select_words (rest s) (sub1 n)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:33:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:35:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:36:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:37:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:38:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) n) s]\n    [else\
    \ (cons (first s) (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplwvsia6z.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmplwvsia6z.rkt:32:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmplwvsia6z.rkt:33:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplwvsia6z.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplwvsia6z.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplwvsia6z.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplwvsia6z.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s)\n                (select_words (rest s) (sub1 n)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:33:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:35:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:36:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:37:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:38:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s)\n                (select_words (rest s) (sub1 n)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:33:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:35:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:36:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:37:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:38:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s) (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ozkmpd.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp50ozkmpd.rkt:32:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp50ozkmpd.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ozkmpd.rkt:34:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp50ozkmpd.rkt:35:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ozkmpd.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp50ozkmpd.rkt:37:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0) '()]\n    [(=\
    \ (length s) n) '()]\n    [else (cons (first s) (select_words (rest s) (- n 1)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8c5bsc90.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp8c5bsc90.rkt:33:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8c5bsc90.rkt:34:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8c5bsc90.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8c5bsc90.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8c5bsc90.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8c5bsc90.rkt:38:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040387
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(equal? (length s) n) (list s)]\n    [else (cons (first\
    \ s) (select_words (rest s) n))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps8vivwwz.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmps8vivwwz.rkt:31:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmps8vivwwz.rkt:32:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps8vivwwz.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps8vivwwz.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps8vivwwz.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps8vivwwz.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) n) (list s)]\n  \
    \  [else (cons (first s)\n                (select_words (rest s) (sub1 n)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbh1dn18t.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpbh1dn18t.rkt:33:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbh1dn18t.rkt:34:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbh1dn18t.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbh1dn18t.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbh1dn18t.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbh1dn18t.rkt:38:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) n) (list s)]\n  \
    \  [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpxtnq_0cj.rkt:32:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:33:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 1
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) (list ())]\n    [(= n 0) (list s)]\n    [(= n 1) (list s)]\n\
    \    [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp76404fr2.rkt:21:22: #%app: missing procedure expression;\n probably\
    \ originally (), which is an illegal empty application\n  in: (#%app)\n  location...:\n\
    \   /tmp/tmp76404fr2.rkt:21:22\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0) '()]\n    [(=\
    \ (length s) n) '()]\n    [else (cons (first s)\n                (select_words\
    \ (rest s)\n                             (- n (length s))))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqo3mty5j.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpqo3mty5j.rkt:35:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpqo3mty5j.rkt:36:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqo3mty5j.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqo3mty5j.rkt:38:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqo3mty5j.rkt:39:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqo3mty5j.rkt:40:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040444
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s)\n                (select_words (rest s) (sub1 n)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:33:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:35:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:36:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:37:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:38:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s)\n                (select_words (rest s)\n                        \
    \     (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpybcz_p5q.rkt:33:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpybcz_p5q.rkt:34:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpybcz_p5q.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpybcz_p5q.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpybcz_p5q.rkt:37:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpybcz_p5q.rkt:38:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpybcz_p5q.rkt:39:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s)\n                (select_words (rest s) (sub1 n)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:33:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:35:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:36:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:37:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:38:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) (list)]\n    [(= n 0) (list)]\n    [(= n 1) (cons (first s) (select_words\
    \ (rest s) 0))]\n    [else (cons (first s)\n                (select_words (rest\
    \ s)\n                            (sub1 n)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1ko4xebt.rkt:33:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp1ko4xebt.rkt:34:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1ko4xebt.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1ko4xebt.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp1ko4xebt.rkt:37:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1ko4xebt.rkt:38:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1ko4xebt.rkt:39:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040444
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s)\n                (select_words (rest s)\n                        \
    \    (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbun647u8.rkt:33:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpbun647u8.rkt:34:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpbun647u8.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbun647u8.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpbun647u8.rkt:37:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbun647u8.rkt:38:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpbun647u8.rkt:39:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) (list)]\n    [(= n 0) (list)]\n    [else (cons (first s)\n  \
    \              (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy2qql5qy.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpy2qql5qy.rkt:32:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpy2qql5qy.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy2qql5qy.rkt:34:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpy2qql5qy.rkt:35:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy2qql5qy.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpy2qql5qy.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040386
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) (list)] \n    [(= n 0) (list)] \n    [else (cons (first s) (select_words\
    \ (rest s) (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had a\
    \ little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"\
    simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcp8duiz1.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpcp8duiz1.rkt:31:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpcp8duiz1.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcp8duiz1.rkt:33:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpcp8duiz1.rkt:34:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcp8duiz1.rkt:35:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpcp8duiz1.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040444
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) (list)]\n    [(= n 0) (list)]\n    [(= n 1) (list s)]\n    [else\
    \ (cons (first s) (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmc0evbdv.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpmc0evbdv.rkt:32:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpmc0evbdv.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmc0evbdv.rkt:34:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpmc0evbdv.rkt:35:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmc0evbdv.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpmc0evbdv.rkt:37:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040444
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s)\n                (select_words (rest s) (sub1 n)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:33:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:35:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:36:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:37:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:38:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 1
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) (list ())]\n    [(= n 0) (list s)]\n    [(= (length s) 0) (list\
    \ ())]\n    [(= (length s) n) (list s)]\n    [else (cons (substring s 0 (- (length\
    \ s) n)) (select_words (substring s n (- (length s) n)))]))\n</code>\n<|/ a tags=racket,scheme\
    \ |>\n<| c |>\nI like your solution, but I believe it would be better to use a\
    \ `cond` expression instead of `if` expressions.\n<|/ c |>\n<| c |>\nI agree,\
    \ `cond` would be better. I'll update my answer.\n<|/ c |>\n<| c |>\nI updated\
    \ my answer to include a solution that uses `cond` instead of `if`.\n<|/ c |>\n\
    <| a tags=racket,scheme |>\nHere's a solution that uses cond instead of if:\n\
    <code>\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmpg2_uh_0q.rkt:25:96: read-syntax: missing `)` to close preceding\
    \ `(`, found instead `]`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660040443
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) n) (cons s (select_words\
    \ (rest s) n))]\n    [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpd1_o9ay0.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpd1_o9ay0.rkt:32:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpd1_o9ay0.rkt:33:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpd1_o9ay0.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpd1_o9ay0.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpd1_o9ay0.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpd1_o9ay0.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040386
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0) '()]\n    [(=\
    \ (length s) n) '()]\n    [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ssyhvi9.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0ssyhvi9.rkt:33:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ssyhvi9.rkt:34:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ssyhvi9.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ssyhvi9.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ssyhvi9.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ssyhvi9.rkt:38:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040386
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [else (cons (first s)\n        \
    \        (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp33u2wcdo.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp33u2wcdo.rkt:32:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp33u2wcdo.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp33u2wcdo.rkt:34:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp33u2wcdo.rkt:35:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp33u2wcdo.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp33u2wcdo.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s)\n                (select_words (rest s) (sub1 n)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:33:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:35:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:36:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:37:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:38:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s)\n                (select_words (rest s) (sub1 n)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:33:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:35:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:36:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:37:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:38:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0) '()]\n    [(=\
    \ (length s) n) '()]\n    [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ssyhvi9.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0ssyhvi9.rkt:33:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ssyhvi9.rkt:34:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ssyhvi9.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ssyhvi9.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ssyhvi9.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ssyhvi9.rkt:38:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040386
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) (list)] \n    [(= n 0) (list)] \n    [(= n 1) (cons (car s) (select_words\
    \ (cdr s) 0))]\n    [else (cons (car s) (select_words (cdr s) (sub1 n)))]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq8jnmg_2.rkt:31:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Mary had a little lamb\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpq8jnmg_2.rkt:32:4\n\ncar: contract violation\n  expected:\
    \ pair?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpq8jnmg_2.rkt:33:4\n\ncar:\
    \ contract violation\n  expected: pair?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq8jnmg_2.rkt:34:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq8jnmg_2.rkt:35:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq8jnmg_2.rkt:36:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq8jnmg_2.rkt:37:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040444
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s)\n                (select_words (rest s) (sub1 n)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:33:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:35:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:36:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:37:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:38:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0) '()]\n    [(=\
    \ (length s) n) (list s)]\n    [else (cons (first s)\n                (select_words\
    \ (rest s) (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had a\
    \ little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"\
    simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp56kposhq.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp56kposhq.rkt:34:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp56kposhq.rkt:35:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp56kposhq.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp56kposhq.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp56kposhq.rkt:38:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp56kposhq.rkt:39:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040387
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0) '()]\n    [(=\
    \ (length s) n) '()]\n    [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ssyhvi9.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0ssyhvi9.rkt:33:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ssyhvi9.rkt:34:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ssyhvi9.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ssyhvi9.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ssyhvi9.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ssyhvi9.rkt:38:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040386
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s) (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ozkmpd.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp50ozkmpd.rkt:32:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp50ozkmpd.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ozkmpd.rkt:34:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp50ozkmpd.rkt:35:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ozkmpd.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp50ozkmpd.rkt:37:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s)\n                (select_words (rest s) (sub1 n)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:33:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:35:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:36:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:37:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:38:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(equal? (length s) n) s]\n    [else (cons (first s)\
    \ (select_words (rest s) n))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmjoumz6r.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpmjoumz6r.rkt:31:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpmjoumz6r.rkt:32:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmjoumz6r.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmjoumz6r.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmjoumz6r.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmjoumz6r.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040386
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(equal? (length s) n) (list s)]\n    [else (cons (first\
    \ s)\n                (select_words (rest s) n))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_zggpfhq.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_zggpfhq.rkt:32:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_zggpfhq.rkt:33:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_zggpfhq.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_zggpfhq.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_zggpfhq.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_zggpfhq.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s)\n                (select_words (rest s) (sub1 n)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:33:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:35:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:36:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:37:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:38:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s)\n                (select_words (rest s) (sub1 n)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:33:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:35:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:36:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:37:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:38:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s) (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ozkmpd.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp50ozkmpd.rkt:32:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp50ozkmpd.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ozkmpd.rkt:34:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp50ozkmpd.rkt:35:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ozkmpd.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp50ozkmpd.rkt:37:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) n) (list s)]\n  \
    \  [else (cons (first s)\n                (select_words (rest s) (sub1 n)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbh1dn18t.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpbh1dn18t.rkt:33:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbh1dn18t.rkt:34:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbh1dn18t.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbh1dn18t.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbh1dn18t.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbh1dn18t.rkt:38:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) (list)]\n    [(= n 0) (list)]\n    [(= n 1) (cons (first s) (select_words\
    \ (rest s) 0))]\n    [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpry78fncr.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpry78fncr.rkt:32:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpry78fncr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpry78fncr.rkt:34:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpry78fncr.rkt:35:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpry78fncr.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpry78fncr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040386
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(equal? (length s) n) (cons (car s) (select_words\
    \ (cdr s) n))]\n    [else (cons (car s) (select_words (cdr s) n))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5fcqxqrp.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp5fcqxqrp.rkt:31:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp5fcqxqrp.rkt:32:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5fcqxqrp.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5fcqxqrp.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5fcqxqrp.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5fcqxqrp.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040386
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s)\n                (select_words (rest s) (sub1 n)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:33:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:35:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:36:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:37:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:38:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) (list)] \n    [(= n 0) (list empty)] \n    [(= n 1) (list s)]\
    \ \n    [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfz8n6h23.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpfz8n6h23.rkt:32:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfz8n6h23.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfz8n6h23.rkt:34:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpfz8n6h23.rkt:35:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfz8n6h23.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpfz8n6h23.rkt:37:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040444
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s)\n                (select_words (rest s)\n                        \
    \     (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpybcz_p5q.rkt:33:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpybcz_p5q.rkt:34:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpybcz_p5q.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpybcz_p5q.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpybcz_p5q.rkt:37:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpybcz_p5q.rkt:38:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpybcz_p5q.rkt:39:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) (list)]\n    [(= n 0) (list)]\n    [else (cons (first s)\n  \
    \              (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy2qql5qy.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpy2qql5qy.rkt:32:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpy2qql5qy.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy2qql5qy.rkt:34:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpy2qql5qy.rkt:35:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy2qql5qy.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpy2qql5qy.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040386
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (cons (first s) (select_words\
    \ (rest s) 0))]\n    [else (cons (first s)\n                (select_words (rest\
    \ s)\n                            (sub1 n)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpusksqr5v.rkt:33:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpusksqr5v.rkt:34:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpusksqr5v.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpusksqr5v.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpusksqr5v.rkt:37:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpusksqr5v.rkt:38:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpusksqr5v.rkt:39:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040386
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) (list)]\n    [(= (length s) n) (list s)]\n    [else (cons (first\
    \ s) (select_words (rest s) n))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgb8zx9y8.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgb8zx9y8.rkt:31:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgb8zx9y8.rkt:32:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgb8zx9y8.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgb8zx9y8.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgb8zx9y8.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgb8zx9y8.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040387
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0) '()]\n    [else\
    \ (cons (first s) (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpfd38zu.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpcpfd38zu.rkt:32:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpfd38zu.rkt:33:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpfd38zu.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpfd38zu.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpfd38zu.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpfd38zu.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 1
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) (list ())]\n    [(equal? (length s) n) (list s)]\n    [else (cons\
    \ (first s) (select_words (rest s) n))]\n  )\n)\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp8nkhlyjk.rkt:21:22: #%app: missing procedure expression;\n probably\
    \ originally (), which is an illegal empty application\n  in: (#%app)\n  location...:\n\
    \   /tmp/tmp8nkhlyjk.rkt:21:22\n"
  stdout: ''
  timestamp: 1660040444
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [else (cons (first s)\n        \
    \        (select_words (rest s)\n                            (sub1 n)))]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp34kddfwt.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp34kddfwt.rkt:33:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp34kddfwt.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp34kddfwt.rkt:35:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp34kddfwt.rkt:36:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp34kddfwt.rkt:37:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp34kddfwt.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040444
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0) '()]\n    [else\
    \ (cons (first s) (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpfd38zu.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpcpfd38zu.rkt:32:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpfd38zu.rkt:33:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpfd38zu.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpfd38zu.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpfd38zu.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpfd38zu.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 1
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) (list ())]\n    [(= n 0) (list s)]\n    [(= (length s) n) (list\
    \ s)]\n    [else (append (select_words (substring s 0 n) (substring s n (length\
    \ s))) (list (substring s 0 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp3470yojj.rkt:21:22: #%app: missing procedure expression;\n probably\
    \ originally (), which is an illegal empty application\n  in: (#%app)\n  location...:\n\
    \   /tmp/tmp3470yojj.rkt:21:22\n"
  stdout: ''
  timestamp: 1660040444
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) n) (list s)]\n  \
    \  [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpxtnq_0cj.rkt:32:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:33:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s)\n                (select_words (rest s) (sub1 n)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:33:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:35:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:36:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:37:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:38:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) n) (list s)]\n  \
    \  [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpxtnq_0cj.rkt:32:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:33:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s)\n                (select_words (rest s) (sub1 n)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:33:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:35:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:36:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:37:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:38:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s)\n                (select_words (rest s) (sub1 n)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:33:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:35:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:36:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:37:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:38:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0) '()]\n    [(=\
    \ (length s) n) '()]\n    [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ssyhvi9.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0ssyhvi9.rkt:33:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ssyhvi9.rkt:34:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ssyhvi9.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ssyhvi9.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ssyhvi9.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ssyhvi9.rkt:38:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040386
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) (list)] \n    [(= n 0) (list s)]\n    [else (cons (first s) (select_words\
    \ (rest s) (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had a\
    \ little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"\
    simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp70_8zy5q.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp70_8zy5q.rkt:31:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp70_8zy5q.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp70_8zy5q.rkt:33:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp70_8zy5q.rkt:34:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp70_8zy5q.rkt:35:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp70_8zy5q.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040444
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [else (cons (first s) (select_words\
    \ (rest s) (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had a\
    \ little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"\
    simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3cxoxaer.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp3cxoxaer.rkt:31:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3cxoxaer.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3cxoxaer.rkt:33:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp3cxoxaer.rkt:34:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3cxoxaer.rkt:35:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3cxoxaer.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040386
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) (list)]\n    [(= 0 (length s)) empty]\n    [(= n (length s))\
    \ empty]\n    [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe970fl9m.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpe970fl9m.rkt:32:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpe970fl9m.rkt:33:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe970fl9m.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe970fl9m.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe970fl9m.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe970fl9m.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040444
- exit_code: 1
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) (list ())]\n    [(= n 0) (list s)]\n    [else (cons (first s)\
    \ (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp_is95nzi.rkt:21:22: #%app: missing procedure expression;\n probably\
    \ originally (), which is an illegal empty application\n  in: (#%app)\n  location...:\n\
    \   /tmp/tmp_is95nzi.rkt:21:22\n"
  stdout: ''
  timestamp: 1660040386
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) (list)]\n    [(equal? (length s) n) (list s)]\n    [else (cons\
    \ (first s) (select_words (rest s) n))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnzit_ovz.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpnzit_ovz.rkt:31:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpnzit_ovz.rkt:32:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnzit_ovz.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnzit_ovz.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnzit_ovz.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnzit_ovz.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040386
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) (list)]\n    [(equal? (length s) n) (list s)]\n    [else (cons\
    \ (first s) (select_words (rest s) n))]\n  ))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxlam4zp4.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpxlam4zp4.rkt:32:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxlam4zp4.rkt:33:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxlam4zp4.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxlam4zp4.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxlam4zp4.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxlam4zp4.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040444
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) (list)]\n    [(= n 0) (list)]\n    [(= n 1) (cons (first s) (select_words\
    \ (rest s) 0))]\n    [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpry78fncr.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpry78fncr.rkt:32:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpry78fncr.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpry78fncr.rkt:34:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpry78fncr.rkt:35:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpry78fncr.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpry78fncr.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040386
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) n) (list s)]\n  \
    \  [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpxtnq_0cj.rkt:32:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:33:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s)\n                (select_words (rest s)\n                        \
    \    (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbun647u8.rkt:33:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpbun647u8.rkt:34:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpbun647u8.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbun647u8.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpbun647u8.rkt:37:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbun647u8.rkt:38:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpbun647u8.rkt:39:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) n) (list s)]\n  \
    \  [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpxtnq_0cj.rkt:32:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:33:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 1
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) (list ())]\n    [(equal? (length s) n) (list s)]\n    [else (cons\
    \ (first s) (select_words (rest s) n))]\n  )\n)\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp8nkhlyjk.rkt:21:22: #%app: missing procedure expression;\n probably\
    \ originally (), which is an illegal empty application\n  in: (#%app)\n  location...:\n\
    \   /tmp/tmp8nkhlyjk.rkt:21:22\n"
  stdout: ''
  timestamp: 1660040444
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s)\n                (select_words (rest s)\n                        \
    \    (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbun647u8.rkt:33:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpbun647u8.rkt:34:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpbun647u8.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbun647u8.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpbun647u8.rkt:37:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbun647u8.rkt:38:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpbun647u8.rkt:39:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s) (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ozkmpd.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp50ozkmpd.rkt:32:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp50ozkmpd.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ozkmpd.rkt:34:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp50ozkmpd.rkt:35:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ozkmpd.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp50ozkmpd.rkt:37:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s)\n                (select_words (rest s) (sub1 n)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:33:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:35:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:36:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:37:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:38:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s)\n                (select_words (rest s) (sub1 n)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:33:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:35:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:36:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:37:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:38:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) n) (list s)]\n  \
    \  [else (cons (substring s 0 (- (length s) n)) (select_words (substring s n (-\
    \ (length s) n)) n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had a\
    \ little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"\
    simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1qy0adt8.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1qy0adt8.rkt:32:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1qy0adt8.rkt:33:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1qy0adt8.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1qy0adt8.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1qy0adt8.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1qy0adt8.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040386
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(equal? (length s) n) s]\n    [(equal? (length s)\
    \ 0) '()]\n    [(equal? (length s) n) (cons (car s) (select_words (cdr s) n))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpij4fh6y9.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpij4fh6y9.rkt:32:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpij4fh6y9.rkt:33:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpij4fh6y9.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpij4fh6y9.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpij4fh6y9.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpij4fh6y9.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040444
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) n) (list s)]\n  \
    \  [else (cons (first s)\n                (select_words (rest s) (sub1 n)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbh1dn18t.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpbh1dn18t.rkt:33:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbh1dn18t.rkt:34:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbh1dn18t.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbh1dn18t.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbh1dn18t.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbh1dn18t.rkt:38:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s)\n                (select_words (rest s)\n                        \
    \     (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpybcz_p5q.rkt:33:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpybcz_p5q.rkt:34:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpybcz_p5q.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpybcz_p5q.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpybcz_p5q.rkt:37:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpybcz_p5q.rkt:38:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpybcz_p5q.rkt:39:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s) (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ozkmpd.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp50ozkmpd.rkt:32:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp50ozkmpd.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ozkmpd.rkt:34:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp50ozkmpd.rkt:35:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ozkmpd.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp50ozkmpd.rkt:37:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) n) (list s)]\n  \
    \  [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpxtnq_0cj.rkt:32:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:33:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) n) (cons (first s)\
    \ (select_words (rest s) n))]\n    [else (cons (first s)\n                (select_words\
    \ (rest s) (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had a\
    \ little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"\
    simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0lxervt2.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0lxervt2.rkt:33:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0lxervt2.rkt:34:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0lxervt2.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0lxervt2.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0lxervt2.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0lxervt2.rkt:38:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040444
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s)\n                (select_words (rest s) (sub1 n)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:33:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:35:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:36:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:37:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:38:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) n) (cons s (select_words\
    \ (rest s) n))]\n    [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpd1_o9ay0.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpd1_o9ay0.rkt:32:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpd1_o9ay0.rkt:33:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpd1_o9ay0.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpd1_o9ay0.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpd1_o9ay0.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpd1_o9ay0.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040386
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s)\n                (select_words (rest s) (sub1 n)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:33:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:35:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:36:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:37:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:38:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0) '()]\n    [(=\
    \ n 1) (list s)]\n    [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy_t5ludf.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpy_t5ludf.rkt:33:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpy_t5ludf.rkt:34:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy_t5ludf.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy_t5ludf.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy_t5ludf.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy_t5ludf.rkt:38:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040444
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) n) (list s)]\n  \
    \  [else (cons (first s)\n                (select_words (rest s) (sub1 n)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbh1dn18t.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpbh1dn18t.rkt:33:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbh1dn18t.rkt:34:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbh1dn18t.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbh1dn18t.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbh1dn18t.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbh1dn18t.rkt:38:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (cons (car s) (select_words\
    \ (cdr s) 0))]\n    [else (cons (car s) (select_words (cdr s) (sub1 n)))]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprrt3jiqj.rkt:31:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Mary had a little lamb\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmprrt3jiqj.rkt:32:4\n\ncar: contract violation\n  expected:\
    \ pair?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmprrt3jiqj.rkt:33:4\n\ncar:\
    \ contract violation\n  expected: pair?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprrt3jiqj.rkt:34:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprrt3jiqj.rkt:35:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprrt3jiqj.rkt:36:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprrt3jiqj.rkt:37:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) (list)] \n    [(= n 0) (list)] \n    [(= n 1) (cons (first s)\
    \ (select_words (rest s) 0))]\n    [else (cons (first s) (select_words (rest s)\
    \ (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate select_words))\n    (check-equal? (candidate \"Mary had a little lamb\"\
    \ 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\"\
    \ 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\"\
    \ 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"\
    ))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg2rb1eue.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpg2rb1eue.rkt:32:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpg2rb1eue.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg2rb1eue.rkt:34:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpg2rb1eue.rkt:35:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg2rb1eue.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpg2rb1eue.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040444
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s)\n                (select_words (rest s)\n                        \
    \     (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpybcz_p5q.rkt:33:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpybcz_p5q.rkt:34:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpybcz_p5q.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpybcz_p5q.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpybcz_p5q.rkt:37:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpybcz_p5q.rkt:38:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpybcz_p5q.rkt:39:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0) '()]\n    [else\
    \ (cons (first s) (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpfd38zu.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpcpfd38zu.rkt:32:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpfd38zu.rkt:33:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpfd38zu.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpfd38zu.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpfd38zu.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpfd38zu.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(equal? (length s) n) (list s)]\n    [else (cons (first\
    \ s) (select_words (rest s) n))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps8vivwwz.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmps8vivwwz.rkt:31:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmps8vivwwz.rkt:32:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps8vivwwz.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps8vivwwz.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps8vivwwz.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps8vivwwz.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0) '()]\n    [(=\
    \ (length s) n) (cons (first s) (select_words (rest s) n))]\n    [else (cons (first\
    \ s) (select_words (rest s) (- n 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdpso7aq8.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpdpso7aq8.rkt:33:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdpso7aq8.rkt:34:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdpso7aq8.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdpso7aq8.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdpso7aq8.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdpso7aq8.rkt:38:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040386
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) n) (list s)]\n  \
    \  [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpxtnq_0cj.rkt:32:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:33:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (cons (first s) (select_words\
    \ (rest s) 0))]\n    [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptagno_ol.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmptagno_ol.rkt:32:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmptagno_ol.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptagno_ol.rkt:34:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmptagno_ol.rkt:35:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptagno_ol.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmptagno_ol.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040387
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) n) (cons (first s)\
    \ (select_words (rest s) n))]\n    [else (cons (first s) (select_words (rest s)\
    \ (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate select_words))\n    (check-equal? (candidate \"Mary had a little lamb\"\
    \ 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\"\
    \ 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\"\
    \ 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"\
    ))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmgyyl04j.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpmgyyl04j.rkt:32:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpmgyyl04j.rkt:33:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmgyyl04j.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmgyyl04j.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmgyyl04j.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmgyyl04j.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s)\n                (select_words (rest s) (sub1 n)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:33:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:35:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:36:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:37:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:38:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) n) (list s)]\n  \
    \  [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpxtnq_0cj.rkt:32:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:33:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(equal? (length s) n) (list s)]\n    [else (cons (first\
    \ s)\n                (select_words (rest s) n))]\n  ))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcv86wq0d.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpcv86wq0d.rkt:33:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcv86wq0d.rkt:34:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcv86wq0d.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcv86wq0d.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcv86wq0d.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcv86wq0d.rkt:38:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) n) (cons (first s)\
    \ (select_words (rest s) n))]\n    [else (cons (first s) (select_words (rest s)\
    \ (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate select_words))\n    (check-equal? (candidate \"Mary had a little lamb\"\
    \ 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\"\
    \ 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\"\
    \ 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"\
    ))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmgyyl04j.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpmgyyl04j.rkt:32:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpmgyyl04j.rkt:33:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmgyyl04j.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmgyyl04j.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmgyyl04j.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmgyyl04j.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s)\n                (select_words (rest s) (sub1 n)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:33:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:35:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:36:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:37:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:38:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0) '()]\n    [else\
    \ (cons (first s)\n                (select_words (rest s) (sub1 n)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdji679i3.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpdji679i3.rkt:33:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdji679i3.rkt:34:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdji679i3.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdji679i3.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdji679i3.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdji679i3.rkt:38:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040386
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0) '()]\n    [else\
    \ (cons (first s) (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpfd38zu.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpcpfd38zu.rkt:32:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpfd38zu.rkt:33:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpfd38zu.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpfd38zu.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpfd38zu.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpfd38zu.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0) '()]\n    [(=\
    \ (length s) n) s]\n    [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl5dvuu3w.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpl5dvuu3w.rkt:33:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpl5dvuu3w.rkt:34:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl5dvuu3w.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl5dvuu3w.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl5dvuu3w.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl5dvuu3w.rkt:38:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040386
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) n) (cons (first s)\
    \ (select_words (rest s) n))]\n    [else (cons (first s) (select_words (rest s)\
    \ (- n 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate select_words))\n    (check-equal? (candidate \"Mary had a little lamb\"\
    \ 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\"\
    \ 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\"\
    \ 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"\
    ))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiaipij7p.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpiaipij7p.rkt:32:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpiaipij7p.rkt:33:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiaipij7p.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiaipij7p.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiaipij7p.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiaipij7p.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040444
- exit_code: 1
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) (list ())]\n    [(= n 0) (list s)]\n    [(= n 1) (list s)]\n\
    \    [else (cons (first s)\n                (select_words (rest s)\n         \
    \                   (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpci4z7zxj.rkt:21:22: #%app: missing procedure expression;\n probably\
    \ originally (), which is an illegal empty application\n  in: (#%app)\n  location...:\n\
    \   /tmp/tmpci4z7zxj.rkt:21:22\n"
  stdout: ''
  timestamp: 1660040445
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0) '()]\n    [(=\
    \ (length s) n) '()]\n    [else (cons (first s)\n                (select_words\
    \ (rest s) (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had a\
    \ little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"\
    simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp00qz0zg6.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp00qz0zg6.rkt:34:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp00qz0zg6.rkt:35:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp00qz0zg6.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp00qz0zg6.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp00qz0zg6.rkt:38:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp00qz0zg6.rkt:39:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040386
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) n) (cons (first s)\
    \ (select_words (rest s) n))]\n    [else (cons (first s) (select_words (rest s)\
    \ (- n 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate select_words))\n    (check-equal? (candidate \"Mary had a little lamb\"\
    \ 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\"\
    \ 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\"\
    \ 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"\
    ))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiaipij7p.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpiaipij7p.rkt:32:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpiaipij7p.rkt:33:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiaipij7p.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiaipij7p.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiaipij7p.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiaipij7p.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040444
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0) '()]\n    [(=\
    \ (length s) n) '()]\n    [else (cons (first s)\n                (select_words\
    \ (rest s) (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had a\
    \ little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"\
    simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp00qz0zg6.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp00qz0zg6.rkt:34:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp00qz0zg6.rkt:35:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp00qz0zg6.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp00qz0zg6.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp00qz0zg6.rkt:38:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp00qz0zg6.rkt:39:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040386
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) (list)]\n    [(= n 0) (list)]\n    [else (cons (first s)\n  \
    \              (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy2qql5qy.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpy2qql5qy.rkt:32:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpy2qql5qy.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy2qql5qy.rkt:34:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpy2qql5qy.rkt:35:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy2qql5qy.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpy2qql5qy.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040386
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) n) (cons (first s)\
    \ (select_words (rest s) n))]\n    [else (cons (first s) (select_words (rest s)\
    \ (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate select_words))\n    (check-equal? (candidate \"Mary had a little lamb\"\
    \ 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\"\
    \ 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\"\
    \ 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"\
    ))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmgyyl04j.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpmgyyl04j.rkt:32:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpmgyyl04j.rkt:33:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmgyyl04j.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmgyyl04j.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmgyyl04j.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmgyyl04j.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s)\n                (select_words (rest s)\n                        \
    \     (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpybcz_p5q.rkt:33:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpybcz_p5q.rkt:34:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpybcz_p5q.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpybcz_p5q.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpybcz_p5q.rkt:37:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpybcz_p5q.rkt:38:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpybcz_p5q.rkt:39:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [else (cons (first s)\n        \
    \        (select_words (rest s)\n                             (sub1 n)))]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpobzyz1y2.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpobzyz1y2.rkt:33:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpobzyz1y2.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpobzyz1y2.rkt:35:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpobzyz1y2.rkt:36:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpobzyz1y2.rkt:37:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpobzyz1y2.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040386
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s)\n                (select_words (rest s) (sub1 n)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:33:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:35:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:36:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:37:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:38:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) (list)] \n    [(= n 0) (list empty)] \n    [else (cons (first\
    \ s)\n                (select_words (rest s)\n                             (-\
    \ n (length s))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq7llvxy0.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpq7llvxy0.rkt:33:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpq7llvxy0.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq7llvxy0.rkt:35:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpq7llvxy0.rkt:36:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq7llvxy0.rkt:37:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpq7llvxy0.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040445
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0) '()]\n    [(=\
    \ n 1) (cons (first s) (select_words (rest s) 0))]\n    [else (cons (first s)\
    \ (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2063zrcn.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp2063zrcn.rkt:33:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2063zrcn.rkt:34:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2063zrcn.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2063zrcn.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2063zrcn.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2063zrcn.rkt:38:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040387
- exit_code: 1
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) (list ())]\n    [(= n 0) (list s)]\n    [else (cons (first s)\n\
    \                (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpdszkz6ex.rkt:21:22: #%app: missing procedure expression;\n probably\
    \ originally (), which is an illegal empty application\n  in: (#%app)\n  location...:\n\
    \   /tmp/tmpdszkz6ex.rkt:21:22\n"
  stdout: ''
  timestamp: 1660040386
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) n) (list s)]\n  \
    \  [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpxtnq_0cj.rkt:32:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:33:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s)\n                (select_words (rest s) (sub1 n)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:33:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:35:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:36:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:37:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:38:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s)\n                (select_words (rest s)\n                        \
    \     (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpybcz_p5q.rkt:33:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpybcz_p5q.rkt:34:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpybcz_p5q.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpybcz_p5q.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpybcz_p5q.rkt:37:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpybcz_p5q.rkt:38:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpybcz_p5q.rkt:39:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) (list)]\n    [(= n 0) (list)]\n    [else (cons (first s) (select_words\
    \ (rest s) (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had a\
    \ little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"\
    simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7ivjwc0a.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp7ivjwc0a.rkt:31:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp7ivjwc0a.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7ivjwc0a.rkt:33:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp7ivjwc0a.rkt:34:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7ivjwc0a.rkt:35:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp7ivjwc0a.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 1
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) (list ())]\n    [(= n 0) (list s)]\n    [else (cons (first s)\n\
    \                (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpdszkz6ex.rkt:21:22: #%app: missing procedure expression;\n probably\
    \ originally (), which is an illegal empty application\n  in: (#%app)\n  location...:\n\
    \   /tmp/tmpdszkz6ex.rkt:21:22\n"
  stdout: ''
  timestamp: 1660040386
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0) '()]\n    [(=\
    \ (length s) n) '()]\n    [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ssyhvi9.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0ssyhvi9.rkt:33:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ssyhvi9.rkt:34:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ssyhvi9.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ssyhvi9.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ssyhvi9.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ssyhvi9.rkt:38:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040386
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s)\n                (select_words (rest s)\n                        \
    \     (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpybcz_p5q.rkt:33:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpybcz_p5q.rkt:34:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpybcz_p5q.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpybcz_p5q.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpybcz_p5q.rkt:37:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpybcz_p5q.rkt:38:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpybcz_p5q.rkt:39:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 1
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) n) (cons (first s)\
    \ (select_words (rest s) n))]\n    [else (cons (first s) (select_words (rest s)\
    \ (- n 1))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate select_words))\n    (check-equal? (candidate \"Mary had a little lamb\"\
    \ 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\"\
    \ 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\"\
    \ 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"\
    ))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmptcq_0cyg.rkt:24:58: read-syntax: missing `]` to close preceding\
    \ `[`, found instead `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660040444
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s) (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ozkmpd.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp50ozkmpd.rkt:32:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp50ozkmpd.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ozkmpd.rkt:34:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp50ozkmpd.rkt:35:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ozkmpd.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp50ozkmpd.rkt:37:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0) '()]\n    [(=\
    \ (length s) n) '()]\n    [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ssyhvi9.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0ssyhvi9.rkt:33:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ssyhvi9.rkt:34:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ssyhvi9.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ssyhvi9.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ssyhvi9.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ssyhvi9.rkt:38:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040386
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s)\n                (select_words (rest s) (sub1 n)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:33:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:35:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:36:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:37:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:38:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s)\n                (select_words (rest s) (sub1 n)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:33:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:35:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:36:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:37:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:38:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) n) (cons (first s)\
    \ (select_words (rest s) n))]\n    [else (cons (first s)\n                (select_words\
    \ (rest s) (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had a\
    \ little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"\
    simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0lxervt2.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0lxervt2.rkt:33:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0lxervt2.rkt:34:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0lxervt2.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0lxervt2.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0lxervt2.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0lxervt2.rkt:38:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040444
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0) '()]\n    [(=\
    \ (length s) n) '()]\n    [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ssyhvi9.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0ssyhvi9.rkt:33:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ssyhvi9.rkt:34:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ssyhvi9.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ssyhvi9.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ssyhvi9.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ssyhvi9.rkt:38:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040386
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s)\n                (select_words (rest s)\n                        \
    \    (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbun647u8.rkt:33:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpbun647u8.rkt:34:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpbun647u8.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbun647u8.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpbun647u8.rkt:37:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbun647u8.rkt:38:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpbun647u8.rkt:39:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s) (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ozkmpd.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp50ozkmpd.rkt:32:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp50ozkmpd.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ozkmpd.rkt:34:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp50ozkmpd.rkt:35:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ozkmpd.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp50ozkmpd.rkt:37:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) n) (cons s s)]\n\
    \    [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphr955t60.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmphr955t60.rkt:32:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphr955t60.rkt:33:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphr955t60.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphr955t60.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphr955t60.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphr955t60.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040445
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) n) (list s)]\n  \
    \  [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpxtnq_0cj.rkt:32:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:33:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtnq_0cj.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 1
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) (list ())]\n    [(= n 0) (list s)]\n    [else (cons (first s)\n\
    \                (select_words (rest s)\n                             (- n (length\
    \ s))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp95ajho4i.rkt:21:22: #%app: missing procedure expression;\n probably\
    \ originally (), which is an illegal empty application\n  in: (#%app)\n  location...:\n\
    \   /tmp/tmp95ajho4i.rkt:21:22\n"
  stdout: ''
  timestamp: 1660040445
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s)\n                (select_words (rest s) (sub1 n)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:33:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:35:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:36:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:37:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:38:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0) '()]\n    [else\
    \ (cons (first s)\n                (select_words (rest s) (sub1 n)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdji679i3.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpdji679i3.rkt:33:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdji679i3.rkt:34:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdji679i3.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdji679i3.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdji679i3.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdji679i3.rkt:38:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040386
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) n) '()]\n    [else\
    \ (cons (first s) (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyuri7jjl.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpyuri7jjl.rkt:32:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyuri7jjl.rkt:33:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyuri7jjl.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyuri7jjl.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyuri7jjl.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyuri7jjl.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) n) (list s)]\n  \
    \  [else (cons (first s)\n                (select_words (rest s) (sub1 n)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbh1dn18t.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpbh1dn18t.rkt:33:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbh1dn18t.rkt:34:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbh1dn18t.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbh1dn18t.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbh1dn18t.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbh1dn18t.rkt:38:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) n) (list s)]\n  \
    \  [else (cons (first s)\n                (select_words (rest s) (sub1 n)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbh1dn18t.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpbh1dn18t.rkt:33:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbh1dn18t.rkt:34:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbh1dn18t.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbh1dn18t.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbh1dn18t.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbh1dn18t.rkt:38:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) n) s]\n    [else\
    \ (cons (first s) (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplwvsia6z.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmplwvsia6z.rkt:32:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmplwvsia6z.rkt:33:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplwvsia6z.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplwvsia6z.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplwvsia6z.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplwvsia6z.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) (list)]\n    [(equal? (length s) n) (list s)]\n    [else (cons\
    \ (first s) (select_words (rest s) n))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnzit_ovz.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpnzit_ovz.rkt:31:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpnzit_ovz.rkt:32:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnzit_ovz.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnzit_ovz.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnzit_ovz.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnzit_ovz.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040386
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s)\n                (select_words (rest s) (sub1 n)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:33:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:35:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:36:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:37:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:38:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s)\n                (select_words (rest s)\n                        \
    \     (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpybcz_p5q.rkt:33:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpybcz_p5q.rkt:34:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpybcz_p5q.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpybcz_p5q.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpybcz_p5q.rkt:37:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpybcz_p5q.rkt:38:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpybcz_p5q.rkt:39:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s)\n                (select_words (rest s) (sub1 n)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:33:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:35:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:36:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:37:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:38:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 1
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) (list ())]\n    [(= n 0) (list s)]\n    [(= n 1) (list s)]\n\
    \    [else (cons (first s)\n                (select_words (rest s) (sub1 n)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp74ks83ik.rkt:21:22: #%app: missing procedure expression;\n probably\
    \ originally (), which is an illegal empty application\n  in: (#%app)\n  location...:\n\
    \   /tmp/tmp74ks83ik.rkt:21:22\n"
  stdout: ''
  timestamp: 1660040387
- exit_code: 1
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) (list ())]\n    [(equal? (length s) n) (list s)]\n    [else (cons\
    \ (first s)\n                (select_words (rest s) n))]\n    )\n  )\n)\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmpx93ls7tj.rkt:27:0: read-syntax: unexpected `)`\n  context...:\n\
    \   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660040444
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s) (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ozkmpd.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp50ozkmpd.rkt:32:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp50ozkmpd.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ozkmpd.rkt:34:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp50ozkmpd.rkt:35:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ozkmpd.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp50ozkmpd.rkt:37:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s)\n                (select_words (rest s)\n                        \
    \    (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbun647u8.rkt:33:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpbun647u8.rkt:34:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpbun647u8.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbun647u8.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpbun647u8.rkt:37:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbun647u8.rkt:38:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpbun647u8.rkt:39:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0) '()]\n    [(=\
    \ (length s) n) '()]\n    [else (cons (first s)\n                (select_words\
    \ (rest s)\n                             (sub1 n)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2vktseu4.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp2vktseu4.rkt:35:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2vktseu4.rkt:36:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2vktseu4.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2vktseu4.rkt:38:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2vktseu4.rkt:39:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2vktseu4.rkt:40:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040387
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) (list)]\n    [(= n 0) (list)]\n    [else (cons (first s)\n  \
    \              (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy2qql5qy.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpy2qql5qy.rkt:32:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpy2qql5qy.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy2qql5qy.rkt:34:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpy2qql5qy.rkt:35:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy2qql5qy.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpy2qql5qy.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040386
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0) '()]\n    [else\
    \ (cons (first s) (select_words (rest s) (sub1 n)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpfd38zu.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpcpfd38zu.rkt:32:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpfd38zu.rkt:33:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpfd38zu.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpfd38zu.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpfd38zu.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpfd38zu.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) (list)]\n    [(= n 0) (list)]\n    [(= n 1) (cons (first s) (select_words\
    \ (rest s) 0))]\n    [else (cons (first s)\n                (select_words (rest\
    \ s)\n                             (sub1 n)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxuo46i6s.rkt:33:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpxuo46i6s.rkt:34:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpxuo46i6s.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxuo46i6s.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpxuo46i6s.rkt:37:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxuo46i6s.rkt:38:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpxuo46i6s.rkt:39:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040387
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s)\n                (select_words (rest s) (sub1 n)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:33:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:35:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:36:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:37:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:38:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(equal? (length s) n) s]\n    [else (cons (first s)\
    \ (select_words (rest s) n))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmjoumz6r.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpmjoumz6r.rkt:31:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpmjoumz6r.rkt:32:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmjoumz6r.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmjoumz6r.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmjoumz6r.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmjoumz6r.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040386
- exit_code: 1
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) (list ())]\n    [(= n 0) (list s)]\n    [else (cons (first s)\n\
    \                (select_words (rest s)\n                            (sub1 n)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpfxi2c6v4.rkt:21:22: #%app: missing procedure expression;\n probably\
    \ originally (), which is an illegal empty application\n  in: (#%app)\n  location...:\n\
    \   /tmp/tmpfxi2c6v4.rkt:21:22\n"
  stdout: ''
  timestamp: 1660040445
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(equal? (length s) n) (list s)]\n    [else (cons (first\
    \ s)\n                (select_words (rest s)\n                            (sub1\
    \ n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp82_h9imi.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp82_h9imi.rkt:33:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp82_h9imi.rkt:34:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp82_h9imi.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp82_h9imi.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp82_h9imi.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp82_h9imi.rkt:38:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040445
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0) '()]\n    [(=\
    \ (length s) n) '()]\n    [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ssyhvi9.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0ssyhvi9.rkt:33:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ssyhvi9.rkt:34:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ssyhvi9.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ssyhvi9.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ssyhvi9.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ssyhvi9.rkt:38:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040386
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) n) (cons (first s)\
    \ (select_words (rest s) n))]\n    [else (cons (first s) (select_words (rest s)\
    \ (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate select_words))\n    (check-equal? (candidate \"Mary had a little lamb\"\
    \ 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\"\
    \ 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\"\
    \ 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"\
    ))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmgyyl04j.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpmgyyl04j.rkt:32:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpmgyyl04j.rkt:33:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmgyyl04j.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmgyyl04j.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmgyyl04j.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmgyyl04j.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 1
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) (list ())]\n    [(= n 0) (list s)]\n    [else (cons (first s)\n\
    \                (select_words (rest s)\n                             (sub1 n)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp4favoxba.rkt:21:22: #%app: missing procedure expression;\n probably\
    \ originally (), which is an illegal empty application\n  in: (#%app)\n  location...:\n\
    \   /tmp/tmp4favoxba.rkt:21:22\n"
  stdout: ''
  timestamp: 1660040445
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length s) 0) '()]\n    [else\
    \ (cons (first s)\n                (select_words (rest s) (sub1 n)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdji679i3.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpdji679i3.rkt:33:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"Mary had a little lamb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdji679i3.rkt:34:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdji679i3.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdji679i3.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdji679i3.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdji679i3.rkt:38:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040386
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s)\n                (select_words (rest s) (sub1 n)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:33:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:35:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:36:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:37:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:38:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [else (cons (first s) (select_words\
    \ (rest s) (sub1 n)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had a\
    \ little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"\
    simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3cxoxaer.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp3cxoxaer.rkt:31:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3cxoxaer.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3cxoxaer.rkt:33:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp3cxoxaer.rkt:34:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3cxoxaer.rkt:35:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3cxoxaer.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a b c d e f\"\n--------------------\n"
  stdout: ''
  timestamp: 1660040386
- exit_code: 0
  program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"\
    little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\"\
    \ \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>>\
    \ (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words\
    \ \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (cond\n\
    \    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= n 1) (list s)]\n    [else (cons\
    \ (first s)\n                (select_words (rest s) (sub1 n)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:33:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:35:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:36:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mdnf1z8.rkt:37:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp9mdnf1z8.rkt:38:4\nactual:     '(\"a b c d e f\")\nexpected:\
    \   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  stdout: ''
  timestamp: 1660040385
