name: HumanEval_144_simplify
language: rkt
prompt: "#lang racket\n\n;; Your task is to implement a function that will simplify\
  \ the expression\n;; x * n. The function returns True if x * n evaluates to a whole\
  \ number and False\n;; otherwise. Both x and n, are string representation of a fraction,\
  \ and have the following format,\n;; <numerator>/<denominator> where both numerator\
  \ and denominator are positive whole numbers.\n;; You can assume that x, and n are\
  \ valid fractions, and do not have zero as denominator.\n;; >>> (simplify \"1/5\"\
  \ \"5/1\")\n;; #t\n;; >>> (simplify \"1/6\" \"2/1\")\n;; #f\n;; >>> (simplify \"\
  7/10\" \"10/2\")\n;; #f\n(define (simplify x n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate simplify))\n\
  \    (check-equal? (candidate \"1/5\" \"5/1\") #t)\n    (check-equal? (candidate\
  \ \"1/6\" \"2/1\") #f)\n    (check-equal? (candidate \"5/1\" \"3/1\") #t)\n    (check-equal?\
  \ (candidate \"7/10\" \"10/2\") #f)\n    (check-equal? (candidate \"2/10\" \"50/10\"\
  ) #t)\n    (check-equal? (candidate \"7/2\" \"4/2\") #t)\n    (check-equal? (candidate\
  \ \"11/6\" \"6/1\") #t)\n    (check-equal? (candidate \"2/3\" \"5/2\") #f)\n   \
  \ (check-equal? (candidate \"5/2\" \"3/5\") #f)\n    (check-equal? (candidate \"\
  2/4\" \"8/4\") #t)\n    (check-equal? (candidate \"2/4\" \"4/2\") #t)\n    (check-equal?\
  \ (candidate \"1/5\" \"5/1\") #t)\n    (check-equal? (candidate \"1/5\" \"1/5\"\
  ) #f)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? n) #t]\n    [(equal? (first n) '()) #f]\n   \
    \ [(equal? (first n) '(0)) #f]\n    [(equal? (first n) '(1)) #t]\n    [(equal?\
    \ (first n) '(1/2)) #t]\n    [(equal? (first n) '(1/3)) (simplify (first n) (sub1\
    \ (first n)))]\n    [(equal? (first n) '(1/4)) (simplify (first n) (sub1 (first\
    \ n)))]\n    [(equal? (first n) '(1/5)) (simplify (first n) (sub1 (first n)))]\n\
    \    [(equal? (first n) '(1/6)) (simplify (first n) (sub1 (first n)))]\n    [(equal?\
    \ (first n) '(1/7)) (simplify (first n) (sub1 (first n)))]\n    [(equal? (first\
    \ n) '(1/8)) (simplify (first n) (sub1 (first n)))]\n    [(equal? (first n) '(1/9))\
    \ (simplify (first n) (sub1 (first n)))]\n    [(equal? (first n) '(1/10)) (simplify\
    \ (first n) (sub1 (first n)))]\n    [(equal? (first n) '(1/11)) (simplify (first\
    \ n) (sub1 (first n)))]\n    [(equal? (first n) '(1/12)) (simplify (first n) (sub1\
    \ (first n)))]\n    [(equal? (first n) '(1/13)) (simplify (first n) (sub1 (first\
    \ n)))]\n    [(equal? (first n) '(1/14)) (simplify (first n) (sub1 (first n)))]\n\
    \    [(equal? (first n) '(1/15)) (simplify (first n) (sub1 (first n)))]\n    [(equal?\
    \ (first n) '(1/16)) (simplify (first n) (sub1 (first n)))]\n    [(equal? (first\
    \ n) '(1/17)) (simplify (first n) (sub1 (first n)))]\n    [(equal? (first n) '(1/18))\
    \ (simplify (first n) (sub1 (first n)))]\n    [(equal? (first n) '(1/19)) (simplify\
    \ (first n) (sub1 (first n)))]\n    [(equal? (first n) '(1/20)) (simplify (first\
    \ n) (sub1 (first ", "  (cond\n    [(number? x) (equal? x n)]\n    [(equal? (string->number\
    \ x) (string->number n)) (equal? (string->number x) (string->number n))]\n   \
    \ [(equal? (string->number x) (string->number n)) (equal? (string->number n) (string->number\
    \ x))]\n    [else (equal? (string->number n) (string->number x))]\n  ))\n", " \
    \ (cond\n    [(and (number? x) (number? n)) (= (/ x n) 1)]\n    [(and (number?\
    \ x) (number? n)) (= (/ x n) 0)]\n    [(and (number? x) (number? n)) (= (/ x n)\
    \ -1)]\n    [(and (number? x) (number? n)) (= (/ x n) -2)]\n    [(and (number?\
    \ x) (number? n)) (= (/ x n) -3)]\n    [(and (number? x) (number? n)) (= (/ x\
    \ n) -4)]\n    [(and (number? x) (number? n)) (= (/ x n) -5)]\n    [(and (number?\
    \ x) (number? n)) (= (/ x n) -6)]\n    [(and (number? x) (number? n)) (= (/ x\
    \ n) -7)]\n    [(and (number? x) (number? n)) (= (/ x n) -8)]\n    [(and (number?\
    \ x) (number? n)) (= (/ x n) -9)]\n    [(and (number? x) (number? n)) (= (/ x\
    \ n) -10)]\n    [(and (number? x) (number? n)) (= (/ x n) -11)]\n    [(and (number?\
    \ x) (number? n)) (= (/ x n) -12)]\n    [(and (number? x) (number? n)) (= (/ x\
    \ n) -13)]\n    [(and (number? x) (number? n)) (= (/ x n) -14)]\n    [(and (number?\
    \ x) (number? n)) (= (/ x n) -15)]\n    [(and (number? x) (number? n)) (= (/ x\
    \ n) -16)]\n    [(and (number? x) (number? n)) (= (/ x n) -17)]\n    [(and (number?\
    \ x) (number? n)) (= (/ x n) -18)]\n    [(and (number? x) (number? n)) (= (/ x\
    \ n) -19)]\n    [(and (number? x) (number? n)) (= (/ x n) -20)]\n    [(and (number?\
    \ x) (number? n)) (= (/ x n) -21)]\n    [(and (number? x) (number? n)) (= (/ x\
    \ n) -22)]\n    [(and (number? ", "  (cond\n    [(number? x) (equal? x n)]\n \
    \   [(equal? (string-ref x 0) \"/\") (equal? (string-ref n 0) \"/\")]\n    [(equal?\
    \ (string-ref x 0) \"-\") (equal? (string-ref n 0) \"-\")]\n    [(equal? (string-ref\
    \ x 0) \"+\") (equal? (string-ref n 0) \"+\")]\n    [else (equal? (string-ref\
    \ x 0) \"*\") (equal? (string-ref n 0) \"*\")]))\n", "  (cond\n    [(empty? n)\
    \ true]\n    [(equal? (first n) '()) false]\n    [(equal? (first n) '(0)) false]\n\
    \    [(equal? (first n) '(1)) true]\n    [else (cond\n             [(equal? (first\
    \ n) '(0)) false]\n             [(equal? (first n) '(1)) (simplify (sub1 (first\
    \ n)) (sub1 (rest n)))]\n             [else (cond\n                     [(equal?\
    \ (first n) '(0)) false]\n                     [(equal? (first n) '(1)) (simplify\
    \ (sub1 (first n)) (sub1 (rest n)))]\n                     [else (cond\n     \
    \                        [(equal? (first n) '(0)) false]\n                   \
    \          [(equal? (first n) '(1)) (simplify (sub1 (first n)) (sub1 (rest n)))]\n\
    \                             [else (cond\n                                  \
    \   [(equal? (first n) '(0)) false]\n                                     [(equal?\
    \ (first n) '(1)) (simplify (sub1 (first n)) (sub1 (rest n)))]\n             \
    \                        [else (cond\n                                       \
    \      [(equal? (first n) '(0)) false]\n                                     \
    \        [(equal? (first n) '(1)) (simplify (sub1 (first n)) (sub1 (rest n)))]\n\
    \                                             [else (cond\n                  \
    \                                   [(equal? (first n) '(0)) false]\n        \
    \                                             [(equal? (first n) '(1)) (simplify\
    \ (sub1 (first n)) (sub1 (rest n)))]\n                                       \
    \              [else (cond\n                                                 \
    \            [(equal? (first n) '(0)) false]\n                               \
    \                              [(equal? (first n) '(1)) (simplify (sub1 (first\
    \ n)) (sub1 (rest n)))]\n                                                    \
    \         [else (cond\n                                                      \
    \               [(equal? (first n) '(0)) false]\n                            \
    \                                         [(equal? (first n) '(1)) (simplify (sub1\
    \ (first n)) (sub1 (rest n)))]\n                                             \
    \                        [else (cond\n                                       \
    \                                    [(equal? (first n) '(0)) false]\n       \
    \                                                                    [(equal?\
    \ (first n) '(1)) (simplify (sub1 (first n)) (sub1 (rest n)))]\n             \
    \                                                              [else (cond\n \
    \                                                                            \
    \      [(equal? (first n) '(0)) false]\n                                     \
    \                                              [(equal? (first n) '(1)) (simplify\
    \ (sub1 (first n)) (sub1 (rest n)))]\n                                       \
    \                                            [else (cond\n                   \
    \                                                                        [(equal?\
    \ (first n", "  (cond\n    [(number? x) (number? n)]\n    [(number? n) (number?\
    \ x)]\n    [(equal? x n) #t]\n    [(equal? n x) #f]\n    [(equal? (string->number\
    \ x) (string->number n)) (equal? (string->number n) (string->number x))]\n   \
    \ [(equal? (string->number n) (string->number x)) (equal? (string->number x) (string->number\
    \ n))]\n    [else (simplify (quotient x n) (quotient n x))]\n  )\n)\n", "  (cond\n\
    \    [(equal? x \"0\") (equal? n \"0\") true]\n    [(equal? x \"1\") (equal? n\
    \ \"1\") true]\n    [(equal? x \"-1\") (equal? n \"-1\") true]\n    [(equal? x\
    \ \"1/0\") (equal? n \"1/0\") true]\n    [(equal? x \"1/1\") (equal? n \"1/1\"\
    ) true]\n    [(equal? x \"-1/1\") (equal? n \"-1/1\") true]\n    [(equal? x \"\
    -1/0\") (equal? n \"-1/0\") true]\n    [(equal? x \"-1/-1\") (equal? n \"-1/-1\"\
    ) true]\n    [else (and (equal? (string-length x) (string-length n)) (equal? (string-ref\
    \ x 0) (string-ref n 0)))]\n  )\n)\n", "  (cond\n    [(number? x) (number? n)]\n\
    \    [(number? n) (number? x)]\n    [(zero? n) (zero? x)]\n    [(zero? x) (zero?\
    \ n)]\n    [(equal? (string-length x) (string-length n)) (equal? (string-length\
    \ n) (string-length x))]\n    [(equal? (string-length n) (string-length x)) (equal?\
    \ (string-length x) (string-length n))]\n    [else (equal? (string-length x) (string-length\
    \ n))]\n  )\n)\n", "  (cond\n    [(empty? n) #t]\n    [(equal? (first n) '())\
    \ #t]\n    [(equal? (first n) '(())) #t]\n    [(equal? (first n) '(()())) #t]\n\
    \    [(equal? (first n) '(()())(())) #t]\n    [(equal? (first n) '(()())(()()))\
    \ #t]\n    [(equal? (first n) '(()())(()())(())) #t]\n    [(equal? (first n) '(()())(()())(()())(()))\
    \ #t]\n    [(equal? (first n) '(()())(()())(()())(()())(())) #t]\n    [(equal?\
    \ (first n) '(()())(()())(()())(()())(()())(())) #t]\n    [(equal? (first n) '(()())(()())(()())(()())(()())(()())(()))\
    \ #t]\n    [(equal? (first n) '(()())(()())(()())(()())(()())(()())(()())(()))\
    \ #t]\n    [(equal? (first n) '(()())(()())(()())(()())(()())(()())(()())(()())(()))\
    \ #t]\n    [(equal? (first n) '(()())(()())(()())(()())(()())(()())(()())(()())(()())(()))\
    \ #t]\n    [(equal? (first n) '(()())(()())(()())(()())(()())(()())(()())(()())(()())(()())(()))\
    \ #t]\n    [(equal? (first n) '(()())(()())(()())(()())(()())(()())(()())(()())(()())(()())(()())(()))\
    \ #t]\n    [(equal? (first n) '(()())(()())(()())(()())(()())(()())(()())(()())(()())(()())(()())(()())(()))\
    \ #t]\n    [(equal? (first n) '(()())(()())(()())(()())(()())(()())(()())(()())(()())(()())",
  "  (cond\n    [(number? x) (number? n)]\n    [(zero? n) false]\n    [(zero? x) false]\n\
    \    [else (= (length x) 1) (= (length n) 1) (= (substring x 0 1) \"/\") (= (substring\
    \ n 0 1) \"/\")]\n    [else (= (length x) 1) (= (length n) 1) (= (substring x\
    \ 0 1) \"/\") (= (substring n 0 1) \"*\")]\n    [else (= (length x) 1) (= (length\
    \ n) 1) (= (substring x 0 1) \"*\") (= (substring n 0 1) \"/\")]\n    [else (=\
    \ (length x) 1) (= (length n) 1) (= (substring x 0 1) \"*\") (= (substring n 0\
    \ 1) \"*\")]\n    [else (= (length x) 1) (= (length n) 1) (= (substring x 0 1)\
    \ \"*\") (= (substring n 0 1) \"*\")]\n    [else (= (length x) 1) (= (length n)\
    \ 1) (= (substring x 0 1) \"*\") (= (substring n 0 1) \"*\")]\n    [else (= (length\
    \ x) 1) (= (length n) 1) (= (substring x 0 1) \"*\") (= (substring n 0 1) \"*\"\
    )]\n    [else (= (length x) 1) (= (length n) 1) (= (substring x 0 1) \"*\") (=\
    \ (substring n 0 1) \"*\")]\n    [else (= (length x) 1) (= (length n) 1) (= (substring\
    \ x 0 1) \"*\") (= (substring n 0 1) \"*\")]\n    [else (= (length x) 1) (= (length\
    \ n) 1) (= (substring x 0 1) \"*\") (= (substring n 0 1) \"*\")]\n    [else (=\
    \ (length x) 1) (= (length n) 1) (= (substring x 0 1) \"*\") (= (substring n 0\
    \ 1) \"*\")]\n    [else (= (length x) 1) (= (length n) 1) (= (substring x 0 1)\
    \ \"*\") (= (substring n 0 1) \"*\")]\n    [else (= (length x) 1) (= (length n)\
    \ 1) (= (substring x 0 1) \"*\") (= (", "  (cond\n    [(empty? n) #t]\n    [(equal?\
    \ (first n) '()) #f]\n    [(equal? (first n) '(0)) #f]\n    [(equal? (first n)\
    \ '(1)) #t]\n    [(equal? (first n) '(2)) #t]\n    [(equal? (first n) '(7)) (equal?\
    \ (first n) '(10)) (equal? (first n) '(11)) (equal? (first n) '(12)) (equal? (first\
    \ n) '(13)) (equal? (first n) '(14)) (equal? (first n) '(15)) (equal? (first n)\
    \ '(16)) (equal? (first n) '(17)) (equal? (first n) '(18)) (equal? (first n) '(19))\
    \ (equal? (first n) '(20)) (equal? (first n) '(21)) ]\n    [(equal? (first n)\
    \ '(7)) (equal? (first n) '(10)) (equal? (first n) '(11)) (equal? (first n) '(12))\
    \ (equal? (first n) '(13)) (equal? (first n) '(14)) (equal? (first n) '(15)) (equal?\
    \ (first n) '(16)) (equal? (first n) '(17)) (equal? (first n) '(18)) (equal? (first\
    \ n) '(19)) (equal? (first n) '(20)) (equal? (first n) '(21)) ]\n    [(equal?\
    \ (first n) '(7)) (equal? (first n) '(10)) (equal? (first n) '(11)) (equal? (first\
    \ n) '(12)) (equal? (first n) '(13)) (equal? (first n) '(14)) (equal? (first n)\
    \ '(15)) (equal? (first n) '(16)) (equal? (first n) '(17)) (equal? (first n) '(18))\
    \ (equal? (first n) '(19)) (equal? (first n) '(20)) (equal? (first n) '(21)) ]\n\
    \    [(equal? (first n) '(7)) (equal? (first n) '(10)) (equal? (first n) '(11))\
    \ (equal? (first n) '(12)) (equal? (first n) '(", "  (cond\n    [(number? x) (number?\
    \ n)]\n    [(zero? n) false]\n    [(zero? x) false]\n    [else (= (length x) 1)\
    \ (= (length n) 1) (= (substring x 0 1) \"/\") (= (substring n 0 1) \"/\")]\n\
    \    [else (= (substring x 0 1) \"/\") (= (substring n 0 1) \"/\") (= (substring\
    \ x 1 length (substring x 0 1)) \"/\") (= (substring n 1 length (substring n 0\
    \ 1)) \"/\")]\n    [else (= (substring x 0 1) \"/\") (= (substring n 0 1) \"/\"\
    ) (= (substring x 1 length (substring x 0 1)) \"/\") (= (substring n 1 length\
    \ (substring n 0 1)) \"/\") (= (substring x 0 length (substring x 1 length (substring\
    \ x 0 1))) \"/\") (= (substring n 0 length (substring n 1 length (substring n\
    \ 0 1))) \"/\")]\n    [else (= (substring x 0 1) \"/\") (= (substring n 0 1) \"\
    /\") (= (substring x 1 length (substring x 0 1)) \"/\") (= (substring n 1 length\
    \ (substring n 0 1)) \"/\") (= (substring x 0 length (substring x 1 length (substring\
    \ x 0 1))) \"/\") (= (substring n 0 length (substring n 1 length (substring n\
    \ 0 1))) \"/\") (= (substring x 0 length (substring x 1 length (substring x 0\
    \ 1))) \"/\") (= (substring n 0 length (substring n 1 length (substring n 0 1)))\
    \ \"/\") (= (substring x 0 length (substring x 1 length (substring x 0 1))) \"\
    /\") (= (substring n 0 length (substring n 1 length (substring n 0 1))) \"/\"\
    ) (= (substring x 0 length (substring x 1 length (substring x 0 1))) \"/\") (=\
    \ (substring n 0 length (substring n 1 length (substring n 0 1))) \"/\") (= (substring\
    \ x 0 length (substring x 1 length (substring x 0 1))) \"/\") (= (substring n\
    \ 0 length (substring n 1 length (substring n 0 1))) \"/\") (= (substring ", " \
    \ (cond\n    [(equal? n \"\") true]\n    [(equal? n \"0\") true]\n    [(equal?\
    \ n \"1\") true]\n    [else (equal? (string-match \"^[0-9]+/[0-9]+$\" x) true)\n\
    \           (string-match \"^[0-9]+/[0-9]+$\" n)\n           (string-match \"\
    ^[0-9]+/[0-9]+$\" x)\n           (string-match \"^[0-9]+/[0-9]+$\" n)\n      \
    \     (string-match \"^[0-9]+/[0-9]+$\" x)\n           (string-match \"^[0-9]+/[0-9]+$\"\
    \ n)\n           (string-match \"^[0-9]+/[0-9]+$\" x)\n           (string-match\
    \ \"^[0-9]+/[0-9]+$\" n)\n           (string-match \"^[0-9]+/[0-9]+$\" x)\n  \
    \         (string-match \"^[0-9]+/[0-9]+$\" n)\n           (string-match \"^[0-9]+/[0-9]+$\"\
    \ x)\n           (string-match \"^[0-9]+/[0-9]+$\" n)\n           (string-match\
    \ \"^[0-9]+/[0-9]+$\" x)\n           (string-match \"^[0-9]+/[0-9]+$\" n)\n  \
    \         (string-match \"^[0-9]+/[0-9]+$\" x)\n           (string-match \"^[0-9]+/[0-9]+$\"\
    \ n)\n           (string-match \"^[0-9]+/[0-9]+$\" x)\n           (string-match\
    \ \"^[0-9]+/[0-9]+$\" n)\n           (string-match \"^[0-9]+/[0-9]+$\" x)\n  \
    \         (string-match \"^[0-9]+/[0-9]+$\" n)\n           (string-match \"^[0-9]+/[0-9]+$\"\
    \ x)\n           (string-match \"^[0-9]+/[0-9]+$\" n)\n           (string-match\
    \ \"^[0-9]+/[0-9]+$\" x)\n           (string-match \"^[0-9]+/[0-9]+$\" n)\n  \
    \         (string-match \"^[0-9]+/[0-9]+$\" x)\n           (string-match \"^[0-9]+/[0-9]+$\"\
    \ n)\n           (string-match \"^[0-9]+/[0-9]+$\" x)\n           (string-match\
    \ \"^[0-9]+/[0-9]+$\" n)\n           (string-match \"^[0-9]+/[0-9]+$\" x)\n  \
    \         (string-match \"^[0-9]+/[0-9]+$\" n)\n           (string-match \"^[0-9]+/[0-9]+$\"\
    \ x)\n           (string-match \"^[0-9]+/[0-9]+$\" n)\n           (string-match\
    \ \"^[0-9]+/[0-9]+$\" x)\n           (string-match \"^[0-9]+/[0-9]+$\" n)\n  \
    \         (string-match \"^[0-9]+/[0-9]+$\" x)\n           (string-match \"^[0-9]+/[0-9]+$\"\
    \ n)\n           (string-match \"^[0-9]+/[0-9]+$\" x)\n           (string-match\
    \ \"^[0-9]+/[0-9]+$\" n)\n           (string-match \"^[0-9]+/[0-9]+$\" x)\n  \
    \         (string-match \"", "  (cond\n    [(and (number? x) (number? n)) (= (/\
    \ x n) 1)]\n    [(and (number? x) (number? n)) (= (/ x n) 0)]\n    [(and (number?\
    \ x) (number? n)) (= (/ x n) -1)]\n    [(and (number? x) (number? n)) (= (/ x\
    \ n) -2)]\n    [(and (number? x) (number? n)) (= (/ x n) -3)]\n    [(and (number?\
    \ x) (number? n)) (= (/ x n) -4)]\n    [(and (number? x) (number? n)) (= (/ x\
    \ n) -5)]\n    [(and (number? x) (number? n)) (= (/ x n) -6)]\n    [(and (number?\
    \ x) (number? n)) (= (/ x n) -7)]\n    [(and (number? x) (number? n)) (= (/ x\
    \ n) -8)]\n    [(and (number? x) (number? n)) (= (/ x n) -9)]\n    [(and (number?\
    \ x) (number? n)) (= (/ x n) -10)]\n    [(and (number? x) (number? n)) (= (/ x\
    \ n) -11)]\n    [(and (number? x) (number? n)) (= (/ x n) -12)]\n    [(and (number?\
    \ x) (number? n)) (= (/ x n) -13)]\n    [(and (number? x) (number? n)) (= (/ x\
    \ n) -14)]\n    [(and (number? x) (number? n)) (= (/ x n) -15)]\n    [(and (number?\
    \ x) (number? n)) (= (/ x n) -16)]\n    [(and (number? x) (number? n)) (= (/ x\
    \ n) -17)]\n    [(and (number? x) (number? n)) (= (/ x n) -18)]\n    [(and (number?\
    \ x) (number? n)) (= (/ x n) -19)]\n    [(and (number? x) (number? n)) (= (/ x\
    \ n) -20)]\n    [(and (number? x) (number? n)) (= (/ x n) -21)]\n    [(and (number?\
    \ x) (number? n)) (= (/ x n) -22)]\n    [(and (number? ", "  (cond\n    [(number?\
    \ x) (equal? x n)]\n    [(equal? (string-ref x 0) \"/\") (equal? (string-ref n\
    \ 0) \"/\")]\n    [(equal? (string-ref x 0) \"-\") (equal? (string-ref n 0) \"\
    -\")]\n    [(equal? (string-ref x 0) \"+\") (equal? (string-ref n 0) \"+\")]\n\
    \    [else (equal? (string-ref x 0) \"*\") (equal? (string-ref n 0) \"*\")]))\n",
  "  (cond\n    [(number? x) (number? n)]\n    [(zero? n) false]\n    [else (and (simplify\
    \ (quotient x n) (quotient n x))\n               (simplify (quotient x n) (quotient\
    \ n n)))]))\n", "  (cond\n    [(number? x) (number? n)]\n    [(zero? n) false]\n\
    \    [(zero? x) false]\n    [else (= (length x) 1)\n          (= (length n) 1)\n\
    \          (= (substring x 0 1) \"/\")\n          (= (substring n 0 1) \"/\")\n\
    \          (= (substring x 1 length) n)\n          (= (substring n 1 length) x)\n\
    \          (= (substring x 0 1) (substring n 0 1))\n          (= (substring x\
    \ 1 length) (substring n 1 length))\n          (= (substring n 0 1) (substring\
    \ x 0 1))\n          (= (substring n 1 length) (substring x 1 length))\n     \
    \     (= (substring x 0 1) (substring n 1 length))\n          (= (substring x\
    \ 1 length) (substring n 0 1))\n          (= (substring x 1 length) (substring\
    \ n 1 length))\n          (= (substring n 0 1) (substring x 1 length))\n     \
    \     (= (substring n 1 length) (substring x 0 1))\n          (= (substring x\
    \ 0 1) (substring n 0 1))\n          (= (substring x 1 length) (substring n 1\
    \ length))\n          (= (substring x 0 1) (substring n 1 length))\n         \
    \ (= (substring x 1 length) (substring n 0 1))\n          (= (substring x 1 length)\
    \ (substring n 1 length))\n          (= (substring n 0 1) (substring x 1 length))\n\
    \          (= (substring n 1 length) (substring x 0 1))\n          (= (substring\
    \ n 1 length) (substring x 1 length))\n          (= (substring x 0 1) (substring\
    \ n 1 length))\n          (= (substring x 1 length) (substring n 0 1))\n     \
    \     (= (substring x 1 length) (substring n 1 length))\n          (= (substring\
    \ n 0 1) (substring x 1 length))\n          (= (substring n 1 length) (substring\
    \ x 0 1))\n          (= (substring n 1 length) (substring x 1 length))\n     \
    \     (= (substring x 0 1) (substring n 1 length))\n          (= (substring x\
    \ 1 length) (substring n 0 1))\n", "  (cond\n    [(and (number? x) (number? n))\
    \ (= (/ x n) 1)]\n    [(and (number? x) (number? n)) (= (/ x n) 0)]\n    [(and\
    \ (number? x) (number? n)) (= (/ x n) -1)]\n    [(and (number? x) (number? n))\
    \ (= (/ x n) -2)]\n    [(and (number? x) (number? n)) (= (/ x n) -3)]\n    [(and\
    \ (number? x) (number? n)) (= (/ x n) -4)]\n    [(and (number? x) (number? n))\
    \ (= (/ x n) -5)]\n    [(and (number? x) (number? n)) (= (/ x n) -6)]\n    [(and\
    \ (number? x) (number? n)) (= (/ x n) -7)]\n    [(and (number? x) (number? n))\
    \ (= (/ x n) -8)]\n    [(and (number? x) (number? n)) (= (/ x n) -9)]\n    [(and\
    \ (number? x) (number? n)) (= (/ x n) -10)]\n    [(and (number? x) (number? n))\
    \ (= (/ x n) -11)]\n    [(and (number? x) (number? n)) (= (/ x n) -12)]\n    [(and\
    \ (number? x) (number? n)) (= (/ x n) -13)]\n    [(and (number? x) (number? n))\
    \ (= (/ x n) -14)]\n    [(and (number? x) (number? n)) (= (/ x n) -15)]\n    [(and\
    \ (number? x) (number? n)) (= (/ x n) -16)]\n    [(and (number? x) (number? n))\
    \ (= (/ x n) -17)]\n    [(and (number? x) (number? n)) (= (/ x n) -18)]\n    [(and\
    \ (number? x) (number? n)) (= (/ x n) -19)]\n    [(and (number? x) (number? n))\
    \ (= (/ x n) -20)]\n    [(and (number? x) (number? n)) (= (/ x n) -21)]\n    [(and\
    \ (number? x) (number? n)) (= (/ x n) -22)]\n    [(and (number? ", "  (cond\n\
    \    [(number? x) (= x n)]\n    [(number? n) (= n 0)]\n    [(zero? (string->number\
    \ x))\n     (= (string->number x) (string->number n))]\n    [else (= (string->number\
    \ x) (string->number n)) (simplify (string->number x) (string->number n))]))\n",
  "  (cond\n    [(empty? n) #t]\n    [(equal? (first n) '#t) (simplify x (rest n))]\n\
    \    [(equal? (first n) '#f)\n     (cond\n       [(empty? (rest n)) #t]\n    \
    \   [(equal? (first n) '#t) (simplify x (rest n))]\n       [(equal? (first n)\
    \ '#f) (simplify x (rest n))]\n       [else (simplify x (rest n))]\n       )])\n\
    \    [else (simplify x (rest n))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
