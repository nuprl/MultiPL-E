name: HumanEval_138_is_equal_to_sum_even
language: rkt
prompt: "#lang racket\n\n;; Evaluate whether the given number n can be written as\
  \ the sum of exactly 4 positive even numbers\n;; Example\n;; >>> (is_equal_to_sum_even\
  \ 4)\n;; #f\n;; >>> (is_equal_to_sum_even 6)\n;; #f\n;; >>> (is_equal_to_sum_even\
  \ 8)\n;; #t\n(define (is_equal_to_sum_even n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_equal_to_sum_even))\n\
  \    (check-equal? (candidate 4) #f)\n    (check-equal? (candidate 6) #f)\n    (check-equal?\
  \ (candidate 8) #t)\n    (check-equal? (candidate 10) #t)\n    (check-equal? (candidate\
  \ 11) #f)\n    (check-equal? (candidate 12) #t)\n    (check-equal? (candidate 13)\
  \ #f)\n    (check-equal? (candidate 16) #t)\n))\n\n(test-humaneval)"
completions: ["  (= (modulo n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo\
    \ (+ n 1) 4) (modulo (+ n 2) 4) (modulo (+ n 3) 4) (modulo (+ n 4) 4)))\n", " \
    \ (= (modulo n 4) 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo n 4) 0))\n",
  "  (= (modulo n 4) (modulo (+ n 1) 4)))\n", "  (= (modulo (+ n 1) 4) (modulo (+\
    \ n 2) 4) (modulo (+ n 3) 4) (modulo (+ n 4) 4)))\n", "  (= (modulo (+ n 2) 4)\
    \ 0))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo n 4) (modulo (+ n 1) 4)))\n",
  "  (= (modulo n 4) (modulo n 4)))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo (+\
    \ n 1) 4)\n     (modulo (+ n 2) 4)\n     (modulo (+ n 3) 4)\n     (modulo (+ n\
    \ 4) 4)))\n", "  (= (modulo (+ n 1) 4)\n     (modulo (+ n 2) 4)\n     (modulo\
    \ (+ n 3) 4)\n     (modulo (+ n 4) 4)))\n", "  (= (modulo (+ n 2) 4) (modulo (+\
    \ n 3) 4) (modulo (+ n 5) 4) (modulo (+ n 7) 4)))\n", "  (= (modulo n 4) 0))\n",
  "  (= (modulo n 4) (modulo n 2)))\n", "  (= (modulo n 4) 0))\n", "  (= (modulo n\
    \ 4) 0))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
