name: HumanEval_20_find_closest_elements
language: rkt
prompt: "#lang racket\n\n;; From a supplied list of numbers (of length at least two)\
  \ select and return two that are the closest to each\n;; other and return them in\
  \ order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0\
  \ 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list\
  \ 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)\n(define (find_closest_elements numbers)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_closest_elements))\n\
  \    (check-equal? (candidate (list 1.0 2.0 3.9 4.0 5.0 2.2)) (list 3.9 4.0))\n\
  \    (check-equal? (candidate (list 1.0 2.0 5.9 4.0 5.0)) (list 5.0 5.9))\n    (check-equal?\
  \ (candidate (list 1.0 2.0 3.0 4.0 5.0 2.2)) (list 2.0 2.2))\n    (check-equal?\
  \ (candidate (list 1.0 2.0 3.0 4.0 5.0 2.0)) (list 2.0 2.0))\n    (check-equal?\
  \ (candidate (list 1.1 2.2 3.1 4.1 5.1)) (list 2.2 3.1))\n))\n\n(test-humaneval)"
completions: ["  (let ((min (first numbers))\n        (max (second numbers)))\n  \
    \  (if (null? numbers)\n        (list min max)\n        (let ((diff (abs (- min\
    \ max))))\n          (if (< diff (abs (- max min)))\n              (list min max)\n\
    \              (list min (+ max diff)))))))\n", "  (let ((smallest (car numbers))\n\
    \        (largest (car numbers)))\n    (if (null? numbers)\n        (list smallest\
    \ largest)\n        (let ((smallest (min smallest largest))\n              (largest\
    \ (max smallest largest)))\n          (cons (list smallest largest) (find_closest_elements\
    \ (rest numbers)))))))\n", "  (let ((min (first numbers))\n        (max (second\
    \ numbers)))\n    (cond\n      [(< min max (find_closest_elements rest))\n   \
    \    (list min max)]\n      [(< min max)\n       (list min max)]\n      [(> min\
    \ max)\n       (list min max)]\n      [else\n       (find_closest_elements (rest\
    \ numbers))])))\n", "  (let ((smallest (car numbers))\n        (largest (car numbers)))\n\
    \    (if (null? (cdr numbers))\n        (list smallest largest)\n        (let\
    \ ((smallest (car numbers))\n              (largest (car numbers)))\n        \
    \  (if (< (car numbers) largest)\n              (find_closest_elements (cdr numbers))\n\
    \              (find_closest_elements (cdr numbers))))))))\n", "  (define (helper\
    \ numbers smallest)\n    (cond [(null? numbers) (list smallest smallest)]\n  \
    \        [(< (car numbers) smallest) (helper (cdr numbers) smallest)]\n      \
    \    [else (helper (cdr numbers) (car numbers))]))\n  (helper numbers numbers))\n",
  "  (let ((smallest (first numbers))\n        (largest (first numbers)))\n    (if\
    \ (null? numbers)\n        (list smallest largest)\n        (let ((smallest (first\
    \ numbers))\n              (largest (first numbers)))\n          (if (< (first\
    \ numbers) largest)\n              (find_closest_elements (rest numbers))\n  \
    \            (find_closest_elements (rest numbers))))))))\n", "  (let ((smallest\
    \ (car numbers))\n        (largest (car numbers)))\n    (if (null? numbers)\n\
    \        (list smallest largest)\n        (let ((smallest (min smallest largest))\n\
    \              (largest (max smallest largest)))\n          (if (< (abs (- smallest\
    \ largest)) (abs (- largest smallest)))\n              (list smallest largest)\n\
    \              (list largest smallest)))))\n", "  (let ((smallest (car numbers))\n\
    \        (largest (car numbers)))\n    (if (null? numbers)\n        (list smallest\
    \ largest)\n        (let ((smallest (car numbers))\n              (largest (car\
    \ numbers)))\n          (if (< (abs (- smallest largest)) (abs (- largest smallest)))\n\
    \              (find_closest_elements (cdr numbers))\n              (find_closest_elements\
    \ (cdr numbers))))))))\n", "  (define (helper numbers smallest-number largest-number)\n\
    \    (cond [(empty? numbers) (list smallest-number largest-number)]\n        \
    \  [(< (first numbers) smallest-number) \n           (helper (rest numbers) smallest-number\
    \ (first numbers))]\n          [(> (first numbers) largest-number) \n        \
    \   (helper (rest numbers) (first numbers) largest-number)]\n          [else (helper\
    \ (rest numbers) (first numbers) (first numbers))]))\n  (helper numbers #f #f))\n",
  "  (let ((smallest (car numbers))\n        (largest (car numbers)))\n    (if (null?\
    \ (cdr numbers))\n        (list smallest largest)\n        (let ((smallest (car\
    \ numbers))\n              (largest (car numbers)))\n          (if (< (car numbers)\
    \ largest)\n              (find_closest_elements (cdr numbers))\n            \
    \  (find_closest_elements (cdr (cdr numbers)))))))\n  ;; <<< #lang racket\n",
  "  (define (helper numbers smallest)\n    (cond\n      [(null? numbers) (list smallest\
    \ smallest)]\n      [(< (first numbers) smallest) (helper (rest numbers) smallest)]\n\
    \      [else (helper (rest numbers) (first numbers))]))\n  (helper numbers numbers))\n",
  "  (define (helper numbers result smallest)\n    (cond [(null? numbers) (list smallest\
    \ smallest)]\n          [(< (car numbers) smallest) (helper (cdr numbers) (cons\
    \ (car numbers) result) smallest)]\n          [else (helper (cdr numbers) (cons\
    \ (car numbers) result) (car numbers))]))\n  (helper numbers nil (car numbers)))\n",
  "  (let ((smallest (car numbers))\n        (largest (car numbers)))\n    (if (null?\
    \ numbers)\n        (list smallest largest)\n        (let ((smallest (min smallest\
    \ largest))\n              (largest (max smallest largest)))\n          (if (<\
    \ smallest largest)\n              (list smallest largest)\n              (list\
    \ smallest largest))))))\n", "  (let ((smallest (car numbers))\n        (largest\
    \ (car numbers)))\n    (if (null? numbers)\n        (list smallest largest)\n\
    \        (let ((smallest (min smallest largest))\n              (largest (max\
    \ smallest largest)))\n          (if (< smallest largest)\n              (list\
    \ smallest largest)\n              (list largest smallest)))))\n  ;; This should\
    \ never be reached\n  (error \"find_closest_elements: bad input\"))\n", "  (let\
    \ ((smallest (car numbers))\n        (largest (car numbers)))\n    (if (null?\
    \ numbers)\n        (list smallest largest)\n        (let ((smallest-index (find-index\
    \ (lambda (x) (< x smallest)) numbers))\n              (largest-index (find-index\
    \ (lambda (x) (< x largest)) numbers)))\n          (if (< smallest-index largest-index)\n\
    \              (list smallest largest)\n              (list largest smallest)))))\n\
    \  )\n", "  (let ((min (first numbers))\n        (max (second numbers)))\n   \
    \ (if (null? numbers)\n        (list min max)\n        (let ((diff (abs (- min\
    \ max))))\n          (if (< diff (abs (- max min)))\n              (list min max)\n\
    \              (find_closest_elements (rest numbers)))))))\n", "  (let ((smallest\
    \ (car numbers))\n        (largest (car numbers)))\n    (if (null? numbers)\n\
    \        (list smallest largest)\n        (let ((smallest (car numbers))\n   \
    \           (largest (car numbers)))\n          (if (< (car numbers) largest)\n\
    \              (find_closest_elements (cdr numbers))\n              (find_closest_elements\
    \ (cdr numbers)))))))\n", "  (let ((smallest (car numbers))\n        (largest\
    \ (car numbers)))\n    (if (null? numbers)\n        (list smallest largest)\n\
    \        (let ((smallest (min smallest largest))\n               (largest (max\
    \ smallest largest)))\n          (if (< smallest largest)\n              (list\
    \ smallest largest)\n              (list smallest largest))))))\n", "  (let ((smallest\
    \ (first numbers))\n        (largest (first numbers)))\n    (if (null? numbers)\n\
    \        (list smallest largest)\n        (let ((smallest (min smallest numbers))\n\
    \              (largest (max largest numbers)))\n          (if (= smallest largest)\n\
    \              (list smallest largest)\n              (list smallest largest)\n\
    \              (list smallest largest)\n              (list smallest largest)\n\
    \              (list smallest largest)\n              (list smallest largest)\n\
    \              (list smallest largest)\n              (list smallest largest)\n\
    \              (list smallest largest)\n              (list smallest largest)\n\
    \              (list smallest largest)\n              (list smallest largest)\n\
    \              (list smallest largest)\n              (list smallest largest)\n\
    \              (list smallest largest)\n              (list smallest largest)\n\
    \              (list smallest largest)\n              (list smallest largest)\n\
    \              (list smallest largest)\n              (list smallest largest)\n\
    \              (list smallest largest)\n              (list smallest largest)\n\
    \              (list smallest largest)\n              (list smallest largest)\n\
    \              (list smallest largest)\n              (list smallest largest)\n\
    \              (list smallest largest)\n              (list smallest largest)\n\
    \              (list smallest largest)\n              (list smallest largest)\n\
    \              (list smallest largest)\n              (list smallest largest)\n\
    \              (list smallest largest)\n              (list smallest largest)\n\
    \              (list smallest largest)\n              (list smallest largest)\n\
    \              (list smallest largest)\n              (list smallest largest)\n\
    \              (list smallest largest)\n              (list smallest largest)\n\
    \              (list smallest largest)\n              (list smallest largest)\n\
    \              (list smallest largest)\n              (list smallest largest)\n\
    \              (list smallest largest)\n              (list smallest largest)\n\
    \              (list smallest largest)\n              (list smallest largest)\n\
    \              (list smallest largest)\n              (list smallest largest)\n\
    \              (list smallest largest)\n              (list smallest largest)\n\
    \              (list smallest largest)\n              (list smallest largest)\n\
    \              (list smallest largest)\n              (list smallest largest)\n\
    \              (", "  (let ((smallest (car numbers))\n        (largest (car numbers)))\n\
    \    (if (null? numbers)\n        (list smallest largest)\n        (let ((smallest\
    \ (car numbers))\n              (largest (car numbers)))\n          (if (< (car\
    \ numbers) largest)\n              (find_closest_elements (cdr numbers))\n   \
    \           (find_closest_elements (cdr numbers))))))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
