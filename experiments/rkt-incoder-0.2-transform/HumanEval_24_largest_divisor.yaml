name: HumanEval_24_largest_divisor
language: rkt
prompt: "#lang racket\n\n;; For a given number n, find the largest number that divides\
  \ n evenly, smaller than n\n;; >>> (largest_divisor 15)\n;; 5\n(define (largest_divisor\
  \ n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
  \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
  \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
  \ 49) 7)\n))\n\n(test-humaneval)"
completions: ["  (let loop ((n n) (divisor 1))\n    (if (= n 0)\n        divisor\n\
    \        (loop (quotient n divisor) (+ divisor 1)))))\n", "  (cond [(= n 0) 0]\n\
    \        [(even? n) (max (largest_divisor (- n 1))\n                       (largest_divisor\
    \ (- n 2)))]\n        [else (max (largest_divisor (- n 1))\n                 \
    \  (largest_divisor (- n 2)))]))\n", "  (let loop ((n n) (max 0))\n    (if (=\
    \ n 0)\n        max\n        (loop (quotient n 2)\n              (if (even? n)\n\
    \                  (if (> max n)\n                      max\n                \
    \      (loop (quotient n 2)\n                            (quotient n 2))))))))\n",
  "  (cond [(= n 1) n]\n        [(even? n) (largest_divisor (- n 1))]\n        [else\
    \ (+ 1 (largest_divisor (- n 1))))))\n", "  (cond [(= n 0) 0]\n        [(even?\
    \ n) (cond [(= (modulo n 2) 0) (+ n 1)]\n                          [else (largest_divisor\
    \ (- n 1))])]\n        [else (largest_divisor (- n 1))]))\n", "  (let loop ((n\
    \ n) (max 0))\n    (if (= n 0)\n        max\n        (loop (quotient n 2)\n  \
    \            (if (even? n)\n                  (loop (quotient n 2)\n         \
    \               (if (> max n)\n                            max\n             \
    \               (loop (quotient n 2)\n                                  max)))))))\n",
  "  (let loop ((n n) (divisor 1))\n    (cond ((= n 0) divisor)\n          ((even?\
    \ n) (loop (/ n 2) divisor))\n          (else (loop (- n 1) (+ divisor 1))))))\n",
  "  (cond [(= n 1) n]\n        [(even? n) (largest_divisor (- n 1))]\n        [else\
    \ (+ 1 (largest_divisor (- n 1))))))\n", "  (cond [(= n 1) n]\n        [(even?\
    \ n) (* n largest_divisor (- n 1))]\n        [else (* n (largest_divisor (- n\
    \ 1)))]))\n", "  (cond [(= n 0) 0]\n        [(even? n) (* n largest_divisor (largest_divisor\
    \ n))]\n        [else (* n (largest_divisor n))]\n        ))\n", "  (let loop\
    \ ((n n) (max 0))\n    (cond ((= n 0) max)\n          ((even? n) (loop (/ n 2)\
    \ max))\n          (else (loop (/ n 2) (max n))))))\n", "  (let loop ((n n) (divisor\
    \ 1))\n    (cond ((= n 1) divisor)\n          ((even? n) (loop (/ n 2) divisor))\n\
    \          (else (loop (/ n 2) (+ divisor 1))))))\n", "  (define (helper n count)\n\
    \    (if (= n 0)\n        count\n        (helper (quotient n 2) (+ count 1))))\n\
    \  (helper n 0))\n", "  (cond ((= n 0) 0)\n        ((even? n) (floor (/ n 2)))\n\
    \        (else (+ 1 (largest_divisor (- n 1))))))\n", "  (define (helper n count)\n\
    \    (cond\n      [(= n 1) count]\n      [(even? n) (helper (/ n 2) (+ count 1))]\n\
    \      [else (helper (- n 1) count)]))\n  (helper n 0))\n", "  (let loop ((n n)\
    \ (divisor 1))\n    (cond ((= n 1) divisor)\n          ((even? n) (loop (quotient\
    \ n 2) (+ divisor 1)))\n          (else (loop (quotient n 2) divisor)))))\n",
  "  (cond [(= n 0) 0]\n        [(even? n) (cond [(= (modulo n 2) 0) (+ n 1)]\n  \
    \                        [(= (modulo n 2) 1) (+ n 2)]\n                      \
    \    [else (largest_divisor (- n 1))])]\n        [else (largest_divisor (- n 1))]))\n",
  "  (cond [(= n 0) 0]\n        [(even? n) (max (largest_divisor (- n 1))\n      \
    \                 (largest_divisor (- n 2)))]\n        [else (max (largest_divisor\
    \ (- n 1))\n                   (largest_divisor (- n 2))\n                   (largest_divisor\
    \ (- n 3))\n                   (largest_divisor (- n 4))\n                   (largest_divisor\
    \ (- n 5))\n                   (largest_divisor (- n 6))\n                   (largest_divisor\
    \ (- n 7))\n                   (largest_divisor (- n 8))\n                   (largest_divisor\
    \ (- n 9))\n                   (largest_divisor (- n 10))\n                  \
    \ (largest_divisor (- n 11))\n                   (largest_divisor (- n 12))\n\
    \                   (largest_divisor (- n 13))\n                   (largest_divisor\
    \ (- n 14))\n                   (largest_divisor (- n 15))]))\n", "  (define (helper\
    \ n count)\n    (cond ((= count 0) n)\n          ((even? n) (helper (quotient\
    \ n 2) (add1 count)))\n          (else (helper (quotient n 2) count))))\n  (helper\
    \ n 0))\n", "  (cond [(= n 1) n]\n        [(even? n) (largest_divisor (- n 1))]\n\
    \        [else (+ 1 (largest_divisor (- n 1))))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
