name: HumanEval_14_all_prefixes
language: rkt
prompt: "#lang racket\n\n;; Return list of all prefixes from shortest to longest of\
  \ the input string\n;; >>> (all_prefixes \"abc\")\n;; (list \"a\" \"ab\" \"abc\"\
  )\n(define (all_prefixes string)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n\
  \    (check-equal? (candidate \"\") (list ))\n    (check-equal? (candidate \"asdfgh\"\
  ) (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal?\
  \ (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
completions: ["  (if (empty? string)\n      '()\n      (append (all_prefixes (rest\
    \ string))\n              (list (first string)))))\n", "  (if (empty? string)\n\
    \      '()\n      (append (all_prefixes (rest string))\n              (list (first\
    \ string)))))\n", "  (if (empty? string)\n      '()\n      (append (all_prefixes\
    \ (rest string))\n              (list (first string))))))\n", "  (if (empty? string)\n\
    \      '()\n      (append (all_prefixes (rest string))\n              (list (first\
    \ string))))))\n", "  (if (null? string)\n      '()\n      (append (all_prefixes\
    \ (rest string))\n              (list (first string))))\n)\n", "  (cond [(empty?\
    \ string) empty]\n        [else (cons (substring string 0 (string-length string))\
    \ (all_prefixes (string-append string \"a\")))]))\n", "  (if (empty? string)\n\
    \      '()\n      (append (all_prefixes (rest string))\n              (list (first\
    \ string))))))\n", "  (cond [(empty? string) empty]\n        [(empty? (rest string))\
    \ (list string)]\n        [else (append (all_prefixes (rest string))\n       \
    \               (list (first string)))]))\n", "  (if (empty? string)\n      '()\n\
    \      (append (all_prefixes (rest string))\n              (list (first string))))))\n",
  "  (cond [(empty? string) '()]\n        [(equal? (first string) (string-ref string\
    \ 0)) '(first string)]\n        [else (cons (first string) (all_prefixes (string-rest\
    \ string)))]))\n", "  (cond [(empty? string) empty]\n        [(equal? (first string)\
    \ (string-ref string 0)) (string-append (first string) (string-ref string 1))]\n\
    \        [else (cons (first string) (all_prefixes (string-rest string)))]))\n",
  "  (if (null? string)\n      '()\n      (append (all_prefixes (rest string))\n \
    \             (list (first string)))))\n", "  (if (null? string)\n      '()\n\
    \      (append (all_prefixes (rest string))\n              (list (first string))))))\n",
  "  (if (empty? string)\n      '()\n      (append (all_prefixes (rest string))\n\
    \              (list (first string))))))\n", "  (if (empty? string)\n      '()\n\
    \      (append (all_prefixes (rest string))\n              (list (first string)))))\n",
  "  (if (empty? string)\n      '()\n      (append (all_prefixes (rest string))\n\
    \              (list (first string))))) ;; #lang racket\n", "  (if (empty? string)\n\
    \      '()\n      (append (all_prefixes (rest string))\n              (list (first\
    \ string))))))\n", "  (if (empty? string)\n      '()\n      (append (all_prefixes\
    \ (rest string))\n              (list (first string))))))\n", "  (if (null? string)\n\
    \      '()\n      (append (all_prefixes (rest string))\n              (list (first\
    \ string))))))\n", "  (if (null? string)\n      '()\n      (append (all_prefixes\
    \ (rest string)) (list (first string)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
