name: HumanEval_159_eat
language: rkt
prompt: "#lang racket\n\n;; You're a hungry rabbit, and you already have eaten a certain\
  \ number of carrots,\n;; but now you need to eat more carrots to complete the day's\
  \ meals.\n;; you should return an array of [ total number of eaten carrots after\
  \ your meals,\n;; the number of carrots left after your meals ]\n;; if there are\
  \ not enough remaining carrots, you will eat all remaining carrots, but will still\
  \ be hungry.\n;; Example:\n;; >>> (eat 5 6 10)\n;; (list 11 4)\n;; >>> (eat 4 8\
  \ 9)\n;; (list 12 1)\n;; >>> (eat 1 10 10)\n;; (list 11 0)\n;; >>> (eat 2 11 5)\n\
  ;; (list 7 0)\n;; Variables:\n;; @number : integer\n;; the number of carrots that\
  \ you have eaten.\n;; @need : integer\n;; the number of carrots that you need to\
  \ eat.\n;; @remaining : integer\n;; the number of remaining carrots thet exist in\
  \ stock\n;; Constrain:\n;; * 0 <= number <= 1000\n;; * 0 <= need <= 1000\n;; * 0\
  \ <= remaining <= 1000\n;; Have fun :)\n(define (eat number need remaining)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate eat))\n\
  \    (check-equal? (candidate 5 6 10) (list 11 4))\n    (check-equal? (candidate\
  \ 4 8 9) (list 12 1))\n    (check-equal? (candidate 1 10 10) (list 11 0))\n    (check-equal?\
  \ (candidate 2 11 5) (list 7 0))\n    (check-equal? (candidate 4 5 7) (list 9 2))\n\
  \    (check-equal? (candidate 4 5 1) (list 5 0))\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(= remaining 0) (list number 0)]\n    [(= remaining (-\
    \ need number)) (list number 0)]\n    [else (cons (- remaining (- need number))\
    \ (eat number (- remaining (- need number)) (- remaining number)))]))\n", "  (cond\n\
    \    [(or (= remaining 0) (= number 0))\n     (list 0 0)]\n    [(= remaining 0)\n\
    \     (list number 0)]\n    [else\n     (cond\n       [(= (mod number need) 0)\n\
    \        (cond\n         [(= number need)\n          (list number 0)]\n      \
    \   [else\n          (list number (- need (mod number need)))])]\n       [else\n\
    \        (cond\n         [(= (mod number need) 0)\n          (cond\n         \
    \  [(= number need)\n            (list number 0)]\n           [else\n        \
    \    (list number (- need (mod number need)))])]\n         [else\n          (cond\n\
    \           [(= (mod number need) 0)\n            (cond\n             [(= number\
    \ need)\n              (list number 0)]\n             [else\n              (list\
    \ number (- need (mod number need)))])]\n           [else\n            (cond\n\
    \             [(= (mod number need) 0)\n              (cond\n               [(=\
    \ number need)\n                (list number 0)]\n               [else\n     \
    \           (list number (- need (mod number need)))])]\n             [else\n\
    \              (cond\n               [(= (mod number need) 0)\n              \
    \  (cond\n                 [(= number need)\n                  (list number 0)]\n\
    \                 [else\n                  (list number (- need (mod number need)))])]\n\
    \               [else\n                (cond\n                 [(= (mod number\
    \ need) 0)\n                  (cond\n                   [(= number need)\n   \
    \                 (list number 0)]\n                   [else\n               \
    \     (list number (- need (mod number need)))])]\n                 [else\n  \
    \                (cond\n                   [(= (mod number need) 0)\n        \
    \            (cond\n                     [(= number need)\n                  \
    \    (list number 0)]\n                     [else\n                      (list\
    \ number (- need (mod number need)))])]\n                   [else\n          \
    \          (cond\n                     [(= (mod number need) 0)\n            \
    \          (cond\n                       [(= number need)\n                  \
    \      (list number 0)]\n                       [else\n                      \
    \  (list number (- need (mod number need)))])]\n                     [else\n \
    \                     (cond\n                       [(= (mod number need) 0)\n\
    \                        (cond\n                         [(= number need)\n  \
    \                        (list number 0)]\n                         [else\n  \
    \                        (list number (- need (mod number need)))])]\n       \
    \                [else\n                        (cond\n                      \
    \   [(= (mod number need) ", "  (cond\n    [(= remaining 0) (list number 0)]\n\
    \    [(= remaining (- need number)) (list number 0)]\n    [else (cons (- remaining\
    \ (- need number)) (eat number (- need number) (remaining 0)))]))\n", "  (cond\n\
    \    [(or (= remaining 0) (= number 0))\n     (list 0 0)]\n    [(= remaining 0)\n\
    \     (list number 0)]\n    [(= number 0)\n     (list 0 0)]\n    [else\n     (let\
    \ ([carrots (- number need)])\n       (cond\n         [(= carrots 0)\n       \
    \   (list 0 0)]\n         [(< carrots remaining)\n          (list carrots remaining)]\n\
    \         [else\n          (list carrots remaining)])))]))\n", "  (cond\n    [(=\
    \ remaining 0) (list number 0)]\n    [(= remaining need) (list number need)]\n\
    \    [else (cons (- remaining need) (cons number (eat remaining (- need number)\
    \ 0)))]))\n", "  (cond\n    [(= remaining 0) (list number 0)]\n    [(= remaining\
    \ 0) (list number 0)]\n    [(= remaining 0) (list number 0)]\n    [else (cons\
    \ (+ number need) (cons remaining (- remaining need)))]))\n", "  (cond\n    [(and\
    \ (>= number 0) (<= need 1000)) (list number 0)]\n    [(and (>= need 0) (<= remaining\
    \ 1000)) (list need 0)]\n    [else (list number need)]))\n", "  (cond\n    [(=\
    \ remaining 0) (list number 0)]\n    [(= remaining (- need number)) (list number\
    \ 0)]\n    [else (cond [(= (mod number 2) 0) (cons 0 (eat number (- number 1)\
    \ remaining))]\n              [(= (mod number 2) 1) (cons 1 (eat number (- number\
    \ 1) remaining))]\n              [else (cons 0 (eat number (- number 1) remaining))]))\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nThanks for your answer! I did a little bit\
    \ of research and found that my code was actually correct. I just had a problem\
    \ with the test cases. I didn't realize that I had to test the case where I only\
    \ had one carrot left. Thanks again!\n<|/ c |>\n<| a tags=racket,scheme |>\n<code>",
  "  (cond\n    [(and (<= 0 number 1000) (<= 0 need 1000) (<= 0 remaining 1000)) (list\
    \ 0 0)]\n    [(and (<= 0 number 1000) (<= 0 need 1000) (< remaining 0)) (list\
    \ 0 0)]\n    [(and (<= 0 number 1000) (< need 0) (< remaining 0)) (list 0 0)]\n\
    \    [(and (<= 0 number 1000) (< need 0) (< remaining 0)) (list 0 0)]\n    [(and\
    \ (<= 0 number 1000) (< need 0) (< remaining 0)) (list 0 0)]\n    [(and (<= 0\
    \ number 1000) (< need 0) (< remaining 0)) (list 0 0)]\n    [(and (<= 0 number\
    \ 1000) (< need 0) (< remaining 0)) (list 0 0)]\n    [(and (<= 0 number 1000)\
    \ (< need 0) (< remaining 0)) (list 0 0)]\n    [(and (<= 0 number 1000) (< need\
    \ 0) (< remaining 0)) (list 0 0)]\n    [(and (<= 0 number 1000) (< need 0) (<\
    \ remaining 0)) (list 0 0)]\n    [(and (<= 0 number 1000) (< need 0) (< remaining\
    \ 0)) (list 0 0)]\n    [(and (<= 0 number 1000) (< need 0) (< remaining 0)) (list\
    \ 0 0)]\n    [(and (<= 0 number 1000) (< need 0) (< remaining 0)) (list 0 0)]\n\
    \    [(and (<= 0 number 1000) (< need 0) (< remaining 0)) (list 0 0)]\n    [(and\
    \ (<= 0 number 1000) (< need 0) (< remaining 0)) (list 0 0)]\n    [(and (<= 0\
    \ number 1000) (< need 0) (< remaining 0)) (list 0 0)]\n    [(and (<= 0 number\
    \ 1000) (< need 0) (< remaining 0)) (list 0 0)]\n    [(and (<= 0 number 1000)\
    \ (< need 0) (< remaining 0)) (list 0 0)]\n    [(and (<= 0 number 1000) (< need\
    \ 0) (< remaining 0)) (list 0 0)]\n    [(and (<= 0 number 1000) (< need 0) (<\
    \ remaining 0)) (list 0 0)]\n    [(and (<= 0 number 1000) (< need 0) (< remaining\
    \ 0)) (list 0 0)]\n    [(and (<= 0 number 1000) (< need 0) (< remaining 0)) (list\
    \ 0 0)]\n    [(and (<= 0 number 1000) (< need 0) (< remaining 0)) (list 0 0)",
  "  (cond\n    [(= remaining 0) (list number 0)]\n    [(= remaining (- need number))\
    \ (list number 0)]\n    [else (cons (- remaining (- need number)) (eat number\
    \ (- need number) (- remaining number)))]))\n", "  (cond\n    [(or (= remaining\
    \ 0) (= number 0))\n     (list 0 0)]\n    [(< remaining 0)\n     (list number\
    \ 0)]\n    [(< number need)\n     (list (- number need) (- remaining need))]\n\
    \    [else\n     (list (+ number need) (- remaining need))]))\n", "  (cond\n \
    \   [(= remaining 0) (list number 0)]\n    [(= remaining 0) (list number 0)]\n\
    \    [else (cond\n             [(= number need) (list number 0)]\n           \
    \  [(< number need) (list number 0)]\n             [(> number need) (list (- number\
    \ need) (- remaining 1))])]))\n", "  (cond\n    [(and (<= 0 number 1000) (<= 0\
    \ need 1000) (<= 0 remaining 1000)) (list 0 0)]\n    [(and (<= 0 number 1000)\
    \ (<= 0 need 1000) (> remaining 0)) (list 0 0)]\n    [(and (<= 0 number 1000)\
    \ (> need 0) (> remaining 0)) (list 0 0)]\n    [(and (> number 0) (> need 0) (>\
    \ remaining 0)) (list 0 0)]\n    [(and (> number 0) (> need 0) (<= remaining 0))\
    \ (list 0 0)]\n    [(and (> number 0) (<= need 0) (<= remaining 0)) (list 0 0)]\n\
    \    [(and (> number 0) (<= need 0) (> remaining 0)) (list 0 0)]\n    [(and (>\
    \ number 0) (<= need 0) (> remaining 0)) (list 0 0)]\n    [(and (> number 0) (>\
    \ need 0) (> remaining 0)) (list 0 0)]\n    [(and (> number 0) (> need 0) (<=\
    \ remaining 0)) (list 0 0)]\n    [(and (> number 0) (<= need 0) (<= remaining\
    \ 0)) (list 0 0)]\n    [(and (> number 0) (<= need 0) (> remaining 0)) (list 0\
    \ 0)]\n    [(and (> number 0) (<= need 0) (> remaining 0)) (list 0 0)]\n    [(and\
    \ (> number 0) (> need 0) (> remaining 0)) (list 0 0)]\n    [(and (> number 0)\
    \ (> need 0) (<= remaining 0)) (list 0 0)]\n    [(and (> number 0) (<= need 0)\
    \ (<= remaining 0)) (list 0 0)]\n    [(and (> number 0) (<= need 0) (> remaining\
    \ 0)) (list 0 0)]\n    [(and (> number 0) (<= need 0) (> remaining 0)) (list 0\
    \ 0)]\n    [(and (> number 0) (> need 0) (> remaining 0)) (list 0 0)]\n    [(and\
    \ (> number 0) (> need 0) (<= remaining 0)) (list 0 0)]\n    [(and (> number 0)\
    \ (<= need 0) (<= remaining 0)) (list 0 0)]\n    [(and (> number 0) (<= need 0)\
    \ (> remaining 0)) (list 0 0)]\n    [(and (> number 0) (<= need 0) (> remaining\
    \ 0)) (list 0 0)]\n    [(and (> number 0) (> need 0) (> remaining 0)) (list 0\
    \ 0)]\n    [(and (> number 0) (> need 0) (<= remaining 0)) (list 0 0)", "  (cond\n\
    \    [(= remaining 0) (list number 0)]\n    [(= remaining (- need number)) (list\
    \ number 0)]\n    [else (cons (- remaining (- need number)) (eat number (- need\
    \ number) (remaining 0)))]))\n", "  (cond\n    [(= remaining 0) (list number 0)]\n\
    \    [(= remaining need) (list number 0)]\n    [else (cons (- remaining need)\
    \ (cons 0 (eat remaining (- need number) 0)))]))\n", "  (cond\n    [(and (<= 0\
    \ number 1000) (<= 0 need 1000) (<= 0 remaining 1000)) (list 0 0)]\n    [(and\
    \ (<= 0 number 1000) (<= 0 need 1000) (> remaining 0)) (list 0 0)]\n    [(and\
    \ (<= 0 number 1000) (> need 0) (<= 0 remaining 1000)) (list 0 0)]\n    [(and\
    \ (<= 0 number 1000) (> need 0) (> remaining 0)) (list 0 0)]\n    [(and (> number\
    \ 0) (<= 0 need 1000) (<= 0 remaining 1000)) (list 0 0)]\n    [(and (> number\
    \ 0) (<= 0 need 1000) (> remaining 0)) (list 0 0)]\n    [(and (> number 0) (>\
    \ need 0) (<= 0 remaining 1000)) (list 0 0)]\n    [(and (> number 0) (> need 0)\
    \ (> remaining 0)) (list 0 0)]\n    [(and (<= 0 number 1000) (<= 0 need 1000)\
    \ (> remaining 1000)) (list 0 0)]\n    [(and (<= 0 number 1000) (> need 0) (<=\
    \ 0 remaining 1000)) (list 0 0)]\n    [(and (<= 0 number 1000) (> need 0) (> remaining\
    \ 0)) (list 0 0)]\n    [(and (> number 0) (<= 0 need 1000) (<= 0 remaining 1000))\
    \ (list 0 0)]\n    [(and (> number 0) (<= 0 need 1000) (> remaining 0)) (list\
    \ 0 0)]\n    [(and (> number 0) (> need 0) (<= 0 remaining 1000)) (list 0 0)]\n\
    \    [(and (> number 0) (> need 0) (> remaining 0)) (list 0 0)]\n    [(and (<=\
    \ 0 number 1000) (<= 0 need 1000) (> remaining 1000)) (list 0 0)]\n    [(and (<=\
    \ 0 number 1000) (> need 0) (<= 0 remaining 1000)) (list 0 0)]\n    [(and (<=\
    \ 0 number 1000) (> need 0) (> remaining 0)) (list 0 0)]\n    [(and (> number\
    \ 0) (<= 0 need 1000) (<= 0 remaining 1000)) (list 0 0)]\n    [(and (> number\
    \ 0) (<= 0 need 1000) (> remaining 0)) (list 0 0)]\n    [(and (> number 0) (>\
    \ need 0) (<= 0 remaining 1000)) (list 0 0)]\n    [(and (> number 0) (> need 0)\
    \ (> remaining 0)) (list 0 0)]\n    [(and (<= 0 number 1000) (<= 0 need 1000)\
    \ (> remaining 1000)) (", "  (cond\n    [(and (integer? number) \n          (integer?\
    \ need))\n     (cond\n       [(<= remaining 0)\n        (list 0 0)]\n       [(<=\
    \ remaining (- need number))\n        (list number (- remaining number))]\n  \
    \     [else\n        (list number (- remaining number))]\n       )]\n    [else\n\
    \     (cond\n       [(<= remaining 0)\n        (list 0 0)]\n       [(<= remaining\
    \ (- need number))\n        (list number (- remaining number))]\n       [else\n\
    \        (list number (- remaining number))]\n       )]\n    [else\n     (cond\n\
    \       [(<= remaining 0)\n        (list 0 0)]\n       [(<= remaining (- need\
    \ number))\n        (list number (- remaining number))]\n       [else\n      \
    \  (list number (- remaining number))]\n       )]\n    [else\n     (cond\n   \
    \    [(<= remaining 0)\n        (list 0 0)]\n       [(<= remaining (- need number))\n\
    \        (list number (- remaining number))]\n       [else\n        (list number\
    \ (- remaining number))]\n       )]\n    [else\n     (cond\n       [(<= remaining\
    \ 0)\n        (list 0 0)]\n       [(<= remaining (- need number))\n        (list\
    \ number (- remaining number))]\n       [else\n        (list number (- remaining\
    \ number))]\n       )]\n    [else\n     (cond\n       [(<= remaining 0)\n    \
    \    (list 0 0)]\n       [(<= remaining (- need number))\n        (list number\
    \ (- remaining number))]\n       [else\n        (list number (- remaining number))]\n\
    \       )]\n    [else\n     (cond\n       [(<= remaining 0)\n        (list 0 0)]\n\
    \       [(<= remaining (- need number))\n        (list number (- remaining number))]\n\
    \       [else\n        (list number (- remaining number))]\n       )]\n    [else\n\
    \     (cond\n       [(<= remaining 0)\n        (list 0 0)]\n       [(<= remaining\
    \ (- need number))\n        (list number (- remaining number))]\n       [else\n\
    \        (list number (- remaining number))]\n       )]\n    [else\n     (cond\n\
    \       [(<= remaining 0)\n        (list 0 0)]\n       [(<= remaining (- need\
    \ number))\n        (list number (- remaining number))]\n       [else\n      \
    \  (list number (- remaining number))]\n       )]\n    [else\n     (cond\n   \
    \    [(<= remaining 0)\n        (list 0 0)]\n       [(<= remaining (- need number))\n\
    \        (list number (- remaining number))]\n       [else", "  (cond\n    [(or\
    \ (= remaining 0) (= number 0))\n     (list 0 0)]\n    [(= remaining 0)\n    \
    \ (list number 0)]\n    [(= number 0)\n     (list 0 0)]\n    [else\n     (cond\n\
    \       [(= (modulo remaining need) 0)\n        (cons remaining (- number need))]\n\
    \       [(= (modulo remaining need) 1)\n        (cons remaining (- number need))]\n\
    \       [(= (modulo remaining need) 2)\n        (cons remaining (- number need))]\n\
    \       [(= (modulo remaining need) 3)\n        (cons remaining (- number need))]\n\
    \       [(= (modulo remaining need) 4)\n        (cons remaining (- number need))]\n\
    \       [(= (modulo remaining need) 5)\n        (cons remaining (- number need))]\n\
    \       [(= (modulo remaining need) 6)\n        (cons remaining (- number need))]\n\
    \       [(= (modulo remaining need) 7)\n        (cons remaining (- number need))]\n\
    \       [(= (modulo remaining need) 8)\n        (cons remaining (- number need))]\n\
    \       [(= (modulo remaining need) 9)\n        (cons remaining (- number need))]\n\
    \       [(= (modulo remaining need) 10)\n        (cons remaining (- number need))]\n\
    \       [(= (modulo remaining need) 11)\n        (cons remaining (- number need))]\n\
    \       [(= (modulo remaining need) 12)\n        (cons remaining (- number need))]\n\
    \       [(= (modulo remaining need) 13)\n        (cons remaining (- number need))]\n\
    \       [(= (modulo remaining need) 14)\n        (cons remaining (- number need))]\n\
    \       [(= (modulo remaining need) 15)\n        (cons remaining (- number need))]\n\
    \       [(= (modulo remaining need) 16)\n        (cons remaining (- number need))]\n\
    \       [(= (modulo remaining need) 17)\n        (cons remaining (- number need))]\n\
    \       [(= (modulo remaining need) 18)\n        (cons remaining (- number need))]\n\
    \       [(= (modulo remaining need) 19)\n        (cons remaining (- number need))]\n\
    \       [(= (modulo remaining need) 20)\n        (cons remaining (- number need))]\n\
    \       [(= (modulo remaining need) 21)\n        (cons remaining (- number need))]",
  "  (cond\n    [(= remaining 0) (list number 0)]\n    [(= remaining (- need number))\
    \ (list number 0)]\n    [else (cons (- remaining (- need number)) (eat number\
    \ (- remaining number) (- remaining 1)))]))\n", "  (cond\n    [(or (= remaining\
    \ 0) (= number 0))\n     (list 0 0)]\n    [(= remaining 0)\n     (list number\
    \ 0)]\n    [(= number 0)\n     (list 0 0)]\n    [else\n     (cond\n       [(=\
    \ (modulo remaining need) 0)\n        (list remaining 0)]\n       [(= (modulo\
    \ remaining need) 1)\n        (list remaining (- remaining need))]\n       [(=\
    \ (modulo remaining need) 2)\n        (list remaining (- remaining need) (- remaining\
    \ need))]\n       [(= (modulo remaining need) 3)\n        (list remaining (- remaining\
    \ need) (- remaining need) (- remaining need))]\n       [(= (modulo remaining\
    \ need) 4)\n        (list remaining (- remaining need) (- remaining need) (- remaining\
    \ need) (- remaining need))]\n       [(= (modulo remaining need) 5)\n        (list\
    \ remaining (- remaining need) (- remaining need) (- remaining need) (- remaining\
    \ need) (- remaining need))]\n       [(= (modulo remaining need) 6)\n        (list\
    \ remaining (- remaining need) (- remaining need) (- remaining need) (- remaining\
    \ need) (- remaining need) (- remaining need))]\n       [(= (modulo remaining\
    \ need) 7)\n        (list remaining (- remaining need) (- remaining need) (- remaining\
    \ need) (- remaining need) (- remaining need) (- remaining need) (- remaining\
    \ need))]\n       [(= (modulo remaining need) 8)\n        (list remaining (- remaining\
    \ need) (- remaining need) (- remaining need) (- remaining need) (- remaining\
    \ need) (- remaining need) (- remaining need) (- remaining need))]\n       [(=\
    \ (modulo remaining need) 9)\n        (list remaining (- remaining need) (- remaining\
    \ need) (- remaining need) (- remaining need) (- remaining need) (- remaining\
    \ need) (- remaining need) (- remaining need) (- remaining need))]\n       [(=\
    \ (modulo remaining need) 10)\n        (list remaining (- remaining need) (- remaining\
    \ need) (- remaining need) (- remaining need) (- remaining need) (- remaining\
    \ need) (- remaining need) (- remaining need) (- remaining need) (- remaining\
    \ need))]\n       [(= (modulo remaining need) 11)\n        (list remaining (-\
    \ remaining need) (- remaining need) (- remaining need) (- remaining need) (-\
    \ remaining need) (- remaining need) (- remaining need) (- remaining need) (-\
    \ remaining need) (- remaining need) (- remaining need))]\n       [(= (modu",
  "  (cond\n    [(= remaining 0) (list number 0)]\n    [(= remaining need) (list number\
    \ need)]\n    [else (cons (- remaining need) (cons number need))]))\n", "  (cond\n\
    \    [(= remaining 0) (list number 0)]\n    [(= remaining need) (list number 0)]\n\
    \    [else (cons (- remaining need) (cons remaining (- number need)))]))\n", " \
    \ (cond\n    [(or (= remaining 0) (= number 0))\n     (list 0 0)]\n    [(or (=\
    \ remaining 0) (= number 0))\n     (list 0 0)]\n    [(or (= remaining 0) (= number\
    \ 0))\n     (list 0 0)]\n    [(or (= remaining 0) (= number 0))\n     (list 0\
    \ 0)]\n    [(or (= remaining 0) (= number 0))\n     (list 0 0)]\n    [(or (= remaining\
    \ 0) (= number 0))\n     (list 0 0)]\n    [(or (= remaining 0) (= number 0))\n\
    \     (list 0 0)]\n    [(or (= remaining 0) (= number 0))\n     (list 0 0)]\n\
    \    [(or (= remaining 0) (= number 0))\n     (list 0 0)]\n    [(or (= remaining\
    \ 0) (= number 0))\n     (list 0 0)]\n    [(or (= remaining 0) (= number 0))\n\
    \     (list 0 0)]\n    [(or (= remaining 0) (= number 0))\n     (list 0 0)]\n\
    \    [(or (= remaining 0) (= number 0))\n     (list 0 0)]\n    [(or (= remaining\
    \ 0) (= number 0))\n     (list 0 0)]\n    [(or (= remaining 0) (= number 0))\n\
    \     (list 0 0)]\n    [(or (= remaining 0) (= number 0))\n     (list 0 0)]\n\
    \    [(or (= remaining 0) (= number 0))\n     (list 0 0)]\n    [(or (= remaining\
    \ 0) (= number 0))\n     (list 0 0)]\n    [(or (= remaining 0) (= number 0))\n\
    \     (list 0 0)]\n    [(or (= remaining 0) (= number 0))\n     (list 0 0)]\n\
    \    [(or (= remaining 0) (= number 0))\n     (list 0 0)]\n    [(or (= remaining\
    \ 0) (= number 0))\n     (list 0 0)]\n    [(or (= remaining 0) (= number 0))\n\
    \     (list 0 0)]\n    [(or (= remaining 0) (= number 0))\n     (list 0 0)]\n\
    \    [(or (= remaining 0) (= number 0))\n     (list 0 0)]\n    [(or (= remaining\
    \ 0) (= number 0))\n     (list 0 0)]\n    [(or (= remaining 0) (= number 0))\n\
    \     (list 0 0)]\n    [(or (= remaining 0) (= number 0))\n     (list 0 0)]\n\
    \    [(or (= remaining 0) (= number 0))\n     (list 0 0)]\n    [(or (= remaining\
    \ 0) (= number 0))\n     (list 0 0)]", "  (cond\n    [(or (= remaining 0) (= number\
    \ 0))\n     (list 0 0)]\n    [(= remaining 0)\n     (list number 0)]\n    [(=\
    \ number 0)\n     (list 0 0)]\n    [else\n     (cond\n       [(= remaining need)\n\
    \        (list number 0)]\n       [(< remaining need)\n        (list number 0)]\n\
    \       [(< number need)\n        (list 0 0)]\n       [(> number need)\n     \
    \   (list 0 0)]\n       [(> remaining need)\n        (list 0 0)]\n       [(> remaining\
    \ 0)\n        (list 0 0)]\n       [(> number 0)\n        (list 0 0)]\n       [(>\
    \ number need)\n        (list 0 0)]\n       [(> need 0)\n        (list 0 0)]\n\
    \       [(> remaining need)\n        (list 0 0)]\n       [(> remaining 0)\n  \
    \      (list 0 0)]\n       [(> number 0)\n        (list 0 0)]\n       [(> number\
    \ need)\n        (list 0 0)]\n       [(> need 0)\n        (list 0 0)]\n      \
    \ [(> remaining need)\n        (list 0 0)]\n       [(> remaining 0)\n        (list\
    \ 0 0)]\n       [(> number 0)\n        (list 0 0)]\n       [(> number need)\n\
    \        (list 0 0)]\n       [(> need 0)\n        (list 0 0)]\n       [(> remaining\
    \ need)\n        (list 0 0)]\n       [(> remaining 0)\n        (list 0 0)]\n \
    \      [(> number 0)\n        (list 0 0)]\n       [(> number need)\n        (list\
    \ 0 0)]\n       [(> need 0)\n        (list 0 0)]\n       [(> remaining need)\n\
    \        (list 0 0)]\n       [(> remaining 0)\n        (list 0 0)]\n       [(>\
    \ number 0)\n        (list 0 0)]\n       [(> number need)\n        (list 0 0)]\n\
    \       [(> need 0)\n        (list 0 0)]\n       [(> remaining need)\n       \
    \ (list 0 0)]\n       [(> remaining 0)\n        (list 0 0)]\n       [(> number\
    \ 0)\n        (list 0 0)]\n       [(> number need)\n        (list 0 0)]\n    \
    \   [(> need 0)\n        (list 0 0)]\n       [(> remaining need)\n        (list\
    \ 0 0)]\n       [(> remaining 0)\n        (list 0 0)]\n       [(> number 0)\n\
    \        (list 0 0)]\n       ", "  (cond\n    [(= remaining 0) (list number 0)]\n\
    \    [(= remaining 0) (list number 0)]\n    [(= remaining 0) (list number 0)]\n\
    \    [(= remaining 0) (list number 0)]\n    [(= remaining 0) (list number 0)]\n\
    \    [(= remaining 0) (list number 0)]\n    [(= remaining 0) (list number 0)]\n\
    \    [(= remaining 0) (list number 0)]\n    [(= remaining 0) (list number 0)]\n\
    \    [(= remaining 0) (list number 0)]\n    [(= remaining 0) (list number 0)]\n\
    \    [(= remaining 0) (list number 0)]\n    [(= remaining 0) (list number 0)]\n\
    \    [(= remaining 0) (list number 0)]\n    [(= remaining 0) (list number 0)]\n\
    \    [(= remaining 0) (list number 0)]\n    [(= remaining 0) (list number 0)]\n\
    \    [(= remaining 0) (list number 0)]\n    [(= remaining 0) (list number 0)]\n\
    \    [(= remaining 0) (list number 0)]\n    [(= remaining 0) (list number 0)]\n\
    \    [(= remaining 0) (list number 0)]\n    [(= remaining 0) (list number 0)]\n\
    \    [(= remaining 0) (list number 0)]\n    [(= remaining 0) (list number 0)]\n\
    \    [(= remaining 0) (list number 0)]\n    [(= remaining 0) (list number 0)]\n\
    \    [(= remaining 0) (list number 0)]\n    [(= remaining 0) (list number 0)]\n\
    \    [(= remaining 0) (list number 0)]\n    [(= remaining 0) (list number 0)]\n\
    \    [(= remaining 0) (list number 0)]\n    [(= remaining 0) (list number 0)]\n\
    \    [(= remaining 0) (list number 0)]\n    [(= remaining 0) (list number 0)]\n\
    \    [(= remaining 0) (list number 0)]\n    [(= remaining 0) (list number 0)]\n\
    \    [(= remaining 0) (list number 0)]\n    [(= remaining 0) (list number 0)]\n\
    \    [(= remaining 0) (list number 0)]\n    [(= remaining 0) (list number 0)]\n\
    \    [(= remaining 0) (list number 0)]\n    [(= remaining 0) (list number 0)]\n\
    \    [(= remaining 0) (list number 0)]\n    [(= remaining 0) (list number 0)]\n\
    \    [(= remaining 0) (list number 0)]\n    [(= ", "  (cond\n    [(= remaining\
    \ 0) (list number 0)]\n    [(= remaining (- need number)) (list number 0)]\n \
    \   [else (cons (- remaining (- need number)) (eat number (- need number) (remaining\
    \ 0)))]))\n", "  (cond\n    [(or (< number 0) (> number 1000)) (list 0 0)]\n \
    \   [(or (< need 0) (> need 1000)) (list 0 0)]\n    [(or (< remaining 0) (> remaining\
    \ 1000)) (list 0 0)]\n    [else (cond\n            [(= remaining 0) (list number\
    \ need)]\n            [else (cond\n                    [(= number 0) (list 0 0)]\n\
    \                    [else (cond\n                            [(= need 0) (list\
    \ 0 0)]\n                            [(= remaining 0) (list 0 0)]\n          \
    \                  [else (cond\n                                    [(= number\
    \ need) (list number 0)]\n                                    [(= need remaining)\
    \ (list number 0)]\n                                    [(= remaining remaining)\
    \ (list number need)]\n                                    [else (cond\n     \
    \                                       [(= number need) (list number 0)]\n  \
    \                                          [(= need remaining) (list number 0)]\n\
    \                                            [(= remaining remaining) (list number\
    \ need)]\n                                            [(= number remaining) (list\
    \ number need)]\n                                            [(= need remaining)\
    \ (list number 0)]\n                                            [(= remaining\
    \ remaining) (list number need)]\n                                           \
    \ [(= number remaining) (list number need)]\n                                \
    \            [(= need remaining) (list number 0)]\n                          \
    \                  [(= remaining remaining) (list number need)]\n            \
    \                                [(= number remaining) (list number need)]\n \
    \                                           [(= need remaining) (list number 0)]\n\
    \                                            [(= remaining remaining) (list number\
    \ need)]\n                                            [(= number remaining) (list\
    \ number need)]\n                                            [(= need remaining)\
    \ (list number 0)]\n                                            [(= remaining\
    \ remaining) (list number need)]\n                                           \
    \ [(= number remaining) (list number need)]\n                                \
    \            [(= need remaining) (list number 0)]\n                          \
    \                  [(= remaining remaining) (list number need)]\n            \
    \                                [(= number remaining) (list number need)]\n \
    \                                           [(= need remaining) (list number 0)]\n\
    \                                            [(= remaining remaining) (list number\
    \ need)]\n                                            [(= number remaining) (list\
    \ number need)]\n                                            [(= need remaining)\
    \ (list number 0)]\n                                            [(= remaining\
    \ remaining) (list number need)]\n                                           \
    \ [(= number remaining) (list number need)]\n                                \
    \            [(= need remaining) (list number 0)]\n                          \
    \                  [(= remaining remaining) (list number need)]\n            \
    \                                [(= number remaining) (list number need)]\n \
    \                                           [(= need remaining) (list number 0)]\n\
    \                                            [(= remaining remaining) (list number\
    \ need)]\n                                            [(= number remaining) (list\
    \ number need)]\n                                            [(= need remaining)\
    \ (list number 0)]\n                                            [(= remaining\
    \ remaining", "  (cond\n    [(or (= remaining 0) (= number 0))\n     (list 0 0)]\n\
    \    [(< remaining 0)\n     (list number 0)]\n    [(< number need)\n     (list\
    \ (- number need) (- remaining need))]\n    [else\n     (list (- number need)\
    \ (- remaining need))]))\n", "  (cond\n    [(or (= remaining 0) (= number 0))\n\
    \     (list 0 0)]\n    [(= remaining 0)\n     (list number 0)]\n    [(= number\
    \ 0)\n     (list 0 0)]\n    [else\n     (cond\n       [(= remaining need)\n  \
    \      (list number 0)]\n       [(< remaining need)\n        (list 0 (- remaining\
    \ need))]\n       [else\n        (list 0 (+ remaining need))]\n       )]))\n",
  "  (cond\n    [(and (<= 0 number 1000) (<= 0 need 1000) (<= 0 remaining 1000)) (list\
    \ 0 0)]\n    [(and (<= 0 number 1000) (<= 0 need 1000) (> remaining 0)) (list\
    \ 0 0)]\n    [(and (<= 0 number 1000) (> need 0) (<= 0 remaining 1000)) (list\
    \ 0 0)]\n    [(and (<= 0 number 1000) (> need 0) (> remaining 0)) (list 0 0)]\n\
    \    [(and (> number 0) (<= 0 need 1000) (<= 0 remaining 1000)) (list 0 0)]\n\
    \    [(and (> number 0) (<= 0 need 1000) (> remaining 0)) (list 0 0)]\n    [(and\
    \ (> number 0) (> need 0) (<= 0 remaining 1000)) (list 0 0)]\n    [(and (> number\
    \ 0) (> need 0) (> remaining 0)) (list 0 0)]\n    [(and (<= 0 number 1000) (<=\
    \ 0 need 1000) (> remaining 1000)) (list 0 0)]\n    [(and (<= 0 number 1000) (>\
    \ need 0) (<= 0 remaining 1000)) (list 0 0)]\n    [(and (<= 0 number 1000) (>\
    \ need 0) (> remaining 0)) (list 0 0)]\n    [(and (> number 0) (<= 0 need 1000)\
    \ (<= 0 remaining 1000)) (list 0 0)]\n    [(and (> number 0) (<= 0 need 1000)\
    \ (> remaining 0)) (list 0 0)]\n    [(and (> number 0) (> need 0) (<= 0 remaining\
    \ 1000)) (list 0 0)]\n    [(and (> number 0) (> need 0) (> remaining 0)) (list\
    \ 0 0)]\n    [(and (<= 0 number 1000) (<= 0 need 1000) (> remaining 1000)) (list\
    \ 0 0)]\n    [(and (<= 0 number 1000) (> need 0) (<= 0 remaining 1000)) (list\
    \ 0 0)]\n    [(and (<= 0 number 1000) (> need 0) (> remaining 0)) (list 0 0)]\n\
    \    [(and (> number 0) (<= 0 need 1000) (<= 0 remaining 1000)) (list 0 0)]\n\
    \    [(and (> number 0) (<= 0 need 1000) (> remaining 0)) (list 0 0)]\n    [(and\
    \ (> number 0) (> need 0) (<= 0 remaining 1000)) (list 0 0)]\n    [(and (> number\
    \ 0) (> need 0) (> remaining 0)) (list 0 0)]\n    [(and (<= 0 number 1000) (<=\
    \ 0 need 1000) (> remaining 1000)) (", "  (cond\n    [(= remaining 0) (list number\
    \ 0)]\n    [(= remaining (- need number)) (list number 0)]\n    [else (cons (-\
    \ remaining (- need number)) (eat number (- need number) (remaining 0)))]))\n",
  "  (cond\n    [(and (<= 0 number 1000) (<= 0 need 1000) (<= 0 remaining 1000)) (list\
    \ 0 0)]\n    [(and (<= 0 number 1000) (<= 0 need 1000) (> remaining 0)) (list\
    \ 0 remaining)]\n    [(and (<= 0 number 1000) (> need 0) (<= 0 remaining 1000))\
    \ (list remaining 0)]\n    [(and (> number 0) (<= 0 need 1000) (<= 0 remaining\
    \ 1000)) (list remaining 0)]\n    [(and (> number 0) (> need 0) (<= 0 remaining\
    \ 1000)) (list remaining 0)]\n    [(and (> number 0) (> need 0) (> remaining 0))\
    \ (list remaining 0)]\n    [else (list number need)]))\n", "  (cond\n    [(= remaining\
    \ 0) (list number 0)]\n    [(= remaining need) (list number 0)]\n    [else (cons\
    \ (- remaining need) (cons remaining (- number need)))]))\n", "  (cond\n    [(and\
    \ (<= remaining 0) (<= need 0))\n     (list number 0)]\n    [(and (<= remaining\
    \ 0) (< need 0))\n     (list number 0)]\n    [(and (<= remaining 0) (> need 0))\n\
    \     (list number 0)]\n    [else\n     (let ([carrots (- remaining need)])\n\
    \       (cond\n         [(< carrots 0)\n          (list number 0)]\n         [(<\
    \ carrots 1)\n          (list number carrots)]\n         [(< carrots 2)\n    \
    \      (list number carrots)]\n         [(< carrots 3)\n          (list number\
    \ carrots)]\n         [(< carrots 4)\n          (list number carrots)]\n     \
    \    [(< carrots 5)\n          (list number carrots)]\n         [(< carrots 6)\n\
    \          (list number carrots)]\n         [(< carrots 7)\n          (list number\
    \ carrots)]\n         [(< carrots 8)\n          (list number carrots)]\n     \
    \    [(< carrots 9)\n          (list number carrots)]\n         [(< carrots 10)\n\
    \          (list number carrots)]\n         [(< carrots 11)\n          (list number\
    \ carrots)]\n         [(< carrots 12)\n          (list number carrots)]\n    \
    \     [(< carrots 13)\n          (list number carrots)]\n         [(< carrots\
    \ 14)\n          (list number carrots)]\n         [(< carrots 15)\n          (list\
    \ number carrots)]\n         [(< carrots 16)\n          (list number carrots)]\n\
    \         [(< carrots 17)\n          (list number carrots)]\n         [(< carrots\
    \ 18)\n          (list number carrots)]\n         [(< carrots 19)\n          (list\
    \ number carrots)]\n         [(< carrots 20)\n          (list number carrots)]\n\
    \         [(< carrots 21)\n          (list number carrots)]\n         [(< carrots\
    \ 22)\n          (list number carrots)]\n         [(< carrots 23)\n          (list\
    \ number carrots)]\n         [(< carrots 24)\n          (list number carrots)]\n\
    \         [(< carrots 25)\n          (list number carrots)]\n         [(< carrots\
    \ 26)\n          (list number carrots)]\n         [(< carrots 27", "  (cond\n\
    \    [(or (= remaining 0) (= number 0))\n     (list 0 0)]\n    [(= remaining 0)\n\
    \     (list number 0)]\n    [else\n     (let ([carrots (- number need)])\n   \
    \    (cond\n         [(< carrots 0)\n          (list 0 0)]\n         [(= carrots\
    \ 0)\n          (list number 0)]\n         [else\n          (let ([remaining-carrots\
    \ (- remaining carrots)])\n            (cond\n              [(< remaining-carrots\
    \ 0)\n               (list number 0)]\n              [(= remaining-carrots 0)\n\
    \               (list 0 0)]\n              [else\n               (let ([new-carrots\
    \ (+ carrots need)])\n                 (cond\n                   [(< new-carrots\
    \ 0)\n                    (list number 0)]\n                   [(= new-carrots\
    \ 0)\n                    (list 0 0)]\n                   [else\n            \
    \        (let ([new-remaining (- remaining new-carrots)])\n                  \
    \    (cond\n                        [(< new-remaining 0)\n                   \
    \      (list number 0)]\n                        [(= new-remaining 0)\n      \
    \                   (list 0 0)]\n                        [else\n             \
    \            (let ([new-need-remaining (- need new-remaining)]\n             \
    \                 [new-number (+ number new-need-remaining)]\n               \
    \               [new-remaining (- new-remaining new-need-remaining)]\n       \
    \                       [new-need (- new-need-remaining new-carrots)])\n     \
    \                     (cond\n                            [(< new-need 0)\n   \
    \                          (list number 0)]\n                            [(= new-need\
    \ 0)\n                             (list 0 0)]\n                            [else\n\
    \                             (eat new-number new-need new-remaining)]\n     \
    \                     )\n                        ]\n                      )\n\
    \                   ]\n                 )\n                )\n              ]\n\
    \            )\n          ]\n        )\n      )\n    ]\n  )\n)\n", "  (cond\n\
    \    [(or (= remaining 0) (= number 0))\n     (list 0 0)]\n    [(or (= remaining\
    \ 0) (= need 0))\n     (list number 0)]\n    [(or (= remaining 0) (= number 0))\n\
    \     (list 0 0)]\n    [else\n     (cond\n       [(< remaining number)\n     \
    \   (cond\n         [(< need 0)\n          (cond\n           [(= remaining 0)\n\
    \            (list number 0)]\n           [else\n            (list number (- remaining\
    \ need))]\n          )]\n         [else\n          (cond\n           [(= remaining\
    \ 0)\n            (list number 0)]\n           [else\n            (list number\
    \ (- remaining need))]\n          )]\n        )]\n       [else\n        (cond\n\
    \         [(< need 0)\n          (cond\n           [(= remaining 0)\n        \
    \    (list number 0)]\n           [else\n            (list number (- remaining\
    \ need))]\n          )]\n         [else\n          (cond\n           [(= remaining\
    \ 0)\n            (list number 0)]\n           [else\n            (list number\
    \ (- remaining need))]\n          )]\n        )]\n      )]\n    )]\n  )\n)\n",
  "  (cond\n    [(or (= remaining 0) (= number 0))\n     (list 0 0)]\n    [(or (=\
    \ remaining 0) (= number need))\n     (list number 0)]\n    [(= remaining 0)\n\
    \     (list number 0)]\n    [else\n     (let ([carrots (- number need)])\n   \
    \    (cond\n         [(< carrots 0)\n          (list 0 0)]\n         [(< carrots\
    \ remaining)\n          (list number 0)]\n         [else\n          (list number\
    \ (- remaining carrots))]))]))\n", "  (cond\n    [(= remaining 0) (list number\
    \ 0)]\n    [(= remaining need) (list number 0)]\n    [else (cons (- remaining\
    \ need) (cons number 0))]))\n", "  (cond\n    [(or (= remaining 0) (= number 0))\n\
    \     (list 0 0)]\n    [(= remaining 0)\n     (list number 0)]\n    [(= number\
    \ 0)\n     (list 0 0)]\n    [else\n     (cond\n       [(= remaining need)\n  \
    \      (list number 0)]\n       [(< remaining need)\n        (list number (- remaining\
    \ need))]\n       [else\n        (list number (- remaining need))])]))\n", " \
    \ (cond\n    [(and (<= number 1000) (<= need 1000) (<= remaining 1000)) (list\
    \ number need)]\n    [else (list number need (remaining (remaining - need)))]))\n",
  "  (cond\n    [(or (= remaining 0) (= need 0))\n     (list number 0)]\n    [(< remaining\
    \ 0)\n     (list number 0)]\n    [(< need 0)\n     (list number 0)]\n    [else\n\
    \     (cond\n       [(= remaining number)\n        (list number 0)]\n       [(<\
    \ remaining number)\n        (list number 0)]\n       [else\n        (cond\n \
    \         [(= need 0)\n           (list number 0)]\n          [(< need 0)\n  \
    \         (list number 0)]\n          [else\n           (cond\n             [(=\
    \ number 0)\n              (list number 0)]\n             [(< number 0)\n    \
    \          (list number 0)]\n             [else\n              (cond\n       \
    \         [(= remaining 0)\n                 (list number 0)]\n              \
    \  [else\n                 (cond\n                   [(= remaining number)\n \
    \                   (list number 0)]\n                   [else\n             \
    \       (cond\n                      [(= need 0)\n                       (list\
    \ number 0)]\n                      [else\n                       (cond\n    \
    \                     [(= number 0)\n                          (list number 0)]\n\
    \                         [else\n                          (cond\n           \
    \                 [(= remaining 0)\n                             (list number\
    \ 0)]\n                            [else\n                             (cond\n\
    \                              [(= remaining number)\n                       \
    \        (list number 0)]\n                              [else\n             \
    \                  (cond\n                                [(= need 0)\n      \
    \                           (list number 0)]\n                               \
    \ [else\n                                 (cond\n                            \
    \      [(= number 0)\n                                   (list number 0)]\n  \
    \                                [else\n                                   (cond\n\
    \                                    [(= remaining 0)\n                      \
    \               (list number 0)]\n                                    [else\n\
    \                                     (cond\n                                \
    \     [(= remaining number)\n                                     (list number\
    \ 0)]\n                                     [else\n                          \
    \           (cond\n                                     [(= need 0)\n        \
    \                             (list number 0)]\n                             \
    \        [else\n                                     (cond\n                 \
    \                    [(= number 0)\n                                     (list\
    \ number 0)]\n                                     [else\n                   \
    \                  (cond\n                                     [(= remaining 0)\n\
    \                                     (list number 0)]\n                     \
    \                [else\n                                     (cond\n         \
    \                            [(= remaining number)\n                         \
    \            (list number 0)]\n                                     [else\n  \
    \                                   (cond\n                                  \
    \   [(= need 0)\n                                     (list number 0)]\n     \
    \                                [else\n                                     (cond\n\
    \                                     [(= number 0)\n                        \
    \             (list number 0)]\n                                     [else\n \
    \                                    (cond\n                                 \
    \    [(= remaining 0)\n                                     (list number 0)]\n\
    \                                     [else\n                                \
    \     (cond\n                                     [(= remaining number)\n    \
    \                                 (list number 0)]\n                         \
    \            ", "  (cond\n    [(or (< number 1000) (< need 1000) (< remaining\
    \ 1000)) (list 0 0)]\n    [(= remaining 0) (list number need)]\n    [else (cond\n\
    \             [(= remaining need) (list number need)]\n             [else (cond\n\
    \                      [(= remaining (- need number)) (list number need)]\n  \
    \                    [else (cond\n                               [(= remaining\
    \ (- need (- number need))) (list number need)]\n                            \
    \   [else (cond [(= remaining (- need (- number need) (- number remaining))) (list\
    \ number need)]\n                                         [else (cond [(= remaining\
    \ (- need (- number need) (- number remaining) (- number remaining))) (list number\
    \ need)]\n                                                   [else (cond [(= remaining\
    \ (- need (- number need) (- number remaining) (- number remaining) (- number\
    \ remaining))) (list number need)]\n                                         \
    \                [else (cond [(= remaining (- need (- number need) (- number remaining)\
    \ (- number remaining) (- number remaining) (- number remaining))) (list number\
    \ need)]\n                                                                 [else\
    \ (cond [(= remaining (- need (- number need) (- number remaining) (- number remaining)\
    \ (- number remaining) (- number remaining) (- number remaining))) (list number\
    \ need)]\n                                                                   \
    \      [else (cond [(= remaining (- need (- number need) (- number remaining)\
    \ (- number remaining) (- number remaining) (- number remaining) (- number remaining)\
    \ (- number remaining) (- number remaining))) (list number need)]\n          \
    \                                                                   [else (cond\
    \ [(= remaining (- need (- number need) (- number remaining) (- number remaining)\
    \ (- number remaining) (- number remaining) (- number remaining) (- number remaining)\
    \ (- number remaining) (- number remaining) (- number remaining))) (list number\
    \ need)]\n                                                                   \
    \      [else (cond [(= remaining (- need (- number need) (- number remaining)\
    \ (- number remaining) (- number remaining) (- number remaining) (- number remaining)\
    \ (- number remaining) (- number remaining) (- number remaining) (- number remaining)\
    \ (- number remaining))) (list number need)]\n                               \
    \                                              [else (cond [(= remaining (- need\
    \ (- number need) (- number remaining) (- number remaining) (- number remaining)\
    \ (- number remaining) (- number remaining) (- number remaining) (- number remaining)\
    \ (- number remaining) (- number remaining) (- number remaining) (- number remaining)))\
    \ (", "  (cond\n    [(or (= remaining 0) (= number 0))\n     (list 0 0)]\n   \
    \ [(or (= remaining 0) (= need 0))\n     (list number 0)]\n    [(or (= remaining\
    \ 0) (= number 0))\n     (list 0 0)]\n    [else\n     (cond\n       [(< remaining\
    \ number)\n        (cond\n         [(< need 0)\n          (cond\n           [(<\
    \ number 0)\n            (cond\n             [(= remaining 0)\n              (list\
    \ number 0)]\n             [else\n              (list number 0)])]\n         \
    \ [else\n           (cond\n             [(< number 0)\n              (cond\n \
    \              [(= remaining 0)\n                (list number 0)]\n          \
    \     [else\n                (list number 0)])]\n           [else\n          \
    \  (cond\n             [(< number 0)\n              (cond\n               [(=\
    \ remaining 0)\n                (list number 0)]\n               [else\n     \
    \           (list number 0)])]\n           [else\n            (cond\n        \
    \     [(< number 0)\n              (cond\n               [(= remaining 0)\n  \
    \              (list number 0)]\n               [else\n                (list number\
    \ 0)])]\n           [else\n            (cond\n             [(< number 0)\n   \
    \           (cond\n               [(= remaining 0)\n                (list number\
    \ 0)]\n               [else\n                (list number 0)])]\n           [else\n\
    \            (cond\n             [(< number 0)\n              (cond\n        \
    \       [(= remaining 0)\n                (list number 0)]\n               [else\n\
    \                (list number 0)])]\n           [else\n            (cond\n   \
    \          [(< number 0)\n              (cond\n               [(= remaining 0)\n\
    \                (list number 0)]\n               [else\n                (list\
    \ number 0)])]\n           [else\n            (cond\n             [(< number 0)\n\
    \              (cond\n               [(= remaining 0)\n                (list number\
    \ 0)]\n               [else\n                (list number 0)])]\n           [else\n\
    \            (cond\n             [(< number 0)\n              (cond\n        \
    \       [(= remaining 0)\n                (list number 0)]\n               [else\n\
    \                (list number 0)])]\n           [else\n            (cond\n   \
    \          [(< number 0)\n              (cond\n               [(= remaining 0)\n\
    \                (list number 0)]\n               [else\n                (list\
    \ number 0)])]\n           [else\n            (cond\n             [(< number 0)\n\
    \              (cond\n               [(= remaining 0)\n                (list number\
    \ 0)]\n               [else\n                (list number 0)])]\n           [else\n\
    \            (cond\n             [(", "  (cond\n    [(and (<= remaining 0) (<=\
    \ need 0))\n     (list number 0)]\n    [(and (<= remaining 0) (< need 0))\n  \
    \   (list number 0)]\n    [(and (<= remaining 0) (> need 0))\n     (list number\
    \ 0)]\n    [else\n     (let ([carrots (- remaining need)])\n       (cond\n   \
    \      [(< carrots 0)\n          (list number 0)]\n         [(< carrots 1)\n \
    \         (list number carrots)]\n         [else\n          (let ([carrots (-\
    \ carrots 1)])\n            (cond\n              [(< carrots 0)\n            \
    \   (list number 0)]\n              [(< carrots 1)\n               (list number\
    \ carrots)]\n              [else\n               (list number carrots)]))]))]))\n",
  "  (cond\n    [(and (<= remaining 0) (<= need 0))\n     (list number 0)]\n    [(<=\
    \ remaining 0)\n     (list number 0)]\n    [(<= remaining need)\n     (list number\
    \ need)]\n    [else\n     (let ([carrots (- remaining need)])\n       (cond\n\
    \         [(<= carrots 0)\n          (list number 0)]\n         [(<= carrots number)\n\
    \          (list number carrots)]\n         [else\n          (list number (+ carrots\
    \ number))]))]))\n", "  (cond\n    [(= remaining 0) (list number 0)]\n    [(=\
    \ remaining need) (list number 0)]\n    [else (cond [(< remaining need) (cons\
    \ remaining (cons number need))]\n              [else (cons remaining (cons 0\
    \ (- remaining need)))])]))\n", "  (cond\n    [(and (<= 0 number 1000) (<= 0 need\
    \ 1000) (<= 0 remaining 1000)) (list 0 0)]\n    [(and (<= 0 number 1000) (<= 0\
    \ need 1000) (< remaining 0)) (list 0 0)]\n    [(and (<= 0 number 1000) (< need\
    \ 0) (<= 0 remaining 1000)) (list 0 0)]\n    [(and (<= 0 number 1000) (< need\
    \ 0) (< remaining 0)) (list 0 0)]\n    [(and (<= 0 number 1000) (< need 0) (<\
    \ remaining 0)) (list 0 0)]\n    [(and (<= 0 number 1000) (< need 0) (< remaining\
    \ 0)) (list 0 0)]\n    [(and (<= 0 number 1000) (< need 0) (< remaining 0)) (list\
    \ 0 0)]\n    [(and (<= 0 number 1000) (< need 0) (< remaining 0)) (list 0 0)]\n\
    \    [(and (<= 0 number 1000) (< need 0) (< remaining 0)) (list 0 0)]\n    [(and\
    \ (<= 0 number 1000) (< need 0) (< remaining 0)) (list 0 0)]\n    [(and (<= 0\
    \ number 1000) (< need 0) (< remaining 0)) (list 0 0)]\n    [(and (<= 0 number\
    \ 1000) (< need 0) (< remaining 0)) (list 0 0)]\n    [(and (<= 0 number 1000)\
    \ (< need 0) (< remaining 0)) (list 0 0)]\n    [(and (<= 0 number 1000) (< need\
    \ 0) (< remaining 0)) (list 0 0)]\n    [(and (<= 0 number 1000) (< need 0) (<\
    \ remaining 0)) (list 0 0)]\n    [(and (<= 0 number 1000) (< need 0) (< remaining\
    \ 0)) (list 0 0)]\n    [(and (<= 0 number 1000) (< need 0) (< remaining 0)) (list\
    \ 0 0)]\n    [(and (<= 0 number 1000) (< need 0) (< remaining 0)) (list 0 0)]\n\
    \    [(and (<= 0 number 1000) (< need 0) (< remaining 0)) (list 0 0)]\n    [(and\
    \ (<= 0 number 1000) (< need 0) (< remaining 0)) (list 0 0)]\n    [(and (<= 0\
    \ number 1000) (< need 0) (< remaining 0)) (list 0 0)]\n    [(and (<= 0 number\
    \ 1000) (< need 0) (< remaining 0)) (list 0 0)]\n    [(and (<= 0 number 1000)\
    \ (< need 0) (< remaining 0)) (list 0 ", "  (cond\n    [(= remaining 0) (list\
    \ number 0)]\n    [(= remaining (- need number)) (list number 0)]\n    [else (cons\
    \ (- number remaining) (cons 0 (eat remaining (- number need) remaining)))]))\n",
  "  (cond\n    [(or (= remaining 0) (= number 0))\n     (list 0 0)]\n    [(= remaining\
    \ 0)\n     (list number 0)]\n    [(= number 0)\n     (list 0 0)]\n    [else\n\
    \     (cond\n       [(= remaining need)\n        (list number 0)]\n       [(<\
    \ remaining need)\n        (cond\n          [(= remaining 0)\n           (list\
    \ 0 0)]\n          [else\n           (list number (- remaining need))]\n     \
    \    )]\n       [else\n        (cond\n          [(= remaining 0)\n           (list\
    \ 0 0)]\n          [else\n           (list number (- remaining need))]\n     \
    \    )]\n       )]\n     )]))\n", "  (cond\n    [(or (= remaining 0) (= number\
    \ 0))\n     (list 0 0)]\n    [(< remaining 0)\n     (list number 0)]\n    [else\n\
    \     (cond\n       [(< need 0)\n        (list number 0)]\n       [(< number 0)\n\
    \        (list 0 remaining)]\n       [else\n        (cond\n          [(= (modulo\
    \ number need) 0)\n           (list number 0)]\n          [else\n           (cond\n\
    \             [(< remaining 0)\n              (list number 0)]\n             [else\n\
    \              (cond\n                [(= (modulo number need) 0)\n          \
    \       (list number 0)]\n                [else\n                 (cond\n    \
    \               [(< remaining 0)\n                    (list number 0)]\n     \
    \              [else\n                    (eat number (- need (modulo number need))\
    \ (- remaining (modulo number need)))]\n                   )\n               \
    \  ])\n             ])\n          ])\n       ])\n     ]))\n", "  (cond\n    [(or\
    \ (= remaining 0) (= number 0))\n     (list 0 0)]\n    [(= remaining 0)\n    \
    \ (list number 0)]\n    [(= number 0)\n     (list 0 0)]\n    [else\n     (cond\n\
    \       [(= (modulo number need) 0)\n        (cond\n         [(= (modulo remaining\
    \ need) 0)\n          (cond\n           [(= (modulo remaining need) 0)\n     \
    \       (cond\n             [(= (modulo remaining need) 0)\n              (cond\n\
    \               [(= (modulo remaining need) 0)\n                (cond\n      \
    \           [(= (modulo remaining need) 0)\n                  (cond\n        \
    \           [(= (modulo remaining need) 0)\n                    (cond\n      \
    \               [(= (modulo remaining need) 0)\n                      (cond\n\
    \                       [(= (modulo remaining need) 0)\n                     \
    \   (cond\n                         [(= (modulo remaining need) 0)\n         \
    \                 (cond\n                           [(= (modulo remaining need)\
    \ 0)\n                            (cond\n                             [(= (modulo\
    \ remaining need) 0)\n                              (cond\n                  \
    \             [(= (modulo remaining need) 0)\n                               \
    \ (cond\n                                 [(= (modulo remaining need) 0)\n   \
    \                               (cond\n                                   [(=\
    \ (modulo remaining need) 0)\n                                    (cond\n    \
    \                                 [(= (modulo remaining need) 0)\n           \
    \                           (cond\n                                       [(=\
    \ (modulo remaining need) 0)\n                                        (cond\n\
    \                                         [(= (modulo remaining need) 0)\n   \
    \                                       (cond\n                              \
    \             [(= (modulo remaining need) 0)\n                               \
    \              (cond\n                                             [(= (modulo\
    \ remaining need) 0)\n                                              (cond\n  \
    \                                             [(= (modulo remaining need) 0)\n\
    \                                                (cond\n                     \
    \                            [(= (modulo remaining need) 0)\n                \
    \                                  (cond\n                                   \
    \                [(= (modulo remaining need) 0)\n                            \
    \                        (cond\n                                             \
    \        [(= (modulo remaining need) 0)\n                                    \
    \                  (cond\n                                                   \
    \    [(= (modulo remaining need) 0)\n                                        \
    \                (cond\n                                                     \
    \    [(= (modulo remaining need) 0)\n                                        \
    \                  (cond\n                                                   \
    \        [(= (modulo remaining need) 0)\n                                    \
    \                        (cond\n                                             \
    \                (= (modulo remaining need) 0)\n                             \
    \                                 (cond\n                                    \
    \                           [(= (modulo remaining need) 0)\n                 \
    \                                               (cond\n                      \
    \                                           (= (modulo remaining need) 0)\n  \
    \                                                                (cond\n     \
    \                                                              [(= (modulo remaining\
    \ need) 0)\n                                                                 \
    \   (cond\n", "  (cond\n    [(or (= remaining 0) (= number 0))\n     (list 0 0)]\n\
    \    [(or (= remaining 0) (= number 0))\n     (list 0 0)]\n    [(or (= remaining\
    \ 0) (= number 0))\n     (list 0 0)]\n    [(or (= remaining 0) (= number 0))\n\
    \     (list 0 0)]\n    [(or (= remaining 0) (= number 0))\n     (list 0 0)]\n\
    \    [(or (= remaining 0) (= number 0))\n     (list 0 0)]\n    [(or (= remaining\
    \ 0) (= number 0))\n     (list 0 0)]\n    [(or (= remaining 0) (= number 0))\n\
    \     (list 0 0)]\n    [(or (= remaining 0) (= number 0))\n     (list 0 0)]\n\
    \    [(or (= remaining 0) (= number 0))\n     (list 0 0)]\n    [(or (= remaining\
    \ 0) (= number 0))\n     (list 0 0)]\n    [(or (= remaining 0) (= number 0))\n\
    \     (list 0 0)]\n    [(or (= remaining 0) (= number 0))\n     (list 0 0)]\n\
    \    [(or (= remaining 0) (= number 0))\n     (list 0 0)]\n    [(or (= remaining\
    \ 0) (= number 0))\n     (list 0 0)]\n    [(or (= remaining 0) (= number 0))\n\
    \     (list 0 0)]\n    [(or (= remaining 0) (= number 0))\n     (list 0 0)]\n\
    \    [(or (= remaining 0) (= number 0))\n     (list 0 0)]\n    [(or (= remaining\
    \ 0) (= number 0))\n     (list 0 0)]\n    [(or (= remaining 0) (= number 0))\n\
    \     (list 0 0)]\n    [(or (= remaining 0) (= number 0))\n     (list 0 0)]\n\
    \    [(or (= remaining 0) (= number 0))\n     (list 0 0)]\n    [(or (= remaining\
    \ 0) (= number 0))\n     (list 0 0)]\n    [(or (= remaining 0) (= number 0))\n\
    \     (list 0 0)]\n    [(or (= remaining 0) (= number 0))\n     (list 0 0)]\n\
    \    [(or (= remaining 0) (= number 0))\n     (list 0 0)]\n    [(or (= remaining\
    \ 0) (= number 0))\n     (list 0 0)]\n    [(or (= remaining 0) (= number 0))\n\
    \     (list 0 0)]\n    [(or (= remaining 0) (= number 0))\n     (list 0 0)]\n\
    \    [(or (= remaining 0) (= number 0))\n     (list 0 0)]", "  (cond\n    [(and\
    \ (>= number 0) (<= need 1000) (<= remaining 1000)) (list number 0)]\n    [(and\
    \ (>= number 0) (<= need 1000) (<= remaining 0)) '()]\n    [(and (>= number 0)\
    \ (<= need 0) (<= remaining 1000)) (list number 0)]\n    [(and (>= number 0) (<=\
    \ need 0) (<= remaining 0)) '()]\n    [(and (>= number 0) (<= need 1000) (<= remaining\
    \ 100)) '()]\n    [(and (>= number 0) (<= need 1000) (<= remaining 0)) '()]\n\
    \    [(and (>= number 0) (<= need 0) (<= remaining 100)) '()]\n    [(and (>= number\
    \ 0) (<= need 0) (<= remaining 0)) '()]\n    [(and (>= number 1000) (<= need 1000)\
    \ (<= remaining 1000)) (list number 0)]\n    [(and (>= number 1000) (<= need 1000)\
    \ (<= remaining 0)) '()]\n    [(and (>= number 1000) (<= need 0) (<= remaining\
    \ 1000)) (list number 0)]\n    [(and (>= number 1000) (<= need 0) (<= remaining\
    \ 0)) '()]\n    [(and (>= number 1000) (<= need 1000) (<= remaining 100)) '()]\n\
    \    [(and (>= number 1000) (<= need 1000) (<= remaining 0)) '()]\n    [(and (>=\
    \ number 1000) (<= need 0) (<= remaining 100)) '()]\n    [(and (>= number 1000)\
    \ (<= need 0) (<= remaining 0)) '()]\n    [(and (>= number 1000) (<= need 1000)\
    \ (<= remaining 100)) '()]\n    [(and (>= number 1000) (<= need 1000) (<= remaining\
    \ 0)) '()]\n    [(and (>= number 1000) (<= need 0) (<= remaining 100)) '()]\n\
    \    [(and (>= number 1000) (<= need 0) (<= remaining 0)) '()]\n    [(and (>=\
    \ number 1000) (<= need 1000) (<= remaining 100)) '()]\n    [(and (>= number 1000)\
    \ (<= need 1000) (<= remaining 0)) '()]\n    [(and (>= number 1000) (<= need 0)\
    \ (<= remaining 100)) '()]\n    [(and (>= number 1000) (<= need 0) (<= remaining\
    \ 0)) '()]\n    [(and (>= number 1000) (<= need 1000) (<= remaining 100)) '()]\n\
    \    [(and (>= number 1000) (<= need 1000) (<= remaining 0)) '()]\n    [(and (>=\
    \ number 1000) (<= need 0) (<= remaining ", "  (cond\n    [(or (= remaining 0)\
    \ (= number 0))\n     (list 0 0)]\n    [(= remaining 0)\n     (list number 0)]\n\
    \    [else\n     (cond\n       [(= number need)\n        (list number 0)]\n  \
    \     [else\n        (cond\n          [(< number need)\n           (cond\n   \
    \          [(= remaining 0)\n               (list number 0)]\n             [else\n\
    \               (cond\n                 [(= remaining 0)\n                   (list\
    \ number 0)]\n                 [else\n                   (cond\n             \
    \        [(< remaining 0)\n                       (cond\n                    \
    \     [(= remaining 0)\n                           (list number 0)]\n        \
    \                 [else\n                           (cond\n                  \
    \           [(= remaining 0)\n                               (list number 0)]\n\
    \                             [else\n                               (cond\n  \
    \                               [(< remaining 0)\n                           \
    \        (cond\n                                     [(= remaining 0)\n      \
    \                                 (list number 0)]\n                         \
    \            [else\n                                       (cond\n           \
    \                              [(= remaining 0)\n                            \
    \               (list number 0)]\n                                         [else\n\
    \                                           (cond\n                          \
    \                   [(< remaining 0)\n                                       \
    \        (cond\n                                                 [(= remaining\
    \ 0)\n                                                   (list number 0)]\n  \
    \                                               [else\n                      \
    \                             (cond\n                                        \
    \             [(= remaining 0)\n                                             \
    \          (list number 0)]\n                                                \
    \     [else\n                                                       (cond\n  \
    \                                                       [(< remaining 0)\n   \
    \                                                        (cond\n             \
    \                                                [(= remaining 0)\n          \
    \                                                     (list number 0)]\n     \
    \                                                        [else\n             \
    \                                                  (cond\n                   \
    \                                             [(= remaining 0)\n             \
    \                                                    (list number 0)]\n      \
    \                                                          [else\n           \
    \                                                      (cond\n               \
    \                                                     [(< remaining 0)\n     \
    \                                                                (cond\n     \
    \                                                                   [(= remaining\
    \ 0)\n                                                                       \
    \  (list number 0)]\n                                                        \
    \                [else\n                                                     \
    \                    (cond\n                                                 \
    \                           [(= remaining 0)\n                               \
    \                                              (list number 0)]\n            \
    \                                                                [else\n     \
    \                                                                        (cond\n\
    \                                                                            \
    \  [(< remaining 0)\n                                                        \
    \                       (cond\n                                              \
    \                                   [(= remaining 0)\n                       \
    \                                                            (list number 0)]\n\
    \                                                                            \
    \      [else\n                                                               \
    \                    (cond\n                                                 \
    \                                    [(= remaining 0)\n                      \
    \                                                                 (list number\
    \ 0)]\n                                                                      \
    \               [else\n                                                      \
    \                                 (cond\n                                    \
    \                                                     [(< remaining 0)\n     \
    \                                                                            \
    \          (cond\n                                                           \
    \                                  [(= remaining 0)\n                        \
    \                                                                       (list\
    \ number 0)]\n                                                               \
    \                              [else\n                                       \
    \                                                        (cond\n             \
    \                                                                            \
    \        [(= remaining 0)\n                                                  \
    \                                                 (list number 0)]\n         \
    \                                                                            \
    \            [else\n                                                         \
    \                                          (cond\n                           \
    \                                                                          [(<\
    \ remaining 0)\n                                                             \
    \                                          (cond", "  (cond\n    [(and (<= number\
    \ 1000) (<= need 1000) (<= remaining 1000)) (list number need)]\n    [else (list\
    \ number need)]))\n", "  (cond\n    [(or (= remaining 0) (= number 0))\n     (list\
    \ 0 0)]\n    [(< remaining 0)\n     (list number 0)]\n    [(< number need)\n \
    \    (list (+ number need) (- remaining need))]\n    [else\n     (list (+ number\
    \ need) (- remaining need))]))\n", "  (cond\n    [(= remaining 0) (list number\
    \ 0)]\n    [(= remaining (- need number)) (list number 0)]\n    [else (cons (-\
    \ remaining (- need number)) (eat number (- number need) remaining))]\n  ))\n",
  "  (cond\n    [(or (= remaining 0) (= need 0))\n     (list number 0)]\n    [(= remaining\
    \ 0)\n     (list number 0)]\n    [(= need 0)\n     (list number 0)]\n    [else\n\
    \     (cond\n       [(= (modulo number remaining) 0)\n        (cond\n        \
    \ [(= number 0)\n          (list number 0)]\n         [else\n          (list number\
    \ (- number remaining))]\n         )]\n       [(= (modulo number remaining) 1)\n\
    \        (cond\n         [(= number 0)\n          (list 0 0)]\n         [else\n\
    \          (list 0 (- number remaining))]\n         )]\n       [(= (modulo number\
    \ remaining) 2)\n        (cond\n         [(= number 0)\n          (list 0 0)]\n\
    \         [else\n          (list 0 (- number remaining))]\n         )]\n     \
    \  [(= (modulo number remaining) 3)\n        (cond\n         [(= number 0)\n \
    \         (list 0 0)]\n         [else\n          (list 0 (- number remaining))]\n\
    \         )]\n       [(= (modulo number remaining) 4)\n        (cond\n       \
    \  [(= number 0)\n          (list 0 0)]\n         [else\n          (list 0 (-\
    \ number remaining))]\n         )]\n       [(= (modulo number remaining) 5)\n\
    \        (cond\n         [(= number 0)\n          (list 0 0)]\n         [else\n\
    \          (list 0 (- number remaining))]\n         )]\n       [(= (modulo number\
    \ remaining) 6)\n        (cond\n         [(= number 0)\n          (list 0 0)]\n\
    \         [else\n          (list 0 (- number remaining))]\n         )]\n     \
    \  [(= (modulo number remaining) 7)\n        (cond\n         [(= number 0)\n \
    \         (list 0 0)]\n         [else\n          (list 0 (- number remaining))]\n\
    \         )]\n       [(= (modulo number remaining) 8)\n        (cond\n       \
    \  [(= number 0)\n          (list 0 0)]\n         [else\n          (list 0 (-\
    \ number remaining))]\n         )]\n       [(= (modulo number remaining) 9)\n\
    \        (cond\n         [(= number 0)\n          (list 0 0)]\n         [else\n\
    \          (list 0 (- number remaining))]\n         )]\n       [(= (modulo number\
    \ remaining) 10)\n        (cond\n         [(= number 0)\n          (list 0 0)]\n\
    \         [else\n          ", "  (cond\n    [(= remaining 0) (list number 0)]\n\
    \    [(= remaining need) (list number 0)]\n    [else (cond\n             [(= (mod\
    \ number need) 0) (list number 0)]\n             [(= (mod number need) 1) (list\
    \ number (- need (mod number need)))]\n             [else (cond\n            \
    \          [(= (mod number need) 2) (list number (- need (mod number need)))]\n\
    \                      [(= (mod number need) 3) (list number (- need (mod number\
    \ need)))]\n                      [(= (mod number need) 4) (list number (- need\
    \ (mod number need)))]\n                      [(= (mod number need) 5) (list number\
    \ (- need (mod number need)))]\n                      [(= (mod number need) 6)\
    \ (list number (- need (mod number need)))]\n                      [(= (mod number\
    \ need) 7) (list number (- need (mod number need)))]\n                      [(=\
    \ (mod number need) 8) (list number (- need (mod number need)))]\n           \
    \           [(= (mod number need) 9) (list number (- need (mod number need)))]\n\
    \                      [(= (mod number need) 10) (list number (- need (mod number\
    \ need)))]\n                      [(= (mod number need) 11) (list number (- need\
    \ (mod number need)))]\n                      [(= (mod number need) 12) (list\
    \ number (- need (mod number need)))]\n                      [(= (mod number need)\
    \ 13) (list number (- need (mod number need)))]\n                      [(= (mod\
    \ number need) 14) (list number (- need (mod number need)))]\n               \
    \       [(= (mod number need) 15) (list number (- need (mod number need)))]\n\
    \                      [(= (mod number need) 16) (list number (- need (mod number\
    \ need)))]\n                      [(= (mod number need) 17) (list number (- need\
    \ (mod number need)))]\n                      [(= (mod number need) 18) (list\
    \ number (- need (mod number need)))]\n                      [(= (mod number need)\
    \ 19) (list number (- need (mod number need)))]\n                      [(= (mod\
    \ number need) 20) (list number (- need (mod number need)))]\n               \
    \       [(= (mod number need) 21) (list number (- need (mod number need)))]\n\
    \                      [(= (mod number need) 22) (list number (- need (mod number\
    \ need)))", "  (cond\n    [(= remaining 0) (list number 0)]\n    [(= remaining\
    \ (- need number)) (list number 0)]\n    [else (cons (- remaining (- need number))\
    \ (eat number (- need number) (remaining 0)))]))\n", "  (cond\n    [(or (= remaining\
    \ 0) (= number 0))\n     (list 0 0)]\n    [(= remaining 0)\n     (list number\
    \ 0)]\n    [(= number 0)\n     (list 0 0)]\n    [else\n     (cond\n       [(<\
    \ need number)\n        (cond\n         [(< remaining 0)\n          (cond\n  \
    \         [(< remaining 0)\n            (cond\n             [(< remaining 0)\n\
    \              (cond\n               [(< remaining 0)\n                (cond\n\
    \                 [(< remaining 0)\n                  (cond\n                \
    \   [(< remaining 0)\n                    (cond\n                     [(< remaining\
    \ 0)\n                      (cond\n                       [(< remaining 0)\n \
    \                       (cond\n                         [(< remaining 0)\n   \
    \                       (cond\n                           [(< remaining 0)\n \
    \                           (cond\n                             [(< remaining\
    \ 0)\n                              (cond\n                               [(<\
    \ remaining 0)\n                                (cond\n                      \
    \           [(< remaining 0)\n                                  (cond\n      \
    \                             [(< remaining 0)\n                             \
    \       (cond\n                                     [(< remaining 0)\n       \
    \                               (cond\n                                      \
    \ [(< remaining 0)\n                                        (cond\n          \
    \                               [(< remaining 0)\n                           \
    \               (cond\n                                           [(< remaining\
    \ 0)\n                                            (cond\n                    \
    \                         [(< remaining 0)\n                                 \
    \             (cond\n                                               [(< remaining\
    \ 0)\n                                                (cond\n                \
    \                                 (< remaining 0)\n                          \
    \                        (cond\n                                             \
    \      [(< remaining 0)\n                                                    (cond\n\
    \                                                     [(< remaining 0)\n     \
    \                                                 (cond\n                    \
    \                                   [(< remaining 0)\n                       \
    \                                 (cond\n                                    \
    \                     (< remaining 0)\n                                      \
    \                    (cond\n                                                 \
    \          [(< remaining 0)\n                                                \
    \            (cond\n                                                         \
    \    (< remaining 0)\n                                                       \
    \       (cond\n                                                              \
    \ (< remaining 0)\n                                                          \
    \      (cond\n                                                               \
    \  (< remaining 0)\n                                                         \
    \           (cond\n                                                          \
    \           (< remaining 0)\n                                                \
    \                     (cond\n                                                \
    \                     (< remaining 0)\n                                      \
    \                               (cond\n                                      \
    \                               (< remaining 0)\n                            \
    \                                         (cond\n                            \
    \                                         (< remaining 0)\n                  \
    \                                                   (cond\n                  \
    \                                                   (< remaining 0)\n        \
    \                                                             (cond\n        \
    \                                                             (< remaining 0)\n\
    \                                                                     (cond\n\
    \                                                                     (< remaining\
    \ 0)\n                                                                     (cond\n\
    \                                                                     (< remaining\
    \ 0)\n                                                                     (cond\n\
    \                                                                     (< remaining\
    \ 0)\n                                                                     (cond\n\
    \                                                                     (< remaining\
    \ 0)\n                                                                     (cond\n\
    \                                                                     (< remaining\
    \ 0)\n                                                                     (cond\n\
    \                                                                     (< remaining\
    \ 0)\n                                                                     (cond\n\
    \                                                                     (< remaining\
    \ 0)\n                                                                     (cond\n\
    \                                                                     (< remaining\
    \ 0)\n                                                                     (",
  "  (cond\n    [(or (= remaining 0) (= number 0))\n     (list 0 0)]\n    [(= remaining\
    \ 0)\n     (list number 0)]\n    [else\n     (cond\n       [(= (modulo number\
    \ need) 0)\n        (list number 0)]\n       [(< number need)\n        (cons (-\
    \ number need)\n               (eat number (- number need) remaining))]\n    \
    \   [else\n        (cons (- number need)\n               (eat number (- number\
    \ need) remaining))]\n       )]))\n", "  (cond\n    [(and (<= number 1000) (<=\
    \ need 1000) (<= remaining 1000)) (list number need)]\n    [else (list number\
    \ need)]))\n", "  (cond\n    [(or (= remaining 0) (= number 0))\n     (list 0\
    \ 0)]\n    [(= remaining 0)\n     (list number 0)]\n    [(= number 0)\n     (list\
    \ 0 0)]\n    [else\n     (let ([carrots (- remaining need)])\n       (cond\n \
    \        [(< carrots 0)\n          (list 0 0)]\n         [(= carrots 0)\n    \
    \      (list number 0)]\n         [else\n          (let ([remaining-carrots (-\
    \ carrots number)])\n            (cond\n              [(< remaining-carrots 0)\n\
    \               (list 0 0)]\n              [(= remaining-carrots 0)\n        \
    \       (list number 0)]\n              [else\n               (list number remaining-carrots)]))]))]))\n",
  "  (cond\n    [(or (= remaining 0) (= need 0))\n     (list number 0)]\n    [(< remaining\
    \ 0)\n     (list number 0)]\n    [(< need 0)\n     (list number 0)]\n    [else\n\
    \     (let ([carrots (- remaining need)])\n       (cond\n         [(< carrots\
    \ 0)\n          (list number 0)]\n         [(< carrots number)\n          (list\
    \ number carrots)]\n         [else\n          (list number (+ carrots number))]))]))\n",
  "  (cond\n    [(or (= remaining 0) (= number 0))\n     (list 0 0)]\n    [(= remaining\
    \ 0)\n     (list number 0)]\n    [(= number 0)\n     (list 0 0)]\n    [else\n\
    \     (cond\n       [(= remaining need)\n        (list number 0)]\n       [else\n\
    \        (cond\n          [(< remaining need)\n           (cond\n            \
    \ [(= remaining 0)\n               (list number 0)]\n             [else\n    \
    \           (cond\n                 [(= remaining (- need remaining))\n      \
    \             (list number 0)]\n                 [else\n                   (cond\n\
    \                     [(= remaining (- need (- number remaining)))\n         \
    \              (list number 0)]\n                     [else\n                \
    \       (cond\n                         [(= remaining (- need (- number remaining)))\n\
    \                           (list number 0)]\n                         [else\n\
    \                           (cond\n                             [(= remaining\
    \ (- need (- number remaining)))\n                               (list number\
    \ 0)]\n                             [else\n                               (cond\n\
    \                                 [(= remaining (- need (- number remaining)))\n\
    \                                   (list number 0)]\n                       \
    \          [else\n                                   (cond\n                 \
    \                    [(= remaining (- need (- number remaining)))\n          \
    \                             (list number 0)]\n                             \
    \        [else\n                                       (cond\n               \
    \                          [(= remaining (- need (- number remaining)))\n    \
    \                                       (list number 0)]\n                   \
    \                      [else\n                                           (cond\n\
    \                                             [(= remaining (- need (- number\
    \ remaining)))\n                                               (list number 0)]\n\
    \                                             [else\n                        \
    \                       (cond\n                                              \
    \   [(= remaining (- need (- number remaining)))\n                           \
    \                        (list number 0)]\n                                  \
    \               [else\n                                                   (cond\n\
    \                                                     [(= remaining (- need (-\
    \ number remaining)))\n                                                      \
    \ (list number 0)]\n                                                     [else\n\
    \                                                       (cond\n              \
    \                                           [(= remaining (- need (- number remaining)))\n\
    \                                                           (list number 0)]\n\
    \                                                         [else\n            \
    \                                               (cond\n                      \
    \                                       [(= remaining (- need (- number remaining)))\n\
    \                                                               (list number 0)]\n\
    \                                                             [else\n        \
    \                                                       (cond\n              \
    \                                                  [(= remaining (- need (- number\
    \ remaining)))\n                                                             \
    \    (list number 0)]\n                                                      \
    \          [else\n                                                           \
    \      (cond\n                                                               \
    \    [(= remaining (- need (- number remaining)))\n                          \
    \                                           (list number 0)]\n               \
    \                                                    [else\n                 \
    \                                                    (cond\n                 \
    \                                                    [(= remaining (- need (-\
    \ number remaining)))\n                                                      \
    \                   (list ", "  (cond\n    [(and (<= number 1000) (<= need 1000)\
    \ (<= remaining 1000)) (list number need)]\n    [else (list number need)]))\n",
  "  (cond\n    [(or (= remaining 0) (= number 0))\n     (list 0 0)]\n    [(= remaining\
    \ 0)\n     (list number 0)]\n    [(= number 0)\n     (list 0 0)]\n    [else\n\
    \     (cond\n       [(= (mod number need) 0)\n        (list 0 0)]\n       [(=\
    \ (mod number need) 1)\n        (list number (- need (mod number need)))]\n  \
    \     [else\n        (cond\n          [(= (mod number need) 2)\n           (list\
    \ number (- need (mod number need)))]\n          [else\n           (cond\n   \
    \          [(= (mod number need) 3)\n              (list number (- need (mod number\
    \ need)))]\n             [else\n              (cond\n                [(= (mod\
    \ number need) 4)\n                 (list number (- need (mod number need)))]\n\
    \                [else\n                 (cond\n                   [(= (mod number\
    \ need) 5)\n                    (list number (- need (mod number need)))]\n  \
    \                 [else\n                    (cond\n                      [(=\
    \ (mod number need) 6)\n                       (list number (- need (mod number\
    \ need)))]\n                      [else\n                       (cond\n      \
    \                   [(= (mod number need) 7)\n                           (list\
    \ number (- need (mod number need)))]\n                         [else\n      \
    \                     (cond\n                             [(= (mod number need)\
    \ 8)\n                               (list number (- need (mod number need)))]\n\
    \                             [else\n                               (cond\n  \
    \                               [(= (mod number need) 9)\n                   \
    \                (list number (- need (mod number need)))]\n                 \
    \                [else\n                                   (cond\n           \
    \                          [(= (mod number need) 10)\n                       \
    \                (list number (- need (mod number need)))]\n                 \
    \                    [else\n                                       (cond\n   \
    \                                      [(= (mod number need) 11)\n           \
    \                                (list number (- need (mod number need)))]\n \
    \                                        [else\n                             \
    \              (cond\n                                             [(= (mod number\
    \ need) 12)\n                                               (list number (- need\
    \ (mod number need)))]\n                                             [else\n \
    \                                              (cond\n                       \
    \                          [(= (mod number need) 13)\n                       \
    \                            (list number (- need (mod number need)))]\n     \
    \                                            [else\n                         \
    \                          (cond\n                                           \
    \          [(= (mod number need) 14)\n                                       \
    \                (list number (- need (mod number need)))]\n                 \
    \                                    [else\n                                 \
    \                      (cond\n                                               \
    \        [(= (mod number need) 15)\n                                         \
    \               (list number (- need (mod number need)))", "  (cond\n    [(= remaining\
    \ 0) (list number 0)]\n    [(= remaining (- number need)) (list number 0)]\n \
    \   [else (cons (- remaining (- number need)) (eat number (- number need) (- remaining\
    \ (- number need)))) ]\n  ))\n", "  (cond\n    [(and (<= number 1000) (<= need\
    \ 1000) (<= remaining 1000)) (list number need)]\n    [else (list number need)]))\n",
  "  (cond\n    [(= remaining 0) (list number 0)]\n    [(= remaining 1) (list number\
    \ 1)]\n    [(= remaining (- need number)) (list number 0)]\n    [else (cons (-\
    \ remaining (- need number)) (eat number (- need number) (remaining 0)))]))\n",
  "  (cond\n    [(or (= remaining 0) (= number 0))\n     (list 0 0)]\n    [(= remaining\
    \ 0)\n     (list number 0)]\n    [(= number 0)\n     (list 0 0)]\n    [else\n\
    \     (cond\n       [(= (modulo remaining need) 0)\n        (list remaining 0)]\n\
    \       [(= (modulo remaining need) 1)\n        (list remaining (- remaining need))]\n\
    \       [(= (modulo remaining need) 2)\n        (list remaining (- remaining need)\
    \ (- remaining need))]\n       [(= (modulo remaining need) 3)\n        (list remaining\
    \ (- remaining need) (- remaining need) (- remaining need))]\n       [(= (modulo\
    \ remaining need) 4)\n        (list remaining (- remaining need) (- remaining\
    \ need) (- remaining need) (- remaining need))]\n       [(= (modulo remaining\
    \ need) 5)\n        (list remaining (- remaining need) (- remaining need) (- remaining\
    \ need) (- remaining need) (- remaining need))]\n       [(= (modulo remaining\
    \ need) 6)\n        (list remaining (- remaining need) (- remaining need) (- remaining\
    \ need) (- remaining need) (- remaining need) (- remaining need))]\n       [(=\
    \ (modulo remaining need) 7)\n        (list remaining (- remaining need) (- remaining\
    \ need) (- remaining need) (- remaining need) (- remaining need) (- remaining\
    \ need) (- remaining need))]\n       [(= (modulo remaining need) 8)\n        (list\
    \ remaining (- remaining need) (- remaining need) (- remaining need) (- remaining\
    \ need) (- remaining need) (- remaining need) (- remaining need) (- remaining\
    \ need))]\n       [(= (modulo remaining need) 9)\n        (list remaining (- remaining\
    \ need) (- remaining need) (- remaining need) (- remaining need) (- remaining\
    \ need) (- remaining need) (- remaining need) (- remaining need) (- remaining\
    \ need))]\n       [(= (modulo remaining need) 10)\n        (list remaining (-\
    \ remaining need) (- remaining need) (- remaining need) (- remaining need) (-\
    \ remaining need) (- remaining need) (- remaining need) (- remaining need) (-\
    \ remaining need) (- remaining need))]\n       [(= (modulo remaining need) 11)\n\
    \        (list remaining (- remaining need) (- remaining need) (- remaining need)\
    \ (- remaining need) (- remaining need) (- remaining need) (- remaining need)\
    \ (- remaining need) (- remaining need) (- remaining need) (- remaining need))]\n\
    \       [(= (modu", "  (cond\n    [(and (<= 0 number 1000) (<= 0 need 1000) (<=\
    \ 0 remaining 1000)) (list 0 0)]\n    [(and (<= 0 number 1000) (<= 0 need 1000)\
    \ (< remaining 0)) (list 0 0)]\n    [(and (<= 0 number 1000) (< need 0) (<= 0\
    \ remaining 1000)) (list 0 0)]\n    [(and (<= 0 number 1000) (< need 0) (< remaining\
    \ 0)) (list 0 0)]\n    [(and (<= 0 number 1000) (< need 0) (< remaining 0)) (list\
    \ 0 0)]\n    [(and (<= 0 number 1000) (< need 0) (< remaining 0)) (list 0 0)]\n\
    \    [(and (<= 0 number 1000) (< need 0) (< remaining 0)) (list 0 0)]\n    [(and\
    \ (<= 0 number 1000) (< need 0) (< remaining 0)) (list 0 0)]\n    [(and (<= 0\
    \ number 1000) (< need 0) (< remaining 0)) (list 0 0)]\n    [(and (<= 0 number\
    \ 1000) (< need 0) (< remaining 0)) (list 0 0)]\n    [(and (<= 0 number 1000)\
    \ (< need 0) (< remaining 0)) (list 0 0)]\n    [(and (<= 0 number 1000) (< need\
    \ 0) (< remaining 0)) (list 0 0)]\n    [(and (<= 0 number 1000) (< need 0) (<\
    \ remaining 0)) (list 0 0)]\n    [(and (<= 0 number 1000) (< need 0) (< remaining\
    \ 0)) (list 0 0)]\n    [(and (<= 0 number 1000) (< need 0) (< remaining 0)) (list\
    \ 0 0)]\n    [(and (<= 0 number 1000) (< need 0) (< remaining 0)) (list 0 0)]\n\
    \    [(and (<= 0 number 1000) (< need 0) (< remaining 0)) (list 0 0)]\n    [(and\
    \ (<= 0 number 1000) (< need 0) (< remaining 0)) (list 0 0)]\n    [(and (<= 0\
    \ number 1000) (< need 0) (< remaining 0)) (list 0 0)]\n    [(and (<= 0 number\
    \ 1000) (< need 0) (< remaining 0)) (list 0 0)]\n    [(and (<= 0 number 1000)\
    \ (< need 0) (< remaining 0)) (list 0 0)]\n    [(and (<= 0 number 1000) (< need\
    \ 0) (< remaining 0)) (list 0 0)]\n    [(and (<= 0 number 1000) (< need 0) (<\
    \ remaining 0)) (list 0 ", "  (cond\n    [(and (>= number 0) (<= need 1000) (<=\
    \ remaining 1000)) (list number 0)]\n    [(and (>= number 0) (<= need 1000) (<=\
    \ remaining 0)) (list number 0)]\n    [(and (>= number 0) (<= need 0) (<= remaining\
    \ 1000)) (list number 0)]\n    [(and (>= number 0) (<= need 0) (<= remaining 0))\
    \ (list number 0)]\n    [(and (>= number 0) (<= need 1000) (<= remaining 1000))\
    \ (list number 0)]\n    [(and (>= number 0) (<= need 1000) (<= remaining 0)) (list\
    \ number 0)]\n    [(and (>= number 0) (<= need 0) (<= remaining 1000)) (list number\
    \ 0)]\n    [(and (>= number 0) (<= need 0) (<= remaining 0)) (list number 0)]\n\
    \    [(and (>= number 0) (<= need 1000) (<= remaining 1000)) (list number 0)]\n\
    \    [(and (>= number 0) (<= need 1000) (<= remaining 0)) (list number 0)]\n \
    \   [(and (>= number 0) (<= need 0) (<= remaining 1000)) (list number 0)]\n  \
    \  [(and (>= number 0) (<= need 0) (<= remaining 0)) (list number 0)]\n    [(and\
    \ (>= number 0) (<= need 1000) (<= remaining 1000)) (list number 0)]\n    [(and\
    \ (>= number 0) (<= need 1000) (<= remaining 0)) (list number 0)]\n    [(and (>=\
    \ number 0) (<= need 0) (<= remaining 1000)) (list number 0)]\n    [(and (>= number\
    \ 0) (<= need 0) (<= remaining 0)) (list number 0)]\n    [(and (>= number 0) (<=\
    \ need 1000) (<= remaining 1000)) (list number 0)]\n    [(and (>= number 0) (<=\
    \ need 1000) (<= remaining 0)) (list number 0)]\n    [(and (>= number 0) (<= need\
    \ 0) (<= remaining 1000)) (list number 0)]\n    [(and (>= number 0) (<= need 0)\
    \ (<= remaining 0)) (list number 0)]\n    [(and (>= number 0) (<= need 1000) (<=\
    \ remaining 1000)) (list number 0)]\n    [(and (>= number 0) (<= need 1000) (<=\
    \ remaining 0)) (list number 0)]\n    [(and (>= number 0) (<= need 0) (<= remaining\
    \ 1000)) (list number 0)]\n    [(and (>= number 0) (<= need 0) (<= remaining 0))\
    \ (list number 0)]\n    [(and (>= number 0) (<= need 1000) (<= remaining 1000))\
    \ (list ", "  (cond\n    [(or (= remaining 0) (= need 0))\n     (list number 0)]\n\
    \    [(= remaining 0)\n     (list number 0)]\n    [else\n     (let ([carrots (-\
    \ remaining need)])\n       (cond\n         [(< carrots 0)\n          (list number\
    \ 0)]\n         [(< carrots number)\n          (list number carrots)]\n      \
    \   [else\n          (list number (- carrots number))]))]))\n", "  (cond\n   \
    \ [(or (= remaining 0) (= number 0))\n     (list 0 0)]\n    [(= remaining 0)\n\
    \     (list number 0)]\n    [(= number 0)\n     (list 0 0)]\n    [else\n     (cond\n\
    \       [(= (modulo remaining need) 0)\n        (list remaining 0)]\n       [(=\
    \ (modulo remaining need) 1)\n        (list remaining (- remaining need))]\n \
    \      [(= (modulo remaining need) 2)\n        (list remaining (- remaining need)\
    \ (- remaining need))]\n       [(= (modulo remaining need) 3)\n        (list remaining\
    \ (- remaining need) (- remaining need) (- remaining need))]\n       [(= (modulo\
    \ remaining need) 4)\n        (list remaining (- remaining need) (- remaining\
    \ need) (- remaining need) (- remaining need))]\n       [(= (modulo remaining\
    \ need) 5)\n        (list remaining (- remaining need) (- remaining need) (- remaining\
    \ need) (- remaining need) (- remaining need))]\n       [(= (modulo remaining\
    \ need) 6)\n        (list remaining (- remaining need) (- remaining need) (- remaining\
    \ need) (- remaining need) (- remaining need) (- remaining need))]\n       [(=\
    \ (modulo remaining need) 7)\n        (list remaining (- remaining need) (- remaining\
    \ need) (- remaining need) (- remaining need) (- remaining need) (- remaining\
    \ need) (- remaining need))]\n       [(= (modulo remaining need) 8)\n        (list\
    \ remaining (- remaining need) (- remaining need) (- remaining need) (- remaining\
    \ need) (- remaining need) (- remaining need) (- remaining need) (- remaining\
    \ need))]\n       [(= (modulo remaining need) 9)\n        (list remaining (- remaining\
    \ need) (- remaining need) (- remaining need) (- remaining need) (- remaining\
    \ need) (- remaining need) (- remaining need) (- remaining need) (- remaining\
    \ need))]\n       [(= (modulo remaining need) 10)\n        (list remaining (-\
    \ remaining need) (- remaining need) (- remaining need) (- remaining need) (-\
    \ remaining need) (- remaining need) (- remaining need) (- remaining need) (-\
    \ remaining need) (- remaining need))]\n       [(= (modulo remaining need) 11)\n\
    \        (list remaining (- remaining need) (- remaining need) (- remaining need)\
    \ (- remaining need) (- remaining need) (- remaining need) (- remaining need)\
    \ (- remaining need) (- remaining need) (- remaining need) (- remaining need))]\n\
    \       [(= (modu", "  (cond\n    [(or (= remaining 0) (= number 0))\n     (list\
    \ 0 0)]\n    [(= remaining 0)\n     (list number 0)]\n    [else\n     (cond\n\
    \       [(< need number)\n        (cons (- number need)\n               (eat number\
    \ (- need number) remaining))]\n       [(< number need)\n        (cons (- need\
    \ number)\n               (eat need number (- number need) remaining))]\n    \
    \   [(< number remaining)\n        (cons number (eat need number (- number remaining)\
    \ remaining))]\n       [(< remaining number)\n        (cons (- number remaining)\
    \ (eat need number (- number remaining) remaining))]\n       [(< remaining 0)\n\
    \        (cons 0 (eat need number (- remaining number) remaining))]\n       [(<\
    \ remaining 0)\n        (cons 0 (eat need 0 (- remaining 0) remaining))]\n   \
    \    [(< remaining 0)\n        (cons 0 (eat 0 (- remaining 0) remaining))]\n \
    \      [(< remaining 0)\n        (cons 0 (eat 0 (- remaining 0) remaining))]\n\
    \       [(< remaining 0)\n        (cons 0 (eat 0 (- remaining 0) remaining))]\n\
    \       [(< remaining 0)\n        (cons 0 (eat 0 (- remaining 0) remaining))]\n\
    \       [(< remaining 0)\n        (cons 0 (eat 0 (- remaining 0) remaining))]\n\
    \       [(< remaining 0)\n        (cons 0 (eat 0 (- remaining 0) remaining))]\n\
    \       [(< remaining 0)\n        (cons 0 (eat 0 (- remaining 0) remaining))]\n\
    \       [(< remaining 0)\n        (cons 0 (eat 0 (- remaining 0) remaining))]\n\
    \       [(< remaining 0)\n        (cons 0 (eat 0 (- remaining 0) remaining))]\n\
    \       [(< remaining 0)\n        (cons 0 (eat 0 (- remaining 0) remaining))]\n\
    \       [(< remaining 0)\n        (cons 0 (eat 0 (- remaining 0) remaining))]\n\
    \       [(< remaining 0)\n        (cons 0 (eat 0 (- remaining 0) remaining))]\n\
    \       [(< remaining 0)\n        (cons 0 (eat 0 (- remaining 0) remaining))]\n\
    \       [(< remaining 0)\n        (cons 0 (eat 0 (- remaining 0) remaining))]\n\
    \       [(< remaining 0)\n        (cons 0 (eat 0 (- remaining 0) remaining))]\n\
    \       [(< remaining 0)\n        (cons 0 (eat 0 (- remaining 0) remaining))]\n\
    \       [(< remaining 0)\n        (cons 0 (eat 0 (- remaining 0) remaining))]\n\
    \       [(< remaining 0)\n        (cons 0 (eat 0 (", "  (cond\n    [(and (<= number\
    \ 1000) (<= need 1000) (<= remaining 1000)) (list number need)]\n    [else (list\
    \ number need (remaining (remaining - need)))]))\n", "  (cond\n    [(= remaining\
    \ 0) (list number 0)]\n    [(= remaining 0) (list number 0)]\n    [else (cons\
    \ (- number need) (eat remaining (- number need) (- remaining 1)))]))\n", "  (cond\n\
    \    [(or (= remaining 0) (= number 0))\n     (list 0 0)]\n    [(< remaining 0)\n\
    \     (list number 0)]\n    [(< number need)\n     (cons (- number need)\n   \
    \        (eat remaining (- number need) remaining))]\n    [else\n     (cons (-\
    \ number need)\n           (eat remaining need (- number need)))]))\n", "  (cond\n\
    \    [(or (= remaining 0) (= number 0))\n     (list 0 0)]\n    [(= remaining 0)\n\
    \     (list number 0)]\n    [(= number 0)\n     (list 0 0)]\n    [else\n     (let\
    \ ([carrots (- remaining need)])\n       (cond\n         [(= carrots 0)\n    \
    \      (list number 0)]\n         [(< carrots 0)\n          (list 0 0)]\n    \
    \     [else\n          (list number (- carrots 1))]\n       ))]))\n", "  (cond\n\
    \    [(and (<= number 1000) (<= need 1000) (<= remaining 1000)) (list number need)]\n\
    \    [else (list number need)]))\n", "  (cond\n    [(or (< number 0) (< need 0)\
    \ (< remaining 0))\n     (list 0 0)]\n    [(< number need)\n     (list need 0)]\n\
    \    [(< need number)\n     (list number 0)]\n    [else\n     (let ([carrots (-\
    \ remaining need)])\n       (cond\n         [(< carrots 0)\n          (list number\
    \ 0)]\n         [(< carrots number)\n          (list number carrots)]\n      \
    \   [else\n          (list number (- carrots number))]))]))\n", "  (cond\n   \
    \ [(or (= remaining 0) (= number 0))\n     (list 0 0)]\n    [(= remaining 0)\n\
    \     (list number 0)]\n    [(= number 0)\n     (list 0 0)]\n    [else\n     (cond\n\
    \       [(= (modulo remaining need) 0)\n        (list number 0)]\n       [(< remaining\
    \ need)\n        (list 0 (- remaining need))]\n       [else\n        (list number\
    \ (- remaining need))]\n       )]))\n", "  (cond\n    [(or (= remaining 0) (=\
    \ number 0))\n     (list 0 0)]\n    [(= remaining 0)\n     (list number 0)]\n\
    \    [(= number 0)\n     (list 0 0)]\n    [else\n     (cond\n       [(= remaining\
    \ need)\n        (list number 0)]\n       [(< remaining need)\n        (cond\n\
    \          [(< remaining (- need number))\n           (list number 0)]\n     \
    \     [(< remaining (- need (- number 1)))\n           (list number (- number\
    \ 1))]\n          [(< remaining (- need (- number 2)))\n           (list number\
    \ (- number 2))]\n          [(< remaining (- need (- number 3)))\n           (list\
    \ number (- number 3))]\n          [(< remaining (- need (- number 4)))\n    \
    \       (list number (- number 4))]\n          [(< remaining (- need (- number\
    \ 5)))\n           (list number (- number 5))]\n          [(< remaining (- need\
    \ (- number 6)))\n           (list number (- number 6))]\n          [(< remaining\
    \ (- need (- number 7)))\n           (list number (- number 7))])]\n       [(<\
    \ remaining (- need (- number 8)))\n        (cond\n          [(< remaining (-\
    \ need (- number 9)))\n           (list number (- number 9))])]\n       [(< remaining\
    \ (- need (- number 10)))\n        (cond\n          [(< remaining (- need (- number\
    \ 11)))\n           (list number (- number 11))])]\n       [(< remaining (- need\
    \ (- number 12)))\n        (cond\n          [(< remaining (- need (- number 13)))\n\
    \           (list number (- number 13))])]\n       [(< remaining (- need (- number\
    \ 14)))\n        (cond\n          [(< remaining (- need (- number 15)))\n    \
    \       (list number (- number 15))])]\n       [(< remaining (- need (- number\
    \ 16)))\n        (cond\n          [(< remaining (- need (- number 17)))\n    \
    \       (list number (- number 17))])]\n       [(< remaining (- need (- number\
    \ 18)))\n        (cond\n          [(< remaining (- need (- number 19)))\n    \
    \       (list number (- number 19))])]\n       [(< remaining (- need (- number\
    \ 20)))\n        (cond\n          [(< remaining (- need (- number 21)))\n    \
    \       (list number (- number 21))])]\n       [(< remaining (", "  (cond\n  \
    \  [(= remaining 0) (list number 0)]\n    [(= remaining (- need number)) (list\
    \ number 0)]\n    [else (cons (- remaining (- need number)) (eat number (- need\
    \ number) (remaining 0)))]))\n", "  (cond\n    [(= remaining 0) (list number 0)]\n\
    \    [(= remaining need) (list number 0)]\n    [else (cond\n             [(= remaining\
    \ (- need number)) (list number 0)]\n             [else (cond\n              \
    \        [(= remaining (- need (- number need)))\n                       (list\
    \ number 0)]\n                      [else (cond\n                            \
    \   [(= remaining (- need (- number need) (- number remaining)))\n           \
    \                     (list number 0)]\n                               [else (cond\n\
    \                                        [(= remaining (- need (- number need)\
    \ (- number remaining) (- number remaining)))\n                              \
    \           (list number 0)]\n                                        [else (cond\n\
    \                                                 [(= remaining (- need (- number\
    \ need) (- number remaining) (- number remaining) (- number remaining)))\n   \
    \                                               (list number 0)]\n           \
    \                                      [else (cond\n                         \
    \                                [(= remaining (- need (- number need) (- number\
    \ remaining) (- number remaining) (- number remaining) (- number remaining)))\n\
    \                                                          (list number 0)]\n\
    \                                                         [else (cond\n      \
    \                                                             [(= remaining (-\
    \ need (- number need) (- number remaining) (- number remaining) (- number remaining)\
    \ (- number remaining) (- number remaining)))\n                              \
    \                                    (list number 0)]\n                      \
    \                                             [else (cond\n                  \
    \                                                        [(= remaining (- need\
    \ (- number need) (- number remaining) (- number remaining) (- number remaining)\
    \ (- number remaining) (- number remaining) (- number remaining)))\n         \
    \                                                                 (list number\
    \ 0)]\n                                                                      \
    \    [else (cond\n                                                           \
    \                      [(= remaining (- need (- number need) (- number remaining)\
    \ (- number remaining) (- number remaining) (- number remaining) (- number remaining)\
    \ (- number remaining) (- number remaining)))\n                              \
    \                                                   (list number 0)]\n       \
    \                                                                          [else\
    \ (cond\n                                                                    \
    \                     [(= remaining (- need (- number need) (- number remaining)\
    \ (- number remaining) (- number remaining) (- number remaining) (- number remaining)\
    \ (- number remaining) (- number remaining)))\n                              \
    \                                                           (list number 0)]\n\
    \                                                                            \
    \            [else (cond\n                                                   \
    \                                              [(= remaining (- need (- number\
    \ need) (- number remaining) (- number remaining) (- number remaining) (- number\
    \ remaining) (- number remaining) (- number remaining) (- number remaining) (-\
    \ number remaining)))\n                                                      \
    \                                           (list number 0)]\n               \
    \                                                                            \
    \      [else (cond\n                                                         \
    \                                                [(= remaining (- need (- number\
    \ need) (- number remaining) (", "  (cond\n    [(or (= remaining 0) (= number\
    \ 0))\n     (list 0 0)]\n    [(< remaining 0)\n     (list number 0)]\n    [(<\
    \ number need)\n     (list (+ remaining (* number need)) 0)]\n    [else\n    \
    \ (list (+ remaining (* number need)) (- number need))]))\n", "  (cond\n    [(and\
    \ (<= remaining 0) (<= need 0))\n     (list number 0)]\n    [(and (<= remaining\
    \ 0) (< need 0))\n     (list number 0)]\n    [else\n     (cond\n       [(= remaining\
    \ 0)\n        (cond\n         [(< number need)\n          (list number 0)]\n \
    \        [else\n          (list number need)]\n         )]\n       [(< number\
    \ need)\n        (cond\n         [(= remaining 0)\n          (list number 0)]\n\
    \         [else\n          (list number need)]\n         )]\n       [else\n  \
    \      (cond\n         [(= remaining 0)\n          (list number 0)]\n        \
    \ [else\n          (list number need)]\n         )]\n       ])]))\n", "  (cond\n\
    \    [(= remaining 0) (list number 0)]\n    [(= remaining (- need number)) (list\
    \ number 0)]\n    [else (cons (- remaining (- need number)) (eat number (- need\
    \ number) (remaining 0)))]))\n", "  (cond\n    [(or (= remaining 0) (= number\
    \ 0))\n     (list 0 0)]\n    [(= remaining 0)\n     (list number 0)]\n    [(=\
    \ number 0)\n     (list 0 0)]\n    [else\n     (let ([carrots (- remaining need)])\n\
    \       (cond\n         [(< carrots 0)\n          (list 0 0)]\n         [(= carrots\
    \ 0)\n          (list number 0)]\n         [else\n          (list number (- carrots\
    \ 1))]\n       ))]))\n", "  (cond\n    [(or (< number 1000) (< need 1000) (< remaining\
    \ 1000)) (list 0 0)]\n    [(= remaining 0) (list number need)]\n    [else (cons\
    \ (- number need) (cons remaining (- remaining need)))]))\n", "  (cond\n    [(or\
    \ (= remaining 0) (= number 0))\n     (list 0 0)]\n    [(< remaining 0)\n    \
    \ (list 0 0)]\n    [else\n     (cond\n       [(< need 0)\n        (cond\n    \
    \     [(= remaining 0)\n          (list 0 0)]\n         [else\n          (cond\n\
    \            [(= (mod number 2) 0)\n             (cond\n              [(= remaining\
    \ 0)\n               (list 0 0)]\n              [else\n               (cond\n\
    \                 [(= (mod number 3) 0)\n                   (cond\n          \
    \           [(= remaining 0)\n                      (list 0 0)]\n            \
    \         [else\n                      (cond\n                        [(= (mod\
    \ number 5) 0)\n                         (cond\n                          [(=\
    \ remaining 0)\n                           (list 0 0)]\n                     \
    \     [else\n                           (cond\n                             [(=\
    \ (mod number 7) 0)\n                             (cond\n                    \
    \          [(= remaining 0)\n                               (list 0 0)]\n    \
    \                          [else\n                               (cond\n     \
    \                            [(= (mod number 9) 0)\n                         \
    \         (cond\n                                   [(= remaining 0)\n       \
    \                             (list 0 0)]\n                                  \
    \ [else\n                                    (cond\n                         \
    \            [(= (mod number 11) 0)\n                                      (cond\n\
    \                                       [(= remaining 0)\n                   \
    \                     (list 0 0)]\n                                       [else\n\
    \                                        (cond\n                             \
    \            [(= (mod number 13) 0)\n                                        \
    \  (cond\n                                           [(= remaining 0)\n      \
    \                                       (list 0 0)]\n                        \
    \                   [else\n                                             (cond\n\
    \                                              [(= (mod number 15) 0)\n      \
    \                                         (cond\n                            \
    \                     [(= remaining 0)\n                                     \
    \             (list 0 0)]\n                                                 [else\n\
    \                                                  (cond\n                   \
    \                                [(= (mod number 17) 0)\n                    \
    \                                (cond\n                                     \
    \                [(= remaining 0)\n                                          \
    \            (list 0 0)]\n                                                   \
    \  [else\n                                                      (cond\n      \
    \                                                 [(= (mod number 19) 0)\n   \
    \                                                     (cond\n                \
    \                                         [(= remaining 0)\n                 \
    \                                         (list 0 0)]\n                      \
    \                                   [else\n                                  \
    \                        (cond\n                                             \
    \              [(= (mod number 21) 0)\n                                      \
    \                      (cond\n                                               \
    \              [(= remaining 0)\n                                            \
    \                  (list 0 0)]\n                                             \
    \                [else\n                                                     \
    \         (cond\n                                                            \
    \   [(= (mod number 23) 0)\n                                                 \
    \               (cond\n                                                      \
    \           [(= remaining 0)\n                                               \
    \                   (list 0 0)]\n                                            \
    \                     [else\n                                                \
    \                  (cond\n                                                   \
    \                [(= (mod number 25) 0)\n                                    \
    \                                (cond\n                                     \
    \                                [(= remaining 0)\n                          \
    \                                            (list 0 ", "  (cond\n    [(= remaining\
    \ 0) (list number 0)]\n    [(= remaining (- need number)) (list number 0)]\n \
    \   [else (cons (- remaining (- need number)) (eat number (- need number) (- remaining\
    \ number)))]))\n", "  (cond\n    [(= remaining 0) (list number 0)]\n    [(= remaining\
    \ need) (list number 0)]\n    [else (cons (- remaining need) (cons remaining (-\
    \ number need)))]))\n", "  (cond\n    [(or (= remaining 0) (= number 0))\n   \
    \  (list 0 0)]\n    [(= remaining 0)\n     (list number 0)]\n    [(= number 0)\n\
    \     (list 0 0)]\n    [else\n     (cond\n       [(< need (- remaining number))\n\
    \        (list 0 0)]\n       [(< remaining 0)\n        (list number 0)]\n    \
    \   [(< number 0)\n        (list 0 0)]\n       [(= need 0)\n        (list 0 0)]\n\
    \       [else\n        (cond\n          [(< remaining number)\n           (list\
    \ number (- remaining number))]\n          [(< number need)\n           (list\
    \ number (- need number))]\n          [(= number need)\n           (list number\
    \ 0)]\n          [else\n           (list number (- remaining number))]\n     \
    \    )]\n      )]\n   ))\n", "  (cond\n    [(= remaining 0) (list number 0)]\n\
    \    [(= remaining need) (list number 0)]\n    [else (cons (- remaining need)\
    \ (cons number (eat remaining (- need number) 0)))]))\n", "  (cond\n    [(or (=\
    \ remaining 0) (= number 0))\n     (list 0 0)]\n    [(or (= remaining 0) (= number\
    \ need))\n     (list need 0)]\n    [else\n     (let ([remaining-carrots (- remaining\
    \ need)])\n       (cond\n         [(< remaining-carrots 0)\n          (list 0\
    \ 0)]\n         [(< remaining-carrots number)\n          (list need 0)]\n    \
    \     [else\n          (list number (- remaining-carrots number))]))]))\n", " \
    \ (cond\n    [(and (<= 0 number 1000) (<= 0 need 1000) (<= 0 remaining 1000))\
    \ (list 0 0)]\n    [(and (<= 0 number 1000) (<= 0 need 1000) (> remaining 0))\
    \ (list 0 0)]\n    [(and (<= 0 number 1000) (> need 0) (<= 0 remaining 1000))\
    \ (list 0 0)]\n    [(and (<= 0 number 1000) (> need 0) (> remaining 0)) (list\
    \ 0 0)]\n    [(and (> number 0) (<= 0 need 1000) (<= 0 remaining 1000)) (list\
    \ 0 0)]\n    [(and (> number 0) (<= 0 need 1000) (> remaining 0)) (list 0 0)]\n\
    \    [(and (> number 0) (> need 0) (<= 0 remaining 1000)) (list 0 0)]\n    [(and\
    \ (> number 0) (> need 0) (> remaining 0)) (list 0 0)]\n    [(and (> number 0)\
    \ (> need 0) (> remaining 0)) (list (+ number need) 0)]\n    [(and (> number 0)\
    \ (> need 0) (> remaining 0)) (list (+ number need) (+ remaining need))]\n   \
    \ [else (list number need)]))\n", "  (cond\n    [(and (<= 0 number 1000) (<= 0\
    \ need 1000) (<= 0 remaining 1000)) (list 0 0)]\n    [(= number 0) (list 0 0)]\n\
    \    [(= need 0) (list 0 0)]\n    [(= remaining 0) (list 0 0)]\n    [else (cond\n\
    \             [(= remaining 0) (cons (- number need) (remaining 0))]\n       \
    \      [(= (- number need) 0) (cons (- remaining number) need)]\n            \
    \ [else (cons (- number need) (remaining 0))])]))\n", "  (cond\n    [(or (= remaining\
    \ 0) (= number 0))\n     (list 0 0)]\n    [(= remaining 0)\n     (list number\
    \ 0)]\n    [else\n     (cond\n       [(= (modulo number need) 0)\n        (list\
    \ number 0)]\n       [(= (modulo number need) 1)\n        (list number (- need\
    \ (modulo number need)))]\n       [else\n        (cond\n          [(= (modulo\
    \ number need) 2)\n           (list number (- need (modulo number need)))]\n \
    \         [else\n           (cond\n             [(= (modulo number need) 3)\n\
    \              (list number (- need (modulo number need)))]\n             [else\n\
    \              (cond\n                [(= (modulo number need) 4)\n          \
    \       (list number (- need (modulo number need)))]\n                [else\n\
    \                 (cond\n                   [(= (modulo number need) 5)\n    \
    \                (list number (- need (modulo number need)))]\n              \
    \     [else\n                    (cond\n                      [(= (modulo number\
    \ need) 6)\n                       (list number (- need (modulo number need)))]\n\
    \                      [else\n                       (cond\n                 \
    \        [(= (modulo number need) 7)\n                           (list number\
    \ (- need (modulo number need)))]\n                         [else\n          \
    \                 (cond\n                             [(= (modulo number need)\
    \ 8)\n                               (list number (- need (modulo number need)))]\n\
    \                             [else\n                               (cond\n  \
    \                               [(= (modulo number need) 9)\n                \
    \                   (list number (- need (modulo number need)))]\n           \
    \                      [else\n                                   (cond\n     \
    \                                [(= (modulo number need) 10)\n              \
    \                         (list number (- need (modulo number need)))]\n     \
    \                                [else\n                                     \
    \  (cond\n                                         [(= (modulo number need) 11)\n\
    \                                           (list number (- need (modulo number\
    \ need)))]\n                                         [else\n                 \
    \                          (cond\n                                           \
    \  [(= (modulo number need) 12)\n                                            \
    \   (list number (- need (modulo number need)))]\n                           \
    \                  [else\n                                               (cond\n\
    \                                                 [(= (modulo number need) 13)\n\
    \                                                   (list number (- need (modulo\
    \ number need)))]\n                                                 [else\n  \
    \                                                 (cond\n                    \
    \                                 [(= (modulo number need) 14)\n             \
    \                                          (list number (- need (modulo number\
    \ need)))]\n                                                     [else\n     \
    \                                                  (cond\n                   \
    \                                      [(= (", "  (cond\n    [(and (<= number\
    \ 1000) (<= need 1000) (<= remaining 1000)) (list number need)]\n    [else (list\
    \ number need)]))\n", "  (cond\n    [(or (= remaining 0) (= number 0))\n     (list\
    \ 0 0)]\n    [(< remaining 0)\n     (list number 0)]\n    [else\n     (cond\n\
    \       [(= remaining need)\n        (list number 0)]\n       [else\n        (cond\n\
    \          [(= remaining (- need number))\n           (list number 0)]\n     \
    \     [else\n           (cond\n             [(= remaining (- need (- number remaining)))\n\
    \               (list number 0)]\n             [else\n               (cond\n \
    \                [(= remaining (- need (- number remaining)))\n              \
    \     (list number 0)]\n                 [else\n                   (cond\n   \
    \                  [(= remaining (- need (- number remaining)))\n            \
    \           (list number 0)]\n                     [else\n                   \
    \    (cond\n                         [(= remaining (- need (- number remaining)))\n\
    \                           (list number 0)]\n                         [else\n\
    \                           (cond\n                             [(= remaining\
    \ (- need (- number remaining)))\n                               (list number\
    \ 0)]\n                             [else\n                               (cond\n\
    \                                 [(= remaining (- need (- number remaining)))\n\
    \                                   (list number 0)]\n                       \
    \          [else\n                                   (cond\n                 \
    \                    [(= remaining (- need (- number remaining)))\n          \
    \                             (list number 0)]\n                             \
    \        [else\n                                       (cond\n               \
    \                          [(= remaining (- need (- number remaining)))\n    \
    \                                       (list number 0)]\n                   \
    \                      [else\n                                           (cond\n\
    \                                             [(= remaining (- need (- number\
    \ remaining)))\n                                               (list number 0)]\n\
    \                                             [else\n                        \
    \                       (cond\n                                              \
    \   [(= remaining (- need (- number remaining)))\n                           \
    \                        (list number 0)]\n                                  \
    \               [else\n                                                   (cond\n\
    \                                                     [(= remaining (- need (-\
    \ number remaining)))\n                                                      \
    \ (list number 0)]\n                                                     [else\n\
    \                                                       (cond\n              \
    \                                           [(= remaining (- need (- number remaining)))\n\
    \                                                           (list number 0)]\n\
    \                                                         [else\n            \
    \                                               (cond\n                      \
    \                                       [(= remaining (- need (- number remaining)))\n\
    \                                                               (list number 0)]\n\
    \                                                             [else\n        \
    \                                                       (cond\n              \
    \                                                  [(= remaining (- need (- number\
    \ remaining)))\n                                                             \
    \    (list number 0)]\n                                                      \
    \          [else\n                                                           \
    \      (cond\n                                                               \
    \    [(= remaining (- need (- number remaining)))\n                          \
    \                                           (list number 0)]\n               \
    \                                                    [else\n                 \
    \                                                    (cond\n                 \
    \                                                    [(= remaining (- ", "  (cond\n\
    \    [(= remaining 0) (list number 0)]\n    [(= remaining 0) (list number 0)]\n\
    \    [(= remaining 0) (list number 0)]\n    [else (cond\n             [(< need\
    \ 0) (list number 0)]\n             [(< need 0) (list number 0)]\n           \
    \  [(< need 0) (list number 0)]\n             [(< need 0) (list number 0)]\n \
    \            [(< need 0) (list number 0)]\n             [(< need 0) (list number\
    \ 0)]\n             [(< need 0) (list number 0)]\n             [(< need 0) (list\
    \ number 0)]\n             [(< need 0) (list number 0)]\n             [(< need\
    \ 0) (list number 0)]\n             [(< need 0) (list number 0)]\n           \
    \  [(< need 0) (list number 0)]\n             [(< need 0) (list number 0)]\n \
    \            [(< need 0) (list number 0)]\n             [(< need 0) (list number\
    \ 0)]\n             [(< need 0) (list number 0)]\n             [(< need 0) (list\
    \ number 0)]\n             [(< need 0) (list number 0)]\n             [(< need\
    \ 0) (list number 0)]\n             [(< need 0) (list number 0)]\n           \
    \  [(< need 0) (list number 0)]\n             [(< need 0) (list number 0)]\n \
    \            [(< need 0) (list number 0)]\n             [(< need 0) (list number\
    \ 0)]\n             [(< need 0) (list number 0)]\n             [(< need 0) (list\
    \ number 0)]\n             [(< need 0) (list number 0)]\n             [(< need\
    \ 0) (list number 0)]\n             [(< need 0) (list number 0)]\n           \
    \  [(< need 0) (list number 0)]\n             [(< need 0) (list number 0)]\n \
    \            [(< need 0) (list number 0)]\n             [(< need 0) (list number\
    \ 0)]\n             [(< need 0) (list number 0)]\n             [(< need 0) (list\
    \ number 0)]\n             [(< need 0) (list number 0)]\n             [(< need\
    \ 0) (list number 0)]\n             [(< need 0) (list number 0)]\n           \
    \  [(< need 0) (list number 0)]\n             [(< need 0) (list number 0)]\n \
    \            [(< need 0) (list number 0)]\n             [(< need 0) (list number\
    \ 0)]\n             [(< need 0) (list number 0)", "  (cond\n    [(= remaining\
    \ 0) (list number 0)]\n    [(= remaining (- need number)) (list number 0)]\n \
    \   [else (cons (- remaining (- need number)) (eat number (- number need) remaining))]\n\
    \  ))\n", "  (cond\n    [(= remaining 0) (list number 0)]\n    [(= remaining 1)\
    \ (list number 0)]\n    [(= remaining 2) (list number 0)]\n    [(= remaining 3)\
    \ (list number 0)]\n    [(= remaining 4) (list number 0)]\n    [(= remaining 5)\
    \ (list number 0)]\n    [(= remaining 6) (list number 0)]\n    [(= remaining 7)\
    \ (list number 0)]\n    [(= remaining 8) (list number 0)]\n    [(= remaining 9)\
    \ (list number 0)]\n    [(= remaining 10) (list number 0)]\n    [(= remaining\
    \ 11) (list number 0)]\n    [(= remaining 12) (list number 0)]\n    [(= remaining\
    \ 13) (list number 0)]\n    [(= remaining 14) (list number 0)]\n    [(= remaining\
    \ 15) (list number 0)]\n    [(= remaining 16) (list number 0)]\n    [(= remaining\
    \ 17) (list number 0)]\n    [(= remaining 18) (list number 0)]\n    [(= remaining\
    \ 19) (list number 0)]\n    [(= remaining 20) (list number 0)]\n    [(= remaining\
    \ 21) (list number 0)]\n    [(= remaining 22) (list number 0)]\n    [(= remaining\
    \ 23) (list number 0)]\n    [(= remaining 24) (list number 0)]\n    [(= remaining\
    \ 25) (list number 0)]\n    [(= remaining 26) (list number 0)]\n    [(= remaining\
    \ 27) (list number 0)]\n    [(= remaining 28) (list number 0)]\n    [(= remaining\
    \ 29) (list number 0)]\n    [(= remaining 30) (list number 0)]\n    [(= remaining\
    \ 31) (list number 0)]\n    [(= remaining 32) (list number 0)]\n    [(= remaining\
    \ 33) (list number 0)]\n    [(= remaining 34) (list number 0)]\n    [(= remaining\
    \ 35) (list number 0)]\n    [(= remaining 36) (list number 0)]\n    [(= remaining\
    \ 37) (list number 0)]\n    [(= remaining 38) (list number 0)]\n    [(= remaining\
    \ 39) (list number 0)]\n    [(= remaining 40) (list number 0)]\n    [(= remaining\
    \ 41) (list number 0)]\n    [(= remaining 42) (list number 0)]\n    [(= remaining\
    \ 43) (list number 0)]\n    [(= remaining 44) (list number 0)]\n    [(= remaining\
    \ 45) (list number 0)]\n    [", "  (cond\n    [(or (= remaining 0) (= number 0))\n\
    \     (list 0 0)]\n    [(or (= remaining 0) (= need 0))\n     (list 0 0)]\n  \
    \  [(or (= remaining 0) (= number 0))\n     (list 0 0)]\n    [else\n     (cond\n\
    \       [(= remaining 0)\n        (cond\n         [(= number 0)\n          (list\
    \ 0 0)]\n         [else\n          (list 0 0)]])]\n    [else\n     (cond\n   \
    \    [(= remaining 0)\n        (cond\n         [(= need 0)\n          (list 0\
    \ 0)]\n         [else\n          (list 0 0)]])]\n    [else\n     (cond\n     \
    \  [(= remaining 0)\n        (cond\n         [(= number 0)\n          (list 0\
    \ 0)]\n         [else\n          (list 0 0)]])]\n    [else\n     (cond\n     \
    \  [(= remaining 0)\n        (cond\n         [(= need 0)\n          (list 0 0)]\n\
    \         [else\n          (list 0 0)]])]\n    [else\n     (cond\n       [(= remaining\
    \ 0)\n        (cond\n         [(= number 0)\n          (list 0 0)]\n         [else\n\
    \          (list 0 0)]])]\n    [else\n     (cond\n       [(= remaining 0)\n  \
    \      (cond\n         [(= need 0)\n          (list 0 0)]\n         [else\n  \
    \        (list 0 0)]])]\n    [else\n     (cond\n       [(= remaining 0)\n    \
    \    (cond\n         [(= number 0)\n          (list 0 0)]\n         [else\n  \
    \        (list 0 0)]])]\n    [else\n     (cond\n       [(= remaining 0)\n    \
    \    (cond\n         [(= need 0)\n          (list 0 0)]\n         [else\n    \
    \      (list 0 0)]])]\n    [else\n     (cond\n       [(= remaining 0)\n      \
    \  (cond\n         [(= number 0)\n          (list 0 0)]\n         [else\n    \
    \      (list 0 0)]])]\n    [else\n     (cond\n       [(= remaining 0)\n      \
    \  (cond\n         [(= need 0)\n          (list 0 0)]\n         [else\n      \
    \    (list 0 0)]])]\n    [else\n     (cond\n       [(= remaining 0)\n        (cond\n\
    \         [(= number 0)\n          (list 0 0)]\n         [else\n          (list\
    \ 0 0)]])]\n    [else\n     (cond\n       [(= remaining 0)\n        (cond\n  \
    \       [(= ", "  (cond\n    [(or (= remaining 0) (= number 0))\n     (list 0\
    \ 0)]\n    [(= remaining 0)\n     (list number 0)]\n    [(= number 0)\n     (list\
    \ 0 0)]\n    [else\n     (let ([carrots (- number need)])\n       (cond\n    \
    \     [(< carrots 0)\n          (list 0 0)]\n         [(= carrots 0)\n       \
    \   (list number 0)]\n         [else\n          (let ([remaining (- remaining\
    \ carrots)])\n            (cond\n              [(< remaining 0)\n            \
    \   (list number 0)]\n              [(= remaining 0)\n               (list 0 0)]\n\
    \              [else\n               (list number (+ remaining need))])])])]))\n",
  "  (cond\n    [(< number 1000) (list 0 0)]\n    [(< need 1000) (list 0 0)]\n   \
    \ [(< remaining 1000) (list 0 0)]\n    [else (cond\n             [(< remaining\
    \ number) (eat number (- number need) (remaining - number))]\n             [(<\
    \ need number) (eat number (- number remaining) (- need number))]\n          \
    \   [(< number need) (eat number (- number remaining) (- need remaining))]\n \
    \            [else (list number (- number remaining))])]))\n", "  (cond\n    [(and\
    \ (<= remaining 0) (<= need 0))\n     (list number 0)]\n    [(and (<= remaining\
    \ 0) (< need 0))\n     (list number 0)]\n    [(and (<= remaining 0) (> need 0))\n\
    \     (list number 0)]\n    [(and (<= remaining 0) (= need 0))\n     (list number\
    \ 0)]\n    [(and (<= remaining 0) (< number 0))\n     (list number 0)]\n    [(and\
    \ (<= remaining 0) (> number 0))\n     (list number 0)]\n    [(and (<= remaining\
    \ 0) (= number 0))\n     (list number 0)]\n    [(and (<= remaining 0) (< number\
    \ need))\n     (list number need)]\n    [(and (<= remaining 0) (> number need))\n\
    \     (list number need)]\n    [(and (<= remaining 0) (= number need))\n     (list\
    \ number need)]\n    [(and (<= remaining 0) (< number need) (< number remaining))\n\
    \     (list number need remaining)]\n    [(and (<= remaining 0) (> number need)\
    \ (< number remaining))\n     (list number need remaining)]\n    [(and (<= remaining\
    \ 0) (= number need) (< number remaining))\n     (list number need remaining)]\n\
    \    [(and (<= remaining 0) (< number need) (> number remaining))\n     (list\
    \ number need remaining)]\n    [(and (<= remaining 0) (> number need) (> number\
    \ remaining))\n     (list number need remaining)]\n    [(and (<= remaining 0)\
    \ (= number need) (> number remaining))\n     (list number need remaining)]\n\
    \    [(and (<= remaining 0) (< number need) (= number remaining))\n     (list\
    \ number need remaining)]\n    [(and (<= remaining 0) (> number need) (= number\
    \ remaining))\n     (list number need remaining)]\n    [(and (<= remaining 0)\
    \ (= number need) (= number remaining))\n     (list number need remaining)]\n\
    \    [(and (<= remaining 0) (< number need) (< number remaining) (< number need))\n\
    \     (list number need remaining need)]\n    [(and (<= remaining 0) (> number\
    \ need) (< number remaining) (< number need))\n     (list number need remaining\
    \ need)]\n    [(and (<= remaining 0) (= number need) (< number remaining) (< number\
    \ need))\n     (list number need remaining need)]\n    [(and (<= remaining 0)\
    \ (< number need) (> number remaining) (< number need))\n     (list number need\
    \ remaining need)]\n    [(and (<= remaining 0) (> number need) (> number remaining)\
    \ (< number ", "  (cond\n    [(or (= remaining 0) (= need 0))\n     (list number\
    \ 0)]\n    [(< remaining 0)\n     (list number 0)]\n    [(< need 0)\n     (list\
    \ number 0)]\n    [else\n     (cond\n       [(= remaining number)\n        (list\
    \ number 0)]\n       [(< remaining number)\n        (list number 0)]\n       [(<\
    \ need number)\n        (list number 0)]\n       [else\n        (cond\n      \
    \    [(= remaining number)\n           (list number 0)]\n          [(< remaining\
    \ number)\n           (list number 0)]\n          [(< need number)\n         \
    \  (list number 0)]\n          [else\n           (cond\n             [(= remaining\
    \ number)\n               (list number 0)]\n             [(< remaining number)\n\
    \               (list number 0)]\n             [(< need number)\n            \
    \   (list number 0)]\n             [else\n               (cond\n             \
    \    [(= remaining number)\n                   (list number 0)]\n            \
    \     [(< remaining number)\n                   (list number 0)]\n           \
    \      [(< need number)\n                   (list number 0)]\n               \
    \  [else\n                   (cond\n                     [(= remaining number)\n\
    \                       (list number 0)]\n                     [(< remaining number)\n\
    \                       (list number 0)]\n                     [(< need number)\n\
    \                       (list number 0)]\n                     [else\n       \
    \                (cond\n                         [(= remaining number)\n     \
    \                      (list number 0)]\n                         [(< remaining\
    \ number)\n                           (list number 0)]\n                     \
    \    [(< need number)\n                           (list number 0)]\n         \
    \                [else\n                           (cond\n                   \
    \          [(= remaining number)\n                               (list number\
    \ 0)]\n                             [(< remaining number)\n                  \
    \             (list number 0)]\n                             [(< need number)\n\
    \                               (list number 0)]\n                           \
    \  [else\n                               (cond\n                             \
    \    [(= remaining number)\n                                   (list number 0)]\n\
    \                                 [(< remaining number)\n                    \
    \               (list number 0)]\n                                 [(< need number)\n\
    \                                   (list number 0)]\n                       \
    \          [else\n                                   (cond\n                 \
    \                    [(= remaining number)\n                                 \
    \      (list number 0)]\n                                     [(< remaining number)\n\
    \                                       (list number 0)]\n                   \
    \                  [(< need number)\n                                       (list\
    \ number 0)]\n                                     [else\n                   \
    \                    (cond\n                                         [(= remaining\
    \ number)\n                                           (list number 0)]\n     \
    \                                    [(< remaining number)\n                 \
    \                          (list number 0)]\n                                \
    \         [(< need number)\n                                           (list number\
    \ 0)]\n                                         [else\n                      \
    \                     (cond\n", "  (cond\n    [(= remaining 0) (list number 0)]\n\
    \    [(= remaining need) (list number 0)]\n    [else (cons (- remaining need)\
    \ (cons number 0))]))\n", "  (cond\n    [(or (= remaining 0) (= need 0))\n   \
    \  (list number 0)]\n    [(= remaining 0)\n     (list number 0)]\n    [(= need\
    \ 0)\n     (list number 0)]\n    [else\n     (cond\n       [(< remaining number)\n\
    \        (cond\n          [(= remaining number)\n           (list number 0)]\n\
    \          [else\n           (list number (- remaining number))]\n         )]\n\
    \       [else\n        (cond\n          [(= remaining number)\n           (list\
    \ number 0)]\n          [else\n           (list number (- remaining number))]\n\
    \         )]\n       )]\n     )]))\n", "  (cond\n    [(= remaining 0) (list number\
    \ 0)]\n    [(= remaining 1) (list number 0)]\n    [else (cond\n             [(=\
    \ (modulo number need) 0) (cons (+ number need) (remaining 0))]\n            \
    \ [(= (modulo number need) 1) (cons (+ number need) (remaining 1))]\n        \
    \     [else (cond\n                      [(= (modulo number need) 2) (cons (+\
    \ number need) (remaining 2))]\n                      [(= (modulo number need)\
    \ 3) (cons (+ number need) (remaining 3))]\n                      [(= (modulo\
    \ number need) 4) (cons (+ number need) (remaining 4))]\n                    \
    \  [(= (modulo number need) 5) (cons (+ number need) (remaining 5))]\n       \
    \               [(= (modulo number need) 6) (cons (+ number need) (remaining 6))]\n\
    \                      [(= (modulo number need) 7) (cons (+ number need) (remaining\
    \ 7))])]))]))\n", "  (cond\n    [(or (= remaining 0) (= number 0))\n     (list\
    \ 0 0)]\n    [(= remaining 0)\n     (list number 0)]\n    [(= number 0)\n    \
    \ (list 0 0)]\n    [else\n     (let ([remaining-carrots (- remaining need)])\n\
    \       (cond\n         [(< remaining-carrots 0)\n          (list 0 0)]\n    \
    \     [(< remaining-carrots 1)\n          (list number 0)]\n         [(< remaining-carrots\
    \ 2)\n          (list number 1)]\n         [(< remaining-carrots 3)\n        \
    \  (list number 2)]\n         [(< remaining-carrots 4)\n          (list number\
    \ 3)]\n         [(< remaining-carrots 5)\n          (list number 4)]\n       \
    \  [(< remaining-carrots 6)\n          (list number 5)]\n         [(< remaining-carrots\
    \ 7)\n          (list number 6)]\n         [(< remaining-carrots 8)\n        \
    \  (list number 7)]\n         [(< remaining-carrots 9)\n          (list number\
    \ 8)]\n         [(< remaining-carrots 10)\n          (list number 9)]\n      \
    \   [(< remaining-carrots 11)\n          (list number 10)]\n         [(< remaining-carrots\
    \ 12)\n          (list number 11)]\n         [(< remaining-carrots 13)\n     \
    \     (list number 12)]\n         [(< remaining-carrots 14)\n          (list number\
    \ 13)]\n         [(< remaining-carrots 15)\n          (list number 14)]\n    \
    \     [(< remaining-carrots 16)\n          (list number 15)]\n         [(< remaining-carrots\
    \ 17)\n          (list number 16)]\n         [(< remaining-carrots 18)\n     \
    \     (list number 17)]\n         [(< remaining-carrots 19)\n          (list number\
    \ 18)]\n         [(< remaining-carrots 20)\n          (list number 19)]\n    \
    \     [(< remaining-carrots 21)\n          (list number 20)]\n         [(< remaining-carrots\
    \ 22)\n          (list number 21)]\n         [(< remaining-carrots 23)\n     \
    \     (list number 22)]\n         [(< remaining-carrots 24)\n          (list number\
    \ 23)]\n         [(< remaining-carrots 25)\n          (list number 24)]\n    \
    \     [(< remaining-carrots ", "  (cond\n    [(or (= remaining 0) (= number 0))\n\
    \     (list 0 0)]\n    [(= remaining 0)\n     (list number 0)]\n    [(= number\
    \ need)\n     (list number 0)]\n    [else\n     (cond\n       [(< remaining need)\n\
    \        (cond\n         [(< number 0)\n          (list 0 0)]\n         [else\n\
    \          (list number (- remaining need))]\n        )]\n       [(< number 0)\n\
    \        (list 0 0)]\n       [else\n        (list number (- number need))]\n \
    \     )]\n   ))\n", "  (cond\n    [(< number 0) (list 0 0)]\n    [(< need 0) (list\
    \ 0 0)]\n    [(< remaining 0) (list 0 0)]\n    [else (cond\n            [(= remaining\
    \ 0) (list number need)]\n            [else (cond\n                    [(= remaining\
    \ (- need number)) (list number need)]\n                    [else (cond\n    \
    \                        [(= remaining (- need (- number need))) (list number\
    \ need)]\n                            [else (cond\n                          \
    \          [(= remaining (- need (- number need) (- number remaining))) (list\
    \ number need)]\n                                    [else (cond\n           \
    \                                 [(= remaining (- need (- number need) (- number\
    \ remaining) (- number remaining))) (list number need)]\n                    \
    \                        [else (cond\n                                       \
    \             [(= remaining (- need (- number need) (- number remaining) (- number\
    \ remaining) (- number remaining))) (list number need)]\n                    \
    \                                [else (cond\n                               \
    \                             [(= remaining (- need (- number need) (- number\
    \ remaining) (- number remaining) (- number remaining) (- number remaining)))\
    \ (list number need)]\n                                                      \
    \      [else (cond\n                                                         \
    \           [(= remaining (- need (- number need) (- number remaining) (- number\
    \ remaining) (- number remaining) (- number remaining) (- number remaining)))\
    \ (list number need)]\n                                                      \
    \              [else (cond\n                                                 \
    \                           [(= remaining (- need (- number need) (- number remaining)\
    \ (- number remaining) (- number remaining) (- number remaining) (- number remaining)\
    \ (- number remaining) (- number remaining))) (list number need)]\n          \
    \                                                                  [else (cond\n\
    \                                                                        [(= remaining\
    \ (- need (- number need) (- number remaining) (- number remaining) (- number\
    \ remaining) (- number remaining) (- number remaining) (- number remaining) (-\
    \ number remaining) (- number remaining))) (list number need)]\n             \
    \                                                           [else (cond\n    \
    \                                                                            [(=\
    \ remaining (- need (- number need) (- number remaining) (- number remaining)\
    \ (- number remaining) (- number remaining) (- number remaining) (- number remaining)\
    \ (- number remaining) (- number remaining) (- number remaining))) (list number\
    \ need)]\n                                                                   \
    \             [else (cond\n                                                  \
    \                      [(= remaining (- need (- number need) (- number remaining)\
    \ (- number remaining) (- number remaining) (- number remaining) (- number remaining)\
    \ (- number remaining) (- number remaining) (- number remaining) (- number remaining)\
    \ (- number remaining))) (list number need", "  (cond\n    [(= remaining 0) (list\
    \ number 0)]\n    [(= remaining 0) (list 0 0)]\n    [(= remaining 0) (list 0 0)]\n\
    \    [(= remaining 0) (list 0 0)]\n    [else (cond\n             [(= number need)\
    \ (list (+ number need) remaining)]\n             [else (cond\n              \
    \        [(< need remaining) (cons (- need remaining) (eat number (- remaining\
    \ need) remaining))]\n                      [else (cons (- remaining need) (eat\
    \ number (- need remaining) remaining))]\n                      )]\n         \
    \    )]\n    )\n  )\n)\n", "  (cond\n    [(and (>= number 0) (<= need 1000)) (list\
    \ number 0)]\n    [(and (>= need 0) (<= remaining 1000)) (list need 0)]\n    [else\
    \ (list remaining (- remaining need))]))\n", "  (cond\n    [(= remaining 0) (list\
    \ number 0)]\n    [(= remaining 0) (list number 0)]\n    [(= remaining 0) (list\
    \ number 0)]\n    [else (cond\n             [(= number need) (list number 0)]\n\
    \             [(< number need) (list number 0)]\n             [else (cond\n  \
    \                    [(= number 0) (list number 0)]\n                      [(<\
    \ number 0) (list number 0)]\n                      [else (cond\n            \
    \                   [(= number need) (list number 0)]\n                      \
    \         [(< number need) (list number 0)]\n                               [else\
    \ (cond\n                                        [(= number remaining) (list number\
    \ 0)]\n                                        [(< number remaining) (list number\
    \ 0)]\n                                        [else (cond\n                 \
    \                                [(= number remaining) (list number 0)]\n    \
    \                                             [(< number remaining) (list number\
    \ 0)]\n                                                 [else (cond\n        \
    \                                                 [(= number remaining) (list\
    \ number 0)]\n                                                         [(< number\
    \ remaining) (list number 0)]\n                                              \
    \           [else (cond\n                                                    \
    \               [(= number remaining) (list number 0)]\n                     \
    \                                              [(< number remaining) (list number\
    \ 0)]\n                                                                   [else\
    \ (cond\n                                                                    \
    \         [(= number remaining) (list number 0)]\n                           \
    \                                                  [(< number remaining) (list\
    \ number 0)]\n                                                               \
    \              [else (cond\n                                                 \
    \                        [(= number remaining) (list number 0)]\n            \
    \                                                             [(< number remaining)\
    \ (list number 0)]\n                                                         \
    \                [else (cond\n                                               \
    \                                    [(= number remaining) (list number 0)]\n\
    \                                                                            \
    \       [(< number remaining) (list number 0)]\n                             \
    \                                                      [else (cond\n         \
    \                                                                            \
    \        [(= number remaining) (list number 0)]\n                            \
    \                                                                 [(< number remaining)\
    \ (list number 0)]\n                                                         \
    \                                    [else (cond\n                           \
    \                                                                          [(=\
    \ number remaining) (list number 0)]\n                                       \
    \                                                              [(< number remaining)\
    \ (list number 0)]\n                                                         \
    \                                            [else (cond\n                   \
    \                                                                            \
    \              [(= number remaining) (list number 0)]\n                      \
    \                                                                            \
    \           [(< number remaining) (list number 0)]\n                         \
    \                                                                            \
    \        [else (cond\n                                                       \
    \                                                                [(= number remaining)\
    \ (list number 0)]\n                                                         \
    \                                                              [(< number remaining)\
    \ (list number 0)]\n                                                         \
    \                                                              [else (cond\n \
    \                                                                            \
    \                                                   [(= number remaining) (list\
    \ number 0)]\n                                                               \
    \                                                                 [(< number remaining)\
    \ (list number 0)]\n                                                         \
    \                                                                       [else\
    \ (cond\n                                                                    \
    \                                                     [(= number remaining) (list\
    \ number 0)]\n                                                               \
    \                                                          [(< number remaining)\
    \ (list number 0)]\n", "  (cond\n    [(= remaining 0) (list number 0)]\n    [(=\
    \ remaining 0) (list number 0)]\n    [(= remaining 0) (list number 0)]\n    [else\
    \ (cond\n             [(< need 0) (list number 0)]\n             [(< need 0) (list\
    \ number 0)]\n             [(< need 0) (list number 0)]\n             [(< need\
    \ 0) (list number 0)]\n             [(< need 0) (list number 0)]\n           \
    \  [(< need 0) (list number 0)]\n             [(< need 0) (list number 0)]\n \
    \            [(< need 0) (list number 0)]\n             [(< need 0) (list number\
    \ 0)]\n             [(< need 0) (list number 0)]\n             [(< need 0) (list\
    \ number 0)]\n             [(< need 0) (list number 0)]\n             [(< need\
    \ 0) (list number 0)]\n             [(< need 0) (list number 0)]\n           \
    \  [(< need 0) (list number 0)]\n             [(< need 0) (list number 0)]\n \
    \            [(< need 0) (list number 0)]\n             [(< need 0) (list number\
    \ 0)]\n             [(< need 0) (list number 0)]\n             [(< need 0) (list\
    \ number 0)]\n             [(< need 0) (list number 0)]\n             [(< need\
    \ 0) (list number 0)]\n             [(< need 0) (list number 0)]\n           \
    \  [(< need 0) (list number 0)]\n             [(< need 0) (list number 0)]\n \
    \            [(< need 0) (list number 0)]\n             [(< need 0) (list number\
    \ 0)]\n             [(< need 0) (list number 0)]\n             [(< need 0) (list\
    \ number 0)]\n             [(< need 0) (list number 0)]\n             [(< need\
    \ 0) (list number 0)]\n             [(< need 0) (list number 0)]\n           \
    \  [(< need 0) (list number 0)]\n             [(< need 0) (list number 0)]\n \
    \            [(< need 0) (list number 0)]\n             [(< need 0) (list number\
    \ 0)]\n             [(< need 0) (list number 0)]\n             [(< need 0) (list\
    \ number 0)]\n             [(< need 0) (list number 0)]\n             [(< need\
    \ 0) (list number 0)]\n             [(< need 0) (list number 0)]\n           \
    \  [(< need 0) (list number 0)]\n             [(< need 0) (list number 0)", " \
    \ (cond\n    [(= remaining 0) (list number 0)]\n    [(= remaining need) (list\
    \ number 0)]\n    [else (cond\n             [(= remaining (- need number)) (list\
    \ number 0)]\n             [(< remaining (- need (- number need))) (list number\
    \ 0)]\n             [else (cond\n                      [(= remaining (- need (-\
    \ number need))) (list number 0)]\n                      [(< remaining (- need\
    \ number)) (list number 0)]\n                      [else (cond\n             \
    \                  [(= remaining (- need number)) (list number 0)]\n         \
    \                      [(< remaining (- need (- number need))) (list number 0)]\n\
    \                               [else (cond\n                                \
    \        [(= remaining (- need (- number need))) (list number 0)]\n          \
    \                              [(< remaining (- need number)) (list number 0)]\n\
    \                                        [else (cond\n                       \
    \                          [(= remaining (- need number)) (list number 0)]\n \
    \                                                [(< remaining (- need (- number\
    \ need))) (list number 0)]\n                                                 [else\
    \ (cond\n                                                         [(= remaining\
    \ (- need (- number need))) (list number 0)]\n                               \
    \                          [(< remaining (- need number)) (list number 0)]\n \
    \                                                        [else (cond\n       \
    \                                                            [(= remaining (-\
    \ need number)) (list number 0)]\n                                           \
    \                        [(< remaining (- need (- number need))) (list number\
    \ 0)]\n                                                                   [else\
    \ (cond\n                                                                    \
    \      [(= remaining (- need (- number need))) (list number 0)]\n            \
    \                                                              [(< remaining (-\
    \ need number)) (list number 0)]\n                                           \
    \                               [else (cond\n                                \
    \                                                  [(= remaining (- need number))\
    \ (list number 0)]\n                                                         \
    \                         [(< remaining (- need (- number need))) (list number\
    \ 0)]\n                                                                      \
    \            [else (cond\n                                                   \
    \                                          [(= remaining (- need (- number need)))\
    \ (list number 0)]\n                                                         \
    \                                    [(< remaining (- need number)) (list number\
    \ 0)]\n                                                                      \
    \                       [else (cond\n                                        \
    \                                                               [(= remaining\
    \ (- need number)) (list number 0)]\n                                        \
    \                                                               [(< remaining\
    \ (- need (- number need))) (list number 0)]\n                               \
    \                                                                        [else\
    \ (cond\n                                                                    \
    \                                           [(= remaining (- need (- number need)))\
    \ (list number 0)]\n                                                         \
    \                                                      [(< remaining (- need number))\
    \ (list number 0)]\n                                                         \
    \                                                      [", "  (cond\n    [(= remaining\
    \ 0) (list number 0)]\n    [(= remaining need) (list number 0)]\n    [else (cond\n\
    \             [(= remaining (- need number)) (list number 0)]\n             [else\
    \ (cond\n                      [(= remaining (- need (- number remaining))) (list\
    \ number 0)]\n                      [else (cond [(= remaining 0) (list number\
    \ 0)]\n                                 [else (cond [(= remaining need) (list\
    \ number 0)]\n                                           [else (cond [(= remaining\
    \ (- need number)) (list number 0)]\n                                        \
    \             [else (cond [(= remaining (- need (- number remaining))) (list number\
    \ 0)]\n                                                               [else (cond\
    \ [(= remaining 0) (list number 0)]\n                                        \
    \                 [else (cond [(= remaining need) (list number 0)]\n         \
    \                                                          [else (cond [(= remaining\
    \ (- need number)) (list number 0)]\n                                        \
    \                                     [else (cond [(= remaining (- need (- number\
    \ remaining))) (list number 0)]\n                                            \
    \                            [else (cond [(= remaining 0) (list number 0)]\n \
    \                                                                            \
    \     [else (cond [(= remaining need) (list number 0)]\n                     \
    \                                                                       [else\
    \ (cond [(= remaining (- need number)) (list number 0)]\n                    \
    \                                                                            \
    \   [else (cond [(= remaining (- need (- number remaining))) (list number 0)]\n\
    \                                                                            \
    \                                [else (cond [(= remaining 0) (list number 0)]\n\
    \                                                                            \
    \                                      [else (cond [(= remaining need) (list number\
    \ 0)]\n                                                                      \
    \                                                      [else (cond [(= remaining\
    \ (- need number)) (list number 0)]\n                                        \
    \                                                                            \
    \              [else (cond [(= remaining (- need (- number remaining))) (list\
    \ number 0)]\n                                                               \
    \                                                                         [else\
    \ (cond [(= remaining 0) (list number 0)]\n                                  \
    \                                                                            \
    \                                [else (cond [(= remaining need) (list number\
    \ 0)]\n                                                                      \
    \                                                                            \
    \          [else (cond [(= remaining (- need number)) (list number 0)]\n     \
    \                                                                            \
    \                                                                            \
    \      [else (cond [(= remaining (- need (- number remaining))) (list number 0)]\n\
    \                                                                            \
    \                                                                            \
    \          [else (cond [(= remaining 0) (list number 0)]\n                   \
    \                                                                            \
    \                                                                            \
    \ [else (cond [(= remaining need) (list number 0)]\n                         \
    \                                                                            \
    \                                                                            \
    \ [else (cond [(= remaining (- need ", "  (cond\n    [(or (= remaining 0) (= number\
    \ 0))\n     (list 0 0)]\n    [(or (= remaining 0) (= number need))\n     (list\
    \ number 0)]\n    [else\n     (cond\n       [(< remaining number)\n        (list\
    \ number 0)]\n       [(< number need)\n        (list number (- number need))]\n\
    \       [(< number need)\n        (list number (- number need) (+ remaining number))]\n\
    \       [(< number need)\n        (list number (- number need) (+ remaining number)\
    \ (+ remaining number))]\n       [(< number need)\n        (list number (- number\
    \ need) (+ remaining number) (+ remaining number) (+ remaining number))]\n   \
    \    [(< number need)\n        (list number (- number need) (+ remaining number)\
    \ (+ remaining number) (+ remaining number) (+ remaining number))]\n       [(<\
    \ number need)\n        (list number (- number need) (+ remaining number) (+ remaining\
    \ number) (+ remaining number) (+ remaining number) (+ remaining number))]\n \
    \      [(< number need)\n        (list number (- number need) (+ remaining number)\
    \ (+ remaining number) (+ remaining number) (+ remaining number) (+ remaining\
    \ number) (+ remaining number))]\n       [(< number need)\n        (list number\
    \ (- number need) (+ remaining number) (+ remaining number) (+ remaining number)\
    \ (+ remaining number) (+ remaining number) (+ remaining number) (+ remaining\
    \ number))]\n       [(< number need)\n        (list number (- number need) (+\
    \ remaining number) (+ remaining number) (+ remaining number) (+ remaining number)\
    \ (+ remaining number) (+ remaining number) (+ remaining number) (+ remaining\
    \ number))]\n       [(< number need)\n        (list number (- number need) (+\
    \ remaining number) (+ remaining number) (+ remaining number) (+ remaining number)\
    \ (+ remaining number) (+ remaining number) (+ remaining number) (+ remaining\
    \ number) (+ remaining number))]\n       [(< number need)\n        (list number\
    \ (- number need) (+ remaining number) (+ remaining number) (+ remaining number)\
    \ (+ remaining number) (+ remaining number) (+ remaining number) (+ remaining\
    \ number) (+ remaining number) (+ remaining number) (+ remaining number))]\n \
    \      [(< number need)\n        (list number (- number need) (+ remaining number)\
    \ (+ remaining number) (+ remaining number) (+ remaining number) (+ remaining\
    \ number) (+ remaining number) (+ remaining number) (+ remaining number) (+ remaining\
    \ number) (+ remaining number) (+ remaining number))]\n       [(< number need)\n\
    \        (list number (- number ", "  (cond\n    [(or (= remaining 0) (= need\
    \ 0))\n     (list number 0)]\n    [(= remaining 0)\n     (list number 0)]\n  \
    \  [(= need 0)\n     (list number 0)]\n    [else\n     (cond\n       [(= (modulo\
    \ number remaining) 0)\n        (cond\n         [(= (modulo number remaining)\
    \ 0)\n          (cond\n           [(= (modulo number remaining) 0)\n         \
    \   (cond\n             [(= (modulo number remaining) 0)\n              (cond\n\
    \               [(= (modulo number remaining) 0)\n                (cond\n    \
    \             [(= (modulo number remaining) 0)\n                  (cond\n    \
    \               [(= (modulo number remaining) 0)\n                    (cond\n\
    \                     [(= (modulo number remaining) 0)\n                     \
    \ (cond\n                       [(= (modulo number remaining) 0)\n           \
    \             (cond\n                         [(= (modulo number remaining) 0)\n\
    \                          (cond\n                           [(= (modulo number\
    \ remaining) 0)\n                            (cond\n                         \
    \    [(= (modulo number remaining) 0)\n                              (cond\n \
    \                              [(= (modulo number remaining) 0)\n            \
    \                    (cond\n                                 [(= (modulo number\
    \ remaining) 0)\n                                  (cond\n                   \
    \                [(= (modulo number remaining) 0)\n                          \
    \          (cond\n                                     [(= (modulo number remaining)\
    \ 0)\n                                      (cond\n                          \
    \             [(= (modulo number remaining) 0)\n                             \
    \           (cond\n                                         [(= (modulo number\
    \ remaining) 0)\n                                          (cond\n           \
    \                                [(= (modulo number remaining) 0)\n          \
    \                                  (cond\n                                   \
    \          [(= (modulo number remaining) 0)\n                                \
    \              (cond\n                                               [(= (modulo\
    \ number remaining) 0)\n                                                (cond\n\
    \                                                 [(= (modulo number remaining)\
    \ 0)\n                                                  (cond\n              \
    \                                     [(= (modulo number remaining) 0)\n     \
    \                                               (cond\n                      \
    \                               [(= (modulo number remaining) 0)\n           \
    \                                           (cond\n                          \
    \                             [(= (modulo number remaining) 0)\n             \
    \                                           (cond\n                          \
    \                               [(= (modulo number remaining) 0)\n           \
    \                                               (cond\n                      \
    \                                     [(= (modulo number remaining) 0)\n     \
    \                                                       (cond\n              \
    \                                               [(= (modulo number remaining)\
    \ 0)\n                                                              (cond\n  \
    \                                                             [(= (modulo number\
    \ remaining) 0)\n                                                            \
    \    (cond\n                                                                [(=\
    \ (modulo number remaining) 0)\n                                             \
    \                     (cond\n                                                \
    \                    [(= (modulo number remaining) 0)\n                      \
    \                                               (cond\n", "  (cond\n    [(= remaining\
    \ 0) (list number 0)]\n    [(= remaining need) (list number 0)]\n    [else (cons\
    \ (- remaining need) (cons number 0))]))\n", "  (cond\n    [(= remaining 0) (list\
    \ number 0)]\n    [(= remaining (- need number)) (list number 0)]\n    [else (cons\
    \ (- remaining (- need number)) (eat number (- need number) (remaining 0)))]))\n",
  "  (cond\n    [(or (= remaining 0) (= number 0))\n     (list 0 0)]\n    [(= remaining\
    \ 0)\n     (list number 0)]\n    [(= number 0)\n     (list 0 0)]\n    [else\n\
    \     (let ([carrots (- number need)])\n       (cond\n         [(< carrots remaining)\n\
    \          (list carrots remaining)]\n         [else\n          (list carrots\
    \ 0)]\n         )\n       )\n     ]\n   )\n  )\n", "  (cond\n    [(= remaining\
    \ 0) (list number 0)]\n    [(= remaining (- need number)) (list number 0)]\n \
    \   [else (cons (- remaining (- need number)) (eat number (- need number) (remaining\
    \ 0))]\n    )\n  )\n)\n", "  (cond\n    [(or (= remaining 0) (= number 0))\n \
    \    (list 0 0)]\n    [(= remaining 0)\n     (list number 0)]\n    [(= number\
    \ 0)\n     (list 0 0)]\n    [else\n     (cond\n       [(< need (- remaining number))\n\
    \        (list 0 0)]\n       [(< remaining 0)\n        (list 0 0)]\n       [(<\
    \ remaining number)\n        (cond\n          [(< remaining number)\n        \
    \   (cond\n             [(< number need)\n              (cond\n              \
    \   [(< number need)\n                   (list remaining 0)]\n               \
    \  [(= number need)\n                   (list 0 0)]\n                 [(> number\
    \ need)\n                   (list 0 0)]\n                 [(> number need)\n \
    \                  (list remaining 0)]\n                 [(> number need)\n  \
    \                 (list remaining (- number need))]\n                 [(> number\
    \ need)\n                   (list remaining (- number need) (- remaining number))]\n\
    \                 [(> number need)\n                   (list remaining (- number\
    \ need) (- remaining number) (- remaining number))]\n                 [(> number\
    \ need)\n                   (list remaining (- number need) (- remaining number)\
    \ (- remaining number) (- remaining number))]\n                 [(> number need)\n\
    \                   (list remaining (- number need) (- remaining number) (- remaining\
    \ number) (- remaining number) (- remaining number))]\n                 [(> number\
    \ need)\n                   (list remaining (- number need) (- remaining number)\
    \ (- remaining number) (- remaining number) (- remaining number) (- remaining\
    \ number))]\n                 [(> number need)\n                   (list remaining\
    \ (- number need) (- remaining number) (- remaining number) (- remaining number)\
    \ (- remaining number) (- remaining number) (- remaining number))]\n         \
    \        [(> number need)\n                   (list remaining (- number need)\
    \ (- remaining number) (- remaining number) (- remaining number) (- remaining\
    \ number) (- remaining number) (- remaining number) (- remaining number))]\n \
    \                [(> number need)\n                   (list remaining (- number\
    \ need) (- remaining number) (- remaining number) (- remaining number) (- remaining\
    \ number) (- remaining number) (- remaining number) (- remaining number) (- remaining\
    \ number))]\n                 [(> number need)\n                   (list remaining\
    \ (- number need) (- remaining number) (- remaining number) (- remaining number)\
    \ (- remaining number) (- remaining number) (- remaining number) (- remaining\
    \ number) (- remaining number) (- remaining number))]", "  (cond\n    [(and (<=\
    \ remaining 0) (<= need 0))\n     (list number 0)]\n    [(and (<= remaining 0)\
    \ (< need 0))\n     (list number 0)]\n    [(and (<= remaining 0) (> need 0))\n\
    \     (list number 0)]\n    [else\n     (cond\n       [(< remaining number)\n\
    \        (cond\n         [(< need 0)\n          (list number 0)]\n         [else\n\
    \          (cons (- remaining need) (list (- number need)))]\n         )]\n  \
    \     [(< need 0)\n        (cond\n         [(< remaining 0)\n          (list number\
    \ 0)]\n         [else\n          (cons (- remaining need) (list (- number need)))]\n\
    \         )]\n       [(< remaining 0)\n        (cond\n         [(< need 0)\n \
    \         (list number 0)]\n         [else\n          (cons (- remaining need)\
    \ (list (- number need)))]\n         )]\n       [else\n        (cond\n       \
    \  [(< need 0)\n          (list number 0)]\n         [else\n          (cons (-\
    \ remaining need) (list (- number need)))]\n         )]\n       )]\n     )]))\n",
  "  (cond\n    [(or (< number 1000) (< need 1000) (< remaining 1000)) #f]\n    [else\
    \ (cond\n             [(< remaining 0) #t]\n             [else (cond\n       \
    \               [(< need 0) #t]\n                      [else (cond\n         \
    \                      [(< number 0) #t]\n                               [else\
    \ (cond\n                                        [(< remaining (- need number))\
    \ #t]\n                                        [else (cond\n                 \
    \                                [(< remaining (- need (- number need))) #t]\n\
    \                                                 [else (cond\n              \
    \                                           [(< remaining (- number (- need (-\
    \ number need))))) #t]\n                                                 [else\
    \ (cond\n                                                         [(< remaining\
    \ (- number (- need (- number (- number need))))) #t]\n                      \
    \                           [else (cond\n                                    \
    \                     [(< remaining (- number (- need (- number (- number need)))))\
    \ #t]\n                                                 [else (cond\n        \
    \                                                 [(< remaining (- number (- need\
    \ (- number (- number need))))) #t]\n                                        \
    \         [else (cond\n                                                      \
    \   [(< remaining (- number (- need (- number (- number need))))) #t]\n      \
    \                                           [else (cond\n                    \
    \                                     [(< remaining (- number (- need (- number\
    \ (- number need))))) #t]\n                                                 [else\
    \ (cond\n                                                         [(< remaining\
    \ (- number (- need (- number (- number need))))) #t]\n                      \
    \                           [else (cond\n                                    \
    \                     [(< remaining (- number (- need (- number (- number need)))))\
    \ #t]\n                                                 [else (cond\n        \
    \                                                 [(< remaining (- number (- need\
    \ (- number (- number need))))) #t]\n                                        \
    \         [else (cond\n                                                      \
    \   [(< remaining (- number (- need (- number (- number need))))) #t]\n      \
    \                                           [else (cond\n                    \
    \                                     [(< remaining (- number (- need (- number\
    \ (- number need))))) #t]\n                                                 [else\
    \ (cond\n                                                         [(< remaining\
    \ (- number (- need (- number (- number need))))) #t]\n                      \
    \                           [else (cond\n                                    \
    \                     [(< remaining (- number (- need (- number (- number need)))))\
    \ #t]\n                                                 [else (cond\n        \
    \                                                 [(< remaining (- number (- need\
    \ (- number (- number need))))) #t]\n                                        \
    \         [else (cond\n                                                      \
    \   [(< remaining (- number (- need (- number (- number need))))) #t]\n      \
    \                                           [else (cond\n                    \
    \                                     [(< remaining (- number (- need (", "  (cond\n\
    \    [(= remaining 0) (list number 0)]\n    [(= remaining (- need number)) (list\
    \ number 0)]\n    [else (cons (- remaining (- need number)) (eat number (- remaining\
    \ (- need number)) (- remaining number)))]))\n", "  (cond\n    [(= remaining 0)\
    \ (list number 0)]\n    [(= remaining 0) (list number 0)]\n    [(= remaining 0)\
    \ (list number 0)]\n    [else (cond\n             [(= number need) (list number\
    \ 0)]\n             [(< number need) (list number 0)]\n             [(> number\
    \ need) (list (- number need) 0)]\n             [(= (- number need) 0) (list number\
    \ 0)]\n             [else (cond\n                      [(< number need) (list\
    \ number 0)]\n                      [(> number need) (list (- number need) 0)]\n\
    \                      [(= (- number need) 0) (list number 0)]\n             \
    \         [else (cond\n                              [(< number need) (list number\
    \ 0)]\n                              [(> number need) (list (- number need) 0)]\n\
    \                              [(= (- number need) 0) (list number 0)]\n     \
    \                         [else (cond\n                                      [(<\
    \ number need) (list number 0)]\n                                      [(> number\
    \ need) (list (- number need) 0)]\n                                      [(= (-\
    \ number need) 0) (list number 0)]\n                                      [else\
    \ (cond\n                                              [(< number need) (list\
    \ number 0)]\n                                              [(> number need) (list\
    \ (- number need) 0)]\n                                              [(= (- number\
    \ need) 0) (list number 0)]\n                                              [else\
    \ (cond\n                                                      [(< number need)\
    \ (list number 0)]\n                                                      [(>\
    \ number need) (list (- number need) 0)]\n                                   \
    \                   [(= (- number need) 0) (list number 0)]\n                \
    \                                      [else (cond\n                         \
    \                                     [(< number need) (list number 0)]\n    \
    \                                                          [(> number need) (list\
    \ (- number need) 0)]\n                                                      \
    \        [(= (- number need) 0) (list number 0)]\n                           \
    \                                   [else (cond\n                            \
    \                                        [(< number need) (list number 0)]\n \
    \                                                                   [(> number\
    \ need) (list (- number need) 0)]\n                                          \
    \                          [(= (- number need) 0) (list number 0)]\n         \
    \                                                           [else (cond\n    \
    \                                                                        [(< number\
    \ need) (list number 0)]\n                                                   \
    \                         [(> number need) (list (- number need) 0)]\n       \
    \                                                                     [(= (- number\
    \ need) 0) (list number 0)]\n                                                \
    \                            [else (cond\n                                   \
    \                                     [(< number need) (list number 0)]\n    \
    \                                                                    [(> number\
    \ need) (list (- number need) 0)]\n                                          \
    \                              [(= (- number need) 0) (list ", "  (cond\n    [(and\
    \ (<= number 1000) (<= need 1000) (<= remaining 1000)) (list number need)]\n \
    \   [else (list number need)]))\n", "  (cond\n    [(or (= remaining 0) (= need\
    \ 0))\n     (list number 0)]\n    [(< remaining 0)\n     (list number 0)]\n  \
    \  [(< need 0)\n     (list number 0)]\n    [else\n     (let\n       ((meals (make-array\
    \ (ceiling (/ remaining need)) #:initial-contents (list number)))\n        (count\
    \ (make-array (ceiling (/ remaining need)) #:initial-contents (list 0)))\n   \
    \     (leftover (make-array (ceiling (/ remaining need)) #:initial-contents (list\
    \ 0)))\n        (remaining-carrots (make-array (ceiling (/ remaining need)) #:initial-contents\
    \ (list 0)))\n        (need-carrots (make-array (ceiling (/ need need)) #:initial-contents\
    \ (list 0)))\n        (need-remaining (make-array (ceiling (/ need need)) #:initial-contents\
    \ (list 0)))\n        (need-remaining (make-array (ceiling (/ need need)) #:initial-contents\
    \ (list 0)))\n        (need-remaining (make-array (ceiling (/ need need)) #:initial-contents\
    \ (list 0)))\n        (need-remaining (make-array (ceiling (/ need need)) #:initial-contents\
    \ (list 0)))\n        (need-remaining (make-array (ceiling (/ need need)) #:initial-contents\
    \ (list 0)))\n        (need-remaining (make-array (ceiling (/ need need)) #:initial-contents\
    \ (list 0)))\n        (need-remaining (make-array (ceiling (/ need need)) #:initial-contents\
    \ (list 0)))\n        (need-remaining (make-array (ceiling (/ need need)) #:initial-contents\
    \ (list 0)))\n        (need-remaining (make-array (ceiling (/ need need)) #:initial-contents\
    \ (list 0)))\n        (need-remaining (make-array (ceiling (/ need need)) #:initial-contents\
    \ (list 0)))\n        (need-remaining (make-array (ceiling (/ need need)) #:initial-contents\
    \ (list 0)))\n        (need-remaining (make-array (ceiling (/ need need)) #:initial-contents\
    \ (list 0)))\n        (need-remaining (make-array (ceiling (/ need need)) #:initial-contents\
    \ (list 0)))\n        (need-remaining (make-array (ceiling (/ need need)) #:initial-contents\
    \ (list 0)))\n        (need-remaining (make-array (ceiling (/ need need)) #:initial-contents\
    \ (list 0)))\n        (need", "  (cond\n    [(or (< number 1000) (< need 1000)\
    \ (< remaining 1000)) (list 0 0)]\n    [(= remaining 0) (list number need)]\n\
    \    [(= remaining need) (list number need)]\n    [else (cons (- remaining need)\
    \ (cons number need))]))\n", "  (cond\n    [(= remaining 0) (list number 0)]\n\
    \    [(= remaining (- need number)) (list number 0)]\n    [else (cons (- number\
    \ remaining) (cons 0 (eat remaining (- number need) remaining)))]))\n", "  (cond\n\
    \    [(< number 0) (list 0 0)]\n    [(< need 0) (list number 0)]\n    [(< remaining\
    \ 0) (list number need)]\n    [else (cond\n             [(= remaining 0) (list\
    \ number need)]\n             [(< need 0) (list number 0)]\n             [(< number\
    \ 0) (list 0 0)]\n             [else (cond\n                      [(= remaining\
    \ 0) (list 0 0)]\n                      [(< need 0) (list number 0)]\n       \
    \               [(< number 0) (list 0 0)]\n                      [else (cond\n\
    \                               [(= remaining 0) (list 0 0)]\n               \
    \                [(< need 0) (list number 0)]\n                              \
    \ [(< number 0) (list 0 0)]\n                               [(= (- number remaining)\
    \ need) (list number need)]\n                               [else (cond\n    \
    \                                    [(= remaining 0) (list 0 0)]\n          \
    \                              [(< need 0) (list number 0)]\n                \
    \                        [(< number 0) (list 0 0)]\n                         \
    \               [(= (- number remaining) need) (list number need)]\n         \
    \                               [(= (- number remaining) need) (list number need)]\n\
    \                                        [(= (- number remaining) need) (list\
    \ number need)]\n                                        [(= (- number remaining)\
    \ need) (list number need)]\n                                        [(= (- number\
    \ remaining) need) (list number need)]\n                                     \
    \   [(= (- number remaining) need) (list number need)]\n                     \
    \                   [(= (- number remaining) need) (list number need)]\n     \
    \                                   [(= (- number remaining) need) (list number\
    \ need)]\n                                        [(= (- number remaining) need)\
    \ (list number need)]\n                                        [(= (- number remaining)\
    \ need) (list number need)]\n                                        [(= (- number\
    \ remaining) need) (list number need)]\n                                     \
    \   [(= (- number remaining) need) (list number need)]\n                     \
    \                   [(= (- number remaining) need) (list number need)]\n     \
    \                                   [(= (- number remaining) need) (list number\
    \ need)]\n                                        [(= (- number remaining) need)\
    \ (list number need)]\n                                        [(= (- number remaining)\
    \ need) (list number need)]\n                                        [(= (- number\
    \ remaining) need) (list number need)]\n                                     \
    \   [(= (- number remaining) need) (list number need)]\n                     \
    \                   [(= (- number remaining) need) (list number need)]\n     \
    \                                   [(= (- number remaining) need) (list number\
    \ need)]\n                                        [(= (- number ", "  (cond\n\
    \    [(< number 1000) (list 0 0)]\n    [(< need 1000) (list 0 0)]\n    [(< remaining\
    \ 1000) (list 0 0)]\n    [else (cond\n             [(> remaining 0) (cond\n  \
    \                                 [(> number need) (list 0 0)]\n             \
    \                      [(< number need) (list 0 0)]\n                        \
    \           [(< number remaining) (list 0 0)]\n                              \
    \     [(> number remaining) (list 0 0)])]\n             [(> number need) (cond\n\
    \                                   [(> remaining 0) (list 0 0)]\n           \
    \                        [(< remaining 0) (list 0 0)]\n                      \
    \             [(< number need) (list 0 0)]\n                                 \
    \  [(> number need) (list 0 0)])]\n             [(> number remaining) (cond\n\
    \                                   [(> need 0) (list 0 0)]\n                \
    \                   [(< need 0) (list 0 0)]\n                                \
    \   [(< remaining 0) (list 0 0)]\n                                   [(> remaining\
    \ 0) (list 0 0)])]\n             [(> need 0) (cond\n                         \
    \          [(> remaining 0) (list 0 0)]\n                                   [(<\
    \ remaining 0) (list 0 0)]\n                                   [(< number remaining)\
    \ (list 0 0)]\n                                   [(> number remaining) (list\
    \ 0 0)])]\n             [(> remaining 0) (cond\n                             \
    \      [(> need 0) (list 0 0)]\n                                   [(< need 0)\
    \ (list 0 0)]\n                                   [(< number need) (list 0 0)]\n\
    \                                   [(> number need) (list 0 0)])]\n         \
    \    [(> need 0) (cond\n                                   [(> remaining 0) (list\
    \ 0 0)]\n                                   [(< remaining 0) (list 0 0)]\n   \
    \                                [(< number remaining) (list 0 0)]\n         \
    \                          [(> number remaining) (list 0 0)])]\n             [(>\
    \ remaining 0) (cond\n                                   [(> need 0) (list 0 0)]\n\
    \                                   [(< need 0) (list 0 0)]\n                \
    \                   [(< number need) (list 0 0)]\n                           \
    \        [(> number need) (list 0 0)])]\n             [(> need 0) (cond\n    \
    \                               [(> remaining 0) (list 0 0)]\n               \
    \                    [(< remaining 0) (list 0 0)]\n                          \
    \         [(< number remaining) (list 0 0)]\n                                \
    \   [(> number remaining) (list 0 0)])]\n             [(> remaining 0) (cond\n\
    \                                   [(> need 0) (list 0 0)]\n                \
    \                   [(< need 0) (list 0 0)]\n                                \
    \   [(< number need) (list 0 0)]\n                                   [(> ", " \
    \ (cond\n    [(or (= remaining 0) (= number 0))\n     (list 0 0)]\n    [(< remaining\
    \ 0)\n     (list number 0)]\n    [(< number need)\n     (list 0 (- remaining number))]\n\
    \    [else\n     (list number (- remaining need))]))\n", "  (cond\n    [(or (<\
    \ number 1000) (< need 1000) (< remaining 1000)) (list 0 0)]\n    [else (cond\n\
    \             [(< remaining 0) (list 0 0)]\n             [(< need 0) (list 0 0)]\n\
    \             [(< number 0) (list 0 0)]\n             [else (cond\n          \
    \            [(< remaining (- need number)) (list 0 0)]\n                    \
    \  [(< need (- remaining number)) (list 0 0)]\n                      [(< number\
    \ (- remaining need)) (list 0 0)]\n                      [else (cond\n       \
    \                       [(< remaining (- need (- number need)))\n            \
    \                   (list number (- remaining need))]\n                      \
    \        [(< need (- remaining (- number need)))\n                           \
    \    (list number (- remaining (- number need)))]\n                          \
    \    [(< number (- remaining (- number (- number need))))\n                  \
    \             (list number (- remaining (- number (- number need))))]\n      \
    \                    )\n                       )\n                      )\n  \
    \                   ]\n                )\n               )\n  )\n", "  (cond\n\
    \    [(and (integer? number) \n          (integer? need))\n     (cond\n      \
    \ [(<= remaining 0)\n        (list 0 0)]\n       [(<= remaining (- need number))\n\
    \        (list number (- remaining number))]\n       [else\n        (list number\
    \ (- remaining number))]\n       )]\n    [(and (integer? need)\n          (integer?\
    \ number))\n     (cond\n       [(<= remaining 0)\n        (list 0 0)]\n      \
    \ [(<= remaining (- need number))\n        (list number (- remaining number))]\n\
    \       [else\n        (list number (- remaining number))]\n       )]\n    [else\n\
    \     (cond\n       [(<= remaining 0)\n        (list 0 0)]\n       [(<= remaining\
    \ (- need number))\n        (list number (- remaining number))]\n       [else\n\
    \        (list number (- remaining number))]\n       )]\n   ))\n", "  (cond\n\
    \    [(= remaining 0) (list number 0)]\n    [(= remaining (- need number)) (list\
    \ number 0)]\n    [else (cons (- remaining (- need number)) (eat number (- need\
    \ number) (remaining 0)))]))\n", "  (cond\n    [(and (<= 0 number 1000) (<= 0\
    \ need 1000) (<= 0 remaining 1000)) (list 0 0)]\n    [(= number 0) (list 0 0)]\n\
    \    [(= need 0) (list 0 0)]\n    [else (cond\n             [(= remaining 0) (list\
    \ 0 0)]\n             [(= remaining (- need number)) (list 0 0)]\n           \
    \  [else (cond\n                      [(= (modulo number remaining) 0) (list 0\
    \ 0)]\n                      [(= (modulo number remaining) 1) (list 1 0)]\n  \
    \                    [(= (modulo number remaining) 2) (list 2 0)]\n          \
    \            [(= (modulo number remaining) 3) (list 3 0)]\n                  \
    \    [(= (modulo number remaining) 4) (list 4 0)]\n                      [(= (modulo\
    \ number remaining) 5) (list 5 0)]\n                      [(= (modulo number remaining)\
    \ 6) (list 6 0)]\n                      [(= (modulo number remaining) 7) (list\
    \ 7 0)]\n                      [(= (modulo number remaining) 8) (list 8 0)]\n\
    \                      [(= (modulo number remaining) 9) (list 9 0)]\n        \
    \              [(= (modulo number remaining) 10) (list 10 0)]\n              \
    \        [(= (modulo number remaining) 11) (list 11 0)]\n                    \
    \  [(= (modulo number remaining) 12) (list 12 0)]\n                      [(= (modulo\
    \ number remaining) 13) (list 13 0)]\n                      [(= (modulo number\
    \ remaining) 14) (list 14 0)]\n                      [(= (modulo number remaining)\
    \ 15) (list 15 0)]\n                      [(= (modulo number remaining) 16) (list\
    \ 16 0)]\n                      [(= (modulo number remaining) 17) (list 17 0)]\n\
    \                      [(= (modulo number remaining) 18) (list 18 0)]\n      \
    \                [(= (modulo number remaining) 19) (list 19 0)]\n            \
    \          [(= (modulo number remaining) 20) (list 20 0)]\n                  \
    \    [(= (modulo number remaining) 21) (list 21 0)]\n                      [(=\
    \ (modulo number remaining) 22) (list 22 0)]\n                      [(= (modulo\
    \ number remaining) 23) (list 23 0)]\n                      [(= (modulo number\
    \ remaining) 24) (list 24 0)]\n                      [(= (modulo number remaining)\
    \ 25) (list 25 0)]\n                      [(= (modulo number remaining", "  (cond\n\
    \    [(or (< number 0) (< need 0) (< remaining 0))\n     (list 0 0)]\n    [(<\
    \ number need)\n     (list need (- need number))]\n    [(< need number)\n    \
    \ (list number (- number need))]\n    [(< remaining number)\n     (list (+ number\
    \ need) (- remaining number))]\n    [else\n     (list (+ number need) (- remaining\
    \ number))]))\n", "  (cond\n    [(< number 0) (list 0 0)]\n    [(< need 0) (list\
    \ 0 0)]\n    [(< remaining 0) (list 0 0)]\n    [else (cond\n             [(= remaining\
    \ 0) (list 0 0)]\n             [(= remaining 1) (list number 0)]\n           \
    \  [else (cond\n                      [(= remaining 2) (list number 0)]\n    \
    \                  [(= remaining 3) (list number 0)]\n                      [(=\
    \ remaining 4) (list number 0)]\n                      [(= remaining 5) (list\
    \ number 0)]\n                      [(= remaining 6) (list number 0)]\n      \
    \                [(= remaining 7) (list number 0)]\n                      [(=\
    \ remaining 8) (list number 0)]\n                      [(= remaining 9) (list\
    \ number 0)]\n                      [(= remaining 10) (list number 0)]\n     \
    \                 [(= remaining 11) (list number 0)]\n                      [(=\
    \ remaining 12) (list number 0)]\n                      [(= remaining 13) (list\
    \ number 0)]\n                      [(= remaining 14) (list number 0)]\n     \
    \                 [(= remaining 15) (list number 0)]\n                      [(=\
    \ remaining 16) (list number 0)]\n                      [(= remaining 17) (list\
    \ number 0)]\n                      [(= remaining 18) (list number 0)]\n     \
    \                 [(= remaining 19) (list number 0)]\n                      [(=\
    \ remaining 20) (list number 0)]\n                      [(= remaining 21) (list\
    \ number 0)]\n                      [(= remaining 22) (list number 0)]\n     \
    \                 [(= remaining 23) (list number 0)]\n                      [(=\
    \ remaining 24) (list number 0)]\n                      [(= remaining 25) (list\
    \ number 0)]\n                      [(= remaining 26) (list number 0)]\n     \
    \                 [(= remaining 27) (list number 0)]\n                      [(=\
    \ remaining 28) (list number 0)]\n                      [(= remaining 29) (list\
    \ number 0)]\n                      [(= remaining 30) (list number 0)]\n     \
    \                 [(= remaining 31) (list number 0)]\n                      [(=\
    \ remaining 32) (list number 0)]\n                      [(= remaining 33) (list\
    \ number 0)]\n                      [(= remaining 34) (list number 0)]\n     \
    \                 [(= remaining 35) (list number 0)]\n                      [(=\
    \ remaining 36) (list number 0)]\n                      [(= remaining 37) (list\
    \ number 0)]\n                      [(= remaining 38) (list number 0)]\n     \
    \                 [(= remaining 39) (list number 0)]\n                      [(=\
    \ remaining 40) (list number 0)]\n                      [(= remaining 41) (list\
    \ number 0)]\n                      ", "  (cond\n    [(or (= remaining 0) (= number\
    \ 0))\n     (list 0 0)]\n    [(= remaining 0)\n     (list number 0)]\n    [(=\
    \ number 0)\n     (list 0 0)]\n    [else\n     (let ([carrots (- number need)])\n\
    \       (cond\n         [(< carrots 0)\n          (list 0 0)]\n         [(= carrots\
    \ 0)\n          (list number 0)]\n         [else\n          (let ([remaining-carrots\
    \ (- remaining carrots)])\n            (cond\n              [(< remaining-carrots\
    \ 0)\n               (list number 0)]\n              [(= remaining-carrots 0)\n\
    \               (list 0 0)]\n              [else\n               (let ([total-eaten\
    \ (+ number carrots)])\n                 (cond\n                   [(< total-eaten\
    \ 1000)\n                    (list number 0)]\n                   [(= total-eaten\
    \ 1000)\n                    (list 0 0)]\n                   [else\n         \
    \           (let ([total-carrots (- total-eaten 1000)])\n                    \
    \  (cond\n                        [(< total-carrots 0)\n                     \
    \    (list number 0)]\n                        [(= total-carrots 0)\n        \
    \                 (list 0 0)]\n                        [else\n               \
    \          (list total-eaten total-carrots)]))]))]))]))]))\n", "  (cond\n    [(or\
    \ (= remaining 0) (= number 0))\n     (list 0 0)]\n    [(= remaining 0)\n    \
    \ (list number 0)]\n    [(= number 0)\n     (list 0 0)]\n    [else\n     (cond\n\
    \       [(= (modulo remaining need) 0)\n        (cons (+ number need) (remaining\
    \ (rem remaining need)))]\n       [(< remaining need)\n        (cons (+ number\
    \ need) (remaining need))]\n       [else\n        (cons (+ number need) remaining)]\n\
    \       )]))\n", "  (cond\n    [(= remaining 0) (list number 0)]\n    [(= remaining\
    \ 0) (list number 0)]\n    [else (cond\n             [(= (mod number need) 0)\
    \ (cons (+ number need) (remaining 1))]\n             [(= (mod number need) 1)\
    \ (cons (+ number need) (remaining 1))]\n             [(= (mod number need) 2)\
    \ (cons (+ number need) (remaining 1))]\n             [(= (mod number need) 3)\
    \ (cons (+ number need) (remaining 1))]\n             [(= (mod number need) 4)\
    \ (cons (+ number need) (remaining 1))]\n             [(= (mod number need) 5)\
    \ (cons (+ number need) (remaining 1))]\n             [(= (mod number need) 6)\
    \ (cons (+ number need) (remaining 1))]\n             [(= (mod number need) 7)\
    \ (cons (+ number need) (remaining 1))]\n             [(= (mod number need) 8)\
    \ (cons (+ number need) (remaining 1))]\n             [(= (mod number need) 9)\
    \ (cons (+ number need) (remaining 1))]\n             [(= (mod number need) 10)\
    \ (cons (+ number need) (remaining 1))]\n             [(= (mod number need) 11)\
    \ (cons (+ number need) (remaining 1))]\n             [(= (mod number need) 12)\
    \ (cons (+ number need) (remaining 1))]\n             [(= (mod number need) 13)\
    \ (cons (+ number need) (remaining 1))]\n             [(= (mod number need) 14)\
    \ (cons (+ number need) (remaining 1))]\n             [(= (mod number need) 15)\
    \ (cons (+ number need) (remaining 1))]\n             [(= (mod number need) 16)\
    \ (cons (+ number need) (remaining 1))]\n             [(= (mod number need) 17)\
    \ (cons (+ number need) (remaining 1))]\n             [(= (mod number need) 18)\
    \ (cons (+ number need) (remaining 1))]\n             [(= (mod number need) 19)\
    \ (cons (+ number need) (remaining 1))]\n             [(= (mod number need) 20)\
    \ (cons (+ number need) (remaining 1))]\n             [(= (mod number need) 21)\
    \ (cons (+ number need) (remaining ", "  (cond\n    [(or (= remaining 0) (= number\
    \ 0))\n     (list 0 0)]\n    [(= remaining 0)\n     (list number 0)]\n    [(=\
    \ number 0)\n     (list 0 0)]\n    [else\n     (let ([carrots (- number need)])\n\
    \       (cond\n         [(< carrots 0)\n          (list 0 0)]\n         [(< carrots\
    \ remaining)\n          (list carrots remaining)]\n         [else\n          (list\
    \ carrots 0)]\n         )\n       )\n     ]\n   )\n  )\n", "  (cond\n    [(= remaining\
    \ 0) (list number 0)]\n    [(= remaining (- need number)) (list number 0)]\n \
    \   [else (cons (- remaining (- need number)) (eat number (- need number) (remaining\
    \ 0)))]))\n", "  (cond\n    [(and (<= remaining 0) (<= need 0))\n     (list 0\
    \ 0)]\n    [(and (<= remaining 0) (< need 0))\n     (list 0 0)]\n    [(and (<=\
    \ remaining 0) (> need 0))\n     (list 0 0)]\n    [else\n     (cond\n       [(<\
    \ remaining number)\n        (cond\n         [(< need 0)\n          (list 0 0)]\n\
    \         [(< need (- number need))\n          (list 0 0)]\n         [else\n \
    \         (cond\n            [(< need (- number need))\n             (cond\n \
    \             [(< remaining 0)\n               (list 0 0)]\n              [else\n\
    \               (list number (- number need) (- remaining need))])]\n        \
    \    [else\n             (cond\n              [(< remaining 0)\n             \
    \  (list 0 0)]\n              [else\n               (list number (- number need)\
    \ (- remaining need))])])]\n        [else\n         (cond\n          [(< remaining\
    \ 0)\n           (list 0 0)]\n          [else\n           (list number (- number\
    \ need) (- remaining need))])])]))\n", "  (cond\n    [(and (>= number 0) (<= need\
    \ 1000)) (list number 0)]\n    [(and (>= remaining 0) (<= need 1000)) (list remaining\
    \ 0)]\n    [else (cond\n             [(>= remaining 0) (list remaining 0)]\n \
    \            [(>= need 0) (list number 0)]\n             [else (cond\n       \
    \               [(= remaining 0) (list number 0)]\n                      [(= number\
    \ 0) (list remaining 0)]\n                      [else (cond\n                \
    \               [(= number 0) (list remaining 0)]\n                          \
    \     [(= need 0) (list number 0)]\n                               [else (cond\n\
    \                                        [(= number 0) (list remaining 0)]\n \
    \                                       [(= need 0) (list number 0)]\n       \
    \                                 [else (cond\n                              \
    \                   [(= number 0) (list remaining 0)]\n                      \
    \                           [(= need 0) (list number 0)]\n                   \
    \                              [else (cond\n                                 \
    \                        [(= number 0) (list remaining 0)]\n                 \
    \                                        [(= need 0) (list number 0)]\n      \
    \                                                   [else (cond\n            \
    \                                                       [(= number 0) (list remaining\
    \ 0)]\n                                                                   [(=\
    \ need 0) (list number 0)]\n                                                 \
    \                  [else (cond\n                                             \
    \                              [(= number 0) (list remaining 0)]\n           \
    \                                                                [(= need 0) (list\
    \ number 0)]\n                                                               \
    \            [else (cond\n                                                   \
    \                                [(= number 0) (list remaining 0)]\n         \
    \                                                                          [(=\
    \ need 0) (list number 0)]\n                                                 \
    \                                  [else (cond\n                             \
    \                                                                [(= number 0)\
    \ (list remaining 0)]\n                                                      \
    \                                       [(= need 0) (list number 0)]\n       \
    \                                                                            \
    \          [else (cond\n                                                     \
    \                                                  [(= number 0) (list remaining\
    \ 0)]\n                                                                      \
    \                                 [(= need 0) (list number 0)]\n             \
    \                                                                            \
    \              [else (cond\n                                                 \
    \                                                              [(= number 0) (list\
    \ remaining 0)]\n                                                            \
    \                                                   [(= need 0) (list number 0)]\n\
    \                                                                            \
    \                                   [else (cond\n                            \
    \                                                                            \
    \               [(= number 0) (list remaining 0)]\n                          \
    \                                                                            \
    \                 [(= need 0) (list number 0)]\n                             \
    \                                                                            \
    \              [else (cond\n                                                 \
    \                                                                            \
    \   [(= number 0) (list remaining 0)]\n                                      \
    \                                                                            \
    \              [(= need 0) (list number 0)]\n                                \
    \                                                                            \
    \                    [else (cond\n                                           \
    \                                                     [(= number 0) (list remaining\
    \ 0)]\n                                                                      \
    \                          [(= need 0) (list number 0)]\n                    \
    \                                                                            [else\
    \ (cond\n                                                                    \
    \                                      [(= number 0) (list remaining 0)]\n   \
    \                                                                            \
    \                           [(= need 0) (list number 0)]\n                   \
    \                                             ", "  (cond\n    [(or (= remaining\
    \ 0) (= need 0))\n     (list number 0)]\n    [else\n     (cond\n       [(= remaining\
    \ 0)\n        (cond\n         [(= number need)\n          (list number 0)]\n \
    \        [else\n          (list number (- remaining need))])]\n       [else\n\
    \        (cond\n         [(= number need)\n          (list number 0)]\n      \
    \   [else\n          (list number (- remaining need))])]\n       [else\n     \
    \   (cond\n         [(= number need)\n          (list number 0)]\n         [else\n\
    \          (list number (- remaining need))])]\n       [else\n        (cond\n\
    \         [(= number need)\n          (list number 0)]\n         [else\n     \
    \     (list number (- remaining need))])]\n       [else\n        (cond\n     \
    \    [(= number need)\n          (list number 0)]\n         [else\n          (list\
    \ number (- remaining need))])]\n       [else\n        (cond\n         [(= number\
    \ need)\n          (list number 0)]\n         [else\n          (list number (-\
    \ remaining need))])]\n       [else\n        (cond\n         [(= number need)\n\
    \          (list number 0)]\n         [else\n          (list number (- remaining\
    \ need))])]\n       [else\n        (cond\n         [(= number need)\n        \
    \  (list number 0)]\n         [else\n          (list number (- remaining need))])]\n\
    \       [else\n        (cond\n         [(= number need)\n          (list number\
    \ 0)]\n         [else\n          (list number (- remaining need))])]\n       [else\n\
    \        (cond\n         [(= number need)\n          (list number 0)]\n      \
    \   [else\n          (list number (- remaining need))])]\n       [else\n     \
    \   (cond\n         [(= number need)\n          (list number 0)]\n         [else\n\
    \          (list number (- remaining need))])]\n       [else\n        (cond\n\
    \         [(= number need)\n          (list number 0)]\n         [else\n     \
    \     (list number (- remaining need))])]\n       [else\n        (cond\n     \
    \    [(= number need)\n          (list number 0)]\n         [else\n          (list\
    \ number (- remaining need))])]\n       [else\n        (cond\n         [(= number\
    \ need)\n          (", "  (cond\n    [(and (<= 0 number 1000) (<= 0 need 1000)\
    \ (<= 0 remaining 1000)) (list 0 0)]\n    [(and (<= 0 number 1000) (<= 0 need\
    \ 1000) (> remaining 0)) (list 0 0)]\n    [(and (<= 0 number 1000) (> need 0)\
    \ (> remaining 0)) (list 0 0)]\n    [(and (> number 0) (> need 0) (> remaining\
    \ 0)) (list 0 0)]\n    [(and (> number 0) (> need 0) (<= remaining 0)) (list 0\
    \ 0)]\n    [(and (> number 0) (<= need 0) (<= remaining 0)) (list 0 0)]\n    [(and\
    \ (> number 0) (<= need 0) (> remaining 0)) (list 0 0)]\n    [(and (<= number\
    \ 1000) (> need 0) (> remaining 0)) (list 0 0)]\n    [(and (<= number 1000) (>\
    \ need 0) (<= remaining 0)) (list 0 0)]\n    [(and (<= number 1000) (<= need 0)\
    \ (<= remaining 0)) (list 0 0)]\n    [(and (<= number 1000) (<= need 0) (> remaining\
    \ 0)) (list 0 0)]\n    [(and (<= number 1000) (> need 0) (> remaining 0)) (list\
    \ 0 0)]\n    [(and (<= number 1000) (> need 0) (> remaining 0)) (list 0 0)]\n\
    \    [(and (<= number 1000) (> need 0) (> remaining 0)) (list 0 0)]\n    [(and\
    \ (<= number 1000) (> need 0) (> remaining 0)) (list 0 0)]\n    [(and (<= number\
    \ 1000) (> need 0) (> remaining 0)) (list 0 0)]\n    [(and (<= number 1000) (>\
    \ need 0) (> remaining 0)) (list 0 0)]\n    [(and (<= number 1000) (> need 0)\
    \ (> remaining 0)) (list 0 0)]\n    [(and (<= number 1000) (> need 0) (> remaining\
    \ 0)) (list 0 0)]\n    [(and (<= number 1000) (> need 0) (> remaining 0)) (list\
    \ 0 0)]\n    [(and (<= number 1000) (> need 0) (> remaining 0)) (list 0 0)]\n\
    \    [(and (<= number 1000) (> need 0) (> remaining 0)) (list 0 0)]\n    [(and\
    \ (<= number 1000) (> need 0) (> remaining 0)) (list 0 0)]\n    [(and (<= number\
    \ 1000) (> need 0) (> remaining 0)) (list 0 0)]\n    [", "  (cond\n    [(or (=\
    \ remaining 0) (= number 0))\n     (list 0 0)]\n    [(= remaining 0)\n     (list\
    \ number 0)]\n    [(= number 0)\n     (list 0 0)]\n    [else\n     (cond\n   \
    \    [(= (mod remaining need) 0)\n        (cond\n         [(= remaining need)\n\
    \          (list 0 0)]\n         [else\n          (list number (- remaining need))])]\n\
    \       [else\n        (cond\n         [(= remaining need)\n          (list number\
    \ (- number need))]\n         [else\n          (list number (- remaining need))])]\n\
    \       [else\n        (cond\n         [(= remaining need)\n          (list number\
    \ 0)]\n         [else\n          (list number 0)])]\n       [else\n        (cond\n\
    \         [(= remaining need)\n          (list number 0)]\n         [else\n  \
    \        (list number 0)])]\n       [else\n        (cond\n         [(= remaining\
    \ need)\n          (list number 0)]\n         [else\n          (list number 0)])]\n\
    \       [else\n        (cond\n         [(= remaining need)\n          (list number\
    \ 0)]\n         [else\n          (list number 0)])]\n       [else\n        (cond\n\
    \         [(= remaining need)\n          (list number 0)]\n         [else\n  \
    \        (list number 0)])]\n       [else\n        (cond\n         [(= remaining\
    \ need)\n          (list number 0)]\n         [else\n          (list number 0)])]\n\
    \       [else\n        (cond\n         [(= remaining need)\n          (list number\
    \ 0)]\n         [else\n          (list number 0)])]\n       [else\n        (cond\n\
    \         [(= remaining need)\n          (list number 0)]\n         [else\n  \
    \        (list number 0)])]\n       [else\n        (cond\n         [(= remaining\
    \ need)\n          (list number 0)]\n         [else\n          (list number 0)])]\n\
    \       [else\n        (cond\n         [(= remaining need)\n          (list number\
    \ 0)]\n         [else\n          (list number 0)])]\n       [else\n        (cond\n\
    \         [(= remaining need)\n          (list number 0)]\n         [else\n  \
    \        (list number 0)])]\n       [else\n        (cond\n         [(= remaining\
    \ need)\n          (list number ", "  (cond\n    [(or (= remaining 0) (= number\
    \ 0))\n     (list 0 0)]\n    [(= remaining 0)\n     (list number 0)]\n    [else\n\
    \     (cond\n       [(= (modulo number need) 0)\n        (list number 0)]\n  \
    \     [(= (modulo number need) 1)\n        (list number (- remaining 1))]\n  \
    \     [(= (modulo number need) 2)\n        (list number (- remaining 2))]\n  \
    \     [(= (modulo number need) 3)\n        (list number (- remaining 3))]\n  \
    \     [(= (modulo number need) 4)\n        (list number (- remaining 4))]\n  \
    \     [(= (modulo number need) 5)\n        (list number (- remaining 5))]\n  \
    \     [(= (modulo number need) 6)\n        (list number (- remaining 6))]\n  \
    \     [(= (modulo number need) 7)\n        (list number (- remaining 7))])]))\n",
  "  (cond\n    [(= remaining 0) (list number 0)]\n    [(= remaining 0) (list number\
    \ 0)]\n    [else (cond [(= (modulo number need) 0) (list number 0)]\n        \
    \      [(= (modulo number need) 0) (list number 0)]\n              [else (cond\
    \ [(= (modulo number need) 0) (list number 0)]\n                        [(= (modulo\
    \ number need) 0) (list number 0)]\n                        [else (cond [(= (modulo\
    \ number need) 0) (list number 0)]\n                                  [(= (modulo\
    \ number need) 0) (list number 0)]\n                                  [(= (modulo\
    \ number need) 0) (list number 0)]\n                                  [(= (modulo\
    \ number need) 0) (list number 0)]\n                                  [(= (modulo\
    \ number need) 0) (list number 0)]\n                                  [(= (modulo\
    \ number need) 0) (list number 0)]\n                                  [(= (modulo\
    \ number need) 0) (list number 0)]\n                                  [(= (modulo\
    \ number need) 0) (list number 0)]\n                                  [(= (modulo\
    \ number need) 0) (list number 0)]\n                                  [(= (modulo\
    \ number need) 0) (list number 0)]\n                                  [(= (modulo\
    \ number need) 0) (list number 0)]\n                                  [(= (modulo\
    \ number need) 0) (list number 0)]\n                                  [(= (modulo\
    \ number need) 0) (list number 0)]\n                                  [(= (modulo\
    \ number need) 0) (list number 0)]\n                                  [(= (modulo\
    \ number need) 0) (list number 0)]\n                                  [(= (modulo\
    \ number need) 0) (list number 0)]\n                                  [(= (modulo\
    \ number need) 0) (list number 0)]\n                                  [(= (modulo\
    \ number need) 0) (list number 0)]\n                                  [(= (modulo\
    \ number need) 0) (list number 0)]\n                                  [(= (modulo\
    \ number need) 0) (list number 0)]\n                                  [(= (modulo\
    \ number need) 0) (list number 0)]\n                                  [(= (modulo\
    \ number need) 0) (list number 0)]\n                                  [(= (modulo\
    \ number need) 0) (list number 0)]\n                                  [(= (modulo\
    \ number need) 0) (list number 0)]\n                                  [(= (modulo\
    \ number need) 0) (list number 0)]\n                                  [(= (modulo\
    \ number need) 0) ", "  (cond\n    [(< number 1000) (list 0 0)]\n    [(< need\
    \ 1000) (list 0 0)]\n    [(< remaining 1000) (list 0 0)]\n    [else (cond\n  \
    \           [(> remaining 0) (cond\n                                   [(> number\
    \ need) (list 0 0)]\n                                   [(= number need) (list\
    \ number 0)]\n                                   [else (cond\n               \
    \                            [(> number remaining) (list 0 0)]\n             \
    \                              [(= number remaining) (list number 0)]\n      \
    \                                     [else (cond\n                          \
    \                         [(= number need) (list number 0)]\n                \
    \                                   [(= number remaining) (list number 0)]\n \
    \                                                  [else (cond\n             \
    \                                              [(= number remaining) (list number\
    \ 0)]\n                                                           [(= number need)\
    \ (list number 0)]\n                                                         \
    \  [else (cond\n                                                             \
    \      [(= number need) (list number 0)]\n                                   \
    \                                [(= number remaining) (list number 0)]\n    \
    \                                                               [else (cond\n\
    \                                                                           [(=\
    \ number remaining) (list number 0)]\n                                       \
    \                                    [(= number need) (list number 0)]\n     \
    \                                                                      [else (cond\n\
    \                                                                            \
    \       [(= number need) (list number 0)]\n                                  \
    \                                                 [(= number remaining) (list\
    \ number 0)]\n                                                               \
    \                    [else (cond\n                                           \
    \                                                  [(= number remaining) (list\
    \ number 0)]\n                                                               \
    \                              [(= number need) (list number 0)]\n           \
    \                                                                            \
    \      [else (cond\n                                                         \
    \                                            [(= number need) (list number 0)]\n\
    \                                                                            \
    \                         [(= number remaining) (list number 0)]\n           \
    \                                                                            \
    \              [else (cond\n                                                 \
    \                                                            [(= number remaining)\
    \ (list number 0)]\n                                                         \
    \                                                    [(= number need) (list number\
    \ 0)]\n                                                                      \
    \                                       [else (cond\n                        \
    \                                                                            \
    \                 [(= number need) (list number 0)]\n                        \
    \                                                                            \
    \                 [(= number remaining) (list number 0)]\n                   \
    \                                                                            \
    \                      [else (cond\n                                         \
    \                                                                            \
    \        [(= number remaining) (list number 0)]\n                            \
    \                                                                            \
    \                     [(= number need) (list number 0)]\n                    \
    \                                                                            \
    \                             [else (cond\n                                  \
    \                                                                            \
    \                       [(= number need) (list number 0)]\n                  \
    \                                                                            \
    \                                       [(= number remaining) (list number 0)]\n\
    \                                                                            \
    \                                                         [else (cond\n      \
    \                                                                            \
    \                                                           [(= number remaining)\
    \ (list number 0)]\n                                                         \
    \                                                                            \
    \        [(= number need) (list number 0)]\n                                 \
    \                                                                            \
    \                                [else (cond\n                               \
    \                                                                            \
    \                              [(= number need) (list number 0)]\n           \
    \                                                                            \
    \                                                  [(= number remaining) (list\
    \ number 0)]\n                                                               \
    \                                                                          [else\
    \ (", "  (cond\n    [(or (= remaining 0) (= need 0))\n     (list number 0)]\n\
    \    [(= remaining 0)\n     (list number 0)]\n    [(= need 0)\n     (list number\
    \ 0)]\n    [else\n     (cond\n       [(= (modulo number remaining) 0)\n      \
    \  (cond\n         [(= number 0)\n          (list number 0)]\n         [else\n\
    \          (list number (- number remaining))]\n         )]\n       [else\n  \
    \      (cond\n         [(= number 0)\n          (list number 0)]\n         [else\n\
    \          (list number (- number remaining))]\n         )]\n       )]\n     )]))\n",
  "  (cond\n    [(or (= remaining 0) (= number 0))\n     (list 0 0)]\n    [(= remaining\
    \ 0)\n     (list number 0)]\n    [(= number 0)\n     (list 0 0)]\n    [else\n\
    \     (cond\n       [(< need (- remaining number))\n        (list 0 0)]\n    \
    \   [(< remaining 0)\n        (list number 0)]\n       [(< number 0)\n       \
    \ (list 0 0)]\n       [else\n        (cond\n          [(< remaining number)\n\
    \           (list number (- remaining number))]\n          [else\n           (list\
    \ number (- remaining number))])])]))\n", "  (cond\n    [(or (= remaining 0) (=\
    \ number 0))\n     (list 0 0)]\n    [(= remaining 0)\n     (list number 0)]\n\
    \    [(= number need)\n     (list number 0)]\n    [else\n     (let ([remaining-carrots\
    \ (- remaining need)])\n       (cond\n         [(< remaining-carrots 0)\n    \
    \      (list number 0)]\n         [else\n          (list number (+ number need))]))]))\n",
  "  (cond\n    [(or (= remaining 0) (= number 0))\n     (list 0 0)]\n    [(= remaining\
    \ 0)\n     (list number 0)]\n    [(= number 0)\n     (list 0 0)]\n    [else\n\
    \     (cond\n       [(= remaining need)\n        (list number 0)]\n       [(<\
    \ remaining need)\n        (list number need)]\n       [else\n        (list number\
    \ (- remaining need))]\n       )]))\n", "  (cond\n    [(or (= remaining 0) (=\
    \ number 0))\n     (list 0 0)]\n    [(= remaining 0)\n     (list number 0)]\n\
    \    [(= number 0)\n     (list 0 0)]\n    [else\n     (cond\n       [(< need (-\
    \ remaining number))\n        (cond\n         [(= remaining 0)\n          (list\
    \ number 0)]\n         [else\n          (cond\n            [(< remaining 0)\n\
    \             (list number 0)]\n            [else\n             (list number (-\
    \ remaining number))])])]\n       [else\n        (cond\n         [(< remaining\
    \ 0)\n          (list number 0)]\n         [else\n          (cond\n          \
    \  [(< remaining 0)\n             (list number 0)]\n            [else\n      \
    \       (list number (- remaining number))])])]]))\n", "  (cond\n    [(and (<=\
    \ number 1000) (<= need 1000) (<= remaining 1000)) (list number need)]\n    [else\
    \ (list number need (remaining (remaining - need)))]))\n", "  (cond\n    [(or\
    \ (= remaining 0) (= need 0))\n     (list number 0)]\n    [(= remaining 0)\n \
    \    (list number 0)]\n    [(= need 0)\n     (list number 0)]\n    [else\n   \
    \  (cond\n       [(= (modulo number remaining) 0)\n        (list number 0)]\n\
    \       [(= (modulo number remaining) 1)\n        (list number (- remaining 1))]\n\
    \       [else\n        (cond\n          [(= (modulo number remaining) 2)\n   \
    \        (list number (- remaining 2))]\n          [else\n           (cond\n \
    \            [(= (modulo number remaining) 3)\n              (list number (- remaining\
    \ 3))]\n             [else\n              (cond\n                [(= (modulo number\
    \ remaining) 4)\n                 (list number (- remaining 4))]\n           \
    \     [else\n                 (cond\n                   [(= (modulo number remaining)\
    \ 5)\n                    (list number (- remaining 5))]\n                   [else\n\
    \                    (cond\n                      [(= (modulo number remaining)\
    \ 6)\n                       (list number (- remaining 6))]\n                \
    \      [else\n                       (cond\n                         [(= (modulo\
    \ number remaining) 7)\n                           (list number (- remaining 7))]\n\
    \                         [else\n                           (cond\n          \
    \                   [(= (modulo number remaining) 8)\n                       \
    \        (list number (- remaining 8))]\n                             [else\n\
    \                               (cond\n                                 [(= (modulo\
    \ number remaining) 9)\n                                   (list number (- remaining\
    \ 9))]\n                                 [else\n                             \
    \      (cond\n                                     [(= (modulo number remaining)\
    \ 10)\n                                       (list number (- remaining 10))]\n\
    \                                     [else\n                                \
    \       (cond\n                                         [(= (modulo number remaining)\
    \ 11)\n                                           (list number (- remaining 11))]\n\
    \                                         [else\n                            \
    \               (cond\n                                             [(= (modulo\
    \ number remaining) 12)\n                                               (list\
    \ number (- remaining 12))]\n                                             [else\n\
    \                                               (cond\n                      \
    \                           [(= (modulo number remaining) 13)\n              \
    \                                     (list number (- remaining 13))]\n      \
    \                                           [else\n                          \
    \                         (cond\n                                            \
    \         [(= (modulo number remaining) 14)\n                                \
    \                       (list number (- remaining 14))]\n                    \
    \                                 [else\n                                    \
    \                   (cond\n                                                  \
    \       [(= (modulo number remaining) 15)\n                                  \
    \                         (list number (- remaining 15))]\n                  \
    \                                       [else\n                              \
    \                             (cond\n                                        \
    \                     [(= (modulo number remaining) 16)\n                    \
    \                                           (list number (- remaining 16))]\n\
    \                                                             [else\n        \
    \                                                       (cond\n              \
    \                                                  [(= (modulo ", "  (cond\n \
    \   [(or (= remaining 0) (= number 0))\n     (list 0 0)]\n    [(= remaining 0)\n\
    \     (list number 0)]\n    [else\n     (cond\n       [(< need number)\n     \
    \   (list number 0)]\n       [(< number need)\n        (list number 0)]\n    \
    \   [(< number need)\n        (list number 0)]\n       [(< number need)\n    \
    \    (list number 0)]\n       [(< number need)\n        (list number 0)]\n   \
    \    [(< number need)\n        (list number 0)]\n       [(< number need)\n   \
    \     (list number 0)]\n       [(< number need)\n        (list number 0)]\n  \
    \     [(< number need)\n        (list number 0)]\n       [(< number need)\n  \
    \      (list number 0)]\n       [(< number need)\n        (list number 0)]\n \
    \      [(< number need)\n        (list number 0)]\n       [(< number need)\n \
    \       (list number 0)]\n       [(< number need)\n        (list number 0)]\n\
    \       [(< number need)\n        (list number 0)]\n       [(< number need)\n\
    \        (list number 0)]\n       [(< number need)\n        (list number 0)]\n\
    \       [(< number need)\n        (list number 0)]\n       [(< number need)\n\
    \        (list number 0)]\n       [(< number need)\n        (list number 0)]\n\
    \       [(< number need)\n        (list number 0)]\n       [(< number need)\n\
    \        (list number 0)]\n       [(< number need)\n        (list number 0)]\n\
    \       [(< number need)\n        (list number 0)]\n       [(< number need)\n\
    \        (list number 0)]\n       [(< number need)\n        (list number 0)]\n\
    \       [(< number need)\n        (list number 0)]\n       [(< number need)\n\
    \        (list number 0)]\n       [(< number need)\n        (list number 0)]\n\
    \       [(< number need)\n        (list number 0)]\n       [(< number need)\n\
    \        (list number 0)]\n       [(< number need)\n        (list number 0)]\n\
    \       [(< number need)\n        (list number 0)]\n       [(< number need)\n\
    \        (list number 0)]\n       [(< number need)\n        (list number 0)]\n\
    \       [(< number need)\n        (list number 0)]\n       [(< number need)\n",
  "  (cond\n    [(or (= remaining 0) (= number 0))\n     (list 0 0)]\n    [(= remaining\
    \ 0)\n     (list number 0)]\n    [(= number 0)\n     (list 0 0)]\n    [else\n\
    \     (let ([carrots (- remaining need)])\n       (cond\n         [(< carrots\
    \ 0)\n          (list 0 0)]\n         [(< carrots number)\n          (list number\
    \ 0)]\n         [(< carrots number)\n          (list carrots (- carrots number))]\n\
    \         [else\n          (list carrots (- carrots number))]))]))\n", "  (cond\n\
    \    [(or (< number 1000) (< need 1000) (< remaining 1000)) (list 0 0)]\n    [(=\
    \ number 0) (list 0 0)]\n    [(= need 0) (list 0 0)]\n    [(= remaining 0) (list\
    \ 0 0)]\n    [else (cond\n             [(= remaining (- need number)) (list 0\
    \ 0)]\n             [(= remaining (- number need)) (list 0 0)]\n             [else\
    \ (cond\n                      [(= remaining (- need (- number need)))\n     \
    \                  (list 0 0)]\n                      [(= remaining (- number\
    \ (- need number)))\n                       (list 0 0)]\n                    \
    \  [else (cond\n                              [(= remaining (- need (- number\
    \ (- need number))))\n                               (list 0 0)]\n           \
    \                   [(= remaining (- number (- need (- number need))))\n     \
    \                          (list 0 0)]\n                              [else (cond\n\
    \                                      [(= remaining (- need (- number (- need\
    \ (- number need))))) (list 0 0)]\n                                      [(= remaining\
    \ (- number (- need (- number (- need number))))) (list 0 0)]\n              \
    \                        [(= remaining (- number (- need (- number (- need (-\
    \ number need))))))\n                                       (list 0 0)]\n    \
    \                                  [else (cond\n                             \
    \                 [(= remaining (- need (- number (- need (- number (- need number))))))\n\
    \                                               (list 0 0)]\n                \
    \                              [(= remaining (- number (- need (- number (- need\
    \ (- number need))))))\n                                               (list 0\
    \ 0)]\n                                              [(= remaining (- number (-\
    \ need (- number (- need (- number (- need (- number need)))))))\n           \
    \                                    (list 0 0)]\n                           \
    \                   [else (cond\n                                            \
    \          [(= remaining (- need (- number (- need (- number (- need (- number\
    \ need)))))))\n                                                       (list 0\
    \ 0)]\n                                                      [(= remaining (-\
    \ number (- need (- number (- need (- number (- need number)))))))\n         \
    \                                              (list 0 0)]\n                 \
    \                                     [(= remaining (- number (- need (- number\
    \ (- need (- number (- need (- number need)))))))\n                          \
    \                             (list 0 0)]\n                                  \
    \                    [(= remaining (- number (- need (- number (- need (- number\
    \ (- need (- number (- need number))))))))\n                                 \
    \                      (list 0 0)]\n                                         \
    \             [else (cond\n                                                  \
    \            [(= remaining (- need (- ", "  (cond\n    [(= remaining 0) (list\
    \ number 0)]\n    [(= remaining (- need number)) (list number 0)]\n    [else (cons\
    \ (- remaining (- need number)) (eat number (- need number) (remaining (remaining\
    \ - number))))]))\n", "  (cond\n    [(= remaining 0) (list number 0)]\n    [(=\
    \ remaining (- need number)) (list number 0)]\n    [else (cond [(< remaining 0)\
    \ (list number 0)]\n               [(< remaining (- need number)) (list number\
    \ 0)]\n               [(= remaining (- need (- number need)))\n              \
    \  (list (- number need) (- remaining need))]\n               [else (cond [(<\
    \ remaining (- number need)) (list number 0)]\n                         [(< remaining\
    \ (- need (- number need)))\n                          (list (- number need) (-\
    \ remaining need))]\n                         [else (cond [(< remaining (- need\
    \ (- number need)))\n                                      (list number 0)]\n\
    \                                   [(< remaining (- need (- number need)))\n\
    \                                      (list number 0)]\n                    \
    \               [(< remaining (- need (- number need)))\n                    \
    \                  (list number 0)]\n                                   [(< remaining\
    \ (- need (- number need)))\n                                      (list number\
    \ 0)]\n                                   [(< remaining (- need (- number need)))\n\
    \                                      (list number 0)]\n                    \
    \               [(< remaining (- need (- number need)))\n                    \
    \                  (list number 0)]\n                                   [(< remaining\
    \ (- need (- number need)))\n                                      (list number\
    \ 0)]\n                                   [(< remaining (- need (- number need)))\n\
    \                                      (list number 0)]\n                    \
    \               [(< remaining (- need (- number need)))\n                    \
    \                  (list number 0)]\n                                   [(< remaining\
    \ (- need (- number need)))\n                                      (list number\
    \ 0)]\n                                   [(< remaining (- need (- number need)))\n\
    \                                      (list number 0)]\n                    \
    \               [(< remaining (- need (- number need)))\n                    \
    \                  (list number 0)]\n                                   [(< remaining\
    \ (- need (- number need)))\n                                      (list number\
    \ 0)]\n                                   [(< remaining (- need (- number need)))\n\
    \                                      (list number 0)]\n                    \
    \               [(< remaining (- need (- number need)))\n                    \
    \                  (list number 0)]\n                                   [(< remaining\
    \ (- need (- number need)))\n                                      (list number\
    \ 0)]\n                                   [(< remaining (- need (- number need)))\n\
    \                                      (list number 0)]\n                    \
    \               [(< remaining (- need (- number need)))\n                    \
    \                  (list number 0)]\n                                   [(< remaining\
    \ (- need (- number need)))\n                                      (list number\
    \ 0)]", "  (cond\n    [(or (= remaining 0) (= number 0))\n     (list 0 0)]\n \
    \   [(= remaining 0)\n     (list number 0)]\n    [else\n     (cond\n       [(=\
    \ (modulo number need) 0)\n        (cond\n         [(= number need)\n        \
    \  (list number 0)]\n         [else\n          (list number (- need (modulo number\
    \ need)))])]\n       [else\n        (cond\n         [(= number need)\n       \
    \   (list number 0)]\n         [else\n          (list number (- need (modulo number\
    \ need)))])]\n       [else\n        (cond\n         [(= number need)\n       \
    \   (list number 0)]\n         [else\n          (list number (- need (modulo number\
    \ need)))])]\n       [else\n        (cond\n         [(= number need)\n       \
    \   (list number 0)]\n         [else\n          (list number (- need (modulo number\
    \ need)))])]\n       [else\n        (cond\n         [(= number need)\n       \
    \   (list number 0)]\n         [else\n          (list number (- need (modulo number\
    \ need)))])]\n       [else\n        (cond\n         [(= number need)\n       \
    \   (list number 0)]\n         [else\n          (list number (- need (modulo number\
    \ need)))])]\n       [else\n        (cond\n         [(= number need)\n       \
    \   (list number 0)]\n         [else\n          (list number (- need (modulo number\
    \ need)))])]\n       [else\n        (cond\n         [(= number need)\n       \
    \   (list number 0)]\n         [else\n          (list number (- need (modulo number\
    \ need)))])]\n       [else\n        (cond\n         [(= number need)\n       \
    \   (list number 0)]\n         [else\n          (list number (- need (modulo number\
    \ need)))])]\n       [else\n        (cond\n         [(= number need)\n       \
    \   (list number 0)]\n         [else\n          (list number (- need (modulo number\
    \ need)))])]\n       [else\n        (cond\n         [(= number need)\n       \
    \   (list number 0)]\n         [else\n          (list number (- need (modulo number\
    \ need)))])]\n       [else\n        (cond\n         [(= number need)\n       \
    \   (list number 0)]\n         [else\n          (", "  (cond\n    [(= remaining\
    \ 0) (list number 0)]\n    [(= remaining (- need number)) (list number 0)]\n \
    \   [else (cons (- remaining (- need number)) (eat number (- need number) (remaining\
    \ 0)))]))\n", "  (cond\n    [(and (<= remaining 0) (<= need 0))\n     (list number\
    \ 0)]\n    [(and (<= remaining 0) (< need 0))\n     (list number 0)]\n    [(and\
    \ (<= remaining 0) (> need 0))\n     (list number 0)]\n    [else\n     (cond\n\
    \       [(< remaining number)\n        (cons (- remaining number) (eat number\
    \ (- need number) remaining))]\n       [(< remaining number)\n        (cons (-\
    \ number remaining) (eat number (- need number) remaining))]\n       [(< remaining\
    \ number)\n        (cons (- number remaining) (eat number (- need number) remaining))]\n\
    \       [(< remaining number)\n        (cons (- number remaining) (eat number\
    \ (- need number) remaining))]\n       [(< remaining number)\n        (cons (-\
    \ number remaining) (eat number (- need number) remaining))]\n       [(< remaining\
    \ number)\n        (cons (- number remaining) (eat number (- need number) remaining))]\n\
    \       [(< remaining number)\n        (cons (- number remaining) (eat number\
    \ (- need number) remaining))]\n       [(< remaining number)\n        (cons (-\
    \ number remaining) (eat number (- need number) remaining))]\n       [(< remaining\
    \ number)\n        (cons (- number remaining) (eat number (- need number) remaining))]\n\
    \       [(< remaining number)\n        (cons (- number remaining) (eat number\
    \ (- need number) remaining))]\n       [(< remaining number)\n        (cons (-\
    \ number remaining) (eat number (- need number) remaining))]\n       [(< remaining\
    \ number)\n        (cons (- number remaining) (eat number (- need number) remaining))]\n\
    \       [(< remaining number)\n        (cons (- number remaining) (eat number\
    \ (- need number) remaining))]\n       [(< remaining number)\n        (cons (-\
    \ number remaining) (eat number (- need number) remaining))]\n       [(< remaining\
    \ number)\n        (cons (- number remaining) (eat number (- need number) remaining))]\n\
    \       [(< remaining number)\n        (cons (- number remaining) (eat number\
    \ (- need number) remaining))]\n       [(< remaining number)\n        (cons (-\
    \ number remaining) (eat number (- need number) remaining))]\n       [(< remaining\
    \ number)\n        (cons (- number remaining) (eat number (- need number) remaining))]\n\
    \       [(< remaining number)\n        (cons (- number remaining) (eat number\
    \ (- need number) remaining))]\n       [(< remaining number)\n        (cons (-\
    \ number remaining) (eat number (- need number) remaining))]\n       [(< remaining\
    \ number)\n        (cons (- number remaining) ", "  (cond\n    [(= remaining 0)\
    \ (list number 0)]\n    [(= remaining (- need number)) (list number 0)]\n    [else\
    \ (cons (- remaining (- need number)) (eat number (- need number) (remaining 0)))]))\n",
  "  (cond\n    [(= remaining 0) (list number 0)]\n    [(= remaining (- need number))\
    \ (list number 0)]\n    [else (cons (- remaining (- need number)) (eat number\
    \ (- need number) (remaining 0)))]))\n", "  (cond\n    [(= remaining 0) (list\
    \ number 0)]\n    [(= remaining need) (list number 0)]\n    [else (cons (- remaining\
    \ need) (cons number (eat remaining (- need number) 0)))]))\n", "  (cond\n   \
    \ [(= remaining 0) (list number 0)]\n    [(= remaining need) (list number 0)]\n\
    \    [else (cons (- remaining need) (cons 0 (eat remaining (- need number) 0)))]))\n",
  "  (cond\n    [(and (<= number 1000) (<= need 1000) (<= remaining 1000)) (list number\
    \ need)]\n    [else (list number need (remaining (remaining - need)))]))\n", " \
    \ (cond\n    [(= remaining 0) (list number 0)]\n    [(= remaining (- need number))\
    \ (list number 0)]\n    [else (cons (- remaining (- need number)) (eat number\
    \ (- number need) remaining))]))\n", "  (cond\n    [(= remaining 0) (list number\
    \ 0)]\n    [(= remaining (- need number)) (list number 0)]\n    [else (cons (-\
    \ remaining (- need number)) (eat number (- need number) (remaining 0))]\n  ))\n",
  "  (cond\n    [(or (= remaining 0) (= need 0))\n     (list number 0)]\n    [(= remaining\
    \ 0)\n     (list number 0)]\n    [(= need 0)\n     (list number 0)]\n    [else\n\
    \     (cond\n       [(= (modulo number remaining) 0)\n        (list number remaining)]\n\
    \       [else\n        (cond\n          [(= (modulo number remaining) 1)\n   \
    \        (cons (- number remaining) (eat remaining (- number need) remaining))]\n\
    \          [else\n           (cons (- number remaining) (eat remaining (- number\
    \ need) remaining))]\n          ])]\n       )])]))\n", "  (cond\n    [(or (= remaining\
    \ 0) (= number 0))\n     (list 0 0)]\n    [(< remaining 0)\n     (list number\
    \ 0)]\n    [(< number need)\n     (cons (- number need)\n           (eat remaining\
    \ (- number need) remaining))]\n    [else\n     (cons (- number need)\n      \
    \     (eat remaining need (- remaining need)))]))\n", "  (cond\n    [(and (<=\
    \ number 1000) (<= need 1000) (<= remaining 1000)) (list number need)]\n    [else\
    \ (list number need)]))\n", "  (cond\n    [(or (= remaining 0) (= need 0))\n \
    \    (list number 0)]\n    [(< remaining 0)\n     (list number 0)]\n    [else\n\
    \     (cond\n       [(< need 0)\n        (list number 0)]\n       [(< number 0)\n\
    \        (list 0 remaining)]\n       [else\n        (cond\n          [(< remaining\
    \ 0)\n           (list number 0)]\n          [(< number 0)\n           (list 0\
    \ remaining)]\n          [else\n           (cond\n             [(< remaining 0)\n\
    \              (list number 0)]\n             [else\n              (cond\n   \
    \             [(< need 0)\n                 (list number 0)]\n               \
    \ [else\n                 (cond\n                  [(< number 0)\n           \
    \        (list 0 remaining)]\n                  [else\n                   (cond\n\
    \                     [(< remaining 0)\n                      (list number 0)]\n\
    \                     [else\n                      (cond\n                   \
    \    [(< need 0)\n                        (list number 0)]\n                 \
    \      [else\n                        (cond\n                         [(< number\
    \ 0)\n                          (list 0 remaining)]\n                        \
    \ [else\n                          (cond\n                           [(< remaining\
    \ 0)\n                            (list number 0)]\n                         \
    \  [else\n                            (cond\n                             [(<\
    \ need 0)\n                              (list number 0)]\n                  \
    \           [else\n                              (cond\n                     \
    \          [(< number 0)\n                               (list 0 remaining)]\n\
    \                               [else\n                               (cond\n\
    \                                 [(< remaining 0)\n                         \
    \         (list number 0)]\n                                 [else\n         \
    \                         (cond\n                                   [(< need 0)\n\
    \                                    (list number 0)]\n                      \
    \             [else\n                                    (cond\n             \
    \                        [(< number 0)\n                                     \
    \ (list 0 remaining)]\n                                     [else\n          \
    \                            (cond\n                                       [(<\
    \ remaining 0)\n                                        (list number 0)]\n   \
    \                                    [else\n                                 \
    \       (cond\n                                         [(< need 0)\n        \
    \                                  (list number 0)]\n                        \
    \                 [else\n                                          (cond\n   \
    \                                        [(< number 0)\n                     \
    \                        (list 0 remaining)]\n                               \
    \            [else\n                                             (cond\n     \
    \                                         [(< remaining 0)\n                 \
    \                              (list number 0)]\n                            \
    \                  [else\n                                               (cond\n\
    \                                                 [(< need 0)\n              \
    \                                    (list number 0)]\n                      \
    \                           [else\n                                          \
    \        (cond\n                                                   [(< number\
    \ 0)\n                                                    (list 0 remaining)]\n\
    \                                                   [else\n                  \
    \                                  (cond\n                                   \
    \                  [(< remaining 0)\n                                        \
    \              (list number 0)]\n                                            \
    \         [else\n                                                      (cond\n\
    \                                                       [(< need 0)\n        \
    \                                                (list number 0)]\n          \
    \                                             [else\n                        \
    \                                ", "  (cond\n    [(and (<= remaining 0) (<= need\
    \ 0))\n     (list number 0)]\n    [(and (<= remaining 0) (< need 0))\n     (list\
    \ number 0)]\n    [(and (<= remaining 0) (> need 0))\n     (list number 0)]\n\
    \    [else\n     (let ([carrots (- number need)])\n       (cond\n         [(<\
    \ carrots 0)\n          (list number 0)]\n         [(> carrots 0)\n          (list\
    \ number 0)]\n         [else\n          (let ([remaining-carrots (- remaining\
    \ carrots)])\n            (cond\n              [(< remaining-carrots 0)\n    \
    \           (list number 0)]\n              [(> remaining-carrots 0)\n       \
    \        (list number 0)]\n              [else\n               (list number (+\
    \ remaining carrots))])])]))))\n", "  (cond\n    [(= remaining 0) (list number\
    \ 0)]\n    [(= remaining (- need number)) (list number 0)]\n    [else (cons (-\
    \ remaining (- need number)) (eat number (- need number) (- remaining number)))]))\n",
  "  (cond\n    [(and (<= number 1000) (<= need 1000) (<= remaining 1000)) (list number\
    \ need)]\n    [else (list number need 0)]))\n", "  (cond\n    [(= remaining 0)\
    \ (list number 0)]\n    [(= remaining need) (list number 0)]\n    [else (cond\n\
    \             [(= (mod number need) 0) (list number 0)]\n             [(= (mod\
    \ number need) 1) (list number (- need (mod number need)))]\n             [else\
    \ (cond\n                      [(= (mod number need) 2) (list number (- need (mod\
    \ number need)))]\n                      [(= (mod number need) 3) (list number\
    \ (- need (mod number need)))]\n                      [(= (mod number need) 4)\
    \ (list number (- need (mod number need)))]\n                      [(= (mod number\
    \ need) 5) (list number (- need (mod number need)))]\n                      [(=\
    \ (mod number need) 6) (list number (- need (mod number need)))]\n           \
    \           [(= (mod number need) 7) (list number (- need (mod number need)))]\n\
    \                      [(= (mod number need) 8) (list number (- need (mod number\
    \ need)))]\n                      [(= (mod number need) 9) (list number (- need\
    \ (mod number need)))]\n                      [(= (mod number need) 10) (list\
    \ number (- need (mod number need)))]\n                      [(= (mod number need)\
    \ 11) (list number (- need (mod number need)))]\n                      [(= (mod\
    \ number need) 12) (list number (- need (mod number need)))]\n               \
    \       [(= (mod number need) 13) (list number (- need (mod number need)))]\n\
    \                      [(= (mod number need) 14) (list number (- need (mod number\
    \ need)))]\n                      [(= (mod number need) 15) (list number (- need\
    \ (mod number need)))]\n                      [(= (mod number need) 16) (list\
    \ number (- need (mod number need)))]\n                      [(= (mod number need)\
    \ 17) (list number (- need (mod number need)))]\n                      [(= (mod\
    \ number need) 18) (list number (- need (mod number need)))]\n               \
    \       [(= (mod number need) 19) (list number (- need (mod number need)))]\n\
    \                      [(= (mod number need) 20) (list number (- need (mod number\
    \ need)))]\n                      [(= (mod number need) 21) (list number (- need\
    \ (mod number need)))]\n                      [(= (mod number need) 22) (list\
    \ number (- need (mod number need)))", "  (cond\n    [(or (= remaining 0) (= number\
    \ 0))\n     (list 0 0)]\n    [(< remaining 0)\n     (list number 0)]\n    [(<\
    \ number need)\n     (list (- number need) (- remaining need))]\n    [else\n \
    \    (list (+ number need) (+ remaining need))]))\n", "  (cond\n    [(= remaining\
    \ 0) (list number 0)]\n    [(= remaining (- need number)) (list number 0)]\n \
    \   [else (cond [(< remaining (- need number)) (list number 0)]\n            \
    \   [(= remaining (- need (- number need))) (list number 0)]\n               [else\
    \ (cond [(< remaining (- need (- number need)))\n                            \
    \ (list (- number need) (- remaining need))]\n                         [else (cond\
    \ [(< remaining (- need (- number need)))\n                                  \
    \   (list (- number need) (- remaining need))]\n                             \
    \    [else (cond [(< remaining (- need (- number need)))\n                   \
    \                          (list (- number need) (- remaining need))]\n      \
    \                                   [else (cond [(< remaining (- need (- number\
    \ need)))\n                                                     (list (- number\
    \ need) (- remaining need))]\n                                               \
    \  [else (cond [(< remaining (- need (- number need)))\n                     \
    \                                        (list (- number need) (- remaining need))]\n\
    \                                                         [else (cond [(< remaining\
    \ (- need (- number need)))\n                                                \
    \                     (list (- number need) (- remaining need))]\n           \
    \                                                      [else (cond [(< remaining\
    \ (- need (- number need)))\n                                                \
    \                         (list (- number need) (- remaining need))]\n       \
    \                                                          [else (cond [(< remaining\
    \ (- need (- number need)))\n                                                \
    \                         (list (- number need) (- remaining need))]\n       \
    \                                                          [else (cond [(< remaining\
    \ (- need (- number need)))\n                                                \
    \                         (list (- number need) (- remaining need))]\n       \
    \                                                          [else (cond [(< remaining\
    \ (- need (- number need)))\n                                                \
    \                         (list (- number need) (- remaining need))]\n       \
    \                                                          [else (cond [(< remaining\
    \ (- need (- number need)))\n                                                \
    \                         (list (- number need) (- remaining need))]\n       \
    \                                                          [else (cond [(< remaining\
    \ (- need (- number need)))\n                                                \
    \                         (list (- number need) (- remaining need))]\n       \
    \                                                          [else (cond [(< remaining\
    \ (- need (- number need)))\n                                                \
    \                         (list (- number need) (- remaining need))]\n       \
    \                                                          [else (cond [(< remaining\
    \ (- need (- number need)))\n                                                \
    \                         (list (- number need) (- remaining need))]\n       \
    \                                                          [else (cond [(< ",
  "  (cond\n    [(or (= remaining 0) (= number 0))\n     (list 0 0)]\n    [(= remaining\
    \ 0)\n     (list number 0)]\n    [(= number 0)\n     (list 0 0)]\n    [else\n\
    \     (cond\n       [(= remaining need)\n        (list number 0)]\n       [else\n\
    \        (cond\n          [(= remaining (- need remaining))\n           (list\
    \ number 0)]\n          [else\n           (cond\n             [(= remaining (-\
    \ need (- number remaining)))\n              (list number 0)]\n             [else\n\
    \              (cond\n                [(= remaining (- need (- number remaining)))\n\
    \                 (list number 0)]\n                [else\n                 (cond\n\
    \                   [(= remaining (- need (- number remaining)))\n           \
    \         (list number 0)]\n                   [else\n                    (cond\n\
    \                      [(= remaining (- need (- number remaining)))\n        \
    \               (list number 0)]\n                      [else\n              \
    \         (cond\n                         [(= remaining (- need (- number remaining)))\n\
    \                           (list number 0)]\n                         [else\n\
    \                           (cond\n                             [(= remaining\
    \ (- need (- number remaining)))\n                               (list number\
    \ 0)]\n                             [else\n                               (cond\n\
    \                                 [(= remaining (- need (- number remaining)))\n\
    \                                   (list number 0)]\n                       \
    \          [else\n                                   (cond\n                 \
    \                    [(= remaining (- need (- number remaining)))\n          \
    \                             (list number 0)]\n                             \
    \        [else\n                                       (cond\n               \
    \                        [(= remaining (- need (- number remaining)))\n      \
    \                                  (list number 0)]\n                        \
    \               [else\n                                        (cond\n       \
    \                                  [(= remaining (- need (- number remaining)))\n\
    \                                           (list number 0)]\n               \
    \                          [else\n                                           (cond\n\
    \                                           [(= remaining (- need (- number remaining)))\n\
    \                                             (list number 0)]\n             \
    \                              [else\n                                       \
    \      (cond\n                                             [(= remaining (- need\
    \ (- number remaining)))\n                                               (list\
    \ number 0)]\n                                             [else\n           \
    \                                    (cond\n                                 \
    \              [(= remaining (- need (- number remaining)))\n                \
    \                                (list number 0)]\n                          \
    \                     [else\n                                                (cond\n\
    \                                                 [(= remaining (- need (- number\
    \ remaining)))\n                                                   (list number\
    \ 0)]\n                                                 [else\n              \
    \                                     (cond\n                                \
    \                   [(= remaining (- need (- number remaining)))\n           \
    \                                         (list number 0)]\n                 \
    \                                  [else\n                                   \
    \                 (cond\n                                                    \
    \ [(= remaining ", "  (cond\n    [(or (= remaining 0) (= number 0))\n     (list\
    \ 0 0)]\n    [(= remaining 0)\n     (list number 0)]\n    [(= number 0)\n    \
    \ (list 0 0)]\n    [else\n     (cond\n       [(= remaining need)\n        (list\
    \ number 0)]\n       [(< remaining need)\n        (list 0 (- remaining need))]\n\
    \       [else\n        (cond\n          [(< remaining 0)\n           (list 0 0)]\n\
    \          [else\n           (cond\n             [(= remaining 0)\n          \
    \     (list number 0)]\n             [else\n               (cond\n           \
    \      [(< remaining need)\n                   (list 0 (- remaining need))]\n\
    \                 [else\n                   (cond\n                     [(< remaining\
    \ 0)\n                       (list 0 0)]\n                     [else\n       \
    \                (cond\n                         [(= remaining 0)\n          \
    \                 (list number 0)]\n                         [else\n         \
    \                  (cond\n                             [(< remaining need)\n \
    \                              (list 0 (- remaining need))]\n                \
    \             [else\n                               (cond\n                  \
    \               [(< remaining 0)\n                                   (list 0 0)]\n\
    \                                 [else\n                                   (cond\n\
    \                                     [(= remaining 0)\n                     \
    \                  (list number 0)]\n                                     [else\n\
    \                                       (cond\n                              \
    \           [(< remaining need)\n                                           (list\
    \ 0 (- remaining need))]\n                                         [else\n   \
    \                                        (cond\n                             \
    \                [(< remaining 0)\n                                          \
    \     (list 0 0)]\n                                             [else\n      \
    \                                         (cond\n                            \
    \                     [(= remaining 0)\n                                     \
    \              (list number 0)]\n                                            \
    \     [else\n                                                   (cond\n      \
    \                                               [(< remaining need)\n        \
    \                                               (list 0 (- remaining need))]\n\
    \                                                     [else\n                \
    \                                       (cond\n                              \
    \                           [(< remaining 0)\n                               \
    \                            (list 0 0)]\n                                   \
    \                      [else\n                                               \
    \            (cond\n                                                         \
    \    [(= remaining 0)\n                                                      \
    \         (list number 0)]\n                                                 \
    \            [else\n                                                         \
    \      (cond\n                                                               \
    \ [(< remaining need)\n                                                      \
    \           (list 0 (- remaining need))]\n                                   \
    \                             [else\n                                        \
    \                         (cond\n                                            \
    \                       [(< remaining 0)\n                                   \
    \                                (list 0 0)]\n                               \
    \                                    [else\n                                 \
    \                                  (cond\n                                   \
    \                                  [(= remaining 0)\n                        \
    \                                             (list number 0)]\n             \
    \                                                        [else\n             \
    \                                                        (cond\n             \
    \                                                        [(< remaining need)\n\
    \                                                                     (list 0\
    \ (- remaining need))]\n                                                     \
    \                [else\n                                                     \
    \                (cond\n                                                     \
    \                [(< remaining 0)\n                                          \
    \                           (list 0 0)]\n                                    \
    \                                 [else\n                                    \
    \                                 (", "  (cond\n    [(or (= remaining 0) (= number\
    \ 0))\n     (list 0 0)]\n    [(= remaining 0)\n     (list number 0)]\n    [(=\
    \ number need)\n     (list number 0)]\n    [else\n     (cond\n       [(< remaining\
    \ need)\n        (cons (- remaining need) (cons 0 (eat number (- need remaining)\
    \ remaining)))]\n       [(< need remaining)\n        (cons (- need remaining)\
    \ (cons 0 (eat number (- remaining need) remaining)))]\n       [else\n       \
    \ (cons (- remaining need) (cons 0 (eat number (- need remaining) remaining)))]\n\
    \       )])\n  )\n", "  (cond\n    [(and (<= remaining 0) (<= need 0))\n     (list\
    \ number 0)]\n    [(and (<= remaining 0) (< need 0))\n     (list number 0)]\n\
    \    [(and (<= remaining 0) (> need 0))\n     (list number 0)]\n    [else\n  \
    \   (cond\n       [(< remaining number)\n        (cons (- remaining number) (eat\
    \ number (- need number) remaining))]\n       [(< remaining number)\n        (cons\
    \ (- remaining number) (eat number (- need number) remaining))]\n       [(< remaining\
    \ number)\n        (cons (- remaining number) (eat number (- need number) remaining))]\n\
    \       [(< remaining number)\n        (cons (- remaining number) (eat number\
    \ (- need number) remaining))]\n       [(< remaining number)\n        (cons (-\
    \ remaining number) (eat number (- need number) remaining))]\n       [(< remaining\
    \ number)\n        (cons (- remaining number) (eat number (- need number) remaining))]\n\
    \       [(< remaining number)\n        (cons (- remaining number) (eat number\
    \ (- need number) remaining))]\n       [(< remaining number)\n        (cons (-\
    \ remaining number) (eat number (- need number) remaining))]\n       [(< remaining\
    \ number)\n        (cons (- remaining number) (eat number (- need number) remaining))]\n\
    \       [(< remaining number)\n        (cons (- remaining number) (eat number\
    \ (- need number) remaining))]\n       [(< remaining number)\n        (cons (-\
    \ remaining number) (eat number (- need number) remaining))]\n       [(< remaining\
    \ number)\n        (cons (- remaining number) (eat number (- need number) remaining))]\n\
    \       [(< remaining number)\n        (cons (- remaining number) (eat number\
    \ (- need number) remaining))]\n       [(< remaining number)\n        (cons (-\
    \ remaining number) (eat number (- need number) remaining))]\n       [(< remaining\
    \ number)\n        (cons (- remaining number) (eat number (- need number) remaining))]\n\
    \       [(< remaining number)\n        (cons (- remaining number) (eat number\
    \ (- need number) remaining))]\n       [(< remaining number)\n        (cons (-\
    \ remaining number) (eat number (- need number) remaining))]\n       [(< remaining\
    \ number)\n        (cons (- remaining number) (eat number (- need number) remaining))]\n\
    \       [(< remaining number)\n        (cons (- remaining number) (eat number\
    \ (- need number) remaining))]\n       [(< remaining number)\n        (cons (-\
    \ remaining number) (eat number (- need number) remaining))]\n       [(< remaining\
    \ number)\n        (cons (- remaining number) (eat number (- need number) remaining))]\n\
    \       [(< remaining number)\n        (cons (- remaining ", "  (cond\n    [(or\
    \ (= remaining 0) (= number 0))\n     (list 0 0)]\n    [(= remaining 0)\n    \
    \ (list number 0)]\n    [(= number 0)\n     (list 0 0)]\n    [else\n     (cond\n\
    \       [(= (modulo remaining need) 0)\n        (cons (+ number need) (- remaining\
    \ need))]\n       [(= (modulo remaining need) 1)\n        (cons (+ number need)\
    \ (- remaining need))]\n       [(= (modulo remaining need) 2)\n        (cons (+\
    \ number need) (- remaining need))]\n       [(= (modulo remaining need) 3)\n \
    \       (cons (+ number need) (- remaining need))]\n       [(= (modulo remaining\
    \ need) 4)\n        (cons (+ number need) (- remaining need))]\n       [(= (modulo\
    \ remaining need) 5)\n        (cons (+ number need) (- remaining need))]\n   \
    \    [(= (modulo remaining need) 6)\n        (cons (+ number need) (- remaining\
    \ need))]\n       [(= (modulo remaining need) 7)\n        (cons (+ number need)\
    \ (- remaining need))]\n       [(= (modulo remaining need) 8)\n        (cons (+\
    \ number need) (- remaining need))]\n       [(= (modulo remaining need) 9)\n \
    \       (cons (+ number need) (- remaining need))]\n       [(= (modulo remaining\
    \ need) 10)\n        (cons (+ number need) (- remaining need))]\n       [(= (modulo\
    \ remaining need) 11)\n        (cons (+ number need) (- remaining need))]\n  \
    \     [(= (modulo remaining need) 12)\n        (cons (+ number need) (- remaining\
    \ need))]\n       [(= (modulo remaining need) 13)\n        (cons (+ number need)\
    \ (- remaining need))]\n       [(= (modulo remaining need) 14)\n        (cons\
    \ (+ number need) (- remaining need))]\n       [(= (modulo remaining need) 15)\n\
    \        (cons (+ number need) (- remaining need))]\n       [(= (modulo remaining\
    \ need) 16)\n        (cons (+ number need) (- remaining need))]\n       [(= (modulo\
    \ remaining need) 17)\n        (cons (+ number need) (- remaining need))]\n  \
    \     [(= (modulo remaining need) 18)\n        (cons (+ number need) (- remaining\
    \ need))]\n       [(= (modulo remaining need) 19)\n        (cons (+ number need)\
    \ (- remaining need))]\n       ", "  (cond\n    [(or (= remaining 0) (= number\
    \ 0))\n     (list 0 0)]\n    [(and (= remaining 0) (= number 0))\n     (list 0\
    \ 0)]\n    [(and (= remaining 0) (< number need))\n     (list 0 0)]\n    [(and\
    \ (= remaining 0) (> number need))\n     (list 0 0)]\n    [(and (< number need)\
    \ (< remaining 0))\n     (list 0 0)]\n    [(and (> number need) (< remaining 0))\n\
    \     (list 0 0)]\n    [(and (> number need) (> remaining 0))\n     (list 0 0)]\n\
    \    [(and (> number need) (= remaining 0))\n     (list 0 0)]\n    [else\n   \
    \  (cond\n       [(= remaining 0)\n        (cond\n         [(= number 0)\n   \
    \       (list 0 0)]\n         [else\n          (list number 0)]\n         )]\n\
    \       [(< number need)\n        (cond\n         [(= remaining 0)\n         \
    \ (list 0 0)]\n         [else\n          (list number 0)]\n         )]\n     \
    \  [(> number need)\n        (cond\n         [(= remaining 0)\n          (list\
    \ 0 0)]\n         [else\n          (list number 0)]\n         )]\n       [(= number\
    \ need)\n        (cond\n         [(= remaining 0)\n          (list 0 0)]\n   \
    \      [else\n          (list number 0)]\n         )]\n       [else\n        (cond\n\
    \         [(= remaining 0)\n          (list 0 0)]\n         [else\n          (list\
    \ number 0)]\n         )]\n       )]\n     )]))\n", "  (cond\n    [(or (= remaining\
    \ 0) (= number 0))\n     (list 0 0)]\n    [(= remaining 0)\n     (list number\
    \ 0)]\n    [(= number need)\n     (list number 0)]\n    [else\n     (let* ((total\
    \ (+ number need))\n            (left (- remaining total))\n            (left\
    \ (if (< left 0) left 0))\n            (left (if (< left 0) 0 left))\n       \
    \     (left (if (< left 0) 0 left))\n            (left (if (< left 0) 0 left))\n\
    \            (left (if (< left 0) 0 left))\n            (left (if (< left 0) 0\
    \ left))\n            (left (if (< left 0) 0 left))\n            (left (if (<\
    \ left 0) 0 left))\n            (left (if (< left 0) 0 left))\n            (left\
    \ (if (< left 0) 0 left))\n            (left (if (< left 0) 0 left))\n       \
    \     (left (if (< left 0) 0 left))\n            (left (if (< left 0) 0 left))\n\
    \            (left (if (< left 0) 0 left))\n            (left (if (< left 0) 0\
    \ left))\n            (left (if (< left 0) 0 left))\n            (left (if (<\
    \ left 0) 0 left))\n            (left (if (< left 0) 0 left))\n            (left\
    \ (if (< left 0) 0 left))\n            (left (if (< left 0) 0 left))\n       \
    \     (left (if (< left 0) 0 left))\n            (left (if (< left 0) 0 left))\n\
    \            (left (if (< left 0) 0 left))\n            (left (if (< left 0) 0\
    \ left))\n            (left (if (< left 0) 0 left))\n            (left (if (<\
    \ left 0) 0 left))\n            (left (if (< left 0) 0 left))\n            (left\
    \ (if (< left 0) 0 left))\n            (left (if (< left 0) 0 left))\n       \
    \     (left (if (< left 0) 0 left))\n            (left (if (< left 0) 0 left))\n\
    \            (left (if (< left 0) 0 left))\n            (left (if (< left 0) 0\
    \ left))\n            (left (if (< left 0) 0 left))\n            (left (if (<\
    \ left 0) 0 left))\n            (left (if (< left 0) 0 left))\n            (left\
    \ (if (< left 0) 0 left))\n            (left (if (< left 0) 0 left))\n       \
    \     (left (if (< left 0) 0 left))\n            (left (if (< left 0) 0 left))\n\
    \            (left (if (< left ", "  (cond\n    [(and (<= 0 number 1000) (<= 0\
    \ need 1000) (<= 0 remaining 1000)) (list 0 0)]\n    [(and (<= 0 number 1000)\
    \ (<= 0 need 1000) (> remaining 0)) (list 0 0)]\n    [(and (<= 0 number 1000)\
    \ (> need 0) (<= 0 remaining 1000)) (list 0 0)]\n    [(and (<= 0 number 1000)\
    \ (> need 0) (> remaining 0)) (list 0 0)]\n    [(and (> number 0) (<= 0 need 1000)\
    \ (<= 0 remaining 1000)) (list 0 0)]\n    [(and (> number 0) (<= 0 need 1000)\
    \ (> remaining 0)) (list 0 0)]\n    [(and (> number 0) (> need 0) (<= 0 remaining\
    \ 1000)) (list 0 0)]\n    [(and (> number 0) (> need 0) (> remaining 0)) (list\
    \ 0 0)]\n    [(and (<= 0 number 1000) (> need 0) (<= 0 remaining 1000)) (list\
    \ 0 0)]\n    [(and (<= 0 number 1000) (> need 0) (> remaining 0)) (list 0 0)]\n\
    \    [(and (> number 0) (<= 0 need 1000) (<= 0 remaining 1000)) (list 0 0)]\n\
    \    [(and (> number 0) (<= 0 need 1000) (> remaining 0)) (list 0 0)]\n    [(and\
    \ (> number 0) (> need 0) (<= 0 remaining 1000)) (list 0 0)]\n    [(and (> number\
    \ 0) (> need 0) (> remaining 0)) (list 0 0)]\n    [(and (<= 0 number 1000) (>\
    \ need 0) (<= 0 remaining 1000)) (list 0 0)]\n    [(and (<= 0 number 1000) (>\
    \ need 0) (> remaining 0)) (list 0 0)]\n    [(and (> number 0) (<= 0 need 1000)\
    \ (<= 0 remaining 1000)) (list 0 0)]\n    [(and (> number 0) (<= 0 need 1000)\
    \ (> remaining 0)) (list 0 0)]\n    [(and (> number 0) (> need 0) (<= 0 remaining\
    \ 1000)) (list 0 0)]\n    [(and (> number 0) (> need 0) (> remaining 0)) (list\
    \ 0 0)]\n    [(and (<= 0 number 1000) (> need 0) (<= 0 remaining 1000)) (list\
    \ 0 0)]\n    [(and (<= 0 number 1000) (> need 0) (> remaining 0)) (list 0 0)]\n\
    \    [(and (> number 0) (<= 0 need 1000) (<= 0 remaining 1000)) (list 0 0)]"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
