name: HumanEval_162_string_to_md5
language: rkt
prompt: "#lang racket\n\n;; Given a string 'text', return its md5 hash equivalent\
  \ string.\n;; If 'text' is an empty string, return None.\n;; >>> (string_to_md5\
  \ \"Hello world\")\n;; \"3e25960a79dbc69b674cd4ec67a72c62\"\n(define (string_to_md5\
  \ text)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_md5))\n\
  \    (check-equal? (candidate \"Hello world\") \"3e25960a79dbc69b674cd4ec67a72c62\"\
  )\n    (check-equal? (candidate \"\") #f)\n    (check-equal? (candidate \"A B C\"\
  ) \"0ef78513b0cb8cef12743f5aeb35f888\")\n    (check-equal? (candidate \"password\"\
  ) \"5f4dcc3b5aa765d61d8327deb882cf99\")\n))\n\n(test-humaneval)"
completions: ["  (if (string? text)\n      (md5-string text)\n      None))\n", " \
    \ (if (string? text)\n      (md5-string text)\n      None))\n", "  (cond\n   \
    \ [(empty? text) None]\n    [else (hash-string (string-to-bytes text))]))\n",
  "  (if (string? text)\n      (md5 (string->bytes text))\n      None))\n", "  (cond\n\
    \    [(empty? text) None]\n    [(equal? (first text) '#) None]\n    [else (hash-string\
    \ text)]))\n", "  (if (string? text)\n      (md5-string text)\n      None))\n",
  "  (if (string? text)\n      (md5-string text)\n      None))\n", "  (let ([hash\
    \ (make-hash)])\n    (if (string-empty? text)\n        (hash-ref hash empty-string)\n\
    \        (hash-update! hash text (lambda (x y) (hash-ref hash x (+ y 1))))\n \
    \       (hash-ref hash text))\n    (hash-ref hash empty-string)))\n", "  (if (string?\
    \ text)\n      (hash-md5 text)\n      (null)))\n", "  (let ([md5 (make-md5)]\n\
    \        [text (make-string text)])\n    (if (string-empty? text)\n        (hash)\n\
    \        (let ([char (string-ref text 0)])\n          (hash-update! md5 char)\n\
    \          (string-to-md5 (cdr text))\n          (hash-update! md5 char)\n   \
    \       (hash-update! md5 char)))))\n", "  (if (string? text)\n      (let ([h\
    \ (hash-string text)])\n        (string->symbol (symbol->string h))\n        (error\
    \ \"Invalid MD5 string: ~a\" text))\n      None))\n", "  (let ([hash (make-hash)])\n\
    \    (string->symbol (hash-update hash text (hash-md5 hash)))))\n", "  (let ([hash\
    \ (make-hash)])\n    (if (string? text)\n        (hash-update! hash text (hash-value\
    \ hash))\n        hash)))\n", "  (let ([hash (make-hash)])\n    (if (string? text)\n\
    \        (hash-update! hash (string->symbol text) (string->symbol text))\n   \
    \     hash)))\n", "  (cond\n    [(empty? text) None]\n    [(equal? (string-length\
    \ text) 0) None]\n    [else (string-append (md5 (string-ref text 0)) (string_to_md5\
    \ (string-ref text 1)))]))\n", "  (if (string? text)\n      (hash-md5 text)\n\
    \      (hash-md5 \"\")))\n", "  (let ([hash (make-hash)])\n    (string->symbol\
    \ (hash-update hash text (lambda (x y)\n                                     \
    \ (hash-update hash y x)))\n                   #:key (lambda (x y)\n         \
    \                  (hash-update hash y x)))))\n", "  (if (string? text)\n    \
    \  (hash-md5 text)\n      None))\n", "  (if (string? text)\n      (md5 (string->list\
    \ text))\n      None))\n", "  (if (string? text)\n      (md5-string text)\n  \
    \    None))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
