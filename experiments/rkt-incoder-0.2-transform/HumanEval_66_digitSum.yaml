name: HumanEval_66_digitSum
language: rkt
prompt: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
  \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
  ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
  \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\"\
  )\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
  \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n\
  \    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\"\
  ) 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate\
  \ \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
  \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
completions: ["  (define (sum s)\n    (if (empty? s)\n        0\n        (+ (char->int\
    \ (car s)) (sum (cdr s)))))\n  (sum s))\n", "  (define (helper s)\n    (if (empty?\
    \ s)\n        0\n        (+ (char->integer (first s)) (helper (rest s)))))\n \
    \ (helper s))\n", "  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first\
    \ s) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n  \
    \  [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(digit?\
    \ (first s)) (+ (first s) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+ (first s) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n", "  (define (digit-sum s)\n    (define\
    \ (digit-sum-helper s acc)\n      (if (empty? s)\n          acc\n          (digit-sum-helper\
    \ (rest s) (+ (char->integer (first s)) acc))))\n    (digit-sum-helper s 0))\n\
    \  (digit-sum s))\n", "  (cond\n    [(empty? s) 0]\n    [(digit? (first s)) (+\
    \ (first s) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (define\
    \ (helper s)\n    (if (empty? s)\n        0\n        (+ (char->integer (first\
    \ s)) (helper (rest s)))))\n  (helper s))\n", "  (cond\n    [(empty? s) 0]\n \
    \   [(digit? (first s)) (+ (first s) (digitSum (rest s)))]\n    [else (digitSum\
    \ (rest s))]))\n", "  (if (empty? s)\n      0\n      (+ (char->integer (car s))\
    \ (digitSum (cdr s)))))\n", "  (if (empty? s)\n      0\n      (+ (char->integer\
    \ (first s)) (digitSum (rest s)))))\n", "  (if (empty? s)\n      0\n      (+ (char->integer\
    \ (first s)) (digitSum (rest s)))))\n", "  (define (digit-sum s)\n    (if (empty?\
    \ s)\n        0\n        (+ (char->integer (car s)) (digit-sum (cdr s)))))\n \
    \ (digit-sum s))\n", "  (if (empty? s)\n      0\n      (+ (char->integer (first\
    \ s)) (digitSum (rest s)))))\n", "  (define (digit-sum s)\n    (if (empty? s)\n\
    \        0\n        (+ (char->integer (first s)) (digit-sum (rest s)))))\n  (digit-sum\
    \ s))\n", "  (define (sum s)\n    (if (empty? s)\n        0\n        (+ (char->integer\
    \ (car s)) sum (digitSum (cdr s)))))\n  (sum s))\n", "  (define (helper s)\n \
    \   (if (empty? s)\n        0\n        (+ (char->integer (first s)) (helper (rest\
    \ s)))))\n  (helper s))\n", "  (cond\n    [(empty? s) 0]\n    [(digit? (first\
    \ s)) (+ (first s) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n",
  "  (define (digit-sum s)\n    (if (empty? s)\n        0\n        (+ (char->integer\
    \ (first s)) (digit-sum (rest s)))))\n  (digit-sum s))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
