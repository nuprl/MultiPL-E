name: HumanEval_161_solve
language: rkt
prompt: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse\
  \ its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n\
  ;; If the string contains no letters, reverse the string.\n;; The function should\
  \ return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\
  \n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define\
  \ (solve s)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
  \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
  \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
  \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"\
  #aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
  \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\"\
  )\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? s) s]\n    [(member (first s) (map char->string\
    \ '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                     \
    \                     #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\\
    V \n                                          #\\W #\\X #\\Y #\\Z)))\n     (reverse\
    \ (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n   \
    \                                 #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\\
    S #\\T #\\U #\\V \n                                    #\\W #\\X #\\Y #\\Z)))]\n\
    \    [else (cons (first s) (solve (rest s)))]))\n</code>\n<|/ a dscore=2 |>\n\
    <| a dscore=1 |>\n<code>", "  (cond\n    [(empty? s) s]\n    [(character? (car\
    \ s)) (cond\n                            [(equal? (char-code (car s)) 97) (cond\n\
    \                                                            [(equal? (char-code\
    \ (car s)) 65) (cond\n                                                       \
    \                               [(equal? (char-code (car s)) 97) (cond\n     \
    \                                                                            \
    \                               [(equal? (char-code (car s)) 65) (cond\n     \
    \                                                                            \
    \                                               [(equal? (char-code (car s)) 97)\
    \ (cond\n                                                                    \
    \                                                                            \
    \      [(equal? (char-code (car s)) 65) (cond\n                              \
    \                                                                            \
    \                                                      [(equal? (char-code (car\
    \ s)) 97) (cond\n                                                            \
    \                                                                            \
    \                                                        [(equal? (char-code (car\
    \ s)) 65) (cond\n                                                            \
    \                                                                            \
    \                                                                            \
    \  [(equal? (char-code (car s)) 97) (cond\n                                  \
    \                                                                            \
    \                                                                            \
    \                                  [(equal? (char-code (car s)) 65) (cond\n  \
    \                                                                            \
    \                                                                            \
    \                                                                        [(equal?\
    \ (char-code (car s)) 97) (cond\n                                            \
    \                                                                            \
    \                                                                            \
    \                                    [(equal? (char-code (car s)) 65) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \          [(equal? (char-code (car s)) 97) (cond\n                          \
    \                                                                            \
    \                                                                            \
    \                                                                  [(equal? (char-code\
    \ (car s)) 65) (cond\n                                                       \
    \                                                                            \
    \                                                                            \
    \                                         [(equal? (char-code (car s)) 97) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                        [(equal? (char-code (car s)) 65) (cond\n            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                  [(equal? (char-code (car s)) 97) (cond\n  \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                  [(equal? (char-code (car s))\
    \ 65) (cond\n                                                                \
    \                                                                            \
    \                                                                            \
    \                                                                  [(equal? (char-code\
    \ (car s)) 97) (cond\n                                                       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \     [(equal? (char-code (car s)) 65) (cond\n                               \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                   [(equal? (char-code (car s)) 97) (cond\n \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                   [(equal? (char-code\
    \ (car s)) 65) (cond\n                                                       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \               [(equal? (char-code (car s)) 97) (cond\n                     \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                   [(equal? (char-code (car s))\
    \ 65) (cond\n                                                                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \          [(equal? (char-code (car s)) 97) (cond\n                          \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                  [(equal? (char-code (car s))\
    \ 65) (cond\n                                                                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \              [(equal? (char-code (car s)) 97) (cond\n                      \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                          [(equal? (char-", " \
    \ (cond [(empty? s) s]\n        [(letter? (first s)) (cons (first s) (solve (reverse\
    \ (second s))))]\n        [else (cons (first s) (solve (reverse (second s))))]))\n\
    </code>\n<|/ a tags=scheme,racket,recursion |>\n<| c |>\nThanks so much! I understand\
    \ it now. I'm still trying to learn the language and I appreciate your help!\n\
    <|/ c |>\n<| c |>\nNo problem! I hope you enjoy learning Racket :)\n<|/ c |>\n\
    <| c |>\nI do enjoy learning Racket. I'm just trying to learn it by myself and\
    \ I'm really enjoying it. I really want to learn it by myself and I really want\
    \ to learn it by myself and I really want to learn it by myself and I really want\
    \ to learn it by myself and I really want to learn it by myself and I really want\
    \ to learn it by myself and I really want to learn it by myself and I really want\
    \ to learn it by myself and I really want to learn it by myself and I really want\
    \ to learn it by myself and I really want to learn it by myself and I really want\
    \ to learn it by myself and I really want to learn it by myself and I really want\
    \ to learn it by myself and I really want to learn it by myself and I really want\
    \ to learn it by myself and I really want to learn it by myself and I really want\
    \ to learn it by myself and I really want to learn it by myself and I really want\
    \ to learn it by myself and I really want to learn it by myself and I really want\
    \ to learn it by myself and I really want to learn it by myself and I really want\
    \ to learn it by myself and I really want to learn it by myself and I really want\
    \ to learn it by myself and I really want to learn it by myself and I really want\
    \ to learn it by myself and I really want to learn it by myself and I really want\
    \ to learn it by myself and I really want to learn it by myself and I really want\
    \ to learn it by myself and I really want to learn it by myself and I really want\
    \ to learn it by myself and I really want to learn it by myself and I really want\
    \ to learn it by myself and I really want to learn it by myself and I really want\
    \ to learn it by myself and I really want to learn it by myself and I really want\
    \ to learn it by myself and I really ", "  (cond\n    [(empty? s) s]\n    [(member\
    \ (first s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\\
    J \n                                       #\\K #\\L #\\M #\\N #\\O #\\P #\\Q\
    \ #\\R #\\S #\\T #\\U #\\V \n                                       #\\W #\\X\
    \ #\\Y #\\Z)))\n     (string-append (map char->string '(#\\A #\\B #\\C #\\D #\\\
    E #\\F #\\G #\\H #\\I #\\J \n                                       #\\K #\\L\
    \ #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                       \
    \                #\\W #\\X #\\Y #\\Z)) (map char->string '(#\\a #\\b #\\c #\\\
    d #\\e #\\f #\\g #\\h #\\i #\\j \n                                       #\\k\
    \ #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\u #\\v #\\w #\\x #\\y #\\z))\n\
    \     (string-append (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\\
    H #\\I #\\J \n                                       #\\K #\\L #\\M #\\N #\\O\
    \ #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                                      \
    \ #\\W #\\X #\\Y #\\Z)) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\\
    G #\\H #\\I #\\J \n                                       #\\K #\\L #\\M #\\N\
    \ #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                                 \
    \      #\\W #\\X #\\Y #\\Z)) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\\
    F #\\G #\\H #\\I #\\J \n                                       #\\K #\\L ", " \
    \ (cond\n    [(empty? s) s]\n    [(character? (car s)) (cons (char->upper (car\
    \ s)) (reverse (solve (cdr s))))]\n    [else (cons (char->lower (car s)) (reverse\
    \ (solve (cdr s))))]\n  )\n)\n", "  (cond\n    [(empty? s) s]\n    [(character?\
    \ (first s)) (cons (reverse (first s)) (solve (rest s)))]\n    [else (cons (first\
    \ s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(character? (first\
    \ s)) (cond\n                            [(equal? (first s) (second s)) (cond\n\
    \                                                        [(equal? (first s) (second\
    \ s)) (cond\n                                                                \
    \    [(equal? (first s) (second s)) (cond\n                                  \
    \                                                                 [(equal? (first\
    \ s) (second s)) (cond\n                                                     \
    \                                                        [(equal? (first s) (second\
    \ s)) (cond\n                                                                \
    \                                                       [(equal? (first s) (second\
    \ s)) (cond\n                                                                \
    \                                                             [(equal? (first\
    \ s) (second s)) (cond\n                                                     \
    \                                                                            \
    \  [(equal? (first s) (second s)) (cond\n                                    \
    \                                                                            \
    \                         [(equal? (first s) (second s)) (cond\n             \
    \                                                                            \
    \                                                                            \
    \          [(equal? (first s) (second s)) (cond\n                            \
    \                                                                            \
    \                                                                            \
    \ [(equal? (first s) (second s)) (cond\n                                     \
    \                                                                            \
    \                                                                        [(equal?\
    \ (first s) (second s)) (cond\n                                              \
    \                                                                            \
    \                                                                     [(equal?\
    \ (first s) (second s)) (cond\n                                              \
    \                                                                            \
    \                                                                           [(equal?\
    \ (first s) (second s)) (cond\n                                              \
    \                                                                            \
    \                                                                            \
    \   [(equal? (first s) (second s)) (cond\n                                   \
    \                                                                            \
    \                                                                            \
    \                                                    [(equal? (first s) (second\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \                                                                            \
    \                           [(equal? (first s) (second s)) (cond\n           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \        [(equal? (first s) (second s)) (cond\n                              \
    \                                                                            \
    \                                                                            \
    \                                                                 [(equal? (first\
    \ s) (second s)) (cond\n                                                     \
    \                                                                            \
    \                                                                            \
    \                                          [(equal? (first s) (second s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                   [(equal? (first s) (second s)) (cond\n                   \
    \                                                                            \
    \                                                                            \
    \                                                                            [(equal?\
    \ (first s) (second s)) (cond\n                                              \
    \                                                                            \
    \                                                                            \
    \                                                 [(equal? (first s) (second s))\
    \ (cond\n                                                                    \
    \                                                                            \
    \                                                                            \
    \                           [(equal? (first s) (second s)) (cond\n           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \        [(equal? (first s) (second s)) (cond\n                              \
    \                                                                            \
    \                                                                            \
    \                                                                 [(equal? (first\
    \ s) (second s)) (cond\n                                                     \
    \                                                                            \
    \                                                                            \
    \                                          [(equal? (first s) (second s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                   [(equal? (first s) (second s)) (cond\n                   \
    \                                                                            \
    \                                                                            \
    \                                                                            [(equal?\
    \ (first s) (second s)) (cond\n                                              \
    \                                                                            \
    \                                                                            \
    \                                                 [(equal? (first s) (second s))\
    \ (cond\n                                                                    \
    \                                                                            \
    \                                                                            \
    \                           [(equal? (first s) (second s)) (cond\n           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \        [(equal? (first s) (second s)) (cond\n                              \
    \                                                                            \
    \                                                                            \
    \                                                                 [(equal? (first\
    \ s) (second s)) (cond\n                                                     \
    \                                                                            \
    \                                                                            \
    \                                          [(equal? (first s) (second s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                   [(", "  (cond\n    [(empty? s) s]\n    [(letter? (first s))\
    \ (cons (first s) (solve (rest s)))]\n    [else (cons (first s) (solve (rest s)))]))\n",
  "  (cond [(empty? s) s]\n        [(letter? (first s)) (cons (first s) (solve (reverse\
    \ (second s))))]\n        [else (cons (first s) (solve (reverse (second s))))]))\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=scheme,racket |>\n<code>", "  (cond\n  \
    \  [(empty? s) s]\n    [(character? (car s)) (cond\n                         \
    \   [(equal? (char-case (car s)) 'lower) (cons (char-case (car s)) (reverse (substring\
    \ s (+ 0 (length s)))))]\n                            [(equal? (char-case (car\
    \ s)) 'upper) (cons (char-case (car s)) (substring s (+ 0 (length s))))]\n   \
    \                         [(equal? (char-case (car s)) 'other) (cons (char-case\
    \ (car s)) (reverse (substring s (+ 0 (length s)))))]\n                      \
    \      [(equal? (char-case (car s)) 'none) (cons (char-case (car s)) (reverse\
    \ (substring s (+ 0 (length s)))))]\n                            [(equal? (char-case\
    \ (car s)) 'space) (cons (char-case (car s)) (reverse (substring s (+ 0 (length\
    \ s)))))]\n                            [(equal? (char-case (car s)) 'number) (cons\
    \ (char-case (car s)) (reverse (substring s (+ 0 (length s)))))]\n           \
    \                 [(equal? (char-case (car s)) 'symbol) (cons (char-case (car\
    \ s)) (reverse (substring s (+ 0 (length s)))))]\n                           \
    \ [(equal? (char-case (car s)) 'symbol) (cons (char-case (car s)) (reverse (substring\
    \ s (+ 0 (length s)))))]\n                            [(equal? (char-case (car\
    \ s)) 'string) (cons (char-case (car s)) (reverse (substring s (+ 0 (length s)))))]\n\
    \                            [(equal? (char-case (car s)) 'boolean) (cons (char-case\
    \ (car s)) (reverse (substring s (+ 0 (length s)))))]\n                      \
    \      [(equal? (char-case (car s)) 'function) (cons (char-case (car s)) (reverse\
    \ (substring s (+ 0 (length s)))))]\n                            [(equal? (char-case\
    \ (car s)) 'procedure) (cons (char-case (car s)) (reverse (substring s (+ 0 (length\
    \ s)))))]\n                            [(equal? (char-case (car s)) 'null) (cons\
    \ (char-case (car s)) (reverse (substring s (+ 0 (length s)))))]\n           \
    \                 [(equal? (char-case (car s)) 'object) (cons (char-case (car\
    \ s)) (reverse (sub", "  (cond\n    [(empty? s) s]\n    [(member (first s) (map\
    \ char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n        \
    \                                    #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\\
    S #\\T #\\U #\\V \n                                            #\\W #\\X #\\Y\
    \ #\\Z)))\n     (cond\n       [(char->string  (first s)) (cons (char->string (first\
    \ s)) \n                                      (solve (rest s)))]\n       [else\
    \ (cons (first s)\n                  (solve (rest s)))]))\n    [else (cons (first\
    \ s)\n                (solve (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n\
    \    [(character? (car s)) (cons (char->upper (car s)) (reverse (solve (rest s))))]\n\
    \    [else (cons (car s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n\
    \    [(equal? (first s) (first s)) (cons (first s) (solve (rest s)))]\n    [else\
    \ (cons (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(character?\
    \ (car s)) (cons (char->upper (car s)) (reverse (solve (cdr s))))]\n    [else\
    \ (cons (car s) (solve (cdr s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(member\
    \ (first s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\\
    J \n                                           #\\K #\\L #\\M #\\N #\\O #\\P #\\\
    Q #\\R #\\S #\\T #\\U #\\V \n                                           #\\W #\\\
    X #\\Y #\\Z)))\n     (reverse (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\\
    F #\\G #\\H #\\I #\\J \n                                    #\\K #\\L #\\M #\\\
    N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                                 \
    \   #\\W #\\X #\\Y #\\Z)))]\n    [else (cons (first s) (solve (rest s)))]))\n",
  "  (cond\n    [(empty? s) s]\n    [(character? (car s)) (cond\n                \
    \            [(lower? (car s)) (cond\n                                       \
    \       [(upper? (car s)) (cons (upper (car s)) (cdr s))]\n                  \
    \                            [(lower? (car s)) (cons (lower (car s)) (cdr s))])]\n\
    \                            [(upper? (car s)) (cons (upper (car s)) (cdr s))]\n\
    \                            [(lower? (car s)) (cons (lower (car s)) (cdr s))])]\n\
    \    [else (cons (car s) (solve (cdr s)))]))\n</code>\n<|/ a tags=racket,scheme\
    \ |>\n<| a tags=racket,scheme |>\n<code>", "  (cond\n    [(empty? s) s]\n    [(equal?\
    \ (first s) (first s)) (cons (first s) (solve (rest s)))]\n    [else (cons (first\
    \ s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(char? (car s))\
    \ (cons (char->string (char->int (car s))) (reverse (solve (cdr s))))]\n    [else\
    \ (cons (char->string (char->int (car s))) (solve (cdr s)))]))\n", "  (cond\n\
    \    [(empty? s) s]\n    [(equal? (first s) (first s)) (second s)]\n    [else\
    \ (cons (first s)\n                (solve (second s)))]))\n", "  (cond\n    [(empty?\
    \ s) s]\n    [(character? (car s)) (cond \n                            [(equal?\
    \ (char-case (car s)) 'lower) (cons \n                                (cons (char-case\
    \ (car s)) \n                                (solve (substring s (+ 0 (length\
    \ s)))))]\n                            [(equal? (char-case (car s)) 'upper) (cons\
    \ \n                                (cons (char-case (car s)) \n             \
    \                   (solve (substring s (+ 0 (length s)))))]\n               \
    \             [(equal? (char-case (car s)) 'other) (cons \n                  \
    \              (cons (char-case (car s)) \n                                (solve\
    \ (substring s (+ 0 (length s)))))]\n                            [(equal? (char-case\
    \ (car s)) 'none) (cons \n                                (cons (char-case (car\
    \ s)) \n                                (solve (substring s (+ 0 (length s)))))]\n\
    \                            [(equal? (char-case (car s)) 'space) (cons \n   \
    \                             (cons (char-case (car s)) \n                   \
    \             (solve (substring s (+ 0 (length s)))))]\n                     \
    \       [(equal? (char-case (car s)) 'number) (cons \n                       \
    \         (cons (char-case (car s)) \n                                (solve (substring\
    \ s (+ 0 (length s)))))]\n                            [(equal? (char-case (car\
    \ s)) 'symbol) (cons \n                                (cons (char-case (car s))\
    \ \n                                (solve (substring s (+ 0 (length s)))))]\n\
    \                            [(equal? (char-case (car s)) 'other) (cons \n   \
    \                             (cons (char-case (car s)) \n                   \
    \             (solve (substring s (+ 0 (length s)))))]\n                     \
    \       [(equal? (char-case (car s)) 'none) (cons \n                         \
    \       (cons (char-case (car s)) \n                                (solve (substring\
    \ s (+ 0 (length s)))))]\n                            [(equal? (char-case (car\
    \ s)) 'space) (cons \n                                (cons (char-case (car s))\
    \ \n                                (solve (substring s (+ 0 (length s)))))]\n\
    \                            [(equal? (char-case (car s)) 'number) (cons \n  \
    \                              (cons (char-case (car s)) \n                  \
    \              (solve (substring s (+ 0 (length s)))))]\n                    \
    \        [(equal? (char-case (car s)) 'symbol) (cons \n                      \
    \          "]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
