name: HumanEval_161_solve
language: rkt
prompt: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse\
  \ its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n\
  ;; If the string contains no letters, reverse the string.\n;; The function should\
  \ return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\
  \n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define\
  \ (solve s)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
  \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
  \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
  \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"\
  #aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
  \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\"\
  )\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? s) s]\n    [(member (first s) (map char->string\
    \ '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                     \
    \                     #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\\
    V \n                                          #\\W #\\X #\\Y #\\Z)))\n     (reverse\
    \ (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n   \
    \                                 #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\\
    S #\\T #\\U #\\V \n                                    #\\W #\\X #\\Y #\\Z)))]\n\
    \    [else (cons (first s) (solve (rest s)))]))\n</code>\n<|/ a dscore=2 |>\n\
    <| a dscore=1 |>\n<code>", "  (cond\n    [(empty? s) s]\n    [(character? (car\
    \ s)) (cond\n                            [(equal? (char-code (car s)) 97) (cond\n\
    \                                                            [(equal? (char-code\
    \ (car s)) 65) (cond\n                                                       \
    \                               [(equal? (char-code (car s)) 97) (cond\n     \
    \                                                                            \
    \                               [(equal? (char-code (car s)) 65) (cond\n     \
    \                                                                            \
    \                                               [(equal? (char-code (car s)) 97)\
    \ (cond\n                                                                    \
    \                                                                            \
    \      [(equal? (char-code (car s)) 65) (cond\n                              \
    \                                                                            \
    \                                                      [(equal? (char-code (car\
    \ s)) 97) (cond\n                                                            \
    \                                                                            \
    \                                                        [(equal? (char-code (car\
    \ s)) 65) (cond\n                                                            \
    \                                                                            \
    \                                                                            \
    \  [(equal? (char-code (car s)) 97) (cond\n                                  \
    \                                                                            \
    \                                                                            \
    \                                  [(equal? (char-code (car s)) 65) (cond\n  \
    \                                                                            \
    \                                                                            \
    \                                                                        [(equal?\
    \ (char-code (car s)) 97) (cond\n                                            \
    \                                                                            \
    \                                                                            \
    \                                    [(equal? (char-code (car s)) 65) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \          [(equal? (char-code (car s)) 97) (cond\n                          \
    \                                                                            \
    \                                                                            \
    \                                                                  [(equal? (char-code\
    \ (car s)) 65) (cond\n                                                       \
    \                                                                            \
    \                                                                            \
    \                                         [(equal? (char-code (car s)) 97) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                        [(equal? (char-code (car s)) 65) (cond\n            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                  [(equal? (char-code (car s)) 97) (cond\n  \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                  [(equal? (char-code (car s))\
    \ 65) (cond\n                                                                \
    \                                                                            \
    \                                                                            \
    \                                                                  [(equal? (char-code\
    \ (car s)) 97) (cond\n                                                       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \     [(equal? (char-code (car s)) 65) (cond\n                               \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                   [(equal? (char-code (car s)) 97) (cond\n \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                   [(equal? (char-code\
    \ (car s)) 65) (cond\n                                                       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \               [(equal? (char-code (car s)) 97) (cond\n                     \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                   [(equal? (char-code (car s))\
    \ 65) (cond\n                                                                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \          [(equal? (char-code (car s)) 97) (cond\n                          \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                  [(equal? (char-code (car s))\
    \ 65) (cond\n                                                                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \              [(equal? (char-code (car s)) 97) (cond\n                      \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                          [(equal? (char-", " \
    \ (cond [(empty? s) s]\n        [(letter? (first s)) (cons (first s) (solve (reverse\
    \ (second s))))]\n        [else (cons (first s) (solve (reverse (second s))))]))\n\
    </code>\n<|/ a tags=scheme,racket,recursion |>\n<| c |>\nThanks so much! I understand\
    \ it now. I'm still trying to learn the language and I appreciate your help!\n\
    <|/ c |>\n<| c |>\nNo problem! I hope you enjoy learning Racket :)\n<|/ c |>\n\
    <| c |>\nI do enjoy learning Racket. I'm just trying to learn it by myself and\
    \ I'm really enjoying it. I really want to learn it by myself and I really want\
    \ to learn it by myself and I really want to learn it by myself and I really want\
    \ to learn it by myself and I really want to learn it by myself and I really want\
    \ to learn it by myself and I really want to learn it by myself and I really want\
    \ to learn it by myself and I really want to learn it by myself and I really want\
    \ to learn it by myself and I really want to learn it by myself and I really want\
    \ to learn it by myself and I really want to learn it by myself and I really want\
    \ to learn it by myself and I really want to learn it by myself and I really want\
    \ to learn it by myself and I really want to learn it by myself and I really want\
    \ to learn it by myself and I really want to learn it by myself and I really want\
    \ to learn it by myself and I really want to learn it by myself and I really want\
    \ to learn it by myself and I really want to learn it by myself and I really want\
    \ to learn it by myself and I really want to learn it by myself and I really want\
    \ to learn it by myself and I really want to learn it by myself and I really want\
    \ to learn it by myself and I really want to learn it by myself and I really want\
    \ to learn it by myself and I really want to learn it by myself and I really want\
    \ to learn it by myself and I really want to learn it by myself and I really want\
    \ to learn it by myself and I really want to learn it by myself and I really want\
    \ to learn it by myself and I really want to learn it by myself and I really want\
    \ to learn it by myself and I really want to learn it by myself and I really want\
    \ to learn it by myself and I really ", "  (cond\n    [(empty? s) s]\n    [(member\
    \ (first s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\\
    J \n                                       #\\K #\\L #\\M #\\N #\\O #\\P #\\Q\
    \ #\\R #\\S #\\T #\\U #\\V \n                                       #\\W #\\X\
    \ #\\Y #\\Z)))\n     (string-append (map char->string '(#\\A #\\B #\\C #\\D #\\\
    E #\\F #\\G #\\H #\\I #\\J \n                                       #\\K #\\L\
    \ #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                       \
    \                #\\W #\\X #\\Y #\\Z)) (map char->string '(#\\a #\\b #\\c #\\\
    d #\\e #\\f #\\g #\\h #\\i #\\j \n                                       #\\k\
    \ #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\u #\\v #\\w #\\x #\\y #\\z))\n\
    \     (string-append (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\\
    H #\\I #\\J \n                                       #\\K #\\L #\\M #\\N #\\O\
    \ #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                                      \
    \ #\\W #\\X #\\Y #\\Z)) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\\
    G #\\H #\\I #\\J \n                                       #\\K #\\L #\\M #\\N\
    \ #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                                 \
    \      #\\W #\\X #\\Y #\\Z)) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\\
    F #\\G #\\H #\\I #\\J \n                                       #\\K #\\L ", " \
    \ (cond\n    [(empty? s) s]\n    [(character? (car s)) (cons (char->upper (car\
    \ s)) (reverse (solve (cdr s))))]\n    [else (cons (char->lower (car s)) (reverse\
    \ (solve (cdr s))))]\n  )\n)\n", "  (cond\n    [(empty? s) s]\n    [(character?\
    \ (first s)) (cons (reverse (first s)) (solve (rest s)))]\n    [else (cons (first\
    \ s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(character? (first\
    \ s)) (cond\n                            [(equal? (first s) (second s)) (cond\n\
    \                                                        [(equal? (first s) (second\
    \ s)) (cond\n                                                                \
    \    [(equal? (first s) (second s)) (cond\n                                  \
    \                                                                 [(equal? (first\
    \ s) (second s)) (cond\n                                                     \
    \                                                        [(equal? (first s) (second\
    \ s)) (cond\n                                                                \
    \                                                       [(equal? (first s) (second\
    \ s)) (cond\n                                                                \
    \                                                             [(equal? (first\
    \ s) (second s)) (cond\n                                                     \
    \                                                                            \
    \  [(equal? (first s) (second s)) (cond\n                                    \
    \                                                                            \
    \                         [(equal? (first s) (second s)) (cond\n             \
    \                                                                            \
    \                                                                            \
    \          [(equal? (first s) (second s)) (cond\n                            \
    \                                                                            \
    \                                                                            \
    \ [(equal? (first s) (second s)) (cond\n                                     \
    \                                                                            \
    \                                                                        [(equal?\
    \ (first s) (second s)) (cond\n                                              \
    \                                                                            \
    \                                                                     [(equal?\
    \ (first s) (second s)) (cond\n                                              \
    \                                                                            \
    \                                                                           [(equal?\
    \ (first s) (second s)) (cond\n                                              \
    \                                                                            \
    \                                                                            \
    \   [(equal? (first s) (second s)) (cond\n                                   \
    \                                                                            \
    \                                                                            \
    \                                                    [(equal? (first s) (second\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \                                                                            \
    \                           [(equal? (first s) (second s)) (cond\n           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \        [(equal? (first s) (second s)) (cond\n                              \
    \                                                                            \
    \                                                                            \
    \                                                                 [(equal? (first\
    \ s) (second s)) (cond\n                                                     \
    \                                                                            \
    \                                                                            \
    \                                          [(equal? (first s) (second s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                   [(equal? (first s) (second s)) (cond\n                   \
    \                                                                            \
    \                                                                            \
    \                                                                            [(equal?\
    \ (first s) (second s)) (cond\n                                              \
    \                                                                            \
    \                                                                            \
    \                                                 [(equal? (first s) (second s))\
    \ (cond\n                                                                    \
    \                                                                            \
    \                                                                            \
    \                           [(equal? (first s) (second s)) (cond\n           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \        [(equal? (first s) (second s)) (cond\n                              \
    \                                                                            \
    \                                                                            \
    \                                                                 [(equal? (first\
    \ s) (second s)) (cond\n                                                     \
    \                                                                            \
    \                                                                            \
    \                                          [(equal? (first s) (second s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                   [(equal? (first s) (second s)) (cond\n                   \
    \                                                                            \
    \                                                                            \
    \                                                                            [(equal?\
    \ (first s) (second s)) (cond\n                                              \
    \                                                                            \
    \                                                                            \
    \                                                 [(equal? (first s) (second s))\
    \ (cond\n                                                                    \
    \                                                                            \
    \                                                                            \
    \                           [(equal? (first s) (second s)) (cond\n           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \        [(equal? (first s) (second s)) (cond\n                              \
    \                                                                            \
    \                                                                            \
    \                                                                 [(equal? (first\
    \ s) (second s)) (cond\n                                                     \
    \                                                                            \
    \                                                                            \
    \                                          [(equal? (first s) (second s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                   [(", "  (cond\n    [(empty? s) s]\n    [(letter? (first s))\
    \ (cons (first s) (solve (rest s)))]\n    [else (cons (first s) (solve (rest s)))]))\n",
  "  (cond [(empty? s) s]\n        [(letter? (first s)) (cons (first s) (solve (reverse\
    \ (second s))))]\n        [else (cons (first s) (solve (reverse (second s))))]))\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=scheme,racket |>\n<code>", "  (cond\n  \
    \  [(empty? s) s]\n    [(character? (car s)) (cond\n                         \
    \   [(equal? (char-case (car s)) 'lower) (cons (char-case (car s)) (reverse (substring\
    \ s (+ 0 (length s)))))]\n                            [(equal? (char-case (car\
    \ s)) 'upper) (cons (char-case (car s)) (substring s (+ 0 (length s))))]\n   \
    \                         [(equal? (char-case (car s)) 'other) (cons (char-case\
    \ (car s)) (reverse (substring s (+ 0 (length s)))))]\n                      \
    \      [(equal? (char-case (car s)) 'none) (cons (char-case (car s)) (reverse\
    \ (substring s (+ 0 (length s)))))]\n                            [(equal? (char-case\
    \ (car s)) 'space) (cons (char-case (car s)) (reverse (substring s (+ 0 (length\
    \ s)))))]\n                            [(equal? (char-case (car s)) 'number) (cons\
    \ (char-case (car s)) (reverse (substring s (+ 0 (length s)))))]\n           \
    \                 [(equal? (char-case (car s)) 'symbol) (cons (char-case (car\
    \ s)) (reverse (substring s (+ 0 (length s)))))]\n                           \
    \ [(equal? (char-case (car s)) 'symbol) (cons (char-case (car s)) (reverse (substring\
    \ s (+ 0 (length s)))))]\n                            [(equal? (char-case (car\
    \ s)) 'string) (cons (char-case (car s)) (reverse (substring s (+ 0 (length s)))))]\n\
    \                            [(equal? (char-case (car s)) 'boolean) (cons (char-case\
    \ (car s)) (reverse (substring s (+ 0 (length s)))))]\n                      \
    \      [(equal? (char-case (car s)) 'function) (cons (char-case (car s)) (reverse\
    \ (substring s (+ 0 (length s)))))]\n                            [(equal? (char-case\
    \ (car s)) 'procedure) (cons (char-case (car s)) (reverse (substring s (+ 0 (length\
    \ s)))))]\n                            [(equal? (char-case (car s)) 'null) (cons\
    \ (char-case (car s)) (reverse (substring s (+ 0 (length s)))))]\n           \
    \                 [(equal? (char-case (car s)) 'object) (cons (char-case (car\
    \ s)) (reverse (sub", "  (cond\n    [(empty? s) s]\n    [(member (first s) (map\
    \ char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n        \
    \                                    #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\\
    S #\\T #\\U #\\V \n                                            #\\W #\\X #\\Y\
    \ #\\Z)))\n     (cond\n       [(char->string  (first s)) (cons (char->string (first\
    \ s)) \n                                      (solve (rest s)))]\n       [else\
    \ (cons (first s)\n                  (solve (rest s)))]))\n    [else (cons (first\
    \ s)\n                (solve (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n\
    \    [(character? (car s)) (cons (char->upper (car s)) (reverse (solve (rest s))))]\n\
    \    [else (cons (car s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n\
    \    [(equal? (first s) (first s)) (cons (first s) (solve (rest s)))]\n    [else\
    \ (cons (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(character?\
    \ (car s)) (cons (char->upper (car s)) (reverse (solve (cdr s))))]\n    [else\
    \ (cons (car s) (solve (cdr s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(member\
    \ (first s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\\
    J \n                                           #\\K #\\L #\\M #\\N #\\O #\\P #\\\
    Q #\\R #\\S #\\T #\\U #\\V \n                                           #\\W #\\\
    X #\\Y #\\Z)))\n     (reverse (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\\
    F #\\G #\\H #\\I #\\J \n                                    #\\K #\\L #\\M #\\\
    N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                                 \
    \   #\\W #\\X #\\Y #\\Z)))]\n    [else (cons (first s) (solve (rest s)))]))\n",
  "  (cond\n    [(empty? s) s]\n    [(character? (car s)) (cond\n                \
    \            [(lower? (car s)) (cond\n                                       \
    \       [(upper? (car s)) (cons (upper (car s)) (cdr s))]\n                  \
    \                            [(lower? (car s)) (cons (lower (car s)) (cdr s))])]\n\
    \                            [(upper? (car s)) (cons (upper (car s)) (cdr s))]\n\
    \                            [(lower? (car s)) (cons (lower (car s)) (cdr s))])]\n\
    \    [else (cons (car s) (solve (cdr s)))]))\n</code>\n<|/ a tags=racket,scheme\
    \ |>\n<| a tags=racket,scheme |>\n<code>", "  (cond\n    [(empty? s) s]\n    [(equal?\
    \ (first s) (first s)) (cons (first s) (solve (rest s)))]\n    [else (cons (first\
    \ s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(char? (car s))\
    \ (cons (char->string (char->int (car s))) (reverse (solve (cdr s))))]\n    [else\
    \ (cons (char->string (char->int (car s))) (solve (cdr s)))]))\n", "  (cond\n\
    \    [(empty? s) s]\n    [(equal? (first s) (first s)) (second s)]\n    [else\
    \ (cons (first s)\n                (solve (second s)))]))\n", "  (cond\n    [(empty?\
    \ s) s]\n    [(character? (car s)) (cond \n                            [(equal?\
    \ (char-case (car s)) 'lower) (cons \n                                (cons (char-case\
    \ (car s)) \n                                (solve (substring s (+ 0 (length\
    \ s)))))]\n                            [(equal? (char-case (car s)) 'upper) (cons\
    \ \n                                (cons (char-case (car s)) \n             \
    \                   (solve (substring s (+ 0 (length s)))))]\n               \
    \             [(equal? (char-case (car s)) 'other) (cons \n                  \
    \              (cons (char-case (car s)) \n                                (solve\
    \ (substring s (+ 0 (length s)))))]\n                            [(equal? (char-case\
    \ (car s)) 'none) (cons \n                                (cons (char-case (car\
    \ s)) \n                                (solve (substring s (+ 0 (length s)))))]\n\
    \                            [(equal? (char-case (car s)) 'space) (cons \n   \
    \                             (cons (char-case (car s)) \n                   \
    \             (solve (substring s (+ 0 (length s)))))]\n                     \
    \       [(equal? (char-case (car s)) 'number) (cons \n                       \
    \         (cons (char-case (car s)) \n                                (solve (substring\
    \ s (+ 0 (length s)))))]\n                            [(equal? (char-case (car\
    \ s)) 'symbol) (cons \n                                (cons (char-case (car s))\
    \ \n                                (solve (substring s (+ 0 (length s)))))]\n\
    \                            [(equal? (char-case (car s)) 'other) (cons \n   \
    \                             (cons (char-case (car s)) \n                   \
    \             (solve (substring s (+ 0 (length s)))))]\n                     \
    \       [(equal? (char-case (car s)) 'none) (cons \n                         \
    \       (cons (char-case (car s)) \n                                (solve (substring\
    \ s (+ 0 (length s)))))]\n                            [(equal? (char-case (car\
    \ s)) 'space) (cons \n                                (cons (char-case (car s))\
    \ \n                                (solve (substring s (+ 0 (length s)))))]\n\
    \                            [(equal? (char-case (car s)) 'number) (cons \n  \
    \                              (cons (char-case (car s)) \n                  \
    \              (solve (substring s (+ 0 (length s)))))]\n                    \
    \        [(equal? (char-case (car s)) 'symbol) (cons \n                      \
    \          ", "  (cond [(empty? s) s]\n        [(letter? (first s)) (cons (first\
    \ s) (solve (rest s)))]\n        [else (cons (first s) (solve (rest s)))]))\n",
  "  (cond\n    [(empty? s) s]\n    [(equal? (first s) (first s)) (second s)]\n  \
    \  [else (cons (first s)\n                (solve (second s)))]))\n", "  (cond\n\
    \    [(empty? s) s]\n    [(equal? (first s) (first s)) (second s)]\n    [else\
    \ (cons (first s)\n                (solve (second s)))]))\n", "  (cond\n    [(empty?\
    \ s) s]\n    [(character? (first s)) (cond\n                             [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \           [(equal? (first s) (first s)) (cond\n                            \
    \                                               [(equal? (first s) (first s))\
    \ (cond\n                                                                    \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                  [(equal? (first s) (first s))\
    \ (cond\n                                                                    \
    \                                                            [(equal? (first s)\
    \ (first s)) (cond\n                                                         \
    \                                                                         [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \         [(equal? (first s) (first s)) (cond\n                              \
    \                                                                            \
    \                           [(equal? (first s) (first s)) (cond\n            \
    \                                                                            \
    \                                                [(equal? (first s) (first s))\
    \ (cond\n                                                                    \
    \                                                                            \
    \                          [(equal? (first s) (first s)) (cond\n             \
    \                                                                            \
    \                                                                            \
    \       [(equal? (first s) (first s)) (cond\n                                \
    \                                                                            \
    \                                                                  [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                                            \
    \                                              [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                          [(equal? (first s) (first s)) (cond\n             \
    \                                                                            \
    \                                                                            \
    \               [(equal? (first s) (first s)) (cond\n                        \
    \                                                                            \
    \                                                                            \
    \      [(equal? (first s) (first s)) (cond\n                                 \
    \                                                                            \
    \                                                                           [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \                                                             [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                                            \
    \                                                      [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \                                            [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                [(equal? (first s) (first s)) (cond\n       \
    \                                                                            \
    \                                                                            \
    \                         [(equal? (first s) (first s)) (cond\n              \
    \                                                                            \
    \                                                                            \
    \                  [(equal? (first s) (first s)) (cond\n                     \
    \                                                                            \
    \                                                                            \
    \           [(equal? (first s) (first s)) (cond\n                            \
    \                                                                            \
    \                                                                            \
    \    [(equal? (first s) (first s)) (cond\n                                   \
    \                                                                            \
    \                                                                         [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \                                                             [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                                            \
    \                                                      [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \                                            [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                [(equal? (first s) (first s)) (cond\n       \
    \                                                                            \
    \                                                                            \
    \                         [(equal? (first s) (first s)) (cond\n              \
    \                                                                            \
    \                                                                            \
    \                  [(equal? (first s) (first s)) (cond\n                     \
    \                                                                            \
    \                                                                            \
    \           [(equal? (first s) (first s)) (cond\n                            \
    \                                                                            \
    \                                                                            \
    \    [(equal? (first s) (first s)) (cond\n                                   \
    \                                                                            \
    \                                                                         [(equal?\
    \ (first s) (first s)) (", "  (cond\n    [(empty? s) s]\n    [(member (first s)\
    \ (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n   \
    \                                        #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\\
    R #\\S #\\T #\\U #\\V \n                                           #\\W #\\X #\\\
    Y #\\Z)))\n     (reverse (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\\
    G #\\H #\\I #\\J \n                                       #\\K #\\L #\\M #\\N\
    \ #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                                 \
    \      #\\W #\\X #\\Y #\\Z)))]\n    [else (cons (first s) (solve (rest s)))]))\n",
  "  (cond\n    [(empty? s) s]\n    [(letter? (first s)) (cons (second s) (solve (rest\
    \ s)))]\n    [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty?\
    \ s) s]\n    [(character? (car s)) (cons (char->upper (car s)) (reverse (solve\
    \ (cdr s))))]\n    [else (cons (car s) (solve (cdr s)))]))\n", "  (cond\n    [(empty?\
    \ s) s]\n    [(character? (car s)) (cond \n                            [(equal?\
    \ (char-case (car s)) 'upper) (cons (char-case (car s)) (reverse (substring (string\
    \ (car s) 0 1) (char-case (car s)) 'upper)))]\n                            [(equal?\
    \ (char-case (car s)) 'lower) (cons (char-case (car s)) (reverse (substring (string\
    \ (car s) 0 1) (char-case (car s)) 'lower)))]\n                            [else\
    \ (cons (car s) (solve (cdr s)))])]\n    [else (cons (car s) (solve (cdr s)))]))\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for the help! I understand it a lot\
    \ better now. I'm still trying to wrap my head around recursion and how it works.\
    \ I appreciate it!\n<|/ c |>\n<| c |>\nYou're welcome! Recursion is very powerful\
    \ and useful in many situations. I recommend you read [this article](http://en.wikipedia.org/wiki/Recursion_(computer_science))\
    \ to get a better understanding of how it works.\n<|/ c |>\n<| c |>\nI did read\
    \ that article before I started trying to solve this problem. I'm still trying\
    \ to wrap my head around recursion and how it works. I appreciate it!\n<|/ c |>\n\
    <| c |>\nI added a solution using recursion that I hope will help you understand\
    \ recursion a bit better.\n<|/ c |>\n<| c |>\nThank you so much! I really appreciate\
    \ it!\n<|/ c |>\n<| a tags=racket,scheme |>\nI believe this is what you're looking\
    \ for:\n<code>", "  (cond\n    [(empty? s) s]\n    [(member (first s) (map char->string\
    \ '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                     \
    \                     #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\\
    V \n                                          #\\W #\\X #\\Y #\\Z)))\n     (reverse\
    \ (map string->char (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\\
    H #\\I #\\J \n                                                #\\K #\\L #\\M #\\\
    N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                                 \
    \               #\\W #\\X #\\Y #\\Z))))]\n    [else (cons (first s) (solve (rest\
    \ s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(character? (first s)) (cond\n\
    \                             [(equal? (first s) (second s)) (cond\n         \
    \                                                   [(equal? (first s) (second\
    \ s)) (cond\n                                                                \
    \              [(equal? (first s) (second s)) (cond\n                        \
    \                                                                        [(equal?\
    \ (first s) (second s)) (cond\n                                              \
    \                                                    [(equal? (first s) (second\
    \ s)) (cond\n                                                                \
    \                                    [(equal? (first s) (second s)) (cond\n  \
    \                                                                            \
    \                        [(equal? (first s) (second s)) (cond\n              \
    \                                                                            \
    \              [(equal? (first s) (second s)) (cond\n                        \
    \                                                                            \
    \      [(equal? (first s) (second s)) (cond\n                                \
    \                                                                            [(equal?\
    \ (first s) (second s)) (cond\n                                              \
    \                                                                [(equal? (first\
    \ s) (second s)) (cond\n                                                     \
    \                                                           [(equal? (first s)\
    \ (second s)) (cond\n                                                        \
    \                                                          [(equal? (first s)\
    \ (second s)) (cond\n                                                        \
    \                                                            [(equal? (first s)\
    \ (second s)) (cond\n                                                        \
    \                                                              [(equal? (first\
    \ s) (second s)) (cond\n                                                     \
    \                                                                   [(equal? (first\
    \ s) (second s)) (cond\n                                                     \
    \                                                                     [(equal?\
    \ (first s) (second s)) (cond\n                                              \
    \                                                                            \
    \  [(equal? (first s) (second s)) (cond\n                                    \
    \                                                                            \
    \              [(equal? (first s) (second s)) (cond\n                        \
    \                                                                            \
    \                            [(equal? (first s) (second s)) (cond\n          \
    \                                                                            \
    \                                            [(equal? (first s) (second s)) (cond\n\
    \                                                                            \
    \                                                        [(equal? (first s) (second\
    \ s)) (cond\n                                                                \
    \                                                                      [(equal?\
    \ (first s) (second s)) (cond\n                                              \
    \                                                                            \
    \              [(equal? (first s) (second s)) (cond\n                        \
    \                                                                            \
    \                                      [(equal? (first s) (second s)) (cond\n\
    \                                                                            \
    \                                                                [(equal? (first\
    \ s) (second s)) (cond\n                                                     \
    \                                                                            \
    \             [(equal? (first s) (second s)) (cond\n                         \
    \                                                                            \
    \                                           [(equal? (first s) (second s)) (cond\n\
    \                                                                            \
    \                                                                      [(equal?\
    \ (first s) (second s)) (cond\n                                              \
    \                                                                            \
    \                          [(equal? (first s) (second s)) (cond\n            \
    \                                                                            \
    \                                                              [(equal? (first\
    \ s) (second s)) (cond\n                                                     \
    \                                                                            \
    \                       [(equal? (first s) (second s)) (cond\n               \
    \                                                                            \
    \                                                               [(equal? (first\
    \ s) (second s)) (cond\n                                                     \
    \                                                                            \
    \                           [(equal? (first s) (second s)) (cond\n           \
    \                                                                            \
    \                                                                       [(equal?\
    \ (first s) (second s)) (cond\n                                              \
    \                                                                            \
    \                                      [(equal? (first s) (second s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \          [(equal? (first s) (second s)) (", "  (cond\n    [(empty? s) s]\n \
    \   [(letter? (first s)) (cons (char->upper (first s)) (solve (rest s)))]\n  \
    \  [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n\
    \    [(member (first s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\\
    G #\\H #\\I #\\J \n                                           #\\K #\\L #\\M #\\\
    N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                                 \
    \          #\\W #\\X #\\Y #\\Z)))\n     (string-append (map char->string '(#\\\
    A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                            \
    \               #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n\
    \                                           #\\W #\\X #\\Y #\\Z)) (first s))]\n\
    \    [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s)\
    \ s]\n    [(member (first s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\\
    F #\\G #\\H #\\I #\\J \n                                          #\\K #\\L #\\\
    M #\\N #\\O #\\P #\\Q \n                                          #\\R #\\S #\\\
    T #\\U #\\V \n                                          #\\W #\\X #\\Y #\\Z)))\
    \ \n     (string-append (map (lambda (c) (if (char->string c) \n             \
    \                          (char->string (char->string c) \n                 \
    \                        (char->string (char->string c) \n                   \
    \                        (char->string (char->string c) \n                   \
    \                          (char->string (char->string c) \n                 \
    \                              (char->string (char->string c) \n             \
    \                                   (char->string (char->string c) \n        \
    \                                         (char->string (char->string c) \n  \
    \                                                (char->string (char->string c)\
    \ \n                                                   (char->string (char->string\
    \ c) \n                                                    (char->string (char->string\
    \ c) \n                                                    (char->string (char->string\
    \ c) \n                                                    (char->string (char->string\
    \ c) \n                                                    (char->string (char->string\
    \ c) \n                                                    (char->string (char->string\
    \ c) \n                                                    (char->string (char->string\
    \ c) \n                                                    (char->string (char->string\
    \ c) \n                                                    (char->string (char->string\
    \ c) \n                                                    (char->string (char->string\
    \ c) \n                                                    (char->string (char->string\
    \ c) \n                                                    (char->string (char->string\
    \ c) \n                                                    (char->string (char->string\
    \ c) \n                                                    (char->string (char->string\
    \ c) \n                                                    (char->string (char->string\
    \ c) \n                                                    (char->string (char->string\
    \ c) \n                                                    (char->string (char->string\
    \ c) \n                                                    (char->string (char->string\
    \ c) \n                                                    (char->string (char->string\
    \ c) \n                                                    (char->string (char->string\
    \ c) \n                                                    (char->string (char->string\
    \ c) \n                                                    (char->string (char->string\
    \ c) \n                                                    (char->string (char->string\
    \ c) \n                                                    (char->string (char->string\
    \ c) \n                                                    (char->string (char->string\
    \ c) \n                                                    (char->string (char->string\
    \ c) \n                                                    (char->string (char->string\
    \ c) \n                                                    (char->string (char->string\
    \ c) \n                                                    (char->string (char->string\
    \ c) \n                                                    (char->string (char->string\
    \ c) ", "  (cond\n    [(empty? s) s]\n    [(member (first s) (map char->string\
    \ '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                     \
    \                       #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\\
    U #\\V \n                                            #\\W #\\X #\\Y #\\Z)))\n\
    \     (reverse (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\\
    I #\\J \n                                            #\\K #\\L #\\M #\\N #\\O\
    \ #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                                      \
    \      #\\W #\\X #\\Y #\\Z)))]\n    [else (cons (first s) (solve (rest s)))]))\n\
    </code>\n<|/ a tags=racket,scheme |>\n<| c |>\nThanks for the answer! I understand\
    \ your solution and it works perfectly. However I cannot understand why my code\
    \ doesn't work. Could you please explain to me why my code doesn't work?\n<|/\
    \ c |>\n<| c |>\nI added some comments to my answer. Hope it helps.\n<|/ c |>\n\
    <| a tags=racket,scheme |>\n<code>", "  (cond\n    [(empty? s) s]\n    [(character?\
    \ (first s)) (cond\n                            [(equal? (first s) (first s))\
    \ (solve (rest s))]\n                            [(equal? (first s) (first s))\
    \ (solve (rest s))]\n                            [(equal? (first s) (first s))\
    \ (solve (rest s))]\n                            [(equal? (first s) (first s))\
    \ (solve (rest s))]\n                            [(equal? (first s) (first s))\
    \ (solve (rest s))]\n                            [(equal? (first s) (first s))\
    \ (solve (rest s))]\n                            [(equal? (first s) (first s))\
    \ (solve (rest s))]\n                            [(equal? (first s) (first s))\
    \ (solve (rest s))]\n                            [(equal? (first s) (first s))\
    \ (solve (rest s))]\n                            [(equal? (first s) (first s))\
    \ (solve (rest s))]\n                            [(equal? (first s) (first s))\
    \ (solve (rest s))]\n                            [(equal? (first s) (first s))\
    \ (solve (rest s))]\n                            [(equal? (first s) (first s))\
    \ (solve (rest s))]\n                            [(equal? (first s) (first s))\
    \ (solve (rest s))]\n                            [(equal? (first s) (first s))\
    \ (solve (rest s))]\n                            [(equal? (first s) (first s))\
    \ (solve (rest s))]\n                            [(equal? (first s) (first s))\
    \ (solve (rest s))]\n                            [(equal? (first s) (first s))\
    \ (solve (rest s))]\n                            [(equal? (first s) (first s))\
    \ (solve (rest s))]\n                            [(equal? (first s) (first s))\
    \ (solve (rest s))]\n                            [(equal? (first s) (first s))\
    \ (solve (rest s))]\n                            [(equal? (first s) (first s))\
    \ (solve (rest s))]\n                            [(equal? (first s) (first s))\
    \ (solve (rest s))]\n                            [(equal? (first s) (first s))\
    \ (solve (rest s))]\n                            [(equal? (first s) (first s))\
    \ (solve (rest s))]\n                            [(equal? (first s) (first s))\
    \ (solve (rest s))]\n                            [(equal? (first s) (first s))\
    \ (solve (rest s))]\n                            [(equal? (first s) (first s))\
    \ (solve (rest s))]\n                            [(equal? (first s) (first s))\
    \ (solve (rest s))]\n                            [(equal? (first s) (first s))\
    \ (solve (rest s))]\n                            [(equal? (first s) (first s))\
    \ (solve (rest ", "  (cond\n    [(empty? s) s]\n    [(equal? (first s) (first\
    \ s)) (cons (first s) (solve (rest s)))]\n    [else (cons (first s) (solve (rest\
    \ s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(member (first s) (map char->string\
    \ '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                     \
    \             #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n \
    \                                 #\\W #\\X #\\Y #\\Z)))\n     (reverse (map char->string\
    \ '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                     \
    \             #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n \
    \                                 #\\W #\\X #\\Y #\\Z)))]\n    [else (cons (first\
    \ s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(member (first\
    \ s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n\
    \                                      #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\\
    R #\\S #\\T #\\U #\\V \n                                      #\\W #\\X #\\Y #\\\
    Z)))\n     (cond\n       [(empty? (rest s)) s]\n       [(char->string? (first\
    \ s)) (cons (first s) (solve (rest s)))]\n       [else (cons (first s) (solve\
    \ (rest s)))]\n       )]\n    [else (cons (first s) (solve (rest s)))]\n    ))\n",
  "  (cond\n    [(empty? s) s]\n    [(character? (first s)) (cond\n              \
    \               [(lower? (first s)) (cond\n                                  \
    \              [(upper? (first s)) (first s)]\n                              \
    \                  [(lower? (first s)) (first s)])]\n                        \
    \     [(upper? (first s)) (first s)])]\n    [else (cons (first s) (solve (rest\
    \ s)))]))\n</code>\n<|/ a dscore=0 |>\n<| a tags=scheme,racket,string |>\n<code>",
  "  (cond\n    [(empty? s) s]\n    [(member (first s) (map char->string '(#\\A #\\\
    B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                                 \
    \      #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n        \
    \                               #\\W #\\X #\\Y #\\Z)))\n     (string-append (map\
    \ (lambda (c) (if (char->string c) \n                                       (char->string\
    \ (char->string c) \n                                         (char->string (char->string\
    \ c) \n                                           (char->string (char->string\
    \ c) \n                                             (char->string (char->string\
    \ c) \n                                               (char->string (char->string\
    \ c) \n                                                 (char->string (char->string\
    \ c) \n                                                   (char->string (char->string\
    \ c) \n                                                     (char->string (char->string\
    \ c) \n                                                       (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n", "  (cond\n    [(empty? s) s]\n    [(letter? (first s)) (cons (upper-case\
    \ (first s)) (solve (rest s)))]\n    [else (cons (first s) (solve (rest s)))]))\n",
  "  (cond\n    [(empty? s) s]\n    [(equal? (first s) (first s)) (second s)]\n  \
    \  [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n\
    \    [(member (first s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\\
    G #\\H #\\I #\\J \n                                           #\\K #\\L #\\M #\\\
    N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                                 \
    \          #\\W #\\X #\\Y #\\Z)))\n     (reverse (map char->string '(#\\A #\\\
    B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                                 \
    \   #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n           \
    \                         #\\W #\\X #\\Y #\\Z)))]\n    [else (cons (first s) (solve\
    \ (rest s)))]))\n</code>\n<|/ a tags=racket,scheme |>\n<| a tags=racket,scheme\
    \ |>\n<code>", "  (cond\n    [(empty? s) s]\n    [(letter? (first s)) (cons (first\
    \ s) (solve (rest s)))]\n    [else (cons (first s) (solve (rest s)))]))\n", " \
    \ (cond\n    [(empty? s) s]\n    [(char? (car s)) (cond\n                    \
    \  [(char? (car s)) (cond\n                                       [(char? (car\
    \ s)) (cond\n                                                        [(char? (car\
    \ s)) (cond\n                                                                \
    \         [(char? (car s)) (cond\n                                           \
    \                               [(char? (car s)) (cond\n                     \
    \                                                      [(char? (car s)) (cond\n\
    \                                                                            [(char?\
    \ (car s)) (cond\n                                                           \
    \                  [(char? (car s)) (cond\n                                  \
    \                                            [(char? (car s)) (cond\n        \
    \                                                                       [(char?\
    \ (car s)) (cond\n                                                           \
    \                     [(char? (car s)) (cond\n                               \
    \                                                  [(char? (car s)) (cond\n  \
    \                                                                            \
    \    [(char? (car s)) (cond\n                                                \
    \                                   [(char? (car s)) (cond\n                 \
    \                                                                   [(char? (car\
    \ s)) (cond\n                                                                \
    \                     [(char? (car s)) (cond\n                               \
    \                                                       [(char? (car s)) (cond\n\
    \                                                                            \
    \           [(char? (car s)) (cond\n                                         \
    \                                               [(char? (car s)) (cond\n     \
    \                                                                            \
    \        [(char? (car s)) (cond\n                                            \
    \                                              [(char? (car s)) (cond\n      \
    \                                                                            \
    \         [(char? (car s)) (cond\n                                           \
    \                                                 [(char? (car s)) (cond\n   \
    \                                                                            \
    \              [(char? (car s)) (cond\n                                      \
    \                                                        [(char? (car s)) (cond\n\
    \                                                                            \
    \                   [(char? (car s)) (cond\n                                 \
    \                                                               [(char? (car s))\
    \ (cond\n                                                                    \
    \                             [(char? (car s)) (cond\n                       \
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                                        [(char? (car s)) (cond\n            \
    \                                                                            \
    \            [(char? (car s)) (cond\n                                        \
    \                                                             [(char? (car s))\
    \ (cond\n                                                                    \
    \                                  [(char? (car s)) (cond\n                  \
    \                                                                            \
    \         [(char? (car s)) (cond\n                                           \
    \                                                             [(char? (car s))\
    \ (cond\n                                                                    \
    \                                     [(char? (car s)) (cond\n               \
    \                                                                            \
    \               [(char? (car s)) (cond\n                                     \
    \                                                                      [(char?\
    \ (car s)) (cond\n                                                           \
    \                                                 [(char? (car s)) (cond\n   \
    \                                                                            \
    \                              [(char? (car s)) (cond\n                      \
    \                                                                            \
    \            [(char? (car s)) (cond\n                                        \
    \                                                                       [(char?\
    \ (car s)) (cond\n                                                           \
    \                                                     [(char? (car s)) (cond\n\
    \                                                                            \
    \                                     [(char? (car s)) (cond\n               \
    \                                                                            \
    \                       [(char? (car s)) (cond\n", "  (cond\n    [(empty? s) s]\n\
    \    [(character? (car s)) (cons (char->upper (car s)) (reverse (solve (cdr s))))]\n\
    \    [else (cons (char->lower (car s)) (reverse (solve (cdr s))))]\n  )\n)\n",
  "  (cond\n    [(empty? s) s]\n    [(member (first s) '(#\\A #\\B #\\C #\\D #\\E\
    \ #\\F #\\G #\\H #\\I #\\J \n                     #\\K #\\L #\\M #\\N #\\O #\\\
    P #\\Q #\\R #\\S #\\T #\\U #\\V \n                     #\\W #\\X #\\Y #\\Z)) (cons\
    \ (char->upper (first s)) \n                                (solve (rest s)))]\n\
    \    [else (cons (first s) (solve (rest s)))]))\n", "  (cond [(empty? s) s]\n\
    \        [(character? (first s)) (cons (second s) (solve (rest s)))]\n       \
    \ [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n\
    \    [(character? (first s)) (cond\n                            [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \  [(equal? (first s) (first s)) (cond\n                                     \
    \                                             [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                [(equal? (first s) (first s)) (cond\n       \
    \                                                                            \
    \                                   [(equal? (first s) (first s)) (cond\n    \
    \                                                                            \
    \                                                [(equal? (first s) (first s))\
    \ (cond\n                                                                    \
    \                                                                            \
    \      [(equal? (first s) (first s)) (cond\n                                 \
    \                                                                            \
    \                                                   [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \                                          [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                                              [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                                            \
    \                                                                            \
    \                  [(equal? (first s) (first s)) (cond\n                     \
    \                                                                            \
    \                                                                            \
    \                                                                         [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \                                                                            \
    \                                                         [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \                                                                            \
    \                                                              [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \      [(equal? (first s) (first s)) (cond\n                                 \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                 [(equal? (first s) (first s))\
    \ (cond\n                                                                    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                        [(equal? (first s) (first s)) (cond\n               \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                       [(equal? (first s) (first s)) (cond\n                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                [(equal? (first s) (first s)) (cond\n       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                               [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                          [(equal? (first s) (first s)) (cond\n             \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \             [(equal? (first s) (first s)) (cond\n                          \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \          [(equal? (first s) (first s)) (cond\n                             \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                             [(equal? (first s) (first s)) (cond\n          \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                          [(equal? (first s)\
    \ (first s)) (cond\n                                                         \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                 [(equal? (first s) (first s)) (cond\n      \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                  [(equal? (first s) (first s)) (cond\n                     \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                         [(equal? (first s) (first s)) (cond\n              \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                          [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \  [(equal? (first s) (first s)) (cond\n                                     \
    \                           ", "  (cond\n    [(empty? s) s]\n    [(member (first\
    \ s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n\
    \                                       #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\\
    R #\\S #\\T #\\U #\\V \n                                       #\\W #\\X #\\Y\
    \ #\\Z)))\n     (string-append (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\\
    F #\\G #\\H #\\I #\\J \n                                       #\\K #\\L #\\M\
    \ #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                            \
    \           #\\W #\\X #\\Y #\\Z)) (map char->string '(#\\a #\\b #\\c #\\d #\\\
    e #\\f #\\g #\\h #\\i #\\j \n                                       #\\k #\\l\
    \ #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\u #\\v #\\w #\\x #\\y #\\z))\n  \
    \   (string-append (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\\
    H #\\I #\\J \n                                       #\\K #\\L #\\M #\\N #\\O\
    \ #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                                      \
    \ #\\W #\\X #\\Y #\\Z)) (map char->string '(#\\a #\\b #\\c #\\d #\\e #\\f #\\\
    g #\\h #\\i #\\j \n                                       #\\k #\\l #\\m #\\n\
    \ #\\o #\\p #\\q #\\r #\\s #\\t #\\u #\\v #\\w #\\x #\\y #\\z))\n     (string-append\
    \ (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n   \
    \                                    #\\K #\\L #\\M ", "  (cond\n    [(empty?\
    \ s) s]\n    [(letter? (first s)) (cons (upper-case (first s)) (solve (rest s)))]\n\
    \    [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s)\
    \ s]\n    [(character? (first s)) (cond\n                             [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \         [(equal? (first s) (first s)) (cond\n                              \
    \                                                 [(equal? (first s) (first s))\
    \ (cond\n                                                                    \
    \                                [(equal? (first s) (first s)) (cond\n       \
    \                                                                            \
    \                        [(equal? (first s) (first s)) (cond\n               \
    \                                                                            \
    \                     [(equal? (first s) (first s)) (cond\n                  \
    \                                                                            \
    \                        [(equal? (first s) (first s)) (cond\n               \
    \                                                                            \
    \                                 [(equal? (first s) (first s)) (cond\n      \
    \                                                                            \
    \                                                [(equal? (first s) (first s))\
    \ (cond\n                                                                    \
    \                                                                [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                                            \
    \                    [(equal? (first s) (first s)) (cond\n                   \
    \                                                                            \
    \                                                             [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                                            \
    \                                [(equal? (first s) (first s)) (cond\n       \
    \                                                                            \
    \                                                                            \
    \     [(equal? (first s) (first s)) (cond\n                                  \
    \                                                                            \
    \                                                        [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \                            [(equal? (first s) (first s)) (cond\n           \
    \                                                                            \
    \                                                                            \
    \       [(equal? (first s) (first s)) (cond\n                                \
    \                                                                            \
    \                                                                [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                                            \
    \                                            [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                        [(equal? (first s) (first s)) (cond\n               \
    \                                                                            \
    \                                                                            \
    \           [(equal? (first s) (first s)) (cond\n                            \
    \                                                                            \
    \                                                                            [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \                                                           [(equal? (first s)\
    \ (first s)) (cond\n                                                         \
    \                                                                            \
    \                                                   [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \                                              [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                    [(equal? (first s) (first s)) (cond\n   \
    \                                                                            \
    \                                                                            \
    \                                   [(equal? (first s) (first s)) (cond\n    \
    \                                                                            \
    \                                                                            \
    \                                    [(equal? (first s) (first s)) (cond\n   \
    \                                                                            \
    \                                                                            \
    \                                     [(equal? (first s) (first s)) (cond\n  \
    \                                                                            \
    \                                                                            \
    \                                      [(equal? (first s) (first s)) (cond\n \
    \                                                                            \
    \                                                                            \
    \                                       [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n",
  "  (cond\n    [(empty? s) s]\n    [(character? (car s)) (cond \n               \
    \             [(equal? (char-case (car s)) 'upper) (cons (char-case (car s)) (reverse\
    \ (substring s (+ 0 (length s)))))]\n                            [(equal? (char-case\
    \ (car s)) 'lower) (cons (char-case (car s)) (substring s (+ 0 (length s))))]\n\
    \                            [(equal? (char-case (car s)) 'other) (cons (char-case\
    \ (car s)) (reverse (substring s (+ 0 (length s)))))]\n                      \
    \      [else (cons (char-case (car s)) (reverse (substring s (+ 0 (length s)))))])]\n\
    \    [else (cons (char-case (car s)) (reverse (substring s (+ 0 (length s)))))]))\n\
    </code>\n<|/ a tags=scheme,racket,string |>\n<| c |>\nThis doesn't work for \"\
    #a@C\"\n<|/ c |>\n<| c |>\nI fixed the problem with the \"#a@C\" case. Now it\
    \ works.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  (cond\n    [(empty? s) s]\n\
    \    [(member? (first s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\\
    G #\\H #\\I #\\J \n                                            #\\K #\\L #\\M\
    \ #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                            \
    \                #\\W #\\X #\\Y #\\Z)))\n     (reverse (map char->string '(#\\\
    A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                            \
    \                #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n\
    \                                            #\\W #\\X #\\Y #\\Z)))]\n    [else\
    \ (cons (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(character?\
    \ (first s)) (cons (second s) (solve (rest s)))]\n    [else (cons (first s) (solve\
    \ (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(member (first s) (map\
    \ char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n        \
    \                                  #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\\
    S #\\T #\\U #\\V \n                                          #\\W #\\X #\\Y #\\\
    Z)))\n     (reverse (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\\
    H #\\I #\\J \n                                    #\\K #\\L #\\M #\\N #\\O #\\\
    P #\\Q #\\R #\\S #\\T #\\U #\\V \n                                    #\\W #\\\
    X #\\Y #\\Z)))]\n    [else (cons (first s) (solve (rest s)))]))\n</code>\n<|/\
    \ a dscore=0 |>\n<| a tags=scheme,racket,string |>\n<code>", "  (cond\n    [(empty?\
    \ s) s]\n    [(member (first s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\\
    F #\\G #\\H #\\I #\\J \n                                      #\\K #\\L #\\M #\\\
    N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                                 \
    \     #\\W #\\X #\\Y #\\Z)))\n     (reverse (map char->string '(#\\A #\\B #\\\
    C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                                     #\\\
    K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                  \
    \                   #\\W #\\X #\\Y #\\Z)))]\n    [else (cons (first s) (solve\
    \ (rest s)))]))\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work if there\
    \ are multiple letters in the string. For example, `solve \"aba\"` returns `\"\
    aba\"` instead of `\"Aba\"`.\n<|/ c |>\n<| c |>\nYes, you are right. I've edited\
    \ my answer. Thanks for pointing out.\n<|/ c |>\n<| a tags=racket,scheme |>\n\
    <code>", "  (cond\n    [(empty? s) s]\n    [(character? (first s)) (cond\n   \
    \                         [(equal? (first s) (second s)) (cond\n             \
    \                                         [(equal? (first s) (second s)) (cond\n\
    \                                                                            \
    \   [(equal? (first s) (second s)) (cond\n                                   \
    \                                                                     [(equal?\
    \ (first s) (second s)) (cond\n                                              \
    \                                                                    [(equal?\
    \ (first s) (second s)) (cond\n                                              \
    \                                                                          [(equal?\
    \ (first s) (second s)) (cond\n                                              \
    \                                                                            \
    \        [(equal? (first s) (second s)) (cond\n                              \
    \                                                                            \
    \                          [(equal? (first s) (second s)) (cond\n            \
    \                                                                            \
    \                                                                            \
    \    [(equal? (first s) (second s)) (cond\n                                  \
    \                                                                            \
    \                                                                    [(equal?\
    \ (first s) (second s)) (cond\n                                              \
    \                                                                            \
    \                                                              [(equal? (first\
    \ s) (second s)) (cond\n                                                     \
    \                                                                            \
    \                                                                 [(equal? (first\
    \ s) (second s)) (cond\n                                                     \
    \                                                                            \
    \                                                                   [(equal? (first\
    \ s) (second s)) (cond\n                                                     \
    \                                                                            \
    \                                                                     [(equal?\
    \ (first s) (second s)) (cond\n                                              \
    \                                                                            \
    \                                                                            \
    \  [(equal? (first s) (second s)) (cond\n                                    \
    \                                                                            \
    \                                                                            \
    \              [(equal? (first s) (second s)) (cond\n                        \
    \                                                                            \
    \                                                                            \
    \                            [(equal? (first s) (second s)) (cond\n          \
    \                                                                            \
    \                                                                            \
    \                                            [(equal? (first s) (second s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                                        [(equal? (first s) (second\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \                                                                      [(equal?\
    \ (first s) (second s)) (cond\n                                              \
    \                                                                            \
    \                                                                            \
    \              [(equal? (first s) (second s)) (cond\n                        \
    \                                                                            \
    \                                                                            \
    \                                      [(equal? (first s) (second s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                                                [ (equal? (first\
    \ s) (second s)) (cond\n                                                     \
    \                                                                            \
    \                                                                            \
    \             [(equal? (first s) (second s)) (cond\n                         \
    \                                                                            \
    \                                                                            \
    \                                           [(equal? (first s) (second s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                                                      [(equal?\
    \ (first s) (second s)) (cond\n                                              \
    \                                                                            \
    \                                                                            \
    \                          [(equal? (first s) (second s)) (cond\n            \
    \                                                                            \
    \                                                                            \
    \                                                              [(equal? (first\
    \ s) (second s)) (cond\n                                                     \
    \                                                                            \
    \                                                                            \
    \                       [(equal? (first s) (second s)) (cond\n               \
    \                                                                            \
    \                                                                            \
    \                                                               [(equal? (first\
    \ s) (second s)) (cond\n                                                     \
    \                                                                            \
    \                                                                            \
    \                           [(equal? (first s) (second s)) (cond\n           \
    \                                                                            \
    \                                                                            \
    \                                                                       [(equal?\
    \ (first s) (second s)) (cond\n                                              \
    \                                                                            \
    \                                                                            \
    \                                      [(equal? (first s) (second s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \          [(equal? (first s) (second s)) (cond\n                            \
    \                                                                            \
    \                                                                            \
    \                                                                            ",
  "  (cond\n    [(empty? s) s]\n    [(character? (car s)) (cond \n               \
    \             [(equal? (char-case (car s)) 'upper) (cons (char-case (car s)) (reverse\
    \ (substring (string (car s) 0 1) (char-case (car s)) 'upper)))]\n           \
    \                 [(equal? (char-case (car s)) 'lower) (cons (char-case (car s))\
    \ (reverse (substring (string (car s) 0 1) (char-case (car s)) 'lower)))]\n  \
    \                          [(equal? (char-case (car s)) 'other) (cons (char-case\
    \ (car s)) (reverse (substring (string (car s) 0 1) (char-case (car s)) 'other)))]\n\
    \                            [(equal? (char-case (car s)) 'none) (cons (char-case\
    \ (car s)) (reverse (substring (string (car s) 0 1) (char-case (car s)) 'none)))]\n\
    \                            [(equal? (char-case (car s)) 'none) (cons (char-case\
    \ (car s)) (reverse (substring (string (car s) 0 1) (char-case (car s)) 'none)))]\n\
    \                            [(equal? (char-case (car s)) 'none) (cons (char-case\
    \ (car s)) (reverse (substring (string (car s) 0 1) (char-case (car s)) 'none)))]\n\
    \                            [(equal? (char-case (car s)) 'none) (cons (char-case\
    \ (car s)) (reverse (substring (string (car s) 0 1) (char-case (car s)) 'none)))]\n\
    \                            [(equal? (char-case (car s)) 'none) (cons (char-case\
    \ (car s)) (reverse (substring (string (car s) 0 1) (char-case (car s)) 'none)))]\n\
    \                            [(equal? (char-case (car s)) 'none) (cons (char-case\
    \ (car s)) (reverse (substring (string (car s) 0 1) (char-case (car s)) 'none)))]\n\
    \                            [(equal? (char-case (car s)) 'none) (cons (char-case\
    \ (car s)) (reverse (substring (string (car s) 0 1) (char-case (car s)) 'none)))]\n\
    \                            [(equal? (char-case (car s)) 'none) (cons (char-case\
    \ (car s)) (reverse (substring (string (car ", "  (cond\n    [(empty? s) s]\n\
    \    [(letter? (first s)) (let* ([char (first s)] [char (char-case char)]) [char\
    \ (char-case (char-case char))])]\n    [else (let* ([char (first s)] [char (char-case\
    \ char)]) [char (char-case (char-case char))])]))\n", "  (cond\n    [(empty? s)\
    \ s]\n    [(member? (char->integer c) '(97 65 90)) (char->integer c)]\n    [else\
    \ (cons (char->integer c) (solve (substring s 0 (- (length s) 1)))]))\n)\n", " \
    \ (cond\n    [(empty? s) s]\n    [(member (first s) (map char->string '(#\\A #\\\
    B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                                 \
    \     #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n         \
    \                             #\\W #\\X #\\Y #\\Z)))\n     (cond\n       [(empty?\
    \ (rest s)) s]\n       [(member (first s) (map char->string '(#\\a #\\b #\\c #\\\
    d #\\e #\\f #\\g #\\h #\\i #\\j \n                                           #\\\
    k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\u #\\v \n                  \
    \                         #\\w #\\x #\\y #\\z))\n        (cond\n          [(empty?\
    \ (rest s)) s]\n          [(member (first s) (map char->string '(#\\A #\\B #\\\
    C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                                      \
    \         #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n     \
    \                                          #\\W #\\X #\\Y #\\Z))\n           (cond\n\
    \             [(empty? (rest s)) s]\n             [(member (first s) (map char->string\
    \ '(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j \n                     \
    \                             #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\\
    t #\\u #\\v \n                                                  #\\w #\\x #\\\
    y #\\z))\n              (cond\n                [(empty? (rest s)) s]\n       \
    \         [(member (first s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\\
    F #\\G #\\H #\\I #\\J \n                                                     \
    \ #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T ", "  (cond\n    [(empty?\
    \ s) s]\n    [(member (first s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\\
    F #\\G #\\H #\\I #\\J \n                                            #\\K #\\L\
    \ #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                       \
    \                     #\\W #\\X #\\Y #\\Z)))\n     (string-append (map char->string\
    \ '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                     \
    \                  #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\\
    V \n                                       #\\W #\\X #\\Y #\\Z)) (first s))]\n\
    \    [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s)\
    \ s]\n    [(equal? (first s) (first s)) (second s)]\n    [else (cons (first s)\n\
    \                (solve (substring (second s) 0 (- (length s) 1)))\n         \
    \       (solve (substring (second s) 1 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 2 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 3 (- (length s) 1)))\n                (solve (substring (second s)\
    \ 4 (- (length s) 1)))\n                (solve (substring (second s) 5 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 6 (- (length s) 1)))\n\
    \                (solve (substring (second s) 7 (- (length s) 1)))\n         \
    \       (solve (substring (second s) 8 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 9 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 10 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 11 (- (length s) 1)))\n                (solve (substring (second s) 12 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 13 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 14 (- (length s) 1)))\n\
    \                (solve (substring (second s) 15 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 16 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 17 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 18 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 19 (- (length s) 1)))\n                (solve (substring (second s) 20 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 21 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 22 (- (length s) 1)))\n\
    \                (solve (substring (second s) 23 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 24 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 25 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 26 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 27 (- (length s) 1)))\n                (solve (substring (second s) 28 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 29 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 30 (- (length s) 1)))\n\
    \                (solve (substring (second s) 31 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 32 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 33 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 34 (", "  (cond\n    [(empty? s) s]\n    [(character? (first s))\
    \ (cond\n                            [(equal? (first s) (first s)) (cond\n   \
    \                                                     [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                  [(equal? (first s) (first s)) (cond\n                     \
    \                                                                            \
    \       [(equal? (first s) (first s)) (cond\n                                \
    \                                                                            \
    \  [(equal? (first s) (first s)) (cond\n                                     \
    \                                                                            \
    \   [(equal? (first s) (first s)) (cond\n                                    \
    \                                                                            \
    \        [(equal? (first s) (first s)) (cond\n                               \
    \                                                                            \
    \                 [(equal? (first s) (first s)) (cond\n                      \
    \                                                                            \
    \                              [(equal? (first s) (first s)) (cond\n         \
    \                                                                            \
    \                                               [(equal? (first s) (first s))\
    \ (cond\n                                                                    \
    \                                                                    [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \                   [(equal? (first s) (first s)) (cond\n                    \
    \                                                                            \
    \                                                [#t (cons (first s) (solve (rest\
    \ s)))])])])])])])])])]\n                            [(equal? (first s) (first\
    \ s)) (cond\n                                                        [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                   [(equal? (first s) (first s)) (cond\n    \
    \                                                                            \
    \                        [(equal? (first s) (first s)) (cond\n               \
    \                                                                            \
    \                   [(equal? (first s) (first s)) (cond\n                    \
    \                                                                            \
    \                    [(equal? (first s) (first s)) (cond\n                   \
    \                                                                            \
    \                         [(equal? (first s) (first s)) (cond\n              \
    \                                                                            \
    \                                  [(equal? (first s) (first s)) (cond\n     \
    \                                                                            \
    \                                               [(equal? (first s) (first s))\
    \ (cond\n                                                                    \
    \                                                                [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                                            \
    \      [(equal? (first s) (first s)) (cond\n                                 \
    \                                                                            \
    \                                 [(equal? (first s) (first s)) (cond\n      \
    \                                                                            \
    \                                                              [#t (cons (first\
    \ s) (solve (rest s)))])])])])])])])])])])])]\n                            [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \         [(equal? (first s) (first s)) (cond\n                              \
    \                                                    [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                  [(equal? (first s) (first s)) (cond\n     \
    \                                                                            \
    \                                   [(equal? (first s) (first s)) (cond\n    \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                [(equal? (first s) (first s))\
    \ (cond\n                                                                    \
    \                                                            [(equal? (first s)\
    \ (first s)) (cond\n                                                         \
    \                                                                           [(equal?\
    \ (first s) (first s)) (cond", "  (cond\n    [(empty? s) s]\n    [(character?\
    \ (car s)) (cond\n                             [(equal? (char-case (car s)) 'upper)\
    \ (cons (char-case (car s)) (reverse (substring (string (car s) 0 1) (char-case\
    \ (car s)) 'upper)))]\n                             [(equal? (char-case (car s))\
    \ 'lower) (cons (char-case (car s)) (reverse (substring (string (car s) 0 1) (char-case\
    \ (car s)) 'lower)))]\n                             [(equal? (char-case (car s))\
    \ 'other) (cons (char-case (car s)) (reverse (substring (string (car s) 0 1) (char-case\
    \ (car s)) 'other)))]\n                             [else (cons (char-case (car\
    \ s)) (reverse (substring (string (car s) 0 1) (char-case (car s)) 'other)))])]\n\
    \    [else (cons (char-case (car s)) (reverse (substring (string (car s) 0 1)\
    \ (char-case (car s)) 'other)))]))\n</code>\n<|/ a dscore=1 |>\n<| a tags=racket,scheme\
    \ |>\n<code>", "  (cond\n    [(empty? s) s]\n    [(equal? (first s) (first s))\
    \ (cond\n                                [(equal? (first s) (first s)) (cond\n\
    \                                                          [(equal? (first s)\
    \ (first s)) (cond\n                                                         \
    \                  [(equal? (first s) (first s)) (cond\n                     \
    \                                                      [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \           [(equal? (first s) (first s)) (cond\n                            \
    \                                               [(equal? (first s) (first s))\
    \ (cond\n                                                                    \
    \       [(equal? (first s) (first s)) (cond\n                                \
    \                                           [(equal? (first s) (first s)) (cond\n\
    \                                                                           [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                            [(equal? (first s) (first s)) (cond\n           \
    \                                                                [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                     [(equal? (first s) (first s)) (cond\n                  \
    \                                                         [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \           [(equal? (first s) (first s)) (cond\n                            \
    \                                               [(equal? (first s) (first s))\
    \ (cond\n                                                                    \
    \       [(equal? (first s) (first s)) (cond\n                                \
    \                                           [(equal? (first s) (first s)) (cond\n\
    \                                                                           [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                            [(equal? (first s) (first s)) (cond\n           \
    \                                                                [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                     [(equal? (first s) (first s)) (cond\n                  \
    \                                                         [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \           [(equal? (first s) (first s)) (cond\n                            \
    \                                               [(equal? (first s) (first s))\
    \ (cond\n                                                                    \
    \       [(equal? (first s) (first s)) (cond\n                                \
    \                                           [(equal? (first s) (first s)) (cond\n\
    \                                                                           [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                            [(equal? (first s) (first s)) (cond\n           \
    \                                                                [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                     [(equal? (first s) (first s)) (cond\n                  \
    \                                                         [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \           [(equal? (first s) (first s)) (cond\n                            \
    \                                               [(equal? (first s) (first s))\
    \ (cond\n                                                                    \
    \       [(equal? (first s) (first s)) (cond\n                                \
    \                                           [(equal? (first s) (first s)) (cond\n\
    \                                                                           [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                            [(equal? (first s) (first s)) (cond\n           \
    \                                                                [(equal? (first\
    \ s) (first s)) (", "  (cond\n    [(empty? s) s]\n    [(letter? (first s)) (let*\
    \ ([char (first s)] [char (char-case (char-code char))]) (cond\n      [(char-upper?\
    \ char) (cons (char-upper (first s)) (reverse (solve (rest s))))]\n      [else\
    \ (cons (char-lower (first s)) (reverse (solve (rest s))))]\n      ))]\n    [else\
    \ (cons (first s) (solve (rest s)))]))\n</code>\n<|/ a tags=recursion,racket,scheme\
    \ |>\n<| a dscore=0 |>\n<code>", "  (cond\n    [(empty? s) s]\n    [(letter? (first\
    \ s)) (cond\n                            [(upper? (first s)) (cond\n         \
    \                                      [(lower? (first s)) (first s)]\n      \
    \                                         [(upper? (first s)) (first s)]])\n \
    \                           [(lower? (first s)) (first s)]\n                 \
    \           [(lower? (first s)) (first s)]])]\n    [else (cond\n             [(upper?\
    \ (first s)) (cond\n                                   [(lower? (first s)) (first\
    \ s)]\n                                   [(upper? (first s)) (first s)]])\n \
    \            [(lower? (first s)) (first s)]\n             [(lower? (first s))\
    \ (first s)]])]))\n", "  (cond\n    [(empty? s) s]\n    [(member (first s) '(#\\\
    A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                       #\\K #\\\
    L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                       #\\\
    W #\\X #\\Y #\\Z)) (cons (char->upper (first s)) \n                          \
    \             (solve (rest s)))]\n    [else (cons (first s) (solve (rest s)))]))\n",
  "  (cond\n    [(empty? s) s]\n    [(member (first s) (map char->string '(#\\A #\\\
    B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                                 \
    \      #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n        \
    \                               #\\W #\\X #\\Y #\\Z)))\n     (string-append (map\
    \ (lambda (c) (if (char->string c) \n                                        \
    \ (char->string (char->string c) \n                                          \
    \            (if (char->string (char->string c)) \n                          \
    \                                (char->string (char->string c) \n           \
    \                                               (char->string c))\n          \
    \                                                c))) \n                     \
    \      (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n\
    \                                               #\\K #\\L #\\M #\\N #\\O #\\P\
    \ #\\Q #\\R #\\S #\\T #\\U #\\V \n                                           \
    \    #\\W #\\X #\\Y #\\Z)))\n     (string-append (map (lambda (c) (if (char->string\
    \ c) \n                                         (char->string (char->string c)\
    \ \n                                                      (if (char->string (char->string\
    \ c)) \n                                                          (char->string\
    \ (char->string c) \n                                                        \
    \  (char->string c))\n                                                       \
    \   c))) \n                           (map char->string '(#\\A #\\B #\\C #\\D\
    \ #\\E #\\F #\\G #\\H #\\I #\\J \n                                           \
    \    #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n          \
    \                                     #\\W #\\X #\\Y #\\Z)))\n     (string-append\
    \ (map (lambda (c) (if (char->string c) \n                                   \
    \      (char->string (char->string c) \n                                     \
    \                 (if (char->string (char->string c)) \n                     \
    \                                     (char->string (char->string c) \n      \
    \                                                    (char->string c))\n     \
    \                                                     c))) \n                \
    \           (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\\
    J ", "  (cond\n    [(empty? s) s]\n    [(member (first s) (map char->string '(#\\\
    A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                            \
    \                #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n\
    \                                            #\\W #\\X #\\Y #\\Z)))\n     (reverse\
    \ (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n   \
    \                                 #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\\
    S #\\T #\\U #\\V \n                                    #\\W #\\X #\\Y #\\Z)))]\n\
    \    [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s)\
    \ s]\n    [(member (first s) '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\\
    J \n                       #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\\
    U #\\V \n                       #\\W #\\X #\\Y #\\Z)) (cons (upper-case (first\
    \ s)) \n                                      (solve (rest s)))]\n    [else (cons\
    \ (first s) (solve (rest s)))]))\n", "  (cond [(empty? s) s]\n        [(character?\
    \ (car s)) (cons (char->upper (car s)) (reverse (solve (cdr s))))]\n        [else\
    \ (cons (char->lower (car s)) (reverse (solve (cdr s))))]))\n</code>\n<|/ a tags=racket,scheme\
    \ |>\n<| a tags=racket,scheme |>\n<code>", "  (cond\n    [(empty? s) s]\n    [(member\
    \ (first s) '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n           \
    \          #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n    \
    \                 #\\W #\\X #\\Y #\\Z)) (cons (char->upper (first s)) \n     \
    \                                 (solve (rest s)))]\n    [else (cons (first s)\
    \ (solve (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(equal? (first s)\
    \ (first s)) (cond\n                                    [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \       [(equal? (first s) (first s)) (cond\n                                \
    \                                                                        [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                           [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \  [(equal? (first s) (first s)) (cond\n                                     \
    \                                                                            \
    \               [(equal? (first s) (first s)) (cond\n                        \
    \                                                                            \
    \                              [(equal? (first s) (first s)) (cond\n         \
    \                                                                            \
    \                                               [(equal? (first s) (first s))\
    \ (cond\n                                                                    \
    \                                                                  [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                                            \
    \      [(equal? (first s) (first s)) (cond\n                                 \
    \                                                                            \
    \                             [(equal? (first s) (first s)) (cond\n          \
    \                                                                            \
    \                                                      [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \  [(equal? (first s) (first s)) (cond\n                                     \
    \                                                                            \
    \                               [(equal? (first s) (first s)) (cond\n        \
    \                                                                            \
    \                                                              [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                                            \
    \                  [(equal? (first s) (first s)) (cond\n                     \
    \                                                                            \
    \                                                     [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \            [(equal? (first s) (first s)) (cond\n                           \
    \                                                                            \
    \                                                   [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \                [(equal? (first s) (first s)) (cond\n                       \
    \                                                                            \
    \                                                           [(equal? (first s)\
    \ (first s)) (cond\n                                                         \
    \                                                                            \
    \                           [(equal? (first s) (first s)) (cond\n            \
    \                                                                            \
    \                                                                          [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \                                         [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \              [(equal? (first s) (first s)) (cond\n                         \
    \                                                                            \
    \                                                                   [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                    [(equal? (first s) (first s)) (cond\n                   \
    \                                                                            \
    \                                                                            \
    \   [(equal? (first s) (first s)) (cond\n                                    \
    \                                                                            \
    \                                                                [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                                            \
    \                                                [(equal? (first s) (first s))\
    \ (cond\n                                                                    \
    \                                                                            \
    \                                    [(equal? (first s) (first s)) (cond\n   \
    \                                                                            \
    \                                                                            \
    \                           [(equal? (first s) (first s)) (cond\n            \
    \                                                                            \
    \                                                                            \
    \                    [(equal? (first s) (first s)) (cond\n                   \
    \                                                                            \
    \                                                                            \
    \               [(equal? (first s) (first s)) (cond\n                        \
    \                                                                            \
    \                                                                            \
    \            [(equal? (first s) ", "  (cond\n    [(empty? s) s]\n    [(letter?\
    \ (first s)) (cond\n                            [(upper? (first s)) (cond\n  \
    \                                             [(lower? (first s)) (first s)]\n\
    \                                               [else (first s)])]\n         \
    \                   [else (first s)])]\n    [else (first s)]))\n</code>\n<|/ a\
    \ |>\n<| c |>\nThis doesn't work. Try it out on \"#a@C\".\n<|/ c |>\n<| c |>\n\
    It doesn't work because you didn't test it on \"#a@C\". It doesn't work because\
    \ you didn't test it on \"#a@C\". It doesn't work because you didn't test it on\
    \ \"#a@C\". It doesn't work because you didn't test it on \"#a@C\". It doesn't\
    \ work because you didn't test it on \"#a@C\". It doesn't work because you didn't\
    \ test it on \"#a@C\". It doesn't work because you didn't test it on \"#a@C\"\
    . It doesn't work because you didn't test it on \"#a@C\". It doesn't work because\
    \ you didn't test it on \"#a@C\". It doesn't work because you didn't test it on\
    \ \"#a@C\". It doesn't work because you didn't test it on \"#a@C\". It doesn't\
    \ work because you didn't test it on \"#a@C\". It doesn't work because you didn't\
    \ test it on \"#a@C\". It doesn't work because you didn't test it on \"#a@C\"\
    . It doesn't work because you didn't test it on \"#a@C\". It doesn't work because\
    \ you didn't test it on \"#a@C\". It doesn't work because you didn't test it on\
    \ \"#a@C\". It doesn't work because you didn't test it on \"#a@C\". It doesn't\
    \ work because you didn't test it on \"#a@C\". It doesn't work because you didn't\
    \ test it on \"#a@C\". It doesn't work because you didn't test it on \"#a@C\"\
    . It doesn't work because you didn't test it on \"#a@C\". It doesn't work because\
    \ you didn't test it on \"#a@C\". It doesn't work because you didn't test it on\
    \ \"#a@C\". It doesn't work because you didn't test it on \"#a@C\". It doesn't\
    \ work because you didn't test it on \"#a@C\". It doesn't work because you didn't\
    \ test it on \"#a@C\". It doesn't work because you didn't test it ", "  (cond\n\
    \    [(empty? s) s]\n    [(character? (first s)) (cond\n                     \
    \        [(equal? (first s) (first s)) (solve (rest s))]\n                   \
    \          [(equal? (first s) (first s)) (solve (rest s))]\n                 \
    \            [(equal? (first s) (first s)) (solve (rest s))]\n               \
    \              [(equal? (first s) (first s)) (solve (rest s))]\n             \
    \                [(equal? (first s) (first s)) (solve (rest s))]\n           \
    \                  [(equal? (first s) (first s)) (solve (rest s))]\n         \
    \                    [(equal? (first s) (first s)) (solve (rest s))]\n       \
    \                      [(equal? (first s) (first s)) (solve (rest s))]\n     \
    \                        [(equal? (first s) (first s)) (solve (rest s))]\n   \
    \                          [(equal? (first s) (first s)) (solve (rest s))]\n \
    \                            [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                             [(equal? (first s) (first s)) (solve (rest ", " \
    \ (cond\n    [(empty? s) s]\n    [(char? (car s)) (cond\n                    \
    \  [(char? (car s)) (cond\n                                       [(char? (car\
    \ s)) (cond\n                                                        [(char? (car\
    \ s)) (cond\n                                                                \
    \         [(char? (car s)) (cond\n                                           \
    \                               [(char? (car s)) (cond\n                     \
    \                                                      [(char? (car s)) (cond\n\
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                [(char? (car s)) (cond\n                                    \
    \                                       [(char? (car s)) (cond\n             \
    \                                                              [(char? (car s))\
    \ (cond\n                                                                    \
    \       [(char? (car s)) (cond\n                                             \
    \                              [(char? (car s)) (cond\n                      \
    \                                                     [(char? (car s)) (cond\n\
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                [(char? (car s)) (cond\n                                    \
    \                                       [(char? (car s)) (cond\n             \
    \                                                              [(char? (car s))\
    \ (cond\n                                                                    \
    \       [(char? (car s)) (cond\n                                             \
    \                              [(char? (car s)) (cond\n                      \
    \                                                     [(char? (car s)) (cond\n\
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                [(char? (car s)) (cond\n                                    \
    \                                       [(char? (car s)) (cond\n             \
    \                                                              [(char? (car s))\
    \ (cond\n                                                                    \
    \       [(char? (car s)) (cond\n                                             \
    \                              [(char? (car s)) (cond\n                      \
    \                                                     [(char? (car s)) (cond\n\
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                [(char? (car s)) (cond\n                                    \
    \                                       [(char? (car s)) (cond\n             \
    \                                                              [(char? (car s))\
    \ (cond\n                                                                    \
    \       [(char? (car s)) (cond\n                                             \
    \                              [(char? (car s)) (cond\n                      \
    \                                                     [(char? (car s)) (cond\n\
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                [(char? (car s)) (cond\n                                    \
    \                                       [(char? (car s)) (cond\n             \
    \                                                              [(char? (car s))\
    \ (cond\n                                                                    \
    \       [(char? (car s)) (cond\n                                             \
    \                              [(char? (car s)) (cond\n                      \
    \                                                     [(char? (car s)) (cond\n\
    \                                                                           [(char?\
    \ (car s)) (cond\n                                                           \
    \                [(char? (car s)) (cond\n                                    \
    \                                       [(char? (car s)) (cond\n             \
    \                                                              [(char? (car s))\
    \ (cond\n", "  (cond\n    [(empty? s) s]\n    [(character? (car s)) (cond \n \
    \                           [(equal? (char-code (car s)) 97) (cond \n        \
    \                        [(equal? (char-code (car s)) 65) (cond \n           \
    \                         [(equal? (char-code (car s)) 97) (cond \n          \
    \                              [(equal? (char-code (car s)) 65) (cons \n     \
    \                                       (char-code (car s)) (cons (char-code (car\
    \ s)) \n                                            (solve (char-code (cdr s))))\n\
    \                                        [(equal? (char-code (car s)) 97) (cons\
    \ \n                                            (char-code (car s)) (cons (char-code\
    \ (car s)) \n                                            (solve (char-code (cdr\
    \ s))))\n                                        [(equal? (char-code (car s))\
    \ 65) (cons \n                                            (char-code (car s))\
    \ (cons (char-code (car s)) \n                                            (solve\
    \ (char-code (cdr s))))\n                                        [(equal? (char-code\
    \ (car s)) 97) (cons \n                                            (char-code\
    \ (car s)) (cons (char-code (car s)) \n                                      \
    \      (solve (char-code (cdr s))))\n                                        [(equal?\
    \ (char-code (car s)) 65) (cons \n                                           \
    \ (char-code (car s)) (cons (char-code (car s)) \n                           \
    \                 (solve (char-code (cdr s))))\n                             \
    \           [(equal? (char-code (car s)) 97) (cons \n                        \
    \                    (char-code (car s)) (cons (char-code (car s)) \n        \
    \                                    (solve (char-code (cdr s))))\n          \
    \                              [(equal? (char-code (car s)) 65) (cons \n     \
    \                                       (char-code (car s)) (cons (char-code (car\
    \ s)) \n                                            (solve (char-code (cdr s))))\n\
    \                                        [(equal? (char-code (car s)) 97) (cons\
    \ \n                                            (char-code (car s)) (cons (char-code\
    \ (car s)) \n                                            (solve (char-code (cdr\
    \ s))))\n                                        [(equal? (char-code (car s))\
    \ 65) (cons \n                                            (char-code (car s))\
    \ (cons (char-code (car s)) \n                                            (solve\
    \ (char-code (cdr s))))\n                                        [(equal? (char-code\
    \ (car s)) 97) (cons \n                                            (char-", " \
    \ (cond\n    [(empty? s) s]\n    [(member (first s) (map char->string '(#\\A #\\\
    B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                                 \
    \         #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n     \
    \                                     #\\W #\\X #\\Y #\\Z)))\n     (cond\n   \
    \    [(char->string  (first s)) (cond\n                                    [(char->string\
    \  (first s)) \n                                     (cond\n                 \
    \                     [(char->string  (first s)) \n                          \
    \             (cond\n                                        [(char->string  (first\
    \ s)) \n                                         (cond\n                     \
    \                      [(char->string  (first s)) \n                         \
    \                    (cond\n                                               [(char->string\
    \  (first s)) \n                                                 (cond\n     \
    \                                              [(char->string  (first s)) \n \
    \                                                    (cond\n                 \
    \                                      [(char->string  (first s)) \n         \
    \                                                (cond\n                     \
    \                                      [(char->string  (first s)) \n         \
    \                                                    (cond\n                 \
    \                                              [(char->string  (first s)) \n \
    \                                                                (cond\n     \
    \                                                              [(char->string\
    \  (first s)) \n                                                             \
    \        (cond\n                                                             \
    \        [(char->string  (first s)) \n                                       \
    \                              (cond\n                                       \
    \                              [(char->string  (first s)) \n                 \
    \                                                    (cond\n                 \
    \                                                    [(char->string  (first s))\
    \ \n                                                                     (cond\n\
    \                                                                     [(char->string\
    \  (first s)) \n                                                             \
    \        (cond\n                                                             \
    \        [(char->string  (first s)) \n                                       \
    \                              (cond\n                                       \
    \                              [(char->string  (first s)) \n                 \
    \                                                    (cond\n                 \
    \                                                    [(char->string  (first s))\
    \ \n                                                                     (cond\n\
    \                                                                     [(char->string\
    \  (first s)) \n                                                             \
    \        (cond\n                                                             \
    \        [(char->string  (first s)) \n                                       \
    \                              (cond\n                                       \
    \                              [(char->string  (first s)) \n                 \
    \                                                    (cond\n                 \
    \                                                    [(char->string  (first s))\
    \ \n                                                                     (cond\n\
    \                                                                     [(char->string\
    \  (first s)) \n                                                             \
    \        (cond\n                                                             \
    \        [(char->string  (first s)) \n                                       \
    \                              (cond\n                                       \
    \                              [(char->string  (first s)) \n                 \
    \                                                    (cond\n                 \
    \                                                    [(char->string  (first s))\
    \ \n                                                                     (cond\n\
    \                                                                     [(char->string\
    \  (first s)", "  (cond\n    [(empty? s) s]\n    [(character? (car s)) (cond\n\
    \                            [(lower? (car s)) (cond\n                       \
    \                        [(upper? (car s)) (cons (upper (car s)) (cdr s))]\n \
    \                                              [else (cons (lower (car s)) (cdr\
    \ s))])]\n                            [else (cons (car s) (cdr s))])]\n    [else\
    \ (cons (car s) (solve (cdr s)))]))\n</code>\n<|/ a dscore=0 |>\n<| a tags=scheme,racket,recursion\
    \ |>\n<code>", "  (cond\n    [(empty? s) s]\n    [(equal? (first s) (first s))\
    \ (second s)]\n    [else (cons (first s)\n                (solve (substring (second\
    \ s) 0 (- (length s) 1)))\n                (solve (substring (second s) 1 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 2 (- (length s) 1)))\n\
    \                (solve (substring (second s) 3 (- (length s) 1)))\n         \
    \       (solve (substring (second s) 4 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 5 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 6 (- (length s) 1)))\n                (solve (substring (second s)\
    \ 7 (- (length s) 1)))\n                (solve (substring (second s) 8 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 9 (- (length s) 1)))\n\
    \                (solve (substring (second s) 10 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 11 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 12 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 13 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 14 (- (length s) 1)))\n                (solve (substring (second s) 15 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 16 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 17 (- (length s) 1)))\n\
    \                (solve (substring (second s) 18 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 19 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 20 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 21 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 22 (- (length s) 1)))\n                (solve (substring (second s) 23 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 24 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 25 (- (length s) 1)))\n\
    \                (solve (substring (second s) 26 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 27 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 28 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 29 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 30 (- (length s) 1)))\n                (solve (substring (second s) 31 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 32 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 33 (- (length s) 1)))\n\
    \                (solve (substring (second s) 34 (", "  (cond\n    [(empty? s)\
    \ s]\n    [(character? (car s)) (cond\n                            [(lower? (car\
    \ s)) (cond\n                                               [(upper? (car s))\
    \ (cons (upper (car s)) (cdr s))]\n                                          \
    \     [else (cons (lower (car s)) (cdr s))])]\n                            [else\
    \ (cons (car s) (solve (cdr s)))])]\n    [else (cons (car s) (solve (cdr s)))]))\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=scheme,racket,recursion |>\n<code>", " \
    \ (cond\n    [(empty? s) s]\n    [(member (first s) (map char->string '(#\\A #\\\
    B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                                 \
    \           #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n   \
    \                                         #\\W #\\X #\\Y #\\Z)))\n     (string-append\
    \ (map (lambda (c) (if (char->string c) \n                                   \
    \    (char->string (char->string c) \n                                       \
    \             \"#\\a\" \"#\\A\") c)) \n                       (reverse (map char->string\
    \ '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                     \
    \                       #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\\
    U #\\V \n                                            #\\W #\\X #\\Y #\\Z)))]\n\
    \    [else (cons (first s) (solve (rest s)))]))\n</code>\n<|/ a tags=racket,scheme\
    \ |>\n<| c |>\nI like your solution, however it fails for \"#a@C\" which should\
    \ return \"#A@c\".\n<|/ c |>\n<| c |>\n: I fixed the bug, now it works. Thanks!\n\
    <|/ c |>\n<| c |>\nI like your solution, however it fails for \"#a@C\" which should\
    \ return \"#A@c\".\n<|/ c |>\n<| c |>\n: I fixed the bug, now it works. Thanks!\n\
    <|/ c |>\n<| a dscore=1 |>\nHere's a solution that uses recursion:\n<code>", " \
    \ (cond\n    [(empty? s) s]\n    [(member (first s) (map char->string '(#\\A #\\\
    B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                                 \
    \      #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n        \
    \                               #\\W #\\X #\\Y #\\Z)))\n     (reverse (map char->string\
    \ '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                     \
    \              #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n\
    \                                   #\\W #\\X #\\Y #\\Z)))]\n    [else (cons (first\
    \ s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(equal? (first\
    \ s) (first s)) (second s)]\n    [else (cons (first s) (solve (second s)))]))\n",
  "  (cond\n    [(empty? s) s]\n    [(char? (car s)) (cons (char->upper (car s)) (reverse\
    \ (solve (rest s))))]\n    [else (cons (char->lower (car s)) (reverse (solve (rest\
    \ s))))]\n  )\n)\n", "  (cond\n    [(empty? s) s]\n    [(character? (first s))\
    \ (cond\n                            [(equal? (first s) (first s)) (solve (rest\
    \ s))]\n                            [(equal? (first s) (first s)) (solve (rest\
    \ s))]\n                            [(equal? (first s) (first s)) (solve (rest\
    \ s))]\n                            [(equal? (first s) (first s)) (solve (rest\
    \ s))]\n                            [(equal? (first s) (first s)) (solve (rest\
    \ s))]\n                            [(equal? (first s) (first s)) (solve (rest\
    \ s))]\n                            [(equal? (first s) (first s)) (solve (rest\
    \ s))]\n                            [(equal? (first s) (first s)) (solve (rest\
    \ s))]\n                            [(equal? (first s) (first s)) (solve (rest\
    \ s))]\n                            [(equal? (first s) (first s)) (solve (rest\
    \ s))]\n                            [(equal? (first s) (first s)) (solve (rest\
    \ s))]\n                            [(equal? (first s) (first s)) (solve (rest\
    \ s))]\n                            [(equal? (first s) (first s)) (solve (rest\
    \ s))]\n                            [(equal? (first s) (first s)) (solve (rest\
    \ s))]\n                            [(equal? (first s) (first s)) (solve (rest\
    \ s))]\n                            [(equal? (first s) (first s)) (solve (rest\
    \ s))]\n                            [(equal? (first s) (first s)) (solve (rest\
    \ s))]\n                            [(equal? (first s) (first s)) (solve (rest\
    \ s))]\n                            [(equal? (first s) (first s)) (solve (rest\
    \ s))]\n                            [(equal? (first s) (first s)) (solve (rest\
    \ s))]\n                            [(equal? (first s) (first s)) (solve (rest\
    \ s))]\n                            [(equal? (first s) (first s)) (solve (rest\
    \ s))]\n                            [(equal? (first s) (first s)) (solve (rest\
    \ s))]\n                            [(equal? (first s) (first s)) (solve (rest\
    \ s))]\n                            [(equal? (first s) (first s)) (solve (rest\
    \ s))]\n                            [(equal? (first s) (first s)) (solve (rest\
    \ s))]\n                            [(equal? (first s) (first s)) (solve (rest\
    \ s))]\n                            [(equal? (first s) (first s)) (solve (rest\
    \ s))]\n                            [(equal? (first s) (first s)) (solve (rest\
    \ s))]\n                            [(equal? (first s) (first s)) (solve (rest\
    \ s))]\n                            [(equal? (first s) (first s)) (solve (rest ",
  "  (cond\n    [(empty? s) s]\n    [(equal? (first s) (first s)) (second s)]\n  \
    \  [else (cons (first s)\n                (solve (substring s (+ 1 i)))\n    \
    \            (solve (substring s (- i 1)))]))))\n", "  (cond\n    [(empty? s)\
    \ s]\n    [(member (first s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\\
    F #\\G #\\H #\\I #\\J \n                                          #\\K #\\L #\\\
    M #\\N #\\O #\\P #\\Q \n                                          #\\R #\\S #\\\
    T #\\U #\\V \n                                          #\\W #\\X #\\Y #\\Z)))\n\
    \     (string-append (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\\
    H #\\I #\\J \n                                          #\\K #\\L #\\M #\\N #\\\
    O #\\P #\\Q \n                                          #\\R #\\S #\\T #\\U #\\\
    V \n                                          #\\W #\\X #\\Y #\\Z)) \n       \
    \             (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\\
    I #\\J \n                                          #\\K #\\L #\\M #\\N #\\O #\\\
    P #\\Q \n                                          #\\R #\\S #\\T #\\U #\\V \n\
    \                                          #\\W #\\X #\\Y #\\Z)))]\n    [else\
    \ (cons (first s) (solve (rest s)))]))\n", "  (cond [(empty? s) s]\n        [(letter?\
    \ (first s)) (cons (first s) (solve (rest s)))]\n        [else (cons (first s)\
    \ (solve (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(character? (first\
    \ s)) (cond\n                             [(equal? (first s) #\\a) (cond\n   \
    \                                                   [(equal? (first s) #\\b) (cond\n\
    \                                                                            \
    \  [(equal? (first s) #\\c) (cond\n                                          \
    \                                                          [(equal? (first s)\
    \ #\\d) (cond\n                                                              \
    \                                                [(equal? (first s) #\\e) (cond\n\
    \                                                                            \
    \                                        [(equal? (first s) #\\f) (cond\n    \
    \                                                                            \
    \                                                [(equal? (first s) #\\g) (cond\n\
    \                                                                            \
    \                                                    [(equal? (first s) #\\h)\
    \ (cond\n                                                                    \
    \                                                            [(equal? (first s)\
    \ #\\i) (cond\n                                                              \
    \                                                                  [(equal? (first\
    \ s) #\\j) (cond\n                                                           \
    \                                                                     [(equal?\
    \ (first s) #\\k) (cond\n                                                    \
    \                                                                            [(equal?\
    \ (first s) #\\l) (cond\n                                                    \
    \                                                                            [(equal?\
    \ (first s) #\\m) (cond\n                                                    \
    \                                                                            [(equal?\
    \ (first s) #\\n) (cond\n                                                    \
    \                                                                            [(equal?\
    \ (first s) #\\o) (cond\n                                                    \
    \                                                                            [(equal?\
    \ (first s) #\\p) (cond\n                                                    \
    \                                                                            [(equal?\
    \ (first s) #\\q) (cond\n                                                    \
    \                                                                            [(equal?\
    \ (first s) #\\r) (cond\n                                                    \
    \                                                                            [(equal?\
    \ (first s) #\\s) (cond\n                                                    \
    \                                                                            [(equal?\
    \ (first s) #\\t) (cond\n                                                    \
    \                                                                            [(equal?\
    \ (first s) #\\v) (cond\n                                                    \
    \                                                                            [(equal?\
    \ (first s) #\\w) (cond\n                                                    \
    \                                                                            [(equal?\
    \ (first s) #\\x) (cond\n                                                    \
    \                                                                            [(equal?\
    \ (first s) #\\y) (cond\n                                                    \
    \                                                                            [(equal?\
    \ (first s) #\\z) (cond\n                                                    \
    \                                                                            [(equal?\
    \ (first s) #\\A) (cond\n                                                    \
    \                                                                            [(equal?\
    \ (first s) #\\B) (cond\n                                                    \
    \                                                                            [(equal?\
    \ (first s) #\\C) (cond\n                                                    \
    \                                                                            [(equal?\
    \ (first s) #\\D) (cond\n                                                    \
    \                                                                            [(equal?\
    \ (first s) #\\E) (cond\n                                                    \
    \                                                                            [(equal?\
    \ (first s) #\\F) (cond\n                                                    \
    \                                                                            [(equal?\
    \ (first s) #\\G) (cond\n                                                    \
    \                                                                            [(equal?\
    \ (first s) #\\H) (cond\n                                                    \
    \                                                                            [(equal?\
    \ (first s) #\\I) (cond\n                                                    \
    \                                                                            [(equal?\
    \ (first s) #\\J) (cond\n                                                    \
    \                                                                            [(equal?\
    \ (first s) #\\K) (cond\n                                                    \
    \                                                                            [(equal?\
    \ (first s) #\\L) (cond\n                                                    \
    \                                                                            [(equal?\
    \ (first s) #\\M) (cond\n                                                    \
    \                                                                            [(equal?\
    \ (first s) ", "  (cond\n    [(empty? s) s]\n    [(character? (first s)) (cons\
    \ (second s) (solve (rest s)))]\n    [else (cons (first s) (solve (rest s)))]))\n",
  "  (cond\n    [(empty? s) s]\n    [(letter? (first s)) (cond\n                 \
    \           [(equal? (first s) (first s)) (solve (rest s))]\n                \
    \            [(equal? (first s) (first s)) (solve (rest s))]\n               \
    \             [(equal? (first s) (first s)) (solve (rest s))]\n              \
    \              [(equal? (first s) (first s)) (solve (rest s))]\n             \
    \               [(equal? (first s) (first s)) (solve (rest s))]\n            \
    \                [(equal? (first s) (first s)) (solve (rest s))]\n           \
    \                 [(equal? (first s) (first s)) (solve (rest s))]\n          \
    \                  [(equal? (first s) (first s)) (solve (rest s))]\n         \
    \                   [(equal? (first s) (first s)) (solve (rest s))]\n        \
    \                    [(equal? (first s) (first s)) (solve (rest s))]\n       \
    \                     [(equal? (first s) (first s)) (solve (rest s))]\n      \
    \                      [(equal? (first s) (first s)) (solve (rest s))]\n     \
    \                       [(equal? (first s) (first s)) (solve (rest s))]\n    \
    \                        [(equal? (first s) (first s)) (solve (rest s))]\n   \
    \                         [(equal? (first s) (first s)) (solve (rest s))]\n  \
    \                          [(equal? (first s) (first s)) (solve (rest s))]\n \
    \                           [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                            [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                            [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                            [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                            [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                            [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                            [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                            [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                            [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                            [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                            [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                            [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                            [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                            [(equal? (first s) (first s)) (solve (rest s))]\n\
    \                            [(equal? (first s) (first s)) (solve (rest ", " \
    \ (cond\n    [(empty? s) s]\n    [(letter? (first s)) (let* ([s (first s)] [r\
    \ (reverse s)])]\n    [else (let* ([s (first s)] [r (reverse (first s))])]\n \
    \   [(empty? r) (let* ([s (first s)] [r (reverse s)])]\n    [else (cons (first\
    \ r) (solve (rest r)))])))\n</code>\n<|/ a dscore=0 |>\n<| a tags=racket,scheme\
    \ |>\n<code>", "  (cond\n    [(empty? s) s]\n    [(character? (first s)) (cond\n\
    \                            [(lower? (first s)) (cond\n                     \
    \                          [(upper? (first s)) (first s)\n                   \
    \                              (first s)\n                                   \
    \              (first s)\n                                                 (first\
    \ s)\n                                                 (first s)\n           \
    \                                      (first s)\n                           \
    \                      (first s)\n                                           \
    \      (first s)\n                                                 (first s)\n\
    \                                                 (first s)\n                \
    \                                 (first s)\n                                \
    \                 (first s)\n                                                \
    \ (first s)\n                                                 (first s)\n    \
    \                                             (first s)\n                    \
    \                             (first s)\n                                    \
    \             (first s)\n                                                 (first\
    \ s)\n                                                 (first s)\n           \
    \                                      (first s)\n                           \
    \                      (first s)\n                                           \
    \      (first s)\n                                                 (first s)\n\
    \                                                 (first s)\n                \
    \                                 (first s)\n                                \
    \                 (first s)\n                                                \
    \ (first s)\n                                                 (first s)\n    \
    \                                             (first s)\n                    \
    \                             (first s)\n                                    \
    \             (first s)\n                                                 (first\
    \ s)\n                                                 (first s)\n           \
    \                                      (first s)\n                           \
    \                      (first s)\n                                           \
    \      (first s)\n                                                 (first s)\n\
    \                                                 (first s)\n                \
    \                                 (first s)\n                                \
    \                 (first s)\n                                                \
    \ (first s)\n                                                 (first s)\n    \
    \                                             (first s)\n                    \
    \                             (first s)\n                                    \
    \             (first s)\n                                                 (first\
    \ s)\n                                                 (first s)\n           \
    \                                      (first s)\n                           \
    \                      (first s)\n                                           \
    \      (first s)\n                                                 (first s)\n\
    \                                                 (first s)\n                \
    \                                 (first s)\n                                \
    \                 (first s)\n                                                \
    \ (first s)\n                                                 (first s)\n    \
    \                                             (first s)\n                    \
    \                             (first s)\n                                    \
    \             (first s)\n                                                 (first\
    \ s)\n                                                 (first s)\n           \
    \                                      (first s)\n                           \
    \                      (first s)\n                                           \
    \      (first s)\n                                                 (first s)\n\
    \                                                 (first s)\n                \
    \                                 (first s)\n                                \
    \                 (first s)\n                                                \
    \ (first s)\n                                                 (first s)\n    \
    \                                             (first s)\n                    \
    \                             (first s)\n                                    \
    \             (first s)\n                                                 (first\
    \ s)\n                                                 (first s)\n           \
    \                                      (first s)\n                           \
    \                      (first s)\n                                           \
    \      (first s)\n                                                 (first s)\n\
    \                                                 (first s)\n                \
    \                                 (first s)\n                                \
    \                 (first s)\n                                                \
    \ (first s)\n                                                 (first s)\n    \
    \                                             (first s)\n                    \
    \                             (first s)\n                                    \
    \             (first s)\n                                                 (first\
    \ s)\n                                                 (first s)\n           \
    \                                      (first s)\n                           \
    \                      (first s)\n                                           \
    \      (first s)\n                                                 (first s)\n\
    \                                                 (first s)\n                \
    \                                 (first s)\n                                \
    \                 (first s)", "  (cond\n    [(empty? s) s]\n    [(character? (car\
    \ s)) (cond \n                            [(equal? (char-case (car s)) 'lower)\
    \ (cons (char-case (car s)) (reverse (solve (reverse (cdr s)))))]\n          \
    \                  [(equal? (char-case (car s)) 'upper) (cons (char-case (car\
    \ s)) (solve (reverse (cdr s))))]\n                            [(equal? (char-case\
    \ (car s)) 'other) (cons (char-case (car s)) (reverse (solve (reverse (cdr s)))))]\n\
    \                            [(equal? (char-case (car s)) 'none) (cons (char-case\
    \ (car s)) (reverse (solve (reverse (cdr s)))))]\n                           \
    \ [(equal? (char-case (car s)) 'space) (cons (char-case (car s)) (reverse (solve\
    \ (reverse (cdr s)))))]\n                            [(equal? (char-case (car\
    \ s)) 'number) (cons (char-case (car s)) (reverse (solve (reverse (cdr s)))))]\n\
    \                            [(equal? (char-case (car s)) 'symbol) (cons (char-case\
    \ (car s)) (reverse (solve (reverse (cdr s)))))]\n                           \
    \ [(equal? (char-case (car s)) 'string) (cons (char-case (car s)) (reverse (solve\
    \ (reverse (cdr s)))))]\n                            [(equal? (char-case (car\
    \ s)) 'boolean) (cons (char-case (car s)) (reverse (solve (reverse (cdr s)))))]\n\
    \                            [(equal? (char-case (car s)) 'function) (cons (char-case\
    \ (car s)) (reverse (solve (reverse (cdr s)))))]\n                           \
    \ [(equal? (char-case (car s)) 'procedure) (cons (char-case (car s)) (reverse\
    \ (solve (reverse (cdr s)))))]\n                            [(equal? (char-case\
    \ (car s)) 'symbol) (cons (char-case (car s)) (reverse (solve (reverse (cdr s)))))]\n\
    \                            [(equal? (char-case (car s)) 'number) (cons (char-case\
    \ (car s)) (reverse (solve (reverse (cdr s)))))]\n                           \
    \ [(equal? (char-case (car s)) 'string) (cons (char-case (car s)) (reverse (",
  "  (cond\n    [(empty? s) s]\n    [(member (first s) (map char->string '(#\\A #\\\
    B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                                 \
    \           #\\K #\\L #\\M #\\N #\\O #\\P #\\Q \n                            \
    \                #\\R #\\S #\\T #\\U #\\V \n                                 \
    \           #\\W #\\X #\\Y #\\Z)))\n     (reverse (map char->string '(#\\A #\\\
    B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                                 \
    \           #\\K #\\L #\\M #\\N #\\O #\\P #\\Q \n                            \
    \                #\\R #\\S #\\T #\\U #\\V \n                                 \
    \           #\\W #\\X #\\Y #\\Z)))]\n    [else (cons (first s) (solve (rest s)))]))\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nThanks for your answer. I am not allowed\
    \ to use any built-in functions. I should use only cons, car, cdr, map, filter,\
    \ fold, foldr, foldr1, and length. Can you please help me with that?\n<|/ c |>\n\
    <| c |>\nI added a solution without built-in functions. I hope it helps.\n<|/\
    \ c |>\n<| c |>\nThanks for your answer. I tried your solution and it works perfectly\
    \ fine. I am still trying to understand how it works. Can you please help me understand\
    \ how it works?\n<|/ c |>\n<| c |>\nI added a detailed explanation to the answer.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>", "  (cond\n    [(empty? s) s]\n    [(equal?\
    \ (first s) (first s)) (cons (first s) (solve (rest s)))]\n    [else (cons (first\
    \ s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(equal? (first\
    \ s) (first s)) (cond\n      [(char? (first s)) (cond\n        [(equal? (first\
    \ s) (first s)) (cond\n          [(char? (first s)) (cond\n            [(equal?\
    \ (first s) (first s)) (cond\n              [(char? (first s)) (cond\n       \
    \         [(equal? (first s) (first s)) (cond\n                  [(char? (first\
    \ s)) (cond\n                    [(equal? (first s) (first s)) (cond\n       \
    \               [(char? (first s)) (cond\n                        [(equal? (first\
    \ s) (first s)) (cond\n                          [(char? (first s)) (cond\n  \
    \                          [(equal? (first s) (first s)) (cond\n             \
    \                 [(char? (first s)) (cond\n                                [(equal?\
    \ (first s) (first s)) (cond\n                                  [(char? (first\
    \ s)) (cond\n                                    [(equal? (first s) (first s))\
    \ (cond\n                                      [(char? (first s)) (cond\n    \
    \                                    [(equal? (first s) (first s)) (cond\n   \
    \                                       [(char? (first s)) (cond\n           \
    \                                 [(equal? (first s) (first s)) (cond\n      \
    \                                        [(char? (first s)) (cond\n          \
    \                                      [(equal? (first s) (first s)) (cond\n \
    \                                                 [(char? (first s)) (cond\n \
    \                                                   [(equal? (first s) (first\
    \ s)) (cond\n                                                      [(char? (first\
    \ s)) (cond\n                                                        [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \           [(char? (first s)) (cond\n                                       \
    \                     [(equal? (first s) (first s)) (cond\n                  \
    \                                            [(char? (first s)) (cond\n      \
    \                                                          [(equal? (first s)\
    \ (first s)) (cond\n                                                         \
    \         [(char? (first s)) (cond\n                                         \
    \                           [(equal? (first s) (first s)) (cond\n            \
    \                                                          [(char? (first s))\
    \ (cond\n                                                                    \
    \    [(equal? (first s) (first s)) (cond\n                                   \
    \                                       [(char? (first s)) (cond\n           \
    \                                                                 [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                        [(char? (first s)) (cond\n                          \
    \                                                      [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                  [(char? (first s)) (cond\n                                \
    \                                                    [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                      [(char? (first s)) (cond\n                            \
    \                                                            [(equal? (first s)\
    \ (first s)) (cond\n                                                         \
    \                                 [(char? (first s)) (cond\n                 \
    \                                                                           [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                               [(char? (first s)) (cond\n   \
    \                                                                            \
    \                 [(equal? (first s) ", "  (cond\n    [(empty? s) s]\n    [(character?\
    \ (first s)) (cons (first s) (solve (rest s)))]\n    [else (cons (first s) (solve\
    \ (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(character? (first s))\
    \ (cond\n                             [(equal? (first s) (first s)) (cond\n  \
    \                                                        [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \           [(equal? (first s) (first s)) (cond\n                            \
    \                                                                            [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                        [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \             [(equal? (first s) (first s)) (cond\n                          \
    \                                                                            \
    \                                                                    [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \                                                                [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                                            \
    \                                                                        [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \                                                                            \
    \                                             [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                          [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \               [(equal? (first s) (first s)) (cond\n                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                          [(equal? (first s) (first s)) (cond\n             \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                         [(equal? (first s) (first s)) (cond\n              \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                        [(equal? (first s) (first s)) (cond\n               \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                       [(equal? (first s) (first s)) (cond\n                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                      [(equal? (first s) (first s)) (cond\n                 \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \         [(equal? (first s) (first s)) (cond\n                              \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                        [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                       [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                      [(equal? (first s) (first s)) (cond\n \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                         [(equal? (first s) (first s)) (cond\n              \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \            [(equal? (first s) (first s)) (cond\n                           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                           [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                       [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                      [(equal? (first s) (first s)) (cond\n \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                         [(equal? (first s) (first s)) (cond\n              \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \            [(equal? (first s) (first s)) (cond\n                           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                           [(equal",
  "  (cond [(empty? s) s]\n        [(character? (first s)) (cons (char->upper (first\
    \ s)) (solve (rest s)))]\n        [else (cons (first s) (solve (rest s)))]))\n",
  "  (cond\n    [(empty? s) s]\n    [(letter? (first s)) (cond\n                 \
    \           [(upper? (first s)) (cond\n                                      \
    \          [(lower? (first s)) (cond\n                                       \
    \                         [(empty? (rest s)) (cons (first s) (solve (rest s)))]\n\
    \                                                                [(not (empty?\
    \ (rest s))) (cons (first s) (solve (rest s)))]\n                            \
    \                                    [(not (lower? (first s))) (cons (first s)\
    \ (solve (rest s)))]\n                                                       \
    \         [(not (upper? (first s))) (cons (first s) (solve (rest s)))]\n     \
    \                                                           [(not (letter? (first\
    \ s))) (cons (first s) (solve (rest s)))]\n                                  \
    \                              [(not (symbol? (first s))) (cons (first s) (solve\
    \ (rest s)))]\n                                                              \
    \  [(not (integer? (first s))) (cons (first s) (solve (rest s)))]\n          \
    \                                                      [(not (boolean? (first\
    \ s))) (cons (first s) (solve (rest s)))]\n                                  \
    \                              [(not (pair? (first s))) (cons (first s) (solve\
    \ (rest s)))]\n                                                              \
    \  [(not (list? (first s))) (cons (first s) (solve (rest s)))]\n             \
    \                                                   [(not (set? (first s))) (cons\
    \ (first s) (solve (rest s)))]\n                                             \
    \                   [(not (hash? (first s))) (cons (first s) (solve (rest s)))]\n\
    \                                                                [(not (pair?\
    \ (first s))) (cons (first s) (solve (rest s)))]\n                           \
    \                                     [(not (list? (first s))) (cons (first s)\
    \ (solve (rest s)))]\n                                                       \
    \         [(not (set? (first s))) (cons (first s) (solve (rest s)))]\n       \
    \                                                         [(not (hash? (first\
    \ s))) (cons (first s) (solve (rest s)))]\n                                  \
    \                              [(not (pair? (first s))) (cons (first s) (solve\
    \ (rest s)))]\n                                                              \
    \  [(not (list? (first s))) (cons (first s) (solve (rest s)))]\n             \
    \                                                   [(not (set? (first s))) (cons\
    \ (first s) (solve (rest s)))]\n                                             \
    \                   [(not (hash? (first s))) (cons (first s) (solve (rest s)))]\n\
    \                                                                [(not (pair?\
    \ (first s))) (cons (first s) (solve (rest s)))]\n                           \
    \                                     [(not (list? (first s))) (cons (first s)\
    \ (solve (rest s)))]\n                                                       \
    \         [(not (set? (first s))) (cons (first s) (solve (rest s)))]\n       \
    \                                                         [(not (hash? (first\
    \ s))) (cons (first s) (solve (rest ", "  (cond\n    [(empty? s) s]\n    [(letter?\
    \ (first s)) (cond\n                            [(upper? (first s)) (cond\n  \
    \                                             [(lower? (first s)) (cons (first\
    \ s) (solve (rest s)))]\n                                               [else\
    \ (cons (first s) (solve (rest s)))])]\n                            [else (cons\
    \ (first s) (solve (rest s)))])]\n    [else (cons (first s) (solve (rest s)))]))\n",
  "  (cond\n    [(empty? s) s]\n    [(member (first s) (map char->string '(#\\A #\\\
    B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                                 \
    \         #\\K #\\L #\\M #\\N #\\O #\\P #\\Q \n                              \
    \            #\\R #\\S #\\T #\\U #\\V \n                                     \
    \     #\\W #\\X #\\Y #\\Z)))\n     (reverse (map char->string '(#\\A #\\B #\\\
    C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                                   #\\\
    K #\\L #\\M #\\N #\\O #\\P #\\Q \n                                   #\\R #\\\
    S #\\T #\\U #\\V \n                                   #\\W #\\X #\\Y #\\Z)))]\n\
    \    [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s)\
    \ s]\n    [(character? (car s)) (cons (char->upper (car s)) (reverse (solve (cdr\
    \ s))))]\n    [else (cons (char->lower (car s)) (reverse (solve (cdr s))))]\n\
    \  )\n)\n", "  (cond\n    [(empty? s) s]\n    [(member (first s) '(#\\A #\\B #\\\
    C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                     #\\K #\\L #\\M #\\\
    N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                     #\\W #\\X #\\\
    Y #\\Z)) (cons (char->upper (first s)) \n                                    \
    \  (solve (rest s)))]\n    [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n\
    \    [(empty? s) s]\n    [(equal? (first s) (first s)) (cons (first s) (solve\
    \ (rest s)))]\n    [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n \
    \   [(empty? s) s]\n    [(equal? (first s) (first s)) (cons (first s) (solve (rest\
    \ s)))]\n    [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty?\
    \ s) s]\n    [(character? (car s)) (cond\n                            [(lower?\
    \ (car s)) (cond\n                                               [(upper? (car\
    \ s)) (cons (upper (car s)) (cdr s))]\n                                      \
    \         [else (cons (lower (car s)) (cdr s))])]\n                          \
    \  [else (cons (car s) (solve (cdr s)))])]\n    [else (cons (car s) (solve (cdr\
    \ s)))]))\n</code>\n<|/ a dscore=0 |>\n<| a tags=scheme,racket,recursion |>\n\
    <code>", "  (cond\n    [(empty? s) s]\n    [(member (first s) (map char->string\
    \ '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                     \
    \                  #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\\
    V \n                                       #\\W #\\X #\\Y #\\Z)))\n     (reverse\
    \ (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n   \
    \                                #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S\
    \ #\\T #\\U #\\V \n                                   #\\W #\\X #\\Y #\\Z)))]\n\
    \    [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s)\
    \ s]\n    [(member (first s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\\
    F #\\G #\\H #\\I #\\J \n                                          #\\K #\\L #\\\
    M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                            \
    \              #\\W #\\X #\\Y #\\Z)))\n     (string-append (map char->string '(#\\\
    A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                            \
    \              #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n\
    \                                          #\\W #\\X #\\Y #\\Z)) (first s))]\n\
    \    [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s)\
    \ s]\n    [(character? (car s)) (cons (char->upper (car s)) (reverse (solve (cdr\
    \ s))))]\n    [else (cons (char->lower (car s)) (reverse (solve (cdr s))))]\n\
    \  )\n)\n", "  (cond\n    [(empty? s) s]\n    [(equal? (first s) (first s)) (second\
    \ s)]\n    [else (cons (first s)\n                (solve (substring s (+ 1 i)))\n\
    \                (solve (substring s (+ i 1)))]))))\n", "  (cond\n    [(empty?\
    \ s) s]\n    [(character? (car s)) (cons (char->upper (car s)) (reverse (solve\
    \ (cdr s))))]\n    [else (cons (car s) (reverse (solve (cdr s))))]\n  )\n)\n",
  "  (cond\n    [(empty? s) s]\n    [(member (first s) (map char->string '(#\\A #\\\
    B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                                 \
    \         #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n     \
    \                                     #\\W #\\X #\\Y #\\Z)))\n     (reverse (map\
    \ char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n        \
    \                            #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\\
    T #\\U #\\V \n                                    #\\W #\\X #\\Y #\\Z)))]\n  \
    \  [else (cons (first s) (solve (rest s)))]))\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a dscore=1 |>\n<code>", "  (cond\n    [(empty? s) s]\n    [(equal? (first s)\
    \ (first s)) (second s)]\n    [else (cons (first s)\n                (solve (substring\
    \ s (+ 1 i)))\n                (solve (substring s (- 1 i)))\n               \
    \ (solve (substring s (+ 1 i)))\n                (solve (substring s (- 1 i)))\n\
    \                (solve (substring s (+ 1 i)))\n                (solve (substring\
    \ s (- 1 i))))]))\n", "  (cond\n    [(empty? s) s]\n    [(character? (car s))\
    \ (cond\n                            [(equal? (char-case (car s)) 'upper) (cons\
    \ (char-case (car s)) (reverse (substring (string (car s) 0 1) (+ 1 length (string\
    \ (car s)))))]\n                            [(equal? (char-case (car s)) 'lower)\
    \ (cons (char-case (car s)) (reverse (substring (string (car s) 0 1) (+ 1 length\
    \ (string (car s)))))]\n                            [(equal? (char-case (car s))\
    \ 'other) (cons (char-case (car s)) (reverse (substring (string (car s) 0 1) (+\
    \ 1 length (string (car s)))))])]\n                            [else (cons (char-case\
    \ (car s)) (reverse (substring (string (car s) 0 1) (+ 1 length (string (car s))))))])]\n\
    \    [else (cons (char-case (car s)) (reverse (substring (string (car s) 0 1)\
    \ (+ 1 length (string (car s))))))]))\n</code>\n<|/ a tags=scheme,racket,string\
    \ |>\n<| a tags=scheme,racket,string |>\n<code>", "  (cond\n    [(empty? s) s]\n\
    \    [(letter? (first s)) (cons (upper-case (first s)) (solve (rest s)))]\n  \
    \  [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n\
    \    [(member (first s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\\
    G #\\H #\\I #\\J \n                                          #\\K #\\L #\\M #\\\
    N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                                 \
    \         #\\W #\\X #\\Y #\\Z)))\n     (cond\n       [(empty? (rest s)) s]\n \
    \      [(char->boolean (first s)) (cons (string->char (string->char (first s)))\
    \ \n                                      (solve (rest s)))]\n       [else (cons\
    \ (string->char (first s)) (solve (rest s)))]))]\n    [else (cons (string->char\
    \ (first s)) (solve (rest s)))]))\n</code>\n<|/ a tags=racket,scheme |>\n<| a\
    \ |>\n<code>", "  (cond\n    [(empty? s) s]\n    [(equal? (first s) (first s))\
    \ (second s)]\n    [else (cons (first s) (solve (second s)))]))\n", "  (cond\n\
    \    [(empty? s) s]\n    [(character? (car s)) (cond \n                      \
    \      [(char-lower? (car s)) (cons (char-upper? (car s)) (cdr s))]\n        \
    \                    [(char-upper? (car s)) (cons (char-lower? (car s)) (cdr s))]\n\
    \                            [(char-lower? (car s)) (cons (car s) (cdr s))])]\n\
    \    [else (cons (car s) (solve (cdr s)))]))\n</code>\n<|/ a tags=racket,scheme\
    \ |>\n<| a dscore=0 |>\n<code>", "  (cond\n    [(empty? s) s]\n    [(member (first\
    \ s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n\
    \                                           #\\K #\\L #\\M #\\N #\\O #\\P #\\\
    Q #\\R #\\S #\\T #\\U #\\V \n                                           #\\W #\\\
    X #\\Y #\\Z)))\n     (reverse (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\\
    F #\\G #\\H #\\I #\\J \n                                       #\\K #\\L #\\M\
    \ #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                            \
    \           #\\W #\\X #\\Y #\\Z)))]\n    [else (cons (first s) (solve (rest s)))]))\n",
  "  (cond\n    [(empty? s) s]\n    [(letter? (first s)) (cond\n                 \
    \           [(equal? (first s) (second s)) (cond\n                           \
    \                                 [(equal? (first s) (second (first s))) (cond\n\
    \                                                                            \
    \             [(equal? (first s) (second (second s))) (cond\n                \
    \                                                                            \
    \                              [(equal? (first s) (second (third s))) (cond\n\
    \                                                                            \
    \                                                               [(equal? (first\
    \ s) (second (fourth s))) (cond\n                                            \
    \                                                                            \
    \                                     [(equal? (first s) (second (fifth s))) (cond\n\
    \                                                                            \
    \                                                                            \
    \                   [(equal? (first s) (second (sixth s))) (cond\n           \
    \                                                                            \
    \                                                                            \
    \          [(equal? (first s) (second (seventh s))) (cond\n                  \
    \                                                                            \
    \                                                                            \
    \     [(equal? (first s) (second (eighth s))) (cond\n                        \
    \                                                                            \
    \                                                                            \
    \ [(equal? (first s) (second (ninth s))) (cond\n                             \
    \                                                                            \
    \                                                                          [(equal?\
    \ (first s) (second (tenth s))) (cond\n                                      \
    \                                                                            \
    \                                                                   [(equal? (first\
    \ s) (second (eleventh s))) (cond\n                                          \
    \                                                                            \
    \                                                               [(equal? (first\
    \ s) (second (twelfth s))) (cond\n                                           \
    \                                                                            \
    \                                                              [(equal? (first\
    \ s) (second (thirteenth s))) (cond\n                                        \
    \                                                                            \
    \                                                                 [(equal? (first\
    \ s) (second (fourteenth s))) (cond\n                                        \
    \                                                                            \
    \                                                                 [(equal? (first\
    \ s) (second (fifteenth s))) (cond\n                                         \
    \                                                                            \
    \                                                                [(equal? (first\
    \ s) (second (sixteenth s))) (cond\n                                         \
    \                                                                            \
    \                                                                [(equal? (first\
    \ s) (second (seventeenth s))) (cond\n                                       \
    \                                                                            \
    \                                                                  [(equal? (first\
    \ s) (second (eighteenth s))) (cond\n                                        \
    \                                                                            \
    \                                                                 [(equal? (first\
    \ s) (second (nineteenth s))) (cond\n                                        \
    \                                                                            \
    \                                                                 [(equal? (first\
    \ s) (second (twentieth s))) (cond\n                                         \
    \                                                                            \
    \                                                                [(equal? (first\
    \ s) (second (thirtieth s))) (cond\n                                         \
    \                                                                            \
    \                                                                [(equal? (first\
    \ s) (second (fourtieth s))) (cond\n                                         \
    \                                                                            \
    \                                                                [(equal? (first\
    \ s) (second (fiftieth s))) (cond\n                                          \
    \                                                                            \
    \                                                               [(equal? (first\
    \ s) (second (sixtieth s))) (cond\n                                          \
    \                                                                            \
    \                                                               [(equal? (first\
    \ s) (second (seventieth s))) (cond\n                                        \
    \                                                                            \
    \                                                                 [(equal? (first\
    \ s) (second (eightieth s))) (cond\n                                         \
    \                                                                            \
    \                                                                [(equal? (first\
    \ s) (second (ninetieth s))) (cond\n                                         \
    \                                                                            \
    \                                                                [(equal? (",
  "  (cond\n    [(empty? s) s]\n    [(character? (first s)) (cond\n              \
    \              [(equal? (first s) (first s)) (cond\n                         \
    \                               [(equal? (first s) (first s)) (cond\n        \
    \                                                                [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                  [(equal? (first s) (first s))\
    \ (cond\n                                                                    \
    \                                                    [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                        [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                        [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                        [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                        [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                        [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                        [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                        [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                        [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                        [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                        [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                        [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                        [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                        [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                        [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                        [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                        [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                        [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                        [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                        [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                        [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                        [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                        [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                        [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                        [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                        [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                        [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                        [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                        [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                        [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                        [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                        [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                        [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                        [(equal? (first s) (first\
    \ s)) (cond\n                                                                ",
  "  (cond\n    [(empty? s) s]\n    [(character? (first s)) (cons (first s) (solve\
    \ (rest s)))]\n    [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n \
    \   [(empty? s) s]\n    [(letter? (first s)) (cond\n                         \
    \   [(equal? (first s) (second s)) (cond\n                                   \
    \                         [(equal? (first s) (second s)) (cond\n             \
    \                                                                         [(equal?\
    \ (first s) (second s)) (cond\n                                              \
    \                                                                  [(equal? (first\
    \ s) (second s)) (cond\n                                                     \
    \                                                                           [(equal?\
    \ (first s) (second s)) (cond\n                                              \
    \                                                                            \
    \                                [(equal? (first s) (second s)) (cond\n      \
    \                                                                            \
    \                                                                            \
    \  [(equal? (first s) (second s)) (cond\n                                    \
    \                                                                            \
    \                                                                            \
    \    [(equal? (first s) (second s)) (cond\n                                  \
    \                                                                            \
    \                                                                            \
    \                                [(equal? (first s) (second s)) (cond\n      \
    \                                                                            \
    \                                                                            \
    \                                                              [(equal? (first\
    \ s) (second s)) (cond\n                                                     \
    \                                                                            \
    \                                                                            \
    \                 [(equal? (first s) (second s)) (cond\n                     \
    \                                                                            \
    \                                                                            \
    \                                                   [(equal? (first s) (second\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \                                                                            \
    \          [(equal? (first s) (second s)) (cond\n                            \
    \                                                                            \
    \                                                                            \
    \                                                [(equal? (first s) (second s))\
    \ (cond\n                                                                    \
    \                                                                            \
    \                                                                            \
    \          [(equal? (first s) (second s)) (cond\n                            \
    \                                                                            \
    \                                                                            \
    \                                                    [(equal? (first s) (second\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \                                                                            \
    \                  [(equal? (first s) (second s)) (cond\n                    \
    \                                                                            \
    \                                                                            \
    \                                                                [(equal? (first\
    \ s) (second s)) (cond\n                                                     \
    \                                                                            \
    \                                                                            \
    \                                 [(equal? (first s) (second s)) (cond\n     \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \       [(equal? (first s) (second s)) (cond\n                               \
    \                                                                            \
    \                                                                            \
    \                                                           [(equal? (first s)\
    \ (second s)) (cond\n                                                        \
    \                                                                            \
    \                                                                            \
    \                                    [(equal? (first s) (second s)) (cond\n  \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                [(equal? (first s) (second s)) (cond\n                      \
    \                                                                            \
    \                                                                            \
    \                                                                          [(equal?\
    \ (first s) (second s)) (cond\n                                              \
    \                                                                            \
    \                                                                            \
    \                                                    [(equal? (first s) (second\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \                                                                            \
    \                                    [(equal? (first s) (second s)) (cond\n  \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                      [(equal? (first s) (second s)) (cond\n                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \        [(equal? (first s) (second s)) (cond\n                              \
    \                                                                            \
    \                                                                            \
    \                                                                      [(equal?\
    \ (first s) (second s)) (cond\n                                              \
    \                                                                            \
    \                                                                            \
    \                                                      [(equal? (first s) (second\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \                                                                            \
    \                                    [(equal? (first s) (second s)) (cond\n  \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                      [(equal? (first s) (second s)) (cond\n                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \        [(equal? (first s) (second s)) (cond\n                              \
    \                                                                            \
    \                                                                            \
    \                                                                      [(equal?\
    \ (first s) (second s)) (", "  (cond\n    [(empty? s) s]\n    [(character? (first\
    \ s)) (cond\n                             [(equal? (first s) (first s)) (cond\n\
    \                                                            [(equal? (first s)\
    \ (first s)) (cond\n                                                         \
    \                  [(equal? (first s) (first s)) (cond\n                     \
    \                                                                            \
    \         [(equal? (first s) (first s)) (cond\n                              \
    \                                                                            \
    \                 [(equal? (first s) (first s)) (cond\n                      \
    \                                                                            \
    \                          [(equal? (first s) (first s)) (cond\n             \
    \                                                                            \
    \                                    [(equal? (first s) (first s)) (cond\n   \
    \                                                                            \
    \                                               [(equal? (first s) (first s))\
    \ (cond\n                                                                    \
    \                                                            [(equal? (first s)\
    \ (first s)) (cond\n                                                         \
    \                                                                         [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \         [(equal? (first s) (first s)) (cond\n                              \
    \                                                                            \
    \                            [(equal? (first s) (first s)) (cond\n           \
    \                                                                            \
    \                                                [(equal? (first s) (first s))\
    \ (cond\n                                                                    \
    \                                                                    [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \              [(equal? (first s) (first s)) (cond\n                         \
    \                                                                            \
    \                                     [(equal? (first s) (first s)) (cond\n  \
    \                                                                            \
    \                                                             [else (cons (first\
    \ s) (solve (rest s
  "  (cond\n    [(empty? s) s]\n    [(equal? (first s) (first s)) (cons (first s)\
    \ (solve (rest s)))]\n    [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n\
    \    [(empty? s) s]\n    [(equal? (first s) (first s)) (second s)]\n    [else\
    \ (cons (first s)\n                (solve (second s)))]))\n", "  (cond\n    [(empty?\
    \ s) s]\n    [(character? (car s)) (cons (char->upper (car s)) (reverse (solve\
    \ (rest s))))]\n    [else (cons (car s) (solve (rest s)))]))\n", "  (cond [(empty?\
    \ s) s]\n        [(equal? (first s) (first s)) (second s)]\n        [(equal? (first\
    \ s) (first s)) (second (second s))]\n        [else (cons (first s)\n        \
    \            (solve (second (first s))))]))\n", "  (cond\n    [(empty? s) s]\n\
    \    [(character? (first s)) (cons (first s) (solve (rest s)))]\n    [else (cons\
    \ (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(member\
    \ (first s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\\
    J \n                                            #\\K #\\L #\\M #\\N #\\O #\\P\
    \ #\\Q \n                                            #\\R #\\S #\\T #\\U #\\V\
    \ \n                                            #\\W #\\X #\\Y #\\Z)))\n     (string-append\
    \ (map string->char (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\\
    H #\\I #\\J \n                                            #\\K #\\L #\\M #\\N\
    \ #\\O #\\P #\\Q \n                                            #\\R #\\S #\\T\
    \ #\\U #\\V \n                                            #\\W #\\X #\\Y #\\Z))\n\
    \                    (map string->char (map char->string '(#\\a #\\b #\\c #\\\
    d #\\e #\\f #\\g #\\h #\\i #\\j \n                                           \
    \ #\\k #\\l #\\m #\\n #\\o #\\p #\\q \n                                      \
    \      #\\r #\\s #\\t #\\u #\\v \n                                           \
    \ #\\w #\\x #\\y #\\z)))]\n    [else (cons (first s)\n               (solve (rest\
    \ s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(equal? (first s) (first s))\
    \ (second s)]\n    [else (cons (first s) (solve (substring s (+ 1 i)))) ]\n  )\n\
    )\n", "  (cond\n    [(empty? s) s]\n    [(character? (first s)) (cond\n      \
    \                      [(lower? (first s)) (cond\n                           \
    \                    [(upper? (first s)) (first s)\n                         \
    \                        (first s)\n                                         \
    \        (first s)\n                                                 (first s)\n\
    \                                                 (first s)\n                \
    \                                 (first s)\n                                \
    \                 (first s)\n                                                \
    \ (first s)\n                                                 (first s)\n    \
    \                                             (first s)\n                    \
    \                             (first s)\n                                    \
    \             (first s)\n                                                 (first\
    \ s)\n                                                 (first s)\n           \
    \                                      (first s)\n                           \
    \                      (first s)\n                                           \
    \      (first s)\n                                                 (first s)\n\
    \                                                 (first s)\n                \
    \                                 (first s)\n                                \
    \                 (first s)\n                                                \
    \ (first s)\n                                                 (first s)\n    \
    \                                             (first s)\n                    \
    \                             (first s)\n                                    \
    \             (first s)\n                                                 (first\
    \ s)\n                                                 (first s)\n           \
    \                                      (first s)\n                           \
    \                      (first s)\n                                           \
    \      (first s)\n                                                 (first s)\n\
    \                                                 (first s)\n                \
    \                                 (first s)\n                                \
    \                 (first s)\n                                                \
    \ (first s)\n                                                 (first s)\n    \
    \                                             (first s)\n                    \
    \                             (first s)\n                                    \
    \             (first s)\n                                                 (first\
    \ s)\n                                                 (first s)\n           \
    \                                      (first s)\n                           \
    \                      (first s)\n                                           \
    \      (first s)\n                                                 (first s)\n\
    \                                                 (first s)\n                \
    \                                 (first s)\n                                \
    \                 (first s)\n                                                \
    \ (first s)\n                                                 (first s)\n    \
    \                                             (first s)\n                    \
    \                             (first s)\n                                    \
    \             (first s)\n                                                 (first\
    \ s)\n                                                 (first s)\n           \
    \                                      (first s)\n                           \
    \                      (first s)\n                                           \
    \      (first s)\n                                                 (first s)\n\
    \                                                 (first s)\n                \
    \                                 (first s)\n                                \
    \                 (first s)\n                                                \
    \ (first s)\n                                                 (first s)\n    \
    \                                             (first s)\n                    \
    \                             (first s)\n                                    \
    \             (first s)\n                                                 (first\
    \ s)\n                                                 (first s)\n           \
    \                                      (first s)\n                           \
    \                      (first s)\n                                           \
    \      (first s)\n                                                 (first s)\n\
    \                                                 (first s)\n                \
    \                                 (first s)\n                                \
    \                 (first s)\n                                                \
    \ (first s)\n                                                 (first s)\n    \
    \                                             (first s)\n                    \
    \                             (first s)\n                                    \
    \             (first s)\n                                                 (first\
    \ s)\n                                                 (first s)\n           \
    \                                      (first s)\n                           \
    \                      (first s)\n                                           \
    \      (first s)\n                                                 (first s)\n\
    \                                                 (first s)\n                \
    \                                 (first s)\n                                \
    \                 (first s)\n                                                \
    \ (first s)\n                                                 (first s)\n    \
    \                                             (first s)\n                    \
    \                             (first s)\n                                    \
    \             (first s)", "  (cond\n    [(empty? s) s]\n    [(equal? (first s)\
    \ (first s)) (cons (first s) (solve (rest s)))]\n    [else (cons (first s) (solve\
    \ (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(member (first s) (map\
    \ char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n        \
    \                                  #\\K #\\L #\\M #\\N #\\O #\\P #\\Q \n     \
    \                                     #\\R #\\S #\\T #\\U #\\V \n            \
    \                              #\\W #\\X #\\Y #\\Z))) \n     (reverse (map char->string\
    \ '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                     \
    \                     #\\K #\\L #\\M #\\N #\\O #\\P #\\Q \n                  \
    \                        #\\R #\\S #\\T #\\U #\\V \n                         \
    \                 #\\W #\\X #\\Y #\\Z)))]\n    [else (cons (first s) (solve (rest\
    \ s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(member (first s) (map char->string\
    \ '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                     \
    \                     #\\K #\\L #\\M #\\N #\\O #\\P #\\Q \n                  \
    \                        #\\R #\\S #\\T #\\U #\\V \n                         \
    \                 #\\W #\\X #\\Y #\\Z))) \n     (reverse (map char->string '(#\\\
    A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                            \
    \              #\\K #\\L #\\M #\\N #\\O #\\P #\\Q \n                         \
    \                 #\\R #\\S #\\T #\\U #\\V \n                                \
    \          #\\W #\\X #\\Y #\\Z)))]\n    [else (cons (first s) (solve (rest s)))]))\n",
  "  (cond\n    [(empty? s) s]\n    [(letter? (first s)) (cond\n                 \
    \           [(upper? (first s)) (cons (first s) (solve (rest s)))]\n         \
    \                   [(lower? (first s)) (cons (first s) (solve (rest s)))]\n \
    \                           [(not (letter? (first s))) (cons (first s) (solve\
    \ (rest s)))]\n                            [(not (upper? (first s))) (cons (first\
    \ s) (solve (rest s)))]\n                            [(not (lower? (first s)))\
    \ (cons (first s) (solve (rest s)))]\n                            [(not (symbol?\
    \ (first s))) (cons (first s) (solve (rest s)))]\n                           \
    \ [(not (integer? (first s))) (cons (first s) (solve (rest s)))]\n           \
    \                 [(not (boolean? (first s))) (cons (first s) (solve (rest s)))]\n\
    \                            [(not (procedure? (first s))) (cons (first s) (solve\
    \ (rest s)))]\n                            [(not (pair? (first s))) (cons (first\
    \ s) (solve (rest s)))]\n                            [(not (list? (first s)))\
    \ (cons (first s) (solve (rest s)))]\n                            [(not (set?\
    \ (first s))) (cons (first s) (solve (rest s)))]\n                           \
    \ [(not (hash? (first s))) (cons (first s) (solve (rest s)))]\n              \
    \              [(not (set? (first s))) (cons (first s) (solve (rest s)))]\n  \
    \                          [(not (vector? (first s))) (cons (first s) (solve (rest\
    \ s)))]\n                            [(not (vector? (first s))) (cons (first s)\
    \ (solve (rest s)))]\n                            [(not (hash? (first s))) (cons\
    \ (first s) (solve (rest s)))]\n                            [(not (list? (first\
    \ s))) (cons (first s) (solve (rest s)))]\n                            [(not (pair?\
    \ (first s))) (cons (first s) (solve (rest s)))]\n                           \
    \ [(not (procedure? (first s))) (cons (first s) (solve (rest s)))]\n         \
    \                   [(not (integer? (first s))) (cons (first s) (solve (rest s)))]\n\
    \                            [(not (boolean? (first s))) (cons (first s) (solve\
    \ (rest s)))]\n                            [(not (symbol? (first s))) (cons (first\
    \ s) (solve (rest s)))]\n                            [(not (pair? (first s)))\
    \ (cons (first s) (solve (rest s)))]\n                            [(not (list?\
    \ (first s))) (cons (first s) (solve ", "  (cond\n    [(empty? s) s]\n    [(equal?\
    \ (first s) (first s)) (second s)]\n    [else (cons (first s) (solve (substring\
    \ s 1 (- (length s) 1)))) ]))\n", "  (cond\n    [(empty? s) s]\n    [(character?\
    \ (car s)) (cond\n                            [(equal? (char-code (car s)) 97)\
    \ (cond\n                                                         [(equal? (char-code\
    \ (car s)) 65) (cons (char-code (car s)) (solve (reverse (substring s (+ 0 (length\
    \ s)))))]\n                                                         [(equal? (char-code\
    \ (car s)) 97) (cons (char-code (car s)) (solve (reverse (substring s (+ 0 (length\
    \ s)))))]\n                                                         [(equal? (char-code\
    \ (car s)) 65) (cons (char-code (car s)) (solve (reverse (substring s (+ 0 (length\
    \ s)))))]\n                                                         [(equal? (char-code\
    \ (car s)) 97) (cons (char-code (car s)) (solve (reverse (substring s (+ 0 (length\
    \ s)))))]\n                                                         [(equal? (char-code\
    \ (car s)) 65) (cons (char-code (car s)) (solve (reverse (substring s (+ 0 (length\
    \ s)))))]\n                                                         [(equal? (char-code\
    \ (car s)) 97) (cons (char-code (car s)) (solve (reverse (substring s (+ 0 (length\
    \ s)))))]\n                                                         [(equal? (char-code\
    \ (car s)) 65) (cons (char-code (car s)) (solve (reverse (substring s (+ 0 (length\
    \ s)))))]\n                                                         [(equal? (char-code\
    \ (car s)) 97) (cons (char-code (car s)) (solve (reverse (substring s (+ 0 (length\
    \ s)))))]\n                                                         [(equal? (char-code\
    \ (car s)) 65) (cons (char-code (car s)) (solve (reverse (substring s (+ 0 (length\
    \ s)))))]\n                                                         [(equal? (char-code\
    \ (car s)) 97) (cons (char-code (car s)) (solve (reverse (substring s (+ 0 (length\
    \ s)))))]\n                                                         [(equal? (char-code\
    \ (car s)) 65) (cons (char-code (car s)) (solve (reverse (substring s (+ 0 (length\
    \ s)))))]\n                                                         [(equal? (char-code\
    \ (car s)) 97) (cons (char-code (car s)) (solve (reverse (substring s (+ 0 (length\
    \ s)))))]\n                                                         [(equal? (char-code\
    \ (car s)) 65) (cons (char-code (car s)) (solve (reverse (substring s (+ 0 (length\
    \ s)))))]\n                                                         [(equal? (char-code\
    \ (car ", "  (cond\n    [(empty? s) s]\n    [(equal? (first s) (first s)) (cons\
    \ (first s) (solve (rest s)))]\n    [else (cons (first s) (solve (rest s)))]))\n",
  "  (cond\n    [(empty? s) s]\n    [(equal? (first s) (first s)) (cons (first s)\
    \ (solve (rest s)))]\n    [else (cons (first s) (solve (rest s)))]))\n", "  (cond\
    \ [(empty? s) s]\n        [(character? (car s)) (cons (char->upper (car s)) (reverse\
    \ (solve (cdr s))))]\n        [else (cons (char->lower (car s)) (reverse (solve\
    \ (cdr s))))]))\n", "  (cond [(empty? s) s]\n        [(character? (car s)) (cons\
    \ (char->upper (car s)) \n                                (solve (char->lower\
    \ (car s))))]\n        [else (cons (car s) (solve (cdr s)))]))\n", "  (cond\n\
    \    [(empty? s) s]\n    [(member (first s) (map char->string '(#\\A #\\B #\\\
    C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                                      \
    \      #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n        \
    \                                    #\\W #\\X #\\Y #\\Z)))\n     (string-append\
    \ (map (lambda (c) (if (char->string c) \n                                   \
    \    (char->string (char->string c) \n                                       \
    \ (char->string (char->string c) \n                                          (char->string\
    \ (char->string c) \n                                            (char->string\
    \ (char->string c) \n                                              (char->string\
    \ (char->string c) \n                                                (char->string\
    \ (char->string c) \n                                                  (char->string\
    \ (char->string c) \n                                                    (char->string\
    \ (char->string c) \n                                                      (char->string\
    \ (char->string c) \n                                                        (char->string\
    \ (char->string c) \n                                                        \
    \  (char->string (char->string c) \n                                         \
    \                   (char->string (char->string c) \n                        \
    \                                      (char->string (char->string c) \n     \
    \                                                           (char->string (char->string\
    \ c) \n                                                                  (char->string\
    \ (char->string c) \n                                                        \
    \            (char->string (char->string c) \n                               \
    \                                       (char->string (char->string c) \n    \
    \                                                                    (char->string\
    \ (char->string c) \n                                                        \
    \                  (char->string (char->string c) \n                         \
    \                                                   (char->string (char->string\
    \ c) \n                                                                      \
    \        (char->string (char->string c) \n                                   \
    \                                             (char->string (char->string c) \n\
    \                                                                            \
    \      (char->string (char->string c) \n                                     \
    \                                               (char->string (char->string c)\
    \ \n                                                                         \
    \             (char->string (char->string c) \n                              \
    \                                                          (char->string (char->string\
    \ c) \n                                                                      \
    \                    (char->string (char->string c) \n                       \
    \                                                                     (char->string\
    \ (char->string c) \n                                                        \
    \                                      (char->string (char->string c) \n     \
    \                                                                            \
    \               (char->string (char->string c) \n                            \
    \                                                                      (char->string\
    \ (char->string c) \n                                                        \
    \                                            (char->string (char->string c) \n\
    \                                                                            \
    \                          (char->string (char->string c) \n                 \
    \                                                                            \
    \           (char->string (char->string c) \n                                \
    \                                                                          (char->string\
    \ (char->string c) \n                                                        \
    \                                                    (char->string (char->string\
    \ c) \n                                                                      \
    \                                        (char->string (char", "  (cond\n    [(empty?\
    \ s) s]\n    [(equal? (first s) (first s)) (second s)]\n    [else (cons (first\
    \ s)\n                (solve (second s)))]))\n", "  (cond\n    [(empty? s) s]\n\
    \    [(equal? (first s) (first s)) (second s)]\n    [else (cons (first s) (solve\
    \ (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(member? (char-code (car\
    \ s)) '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                 \
    \                 #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V\
    \ \n                                  #\\W #\\X #\\Y #\\Z)) (solve (char-code\
    \ (car s)) \n                                                  (char-code (cdr\
    \ s))) \n                                (solve (cdr s) (char-code (car s))) \n\
    \                                (solve (cdr s) (char-code (cdr s))) \n      \
    \                          (solve (cdr s) s)] \n    [else (solve (cdr s) (char-code\
    \ (car s))) \n          (solve (cdr s) (char-code (cdr s))) \n          (solve\
    \ (cdr s) s)]))\n", "  (cond\n    [(empty? s) s]\n    [(character? (car s)) (cons\
    \ (char->upper (car s)) (solve (rest s)))]\n    [else (cons (char->lower (car\
    \ s)) (solve (rest s)))]))\n", "  (cond [(empty? s) s]\n        [(letter? (first\
    \ s)) (cons (char->upper (first s)) (solve (rest s)))]\n        [else (cons (first\
    \ s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(char? (car s))\
    \ (cons (char->string (char->integer car s)) (solve (rest s)))]\n    [else (cons\
    \ (char->string (char->integer car s)) (solve (rest s)))]))\n", "  (cond\n   \
    \ [(empty? s) s]\n    [(member (first s) (map char->string '(#\\A #\\B #\\C #\\\
    D #\\E #\\F #\\G #\\H #\\I #\\J \n                                          #\\\
    K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                  \
    \                        #\\W #\\X #\\Y #\\Z)))\n     (cond\n       [(char->boolean\
    \ (first s)) (cons (char->string (char->boolean (first s))) \n               \
    \                       (solve (rest s)))]\n       [(char->boolean (first s))\
    \ (cons (char->string (char->boolean (first s))) \n                          \
    \            (solve (rest s)))]\n       [(char->boolean (first s)) (cons (char->string\
    \ (char->boolean (first s))) \n                                      (solve (rest\
    \ s)))]\n       [(char->boolean (first s)) (cons (char->string (char->boolean\
    \ (first s))) \n                                      (solve (rest s)))]\n   \
    \    [(char->boolean (first s)) (cons (char->string (char->boolean (first s)))\
    \ \n                                      (solve (rest s)))]\n       [(char->boolean\
    \ (first s)) (cons (char->string (char->boolean (first s))) \n               \
    \                       (solve (rest s)))]\n       [(char->boolean (first s))\
    \ (cons (char->string (char->boolean (first s))) \n                          \
    \            (solve (rest s)))]\n       [(char->boolean (first s)) (cons (char->string\
    \ (char->boolean (first s))) \n                                      (solve (rest\
    \ s)))]\n       [(char->boolean (first s)) (cons (char->string (char->boolean\
    \ (first s))) \n                                      (solve (rest s)))]\n   \
    \    [(char->boolean (first s)) (cons (char->string (char->boolean (first s)))\
    \ \n                                      (solve (rest s)))]\n       [(char->boolean\
    \ (first s)) (cons (char->string (char->boolean (first s))) \n               \
    \                       (solve (rest s)))]\n       [(char->boolean (first s))\
    \ (cons (char->string (char->boolean (first s))) \n                          \
    \            (solve (rest s)))]\n       [(char->boolean (first s)) (cons (char->string\
    \ (char->boolean (first s))) \n                                      (solve (rest\
    \ s)))]\n       [(char->boolean (first s)) (cons (char", "  (cond\n    [(empty?\
    \ s) s]\n    [(member (first s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\\
    F #\\G #\\H #\\I #\\J \n                                           #\\K #\\L #\\\
    M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                            \
    \               #\\W #\\X #\\Y #\\Z)))\n     (string-append (map char->string\
    \ '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                     \
    \                     #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\\
    V \n                                          #\\W #\\X #\\Y #\\Z)) (first s))]\n\
    \    [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s)\
    \ s]\n    [(character? (car s)) (cond\n                            [(equal? (char-case\
    \ (car s)) 'upper) (cons (char-case (car s)) (reverse (substring (string (car\
    \ s) 0 1) (char-case (car s)) 'upper)))]\n                            [(equal?\
    \ (char-case (car s)) 'lower) (cons (char-case (car s)) (reverse (substring (string\
    \ (car s) 0 1) (char-case (car s)) 'lower)))]\n                            [(equal?\
    \ (char-case (car s)) 'other) (cons (char-case (car s)) (reverse (substring (string\
    \ (car s) 0 1) (char-case (car s)) 'other)))]\n                            [(equal?\
    \ (char-case (car s)) 'none) (cons (char-case (car s)) (reverse (substring (string\
    \ (car s) 0 1) (char-case (car s)) 'none)))]\n                            [(equal?\
    \ (char-case (car s)) 'other) (cons (char-case (car s)) (reverse (substring (string\
    \ (car s) 0 1) (char-case (car s)) 'other)))]\n                            [(equal?\
    \ (char-case (car s)) 'none) (cons (char-case (car s)) (reverse (substring (string\
    \ (car s) 0 1) (char-case (car s)) 'none)))]\n                            [(equal?\
    \ (char-case (car s)) 'other) (cons (char-case (car s)) (reverse (substring (string\
    \ (car s) 0 1) (char-case (car s)) 'other)))]\n                            [(equal?\
    \ (char-case (car s)) 'none) (cons (char-case (car s)) (reverse (substring (string\
    \ (car s) 0 1) (char-case (car s)) 'none)))]\n                            [(equal?\
    \ (char-case (car s)) 'other) (cons (char-case (car s)) (reverse (substring (string\
    \ (car s) 0 1) (char-case (car s)) 'other)))]\n                            [(equal?\
    \ (char-case (car s)) 'none) (cons (char-case (car s)) (reverse (substring (string\
    \ (car s) 0 1) (char-case (car s)) 'none)))]\n                            [(equal?\
    \ (char-case (car s)) 'other) (cons (char-case (car s)) (reverse (substring (string\
    \ (car s) ", "  (cond\n    [(empty? s) s]\n    [(character? (car s)) (cons (char->upper\
    \ (car s)) (reverse (solve (cdr s))))]\n    [else (cons (car s) (solve (cdr s)))]))\n",
  "  (cond\n    [(empty? s) s]\n    [(equal? (first s) (first s)) (cond\n      [(char?\
    \ (first s)) (cond\n        [(equal? (first s) (first s)) (cond\n          [(char?\
    \ (first s)) (cond\n            [(equal? (first s) (first s)) (cond\n        \
    \      [(char? (first s)) (cond\n                [(equal? (first s) (first s))\
    \ (cond\n                  [(char? (first s)) (cond\n                    [(equal?\
    \ (first s) (first s)) (cond\n                      [(char? (first s)) (cond\n\
    \                        [(equal? (first s) (first s)) (cond\n               \
    \           [(char? (first s)) (cond\n                            [(equal? (first\
    \ s) (first s)) (cond\n                              [(char? (first s)) (cond\n\
    \                                [(equal? (first s) (first s)) (cond\n       \
    \                           [(char? (first s)) (cond\n                       \
    \             [(equal? (first s) (first s)) (cond\n                          \
    \            [(char? (first s)) (cond\n                                      \
    \  [(equal? (first s) (first s)) (cond\n                                     \
    \     [(char? (first s)) (cond\n                                            [(equal?\
    \ (first s) (first s)) (cond\n                                              [(char?\
    \ (first s)) (cond\n                                                [(equal? (first\
    \ s) (first s)) (cond\n                                                  [(char?\
    \ (first s)) (cond\n                                                    [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \       [(char? (first s)) (cond\n                                           \
    \             [(equal? (first s) (first s)) (cond\n                          \
    \                                [(char? (first s)) (cond\n                  \
    \                                          [(equal? (first s) (first s)) (cond\n\
    \                                                              [(char? (first\
    \ s)) (cond\n                                                                [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                   [(char? (first s)) (cond\n                               \
    \                                     [(equal? (first s) (first s)) (cond\n  \
    \                                                                    [(char? (first\
    \ s)) (cond\n                                                                \
    \        [(equal? (first s) (first s)) (cond\n                               \
    \                                           [(char? (first s)) (cond\n       \
    \                                                                     [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                               [(char? (first s)) (cond\n                   \
    \                                                             [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                            [(char? (first s)) (cond\n                      \
    \                                                              [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                [(char? (first s)) (cond\n                  \
    \                                                                      [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                           [(char? (first s)) (cond\n       \
    \                                                                            \
    \         [(equal? (first s) (first s)) (cond\n                              \
    \                                                                [(char? (first\
    \ s)) (cond\n                                                                \
    \                                [(equal? (first ", "  (cond\n    [(empty? s)\
    \ s]\n    [(character? (car s)) (cons (char->upper (car s)) (reverse (solve (cdr\
    \ s))))]\n    [else (cons (char->lower (car s)) (reverse (solve (cdr s))))]\n\
    \  )\n)\n", "  (cond\n    [(empty? s) s]\n    [(equal? (first s) (first s)) (second\
    \ s)]\n    [else (cons (first s)\n                (solve (substring (second s)\
    \ 0 (- (length s) 1)))\n                (solve (substring (second s) 1 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 2 (- (length s) 1)))\n\
    \                (solve (substring (second s) 3 (- (length s) 1)))\n         \
    \       (solve (substring (second s) 4 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 5 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 6 (- (length s) 1)))\n                (solve (substring (second s)\
    \ 7 (- (length s) 1)))\n                (solve (substring (second s) 8 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 9 (- (length s) 1)))\n\
    \                (solve (substring (second s) 10 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 11 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 12 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 13 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 14 (- (length s) 1)))\n                (solve (substring (second s) 15 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 16 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 17 (- (length s) 1)))\n\
    \                (solve (substring (second s) 18 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 19 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 20 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 21 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 22 (- (length s) 1)))\n                (solve (substring (second s) 23 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 24 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 25 (- (length s) 1)))\n\
    \                (solve (substring (second s) 26 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 27 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 28 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 29 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 30 (- (length s) 1)))\n                (solve (substring (second s) 31 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 32 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 33 (- (length s) 1)))\n\
    \                (solve (substring (second s) 34 (", "  (cond [(empty? s) s]\n\
    \        [(letter? (first s)) (cons (char->upper (first s)) (solve (rest s)))]\n\
    \        [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty?\
    \ s) s]\n    [(member (first s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\\
    F #\\G #\\H #\\I #\\J \n                                      #\\K #\\L #\\M #\\\
    N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                                 \
    \     #\\W #\\X #\\Y #\\Z)))\n     (string-append (map (lambda (c) (if (char->string\
    \ c) \n                                       (char->string (char->string c) \n\
    \                                       (char->string c))) \n                \
    \           (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\\
    J \n                                             #\\K #\\L #\\M #\\N #\\O #\\\
    P #\\Q #\\R #\\S #\\T #\\U #\\V \n                                           \
    \  #\\W #\\X #\\Y #\\Z)))\n                    (map (lambda (c) (if (char->string\
    \ c) \n                                       (char->string (char->string c) \n\
    \                                       (char->string c))) \n                \
    \           (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\\
    J \n                                             #\\K #\\L #\\M #\\N #\\O #\\\
    P #\\Q #\\R #\\S #\\T #\\U #\\V \n                                           \
    \  #\\W #\\X #\\Y #\\Z)))\n                    (map (lambda (c) (if (char->string\
    \ c) \n                                       (char->string (char->string c) \n\
    \                                       (char->string c))) \n                \
    \           (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\\
    J \n                                             #\\K #\\L #\\M #\\N #\\O #\\\
    P #\\Q #\\R #\\S #\\T #\\U #\\V \n                                           \
    \  #\\W #\\X #\\Y #\\Z)))\n                    (map (lambda (c) (if (char->string\
    \ c) \n                                       (char->string (char->string c) \n\
    \                                       (char", "  (cond\n    [(empty? s) s]\n\
    \    [(member (first s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\\
    G #\\H #\\I #\\J \n                                          #\\K #\\L #\\M #\\\
    N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                                 \
    \         #\\W #\\X #\\Y #\\Z)))\n     (reverse (map char->string '(#\\A #\\B\
    \ #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                                 \
    \     #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n         \
    \                             #\\W #\\X #\\Y #\\Z)))]\n    [else (cons (first\
    \ s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(character? (car\
    \ s)) (cond \n                            [(equal? (char-case (car s)) 'upper)\
    \ (cons (char-case (car s)) (reverse (solve (cdr s))))]\n                    \
    \        [(equal? (char-case (car s)) 'lower) (cons (char-case (car s)) (solve\
    \ (cdr s)))]\n                            [else (cons (car s) (solve (cdr s)))])]\n\
    \    [else (cons (car s) (solve (cdr s)))]))\n", "  (cond\n    [(empty? s) s]\n\
    \    [(member (first s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\\
    G #\\H #\\I #\\J \n                                       #\\K #\\L #\\M #\\N\
    \ #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                                 \
    \      #\\W #\\X #\\Y #\\Z)))\n     (string-append (map (lambda (c) (if (char->string\
    \ c) \n                                       (char->string (char->string c) \n\
    \                                         (char->string (char->string c) \n  \
    \                                         (char->string (char->string c) \n  \
    \                                           (char->string (char->string c) \n\
    \                                               (char->string (char->string c)\
    \ \n                                                 (char->string (char->string\
    \ c) \n                                                   (char->string (char->string\
    \ c) \n                                                     (char->string (char->string\
    \ c) \n                                                       (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n", "  (cond\n    [(empty? s) s]\n    [(character? (car s)) (cond\n    \
    \                        [(char-lower? (car s)) (cons (char-upper? (car s)) (cdr\
    \ s))]\n                            [(char-upper? (car s)) (cons (char-lower?\
    \ (car s)) (cdr s))]\n                            [(char-lower? (car s)) (cons\
    \ (car s) (cdr s))]\n                            [(char-upper? (car s)) (cons\
    \ (car s) (cdr s))])]\n    [else (cond\n             [(char? (car s)) (cond\n\
    \                                 [(char-lower? (car s)) (cons (char-upper? (car\
    \ s)) (cdr s))]\n                                 [(char-upper? (car s)) (cons\
    \ (char-lower? (car s)) (cdr s))]\n                                 [(char-lower?\
    \ (car s)) (cons (car s) (cdr s))]\n                                 [(char-upper?\
    \ (car s)) (cons (car s) (cdr s))])]\n             [(char? (car s)) (cond\n  \
    \                               [(char-lower? (car s)) (cons (char-upper? (car\
    \ s)) (cdr s))]\n                                 [(char-upper? (car s)) (cons\
    \ (char-lower? (car s)) (cdr s))]\n                                 [(char-lower?\
    \ (car s)) (cons (car s) (cdr s))]\n                                 [(char-upper?\
    \ (car s)) (cons (car s) (cdr s))])]\n             [(char? (car s)) (cond\n  \
    \                               [(char-lower? (car s)) (cons (char-upper? (car\
    \ s)) (cdr s))]\n                                 [(char-upper? (car s)) (cons\
    \ (char-lower? (car s)) (cdr s))]\n                                 [(char-lower?\
    \ (car s)) (cons (car s) (cdr s))]\n                                 [(char-upper?\
    \ (car s)) (cons (car s) (cdr s))])]\n             [(char? (car s)) (cond\n  \
    \                               [(char-lower? (car s)) (cons (char-upper? (car\
    \ s)) (cdr s))]\n                                 [(char-upper? (car s)) (cons\
    \ (char-lower? (car s)) (cdr s))]\n                                 [(char-lower?\
    \ (car s)) (cons (car s) ", "  (cond\n    [(empty? s) s]\n    [(equal? (first\
    \ s) (first s)) (cond\n                                [(equal? (first s) (first\
    \ s)) (cond\n                                                          [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                       [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                    [(equal? (first s) (first s)) (cond\n   \
    \                                                                            \
    \                                           [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                        [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \              [(equal? (first s) (first s)) (cond\n                         \
    \                                                                            \
    \                                                               [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                                            \
    \                                            [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                            [(equal? (first s) (first s)) (cond\n           \
    \                                                                            \
    \                                                                            \
    \                       [(equal? (first s) (first s)) (cond\n                \
    \                                                                            \
    \                                                                            \
    \                    [(equal? (first s) (first s)) (cond\n                   \
    \                                                                            \
    \                                                                            \
    \                     [(equal? (first s) (first s)) (cond\n                  \
    \                                                                            \
    \                                                                            \
    \                      [(equal? (first s) (first s)) (cond\n                 \
    \                                                                            \
    \                                                                            \
    \                       [(equal? (first s) (first s)) (cond\n                \
    \                                                                            \
    \                                                                            \
    \                        [(equal? (first s) (first s)) (cond\n               \
    \                                                                            \
    \                                                                            \
    \                         [(equal? (first s) (first s)) (cond\n              \
    \                                                                            \
    \                                                                            \
    \                          [(equal? (first s) (first s)) (cond\n             \
    \                                                                            \
    \                                                                            \
    \                           [(equal? (first s) (first s)) (cond\n            \
    \                                                                            \
    \                                                                            \
    \                            [(equal? (first s) (first s)) (cond\n           \
    \                                                                            \
    \                                                                            \
    \                             [(equal? (first s) (first s)) (cond\n          \
    \                                                                            \
    \                                                                            \
    \                              [(equal? (first s) (first s)) (cond\n         \
    \                                                                            \
    \                                                                            \
    \                               [(equal? (first s) (first s)) (cond\n        \
    \                                                                            \
    \                                                                            \
    \                                [(equal? (first s) (first s)) (cond\n       \
    \                                                                            \
    \                                                                            \
    \                                 [(equal? (first s) (first s)) (cond\n      \
    \                                                                            \
    \                                                                            \
    \                                  [(equal? (first s) (first s)) (cond\n     \
    \                                                                            \
    \                                                                            \
    \                                   [(equal? (first s) (first s)) (cond\n    \
    \                                                                            \
    \                                                                            \
    \                                    [(equal? (first s) (first s)) (cond\n   \
    \                                                                            \
    \                                                                            \
    \                                     [(equal? (first s) (first s)) (cond\n  \
    \                                                                            \
    \                                                                            \
    \                                      [(equal? (first s) (first s)) (cond\n \
    \                                                                            \
    \                                                                            \
    \                                       [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first ", "  (cond\n    [(empty?\
    \ s) s]\n    [(character? (car s)) (cons (char->upper (car s)) \n            \
    \                  (cons (char->lower (car s)) \n                            \
    \        (solve (cdr s))))]\n    [else (cons (char->lower (car s)) \n        \
    \        (solve (cdr s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(equal? (first\
    \ s) (first s)) (second s)]\n    [else (cons (first s)\n                (solve\
    \ (second s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(equal? (first s) (first\
    \ s)) (second s)]\n    [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n\
    \    [(empty? s) s]\n    [(equal? (first s) (first s)) (second s)]\n    [else\
    \ (cons (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(character?\
    \ (car s)) (cond\n                            [(equal? (char-case (car s)) 'upper)\
    \ (cons (char-case (car s)) (reverse (substring (string s) 0 (- (length s) 1)))]\n\
    \                            [(equal? (char-case (car s)) 'lower) (cons (char-case\
    \ (car s)) (substring (string s) 0 (- (length s) 1)))]\n                     \
    \       [(equal? (char-case (car s)) 'other) (cons (char-case (car s)) (reverse\
    \ (substring (string s) 0 (- (length s) 1)))])]\n                            [else\
    \ (cons (char-case (car s)) (reverse (substring (string s) 0 (- (length s) 1)))])])]\n\
    \    [else (cons (char-case (car s)) (reverse (substring (string s) 0 (- (length\
    \ s) 1)))])]))\n", "  (cond\n    [(empty? s) s]\n    [(member (first s) (map char->string\
    \ '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                     \
    \                       #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\\
    U #\\V \n                                            #\\W #\\X #\\Y #\\Z)))\n\
    \     (reverse (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\\
    I #\\J \n                                            #\\K #\\L #\\M #\\N #\\O\
    \ #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                                      \
    \      #\\W #\\X #\\Y #\\Z)))]\n    [else (cons (first s) (solve (rest s)))]))\n",
  "  (cond\n    [(empty? s) s]\n    [(character? (car s)) (cond\n                \
    \            [(equal? (char-code (car s)) 97) (cond\n                        \
    \                                    [(equal? (char-code (car s)) 65) (cons (char-code\
    \ (car s)) (solve (reverse (substring s (+ 0 (length s)))))]\n               \
    \                                             [(equal? (char-code (car s)) 97)\
    \ (cons (char-code (car s)) (solve (reverse (substring s (+ 0 (length s)))))]\n\
    \                                                            [(equal? (char-code\
    \ (car s)) 65) (cons (char-code (car s)) (solve (reverse (substring s (+ 0 (length\
    \ s)))))]\n                                                            [(equal?\
    \ (char-code (car s)) 97) (cons (char-code (car s)) (solve (reverse (substring\
    \ s (+ 0 (length s)))))]\n                                                   \
    \         [(equal? (char-code (car s)) 65) (cons (char-code (car s)) (solve (reverse\
    \ (substring s (+ 0 (length s)))))]\n                                        \
    \                    [(equal? (char-code (car s)) 97) (cons (char-code (car s))\
    \ (solve (reverse (substring s (+ 0 (length s)))))]\n                        \
    \                                    [(equal? (char-code (car s)) 65) (cons (char-code\
    \ (car s)) (solve (reverse (substring s (+ 0 (length s)))))]\n               \
    \                                             [(equal? (char-code (car s)) 97)\
    \ (cons (char-code (car s)) (solve (reverse (substring s (+ 0 (length s)))))]\n\
    \                                                            [(equal? (char-code\
    \ (car s)) 65) (cons (char-code (car s)) (solve (reverse (substring s (+ 0 (length\
    \ s)))))]\n                                                            [(equal?\
    \ (char-code (car s)) 97) (cons (char-code (car s)) (solve (reverse (substring\
    \ s (+ 0 (length s)))))]\n                                                   \
    \         [(equal? (char-code (car s)) 65) (cons (char-code (car s)) (solve (reverse\
    \ (substring s (+ 0 (length s)))))]\n                                        \
    \                    [(equal? (char-code (car s)) 97) (cons (char-code (car s))\
    \ (solve (reverse (substring s (+ 0 (length s)))))]\n                        \
    \                                    [(equal? (char-code (car s)) 65) (cons (char-code\
    \ (car s)) (solve (reverse (substring s (+ 0 (length s)))))]\n               \
    \                                             [(equal? (char-code (car ", "  (cond\n\
    \    [(empty? s) s]\n    [(character? (car s)) (cond\n                       \
    \     [(equal? (char-code (car s)) 97) (cond\n                               \
    \                       [(equal? (char-code (car s)) 65) (cond\n             \
    \                                                                      [(equal?\
    \ (char-code (car s)) 97) (cond\n                                            \
    \                                                              [(equal? (char-code\
    \ (car s)) 65) (cond\n                                                       \
    \                                                             [(equal? (char-code\
    \ (car s)) 97) (cond\n                                                       \
    \                                                                            \
    \           [(equal? (char-code (car s)) 65) (cond\n                         \
    \                                                                            \
    \                                                             [(equal? (char-code\
    \ (car s)) 97) (cond\n                                                       \
    \                                                                            \
    \                                                   [(equal? (char-code (car s))\
    \ 65) (cond\n                                                                \
    \                                                                            \
    \                                                [(equal? (char-code (car s))\
    \ 97) (cond\n                                                                \
    \                                                                            \
    \                                                      [(equal? (char-code (car\
    \ s)) 65) (cond\n                                                            \
    \                                                                            \
    \                                                            [(equal? (char-code\
    \ (car s)) 97) (cond\n                                                       \
    \                                                                            \
    \                                                                           [(equal?\
    \ (char-code (car s)) 65) (cond\n                                            \
    \                                                                            \
    \                                                                            \
    \                              [(equal? (char-code (car s)) 97) (cond\n      \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \            [(equal? (char-code (car s)) 65) (cond\n                        \
    \                                                                            \
    \                                                                            \
    \                                                                            [(equal?\
    \ (char-code (car s)) 97) (cond\n                                            \
    \                                                                            \
    \                                                                            \
    \                                                              [(equal? (char-code\
    \ (car s)) 65) (cond\n                                                       \
    \                                                                            \
    \                                                                            \
    \                                                     [(equal? (char-code (car\
    \ s)) 97) (cond\n                                                            \
    \                                                                            \
    \                                                                            \
    \                                                          [(equal? (char-code\
    \ (car s)) 65) (cond\n                                                       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \       [(equal? (char-code (car s)) 97) (cond\n                             \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                     [(equal? (char-code (car\
    \ s)) 65) (cond\n                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                            [(equal? (char-code (car s)) 97) (cond\n        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \          [(equal? (char-code (car s)) 65) (cond\n                          \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                      [(equal?\
    \ (char-code (car s)) 97) (cond\n                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                              [(equal? (char-code\
    \ (car s)) 65) (cond\n                                                       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                       [(equal?\
    \ (char-code (car s)) 97) (cond\n                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                          [(equal? (char-code (car s)) 65) (cond\n          \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                  [(equal? (char-code\
    \ (car s)) 97) (cond\n                                                       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                           [(", "  (cond\n    [(empty? s) s]\n    [(letter? (first\
    \ s)) (cons (first s) (solve (rest s)))]\n    [else (cons (first s) (solve (rest\
    \ s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(member (first s) (map char->string\
    \ '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                     \
    \                     #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\\
    V \n                                          #\\W #\\X #\\Y #\\Z)))\n     (reverse\
    \ (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n   \
    \                                 #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\\
    S #\\T #\\U #\\V \n                                    #\\W #\\X #\\Y #\\Z)))]\n\
    \    [else (cons (first s) (solve (rest s)))]))\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nI appreciate your efforts, but I already have this solution in my code.\
    \ I was just looking for a way to do it without using recursion.\n<|/ c |>\n<|\
    \ c |>\nI understand, thank you for sharing your solution. My solution was just\
    \ to show you how it can be done without recursion.\n<|/ c |>\n<| a tags=racket,scheme\
    \ |>\n<code>", "  (cond\n    [(empty? s) s]\n    [(letter? (first s)) (cond\n\
    \                            [(upper? (first s)) (cons (first s) (solve (rest\
    \ s)))]\n                            [(lower? (first s)) (cons (first s) (solve\
    \ (rest s)))]\n                            [(not (letter? (first s))) (cons (first\
    \ s) (solve (rest s)))]\n                            [(not (upper? (first s)))\
    \ (cons (first s) (solve (rest s)))]\n                            [(not (lower?\
    \ (first s))) (cons (first s) (solve (rest s)))]\n                           \
    \ [(not (symbol? (first s))) (cons (first s) (solve (rest s)))]\n            \
    \                [(not (number? (first s))) (cons (first s) (solve (rest s)))]\n\
    \                            [(not (boolean? (first s))) (cons (first s) (solve\
    \ (rest s)))]\n                            [(not (procedure? (first s))) (cons\
    \ (first s) (solve (rest s)))]\n                            [(not (list? (first\
    \ s))) (cons (first s) (solve (rest s)))]\n                            [(not (set?\
    \ (first s))) (cons (first s) (solve (rest s)))]\n                           \
    \ [(not (hash? (first s))) (cons (first s) (solve (rest s)))]\n              \
    \              [(not (pair? (first s))) (cons (first s) (solve (rest s)))]\n \
    \                           [(not (null? (first s))) (cons (first s) (solve (rest\
    \ s)))]\n                            [(not (atom? (first s))) (cons (first s)\
    \ (solve (rest s)))]\n                            [(not (boolean? (first s)))\
    \ (cons (first s) (solve (rest s)))]\n                            [(not (number?\
    \ (first s))) (cons (first s) (solve (rest s)))]\n                           \
    \ [(not (procedure? (first s))) (cons (first s) (solve (rest s)))]\n         \
    \                   [(not (list? (first s))) (cons (first s) (solve (rest s)))]\n\
    \                            [(not (set? (first s))) (cons (first s) (solve (rest\
    \ s)))]\n                            [(not (hash? (first s))) (cons (first s)\
    \ (solve (rest s)))]\n                            [(not (pair? (first s))) (cons\
    \ (first s) (solve (rest s)))]\n                            [(not (null? (first\
    \ s))) (cons (first s) (solve (rest s)))]\n                            [(not (atom?\
    \ (first s))) (cons (first s) (solve (rest s)))]\n                           \
    \ [(not (boolean? (first s))) (cons (first s) (solve ", "  (cond\n    [(empty?\
    \ s) s]\n    [(character? (first s)) (cons (second s) (solve (rest s)))]\n   \
    \ [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n\
    \    [(character? (first s)) (cons (first s) (solve (rest s)))]\n    [else (cons\
    \ (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(letter?\
    \ (first s)) (cons (first s) (solve (rest s)))]\n    [else (cons (first s) (solve\
    \ (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(character? (car s)) (cond\
    \ \n                             [(equal? (char-code (car s)) 97) (cons (char-code\
    \ (car s)) (solve (substring s 0 (char-code (car s)))))]\n                   \
    \          [(equal? (char-code (car s)) 65) (cons (char-code (car s)) (solve (substring\
    \ s 1 (char-code (car s)))))]\n                             [(equal? (char-code\
    \ (car s)) 97) (cons (char-code (car s)) (solve (substring s 1 (char-code (car\
    \ s)))))]\n                             [(equal? (char-code (car s)) 65) (cons\
    \ (char-code (car s)) (solve (substring s 0 (char-code (car s)))))])]\n    [else\
    \ (cons (car s) (solve (substring s 0 (length s))))]\n    )\n    )\n  )\n)\n",
  "  (cond [(empty? s) s]\n        [(character? (car s)) (cons (char->upper (car s))\
    \ (reverse (solve (cdr s))))]\n        [else (cons (char->lower (car s)) (reverse\
    \ (solve (cdr s))))]))\n</code>\n<|/ a tags=recursion,scheme,racket |>\n<| c |>\n\
    Thanks for your answer. Can you please explain why you used `cons` instead of\
    \ `append`?\n<|/ c |>\n<| c |>\n`append` will append the list to the end of the\
    \ other list. `cons` is used to construct a list from a single element. `cons`\
    \ will construct a list from two elements. `cons` is more efficient than `append`\
    \ because it doesn't have to copy the list when it's already a list.\n<|/ c |>\n\
    <| c |>\nThanks. I understand now. :)\n<|/ c |>\n<| a dscore=1 |>\n<code>", " \
    \ (cond\n    [(empty? s) s]\n    [(member (first s) (map char->string '(#\\A #\\\
    B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                                 \
    \         #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n     \
    \                                     #\\W #\\X #\\Y #\\Z)))\n     (string-append\
    \ (map (lambda (c) (if (char->string c) \n                                   \
    \    (char->string (char->string c) \n                                       \
    \  (char->string (char->string c) \n                                         \
    \  (char->string (char->string c) \n                                         \
    \    (char->string (char->string c) \n                                       \
    \        (char->string (char->string c) \n                                   \
    \             (char->string (char->string c) \n                              \
    \                   (char->string (char->string c) \n                        \
    \                          (char->string (char->string c) \n                 \
    \                                  (char->string (char->string c) \n         \
    \                                           (char->string (char->string c) \n\
    \                                                    (char->string (char->string\
    \ c) \n                                                     (char->string (char->string\
    \ c) \n                                                      (char->string (char->string\
    \ c) \n                                                      (char->string (char->string\
    \ c) \n                                                       (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n                                                        (char->string (char->string\
    \ c) \n", "  (cond\n    [(empty? s) s]\n    [(character? (car s)) (cond\n    \
    \                        [(equal? (char-code (car s)) 97) (cond\n            \
    \                                            [(equal? (char-code (car s)) 65)\
    \ (cond\n                                                                    \
    \              [(equal? (char-code (car s)) 97) (cond\n                      \
    \                                                                            \
    \      [(equal? (char-code (car s)) 65) (cond\n                              \
    \                                                                            \
    \        [(equal? (char-code (car s)) 97) (cond\n                            \
    \                                                                            \
    \                [(equal? (char-code (car s)) 65) (cond\n                    \
    \                                                                            \
    \                                  [(equal? (char-code (car s)) 97) (cond\n  \
    \                                                                            \
    \                                                                            \
    \          [(equal? (char-code (car s)) 65) (cond\n                          \
    \                                                                            \
    \                                                                            \
    \    [(equal? (char-code (car s)) 97) (cond\n                                \
    \                                                                            \
    \                                                                            \
    \    [(equal? (char-code (car s)) 65) (cond\n                                \
    \                                                                            \
    \                                                                            \
    \          [(equal? (char-code (car s)) 97) (cond\n                          \
    \                                                                            \
    \                                                                            \
    \                                                  [(equal? (char-code (car s))\
    \ 65) (cond\n                                                                \
    \                                                                            \
    \                                                                            \
    \                              [(equal? (char-code (car s)) 97) (cond\n      \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                  [(equal? (char-code (car s)) 65) (cond\n                  \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \            [(equal? (char-code (car s)) 97) (cond\n                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (char-code (car s)) 65) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \      [(equal? (char-code (car s)) 97) (cond\n                              \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                          [(equal? (char-code\
    \ (car s)) 65) (cond\n                                                       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                       [(equal? (char-code (car s)) 97) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                    [(equal? (char-code (car\
    \ s)) 65) (cond\n                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \          [(equal? (char-code (car s)) 97) (cond\n                          \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                  [(equal? (char-code (car s))\
    \ 65) (cond\n                                                                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                  [(equal? (char-code (car s)) 97) (cond\n                  \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                      [(equal? (char-code (car s)) 65) (cond\n              \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                            [(equal? (char-code (car s)) 97)\
    \ (cond\n                                                                    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                        [(equal?\
    \ (char-code (car s)) 65) (cond\n                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                          [(equal? (char-code (car s)) 97) (cond\n          \
    \                                                                            \
    \                                          ", "  (cond\n    [(empty? s) s]\n \
    \   [(equal? (first s) (first s)) (second s)]\n    [else (cons (first s)\n   \
    \             (solve (second s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(character?\
    \ (car s)) (cond\n                            [(lower? (car s)) (cond\n      \
    \                                          [(upper? (car s)) (cons (upper (car\
    \ s)) (solve (reverse (cdr s))))]\n                                          \
    \      [(upper? (car s)) (cons (lower (car s)) (solve (reverse (cdr s))))]\n \
    \                                               [(lower? (car s)) (cons (lower\
    \ (car s)) (solve (reverse (cdr s))))]\n                                     \
    \           [(lower? (car s)) (cons (upper (car s)) (solve (reverse (cdr s))))]\n\
    \                                                [(upper? (car s)) (cons (upper\
    \ (car s)) (solve (reverse (cdr s))))]\n                                     \
    \           [(lower? (car s)) (cons (lower (car s)) (solve (reverse (cdr s))))]\n\
    \                                                [(lower? (car s)) (cons (upper\
    \ (car s)) (solve (reverse (cdr s))))]\n                                     \
    \           [(upper? (car s)) (cons (upper (car s)) (solve (reverse (cdr s))))]\n\
    \                                                [(lower? (car s)) (cons (lower\
    \ (car s)) (solve (reverse (cdr s))))]\n                                     \
    \           [(lower? (car s)) (cons (upper (car s)) (solve (reverse (cdr s))))]\n\
    \                                                [(upper? (car s)) (cons (upper\
    \ (car s)) (solve (reverse (cdr s))))]\n                                     \
    \           [(lower? (car s)) (cons (lower (car s)) (solve (reverse (cdr s))))]\n\
    \                                                [(lower? (car s)) (cons (upper\
    \ (car s)) (solve (reverse (cdr s))))]\n                                     \
    \           [(upper? (car s)) (cons (upper (car s)) (solve (reverse (cdr s))))]\n\
    \                                                [(lower? (car s)) (cons (lower\
    \ (car s)) (solve (reverse (cdr s))))]\n                                     \
    \           [(lower? (car s)) (cons (upper (car s)) (solve (reverse (cdr s))))]\n\
    \                                                [(upper? (car s)) (cons (upper\
    \ (car s)) (solve (reverse (cdr s))))]\n                                     \
    \           [(lower? (car s)) (cons (lower (car s)) (solve (reverse (cdr s))))]\n\
    \                                                [(lower? (car s)) (cons (upper\
    \ (car s)) (solve (reverse (cdr s))))]\n                                     \
    \           [(upper? (car s)", "  (cond\n    [(empty? s) s]\n    [(member (first\
    \ s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n\
    \                                            #\\K #\\L #\\M #\\N #\\O #\\P #\\\
    Q \n                                            #\\R #\\S #\\T #\\U #\\V \n  \
    \                                          #\\W #\\X #\\Y #\\Z)))\n     (reverse\
    \ (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n   \
    \                                         #\\K #\\L #\\M #\\N #\\O #\\P #\\Q \n\
    \                                            #\\R #\\S #\\T #\\U #\\V \n     \
    \                                       #\\W #\\X #\\Y #\\Z)))]\n    [else (cons\
    \ (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(letter?\
    \ (first s)) (cons (upper-case (first s)) (solve (rest s)))]\n    [else (cons\
    \ (first s) (solve (rest s)))]))\n", "  (cond [(empty? s) s]\n        [(letter?\
    \ (first s)) (cons (second (first s)) (solve (rest s)))]\n        [else (cons\
    \ (first s) (solve (rest s)))]))\n", "  (cond\n    [(empty? s) s]\n    [(equal?\
    \ (first s) (first s)) (cond\n                                    [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \          [(equal? (first s) (first s)) (cond\n                             \
    \                                                                   [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                                          [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \                                     [(equal? (first s) (first s)) (cond\n  \
    \                                                                            \
    \                                                                            \
    \                                      [(equal? (first s) (first s)) (cond\n \
    \                                                                            \
    \                                                                            \
    \                                       [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            \
    \                                        [(equal? (", "  (cond\n    [(empty? s)\
    \ s]\n    [(member (first s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\\
    F #\\G #\\H #\\I #\\J \n                                            #\\K #\\L\
    \ #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                       \
    \                     #\\W #\\X #\\Y #\\Z)))\n     (string-append (map char->string\
    \ '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                     \
    \                     #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\\
    V \n                                          #\\W #\\X #\\Y #\\Z)) (first s))]\n\
    \    [else (cons (first s) (solve (rest s)))]))\n", "  (cond [(empty? s) s]\n\
    \        [(member (first s) (map char->string '(#\\A #\\B #\\C #\\D #\\E #\\F\
    \ #\\G #\\H #\\I #\\J \n                                           #\\K #\\L #\\\
    M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V \n                            \
    \               #\\W #\\X #\\Y #\\Z)))\n         (string-append (substring (first\
    \ s) 0 (- (length s) 1)) \n                        (substring (first s) 1 (- (length\
    \ s) 1)))]\n        [else\n         (string-append (substring (first s) 0 (- (length\
    \ s) 1)) \n                        (substring (first s) 1 (- (length s) 1))\n\
    \                        (substring (first s) 0 (- (length s) 1))]\n        [else\
    \ (solve (substring (first s) 0 (- (length s) 1))\n                      (substring\
    \ (first s) 1 (- (length s) 1)))]))\n", "  (cond\n    [(empty? s) s]\n    [(character?\
    \ (car s)) (cond \n                            [(equal? (char-case (car s)) 'upper)\
    \ (cons (char-case (car s)) (reverse (substring (string (car s) 0 1) (char-case\
    \ (car s)) 'upper)))]\n                            [(equal? (char-case (car s))\
    \ 'lower) (cons (char-case (car s)) (reverse (substring (string (car s) 0 1) (char-case\
    \ (car s)) 'lower)))]\n                            [(equal? (char-case (car s))\
    \ 'other) (cons (char-case (car s)) (reverse (substring (string (car s) 0 1) (char-case\
    \ (car s)) 'other)))]\n                            [(equal? (char-case (car s))\
    \ 'none) (cons (char-case (car s)) (reverse (substring (string (car s) 0 1) (char-case\
    \ (car s)) 'none)))]\n                            [(equal? (char-case (car s))\
    \ 'none) (cons (char-case (car s)) (reverse (substring (string (car s) 0 1) (char-case\
    \ (car s)) 'none)))]\n                            [(equal? (char-case (car s))\
    \ 'none) (cons (char-case (car s)) (reverse (substring (string (car s) 0 1) (char-case\
    \ (car s)) 'none)))]\n                            [(equal? (char-case (car s))\
    \ 'none) (cons (char-case (car s)) (reverse (substring (string (car s) 0 1) (char-case\
    \ (car s)) 'none)))]\n                            [(equal? (char-case (car s))\
    \ 'none) (cons (char-case (car s)) (reverse (substring (string (car s) 0 1) (char-case\
    \ (car s)) 'none)))]\n                            [(equal? (char-case (car s))\
    \ 'none) (cons (char-case (car s)) (reverse (substring (string (car s) 0 1) (char-case\
    \ (car s)) 'none)))]\n                            [(equal? (char-case (car s))\
    \ 'none) (cons (char-case (car s)) (reverse (substring (string (car s) 0 1) (char-case\
    \ (car s)) 'none)))]\n                            [(equal? (char-case (car s))\
    \ 'none) (cons (char-case (car s)) (reverse (substring (string (car ", "  (cond\
    \ [(empty? s) s]\n        [(character? (first s)) (cons (first s) (solve (rest\
    \ s)))]\n        [else (cons (first s) (solve (rest s)))]))\n", "  (cond\n   \
    \ [(empty? s) s]\n    [(equal? (first s) (first s)) (second s)]\n    [else (cons\
    \ (first s)\n                (solve (substring (second s) 0 (- (length s) 1)))\n\
    \                (solve (substring (second s) 1 (- (length s) 1)))\n         \
    \       (solve (substring (second s) 2 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 3 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 4 (- (length s) 1)))\n                (solve (substring (second s)\
    \ 5 (- (length s) 1)))\n                (solve (substring (second s) 6 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 7 (- (length s) 1)))\n\
    \                (solve (substring (second s) 8 (- (length s) 1)))\n         \
    \       (solve (substring (second s) 9 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 10 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 11 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 12 (- (length s) 1)))\n                (solve (substring (second s) 13 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 14 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 15 (- (length s) 1)))\n\
    \                (solve (substring (second s) 16 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 17 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 18 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 19 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 20 (- (length s) 1)))\n                (solve (substring (second s) 21 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 22 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 23 (- (length s) 1)))\n\
    \                (solve (substring (second s) 24 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 25 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 26 (- (length s) 1)))\n                (solve (substring\
    \ (second s) 27 (- (length s) 1)))\n                (solve (substring (second\
    \ s) 28 (- (length s) 1)))\n                (solve (substring (second s) 29 (-\
    \ (length s) 1)))\n                (solve (substring (second s) 30 (- (length\
    \ s) 1)))\n                (solve (substring (second s) 31 (- (length s) 1)))\n\
    \                (solve (substring (second s) 32 (- (length s) 1)))\n        \
    \        (solve (substring (second s) 33 (- (length s) 1)))\n                (solve\
    \ (substring (second s) 34 (", "  (cond\n    [(empty? s) s]\n    [(equal? (first\
    \ s) (first s)) (cond\n                                    [(equal? (first s)\
    \ (first s)) (cond\n                                                         \
    \          [(equal? (first s) (first s)) (cond\n                             \
    \                                                                       [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                    [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \         [(equal? (first s) (first s)) (cond\n                              \
    \                                                                            \
    \                                            [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                                            [else\
    \ (cons (first s) (solve (rest s)))])])])])])]\n                             \
    \       [(equal? (first s) (first s)) (cond\n                                \
    \                                   [(equal? (first s) (first s)) (cond\n    \
    \                                                                            \
    \                    [(equal? (first s) (first s)) (cond\n                   \
    \                                                                            \
    \                    [(equal? (first s) (first s)) (cond\n                   \
    \                                                                            \
    \                                     [(equal? (first s) (first s)) (cond\n  \
    \                                                                            \
    \                                                                        [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \                             [else (cons (first s) (solve (rest s)))])])])])])]\n\
    \                                    [(equal? (first s) (first s)) (cond\n   \
    \                                                                [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                              [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                       [(equal? (first s) (first s)) (cond\n\
    \                                                                            \
    \                                                        [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \                                                                            \
    \          [(equal? (first s) (first s)) (cond\n                             \
    \                                                                            \
    \                                               [else (cons (first s) (solve (rest\
    \ s)))])])])])])]\n                                    [(equal? (first s) (first\
    \ s)) (cond\n                                                                \
    \   [(equal? (first s) (first s)) (cond\n                                    \
    \                                                                [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                             [(equal? (first\
    \ s) (first s)) (cond\n                                                      \
    \                                                                            \
    \  [(equal? (first s) (first s)) (cond\n                                     \
    \                                                                            \
    \                                     [(equal? (first s) (first s)) (cond\n  \
    \                                                                            \
    \                                                                          [else\
    \ (cons (first s) (solve (rest s)))])])])])])]\n                             \
    \       [(equal? (first s) (first s)) (cond\n                                \
    \                                   [(equal? (first s) (first s)) (cond\n    \
    \                                                                            \
    \                    [(equal? (first s) (first s)) (cond\n                   \
    \                                                                            \
    \                    [(equal? (first s) (first s)) (cond\n                   \
    \                                                                            \
    \                                     [(equal? (first s) (first s)) (cond\n  \
    \                                                                            \
    \                                                                        [(equal?\
    \ (first s) (first s)) (cond\n                                               \
    \                                                                            \
    \                             [else (cons (first s) (solve ", "  (cond\n    [(empty?\
    \ s) s]\n    [(character? (car s)) (cond\n                            [(char-lower?\
    \ (car s)) (cons (char-upper? (car s)) (cdr s))]\n                           \
    \ [(char-upper? (car s)) (cons (char-lower? (car s)) (cdr s))]\n             \
    \               [(char-lower? (car s)) (cons (car s) (cdr s))]\n             \
    \               [(char-upper? (car s)) (cons (car s) (cdr s))])]\n    [else (cons\
    \ (car s) (solve (cdr s)))]))\n</code>\n<|/ a tags=scheme,racket,functional-programming\
    \ |>\n<| a dscore=0 |>\n<code>"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
