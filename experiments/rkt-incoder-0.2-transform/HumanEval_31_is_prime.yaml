name: HumanEval_31_is_prime
language: rkt
prompt: "#lang racket\n\n;; Return true if a given number is prime, and false otherwise.\n\
  ;; >>> (is_prime 6)\n;; #f\n;; >>> (is_prime 101)\n;; #t\n;; >>> (is_prime 11)\n\
  ;; #t\n;; >>> (is_prime 13441)\n;; #t\n;; >>> (is_prime 61)\n;; #t\n;; >>> (is_prime\
  \ 4)\n;; #f\n;; >>> (is_prime 1)\n;; #f\n(define (is_prime n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_prime))\n\
  \    (check-equal? (candidate 6) #f)\n    (check-equal? (candidate 101) #t)\n  \
  \  (check-equal? (candidate 11) #t)\n    (check-equal? (candidate 13441) #t)\n \
  \   (check-equal? (candidate 61) #t)\n    (check-equal? (candidate 4) #f)\n    (check-equal?\
  \ (candidate 1) #f)\n    (check-equal? (candidate 5) #t)\n    (check-equal? (candidate\
  \ 11) #t)\n    (check-equal? (candidate 17) #t)\n    (check-equal? (candidate 85)\
  \ #f)\n    (check-equal? (candidate 77) #f)\n    (check-equal? (candidate 255379)\
  \ #f)\n))\n\n(test-humaneval)"
completions: ["  (cond ((= n 1) #f)\n        ((= n 2) #t)\n        ((= (modulo n 3)\
    \ 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond ((= n 1) #t)\n    \
    \    ((= n 2) #f)\n        ((= (mod n 3) 0) #f)\n        (else (is_prime (- n\
    \ 1)))))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n\
    \        [else (or (is_prime (- n 2)) (is_prime (- n 3)))]))\n", "  (cond ((=\
    \ n 1) #f)\n        ((= n 2) #t)\n        ((= (mod n 3) 0) #f)\n        (else\
    \ (is_prime (- n 1)))))\n", "  (cond ((= n 1) #t)\n        ((= n 2) #t)\n    \
    \    ((= (mod n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond [(=\
    \ n 1) #f]\n        [(= n 2) #t]\n        [(= (mod n 3) 0) #f]\n        [else\
    \ (is_prime (- n 1))]))\n", "  (cond [(= n 1) #f]\n        [(= n 2) #t]\n    \
    \    [(= (mod n 3) 0) #f]\n        [else (is_prime (- n 1))]))\n", "  (cond [(=\
    \ n 1) #t]\n        [(= (mod n 2) 0) #f]\n        [else (is_prime (- n 1))]))\n",
  "  (cond ((= n 1) #t)\n        ((= n 2) #f)\n        ((= (mod n 3) 0) #f)\n    \
    \    (else (is_prime (- n 1)))))\n", "  (cond [(= n 1) #f]\n        [(= n 2) #t]\n\
    \        [(= (mod n 3) 0) #t]\n        [else (is_prime (- n 1))]))\n", "  (cond\
    \ ((= n 2) #t)\n        ((= n 3) #f)\n        ((= (mod n 2) 0) #f)\n        (else\
    \ (is_prime (- n 1)))))\n", "  (cond [(= n 1) #f]\n        [(= n 2) #t]\n    \
    \    [(= (mod n 3) 0) #f]\n        [else (is_prime (- n 1))]))\n", "  (cond ((=\
    \ n 1) #t)\n        ((= n 2) #t)\n        ((= (mod n 3) 0) #f)\n        (else\
    \ (is_prime (- n 1)))))\n", "  (cond [(= n 1) #t]\n        [(= (mod n 2) 0) #f]\n\
    \        [else (is_prime (- n 1))]))\n", "  (cond ((= n 1) #t)\n        ((= n\
    \ 2) #f)\n        ((= (mod n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n",
  "  (cond ((= n 1) #t)\n        ((= n 2) #t)\n        ((= (mod n 3) 0) #f)\n    \
    \    (else (is_prime (- n 1)))))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n\
    \        [(= n 3) #t]\n        [(= n 4) #f]\n        [(= n 5) #f]\n        [(=\
    \ n 6) #f]\n        [(= n 7) #f]\n        [(= n 8) #f]\n        [(= n 9) #f]\n\
    \        [(= n 10) #f]\n        [(= n 11) #f]\n        [(= n 12) #f]\n       \
    \ [(= n 13) #f]\n        [(= n 14) #f]\n        [(= n 15) #f]\n        [(= n 16)\
    \ #f]\n        [(= n 17) #f]\n        [(= n 18) #f]\n        [(= n 19) #f]\n \
    \       [(= n 20) #f]\n        [(= n 21) #f]\n        [(= n 22) #f]\n        [(=\
    \ n 23) #f]\n        [(= n 24) #f]\n        [(= n 25) #f]\n        [(= n 26) #f]\n\
    \        [(= n 27) #f]\n        [(= n 28) #f]\n        [(= n 29) #f]\n       \
    \ [(= n 30) #f]\n        [(= n 31) #f]\n        [(= n 32) #f]\n        [(= n 33)\
    \ #f]\n        [(= n 34) #f]\n        [(= n 35) #f]\n        [(= n 36) #f]\n \
    \       [(= n 37) #f]\n        [(= n 38) #f]\n        [(= n 39) #f]\n        [(=\
    \ n 40) #f]\n        [(= n 41) #f]\n        [(= n 42) #f]\n        [(= n 43) #f]\n\
    \        [(= n 44) #f]\n        [(= n 45) #f]\n        [(= n 46) #f]\n       \
    \ [(= n 47) #f]\n        [(= n 48) #f]\n        [(= n 49) #f]\n        [(= n 50)\
    \ #f]\n        [(= n 51) #f]\n        [(= n 52) #f]\n        [(= n 53) #f]\n \
    \       [(= n 54) #f]\n        [(= n 55) #f]\n        [(= n 56) #f]\n        [(=\
    \ n 57) #f]\n        [(", "  (cond ((= n 1) #f)\n        ((= n 2) #t)\n      \
    \  ((= (modulo n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond ((=\
    \ n 1) #f)\n        ((= n 2) #t)\n        ((= (modulo n 3) 0) #f)\n        (else\
    \ (is_prime (- n 1)))))\n", "  (cond ((= n 1) #f)\n        ((= n 2) #t)\n    \
    \    ((= (mod n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond [(=\
    \ n 1) #f]\n        [(= n 2) #t]\n        [(= (mod n 3) 0) #f]\n        [else\
    \ (is_prime (- n 1))]))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n    \
    \    [(= n 3) #t]\n        [else (= (mod n 3) 0) #t]))\n", "  (cond [(= n 1) #t]\n\
    \        [(= n 2) #t]\n        [(= n 3) #t]\n        [(= (mod n 2) 0) #f]\n  \
    \      [else (or (is_prime (- n 2)) (is_prime (- n 3)))]))\n", "  (cond ((= n\
    \ 1) #t)\n        ((= n 2) #f)\n        ((= (mod n 3) 0) #f)\n        (else (is_prime\
    \ (- n 1)))))\n", "  (cond ((= n 1) #t)\n        ((= n 2) #t)\n        ((= (modulo\
    \ n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (if (= n 1)\n      #f\n\
    \      (let ((next (* n n)))\n        (if (= next 1)\n            #t\n       \
    \     (is_prime next))))) ;; #lang racket\n", "  (cond ((= n 2) #t)\n        ((=\
    \ n 3) #t)\n        ((= (mod n 2) 0) #f)\n        (else (is_prime (- n 1)))))\n",
  "  (cond ((= n 1) #t)\n        ((= n 2) #t)\n        ((= (mod n 3) 0) #f)\n    \
    \    (else (is_prime (- n 1)))))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n\
    \        [(= n 3) #t]\n        [else (or (is_prime (- n 2)) (is_prime (- n 3)))]))\n",
  "  (cond ((= n 1) #f)\n        ((= n 2) #t)\n        ((= (mod n 3) 0) #f)\n    \
    \    (else (is_prime (- n 1)))))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n\
    \        [(= n 3) #t]\n        [else (let ([a (* 2 n)]\n                    [b\
    \ (* 3 n)]\n                    [c (* 5 n)]\n                    [d (* 7 n)]\n\
    \                    [e (* 11 n)]\n                    [f (* 13 n)]\n        \
    \            [g (* 17 n)]\n                    [h (* 19 n)]\n                \
    \    [i (* 23 n)]\n                    [j (* 29 n)]\n                    [k (*\
    \ 31 n)]\n                    [l (* 37 n)]\n                    [m (* 41 n)]\n\
    \                    [n (* 43 n)]\n                    [o (* 47 n)]\n        \
    \            [p (* 51 n)]\n                    [q (* 53 n)]\n                \
    \    [r (* 59 n)]\n                    [s (* 61 n)]\n                    [t (*\
    \ 67 n)]\n                    [u (* 71 n)]\n                    [v (* 73 n)]\n\
    \                    [w (* 79 n)]\n                    [x (* 83 n)]\n        \
    \            [y (* 89 n)]\n                    [z (* 97 n)]\n                \
    \    [a (* 101 n)]\n                    [b (* 107 n)]\n                    [c\
    \ (* 111 n)]\n                    [d (* 117 n)]\n                    [e (* 121\
    \ n)]\n                    [f (* 127 n)]\n                    [g (* 131 n)]\n\
    \                    [h (* 137 n)]\n                    [i (* 143 n)]\n      \
    \              [j (* 149 n)]\n                    [k (* 151 n)]\n            \
    \        [l (* 157 n)]\n                    [m (* 163 n)]\n                  \
    \  [n (* 169 n)]\n                    [o (* 173 n)]\n                    [p (*\
    \ 179 n)]\n                    [q (* 181 n)]\n                    [r (* 187 n)]\n\
    \                    [s (* 191 n)]\n                    [t (* 197 n)]\n      \
    \              [u (* 203 n)]\n                    [v (* 209 n)]\n            \
    \        [w (* 211 n)]\n                    [x (* 217 n)]\n                  \
    \  [y (* 223 n)]\n                    [z (* 229 n)]\n                    [a (*\
    \ 251 n)]\n                    [b (* 257 n)]\n                    [c (* 263 n)]\n\
    \                    [d (* 269 n)]\n                    [e (* 271 ", "  (cond\
    \ ((= n 1) #f)\n        ((= n 2) #t)\n        ((= (mod n 2) 0) #f)\n        (else\
    \ (is_prime (- n 1)))))\n", "  (cond ((= n 1) #f)\n        ((= n 2) #t)\n    \
    \    ((= (mod n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond ((=\
    \ n 1) #f)\n        ((= n 2) #t)\n        ((= (mod n 3) 0) #f)\n        (else\
    \ (is_prime (- n 1)))))\n", "  (cond [(= n 1) #f]\n        [(= n 2) #t]\n    \
    \    [(= (mod n 3) 0) #t]\n        [else (is_prime (- n 1))]))\n", "  (cond [(=\
    \ n 1) #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n        [(= n 4) #f]\n\
    \        [(= n 5) #f]\n        [(= n 6) #f]\n        [(= n 7) #f]\n        [(=\
    \ n 8) #f]\n        [(= n 9) #f]\n        [(= n 10) #f]\n        [(= n 11) #f]\n\
    \        [(= n 12) #f]\n        [(= n 13) #f]\n        [(= n 14) #f]\n       \
    \ [(= n 15) #f]\n        [(= n 16) #f]\n        [(= n 17) #f]\n        [(= n 18)\
    \ #f]\n        [(= n 19) #f]\n        [(= n 20) #f]\n        [(= n 21) #f]\n \
    \       [(= n 22) #f]\n        [(= n 23) #f]\n        [(= n 24) #f]\n        [(=\
    \ n 25) #f]\n        [(= n 26) #f]\n        [(= n 27) #f]\n        [(= n 28) #f]\n\
    \        [(= n 29) #f]\n        [(= n 30) #f]\n        [(= n 31) #f]\n       \
    \ [(= n 32) #f]\n        [(= n 33) #f]\n        [(= n 34) #f]\n        [(= n 35)\
    \ #f]\n        [(= n 36) #f]\n        [(= n 37) #f]\n        [(= n 38) #f]\n \
    \       [(= n 39) #f]\n        [(= n 40) #f]\n        [(= n 41) #f]\n        [(=\
    \ n 42) #f]\n        [(= n 43) #f]\n        [(= n 44) #f]\n        [(= n 45) #f]\n\
    \        [(= n 46) #f]\n        [(= n 47) #f]\n        [(= n 48) #f]\n       \
    \ [(= n 49) #f]\n        [(= n 50) #f]\n        [(= n 51) #f]\n        [(= n 52)\
    \ #f]\n        [(= n 53) #f]\n        [(= n 54) #f]\n        [(= n 55) #f]\n \
    \       [(= n 56) #f]\n        [(= n 57) #f]\n        [(", "  (cond ((= n 1) #f)\n\
    \        ((= n 2) #t)\n        ((= (mod n 3) 0) #f)\n        (else (is_prime (-\
    \ n 1)))))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n\
    \        [(= n 5) #f]\n        [else (or (is_prime (- n 2)) (is_prime (- n 3)))]))\n",
  "  (cond ((= n 1) #t)\n        ((= n 2) #t)\n        ((= n 3) #t)\n        ((= (mod\
    \ n 2) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond [(= n 1) #t]\n\
    \        [(= n 2) #t]\n        [(= n 3) #t]\n        [else (or (is_prime (- n\
    \ 2)) (is_prime (- n 3)))]))\n", "  (cond ((= n 1) #f)\n        ((= n 2) #t)\n\
    \        ((= (mod n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond\
    \ ((= n 1) #t)\n        ((= n 2) #f)\n        ((= (mod n 3) 0) #f)\n        (else\
    \ (is_prime (- n 1)))))\n", "  (cond ((= n 1) #f)\n        ((= n 2) #t)\n    \
    \    ((= (mod n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (if (= n\
    \ 1)\n      #f\n      (let ((x (- n 1)))\n        (if (= (modulo n x) 0)\n   \
    \         #t\n            (is_prime x)))))\n", "  (cond ((= n 1) #f)\n       \
    \ ((= n 2) #t)\n        (else (and (is_prime (- n 1))\n                   (is_prime\
    \ (- n 2))))))\n", "  (cond ((= n 1) #f)\n        ((= n 2) #t)\n        ((= (mod\
    \ n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond ((= n 1) #f)\n\
    \        ((= n 2) #t)\n        ((= (mod n 3) 0) #f)\n        (else (is_prime (-\
    \ n 1)))))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n\
    \        [(= n 5) #f]\n        [else (or (is_prime (- n 2)) (is_prime (- n 3)))]))\n",
  "  (cond ((= n 1) #f)\n        ((= n 2) #t)\n        ((= (modulo n 3) 0) #f)\n \
    \       (else (is_prime (- n 1)))))\n", "  (cond ((= n 1) #f)\n        ((= n 2)\
    \ #t)\n        ((= (mod n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", " \
    \ (cond ((= n 1) #f)\n        ((= n 2) #t)\n        ((= (mod n 3) 0) #f)\n   \
    \     (else (is_prime (- n 1)))))\n", "  (cond [(= n 1) #t]\n        [(= n 2)\
    \ #t]\n        [(= n 3) #t]\n        [else (= (mod n 3) 0)]\n  )\n)\n", "  (cond\
    \ ((= n 1) #t)\n        ((= n 2) #f)\n        ((= (modulo n 3) 0) #f)\n      \
    \  (else (is_prime (- n 1)))))\n", "  (cond ((= n 1) #f)\n        ((= n 2) #t)\n\
    \        ((= (modulo n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond\
    \ ((= n 1) #f)\n        ((= n 2) #t)\n        ((= (mod n 3) 0) #f)\n        (else\
    \ (is_prime (- n 1)))))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n    \
    \    [(= n 3) #t]\n        [else (or (is_prime (- n 1)) (is_prime (- n 2)))]))\n",
  "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n        [else\
    \ (and (not (is_prime (- n 1))) (is_prime (- n 1)))]))\n", "  (if (= n 1)\n  \
    \    #f\n      (let ((x (* n n)))\n        (if (= x 1)\n            #t\n     \
    \       (is_prime x))))) ;; #lang racket\n", "  (cond [(= n 1) #t]\n        [(=\
    \ n 2) #t]\n        [(= n 3) #t]\n        [else (= (mod n 3) 0) #t]))\n", "  (cond\
    \ ((= n 1) #f)\n        ((= n 2) #t)\n        (else (or (is_prime (- n 1)) (is_prime\
    \ (- n 2))))))\n", "  (cond ((= n 1) #f)\n        ((= n 2) #t)\n        ((= (modulo\
    \ n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond [(= n 1) #f]\n\
    \        [(= n 2) #t]\n        [(= (mod n 3) 0) #f]\n        [else (is_prime (-\
    \ n 1))]))\n", "  (if (= n 1)\n      #f\n      (if (= (modulo n 2) 0)\n      \
    \    #t\n          (is_prime (- n 1)))))\n", "  (cond ((= n 1) #f)\n        ((=\
    \ n 2) #t)\n        (else (or (is_prime (- n 2)) (is_prime (- n 3))))))\n", " \
    \ (cond ((= n 1) #f)\n        ((= n 2) #t)\n        ((= (mod n 3) 0) #f)\n   \
    \     (else (is_prime (- n 1)))))\n", "  (cond ((= n 1) #f)\n        ((= n 2)\
    \ #t)\n        (else (or (is_prime (- n 1)) (is_prime (- n 2))))))\n", "  (cond\
    \ [(= n 1) #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n        [else (= (mod\
    \ n 3) 0)]\n  )\n)\n", "  (cond ((= n 1) #f)\n        ((= n 2) #t)\n        ((=\
    \ (modulo n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond ((= n\
    \ 1) #f)\n        ((= n 2) #t)\n        (else (and (is_prime (- n 1))\n      \
    \             (is_prime (- n 2))))))\n", "  (cond ((= n 1) #f)\n        ((= n\
    \ 2) #t)\n        ((= (mod n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n",
  "  (cond ((= n 1) #f)\n        ((= n 2) #t)\n        ((= (modulo n 3) 0) #f)\n \
    \       (else (is_prime (- n 1)))))\n", "  (cond [(= n 1) #f]\n        [(= n 2)\
    \ #t]\n        [(= (mod n 3) 0) #f]\n        [else (is_prime (- n 1))]))\n", " \
    \ (cond ((= n 1) #f)\n        ((= n 2) #t)\n        (else (or (is_prime (- n 2))\
    \ (is_prime (- n 3))))))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n   \
    \     [(= (mod n 3) 0) #f]\n        [else (is_prime (- n 1))]))\n", "  (cond [(=\
    \ n 1) #f]\n        [(= n 2) #t]\n        [(= (mod n 3) 0) #f]\n        [else\
    \ (or (is_prime (- n 2)) (is_prime (- n 1)))]))\n", "  (cond ((= n 2) #t)\n  \
    \      ((= n 3) #t)\n        ((= (mod n 2) 0) #f)\n        (else (is_prime (-\
    \ n 1)))))\n", "  (cond ((= n 1) #t)\n        ((= n 2) #t)\n        ((= (modulo\
    \ n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond [(= n 1) #t]\n\
    \        [(= n 2) #t]\n        [(= n 3) #f]\n        [(= (mod n 2) 0) #f]\n  \
    \      [else (is_prime (- n 1))]))\n", "  (cond ((= n 1) #f)\n        ((= n 2)\
    \ #t)\n        ((= (mod n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", " \
    \ (cond ((= n 1) #f)\n        ((= n 2) #t)\n        ((= (mod n 2) 0) #f)\n   \
    \     (else (is_prime (- n 1)))))\n", "  (if (= n 1)\n      #f\n      (let ((next\
    \ (is_prime (- n 1))))\n        (if (= next #f)\n            #t\n            (if\
    \ (= (modulo n next) 0)\n                #f\n                #t))))))\n", "  (cond\
    \ ((= n 1) #f)\n        ((= n 2) #t)\n        (else (or (is_prime (- n 1)) (is_prime\
    \ (- n 2))))))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n        [(= n\
    \ 3) #t]\n        [(= (mod n 2) 0) #f]\n        [else (or (is_prime (- n 2)) (is_prime\
    \ (- n 3)))]))\n", "  (cond ((= n 1) #f)\n        ((= n 2) #t)\n        ((= (mod\
    \ n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (if (= n 1)\n      #f\n\
    \      (let ((x (modulo n n)))\n        (if (= x 0)\n            #t\n        \
    \    (is_prime x))))))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n     \
    \   [(= (mod n 3) 0) #f]\n        [else (is_prime (- n 1))]))\n", "  (cond [(=\
    \ n 1) #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n        [else (= (mod\
    \ n 3) 0)]\n  ))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n        [(=\
    \ n 3) #t]\n        [(= n 5) #f]\n        [else (is_prime (- n 1))]))\n", "  (cond\
    \ ((= n 1) #f)\n        ((= n 2) #t)\n        ((= (modulo n 3) 0) #f)\n      \
    \  (else (is_prime (- n 1)))))\n", "  (cond ((= n 1) #t)\n        ((= n 2) #f)\n\
    \        ((= (mod n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond\
    \ [(= n 1) #f]\n        [(= n 2) #t]\n        [(= (mod n 3) 0) #t]\n        [else\
    \ (is_prime (- n 1))]))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n    \
    \    [(= n 3) #f]\n        [(= (mod n 2) 0) #f]\n        [else (is_prime (- n\
    \ 1))]))\n", "  (cond ((= n 1) #f)\n        ((= n 2) #t)\n        ((= (mod n 3)\
    \ 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond ((= n 2) #t)\n    \
    \    ((= n 3) #t)\n        ((= (mod n 2) 0) #f)\n        (else (is_prime (- n\
    \ 1)))))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n        [(= n 3) #f]\n\
    \        [else (or (is_prime (- n 2)) (is_prime (- n 3)))))\n", "  (cond ((= n\
    \ 1) #f)\n        ((= n 2) #t)\n        (else (and (is_prime (- n 1))\n      \
    \             (is_prime (- n 2))))))\n", "  (if (= n 1)\n      #f\n      (or (=\
    \ (modulo n 2) 1)\n          (is_prime (- n 1)))))\n", "  (cond ((= n 1) #t)\n\
    \        ((= n 2) #t)\n        ((= (modulo n 3) 0) #f)\n        (else (is_prime\
    \ (- n 1)))))\n", "  (cond ((= n 1) #f)\n        ((= n 2) #t)\n        ((= (modulo\
    \ n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond ((= n 1) #f)\n\
    \        ((= n 2) #t)\n        (else (or (is_prime (- n 1)) (is_prime (- n 2))))))\n",
  "  (if (= n 1)\n      #f\n      (or (= (modulo n 2) 1)\n          (is_prime (- n\
    \ 1)))))\n", "  (cond ((= n 1) #f)\n        ((= n 2) #t)\n        ((= (modulo\
    \ n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond ((= n 1) #f)\n\
    \        ((= n 2) #t)\n        ((= (mod n 3) 0) #f)\n        (else (is_prime (-\
    \ n 1)))))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n\
    \        [else (= (mod n 3) 0) #t]))\n", "  (cond [(= n 1) #t]\n        [(= n\
    \ 2) #t]\n        [(= n 3) #t]\n        [else (= (mod n 3) 0) #t]\n  ))\n", " \
    \ (cond ((= n 1) #f)\n        ((= n 2) #t)\n        ((= (modulo n 3) 0) #f)\n\
    \        (else (is_prime (- n 1)))))\n", "  (cond ((= n 1) #f)\n        ((= n\
    \ 2) #t)\n        ((= (mod n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n",
  "  (cond ((= n 1) #t)\n        ((= n 2) #f)\n        ((= (modulo n 3) 0) #f)\n \
    \       (else (is_prime (- n 1)))))\n", "  (cond ((= n 1) #f)\n        ((= n 2)\
    \ #t)\n        (else (or (is_prime (- n 1)) (is_prime (- n 2))))))\n", "  (cond\
    \ [(= n 1) #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n        [else (and\
    \ (not (even? (modulo n 2))) (not (even? (modulo n 3))))]))\n", "  (cond [(= n\
    \ 1) #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n        [(= n 5) #f]\n \
    \       [else (or (is_prime (- n 2)) (is_prime (- n 3))) (is_prime (- n 5))]))\n",
  "  (cond ((= n 1) #t)\n        ((= n 2) #f)\n        ((= (mod n 3) 0) #f)\n    \
    \    (else (is_prime (- n 1)))))\n", "  (cond ((= n 1) #f)\n        ((= n 2) #t)\n\
    \        ((= (mod n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond\
    \ ((= n 1) #f)\n        ((= n 2) #t)\n        ((= (modulo n 3) 0) #f)\n      \
    \  (else (is_prime (- n 1)))))\n", "  (cond ((= n 2) #t)\n        ((= n 3) #t)\n\
    \        ((= (modulo n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond\
    \ [(= n 1) #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n        [(= n 5) #f]\n\
    \        [else (or (is_prime (- n 2)) (is_prime (- n 3)))]))\n", "  (cond ((=\
    \ n 1) #f)\n        ((= n 2) #t)\n        ((= (modulo n 3) 0) #f)\n        (else\
    \ (is_prime (- n 1)))))\n", "  (cond [(= n 1) #f]\n        [(= n 2) #t]\n    \
    \    [(= (mod n 3) 0) #t]\n        [else (is_prime (- n 1))]))\n", "  (if (= n\
    \ 1)\n      #f\n      (let ((factors (prime-factors n)))\n        (and (= (length\
    \ factors) 1)\n             (= (first factors) n)))))\n", "  (cond ((= n 1) #t)\n\
    \        ((= n 2) #t)\n        ((= (mod n 3) 0) #f)\n        (else (is_prime (-\
    \ n 1)))))\n", "  (cond [(= n 1) #f]\n        [(= n 2) #t]\n        [(= (mod n\
    \ 3) 0) #t]\n        [else (is_prime (- n 1))]))\n", "  (cond ((= n 1) #f)\n \
    \       ((= n 2) #t)\n        (else (or (is_prime (- n 1)) (is_prime (- n 2))))))\n",
  "  (cond ((= n 2) #t)\n        ((= n 3) #t)\n        ((= (mod n 2) 0) #f)\n    \
    \    (else (is_prime (- n 1)))))\n", "  (cond ((= n 1) #f)\n        ((= n 2) #t)\n\
    \        (else (or (is_prime (- n 1)) (is_prime (- n 2))))))\n", "  (cond ((=\
    \ n 1) #t)\n        ((= n 2) #f)\n        ((= (mod n 3) 0) #f)\n        (else\
    \ (is_prime (- n 1)))))\n", "  (cond ((= n 1) #t)\n        ((= n 2) #t)\n    \
    \    ((= (mod n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond ((=\
    \ n 1) #t)\n        ((= n 2) #t)\n        ((= (modulo n 3) 0) #f)\n        (else\
    \ (is_prime (- n 1)))))\n", "  (cond ((= n 1) #f)\n        ((= n 2) #t)\n    \
    \    ((= (modulo n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond\
    \ ((= n 1) #f)\n        ((= n 2) #t)\n        (else (and (is_prime (- n 1))\n\
    \                   (is_prime (- n 2))))))\n", "  (cond [(= n 1) #t]\n       \
    \ [(= n 2) #t]\n        [(= n 3) #t]\n        [else (and (= (mod n 2) 1)\n   \
    \                (is_prime (/ n 2)))]))\n", "  (if (= n 1)\n      #f\n      (let\
    \ ((x (- n 1)))\n        (if (= (modulo n x) 0)\n            #t\n            (is_prime\
    \ x)))))\n", "  (cond [(= n 1) #f]\n        [(= n 2) #t]\n        [(= (mod n 3)\
    \ 0) #f]\n        [else (is_prime (- n 1))]))\n", "  (cond [(= n 1) #t]\n    \
    \    [(= n 2) #t]\n        [(= n 3) #t]\n        [else (or (is_prime (- n 2))\
    \ (is_prime (- n 3)))]))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n   \
    \     [(= n 3) #t]\n        [else (or (is_prime (- n 2)) (is_prime (- n 3)))]))\n",
  "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n        [(= (mod\
    \ n 3) 0) #f]\n        [else (is_prime (- n 1))]))\n", "  (cond ((= n 1) #f)\n\
    \        ((= n 2) #t)\n        ((= (mod n 3) 0) #f)\n        (else (is_prime (-\
    \ n 1)))))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n\
    \        [else (= (mod n 3) 0) #t]))\n", "  (cond [(= n 1) #t]\n        [(= n\
    \ 2) #t]\n        [(= n 3) #t]\n        [(= n 5) #f]\n        [else (or (is_prime\
    \ (- n 2)) (is_prime (- n 3)))]))\n", "  (cond [(= n 1) #t]\n        [(= n 2)\
    \ #t]\n        [(= n 3) #t]\n        [else (= (mod n 3) 0)]\n  ))\n", "  (cond\
    \ ((= n 1) #t)\n        ((= n 2) #f)\n        (else (or (is_prime (- n 1)) (is_prime\
    \ (- n 2))))))\n", "  (cond ((= n 1) #f)\n        ((= n 2) #t)\n        ((= (mod\
    \ n 2) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond [(= n 1) #f]\n\
    \        [(= n 2) #t]\n        [(= (mod n 3) 0) #t]\n        [else (is_prime (-\
    \ n 1))]))\n", "  (cond ((= n 1) #t)\n        ((= n 2) #t)\n        ((= (mod n\
    \ 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond [(= n 1) #t]\n \
    \       [(= n 2) #t]\n        [(= n 3) #t]\n        [else (or (is_prime (- n 2))\
    \ (is_prime (- n 3)))]))\n", "  (if (= n 1)\n      #f\n      (let ((i (- n 1)))\n\
    \        (if (= i 0)\n            #t\n            (let ((j (- i 1)))\n       \
    \       (if (= j 0)\n                  #t\n                  (let ((k (- j 1)))\n\
    \                    (if (= k 0)\n                        #t\n               \
    \         (let ((l (- k 1)))\n                          (if (= l 0)\n        \
    \                      #t\n                              (let ((m (- l 1)))\n\
    \                                (if (= m 0)\n                               \
    \     #t\n                                    (let ((p (- m 1)))\n           \
    \                           (if (= p 0)\n                                    \
    \      #t\n                                          (let ((q (- p 1)))\n    \
    \                                        (if (= q 0)\n                       \
    \                         #t\n                                               \
    \ (let ((r (- q 1)))\n                                                  (if (=\
    \ r 0)\n                                                      #t\n           \
    \                                           (let ((s (- r 1)))\n             \
    \                                           (if (= s 0)\n                    \
    \                                        #t\n                                \
    \                            (let ((t (- s 1)))\n                            \
    \                                  (if (= t 0)\n                             \
    \                                     #t\n                                   \
    \                               (let ((u (- t 1)))\n                         \
    \                                           (if (= u 0)\n                    \
    \                                                    #t\n                    \
    \                                                    (let ((v (- u 1)))\n    \
    \                                                      (if (= v 0)\n         \
    \                                                     #t\n                   \
    \                                           (let ((w (- v 1)))\n             \
    \                                                   (if (= w 0)\n            \
    \                                                        #t\n                \
    \                                                    (let ((x (- w 1)))\n    \
    \                                                                  (if (= x 0)\n\
    \                                                                          #t\n\
    \                                                                          (let\
    \ ((y (- x 1)))\n                                                            \
    \                (if (= y 0)\n                                               \
    \                                 #t\n                                       \
    \                                         (let ((z (- y 1)))\n               \
    \                                                                   (if (= z 0)\n\
    \                                                                            \
    \          #t\n                                                              \
    \                        (let ((a (- z 1)))\n                                \
    \                                        (if (= a 0)\n                       \
    \                                                     #t\n                   \
    \                                                         (let ((b (- a 1)))\n\
    \                                                                            \
    \  (if (= b 0)\n                                                             \
    \                     #t\n                                                   \
    \                               (let ((c (- b 1)))\n                         \
    \                                           (if (= c 0)\n                    \
    \                                                    #t\n                    \
    \                                                    (let ((d (- c 1)))\n    \
    \                                                                      (if (=\
    \ d 0)\n                                                                     \
    \         #t\n                                                               \
    \               (let ((e (- d 1)))\n                                         \
    \                                       (if (= e 0)\n                        \
    \                                                            #t\n            \
    \                                                                        (let\
    \ ((f (- e 1)))\n                                                            \
    \                          (if (= f 0)\n                                     \
    \                                                     #t\n                   \
    \                                                                       (let ((g\
    \ (- f 1)))\n                                                                \
    \                            (if (= g 0)\n                                   \
    \                                                             #t\n           \
    \                                                                            \
    \         (let ((h (- g 1)))\n", "  (cond [(= n 1) #t]\n        [(= (mod n 2)\
    \ 0) #f]\n        [else (is_prime (- n 1))]))\n", "  (cond [(= n 1) #f]\n    \
    \    [(= n 2) #t]\n        [(= (mod n 3) 0) #t]\n        [else (is_prime (- n\
    \ 1))]))\n", "  (cond [(= n 1) #f]\n        [(= n 2) #t]\n        [(= (mod n 3)\
    \ 0) #f]\n        [else (is_prime (- n 1))]))\n", "  (cond ((= n 1) #f)\n    \
    \    ((= n 2) #t)\n        (else (or (is_prime (- n 1)) (is_prime (- n 2))))))\n",
  "  (cond [(= n 1) #f]\n        [(= n 2) #t]\n        [(= (mod n 3) 0) #f]\n    \
    \    [else (is_prime (- n 1))]))\n", "  (cond [(= n 1) #f]\n        [(= n 2) #t]\n\
    \        [(= (mod n 3) 0) #t]\n        [else (is_prime (- n 1))]))\n", "  (cond\
    \ ((= n 1) #t)\n        ((= n 2) #f)\n        ((= (modulo n 3) 0) #f)\n      \
    \  (else (is_prime (- n 1)))))\n", "  (cond [(= n 1) #f]\n        [(= n 2) #t]\n\
    \        [(= (mod n 3) 0) #f]\n        [else (is_prime (- n 1))]))\n", "  (cond\
    \ ((= n 1) #f)\n        ((= n 2) #t)\n        ((= (mod n 3) 0) #f)\n        (else\
    \ (is_prime (- n 1)))))\n", "  (cond [(= n 1) #f]\n        [(= n 2) #t]\n    \
    \    [(= (mod n 3) 0) #t]\n        [else (is_prime (- n 1))]))\n", "  (cond ((=\
    \ n 1) #t)\n        ((= n 2) #f)\n        ((= (modulo n 3) 0) #f)\n        (else\
    \ (is_prime (- n 1)))))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n    \
    \    [(= n 3) #t]\n        [else (or (is_prime (- n 2)) (is_prime (- n 3)))))\n",
  "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n        [else\
    \ (or (is_prime (- n 2)) (is_prime (- n 3)))]))\n", "  (cond ((= n 2) #t)\n  \
    \      ((= n 3) #t)\n        ((= (mod n 2) 0) #f)\n        (else (is_prime (-\
    \ n 1)))))\n", "  (if (= n 1)\n      #f\n      (let ((x (* n n)))\n        (if\
    \ (= x 1)\n            #t\n            (is_prime x)))))\n", "  (cond [(= n 1)\
    \ #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n        [else (= (mod n 3)\
    \ 0) #f]))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n\
    \        [(= n 4) #f]\n        [(= n 5) #f]\n        [(= n 6) #f]\n        [(=\
    \ n 7) #f]\n        [(= n 8) #f]\n        [(= n 9) #f]\n        [else (= (mod\
    \ n 2) 0) #t]))\n", "  (cond [(= n 1) #t]\n        [(= (mod n 2) 0) #f]\n    \
    \    [else (is_prime (- n 1))]))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n\
    \        [(= n 3) #t]\n        [else (or (is_prime (- n 2)) (is_prime (- n 3)))]))\n",
  "  (cond ((= n 1) #f)\n        ((= n 2) #t)\n        (else (or (is_prime (- n 1))\
    \ (is_prime (- n 2))))))\n", "  (if (= n 1)\n      #f\n      (let ((factors (prime-factors\
    \ n)))\n        (not (null? (remove-if (lambda (factor) (= n factor)) factors))))))\n",
  "  (cond ((= n 1) #f)\n        ((= n 2) #t)\n        ((= (mod n 3) 0) #f)\n    \
    \    (else (is_prime (- n 1)))))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n\
    \        [(= n 3) #t]\n        [else (= (mod n 3) 0) #t]))\n", "  (cond ((= n\
    \ 1) #f)\n        ((= n 2) #t)\n        ((= (modulo n 3) 0) #f)\n        (else\
    \ (is_prime (- n 1)))))\n", "  (cond ((= n 1) #f)\n        ((= n 2) #t)\n    \
    \    ((= (mod n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond ((=\
    \ n 1) #f)\n        ((= n 2) #t)\n        (else (or (is_prime (- n 1)) (is_prime\
    \ (- n 2))))))\n", "  (cond ((= n 1) #t)\n        ((= n 2) #t)\n        ((= (modulo\
    \ n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond [(= n 1) #t]\n\
    \        [(= n 2) #t]\n        [(= n 3) #t]\n        [else (or (is_prime (- n\
    \ 2)) (is_prime (- n 3)))))\n", "  (cond ((= n 1) #f)\n        ((= n 2) #t)\n\
    \        ((= (mod n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond\
    \ [(= n 1) #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n        [else (= (mod\
    \ n 3) 0)]\n  )\n)\n", "  (cond [(= n 1) #f]\n        [(= n 2) #t]\n        [(=\
    \ (mod n 3) 0) #t]\n        [else (is_prime (- n 1))]))\n", "  (cond ((= n 2)\
    \ #t)\n        ((= n 3) #f)\n        (else (or (is_prime (- n 2)) (is_prime (-\
    \ n 3))))))\n", "  (cond ((= n 1) #f)\n        ((= n 2) #t)\n        (else (or\
    \ (is_prime (- n 1)) (is_prime (- n 2))))))\n", "  (if (= n 1)\n      #f\n   \
    \   (let ((x (- n 1)))\n        (if (= (modulo n x) 0)\n            #t\n     \
    \       (is_prime x)))))\n", "  (cond ((= n 2) #t)\n        ((= n 3) #t)\n   \
    \     ((= (mod n 2) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond ((=\
    \ n 2) #t)\n        ((= n 3) #t)\n        ((= (mod n 2) 0) #f)\n        (else\
    \ (is_prime (- n 1)))))\n", "  (cond ((= n 1) #f)\n        ((= n 2) #t)\n    \
    \    (else (or (is_prime (- n 1)) (is_prime (- n 2))))))\n", "  (cond [(= n 1)\
    \ #f]\n        [(= n 2) #t]\n        [(= (mod n 3) 0) #f]\n        [else (is_prime\
    \ (- n 1))]))\n", "  (cond ((= n 1) #f)\n        ((= n 2) #t)\n        ((= (mod\
    \ n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond ((= n 1) #f)\n\
    \        ((= n 2) #t)\n        ((= (mod n 3) 0) #f)\n        (else (is_prime (-\
    \ n 1)))))\n", "  (cond ((= n 1) #f)\n        ((= n 2) #t)\n        ((= (mod n\
    \ 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond [(= n 1) #f]\n \
    \       [(= n 2) #t]\n        [(= (mod n 3) 0) #t]\n        [else (is_prime (-\
    \ n 1))]))\n", "  (cond ((= n 1) #f)\n        ((= n 2) #t)\n        ((= (mod n\
    \ 2) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond ((= n 2) #t)\n \
    \       ((= n 3) #t)\n        ((= (modulo n 3) 0) #f)\n        (else (is_prime\
    \ (- n 1)))))\n", "  (cond ((= n 1) #f)\n        ((= n 2) #t)\n        ((= (mod\
    \ n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond [(= n 1) #t]\n\
    \        [(= n 2) #t]\n        [(= n 3) #t]\n        [else (or (is_prime (- n\
    \ 2)) (is_prime (- n 3)))))\n", "  (cond ((= n 1) #f)\n        ((= n 2) #t)\n\
    \        ((= (modulo n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond\
    \ [(= n 1) #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n        [else (or\
    \ (is_prime (- n 2)) (is_prime (- n 3)))]))\n", "  (cond ((= n 1) #f)\n      \
    \  ((= n 2) #t)\n        ((= (modulo n 3) 0) #f)\n        (else (is_prime (- n\
    \ 1)))))\n", "  (cond ((= n 1) #t)\n        ((= n 2) #t)\n        ((= (modulo\
    \ n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond [(= n 1) #t]\n\
    \        [(= n 2) #t]\n        [(= n 3) #t]\n        [else (or (is_prime (- n\
    \ 1)) (is_prime (- n 2)))]))\n", "  (cond ((= n 2) #t)\n        ((= n 1) #f)\n\
    \        (else (or (is_prime (- n 1))\n                  (is_prime (- n 2))))))\n",
  "  (cond ((= n 1) #f)\n        ((= n 2) #t)\n        ((= (mod n 3) 0) #f)\n    \
    \    (else (is_prime (- n 1)))))\n", "  (cond ((= n 1) #t)\n        ((= n 2) #t)\n\
    \        ((= (mod n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond\
    \ ((= n 1) #f)\n        ((= n 2) #t)\n        ((= (mod n 3) 0) #f)\n        (else\
    \ (is_prime (- n 1)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
