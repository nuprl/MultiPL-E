name: HumanEval_31_is_prime
language: rkt
prompt: "#lang racket\n\n;; Return true if a given number is prime, and false otherwise.\n\
  ;; >>> (is_prime 6)\n;; #f\n;; >>> (is_prime 101)\n;; #t\n;; >>> (is_prime 11)\n\
  ;; #t\n;; >>> (is_prime 13441)\n;; #t\n;; >>> (is_prime 61)\n;; #t\n;; >>> (is_prime\
  \ 4)\n;; #f\n;; >>> (is_prime 1)\n;; #f\n(define (is_prime n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_prime))\n\
  \    (check-equal? (candidate 6) #f)\n    (check-equal? (candidate 101) #t)\n  \
  \  (check-equal? (candidate 11) #t)\n    (check-equal? (candidate 13441) #t)\n \
  \   (check-equal? (candidate 61) #t)\n    (check-equal? (candidate 4) #f)\n    (check-equal?\
  \ (candidate 1) #f)\n    (check-equal? (candidate 5) #t)\n    (check-equal? (candidate\
  \ 11) #t)\n    (check-equal? (candidate 17) #t)\n    (check-equal? (candidate 85)\
  \ #f)\n    (check-equal? (candidate 77) #f)\n    (check-equal? (candidate 255379)\
  \ #f)\n))\n\n(test-humaneval)"
completions: ["  (cond ((= n 1) #f)\n        ((= n 2) #t)\n        ((= (modulo n 3)\
    \ 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond ((= n 1) #t)\n    \
    \    ((= n 2) #f)\n        ((= (mod n 3) 0) #f)\n        (else (is_prime (- n\
    \ 1)))))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n        [(= n 3) #t]\n\
    \        [else (or (is_prime (- n 2)) (is_prime (- n 3)))]))\n", "  (cond ((=\
    \ n 1) #f)\n        ((= n 2) #t)\n        ((= (mod n 3) 0) #f)\n        (else\
    \ (is_prime (- n 1)))))\n", "  (cond ((= n 1) #t)\n        ((= n 2) #t)\n    \
    \    ((= (mod n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond [(=\
    \ n 1) #f]\n        [(= n 2) #t]\n        [(= (mod n 3) 0) #f]\n        [else\
    \ (is_prime (- n 1))]))\n", "  (cond [(= n 1) #f]\n        [(= n 2) #t]\n    \
    \    [(= (mod n 3) 0) #f]\n        [else (is_prime (- n 1))]))\n", "  (cond [(=\
    \ n 1) #t]\n        [(= (mod n 2) 0) #f]\n        [else (is_prime (- n 1))]))\n",
  "  (cond ((= n 1) #t)\n        ((= n 2) #f)\n        ((= (mod n 3) 0) #f)\n    \
    \    (else (is_prime (- n 1)))))\n", "  (cond [(= n 1) #f]\n        [(= n 2) #t]\n\
    \        [(= (mod n 3) 0) #t]\n        [else (is_prime (- n 1))]))\n", "  (cond\
    \ ((= n 2) #t)\n        ((= n 3) #f)\n        ((= (mod n 2) 0) #f)\n        (else\
    \ (is_prime (- n 1)))))\n", "  (cond [(= n 1) #f]\n        [(= n 2) #t]\n    \
    \    [(= (mod n 3) 0) #f]\n        [else (is_prime (- n 1))]))\n", "  (cond ((=\
    \ n 1) #t)\n        ((= n 2) #t)\n        ((= (mod n 3) 0) #f)\n        (else\
    \ (is_prime (- n 1)))))\n", "  (cond [(= n 1) #t]\n        [(= (mod n 2) 0) #f]\n\
    \        [else (is_prime (- n 1))]))\n", "  (cond ((= n 1) #t)\n        ((= n\
    \ 2) #f)\n        ((= (mod n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n",
  "  (cond ((= n 1) #t)\n        ((= n 2) #t)\n        ((= (mod n 3) 0) #f)\n    \
    \    (else (is_prime (- n 1)))))\n", "  (cond [(= n 1) #t]\n        [(= n 2) #t]\n\
    \        [(= n 3) #t]\n        [(= n 4) #f]\n        [(= n 5) #f]\n        [(=\
    \ n 6) #f]\n        [(= n 7) #f]\n        [(= n 8) #f]\n        [(= n 9) #f]\n\
    \        [(= n 10) #f]\n        [(= n 11) #f]\n        [(= n 12) #f]\n       \
    \ [(= n 13) #f]\n        [(= n 14) #f]\n        [(= n 15) #f]\n        [(= n 16)\
    \ #f]\n        [(= n 17) #f]\n        [(= n 18) #f]\n        [(= n 19) #f]\n \
    \       [(= n 20) #f]\n        [(= n 21) #f]\n        [(= n 22) #f]\n        [(=\
    \ n 23) #f]\n        [(= n 24) #f]\n        [(= n 25) #f]\n        [(= n 26) #f]\n\
    \        [(= n 27) #f]\n        [(= n 28) #f]\n        [(= n 29) #f]\n       \
    \ [(= n 30) #f]\n        [(= n 31) #f]\n        [(= n 32) #f]\n        [(= n 33)\
    \ #f]\n        [(= n 34) #f]\n        [(= n 35) #f]\n        [(= n 36) #f]\n \
    \       [(= n 37) #f]\n        [(= n 38) #f]\n        [(= n 39) #f]\n        [(=\
    \ n 40) #f]\n        [(= n 41) #f]\n        [(= n 42) #f]\n        [(= n 43) #f]\n\
    \        [(= n 44) #f]\n        [(= n 45) #f]\n        [(= n 46) #f]\n       \
    \ [(= n 47) #f]\n        [(= n 48) #f]\n        [(= n 49) #f]\n        [(= n 50)\
    \ #f]\n        [(= n 51) #f]\n        [(= n 52) #f]\n        [(= n 53) #f]\n \
    \       [(= n 54) #f]\n        [(= n 55) #f]\n        [(= n 56) #f]\n        [(=\
    \ n 57) #f]\n        [(", "  (cond ((= n 1) #f)\n        ((= n 2) #t)\n      \
    \  ((= (modulo n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n", "  (cond ((=\
    \ n 1) #f)\n        ((= n 2) #t)\n        ((= (modulo n 3) 0) #f)\n        (else\
    \ (is_prime (- n 1)))))\n", "  (cond ((= n 1) #f)\n        ((= n 2) #t)\n    \
    \    ((= (mod n 3) 0) #f)\n        (else (is_prime (- n 1)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
