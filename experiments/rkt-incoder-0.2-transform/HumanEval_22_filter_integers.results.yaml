language: rkt
name: HumanEval_22_filter_integers
results:
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) (integer? x))) values))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond ((null? values) '())\n        ((number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values))))\n        (else (filter_integers\
    \ (cdr values)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw9dg489h.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond\n    [(empty? values) '()]\n    [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n    [else (filter_integers (cdr\
    \ values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate filter_integers))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list\
    \ 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3\
    \ 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmk7dqihd.rkt:20:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(null? values) '()]\n        [(number? values) values]\n \
    \       [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3__101ma.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3__101ma.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(null? values) '()]\n        [(number? values) values]\n \
    \       [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3__101ma.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3__101ma.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) (integer? x))) values))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) (integer? x))) values))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? values) values]\n\
    \        [else (append (filter_integers (first values))\n                    \
    \  (filter_integers (rest values)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9dk09y_x.rkt:20:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9dk09y_x.rkt:21:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"c\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (first values)) (cons\
    \ (first values) (filter_integers (rest values)))]\n        [else (filter_integers\
    \ (rest values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoo21rfg0.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(null? values) '()]\n        [(number? values) values]\n \
    \       [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3__101ma.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3__101ma.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (number? x))\n         values))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list\
    \ ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\"\
    \ 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwj9aizsd.rkt:18:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(null? values) '()]\n        [(number? values) values]\n \
    \       [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3__101ma.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3__101ma.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (if (null? values)\n      '()\n      (cons (car values)\n       \
    \     (filter_integers (cdr values)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9z14bfrf.rkt:20:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9z14bfrf.rkt:21:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (if (null? values)\n      '()\n      (if (number? (car values))\n\
    \          (cons (car values) (filter_integers (cdr values)))\n          (filter_integers\
    \ (cdr values)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb2bj_77o.rkt:21:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (if (null? values)\n      '()\n      (cons (car values)\n       \
    \     (filter_integers (cdr values)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9z14bfrf.rkt:20:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9z14bfrf.rkt:21:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond ((null? values) '())\n        ((number? values) values)\n \
    \       (else (append (filter_integers (first values))\n                     \
    \ (filter_integers (rest values))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpva329b6v.rkt:20:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpva329b6v.rkt:21:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"c\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(null? values) '()]\n        [(number? values) values]\n \
    \       [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3__101ma.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3__101ma.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond\n    [(empty? values) '()]\n    [(number? values) (list values)]\n\
    \    [else (append (filter_integers (first values))\n                  (filter_integers\
    \ (rest values)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxu12uenf.rkt:21:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpxu12uenf.rkt:22:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"c\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond\n    [(empty? values) '()]\n    [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n    [else (filter_integers (cdr\
    \ values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate filter_integers))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list\
    \ 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3\
    \ 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmk7dqihd.rkt:20:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(null? values) '()]\n        [(number? values) values]\n \
    \       [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3__101ma.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3__101ma.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (first values)) (cons\
    \ (first values) (filter_integers (rest values)))]\n        [else (filter_integers\
    \ (rest values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoo21rfg0.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (if (null? values)\n      '()\n      (cons (car values)\n       \
    \     (filter_integers (cdr values)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9z14bfrf.rkt:20:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9z14bfrf.rkt:21:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) (integer? x))) values))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? values) values]\n\
    \        [else (cons (first values) (filter_integers (rest values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpazuebq_f.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpazuebq_f.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? values) values]\n\
    \        [else (append (filter_integers (first values))\n                    \
    \  (filter_integers (rest values)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9dk09y_x.rkt:20:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9dk09y_x.rkt:21:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"c\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (if (null? values)\n      '()\n      (cons (car values)\n       \
    \     (filter_integers (cdr values)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9z14bfrf.rkt:20:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9z14bfrf.rkt:21:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond ((null? values) '())\n        ((number? values) values)\n \
    \       (else (append (filter_integers (first values))\n                     \
    \ (filter_integers (rest values))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpva329b6v.rkt:20:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpva329b6v.rkt:21:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"c\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(null? values) '()]\n        [(number? values) values]\n \
    \       [else (append (filter_integers (first values))\n                     \
    \ (filter_integers (rest values)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiu2wg3rp.rkt:20:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpiu2wg3rp.rkt:21:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"c\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond\n    [(empty? values) '()]\n    [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n    [else (filter_integers (cdr\
    \ values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate filter_integers))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list\
    \ 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3\
    \ 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmk7dqihd.rkt:20:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (if (null? values)\n      '()\n      (cons (car values)\n       \
    \     (filter_integers (cdr values)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9z14bfrf.rkt:20:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9z14bfrf.rkt:21:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond\n    [(empty? values) '()]\n    [(number? (first values)) (cons\
    \ (first values) (filter_integers (rest values)))]\n    [else (filter_integers\
    \ (rest values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplq0otth2.rkt:20:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond ((null? values) '())\n        ((number? values) values)\n \
    \       (else (append (filter_integers (first values))\n                     \
    \ (filter_integers (rest values))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpva329b6v.rkt:20:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpva329b6v.rkt:21:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"c\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (v) (number? v)) values))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list\
    \ ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\"\
    \ 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbia92fp_.rkt:17:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (if (null? values)\n      '()\n      (if (number? values) \n    \
    \      (values)\n          (cons (car values) (filter_integers (cdr values))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0o7p_ain.rkt:21:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0o7p_ain.rkt:22:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) (integer? x))) values))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? values) values]\n\
    \        [else (cons (first values) (filter_integers (rest values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpazuebq_f.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpazuebq_f.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond ((null? values) values)\n        ((number? values) values)\n\
    \        (else (filter_integers (cdr values)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_integers))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list\
    \ ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\"\
    \ 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpk9f3lwt6.rkt:19:4

    actual:     ''()

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpk9f3lwt6.rkt:20:4

    actual:     ''()

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (if (null? values)\n      '()\n      (if (number? (car values))\n\
    \          (cons (car values) (filter_integers (cdr values)))\n          (filter_integers\
    \ (cdr values)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb2bj_77o.rkt:21:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(null? values) '()]\n        [(number? values) values]\n \
    \       [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3__101ma.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3__101ma.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond\n    [(empty? values) '()]\n    [(number? (first values)) (cons\
    \ (first values) (filter_integers (rest values)))]\n    [else (filter_integers\
    \ (rest values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplq0otth2.rkt:20:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond ((null? values) '())\n        ((number? values) values)\n \
    \       (else (append (filter_integers (first values))\n                     \
    \ (filter_integers (rest values))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpva329b6v.rkt:20:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpva329b6v.rkt:21:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"c\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(null? values) '()]\n        [(number? values) values]\n \
    \       [else (append (filter_integers (first values))\n                     \
    \ (filter_integers (rest values)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiu2wg3rp.rkt:20:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpiu2wg3rp.rkt:21:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"c\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (first values)) (cons\
    \ (first values) (filter_integers (rest values)))]\n        [else (filter_integers\
    \ (rest values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoo21rfg0.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) (integer? x))) values))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond ((null? values) '())\n        ((number? values) values)\n \
    \       (else (append (filter_integers (first values))\n                     \
    \ (filter_integers (rest values))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpva329b6v.rkt:20:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpva329b6v.rkt:21:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"c\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (number? x))\n         values))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list\
    \ ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\"\
    \ 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwj9aizsd.rkt:18:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) (integer? x))) values))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (first values)) (cons\
    \ (first values) (filter_integers (rest values)))]\n        [else (filter_integers\
    \ (rest values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoo21rfg0.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) (integer? x))) values))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond ((null? values) '())\n        ((number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values))))\n        (else (filter_integers\
    \ (cdr values)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw9dg489h.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (if (null? values)\n      '()\n      (cons (car values)\n       \
    \     (filter_integers (cdr values)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9z14bfrf.rkt:20:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9z14bfrf.rkt:21:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) (integer? x))) values))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (first values)) (cons\
    \ (first values) (filter_integers (rest values)))]\n        [else (filter_integers\
    \ (rest values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoo21rfg0.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (v) (number? v))\n         values))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list\
    \ ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\"\
    \ 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp92sa1ewa.rkt:18:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (cons (car values)\
    \ (filter_integers (cdr values)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwjfr9nnr.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwjfr9nnr.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) (integer? x)))\n         values))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) (integer? x))) values))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) (integer? x))) values))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond ((null? values) '())\n        ((number? values) values)\n \
    \       (else (append (filter_integers (first values))\n                     \
    \ (filter_integers (rest values))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpva329b6v.rkt:20:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpva329b6v.rkt:21:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"c\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (if (null? values)\n      '()\n      (cons (car values)\n       \
    \     (filter_integers (cdr values)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9z14bfrf.rkt:20:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9z14bfrf.rkt:21:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x y)\n            (and (number? x) (number? y))\n\
    \            (not (and (number? x) (number? y)))\n            (not (and (number?\
    \ y) (number? x))))\n        values))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpab9az8tv.rkt:20:4\n\
    \nfilter: contract violation\n  expected: (any/c . -> . any/c)\n  given: #<procedure:...tmp/tmpab9az8tv.rkt:9:10>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpab9az8tv.rkt:21:4\n\nfilter: contract violation\n  expected:\
    \ (any/c . -> . any/c)\n  given: #<procedure:...tmp/tmpab9az8tv.rkt:9:10>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpab9az8tv.rkt:22:4\n\
    \nfilter: contract violation\n  expected: (any/c . -> . any/c)\n  given: #<procedure:...tmp/tmpab9az8tv.rkt:9:10>\n\
    --------------------\n"
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (if (null? values)\n      '()\n      (cons (car values)\n       \
    \     (filter_integers (cdr values)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9z14bfrf.rkt:20:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9z14bfrf.rkt:21:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x y)\n            (and (number? x)\n           \
    \      (number? y))\n            (integer? x))\n          values))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj64bc2ou.rkt:20:4\n\
    \nfilter: contract violation\n  expected: (any/c . -> . any/c)\n  given: #<procedure:...tmp/tmpj64bc2ou.rkt:9:10>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpj64bc2ou.rkt:21:4\n\nfilter: contract violation\n  expected:\
    \ (any/c . -> . any/c)\n  given: #<procedure:...tmp/tmpj64bc2ou.rkt:9:10>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj64bc2ou.rkt:22:4\n\
    \nfilter: contract violation\n  expected: (any/c . -> . any/c)\n  given: #<procedure:...tmp/tmpj64bc2ou.rkt:9:10>\n\
    --------------------\n"
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) (integer? x))) values))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (first values)) (cons\
    \ (first values) (filter_integers (rest values)))]\n        [else (filter_integers\
    \ (rest values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoo21rfg0.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) (integer? x))) values))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(null? values) '()]\n        [(number? values) values]\n \
    \       [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3__101ma.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3__101ma.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (first values)) (cons\
    \ (first values) (filter_integers (rest values)))]\n        [else (filter_integers\
    \ (rest values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoo21rfg0.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond\n    [(empty? values) '()]\n    [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n    [else (cons (car values)\
    \ (filter_integers (cdr values)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1ww3yffw.rkt:20:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1ww3yffw.rkt:21:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039554
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) (integer? x))) values))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(null? values) '()]\n        [(number? values) values]\n \
    \       [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3__101ma.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3__101ma.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond ((null? values) '())\n        ((number? values) values)\n \
    \       (else (append (filter_integers (car values))\n                      (filter_integers\
    \ (cdr values))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_o8f9_a9.rkt:20:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: '#hash()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_o8f9_a9.rkt:21:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"c\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039554
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) (integer? x))) values))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond ((null? values) '())\n        ((number? values) values)\n \
    \       (else (append (filter_integers (first values))\n                     \
    \  (filter_integers (rest values))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2yovbi3r.rkt:20:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp2yovbi3r.rkt:21:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"c\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039554
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (if (empty? values)\n      '()\n      (cons (first values)\n    \
    \        (filter_integers (rest values)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm6yii48r.rkt:20:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm6yii48r.rkt:21:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039554
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? first) first]\n  \
    \      [else (cons (filter_integers (rest values))\n                    (filter_integers\
    \ (rest values)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa8vayi14.rkt:20:4\n\
    actual:\n  '((((((()) ()) (()) ()) ((()) ()) (()) ())\n     (((()) ()) (()) ())\n\
    \     ((()) ())\n     (())\n     ())\n    ((((()) ()) (()) ()) ((()) ()) (())\
    \ ())\n    (((()) ()) (()) ())\n    ((()) ())\n    (())\n    ())\nexpected:  \
    \ '(4 9)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpa8vayi14.rkt:21:4\nactual:\n  '((((((()) ()) (()) ()) ((())\
    \ ()) (()) ())\n     (((()) ()) (()) ())\n     ((()) ())\n     (())\n     ())\n\
    \    ((((()) ()) (()) ()) ((()) ()) (()) ())\n    (((()) ()) (()) ())\n    ((())\
    \ ())\n    (())\n    ())\nexpected:   '(3 3 3)\n--------------------\n"
  stdout: ''
  timestamp: 1660039554
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond\n    [(empty? values) '()]\n    [(number? (first values)) (cons\
    \ (first values) (filter_integers (rest values)))]\n    [else (filter_integers\
    \ (rest values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplq0otth2.rkt:20:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond ((null? values) values)\n        ((number? values) values)\n\
    \        (else (append (filter_integers (first values))\n                    \
    \  (filter_integers (rest values))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt5773hfc.rkt:20:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpt5773hfc.rkt:21:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"c\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039554
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (first values)) (cons\
    \ (first values) (filter_integers (rest values)))]\n        [else (filter_integers\
    \ (rest values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoo21rfg0.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (if (null? values)\n      '()\n      (cons (car values)\n       \
    \     (filter_integers (cdr values)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9z14bfrf.rkt:20:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9z14bfrf.rkt:21:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond ((null? values) values)\n        ((number? values) values)\n\
    \        (else (append (filter_integers (first values))\n                    \
    \   (filter_integers (rest values))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvt7r3x19.rkt:20:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpvt7r3x19.rkt:21:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"c\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039554
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) (integer? x))) values))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond ((null? values) '())\n        ((number? values) values)\n \
    \       (else (append (filter_integers (first values))\n                     \
    \ (filter_integers (rest values))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpva329b6v.rkt:20:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpva329b6v.rkt:21:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"c\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond ((null? values) '())\n        ((number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values))))\n        (else (filter_integers\
    \ (cdr values)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw9dg489h.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? values) values]\n\
    \        [else (cons (first values) (filter_integers (rest values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpazuebq_f.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpazuebq_f.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (if (null? values)\n      '()\n      (cons (car values)\n       \
    \     (filter_integers (cdr values)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9z14bfrf.rkt:20:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9z14bfrf.rkt:21:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond ((null? values) values)\n        ((number? values) values)\n\
    \        (else (filter_integers (cdr values)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_integers))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list\
    \ ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\"\
    \ 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpk9f3lwt6.rkt:19:4

    actual:     ''()

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpk9f3lwt6.rkt:20:4

    actual:     ''()

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (cons (car values)\
    \ (filter_integers (cdr values)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwjfr9nnr.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwjfr9nnr.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond ((null? values) '())\n        ((number? values) values)\n \
    \       (else (append (filter_integers (car values))\n                      (filter_integers\
    \ (cdr values))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_o8f9_a9.rkt:20:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: '#hash()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_o8f9_a9.rkt:21:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"c\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039554
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(null? values) '()]\n        [(number? values) values]\n \
    \       [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3__101ma.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3__101ma.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (first values)) (cons\
    \ (first values) (filter_integers (rest values)))]\n        [else (filter_integers\
    \ (rest values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoo21rfg0.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond ((null? values) '())\n        ((number? values) values)\n \
    \       (else (append (filter_integers (first values))\n                     \
    \  (filter_integers (rest values))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2yovbi3r.rkt:20:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp2yovbi3r.rkt:21:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"c\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039554
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond ((null? values) '())\n        ((number? values) values)\n \
    \       (else (append (filter_integers (first values))\n                     \
    \ (filter_integers (rest values))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpva329b6v.rkt:20:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpva329b6v.rkt:21:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"c\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(null? values) '()]\n        [(number? values) values]\n \
    \       [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3__101ma.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3__101ma.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(null? values) '()]\n        [(number? values) values]\n \
    \       [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3__101ma.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3__101ma.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond ((null? values) '())\n        ((number? values) values)\n \
    \       (else (append (filter_integers (first values))\n                     \
    \  (filter_integers (rest values))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2yovbi3r.rkt:20:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp2yovbi3r.rkt:21:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"c\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039554
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (if (null? values)\n      '()\n      (if (number? (car values))\n\
    \          (cons (car values) (filter_integers (cdr values)))\n          (filter_integers\
    \ (cdr values)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb2bj_77o.rkt:21:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(null? values) '()]\n        [(number? values) values]\n \
    \       [else (append (filter_integers (first values))\n                     \
    \ (filter_integers (rest values)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiu2wg3rp.rkt:20:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpiu2wg3rp.rkt:21:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"c\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (if (null? values)\n      '()\n      (cons (car values)\n       \
    \     (filter_integers (cdr values)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9z14bfrf.rkt:20:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9z14bfrf.rkt:21:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond ((null? values) values)\n        ((number? values) values)\n\
    \        (else (append (filter_integers (first values))\n                    \
    \  (filter_integers (rest values))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt5773hfc.rkt:20:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpt5773hfc.rkt:21:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"c\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039554
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 1
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond\n    ((null? values) values)\n    ((number? values) values)\n\
    \    ((string? values) (filter_strings values))\n    ((list? values) (filter_list\
    \ values))\n    ((hash? values) (filter_hash values))\n    ((boolean? values)\
    \ (filter_booleans values))\n    ((symbol? values) (filter_symbols values))\n\
    \    ((procedure? values) (filter_procedures values))\n    ((vector? values) (filter_vectors\
    \ values))\n    ((null? (cdr values)) (filter_integers (cdr values)))\n    (else\
    \ (filter_anys values))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list ))\
    \ (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"\
    )) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpwfl804_k.rkt:12:23: filter_strings: unbound identifier\n  in: filter_strings\n\
    \  location...:\n   /tmp/tmpwfl804_k.rkt:12:23\n"
  stdout: ''
  timestamp: 1660039554
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? values) values]\n\
    \        [else (append (filter_integers (first values))\n                    \
    \  (filter_integers (rest values)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9dk09y_x.rkt:20:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9dk09y_x.rkt:21:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"c\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond ((null? values) '())\n        ((number? values) values)\n \
    \       (else (append (filter_integers (first values))\n                     \
    \ (filter_integers (rest values))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpva329b6v.rkt:20:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpva329b6v.rkt:21:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"c\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) (integer? x))) values))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond ((null? values) '())\n        ((number? (car values))\n   \
    \      (cons (car values) (filter_integers (cdr values))))\n        (else (filter_integers\
    \ (cdr values)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp85swzfi.rkt:20:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039554
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) (integer? x))) values))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (first values)) (cons\
    \ (first values) (filter_integers (rest values)))]\n        [else (filter_integers\
    \ (rest values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoo21rfg0.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? values) values]\n\
    \        [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2c4dgxqx.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2c4dgxqx.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039554
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (v) (number? v)) values))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list\
    \ ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\"\
    \ 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbia92fp_.rkt:17:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond ((null? values) '())\n        ((number? values) values)\n \
    \       (else (append (filter_integers (first values))\n                     \
    \ (filter_integers (rest values))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpva329b6v.rkt:20:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpva329b6v.rkt:21:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"c\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (number? x))\n          values))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxrw5l1lb.rkt:18:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039554
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(null? values) '()]\n        [(number? values) values]\n \
    \       [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3__101ma.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3__101ma.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond ((null? values) '())\n        ((number? values) values)\n \
    \       (else (append (filter_integers (first values))\n                     \
    \ (filter_integers (rest values))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpva329b6v.rkt:20:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpva329b6v.rkt:21:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"c\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (first values)) (cons\
    \ (first values) (filter_integers (rest values)))]\n        [else (filter_integers\
    \ (rest values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoo21rfg0.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (if (null? values)\n      '()\n      (if (number? values) (values)\n\
    \          (cons (car values) (filter_integers (cdr values))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list\
    \ ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\"\
    \ 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpg16uaa51.rkt:20:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpg16uaa51.rkt:21:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039554
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (if (null? values)\n      '()\n      (cons (car values)\n       \
    \     (filter_integers (cdr values)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9z14bfrf.rkt:20:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9z14bfrf.rkt:21:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond ((null? values) values)\n        ((number? values) values)\n\
    \        (else (filter_integers (cdr values)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_integers))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list\
    \ ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\"\
    \ 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpk9f3lwt6.rkt:19:4

    actual:     ''()

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpk9f3lwt6.rkt:20:4

    actual:     ''()

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (cons (car values)\
    \ (filter_integers (cdr values)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwjfr9nnr.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwjfr9nnr.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (first values)) (cons\
    \ (first values) (filter_integers (rest values)))]\n        [else (filter_integers\
    \ (rest values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoo21rfg0.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) (integer? x))) values))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x y)\n            (and (number? x)\n           \
    \      (number? y))\n            (integer? x))\n          values))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj64bc2ou.rkt:20:4\n\
    \nfilter: contract violation\n  expected: (any/c . -> . any/c)\n  given: #<procedure:...tmp/tmpj64bc2ou.rkt:9:10>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpj64bc2ou.rkt:21:4\n\nfilter: contract violation\n  expected:\
    \ (any/c . -> . any/c)\n  given: #<procedure:...tmp/tmpj64bc2ou.rkt:9:10>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj64bc2ou.rkt:22:4\n\
    \nfilter: contract violation\n  expected: (any/c . -> . any/c)\n  given: #<procedure:...tmp/tmpj64bc2ou.rkt:9:10>\n\
    --------------------\n"
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(null? values) '()]\n        [(number? values) values]\n \
    \       [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3__101ma.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3__101ma.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (and (number? x) (integer? x)))\n         values))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? values) (list values)]\n\
    \        [else (append (filter_integers (first values))\n                    \
    \  (filter_integers (rest values)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8oejacej.rkt:20:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp8oejacej.rkt:21:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"c\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039554
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (x) (number? x))\n         values))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list\
    \ ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\"\
    \ 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwj9aizsd.rkt:18:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (if (null? values)\n      '()\n      (cons (car values)\n       \
    \     (filter_integers (cdr values)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9z14bfrf.rkt:20:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9z14bfrf.rkt:21:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? values) values]\n\
    \        [else (append (filter_integers (first values))\n                    \
    \  (filter_integers (rest values)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9dk09y_x.rkt:20:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9dk09y_x.rkt:21:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"c\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? values) values]\n\
    \        [else (append (filter_integers (first values))\n                    \
    \  (filter_integers (rest values)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_integers))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"\
    adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"\
    b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9dk09y_x.rkt:20:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9dk09y_x.rkt:21:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"c\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (filter (lambda (item)\n            (and (number? item)\n       \
    \          (not (integer? item))))\n          values))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list\
    \ ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\"\
    \ 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwd4o06ql.rkt:20:4

    actual:     ''(23.2)

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwd4o06ql.rkt:21:4

    actual:     ''()

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039554
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (car values)) (cons\
    \ (car values) (filter_integers (cdr values)))]\n        [else (filter_integers\
    \ (cdr values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyccwmrh4.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (if (null? values)\n      '()\n      (if (number? values) (values)\n\
    \          (cons (car values) (filter_integers (cdr values))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 4 #hash() (list\
    \ ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate (list 3 \"c\"\
    \ 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpg16uaa51.rkt:20:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpg16uaa51.rkt:21:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039554
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(null? values) '()]\n        [(number? values) values]\n \
    \       [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3__101ma.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3__101ma.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(null? values) '()]\n        [(number? values) values]\n \
    \       [else (cons (car values) (filter_integers (cdr values)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
    \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3__101ma.rkt:19:4

    actual:     ''(4 #hash() () 23.2 9 "adasd")

    expected:   ''(4 9)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3__101ma.rkt:20:4

    actual:     ''(3 "c" 3 3 "a" "b")

    expected:   ''(3 3 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
- exit_code: 0
  program: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
    ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
    \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
    \ values)\n  (cond [(empty? values) '()]\n        [(number? (first values)) (cons\
    \ (first values) (filter_integers (rest values)))]\n        [else (filter_integers\
    \ (rest values))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate filter_integers))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 4 #hash() (list ) 23.2 9 \"adasd\"))\
    \ (list 4 9))\n    (check-equal? (candidate (list 3 \"c\" 3 3 \"a\" \"b\")) (list\
    \ 3 3 3))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoo21rfg0.rkt:19:4

    actual:     ''(4 23.2 9)

    expected:   ''(4 9)

    --------------------

    '
  stdout: ''
  timestamp: 1660039553
