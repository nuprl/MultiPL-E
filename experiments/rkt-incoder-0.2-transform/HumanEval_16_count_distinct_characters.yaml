name: HumanEval_16_count_distinct_characters
language: rkt
prompt: "#lang racket\n\n;; Given a string, find out how many distinct characters\
  \ (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"\
  xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4\n(define (count_distinct_characters\
  \ string)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_distinct_characters))\n\
  \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abcde\")\
  \ 5)\n    (check-equal? (candidate \"abcdecadeCADE\") 5)\n    (check-equal? (candidate\
  \ \"aaaaAAAAaaaa\") 1)\n    (check-equal? (candidate \"Jerry jERRY JeRRRY\") 5)\n\
  ))\n\n(test-humaneval)"
completions: ["  (count_distinct_characters_aux (string) 0))\n", "  (define (helper\
    \ string count)\n    (if (null? string)\n        count\n        (helper (cdr string)\
    \ (+ count (length string)))))\n  (helper string 0))\n", "  (define (helper string\
    \ count)\n    (cond\n      [(empty? string) count]\n      [(equal? (first string)\
    \ (string-ref string 0)) (helper (rest string) (+ count 1))]\n      [else (helper\
    \ (rest string) count)]))\n  (helper string 0))\n", "  (define (helper string\
    \ count)\n    (cond\n      [(empty? string) count]\n      [(equal? (first string)\
    \ (string-ref string 0)) (helper (rest string) (add1 count))]\n      [else (helper\
    \ (rest string) (add1 count))]))\n  (helper string 0))\n", "  (count_distinct_characters-helper\
    \ string #{}))\n", "  (count_distinct_characters_aux (string-length string) string))\n",
  "  (count_distinct_characters_aux (string) '()))\n", "  (count_distinct_characters_aux\
    \ (string-length string) string))\n", "  (define (helper string count)\n    (if\
    \ (empty? string)\n        count\n        (helper (cdr string) (+ count (length\
    \ string)))\n      )\n  )\n  (helper string 0)\n)\n", "  (let loop ((count 0)\
    \ (string string))\n    (if (null? string)\n        count\n        (loop (add1\
    \ (count (equal? (char-code (first string)) (char-code (first string))))))\n \
    \       (loop (add1 (count (equal? (char-code (first string)) (char-code (first\
    \ string))))))))\n", "  (count_distinct_characters_aux (string-length string)\
    \ (string-ref string 0) 0))\n", "  (count_distinct_characters_aux (string) 0))\n",
  "  (count_distinct_characters-iter string '()))\n", "  (count_distinct_characters_aux\
    \ (make-string-input-stream string) 0))\n", "  (let ((count 0))\n    (for ([i\
    \ (in-range (length string))])\n      (if (char-lower? (substring string i i))\n\
    \          (set! count (add1 count))\n          (set! count (add1 count))))\n\
    \    count))\n", "  (count_distinct_characters_aux (make-string-input-stream string)\
    \ 0))\n", "  (count_distinct_characters_aux (make-string-input-stream string)\
    \ 0))\n", "  (count_distinct_characters-helper string #{}))\n", "  (count_distinct_characters-iter\
    \ string '()))\n", "  (define (helper string count)\n    (if (empty? string)\n\
    \        count\n        (helper (cdr string) (+ count (length string))))\n   \
    \ (helper (cdr string) 0))\n  (helper string 0))\n", "  (count_distinct_characters_aux\
    \ (string) '()))\n", "  (count_distinct_characters_aux (make-string-input-stream\
    \ string) 0))\n", "  (count_distinct_characters_aux (make-string-input-stream\
    \ string) 0))\n", "  (count_distinct_characters_aux (string) '()))\n", "  (count_distinct_characters_aux\
    \ (string-length string) string))\n", "  (count_distinct_characters_aux (make-string-input-stream\
    \ string) 0))\n", "  (count_distinct_characters_aux (make-string-input-stream\
    \ string) 0))\n", "  (count_distinct_characters_aux (string) 0))\n", "  (count_distinct_characters_aux\
    \ (make-string-input-stream string) 0))\n", "  (count_distinct_characters_aux\
    \ (string) '()))\n", "  (define (helper string count)\n    (if (null? string)\n\
    \        count\n        (helper (cdr string) (+ count (length string)))\n    \
    \  )\n  )\n  (helper string 0)\n)\n", "  (count_distinct_characters_aux (string)\
    \ 0 0))\n", "  (define (helper string count)\n    (if (empty? string)\n      \
    \  count\n        (helper (cdr string) (+ count (length string)))\n      )\n \
    \ )\n  (helper string 0)\n)\n", "  (define (helper string count)\n    (if (null?\
    \ string)\n        count\n        (helper (cdr string) (+ count (length string)))\n\
    \      )\n  )\n  (helper string 0)\n)\n", "  (define (helper string count)\n \
    \   (if (empty? string)\n        count\n        (helper (cdr string) (+ count\
    \ (length string))))\n    (helper (cdr string) 0))\n  (helper string 0))\n", " \
    \ (count_distinct_characters-helper string #{}))\n", "  (count_distinct_characters_aux\
    \ (make-string-input-stream string) 0))\n", "  (define (helper string count)\n\
    \    (if (null? string)\n        count\n        (helper (cdr string) (+ count\
    \ (length string)))\n      )\n  )\n  (helper string 0)\n)\n", "  (define (helper\
    \ string count)\n    (if (null? string)\n        count\n        (helper (cdr string)\
    \ (+ count (length string)))\n      )\n  )\n  (helper string 0))\n", "  (let loop\
    \ ((count 0))\n    (if (string-empty? string)\n        count\n        (loop (+\
    \ count (distinct (string-ref string 0)))))))\n", "  (count_distinct_characters-helper\
    \ string #{}))\n", "  (count_distinct_characters-iter string 0))\n", "  (count_distinct_characters_aux\
    \ (string-length string) string))\n", "  (let loop ((count 0) (string string))\n\
    \    (if (null? string)\n        count\n        (loop (add1 (count)) (cdr string)))))\n",
  "  (define (helper string count)\n    (if (null? string)\n        count\n      \
    \  (helper (cdr string) (+ count (length string)))\n      )\n  )\n  (helper string\
    \ 0))\n", "  (count_distinct_characters_aux (string) '()))\n", "  (define (helper\
    \ string count)\n    (cond\n      [(empty? string) count]\n      [(equal? (first\
    \ string) (string-ref string 0)) (helper (rest string) (add1 count))]\n      [else\
    \ (helper (rest string) (add1 count))]))\n  (helper string 0))\n", "  (count_distinct_characters_aux\
    \ (string) 0))\n", "  (count_distinct_characters_aux (string) (make-string (string-length\
    \ string) #\\space))\n  )\n", "  (define (helper string count)\n    (cond\n  \
    \    [(empty? string) count]\n      [(equal? (first string) (string-ref string\
    \ 0)) (helper (rest string) (add1 count))]\n      [else (helper (rest string)\
    \ (add1 count))]))\n  (helper string 0))\n", "  (count_distinct_characters_aux\
    \ (string-length string) string))\n", "  (count_distinct_characters_aux (string-length\
    \ string) string))\n", "  (let loop ((count 0))\n    (if (null? string)\n    \
    \    count\n        (loop (add1 count) (string-ref string 0)))))\n", "  (count_distinct_characters_aux\
    \ (make-string-input-stream string) '()))\n", "  (define (helper string count)\n\
    \    (if (empty? string)\n        count\n        (helper (cdr string) (+ count\
    \ (length string))))\n    (helper (cdr string) 0))\n  (helper string 0))\n", " \
    \ (count_distinct_characters_aux (make-string (string-length string) #\\space)\
    \ string 0))\n", "  (count_distinct_characters_aux (string) (make-string (string-length\
    \ string) #f)))\n", "  (define (helper string count)\n    (if (null? string)\n\
    \        count\n        (helper (cdr string) (+ count (length string)))\n    \
    \  )\n  )\n  (helper string 0)\n)\n", "  (define (helper string count)\n    (cond\n\
    \      [(empty? string) count]\n      [(equal? (first string) (string-ref string\
    \ 0)) (helper (rest string) (add1 count))]\n      [else (helper (rest string)\
    \ (add1 count))]))\n  (helper string 0))\n", "  (count_distinct_characters-helper\
    \ string #{}))\n", "  (count_distinct_characters-helper string '()))\n", "  (let\
    \ loop ((count 0) (strings string))\n    (if (null? strings)\n        count\n\
    \        (loop (add1 (count)) (rest strings)))))\n", "  (count_distinct_characters_aux\
    \ (string) 0))\n", "  (let ((count 0))\n    (for ([i (in-range (length string))])\n\
    \      (if (char-lower? (substring string i i))\n          (set! count (add1 (add1\
    \ count)))\n          (set! count (add1 (add1 count))))))\n  count)\n", "  (count_distinct_characters_aux\
    \ (make-string (string-length string) ?a) string 0))\n", "  (count_distinct_characters-iter\
    \ string 0))\n", "  (define (helper string count)\n    (cond\n      [(empty? string)\
    \ count]\n      [(equal? (first string) (string-ref string 0)) (helper (rest string)\
    \ (+ count 1))]\n      [else (helper (rest string) count)]\n    )\n  )\n  (helper\
    \ string 0))\n", "  (define (helper string count)\n    (if (empty? string)\n \
    \       count\n        (helper (cdr string) (+ count (length string)))))\n  (helper\
    \ string 0))\n", "  (count_distinct_characters_aux (string) 0 0))\n", "  (define\
    \ (helper string count)\n    (cond\n      [(empty? string) count]\n      [(equal?\
    \ (first string) (string-ref string 0)) (helper (rest string) (+ count 1))]\n\
    \      [else (helper (rest string) (+ count 1))]))\n  (helper string 0))\n", " \
    \ (count_distinct_characters_aux (string) 0))\n", "  (count_distinct_characters_aux\
    \ (string) '()))\n", "  (count_distinct_characters_aux (make-string (string-length\
    \ string) ?a) string 0))\n", "  (define (helper string count)\n    (if (empty?\
    \ string)\n        count\n        (helper (cdr string) (+ count (length string)))\n\
    \      )\n  )\n  (helper string 0)\n)\n", "  (count_distinct_characters-helper\
    \ string #{}))\n", "  (count_distinct_characters-iter string #\\space))\n", " \
    \ (count_distinct_characters-helper string #{}))\n", "  (let loop ((count 0) (string\
    \ string))\n    (if (null? string)\n        count\n        (loop (add1 count)\
    \ (substring string 0 (string-length string))))))\n", "  (count_distinct_characters_aux\
    \ (make-string-input-stream string) 0))\n", "  (define (helper string count)\n\
    \    (if (null? string)\n        count\n        (helper (cdr string) (+ count\
    \ (length string)))))\n  (helper string 0))\n", "  (define (helper string count)\n\
    \    (if (null? string)\n        count\n        (helper (cdr string) (+ count\
    \ (length string)))))\n  (helper string 0))\n", "  (count_distinct_characters_aux\
    \ (make-string-input-stream string) 0))\n", "  (define (helper string count)\n\
    \    (cond\n      [(empty? string) count]\n      [(equal? (first string) (string-ref\
    \ string 0)) (helper (rest string) (+ count 1))]\n      [else (helper (rest string)\
    \ (+ count 1))]))\n  (helper string 0))\n", "  (count_distinct_characters_aux\
    \ (string) '()))\n", "  (count_distinct_characters_aux (string) '()))\n", "  (define\
    \ (helper string count)\n    (if (empty? string)\n        count\n        (helper\
    \ (cdr string) (+ count (length string))))\n    (helper (cdr string) 0))\n  (helper\
    \ string 0))\n", "  (count_distinct_characters_aux (make-string-input-stream string)\
    \ 0))\n", "  (count_distinct_characters-helper string #{}))\n", "  (define (helper\
    \ string count)\n    (cond\n      [(empty? string) count]\n      [(equal? (first\
    \ string) (string-ref string 0)) (helper (rest string) (+ count 1))]\n      [else\
    \ (helper (rest string) count)]))\n  (helper string 0))\n", "  (count_distinct_characters_aux\
    \ (string) 0))\n", "  (count_distinct_characters_aux (string) 0 0))\n", "  (count_distinct_characters_aux\
    \ (make-string-input-stream string) 0))\n", "  (count_distinct_characters_aux\
    \ (string) '()))\n", "  (count_distinct_characters_aux (string-length string)\
    \ string))\n", "  (count_distinct_characters_aux (string) '()))\n", "  (count_distinct_characters-helper\
    \ string #{}))\n", "  (count_distinct_characters_aux (string-length string) string\
    \ '()))\n", "  (define (helper string count)\n    (if (null? string)\n       \
    \ count\n        (helper (cdr string) (+ count (length string)))\n      )\n  )\n\
    \  (helper string 0)\n)\n", "  (count_distinct_characters-helper string #{}))\n",
  "  (count_distinct_characters_aux (make-string-input-stream string) 0))\n", "  (count_distinct_characters_aux\
    \ (string) '()))\n", "  (count_distinct_characters_aux (string) 0))\n", "  (define\
    \ (helper string count)\n    (if (empty? string)\n        count\n        (helper\
    \ (cdr string) (+ count (length string)))\n      )\n  )\n  (helper string 0)\n\
    )\n", "  (define (helper string count)\n    (if (empty? string)\n        count\n\
    \        (helper (cdr string) (+ count (length string))))\n    (helper (cdr string)\
    \ 0))\n  (helper string 0))\n", "  (count_distinct_characters_aux (make-string-input-stream\
    \ string) 0))\n", "  (count_distinct_characters_aux (string) 0 0))\n", "  (count_distinct_characters-aux\
    \ (string->list string) 0))\n", "  (define (helper string count)\n    (if (string-empty?\
    \ string)\n        count\n        (helper (substring string 0 1)\n           \
    \   (+ count (helper (substring string 1 string) (+ count 1)))\n             \
    \ )\n        )\n  )\n  (helper string 0)\n)\n", "  (count_distinct_characters_aux\
    \ (string-length string) string))\n", "  (count_distinct_characters_aux (string)\
    \ 0))\n", "  (define (helper string count)\n    (if (empty? string)\n        count\n\
    \        (helper (cdr string) (+ count (length string)))\n      )\n  )\n  (helper\
    \ string 0)\n)\n", "  (count_distinct_characters_aux (string-length string) string))\n",
  "  (count_distinct_characters-helper string #{}))\n", "  (count_distinct_characters_aux\
    \ (make-string-input-stream string) 0))\n", "  (let ((count 0))\n    (for-each\
    \ (lambda (c)\n                (if (char-equal? c #\\a)\n                    (set!\
    \ count (add1 count))\n                    (set! count (add1 count)))\n      \
    \        (string-length string))\n              (string-chars string))\n    count))\n",
  "  (define (helper string count)\n    (if (empty? string)\n        count\n     \
    \   (helper (cdr string) (+ count (length string)))))\n  (helper string 0))\n",
  "  (count_distinct_characters-iter string 0))\n", "  (count_distinct_characters_aux\
    \ (make-string-input-stream string) 0))\n", "  (define (count-distinct char)\n\
    \    (cond\n      [(char=? char #\\a) (+ 1 count-distinct (char=? (char-code char)\
    \ #\\a))] \n      [(char=? char #\\z) (+ 1 count-distinct (char=? (char-code char)\
    \ #\\z))] \n      [(char=? char #\\A) (+ 1 count-distinct (char=? (char-code char)\
    \ #\\A))] \n      [(char=? char #\\Z) (+ 1 count-distinct (char=? (char-code char)\
    \ #\\Z))] \n      [else (+ 1 count-distinct (char-code char))]))\n  (count-distinct\
    \ (first string)))\n", "  (count_distinct_characters-helper string #{}))\n", " \
    \ (define (helper string count)\n    (if (null? string)\n        count\n     \
    \   (helper (cdr string) (+ count (length string)))\n      )\n  )\n  (helper string\
    \ 0)\n)\n", "  (define (count-chars string char)\n    (cond\n      [(empty? string)\
    \ 0]\n      [(equal? (first string) char) (+ 1 (count-chars (rest string) char))]\n\
    \      [else (count-chars (rest string) char)]))\n  (count-chars string #\\space))\n",
  "  (let ((chars (string->list string)))\n    (length chars)))\n", "  (define (helper\
    \ string count)\n    (if (string-empty? string)\n        count\n        (helper\
    \ (substring string 0 1) (+ count (length string)))))\n  (helper string 0))\n",
  "  (count_distinct_characters_aux (string) 0))\n", "  (define (helper string count)\n\
    \    (cond\n      [(empty? string) count]\n      [(equal? (first string) (string-ref\
    \ string 0)) (helper (rest string) (+ count 1))]\n      [else (helper (rest string)\
    \ (+ count 1))]))\n  (helper string 0))\n", "  (count_distinct_characters_aux\
    \ (make-string-input-stream string) 0))\n", "  (count_distinct_characters-aux\
    \ (string-to-list string) 0))\n", "  (count_distinct_characters-aux (string-length\
    \ string) string))\n", "  (let loop ((count 0) (strings string))\n    (if (null?\
    \ strings)\n        count\n        (loop (add1 (car strings))\n              (cdr\
    \ strings)))))\n", "  (count_distinct_characters-helper string #{}))\n", "  (count_distinct_characters_aux\
    \ (string) 0))\n", "  (count_distinct_characters_aux (string) '()))\n", "  (count_distinct_characters_aux\
    \ (make-string-input-stream string) 0))\n", "  (count_distinct_characters_aux\
    \ (make-string-input-stream string) 0))\n", "  (count_distinct_characters-aux\
    \ (string-length string) string))\n", "  (count_distinct_characters_aux (string)\
    \ 0))\n", "  (count_distinct_characters-helper string '()))\n", "  (count_distinct_characters_aux\
    \ (make-string-input-stream string) 0))\n", "  (count_distinct_characters_aux\
    \ (string) 0))\n", "  (count_distinct_characters_aux (string) 0))\n", "  (count_distinct_characters_aux\
    \ (make-string-input-stream string) '()))\n", "  (count_distinct_characters_aux\
    \ (make-string-input-stream string) 0))\n", "  (define (helper string count)\n\
    \    (if (empty? string)\n        count\n        (helper (cdr string) (+ count\
    \ (length string))))\n    (helper (cdr string) 0))\n  (helper string 0))\n", " \
    \ (count_distinct_characters-helper string '()))\n", "  (let ((chars (string->list\
    \ string)))\n    (length chars)\n    (map (lambda (c)\n           (if (string=?\
    \ (string->string c) string)\n               (length c)\n               0))\n\
    \         chars)))\n", "  (define (helper string count)\n    (if (empty? string)\n\
    \        count\n        (helper (cdr string) (+ count (length string)))\n    \
    \  )\n  )\n  (helper string 0)\n)\n", "  (count_distinct_characters_aux (make-string-input-stream\
    \ string) 0))\n", "  (count_distinct_characters-aux (make-string (string-length\
    \ string) ?a) string 0))\n", "  (count_distinct_characters_aux (make-string-input-stream\
    \ string) 0))\n", "  (count_distinct_characters_aux (make-string-input-stream\
    \ string) 0))\n", "  (define (helper string count)\n    (if (empty? string)\n\
    \        count\n        (helper (cdr string) (+ count (length string)))\n    \
    \  )\n  )\n  (helper string 0)\n)\n", "  (count_distinct_characters_aux (string)\
    \ '()))\n", "  (count_distinct_characters_aux (string) 0 0))\n", "  (let ((chars\
    \ (string->list string)))\n    (length chars)))\n", "  (count_distinct_characters_aux\
    \ (string) '()))\n", "  (define (helper string count)\n    (cond\n      [(empty?\
    \ string) count]\n      [(equal? (first string) (string-ref string 0)) (helper\
    \ (rest string) (add1 count))]\n      [else (helper (rest string) (add1 count))]))\n\
    \  (helper string 0))\n", "  (define (helper string count)\n    (if (empty? string)\n\
    \        count\n        (helper (cdr string) (+ count (length string))))\n   \
    \ (helper (cdr string) 0))\n  (helper string 0))\n", "  (count_distinct_characters_aux\
    \ (string-length string) string))\n", "  (let ((char-count 0))\n    (for ([i (string-length\
    \ string)])\n      (let ((char (string->char (+ i 1)))\n            (lower-case\
    \ (char->string (char->lower char)))\n            (upper-case (char->string (char->upper\
    \ char)))\n            (lower-case-count (length lower-case))\n            (upper-case-count\
    \ (length upper-case)))\n        (set! char-count (+ char-count (+ lower-case-count\
    \ upper-case-count))))\n    char-count))\n", "  (define (helper string count)\n\
    \    (if (empty? string)\n        count\n        (helper (cdr string) (+ count\
    \ (length string)))\n      )\n  )\n  (helper string 0)\n)\n", "  (count_distinct_characters-aux\
    \ (string-length string) string))\n", "  (count_distinct_characters_aux (make-string-input-stream\
    \ string) 0))\n", "  (count_distinct_characters_aux (string) 0))\n", "  (count_distinct_characters_aux\
    \ (make-string-input-stream string) 0))\n", "  (count_distinct_characters_aux\
    \ (string-length string) string))\n", "  (count_distinct_characters_aux (make-string-input-stream\
    \ string) 0))\n", "  (define (helper string count)\n    (if (null? string)\n \
    \       count\n        (helper (cdr string) (+ count (length string)))))\n  (helper\
    \ string 0))\n", "  (count_distinct_characters_aux (string-length string) string))\n",
  "  (count_distinct_characters_aux (string-length string) string))\n", "  (count_distinct_characters_aux\
    \ (string) '()))\n", "  (let loop ((count 0))\n    (if (string-empty? string)\n\
    \        count\n        (loop (+ count (distinct (string-ref string 0)))))))\n",
  "  (count_distinct_characters-helper string #{}))\n", "  (define (helper string\
    \ count)\n    (cond\n      [(empty? string) count]\n      [(equal? (first string)\
    \ (string-ref string 0)) (helper (rest string) (add1 count))]\n      [else (helper\
    \ (rest string) (add1 count))]))\n  (helper string 0))\n", "  (let loop ((count\
    \ 0) (string string))\n    (if (null? string)\n        count\n        (loop (add1\
    \ (count)) (substring string 0 (string-length string))))))\n", "  (count_distinct_characters_aux\
    \ (make-string-input-stream string) 0))\n", "  (count_distinct_characters_aux\
    \ (string-length string) string '()))\n", "  (count_distinct_characters_aux (string)\
    \ '()))\n", "  (count_distinct_characters_aux (make-string-input-stream string)\
    \ 0))\n", "  (count_distinct_characters_aux (string-length string) string))\n",
  "  (count_distinct_characters-helper string #{}))\n", "  (count_distinct_characters_aux\
    \ (string) '()))\n", "  (count_distinct_characters_aux (make-string-input-stream\
    \ string) 0))\n", "  (count_distinct_characters_aux (string) 0))\n", "  (count_distinct_characters_aux\
    \ (string) '()))\n", "  (let loop ((count 0) (string string))\n    (if (null?\
    \ string)\n        count\n        (loop (+ count (length string)) (substring string\
    \ 0 (length string))))))\n", "  (count_distinct_characters_aux (string-length\
    \ string) (string-ref string 0) 0))\n", "  (count_distinct_characters_aux (make-string-input-stream\
    \ string) 0))\n", "  (count_distinct_characters_aux (string) '()))\n", "  (count_distinct_characters_aux\
    \ (string) '()))\n", "  (count_distinct_characters_aux (string-length string)\
    \ string))\n", "  (count_distinct_characters-helper string '()))\n", "  (let loop\
    \ ((count 0) (string string))\n    (cond [(empty? string) count]\n          [(char-lower?\
    \ (first string)) (loop (add1 count) (first string))]\n          [(char-upper?\
    \ (first string)) (loop (add1 count) (first string))]\n          [else (loop (add1\
    \ count) (rest string))]))\n)\n", "  (count_distinct_characters_aux (string) '()))\n",
  "  (let ((char-set (make-hash (string->list string))))\n    (loop for c in string\n\
    \          for count in char-set\n          collect (hash-ref count c))))\n",
  "  (count_distinct_characters_aux (make-string-input-stream string) 0))\n", "  (let\
    \ loop ((count 0) (strings string))\n    (if (null? strings)\n        count\n\
    \        (loop (add1 (car strings)) (cdr strings)))))\n", "  (count_distinct_characters-helper\
    \ string #{}))\n", "  (count_distinct_characters_aux (string) 0))\n", "  (count_distinct_characters_aux\
    \ (string) '()))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
