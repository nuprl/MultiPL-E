name: HumanEval_48_is_palindrome
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
  \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
  aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
  zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n"
tests: "unittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
  \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
  aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
  xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
  xywzx\") == false);\n}\nvoid main(){}"
completions: ["{\n    return text == text.dup.reverse;\n}", "{\n    auto len = text.length;\n\
    \    if (len == 0)\n        return true;\n    for (size_t i = 0; i < len / 2;\
    \ i++)\n    {\n        if (text[i] != text[len - i - 1])\n            return false;\n\
    \    }\n    return true;\n}", "{\n    return text == text.dup.reverse;\n}", "{\n\
    \    return text == text.dup.reverse;\n}", "{\n    return text == text.dup.reverse;\n\
    }", "{\n    return text == text.dup.reverse;\n}", "{\n    return text == text.dup.reverse;\n\
    }", "{\n    return text.equal(text.dup.reverse);\n}", "{\n    return text.length\
    \ == 0 || text.length == 1 || (text[0] == text[$-1] && is_palindrome(text[1..$-1]));\n\
    }", "{\n    return text.front == text.back && text.length > 1 ? is_palindrome(text[1..$-1])\
    \ : true;\n}\n/*", "{\n    int len = text.length;\n    for (int i = 0; i < len\
    \ / 2; i++) \n    {\n        if (text[i] != text[len - i - 1]) \n        {\n \
    \           return false;\n        }\n    }\n    return true;\n}", "{\n    return\
    \ text.equal(text.dup.reverse);\n}", "{\n    return text == text.dup.reverse;\n\
    }", "{\n    return text.length == 0 || text.length == 1 || (text[0] == text[$-1]\
    \ && is_palindrome(text[1..$-1]));\n}", "{\n    return text == text.dup.reverse;\n\
    }\n/*", "{\n    return text == text.dup.reverse;\n}", "{\n    return text == text.dup.reverse;\n\
    }", "{\n    return text == text.dup.reverse;\n}", "{\n    return text.length ==\
    \ 0 || text.length == 1 || (text[0] == text[$-1] && is_palindrome(text[1..$-1]));\n\
    }", "{\n    return text == text.dup.reverse;\n}", "{\n    if (text.length == 0)\n\
    \        return true;\n    else if (text.length == 1)\n        return true;\n\
    \    else if (text[0] == text[$-1])\n        return is_palindrome(text[1..$-1]);\n\
    \    else\n        return false;\n}", "{\n    return text.equal(text.dup.reverse);\n\
    }", "{\n    return text == text.dup.reverse;\n}\n/*", "{\n    if (text.length\
    \ == 0) return true;\n    if (text.length == 1) return true;\n    if (text.length\
    \ == 2) return text[0] == text[1];\n    return text[0] == text[$-1] && is_palindrome(text[1..$-1]);\n\
    }", "{\n    return text == text.dup.reverse;\n}", "{\n    return text == text.dup.reverse;\n\
    }", "{\n    return text == text.dup.reverse;\n}", "{\n    auto len = text.length;\n\
    \    for (int i = 0; i < len / 2; i++) \n    {\n        if (text[i] != text[len\
    \ - i - 1]) \n        {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n/*", "{\n    return text == text.dup.reverse;\n}", "{\n    return\
    \ text == text.dup.reverse;\n}", "{\n    return text == text.dup.reverse;\n}",
  "{\n    return text == text.dup.reverse;\n}", "{\n    return text == text.dup.reverse;\n\
    }", "{\n    return text == text.dup.reverse;\n}", "{\n    return text == text.dup.reverse;\n\
    }", "{\n    return text == text.dup.reverse;\n}", "{\n    if (text.length == 0)\
    \ return true;\n    return text[0] == text[$-1] && is_palindrome(text[1..$-1]);\n\
    }", "{\n    return text == text.dup.reverse;\n}", "{\n    return text.length ==\
    \ 0 || text.length == 1 || (text[0] == text[$-1] && is_palindrome(text[1..$-1]));\n\
    }", "{\n    return text.length == 0 || text.length == 1 || (text[0] == text[$-1]\
    \ && is_palindrome(text[1..$-1]));\n}", "{\n    return text == text.dup.reverse;\n\
    }", "{\n    return text == text.dup.reverse;\n}", "{\n    return text == text.dup.reverse;\n\
    }", "{\n    return text.equal(text.dup.reverse);\n}", "{\n    return text == text.dup.reverse;\n\
    }", "{\n    return text == text.dup.reverse;\n}", "{\n    auto len = text.length;\n\
    \    if (len == 0)\n        return true;\n    else if (len == 1)\n        return\
    \ true;\n    else if (len == 2)\n        return text[0] == text[1];\n    else\n\
    \    {\n        auto half = len / 2;\n        auto left = text[0 .. half];\n \
    \       auto right = text[len - half .. $];\n        return left == right.reverse;\n\
    \    }\n}", "{\n    return text.length == 0 || text.length == 1 || (text[0] ==\
    \ text[$-1] && is_palindrome(text[1..$-1]));\n}", "{\n    return text == text.dup.reverse;\n\
    }", "{\n    return text.length == 0 || text.length == 1 || (text[0] == text[$-1]\
    \ && is_palindrome(text[1..$-1]));\n}", "{\n    return text == text.dup.reverse;\n\
    }", "{\n    return text == text.dup.reverse;\n}", "{\n    return text == text.dup.reverse;\n\
    }", "{\n    return text == text.dup.reverse;\n}", "{\n    return text == text.dup.reverse;\n\
    }", "{\n    return text == text.dup.reverse;\n}", "{\n    int len = text.length;\n\
    \    for (int i = 0; i < len / 2; i++)\n    {\n        if (text[i] != text[len\
    \ - i - 1])\n            return false;\n    }\n    return true;\n}", "{\n    return\
    \ text == text.dup.reverse;\n}", "{\n    return text.equal(text.dup.reverse);\n\
    }", "{\n    auto len = text.length;\n    if (len == 0) return true;\n    for (size_t\
    \ i = 0; i < len / 2; i++) {\n        if (text[i] != text[len - i - 1]) return\
    \ false;\n    }\n    return true;\n}", "{\n    return text == text.dup.reverse;\n\
    }", "{\n    return text == text.dup.reverse;\n}\n/*", "{\n    return text == text.dup.reverse;\n\
    }", "{\n    return text == text.dup.reverse;\n}\n/*", "{\n    return text == text.dup.reverse;\n\
    }", "{\n    return text == text.dup.reverse;\n}\n/*", "{\n    return text == text.dup.reverse;\n\
    }", "{\n    return text == text.dup.reverse;\n}\n/*", "{\n    auto len = text.length;\n\
    \    if (len < 2) return true;\n    return text[0] == text[$-1] && is_palindrome(text[1..$-1]);\n\
    }", "{\n    return text == text.dup.reverse;\n}", "{\n    return text == text.dup.reverse;\n\
    }", "{\n    return text == text.dup.reverse;\n}", "{\n    return text.front ==\
    \ text.back && is_palindrome(text.popFront.popBack);\n}", "{\n    return text.length\
    \ == 0 || text.length == 1 || (text[0] == text[$-1] && is_palindrome(text[1..$-1]));\n\
    }", "{\n    return text == text.dup.reverse;\n}", "{\n    auto len = text.length;\n\
    \    if (len == 0)\n        return true;\n    else if (len == 1)\n        return\
    \ true;\n    else if (len == 2)\n        return text[0] == text[1];\n    else\n\
    \    {\n        auto mid = len / 2;\n        auto left = text[0..mid];\n     \
    \   auto right = text[mid..$];\n        return left == right.reverse;\n    }\n\
    }", "{\n    return text == text.dup.reverse;\n}", "{\n    return text == text.dup.reverse;\n\
    }", "{\n    return text.length == 0 || text.length == 1 || (text[0] == text[$-1]\
    \ && is_palindrome(text[1..$-1]));\n}", "{\n    return text.length == 0 || text.length\
    \ == 1 || (text[0] == text[$-1] && is_palindrome(text[1..$-1]));\n}", "{\n   \
    \ return text == text.dup.reverse;\n}", "{\n    return text.equal(text.dup.reverse);\n\
    }", "{\n    return text == text.dup.reverse;\n}", "{\n    return text == text.dup.reverse;\n\
    }", "{\n    return text == text.dup.reverse;\n}", "{\n    return text == text.dup.reverse;\n\
    }", "{\n    return text == text.dup.reverse;\n}", "{\n    return text.length ==\
    \ 0 || text.length == 1 || (text[0] == text[$-1] && is_palindrome(text[1..$-1]));\n\
    }\n/*", "{\n    return text == text.dup.reverse;\n}", "{\n    return text.length\
    \ == 0 || text.length == 1 || (text[0] == text[$-1] && is_palindrome(text[1..$-1]));\n\
    }", "{\n    return text == text.dup.reverse;\n}", "{\n    return text == text.dup.reverse;\n\
    }", "{\n    int n = text.length;\n    for (int i = 0; i < n / 2; i++) \n    {\n\
    \        if (text[i] != text[n - i - 1]) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}", "{\n    return text.length == 0 || text.length\
    \ == 1 || (text[0] == text[$-1] && is_palindrome(text[1..$-1]));\n}", "{\n   \
    \ return text == text.dup.reverse;\n}", "{\n    return text == text.dup.reverse;\n\
    }", "{\n    return text == text.dup.reverse;\n}", "{\n    auto len = text.length;\n\
    \    auto half = len / 2;\n    for (int i = 0; i < half; i++) {\n        if (text[i]\
    \ != text[len - i - 1]) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}", "{\n    return text == text.dup.reverse;\n}", "{\n    return text\
    \ == text.dup.reverse;\n}", "{\n    int len = text.length;\n    for (int i = 0;\
    \ i < len / 2; i++) \n    {\n        if (text[i] != text[len - i - 1]) \n    \
    \    {\n            return false;\n        }\n    }\n    return true;\n}", "{\n\
    \    return text == text.dup.reverse;\n}", "{\n    return text == text.dup.reverse;\n\
    }", "{\n    return text.length == 0 || text.length == 1 || text[0] == text[$-1]\
    \ && is_palindrome(text[1..$-1]);\n}", "{\n    return text.length == 0 || text.length\
    \ == 1 || (text[0] == text[$-1] && is_palindrome(text[1..$-1]));\n}", "{\n   \
    \ if (text.length == 0) \n    {\n        return true;\n    }\n    else \n    {\n\
    \        return text[0] == text[$-1] && is_palindrome(text[1..$-1]);\n    }\n}",
  "{\n    return text == text.dup.reverse;\n}", "{\n    return text == text.dup.reverse;\n\
    }\n/*", "{\n    return text == text.dup.reverse;\n}", "{\n    return text.length\
    \ == 0 || text.length == 1 || (text[0] == text[$-1] && is_palindrome(text[1..$-1]));\n\
    }", "{\n    return text == text.dup.reverse;\n}", "{\n    return text == text.dup.reverse;\n\
    }", "{\n    return text == text.dup.reverse;\n}", "{\n    return text.length ==\
    \ 0 || text.length == 1 || (text[0] == text[$-1] && is_palindrome(text[1..$-1]));\n\
    }", "{\n    return text.equal(text.dup.reverse);\n}", "{\n    auto len = text.length;\n\
    \    if (len == 0) \n    {\n        return true;\n    }\n    else \n    {\n  \
    \      auto half = len / 2;\n        for (size_t i = 0; i < half; i++) \n    \
    \    {\n            if (text[i] != text[len - i - 1]) \n            {\n      \
    \          return false;\n            }\n        }\n        return true;\n   \
    \ }\n}", "{\n    return text.equal(text.dup.reverse);\n}", "{\n    return text.length\
    \ == 0 || text.length == 1 || (text[0] == text[$-1] && is_palindrome(text[1..$-1]));\n\
    }", "{\n    return text == text.dup.reverse;\n}", "{\n    return text == text.dup.reverse;\n\
    }", "{\n    return text.equal(text.dup.reverse);\n}", "{\n    return text == text.dup.reverse;\n\
    }", "{\n    return text.equal(text.dup.reverse);\n}", "{\n    return text == text.dup.reverse;\n\
    }", "{\n    auto n = text.length;\n    if (n == 0) return true;\n    else if (n\
    \ == 1) return true;\n    else if (n == 2) return text[0] == text[1];\n    else\
    \ \n    {\n        auto half = n / 2;\n        auto first_half = text[0..half];\n\
    \        auto second_half = text[n - half..n];\n        return first_half == second_half.reverse;\n\
    \    }\n}", "{\n    auto len = text.length;\n    if (len == 0) return true;\n\
    \    if (len == 1) return true;\n    if (len == 2) return text[0] == text[1];\n\
    \    if (len == 3) return text[0] == text[2];\n    if (len == 4) return text[0]\
    \ == text[3] && text[1] == text[2];\n    if (len == 5) return text[0] == text[4]\
    \ && text[1] == text[3];\n    if (len == 6) return text[0] == text[5] && text[1]\
    \ == text[4] && text[2] == text[3];\n    if (len == 7) return text[0] == text[6]\
    \ && text[1] == text[5] && text[2] == text[4];\n    if (len == 8) return text[0]\
    \ == text[7] && text[1] == text[6] && text[2] == text[5] && text[3] == text[4];\n\
    \    if (len == 9) return text[0] == text[8] && text[1] == text[7] && text[2]\
    \ == text[6] && text[3] == text[5];\n    if (len == 10) return text[0] == text[9]\
    \ && text[1] == text[8] && text[2] == text[7] && text[3] == text[6] && text[4]\
    \ == text[5];\n    if (len == 11) return text[0] == text[10] && text[1] == text[9]\
    \ && text[2] == text[8] && text[3] == text[7] && text[4] == text[6];\n    if (len\
    \ == 12) return text[0] == text[11] && text[1] == text[10] && text[2] == text[9]\
    \ && text[3] == text[8] && text[4] == text[7] && text[5] == text[6];\n    if (len\
    \ == 13) return text[0] == text[12] && text[1] == text[11] && text[", "{\n   \
    \ return text == text.dup.reverse;\n}", "{\n    return text == text.dup.reverse;\n\
    }", "{\n    return text == text.dup.reverse;\n}", "{\n    return text == text.dup.reverse;\n\
    }", "{\n    return text.equal(text.dup.reverse);\n}", "{\n    return text == text.dup.reverse;\n\
    }", "{\n    return text == text.dup.reverse;\n}", "{\n    return text == text.dup.reverse;\n\
    }", "{\n    return text == text.dup.reverse;\n}", "{\n    return text == text.dup.reverse;\n\
    }", "{\n    return text == text.dup.reverse;\n}", "{\n    return text == text.dup.reverse;\n\
    }", "{\n    return text == text.dup.reverse;\n}", "{\n    return text == text.dup.reverse;\n\
    }", "{\n    return text == text.dup.reverse;\n}", "{\n    return text == text.dup.reverse;\n\
    }", "{\n    return text == text.dup.reverse;\n}", "{\n    return text == text.dup.reverse;\n\
    }", "{\n    return text.equal(text.dup.reverse);\n}", "{\n    return text == text.dup.reverse;\n\
    }\n/*", "{\n    return text == text.dup.reverse;\n}", "{\n    auto len = text.length;\n\
    \    for (size_t i = 0; i < len / 2; i++) \n    {\n        if (text[i] != text[len\
    \ - i - 1]) \n        {\n            return false;\n        }\n    }\n    return\
    \ true;\n}", "{\n    auto len = text.length;\n    for (size_t i = 0; i < len /\
    \ 2; i++) \n    {\n        if (text[i] != text[len - i - 1]) \n        {\n   \
    \         return false;\n        }\n    }\n    return true;\n}", "{\n    return\
    \ text == text.dup.reverse;\n}", "{\n    auto length = text.length;\n    for (size_t\
    \ i = 0; i < length / 2; i++)\n    {\n        if (text[i] != text[length - i -\
    \ 1])\n        {\n            return false;\n        }\n    }\n    return true;\n\
    }", "{\n    return text == text.dup.reverse;\n}", "{\n    return text == text.dup.reverse;\n\
    }", "{\n    return text == text.dup.reverse;\n}", "{\n    return text == text.dup.reverse;\n\
    }", "{\n    return text == text.dup.reverse;\n}", "{\n    return text == text.dup.reverse;\n\
    }", "{\n    return text.front == text.back && is_palindrome(text.popFront.popBack);\n\
    }", "{\n    return text == text.dup.reverse;\n}", "{\n    return text.length ==\
    \ 0 || text.length == 1 || (text[0] == text[$-1] && is_palindrome(text[1..$-1]));\n\
    }", "{\n    return text == text.dup.reverse;\n}", "{\n    return text == text.dup.reverse;\n\
    }", "{\n    return text == text.dup.reverse;\n}", "{\n    return text.length ==\
    \ 0 || text.length == 1 || (text[0] == text[$-1] && is_palindrome(text[1..$-1]));\n\
    }", "{\n    auto len = text.length;\n    for (size_t i = 0; i < len / 2; i++)\n\
    \    {\n        if (text[i] != text[len - i - 1])\n            return false;\n\
    \    }\n    return true;\n}", "{\n    return text == text.dup.reverse;\n}\n/*",
  "{\n    return text == text.dup.reverse;\n}", "{\n    return text == text.dup.reverse;\n\
    }\n/*", "{\n    return text.length == 0 || text.length == 1 || (text[0] == text[$-1]\
    \ && is_palindrome(text[1..$-1]));\n}", "{\n    return text == text.dup.reverse;\n\
    }", "{\n    return text == text.dup.reverse;\n}", "{\n    return text == text.dup.reverse;\n\
    }", "{\n    return text == text.dup.reverse;\n}", "{\n    return text == text.dup.reverse;\n\
    }", "{\n    return text == text.dup.reverse;\n}", "{\n    auto len = text.length;\n\
    \    if (len == 0)\n        return true;\n    else if (len == 1)\n        return\
    \ true;\n    else if (len == 2)\n        return text[0] == text[1];\n    else\n\
    \    {\n        auto half = len / 2;\n        auto first = text[0..half];\n  \
    \      auto second = text[$-half..$];\n        return first == second.reverse;\n\
    \    }\n}", "{\n    return text == text.dup.reverse;\n}", "{\n    return text\
    \ == text.dup.reverse;\n}", "{\n    return text == text.dup.reverse;\n}", "{\n\
    \    return text == text.dup.reverse;\n}", "{\n    return text == text.dup.reverse;\n\
    }", "{\n    return text == text.dup.mirror;\n}", "{\n    return text == text.dup.reverse;\n\
    }", "{\n    return text == text.dup.reverse;\n}", "{\n    return text == text.dup.reverse;\n\
    }", "{\n    return text == text.dup.reverse;\n}", "{\n    return text.length ==\
    \ 0 || text.length == 1 || text[0] == text[$-1] && is_palindrome(text[1..$-1]);\n\
    }\n/*", "{\n    return text == text.dup.reverse;\n}", "{\n    return text.length\
    \ == 0 || text.length == 1 || (text[0] == text[$-1] && is_palindrome(text[1..$-1]));\n\
    }", "{\n    return text == text.dup.reverse;\n}", "{\n    return text == text.dup.reverse;\n\
    }", "{\n    return text == text.dup.reverse;\n}", "{\n    auto len = text.length;\n\
    \    foreach (i, j; 0 .. len / 2) \n    {\n        if (text[i] != text[len - j\
    \ - 1]) \n        {\n            return false;\n        }\n    }\n    return true;\n\
    }\n/*", "{\n    return text == text.dup.reverse;\n}", "{\n    return text.equal(text.dup.reverse);\n\
    }\n/*", "{\n    return text == text.dup.reverse;\n}", "{\n    return text == text.dup.reverse;\n\
    }", "{\n    return text == text.dup.reverse;\n}", "{\n    return text == text.dup.reverse;\n\
    }", "{\n    return text == text.dup.reverse;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
