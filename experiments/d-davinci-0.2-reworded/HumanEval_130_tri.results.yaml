language: d
name: HumanEval_130_tri
results:
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmgy1fsox.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmgy1fsox.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprd1rffo7.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprd1rffo7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    if (n > 0)\n        result[1] = 3;\n    if (n > 1)\n        result[2]\
    \ = 2;\n    for (int i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n   \
    \         result[i] = 1 + i / 2;\n        else\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpedgpd6_4.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpedgpd6_4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0] = 1;\n\
    \    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i < n + 1; i++)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpeqtwl546.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x42893e]\n??:? long[] tmpeqtwl546.tri(long) [0x427f82]\n??:?
    void tmpeqtwl546.__unittest_L40_C1() [0x427fbf]\n??:? void tmpeqtwl546.__modtest()
    [0x42860c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c947]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a65]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7b1]\n??:? runModuleUnitTests [0x42c71d]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d50]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428cd7]\n??:? _d_run_main [0x428c42]\n??:? main [0x42861f]\n??:?
    __libc_start_main [0xf1b69554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpc4ivo4m2.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc4ivo4m2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0] = 1;\n\
    \    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i <= n; i++)\n   \
    \ {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n \
    \       }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpag_62ct1.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpag_62ct1.tri(long) [0x427f7c]\n??:?
    void tmpag_62ct1.__unittest_L40_C1() [0x427fbb]\n??:? void tmpag_62ct1.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x82893554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0] =\
    \ 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmptb6b_a41.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmptb6b_a41.tri(long) [0x427f7c]\n??:?
    void tmptb6b_a41.__unittest_L40_C1() [0x427fbb]\n??:? void tmptb6b_a41.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0xfa15f554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprdkn5myk.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprdkn5myk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpezcc2sg2.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpezcc2sg2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0] =\
    \ 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\
    \ \n    {\n        if (i % 2 == 0) \n        {\n            result[i] = 1 + i\
    \ / 2;\n        } \n        else \n        {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpxsv1_0nt.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpxsv1_0nt.tri(long) [0x427f7c]\n??:?
    void tmpxsv1_0nt.__unittest_L40_C1() [0x427fbb]\n??:? void tmpxsv1_0nt.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0xb142c554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmy2d0oqa.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmy2d0oqa.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw9dpafqi.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw9dpafqi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0] =\
    \ 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpl6cff8st.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpl6cff8st.tri(long) [0x427f7c]\n??:?
    void tmpl6cff8st.__unittest_L40_C1() [0x427fbb]\n??:? void tmpl6cff8st.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0xe20b5554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0] = 1;\n\
    \    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i <= n; i++)\n   \
    \ {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n \
    \       }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpfra5rd9b.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpfra5rd9b.tri(long) [0x427f7c]\n??:?
    void tmpfra5rd9b.__unittest_L40_C1() [0x427fbb]\n??:? void tmpfra5rd9b.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0xe6822554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0] =\
    \ 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmp9hekbdh7.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmp9hekbdh7.tri(long) [0x427f7c]\n??:?
    void tmp9hekbdh7.__unittest_L40_C1() [0x427fbb]\n??:? void tmp9hekbdh7.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0xadd85554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0] =\
    \ 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpr9ubtquo.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpr9ubtquo.tri(long) [0x427f7c]\n??:?
    void tmpr9ubtquo.__unittest_L40_C1() [0x427fbb]\n??:? void tmpr9ubtquo.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x15326554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkabo8nam.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkabo8nam.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] res = new long[(int)n + 1];\n    for (int i\
    \ = 0; i <= n; i++)\n    {\n        if (i == 0)\n            res[i] = 1;\n   \
    \     else if (i == 1)\n            res[i] = 3;\n        else if (i == 2)\n  \
    \          res[i] = 2;\n        else if (i % 2 == 0)\n            res[i] = 1 +\
    \ i / 2;\n        else\n            res[i] = res[i - 1] + res[i - 2] + res[i +\
    \ 1];\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = tri;\n\n\
    \    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L,\
    \ 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppr7a39f2.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppr7a39f2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0] = 1;\n\
    \    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i < n+1; i++)\n  \
    \  {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpusklcopp.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x42893e]\n??:? long[] tmpusklcopp.tri(long) [0x427f82]\n??:?
    void tmpusklcopp.__unittest_L40_C1() [0x427fbf]\n??:? void tmpusklcopp.__modtest()
    [0x42860c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c947]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a65]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7b1]\n??:? runModuleUnitTests [0x42c71d]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d50]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428cd7]\n??:? _d_run_main [0x428c42]\n??:? main [0x42861f]\n??:?
    __libc_start_main [0xc4558554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    if (n == 0)\n\
    \        return result;\n    result[0] = 1;\n    if (n == 1)\n        return result;\n\
    \    result[1] = 3;\n    if (n == 2)\n        return result;\n    result[2] =\
    \ 2;\n    for (int i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n     \
    \       result[i] = 1 + i / 2;\n        else\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmp68iqkxwo.d(38): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428986]\n??:? long[] tmp68iqkxwo.tri(long) [0x427fc9]\n??:?
    void tmp68iqkxwo.__unittest_L42_C1() [0x428007]\n??:? void tmp68iqkxwo.__modtest()
    [0x428654]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c98f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b822]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430aad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f5c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430a39]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7f9]\n??:? runModuleUnitTests [0x42c765]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d98]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428d1f]\n??:? _d_run_main [0x428c8a]\n??:? main [0x428667]\n??:?
    __libc_start_main [0xb6615554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0] =\
    \ 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpr9ubtquo.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpr9ubtquo.tri(long) [0x427f7c]\n??:?
    void tmpr9ubtquo.__unittest_L40_C1() [0x427fbb]\n??:? void tmpr9ubtquo.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x15326554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0] =\
    \ 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\
    \ \n    {\n        if (i % 2 == 0) \n        {\n            result[i] = 1 + i\
    \ / 2;\n        } \n        else \n        {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpxsv1_0nt.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpxsv1_0nt.tri(long) [0x427f7c]\n??:?
    void tmpxsv1_0nt.__unittest_L40_C1() [0x427fbb]\n??:? void tmpxsv1_0nt.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0xb142c554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0] = 1;\n\
    \    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i <= n; i++)\n   \
    \ {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n \
    \       }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpfra5rd9b.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpfra5rd9b.tri(long) [0x427f7c]\n??:?
    void tmpfra5rd9b.__unittest_L40_C1() [0x427fbb]\n??:? void tmpfra5rd9b.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0xe6822554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] a = new long[n + 1];\n    a[0] = 1;\n    a[1]\
    \ = 3;\n    a[2] = 2;\n    for (int i = 3; i <= n; i++)\n    {\n        if (i\
    \ % 2 == 0)\n        {\n            a[i] = 1 + i / 2;\n        }\n        else\n\
    \        {\n            a[i] = a[i - 1] + a[i - 2] + a[i + 1];\n        }\n  \
    \  }\n    return a;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpqlq7wjjf.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpqlq7wjjf.tri(long) [0x427f7c]\n??:?
    void tmpqlq7wjjf.__unittest_L40_C1() [0x427fbb]\n??:? void tmpqlq7wjjf.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x678c4554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0] =\
    \ 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpr9ubtquo.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpr9ubtquo.tri(long) [0x427f7c]\n??:?
    void tmpr9ubtquo.__unittest_L40_C1() [0x427fbb]\n??:? void tmpr9ubtquo.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x15326554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    if (n ==\
    \ 0)\n        return result;\n    result[0] = 1;\n    if (n == 1)\n        return\
    \ result;\n    result[1] = 3;\n    if (n == 2)\n        return result;\n    result[2]\
    \ = 2;\n    for (int i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n   \
    \         result[i] = 1 + i / 2;\n        else\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp13kvmtjc.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp13kvmtjc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0] =\
    \ 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpr9ubtquo.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpr9ubtquo.tri(long) [0x427f7c]\n??:?
    void tmpr9ubtquo.__unittest_L40_C1() [0x427fbb]\n??:? void tmpr9ubtquo.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x15326554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] arr = new long[(int)n+1];\n    arr[0] = 1;\n\
    \    arr[1] = 3;\n    arr[2] = 2;\n    for(int i = 3; i < n+1; i++)\n    {\n \
    \       if(i % 2 == 0)\n        {\n            arr[i] = 1 + i / 2;\n        }\n\
    \        else\n        {\n            arr[i] = arr[i-1] + arr[i-2] + arr[i+1];\n\
    \        }\n    }\n    return arr;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph4emujlj.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph4emujlj.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0] =\
    \ 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpr9ubtquo.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpr9ubtquo.tri(long) [0x427f7c]\n??:?
    void tmpr9ubtquo.__unittest_L40_C1() [0x427fbb]\n??:? void tmpr9ubtquo.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x15326554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0] =\
    \ 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpr9ubtquo.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpr9ubtquo.tri(long) [0x427f7c]\n??:?
    void tmpr9ubtquo.__unittest_L40_C1() [0x427fbb]\n??:? void tmpr9ubtquo.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x15326554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0] =\
    \ 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpr9ubtquo.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpr9ubtquo.tri(long) [0x427f7c]\n??:?
    void tmpr9ubtquo.__unittest_L40_C1() [0x427fbb]\n??:? void tmpr9ubtquo.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x15326554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0] =\
    \ 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (long i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmp8zrzybsa.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x42893e]\n??:? long[] tmp8zrzybsa.tri(long) [0x427f7f]\n??:?
    void tmp8zrzybsa.__unittest_L40_C1() [0x427fbf]\n??:? void tmp8zrzybsa.__modtest()
    [0x42860c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c947]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a65]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7b1]\n??:? runModuleUnitTests [0x42c71d]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d50]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428cd7]\n??:? _d_run_main [0x428c42]\n??:? main [0x42861f]\n??:?
    __libc_start_main [0x9c0bc554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0] =\
    \ 1;\n    if (n > 0)\n        result[1] = 3;\n    if (n > 1)\n        result[2]\
    \ = 2;\n    for (int i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n   \
    \         result[i] = 1 + i / 2;\n        else\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpqvfzs34x.d(34): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x42894e]\n??:? long[] tmpqvfzs34x.tri(long) [0x427f90]\n??:?
    void tmpqvfzs34x.__unittest_L38_C1() [0x427fcf]\n??:? void tmpqvfzs34x.__modtest()
    [0x42861c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c957]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7ea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a75]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f24]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430a01]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7c1]\n??:? runModuleUnitTests [0x42c72d]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d60]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ce7]\n??:? _d_run_main [0x428c52]\n??:? main [0x42862f]\n??:?
    __libc_start_main [0x4527554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0] = 1;\n\
    \    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i <= n; i++)\n   \
    \ {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n \
    \       }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpfra5rd9b.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpfra5rd9b.tri(long) [0x427f7c]\n??:?
    void tmpfra5rd9b.__unittest_L40_C1() [0x427fbb]\n??:? void tmpfra5rd9b.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0xe6822554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0] =\
    \ 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpr9ubtquo.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpr9ubtquo.tri(long) [0x427f7c]\n??:?
    void tmpr9ubtquo.__unittest_L40_C1() [0x427fbb]\n??:? void tmpr9ubtquo.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x15326554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0] = 1;\n\
    \    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i <= n; i++)\n   \
    \ {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n \
    \       }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpfra5rd9b.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpfra5rd9b.tri(long) [0x427f7c]\n??:?
    void tmpfra5rd9b.__unittest_L40_C1() [0x427fbb]\n??:? void tmpfra5rd9b.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0xe6822554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + (i / 2);\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfsv6p3kc.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfsv6p3kc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0] = 1;\n\
    \    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i <= n; i++)\n   \
    \ {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n \
    \       }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpfra5rd9b.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpfra5rd9b.tri(long) [0x427f7c]\n??:?
    void tmpfra5rd9b.__unittest_L40_C1() [0x427fbb]\n??:? void tmpfra5rd9b.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0xe6822554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] res = new long[(int)n + 1];\n    res[0] = 1;\n\
    \    res[1] = 3;\n    res[2] = 2;\n    for (int i = 3; i <= n; i++)\n    {\n \
    \       if (i % 2 == 0)\n        {\n            res[i] = 1 + i / 2;\n        }\n\
    \        else\n        {\n            res[i] = res[i - 1] + res[i - 2] + res[i\
    \ + 1];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgdzrne1e.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgdzrne1e.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0] =\
    \ 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (long i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmp8zrzybsa.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x42893e]\n??:? long[] tmp8zrzybsa.tri(long) [0x427f7f]\n??:?
    void tmp8zrzybsa.__unittest_L40_C1() [0x427fbf]\n??:? void tmp8zrzybsa.__modtest()
    [0x42860c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c947]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a65]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7b1]\n??:? runModuleUnitTests [0x42c71d]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d50]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428cd7]\n??:? _d_run_main [0x428c42]\n??:? main [0x42861f]\n??:?
    __libc_start_main [0x9c0bc554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0] =\
    \ 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpr9ubtquo.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpr9ubtquo.tri(long) [0x427f7c]\n??:?
    void tmpr9ubtquo.__unittest_L40_C1() [0x427fbb]\n??:? void tmpr9ubtquo.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x15326554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0] =\
    \ 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpr9ubtquo.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpr9ubtquo.tri(long) [0x427f7c]\n??:?
    void tmpr9ubtquo.__unittest_L40_C1() [0x427fbb]\n??:? void tmpr9ubtquo.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x15326554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0] =\
    \ 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpr9ubtquo.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpr9ubtquo.tri(long) [0x427f7c]\n??:?
    void tmpr9ubtquo.__unittest_L40_C1() [0x427fbb]\n??:? void tmpr9ubtquo.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x15326554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0] =\
    \ 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpr9ubtquo.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpr9ubtquo.tri(long) [0x427f7c]\n??:?
    void tmpr9ubtquo.__unittest_L40_C1() [0x427fbb]\n??:? void tmpr9ubtquo.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x15326554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0] =\
    \ 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpr9ubtquo.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpr9ubtquo.tri(long) [0x427f7c]\n??:?
    void tmpr9ubtquo.__unittest_L40_C1() [0x427fbb]\n??:? void tmpr9ubtquo.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x15326554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    if (n == 0)\n\
    \        return result;\n    result[0] = 1;\n    if (n == 1)\n        return result;\n\
    \    result[1] = 3;\n    if (n == 2)\n        return result;\n    result[2] =\
    \ 2;\n    for (int i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n     \
    \       result[i] = 1 + i / 2;\n        else\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmp68iqkxwo.d(38): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428986]\n??:? long[] tmp68iqkxwo.tri(long) [0x427fc9]\n??:?
    void tmp68iqkxwo.__unittest_L42_C1() [0x428007]\n??:? void tmp68iqkxwo.__modtest()
    [0x428654]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c98f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b822]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430aad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f5c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430a39]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7f9]\n??:? runModuleUnitTests [0x42c765]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d98]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428d1f]\n??:? _d_run_main [0x428c8a]\n??:? main [0x428667]\n??:?
    __libc_start_main [0xb6615554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0] = 1;\n\
    \    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i <= n; i++)\n   \
    \ {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n \
    \       }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpfra5rd9b.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpfra5rd9b.tri(long) [0x427f7c]\n??:?
    void tmpfra5rd9b.__unittest_L40_C1() [0x427fbb]\n??:? void tmpfra5rd9b.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0xe6822554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    if (n == 0)\n\
    \        return result;\n    result[0] = 1;\n    if (n == 1)\n        return result;\n\
    \    result[1] = 3;\n    if (n == 2)\n        return result;\n    result[2] =\
    \ 2;\n    for (int i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n     \
    \       result[i] = 1 + i / 2;\n        else\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmp68iqkxwo.d(38): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428986]\n??:? long[] tmp68iqkxwo.tri(long) [0x427fc9]\n??:?
    void tmp68iqkxwo.__unittest_L42_C1() [0x428007]\n??:? void tmp68iqkxwo.__modtest()
    [0x428654]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c98f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b822]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430aad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f5c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430a39]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7f9]\n??:? runModuleUnitTests [0x42c765]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d98]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428d1f]\n??:? _d_run_main [0x428c8a]\n??:? main [0x428667]\n??:?
    __libc_start_main [0xb6615554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0] =\
    \ 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpr9ubtquo.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpr9ubtquo.tri(long) [0x427f7c]\n??:?
    void tmpr9ubtquo.__unittest_L40_C1() [0x427fbb]\n??:? void tmpr9ubtquo.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x15326554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0] = 1;\n\
    \    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i <= n; i++)\n   \
    \ {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n \
    \       }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpfra5rd9b.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpfra5rd9b.tri(long) [0x427f7c]\n??:?
    void tmpfra5rd9b.__unittest_L40_C1() [0x427fbb]\n??:? void tmpfra5rd9b.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0xe6822554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0] =\
    \ 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpr9ubtquo.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpr9ubtquo.tri(long) [0x427f7c]\n??:?
    void tmpr9ubtquo.__unittest_L40_C1() [0x427fbb]\n??:? void tmpr9ubtquo.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x15326554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    if (n > 0)\n        result[1] = 3;\n    if (n > 1)\n        result[2]\
    \ = 2;\n    for (int i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n   \
    \         result[i] = 1 + i / 2;\n        else\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpedgpd6_4.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpedgpd6_4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0] = 1;\n\
    \    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i <= n; i++)\n   \
    \ {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n \
    \       }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpfra5rd9b.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpfra5rd9b.tri(long) [0x427f7c]\n??:?
    void tmpfra5rd9b.__unittest_L40_C1() [0x427fbb]\n??:? void tmpfra5rd9b.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0xe6822554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0] =\
    \ 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpr9ubtquo.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpr9ubtquo.tri(long) [0x427f7c]\n??:?
    void tmpr9ubtquo.__unittest_L40_C1() [0x427fbb]\n??:? void tmpr9ubtquo.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x15326554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0] = 1;\n\
    \    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i <= n; i++)\n   \
    \ {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n \
    \       }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpfra5rd9b.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpfra5rd9b.tri(long) [0x427f7c]\n??:?
    void tmpfra5rd9b.__unittest_L40_C1() [0x427fbb]\n??:? void tmpfra5rd9b.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0xe6822554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    if (n == 0) return new long[0];\n    if (n == 1) return\
    \ new long[] {1};\n    if (n == 2) return new long[] {1, 3};\n    long[] res =\
    \ new long[n + 1];\n    res[0] = 1;\n    res[1] = 3;\n    res[2] = 2;\n    for\
    \ (int i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n        {\n      \
    \      res[i] = 1 + i / 2;\n        }\n        else\n        {\n            res[i]\
    \ = res[i - 1] + res[i - 2] + res[i + 1];\n        }\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp4k4wcph.d(24): Error: found `{` when expecting `;` following
    `return` statement\n/tmp/tmpp4k4wcph.d(24): Error: found `}` when expecting `;`
    following statement\n/tmp/tmpp4k4wcph.d(24): Deprecation: use `{ }` for an empty
    statement, not `;`\n/tmp/tmpp4k4wcph.d(25): Error: found `{` when expecting `;`
    following `return` statement\n/tmp/tmpp4k4wcph.d(25): Error: found `}` when expecting
    `;` following statement\n/tmp/tmpp4k4wcph.d(25): Deprecation: use `{ }` for an
    empty statement, not `;`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp4k4wcph.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0] =\
    \ 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpr9ubtquo.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpr9ubtquo.tri(long) [0x427f7c]\n??:?
    void tmpr9ubtquo.__unittest_L40_C1() [0x427fbb]\n??:? void tmpr9ubtquo.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x15326554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0] = 1;\n\
    \    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i <= n; i++)\n   \
    \ {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + (i / 2);\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmp52s9tixy.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmp52s9tixy.tri(long) [0x427f7c]\n??:?
    void tmp52s9tixy.__unittest_L40_C1() [0x427fbb]\n??:? void tmp52s9tixy.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x5fbae554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    if (n ==\
    \ 0)\n        return result;\n    result[0] = 1;\n    if (n == 1)\n        return\
    \ result;\n    result[1] = 3;\n    if (n == 2)\n        return result;\n    result[2]\
    \ = 2;\n    for (int i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n   \
    \         result[i] = 1 + i / 2;\n        else\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp13kvmtjc.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp13kvmtjc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0] =\
    \ 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpr9ubtquo.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpr9ubtquo.tri(long) [0x427f7c]\n??:?
    void tmpr9ubtquo.__unittest_L40_C1() [0x427fbb]\n??:? void tmpr9ubtquo.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x15326554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    if (n ==\
    \ 0)\n        return result;\n    result[0] = 1;\n    if (n == 1)\n        return\
    \ result;\n    result[1] = 3;\n    if (n == 2)\n        return result;\n    result[2]\
    \ = 2;\n    for (int i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n   \
    \         result[i] = 1 + i / 2;\n        else\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp13kvmtjc.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp13kvmtjc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0] =\
    \ 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (long i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmp8zrzybsa.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x42893e]\n??:? long[] tmp8zrzybsa.tri(long) [0x427f7f]\n??:?
    void tmp8zrzybsa.__unittest_L40_C1() [0x427fbf]\n??:? void tmp8zrzybsa.__modtest()
    [0x42860c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c947]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a65]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7b1]\n??:? runModuleUnitTests [0x42c71d]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d50]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428cd7]\n??:? _d_run_main [0x428c42]\n??:? main [0x42861f]\n??:?
    __libc_start_main [0x9c0bc554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    for (int i =\
    \ 0; i <= n; i++)\n    {\n        if (i == 0)\n        {\n            result[i]\
    \ = 1;\n        }\n        else if (i == 1)\n        {\n            result[i]\
    \ = 3;\n        }\n        else if (i == 2)\n        {\n            result[i]\
    \ = 2;\n        }\n        else if (i % 2 == 0)\n        {\n            result[i]\
    \ = 1 + i / 2;\n        }\n        else\n        {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmppplbpy8v.d(44): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428976]\n??:? long[] tmppplbpy8v.tri(long) [0x427fba]\n??:?
    void tmppplbpy8v.__unittest_L49_C1() [0x427ff7]\n??:? void tmppplbpy8v.__modtest()
    [0x428644]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c97f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b812]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a9d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f4c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430a29]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7e9]\n??:? runModuleUnitTests [0x42c755]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d88]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428d0f]\n??:? _d_run_main [0x428c7a]\n??:? main [0x428657]\n??:?
    __libc_start_main [0x8f1b5554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0] =\
    \ 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpr9ubtquo.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpr9ubtquo.tri(long) [0x427f7c]\n??:?
    void tmpr9ubtquo.__unittest_L40_C1() [0x427fbb]\n??:? void tmpr9ubtquo.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x15326554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0] = 1;\n\
    \    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i <= n; i++)\n   \
    \ {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n \
    \       }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpfra5rd9b.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpfra5rd9b.tri(long) [0x427f7c]\n??:?
    void tmpfra5rd9b.__unittest_L40_C1() [0x427fbb]\n??:? void tmpfra5rd9b.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0xe6822554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0] =\
    \ 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpr9ubtquo.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpr9ubtquo.tri(long) [0x427f7c]\n??:?
    void tmpr9ubtquo.__unittest_L40_C1() [0x427fbb]\n??:? void tmpr9ubtquo.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x15326554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    if (n == 0)\n\
    \        return result;\n    result[0] = 1;\n    if (n == 1)\n        return result;\n\
    \    result[1] = 3;\n    if (n == 2)\n        return result;\n    result[2] =\
    \ 2;\n    for (int i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n     \
    \       result[i] = 1 + i / 2;\n        else\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmp68iqkxwo.d(38): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428986]\n??:? long[] tmp68iqkxwo.tri(long) [0x427fc9]\n??:?
    void tmp68iqkxwo.__unittest_L42_C1() [0x428007]\n??:? void tmp68iqkxwo.__modtest()
    [0x428654]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c98f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b822]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430aad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f5c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430a39]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7f9]\n??:? runModuleUnitTests [0x42c765]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d98]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428d1f]\n??:? _d_run_main [0x428c8a]\n??:? main [0x428667]\n??:?
    __libc_start_main [0xb6615554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] arr = new long[n + 1];\n    arr[0] = 1;\n \
    \   arr[1] = 3;\n    arr[2] = 2;\n    for (int i = 3; i < n + 1; i++)\n    {\n\
    \        if (i % 2 == 0)\n        {\n            arr[i] = 1 + i / 2;\n       \
    \ }\n        else\n        {\n            arr[i] = arr[i - 1] + arr[i - 2] + arr[i\
    \ + 1];\n        }\n    }\n    return arr;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpgi6x4950.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x42893e]\n??:? long[] tmpgi6x4950.tri(long) [0x427f82]\n??:?
    void tmpgi6x4950.__unittest_L40_C1() [0x427fbf]\n??:? void tmpgi6x4950.__modtest()
    [0x42860c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c947]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a65]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7b1]\n??:? runModuleUnitTests [0x42c71d]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d50]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428cd7]\n??:? _d_run_main [0x428c42]\n??:? main [0x42861f]\n??:?
    __libc_start_main [0x2a38c554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0] =\
    \ 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpr9ubtquo.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpr9ubtquo.tri(long) [0x427f7c]\n??:?
    void tmpr9ubtquo.__unittest_L40_C1() [0x427fbb]\n??:? void tmpr9ubtquo.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x15326554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0] =\
    \ 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpr9ubtquo.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpr9ubtquo.tri(long) [0x427f7c]\n??:?
    void tmpr9ubtquo.__unittest_L40_C1() [0x427fbb]\n??:? void tmpr9ubtquo.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x15326554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0] =\
    \ 1;\n    if (n > 0) result[1] = 3;\n    if (n > 1) result[2] = 2;\n    for (int\
    \ i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n        {\n           \
    \ result[i] = 1 + i / 2;\n        }\n        else\n        {\n            result[i]\
    \ = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpc80y1xlh.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x42894e]\n??:? long[] tmpc80y1xlh.tri(long) [0x427f90]\n??:?
    void tmpc80y1xlh.__unittest_L40_C1() [0x427fcf]\n??:? void tmpc80y1xlh.__modtest()
    [0x42861c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c957]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7ea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a75]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f24]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430a01]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7c1]\n??:? runModuleUnitTests [0x42c72d]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d60]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ce7]\n??:? _d_run_main [0x428c52]\n??:? main [0x42862f]\n??:?
    __libc_start_main [0x9ca2a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0] = 1;\n\
    \    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i < n+1; i++)\n  \
    \  {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpusklcopp.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x42893e]\n??:? long[] tmpusklcopp.tri(long) [0x427f82]\n??:?
    void tmpusklcopp.__unittest_L40_C1() [0x427fbf]\n??:? void tmpusklcopp.__modtest()
    [0x42860c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c947]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a65]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7b1]\n??:? runModuleUnitTests [0x42c71d]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d50]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428cd7]\n??:? _d_run_main [0x428c42]\n??:? main [0x42861f]\n??:?
    __libc_start_main [0xc4558554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] tribonacci = new long[n + 1];\n    tribonacci[0]\
    \ = 1;\n    tribonacci[1] = 3;\n    tribonacci[2] = 2;\n    for (int i = 3; i\
    \ <= n; i++)\n    {\n        if (i % 2 == 0)\n        {\n            tribonacci[i]\
    \ = 1 + i / 2;\n        }\n        else\n        {\n            tribonacci[i]\
    \ = tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i + 1];\n        }\n  \
    \  }\n    return tribonacci;\n}\nunittest\n{\n    alias candidate = tri;\n\n \
    \   assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L,\
    \ 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmp_bjs1pw7.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmp_bjs1pw7.tri(long) [0x427f7c]\n??:?
    void tmp_bjs1pw7.__unittest_L40_C1() [0x427fbb]\n??:? void tmp_bjs1pw7.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x41af1554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    for (int\
    \ i = 0; i <= n; i++)\n    {\n        if (i == 0)\n        {\n            result[i]\
    \ = 1;\n        }\n        else if (i == 1)\n        {\n            result[i]\
    \ = 3;\n        }\n        else if (i == 2)\n        {\n            result[i]\
    \ = 2;\n        }\n        else if (i % 2 == 0)\n        {\n            result[i]\
    \ = 1 + i / 2;\n        }\n        else\n        {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjsbgyead.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjsbgyead.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0] =\
    \ 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpr9ubtquo.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpr9ubtquo.tri(long) [0x427f7c]\n??:?
    void tmpr9ubtquo.__unittest_L40_C1() [0x427fbb]\n??:? void tmpr9ubtquo.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x15326554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0] =\
    \ 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpr9ubtquo.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpr9ubtquo.tri(long) [0x427f7c]\n??:?
    void tmpr9ubtquo.__unittest_L40_C1() [0x427fbb]\n??:? void tmpr9ubtquo.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x15326554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    if (n ==\
    \ 0)\n        return result;\n    result[0] = 1;\n    if (n == 1)\n        return\
    \ result;\n    result[1] = 3;\n    if (n == 2)\n        return result;\n    result[2]\
    \ = 2;\n    for (int i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n   \
    \         result[i] = 1 + i / 2;\n        else\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp13kvmtjc.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp13kvmtjc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    if (n ==\
    \ 0)\n        return result;\n    result[0] = 1;\n    if (n == 1)\n        return\
    \ result;\n    result[1] = 3;\n    if (n == 2)\n        return result;\n    result[2]\
    \ = 2;\n    for (int i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n   \
    \         result[i] = 1 + i / 2;\n        else\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp13kvmtjc.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp13kvmtjc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0] = 1;\n\
    \    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i <= n; i++)\n   \
    \ {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n \
    \       }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpfra5rd9b.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpfra5rd9b.tri(long) [0x427f7c]\n??:?
    void tmpfra5rd9b.__unittest_L40_C1() [0x427fbb]\n??:? void tmpfra5rd9b.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0xe6822554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0] =\
    \ 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpr9ubtquo.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpr9ubtquo.tri(long) [0x427f7c]\n??:?
    void tmpr9ubtquo.__unittest_L40_C1() [0x427fbb]\n??:? void tmpr9ubtquo.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x15326554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0] =\
    \ 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpr9ubtquo.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpr9ubtquo.tri(long) [0x427f7c]\n??:?
    void tmpr9ubtquo.__unittest_L40_C1() [0x427fbb]\n??:? void tmpr9ubtquo.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x15326554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    if (n > 0)\n        result[1] = 3;\n    if (n > 1)\n        result[2]\
    \ = 2;\n    for (int i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n   \
    \         result[i] = 1 + i / 2;\n        else\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpedgpd6_4.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpedgpd6_4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0] = 1;\n\
    \    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i <= n; i++)\n   \
    \ {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n \
    \       }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpfra5rd9b.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpfra5rd9b.tri(long) [0x427f7c]\n??:?
    void tmpfra5rd9b.__unittest_L40_C1() [0x427fbb]\n??:? void tmpfra5rd9b.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0xe6822554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    for (int\
    \ i = 0; i <= n; i++)\n    {\n        if (i == 0)\n        {\n            result[i]\
    \ = 1;\n        }\n        else if (i == 1)\n        {\n            result[i]\
    \ = 3;\n        }\n        else if (i == 2)\n        {\n            result[i]\
    \ = 2;\n        }\n        else if (i % 2 == 0)\n        {\n            result[i]\
    \ = 1 + i / 2;\n        }\n        else\n        {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjsbgyead.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjsbgyead.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0] = 1;\n\
    \    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i <= n; i++)\n   \
    \ {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n \
    \       }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpfra5rd9b.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpfra5rd9b.tri(long) [0x427f7c]\n??:?
    void tmpfra5rd9b.__unittest_L40_C1() [0x427fbb]\n??:? void tmpfra5rd9b.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0xe6822554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0] =\
    \ 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpr9ubtquo.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpr9ubtquo.tri(long) [0x427f7c]\n??:?
    void tmpr9ubtquo.__unittest_L40_C1() [0x427fbb]\n??:? void tmpr9ubtquo.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x15326554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0] =\
    \ 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpr9ubtquo.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpr9ubtquo.tri(long) [0x427f7c]\n??:?
    void tmpr9ubtquo.__unittest_L40_C1() [0x427fbb]\n??:? void tmpr9ubtquo.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x15326554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0] = 1;\n\
    \    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i < n+1; i++)\n  \
    \  {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + (i / 2);\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpmzpldk1j.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x42893e]\n??:? long[] tmpmzpldk1j.tri(long) [0x427f82]\n??:?
    void tmpmzpldk1j.__unittest_L40_C1() [0x427fbf]\n??:? void tmpmzpldk1j.__modtest()
    [0x42860c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c947]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a65]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7b1]\n??:? runModuleUnitTests [0x42c71d]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d50]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428cd7]\n??:? _d_run_main [0x428c42]\n??:? main [0x42861f]\n??:?
    __libc_start_main [0xd04fb554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    for (int\
    \ i = 0; i <= n; i++)\n    {\n        if (i == 0)\n        {\n            result[i]\
    \ = 1;\n        }\n        else if (i == 1)\n        {\n            result[i]\
    \ = 3;\n        }\n        else if (i == 2)\n        {\n            result[i]\
    \ = 2;\n        }\n        else if (i % 2 == 0)\n        {\n            result[i]\
    \ = 1 + i / 2;\n        }\n        else\n        {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjsbgyead.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjsbgyead.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + (i / 2);\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfsv6p3kc.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfsv6p3kc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0] =\
    \ 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpr9ubtquo.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpr9ubtquo.tri(long) [0x427f7c]\n??:?
    void tmpr9ubtquo.__unittest_L40_C1() [0x427fbb]\n??:? void tmpr9ubtquo.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x15326554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0] =\
    \ 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpr9ubtquo.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpr9ubtquo.tri(long) [0x427f7c]\n??:?
    void tmpr9ubtquo.__unittest_L40_C1() [0x427fbb]\n??:? void tmpr9ubtquo.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x15326554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    if (n == 0) return result;\n    result[1] = 3;\n    if (n == 1) return\
    \ result;\n    result[2] = 2;\n    if (n == 2) return result;\n    for (int i\
    \ = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i]\
    \ = 1 + i / 2;\n        }\n        else\n        {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxbh14e_8.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxbh14e_8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0] = 1;\n\
    \    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i <= n; i++)\n   \
    \ {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n \
    \       }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpfra5rd9b.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpfra5rd9b.tri(long) [0x427f7c]\n??:?
    void tmpfra5rd9b.__unittest_L40_C1() [0x427fbb]\n??:? void tmpfra5rd9b.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0xe6822554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0] =\
    \ 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpr9ubtquo.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpr9ubtquo.tri(long) [0x427f7c]\n??:?
    void tmpr9ubtquo.__unittest_L40_C1() [0x427fbb]\n??:? void tmpr9ubtquo.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x15326554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0] =\
    \ 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpr9ubtquo.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpr9ubtquo.tri(long) [0x427f7c]\n??:?
    void tmpr9ubtquo.__unittest_L40_C1() [0x427fbb]\n??:? void tmpr9ubtquo.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x15326554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0] = 1;\n\
    \    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i < n+1; i++)\n  \
    \  {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpusklcopp.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x42893e]\n??:? long[] tmpusklcopp.tri(long) [0x427f82]\n??:?
    void tmpusklcopp.__unittest_L40_C1() [0x427fbf]\n??:? void tmpusklcopp.__modtest()
    [0x42860c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c947]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a65]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7b1]\n??:? runModuleUnitTests [0x42c71d]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d50]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428cd7]\n??:? _d_run_main [0x428c42]\n??:? main [0x42861f]\n??:?
    __libc_start_main [0xc4558554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0] = 1;\n\
    \    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i <= n; i++)\n   \
    \ {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n \
    \       }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpfra5rd9b.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpfra5rd9b.tri(long) [0x427f7c]\n??:?
    void tmpfra5rd9b.__unittest_L40_C1() [0x427fbb]\n??:? void tmpfra5rd9b.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0xe6822554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0] = 1;\n\
    \    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i <= n; i++)\n   \
    \ {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n \
    \       }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpfra5rd9b.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpfra5rd9b.tri(long) [0x427f7c]\n??:?
    void tmpfra5rd9b.__unittest_L40_C1() [0x427fbb]\n??:? void tmpfra5rd9b.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0xe6822554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0] =\
    \ 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpr9ubtquo.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpr9ubtquo.tri(long) [0x427f7c]\n??:?
    void tmpr9ubtquo.__unittest_L40_C1() [0x427fbb]\n??:? void tmpr9ubtquo.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x15326554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0] =\
    \ 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpr9ubtquo.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpr9ubtquo.tri(long) [0x427f7c]\n??:?
    void tmpr9ubtquo.__unittest_L40_C1() [0x427fbb]\n??:? void tmpr9ubtquo.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x15326554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0] =\
    \ 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpr9ubtquo.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpr9ubtquo.tri(long) [0x427f7c]\n??:?
    void tmpr9ubtquo.__unittest_L40_C1() [0x427fbb]\n??:? void tmpr9ubtquo.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x15326554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    if (n ==\
    \ 0) return result;\n    result[0] = 1;\n    if (n == 1) return result;\n    result[1]\
    \ = 3;\n    if (n == 2) return result;\n    result[2] = 2;\n    for (int i = 3;\
    \ i <= n; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i]\
    \ = 1 + i / 2;\n        }\n        else\n        {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphjaaos5j.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphjaaos5j.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0] =\
    \ 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpr9ubtquo.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpr9ubtquo.tri(long) [0x427f7c]\n??:?
    void tmpr9ubtquo.__unittest_L40_C1() [0x427fbb]\n??:? void tmpr9ubtquo.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x15326554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0] =\
    \ 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpr9ubtquo.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpr9ubtquo.tri(long) [0x427f7c]\n??:?
    void tmpr9ubtquo.__unittest_L40_C1() [0x427fbb]\n??:? void tmpr9ubtquo.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x15326554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0] = 1;\n\
    \    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i <= n; i++)\n   \
    \ {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n \
    \       }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpfra5rd9b.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpfra5rd9b.tri(long) [0x427f7c]\n??:?
    void tmpfra5rd9b.__unittest_L40_C1() [0x427fbb]\n??:? void tmpfra5rd9b.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0xe6822554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] tribonacci = new long[(int)n + 1];\n    tribonacci[0]\
    \ = 1;\n    tribonacci[1] = 3;\n    tribonacci[2] = 2;\n    for (int i = 3; i\
    \ < tribonacci.length; i++)\n    {\n        if (i % 2 == 0)\n        {\n     \
    \       tribonacci[i] = 1 + i / 2;\n        }\n        else\n        {\n     \
    \       tribonacci[i] = tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i +\
    \ 1];\n        }\n    }\n    return tribonacci;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp59j5ux_o.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp59j5ux_o.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0] =\
    \ 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpr9ubtquo.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpr9ubtquo.tri(long) [0x427f7c]\n??:?
    void tmpr9ubtquo.__unittest_L40_C1() [0x427fbb]\n??:? void tmpr9ubtquo.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x15326554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0] =\
    \ 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpr9ubtquo.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpr9ubtquo.tri(long) [0x427f7c]\n??:?
    void tmpr9ubtquo.__unittest_L40_C1() [0x427fbb]\n??:? void tmpr9ubtquo.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x15326554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0] =\
    \ 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpr9ubtquo.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpr9ubtquo.tri(long) [0x427f7c]\n??:?
    void tmpr9ubtquo.__unittest_L40_C1() [0x427fbb]\n??:? void tmpr9ubtquo.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x15326554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0] =\
    \ 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpr9ubtquo.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpr9ubtquo.tri(long) [0x427f7c]\n??:?
    void tmpr9ubtquo.__unittest_L40_C1() [0x427fbb]\n??:? void tmpr9ubtquo.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x15326554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0] = 1;\n\
    \    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i < n+1; i++)\n  \
    \  {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpusklcopp.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x42893e]\n??:? long[] tmpusklcopp.tri(long) [0x427f82]\n??:?
    void tmpusklcopp.__unittest_L40_C1() [0x427fbf]\n??:? void tmpusklcopp.__modtest()
    [0x42860c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c947]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a65]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7b1]\n??:? runModuleUnitTests [0x42c71d]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d50]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428cd7]\n??:? _d_run_main [0x428c42]\n??:? main [0x42861f]\n??:?
    __libc_start_main [0xc4558554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0] =\
    \ 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpr9ubtquo.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpr9ubtquo.tri(long) [0x427f7c]\n??:?
    void tmpr9ubtquo.__unittest_L40_C1() [0x427fbb]\n??:? void tmpr9ubtquo.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x15326554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    if (n > 0)\n    {\n        result[1] = 3;\n        for (int i = 2;\
    \ i < n + 1; i++)\n        {\n            if (i % 2 == 0)\n            {\n   \
    \             result[i] = 1 + i / 2;\n            }\n            else\n      \
    \      {\n                result[i] = result[i - 1] + result[i - 2] + result[i\
    \ + 1];\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj77yr6le.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj77yr6le.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] arr = new long[(int)n+1];\n    arr[0] = 1;\n\
    \    arr[1] = 3;\n    arr[2] = 2;\n    for(int i = 3; i < n+1; i++)\n    {\n \
    \       if(i % 2 == 0)\n        {\n            arr[i] = 1 + i / 2;\n        }\n\
    \        else\n        {\n            arr[i] = arr[i-1] + arr[i-2] + arr[i+1];\n\
    \        }\n    }\n    return arr;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph4emujlj.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph4emujlj.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0] =\
    \ 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpr9ubtquo.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpr9ubtquo.tri(long) [0x427f7c]\n??:?
    void tmpr9ubtquo.__unittest_L40_C1() [0x427fbb]\n??:? void tmpr9ubtquo.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x15326554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0] = 1;\n\
    \    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i < n+1; i++)\n  \
    \  {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpusklcopp.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x42893e]\n??:? long[] tmpusklcopp.tri(long) [0x427f82]\n??:?
    void tmpusklcopp.__unittest_L40_C1() [0x427fbf]\n??:? void tmpusklcopp.__modtest()
    [0x42860c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c947]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a65]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7b1]\n??:? runModuleUnitTests [0x42c71d]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d50]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428cd7]\n??:? _d_run_main [0x428c42]\n??:? main [0x42861f]\n??:?
    __libc_start_main [0xc4558554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0] =\
    \ 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpr9ubtquo.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpr9ubtquo.tri(long) [0x427f7c]\n??:?
    void tmpr9ubtquo.__unittest_L40_C1() [0x427fbb]\n??:? void tmpr9ubtquo.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x15326554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0] = 1;\n\
    \    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i <= n; i++)\n   \
    \ {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n \
    \       }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpfra5rd9b.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpfra5rd9b.tri(long) [0x427f7c]\n??:?
    void tmpfra5rd9b.__unittest_L40_C1() [0x427fbb]\n??:? void tmpfra5rd9b.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0xe6822554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0] =\
    \ 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpr9ubtquo.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpr9ubtquo.tri(long) [0x427f7c]\n??:?
    void tmpr9ubtquo.__unittest_L40_C1() [0x427fbb]\n??:? void tmpr9ubtquo.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x15326554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0] = 1;\n\
    \    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i < n+1; i++)\n  \
    \  {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpusklcopp.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x42893e]\n??:? long[] tmpusklcopp.tri(long) [0x427f82]\n??:?
    void tmpusklcopp.__unittest_L40_C1() [0x427fbf]\n??:? void tmpusklcopp.__modtest()
    [0x42860c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c947]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a65]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f14]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309f1]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7b1]\n??:? runModuleUnitTests [0x42c71d]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d50]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428cd7]\n??:? _d_run_main [0x428c42]\n??:? main [0x42861f]\n??:?
    __libc_start_main [0xc4558554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0] = 1;\n\
    \    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i <= n; i++)\n   \
    \ {\n        result[i] = (i % 2 == 0) ? 1 + i / 2 : result[i-1] + result[i-2]\
    \ + result[i+1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpe8cqq226.d(29): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428916]\n??:? long[] tmpe8cqq226.tri(long) [0x427f47]\n??:?
    void tmpe8cqq226.__unittest_L33_C1() [0x427f9b]\n??:? void tmpe8cqq226.__modtest()
    [0x4285e8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c91f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7b2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a3d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430eec]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309c9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b789]\n??:? runModuleUnitTests [0x42c6f5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d28]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428caf]\n??:? _d_run_main [0x428c1a]\n??:? main [0x4285fb]\n??:?
    __libc_start_main [0x3d21554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0] = 1;\n\
    \    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i <= n; i++)\n   \
    \ {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n \
    \       }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpfra5rd9b.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpfra5rd9b.tri(long) [0x427f7c]\n??:?
    void tmpfra5rd9b.__unittest_L40_C1() [0x427fbb]\n??:? void tmpfra5rd9b.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0xe6822554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0] = 1;\n\
    \    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i <= n; i++)\n   \
    \ {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n \
    \       }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpfra5rd9b.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpfra5rd9b.tri(long) [0x427f7c]\n??:?
    void tmpfra5rd9b.__unittest_L40_C1() [0x427fbb]\n??:? void tmpfra5rd9b.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0xe6822554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0] =\
    \ 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        result[i] = (i % 2 == 0) ? (1 + i / 2) : (result[i - 1] + result[i\
    \ - 2] + result[i + 1]);\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmppffiumvg.d(29): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428916]\n??:? long[] tmppffiumvg.tri(long) [0x427f47]\n??:?
    void tmppffiumvg.__unittest_L33_C1() [0x427f9b]\n??:? void tmppffiumvg.__modtest()
    [0x4285e8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c91f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7b2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a3d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430eec]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309c9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b789]\n??:? runModuleUnitTests [0x42c6f5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d28]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428caf]\n??:? _d_run_main [0x428c1a]\n??:? main [0x4285fb]\n??:?
    __libc_start_main [0xafe82554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    if (n > 0)\n    {\n        result[1] = 3;\n        if (n > 1)\n  \
    \      {\n            result[2] = 2;\n            if (n > 2)\n            {\n\
    \                for (int i = 3; i <= n; i++)\n                {\n           \
    \         if (i % 2 == 0)\n                    {\n                        result[i]\
    \ = 1 + i / 2;\n                    }\n                    else\n            \
    \        {\n                        result[i] = result[i - 1] + result[i - 2]\
    \ + result[i + 1];\n                    }\n                }\n            }\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphkopflut.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphkopflut.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0] = 1;\n\
    \    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i <= n; i++)\n   \
    \ {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n \
    \       }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpfra5rd9b.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpfra5rd9b.tri(long) [0x427f7c]\n??:?
    void tmpfra5rd9b.__unittest_L40_C1() [0x427fbb]\n??:? void tmpfra5rd9b.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0xe6822554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        result[i] = (i % 2 == 0) ? (1 + i / 2) : (result[i - 1] + result[i\
    \ - 2] + result[i + 1]);\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_4487s9l.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_4487s9l.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n + 1];\n    result[0] =\
    \ 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpr9ubtquo.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpr9ubtquo.tri(long) [0x427f7c]\n??:?
    void tmpr9ubtquo.__unittest_L40_C1() [0x427fbb]\n??:? void tmpr9ubtquo.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0x15326554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0] = 1;\n\
    \    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i <= n; i++)\n   \
    \ {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n \
    \       }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpfra5rd9b.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpfra5rd9b.tri(long) [0x427f7c]\n??:?
    void tmpfra5rd9b.__unittest_L40_C1() [0x427fbb]\n??:? void tmpfra5rd9b.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0xe6822554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[n+1];\n    result[0] = 1;\n\
    \    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3; i <= n; i++)\n   \
    \ {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n \
    \       }\n        else\n        {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpfra5rd9b.d(35): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428936]\n??:? long[] tmpfra5rd9b.tri(long) [0x427f7c]\n??:?
    void tmpfra5rd9b.__unittest_L40_C1() [0x427fbb]\n??:? void tmpfra5rd9b.__modtest()
    [0x428608]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7a9]\n??:? runModuleUnitTests [0x42c715]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428ccf]\n??:? _d_run_main [0x428c3a]\n??:? main [0x42861b]\n??:?
    __libc_start_main [0xe6822554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nEveryone knows Fibonacci sequence, it was studied\
    \ deeply by mathematicians in \n    the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the\
    \ recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n)\
    \ =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n  \
    \  tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n\
    \           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number\
    \ n, you have to a return an array of the \n    first n + 1 numbers of the Tribonacci\
    \ sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L, 8L]\n    \n*/\n\
    long[] tri(long n) \n{\n    long[] result = new long[(int)n + 1];\n    result[0]\
    \ = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg9qotm_3.d(23): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9qotm_3.d", "-I/tmp"]\n'''
  stdout: b''
