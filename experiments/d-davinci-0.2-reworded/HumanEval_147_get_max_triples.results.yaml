name: HumanEval_147_get_max_triples
language: d
results:
- program: "import std.math;\n/*\n\n    You are given a positive integer n. You have\
    \ to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n        Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \n*/\nlong get_max_triples(long n) \n{\n    long count = 0;\n    for (long\
    \ i = 1; i < n - 1; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n  \
    \      {\n            for (long k = j + 1; k <= n; k++)\n            {\n     \
    \           if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n  \
    \              {\n                    count++;\n                }\n          \
    \  }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    You are given a positive integer n. You have\
    \ to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n        Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    for (long\
    \ i = 1; i < n - 1; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n  \
    \      {\n            for (long k = j + 1; k <= n; k++)\n            {\n     \
    \           if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n  \
    \              {\n                    result++;\n                }\n         \
    \   }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    You are given a positive integer n. You have\
    \ to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n        Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \n*/\nlong get_max_triples(long n) \n{\n    long res = 0;\n    for (long\
    \ i = 1; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n      \
    \  {\n            for (long k = j + 1; k < n; k++)\n            {\n          \
    \      if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n       \
    \         {\n                    res++;\n                }\n            }\n  \
    \      }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpfevsax4n.d(40): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ddd]\\n??:? void tmpfevsax4n.__unittest_L35_C1()\
    \ [0x427b05]\\n??:? void tmpfevsax4n.__modtest() [0x427b5c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb03]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a996]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb29]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a96d]\\n??:? runModuleUnitTests [0x42b8d9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42822c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281b3]\\n??:? _d_run_main [0x42811e]\\n??:? main [0x427b6f]\\\
    n??:? __libc_start_main [0x994aa554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    You are given a positive integer n. You have\
    \ to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n        Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long a[n];\n\
    \    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n\
    \    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n;\
    \ j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n\
    \                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n     \
    \               result++;\n                }\n            }\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n\
    \    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp04wzsel8.d(20): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `long[n] a`\\n/tmp/tmp04wzsel8.d(20): Error: variable `n` cannot be read\
    \ at compile time\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp04wzsel8.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    You are given a positive integer n. You have\
    \ to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n        Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    for (long\
    \ i = 1; i < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n         \
    \   for (long k = j + 1; k < n; k++) {\n                if ((i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0) {\n                    result++;\n  \
    \              }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n\
    \    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L)\
    \ == 53361L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpui8nlkup.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ddd]\\n??:? void tmpui8nlkup.__unittest_L31_C1()\
    \ [0x427b05]\\n??:? void tmpui8nlkup.__modtest() [0x427b5c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb03]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a996]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb29]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a96d]\\n??:? runModuleUnitTests [0x42b8d9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42822c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281b3]\\n??:? _d_run_main [0x42811e]\\n??:? main [0x427b6f]\\\
    n??:? __libc_start_main [0x832e2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    You are given a positive integer n. You have\
    \ to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n        Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    for (long\
    \ i = 1; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n      \
    \  {\n            for (long k = j + 1; k < n; k++)\n            {\n          \
    \      if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n       \
    \         {\n                    result++;\n                }\n            }\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpg08oq7rs.d(40): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ddd]\\n??:? void tmpg08oq7rs.__unittest_L35_C1()\
    \ [0x427b05]\\n??:? void tmpg08oq7rs.__modtest() [0x427b5c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb03]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a996]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb29]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a96d]\\n??:? runModuleUnitTests [0x42b8d9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42822c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281b3]\\n??:? _d_run_main [0x42811e]\\n??:? main [0x427b6f]\\\
    n??:? __libc_start_main [0x44fc3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    You are given a positive integer n. You have\
    \ to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n        Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \n*/\nlong get_max_triples(long n) \n{\n    long res = 0;\n    for (long\
    \ i = 1; i < n - 1; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n  \
    \      {\n            for (long k = j + 1; k <= n; k++)\n            {\n     \
    \           if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n  \
    \              {\n                    res++;\n                }\n            }\n\
    \        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    You are given a positive integer n. You have\
    \ to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n        Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    for (long\
    \ i = 1; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n      \
    \  {\n            for (long k = j + 1; k < n; k++)\n            {\n          \
    \      if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n       \
    \         {\n                    result++;\n                }\n            }\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpftjcbvi8.d(40): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ddd]\\n??:? void tmpftjcbvi8.__unittest_L35_C1()\
    \ [0x427b05]\\n??:? void tmpftjcbvi8.__modtest() [0x427b5c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb03]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a996]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb29]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a96d]\\n??:? runModuleUnitTests [0x42b8d9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42822c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281b3]\\n??:? _d_run_main [0x42811e]\\n??:? main [0x427b6f]\\\
    n??:? __libc_start_main [0x7d5bc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    You are given a positive integer n. You have\
    \ to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n        Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \n*/\nlong get_max_triples(long n) \n{\n    long res = 0;\n    for (long\
    \ i = 1; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n      \
    \  {\n            for (long k = j + 1; k < n; k++)\n            {\n          \
    \      if (((i * i - i + 1) + (j * j - j + 1) + (k * k - k + 1)) % 3 == 0)\n \
    \               {\n                    res++;\n                }\n           \
    \ }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate =\
    \ get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpvyb0cl91.d(40): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427dd5]\\n??:? void tmpvyb0cl91.__unittest_L35_C1()\
    \ [0x427b01]\\n??:? void tmpvyb0cl91.__modtest() [0x427b58]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bafb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a98e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb21]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faad]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a965]\\n??:? runModuleUnitTests [0x42b8d1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428224]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281ab]\\n??:? _d_run_main [0x428116]\\n??:? main [0x427b6b]\\\
    n??:? __libc_start_main [0x9247e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    You are given a positive integer n. You have\
    \ to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n        Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    for (long\
    \ i = 0; i < n - 2; i++)\n    {\n        for (long j = i + 1; j < n - 1; j++)\n\
    \        {\n            for (long k = j + 1; k < n; k++)\n            {\n    \
    \            if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n \
    \               {\n                    result++;\n                }\n        \
    \    }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpv7_sycpf.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ddd]\\n??:? void tmpv7_sycpf.__unittest_L35_C1()\
    \ [0x427ae4]\\n??:? void tmpv7_sycpf.__modtest() [0x427b5c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb03]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a996]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb29]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a96d]\\n??:? runModuleUnitTests [0x42b8d9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42822c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281b3]\\n??:? _d_run_main [0x42811e]\\n??:? main [0x427b6f]\\\
    n??:? __libc_start_main [0x7682b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    You are given a positive integer n. You have\
    \ to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n        Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n   \
    \ long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i *\
    \ i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long\
    \ j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n\
    \            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n         \
    \       {\n                    count++;\n                }\n            }\n  \
    \      }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpllr98zmk.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428135]\\n??:? void tmpllr98zmk.__unittest_L40_C1()\
    \ [0x427e40]\\n??:? void tmpllr98zmk.__modtest() [0x427eb8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c133]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afc6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430251]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42af9d]\\n??:? runModuleUnitTests [0x42bf09]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4285f8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42857f]\\n??:? _d_run_main [0x4284ea]\\n??:? main [0x427ecb]\\\
    n??:? __libc_start_main [0x97bbe554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    You are given a positive integer n. You have\
    \ to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n        Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    for (long\
    \ i = 1; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n      \
    \  {\n            for (long k = j + 1; k < n; k++)\n            {\n          \
    \      if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n       \
    \         {\n                    result++;\n                }\n            }\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpbg44eyf7.d(40): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ddd]\\n??:? void tmpbg44eyf7.__unittest_L35_C1()\
    \ [0x427b05]\\n??:? void tmpbg44eyf7.__modtest() [0x427b5c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb03]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a996]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb29]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a96d]\\n??:? runModuleUnitTests [0x42b8d9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42822c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281b3]\\n??:? _d_run_main [0x42811e]\\n??:? main [0x427b6f]\\\
    n??:? __libc_start_main [0xfe080554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    You are given a positive integer n. You have\
    \ to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n        Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    for (long\
    \ i = 1; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n      \
    \  {\n            for (long k = j + 1; k < n; k++)\n            {\n          \
    \      if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n       \
    \         {\n                    result++;\n                }\n            }\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp38viynx1.d(40): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ddd]\\n??:? void tmp38viynx1.__unittest_L35_C1()\
    \ [0x427b05]\\n??:? void tmp38viynx1.__modtest() [0x427b5c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb03]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a996]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb29]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a96d]\\n??:? runModuleUnitTests [0x42b8d9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42822c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281b3]\\n??:? _d_run_main [0x42811e]\\n??:? main [0x427b6f]\\\
    n??:? __libc_start_main [0xc229554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    You are given a positive integer n. You have\
    \ to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n        Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n   \
    \ long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i *\
    \ i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long\
    \ j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n\
    \            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n         \
    \       {\n                    count++;\n                }\n            }\n  \
    \      }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmps04envfb.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428135]\\n??:? void tmps04envfb.__unittest_L40_C1()\
    \ [0x427e40]\\n??:? void tmps04envfb.__modtest() [0x427eb8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c133]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afc6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430251]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42af9d]\\n??:? runModuleUnitTests [0x42bf09]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4285f8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42857f]\\n??:? _d_run_main [0x4284ea]\\n??:? main [0x427ecb]\\\
    n??:? __libc_start_main [0x23531554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    You are given a positive integer n. You have\
    \ to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n        Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    for (long\
    \ i = 1; i < n - 1; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n  \
    \      {\n            for (long k = j + 1; k <= n; k++)\n            {\n     \
    \           if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n  \
    \              {\n                    result++;\n                }\n         \
    \   }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    You are given a positive integer n. You have\
    \ to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n        Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    for (long\
    \ i = 1; i < n - 1; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n  \
    \      {\n            for (long k = j + 1; k <= n; k++)\n            {\n     \
    \           if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n  \
    \              {\n                    result++;\n                }\n         \
    \   }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    You are given a positive integer n. You have\
    \ to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n        Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    for (long\
    \ i = 1; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n      \
    \  {\n            for (long k = j + 1; k < n; k++)\n            {\n          \
    \      if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n       \
    \         {\n                    result++;\n                }\n            }\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpond2pzhr.d(40): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ddd]\\n??:? void tmpond2pzhr.__unittest_L35_C1()\
    \ [0x427b05]\\n??:? void tmpond2pzhr.__modtest() [0x427b5c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb03]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a996]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb29]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a96d]\\n??:? runModuleUnitTests [0x42b8d9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42822c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281b3]\\n??:? _d_run_main [0x42811e]\\n??:? main [0x427b6f]\\\
    n??:? __libc_start_main [0xe6ab2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    You are given a positive integer n. You have\
    \ to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n        Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \n*/\nlong get_max_triples(long n) \n{\n    long max_triples = 0;\n    long[]\
    \ a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i\
    \ * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long\
    \ j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n\
    \            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n         \
    \       {\n                    max_triples++;\n                }\n           \
    \ }\n        }\n    }\n    return max_triples;\n}\nunittest\n{\n    alias candidate\
    \ = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpejt57b4o.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42813d]\\n??:? void tmpejt57b4o.__unittest_L40_C1()\
    \ [0x427e44]\\n??:? void tmpejt57b4o.__modtest() [0x427ebc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c13b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430259]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afa5]\\n??:? runModuleUnitTests [0x42bf11]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428600]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428587]\\n??:? _d_run_main [0x4284f2]\\n??:? main [0x427ecf]\\\
    n??:? __libc_start_main [0xeb3d6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    You are given a positive integer n. You have\
    \ to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n        Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \n*/\nlong get_max_triples(long n) \n{\n    long count = 0;\n    for (long\
    \ i = 1; i < n - 1; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n  \
    \      {\n            for (long k = j + 1; k <= n; k++)\n            {\n     \
    \           if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n  \
    \              {\n                    count++;\n                }\n          \
    \  }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L)\
    \ == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    You are given a positive integer n. You have\
    \ to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n        Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation:\
    \ \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n\
    \    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n   \
    \ long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i *\
    \ i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long\
    \ j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n\
    \            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n         \
    \       {\n                    count++;\n                }\n            }\n  \
    \      }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\
    \n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L)\
    \ == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpr0c66q7c.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428135]\\n??:? void tmpr0c66q7c.__unittest_L40_C1()\
    \ [0x427e40]\\n??:? void tmpr0c66q7c.__modtest() [0x427eb8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c133]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afc6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430251]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42af9d]\\n??:? runModuleUnitTests [0x42bf09]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4285f8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42857f]\\n??:? _d_run_main [0x4284ea]\\n??:? main [0x427ecb]\\\
    n??:? __libc_start_main [0x9b5d6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
