name: HumanEval_122_add_elements
language: d
results:
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n    >>>\
    \ add_elements([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\n    24L\n\n  \
    \  Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n\
    \    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long sum = 0L;\n   \
    \ foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100L)\n        {\n          \
    \  sum += arr[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias\
    \ candidate = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L,\
    \ 87L, 88L, 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L,\
    \ 6L], 2L) == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L],\
    \ 4L) == 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L],\
    \ 4L) == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n    >>>\
    \ add_elements([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\n    24L\n\n  \
    \  Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n\
    \    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long sum = 0L;\n   \
    \ foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100L)\n        {\n          \
    \  sum += arr[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias\
    \ candidate = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L,\
    \ 87L, 88L, 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L,\
    \ 6L], 2L) == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L],\
    \ 4L) == 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L],\
    \ 4L) == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n    >>>\
    \ add_elements([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\n    24L\n\n  \
    \  Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n\
    \    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long sum = 0L;\n   \
    \ long i = 0L;\n    while(i < k)\n    {\n        if(arr[i] < 100L)\n        {\n\
    \            sum += arr[i];\n        }\n        i++;\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add_elements;\n\n    assert(candidate([1L,\
    \ -2L, -3L, 41L, 57L, 76L, 87L, 88L, 99L], 3L) == -4L);\n    assert(candidate([111L,\
    \ 121L, 3L, 4000L, 5L, 6L], 2L) == 0L);\n    assert(candidate([11L, 21L, 3L, 90L,\
    \ 5L, 6L, 7L, 8L, 9L], 4L) == 125L);\n    assert(candidate([111L, 21L, 3L, 4000L,\
    \ 5L, 6L, 7L, 8L, 9L], 4L) == 24L);\n    assert(candidate([1L], 1L) == 1L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n    >>>\
    \ add_elements([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\n    24L\n\n  \
    \  Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n\
    \    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long sum = 0L;\n   \
    \ long i = 0L;\n    while (i < k)\n    {\n        if (arr[i] < 100L)\n       \
    \ {\n            sum += arr[i];\n        }\n        i++;\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add_elements;\n\n    assert(candidate([1L,\
    \ -2L, -3L, 41L, 57L, 76L, 87L, 88L, 99L], 3L) == -4L);\n    assert(candidate([111L,\
    \ 121L, 3L, 4000L, 5L, 6L], 2L) == 0L);\n    assert(candidate([11L, 21L, 3L, 90L,\
    \ 5L, 6L, 7L, 8L, 9L], 4L) == 125L);\n    assert(candidate([111L, 21L, 3L, 4000L,\
    \ 5L, 6L, 7L, 8L, 9L], 4L) == 24L);\n    assert(candidate([1L], 1L) == 1L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n    >>>\
    \ add_elements([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\n    24L\n\n  \
    \  Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n\
    \    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long sum = 0L;\n   \
    \ long i = 0L;\n    while (i < k) \n    {\n        long num = arr[i];\n      \
    \  if (num < 100L) \n        {\n            sum += num;\n        }\n        i\
    \ += 1L;\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add_elements;\n\
    \n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L, 99L], 3L) == -4L);\n\
    \    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L) == 0L);\n    assert(candidate([11L,\
    \ 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) == 125L);\n    assert(candidate([111L,\
    \ 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L) == 24L);\n    assert(candidate([1L],\
    \ 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n    >>>\
    \ add_elements([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\n    24L\n\n  \
    \  Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n\
    \    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long sum = 0L;\n   \
    \ foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100L)\n        {\n          \
    \  sum += arr[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias\
    \ candidate = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L,\
    \ 87L, 88L, 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L,\
    \ 6L], 2L) == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L],\
    \ 4L) == 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L],\
    \ 4L) == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n    >>>\
    \ add_elements([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\n    24L\n\n  \
    \  Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n\
    \    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long sum = 0L;\n   \
    \ foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100L)\n        {\n          \
    \  sum += arr[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias\
    \ candidate = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L,\
    \ 87L, 88L, 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L,\
    \ 6L], 2L) == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L],\
    \ 4L) == 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L],\
    \ 4L) == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n    >>>\
    \ add_elements([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\n    24L\n\n  \
    \  Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n\
    \    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long sum = 0L;\n   \
    \ long[] arr_copy = arr.dup;\n    arr_copy.sort;\n    foreach(i; 0..k)\n    {\n\
    \        if(arr_copy[i] < 100L)\n        {\n            sum += arr_copy[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add_elements;\n\
    \n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L, 99L], 3L) == -4L);\n\
    \    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L) == 0L);\n    assert(candidate([11L,\
    \ 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) == 125L);\n    assert(candidate([111L,\
    \ 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L) == 24L);\n    assert(candidate([1L],\
    \ 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph_bs2z1x.d(22): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph_bs2z1x.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n    >>>\
    \ add_elements([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\n    24L\n\n  \
    \  Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n\
    \    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long sum = 0L;\n   \
    \ foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100L)\n        {\n          \
    \  sum += arr[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias\
    \ candidate = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L,\
    \ 87L, 88L, 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L,\
    \ 6L], 2L) == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L],\
    \ 4L) == 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L],\
    \ 4L) == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n    >>>\
    \ add_elements([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\n    24L\n\n  \
    \  Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n\
    \    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long sum = 0L;\n   \
    \ foreach(i; 0..k)\n    {\n        if(arr[i] < 100L)\n        {\n            sum\
    \ += arr[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n    >>>\
    \ add_elements([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\n    24L\n\n  \
    \  Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n\
    \    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long sum = 0L;\n   \
    \ foreach(i; 0 .. k)\n    {\n        if (arr[i] < 100L)\n        {\n         \
    \   sum += arr[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias\
    \ candidate = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L,\
    \ 87L, 88L, 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L,\
    \ 6L], 2L) == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L],\
    \ 4L) == 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L],\
    \ 4L) == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n    >>>\
    \ add_elements([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\n    24L\n\n  \
    \  Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n\
    \    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long sum = 0L;\n   \
    \ for (long i = 0L; i < k; i++)\n    {\n        if (arr[i] < 100L)\n        {\n\
    \            sum += arr[i];\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = add_elements;\n\n    assert(candidate([1L, -2L, -3L,\
    \ 41L, 57L, 76L, 87L, 88L, 99L], 3L) == -4L);\n    assert(candidate([111L, 121L,\
    \ 3L, 4000L, 5L, 6L], 2L) == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L,\
    \ 6L, 7L, 8L, 9L], 4L) == 125L);\n    assert(candidate([111L, 21L, 3L, 4000L,\
    \ 5L, 6L, 7L, 8L, 9L], 4L) == 24L);\n    assert(candidate([1L], 1L) == 1L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n    >>>\
    \ add_elements([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\n    24L\n\n  \
    \  Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n\
    \    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long sum = 0L;\n   \
    \ foreach(i; 0..k)\n    {\n        if (arr[i] < 100L)\n        {\n           \
    \ sum += arr[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias\
    \ candidate = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L,\
    \ 87L, 88L, 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L,\
    \ 6L], 2L) == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L],\
    \ 4L) == 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L],\
    \ 4L) == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n    >>>\
    \ add_elements([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\n    24L\n\n  \
    \  Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n\
    \    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long sum = 0L;\n   \
    \ foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100L)\n        {\n          \
    \  sum += arr[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias\
    \ candidate = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L,\
    \ 87L, 88L, 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L,\
    \ 6L], 2L) == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L],\
    \ 4L) == 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L],\
    \ 4L) == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n    >>>\
    \ add_elements([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\n    24L\n\n  \
    \  Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n\
    \    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long sum = 0L;\n   \
    \ long i = 0L;\n    while (i < k) \n    {\n        if (arr[i] < 100L) \n     \
    \   {\n            sum += arr[i];\n        }\n        i++;\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = add_elements;\n\n    assert(candidate([1L,\
    \ -2L, -3L, 41L, 57L, 76L, 87L, 88L, 99L], 3L) == -4L);\n    assert(candidate([111L,\
    \ 121L, 3L, 4000L, 5L, 6L], 2L) == 0L);\n    assert(candidate([11L, 21L, 3L, 90L,\
    \ 5L, 6L, 7L, 8L, 9L], 4L) == 125L);\n    assert(candidate([111L, 21L, 3L, 4000L,\
    \ 5L, 6L, 7L, 8L, 9L], 4L) == 24L);\n    assert(candidate([1L], 1L) == 1L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n    >>>\
    \ add_elements([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\n    24L\n\n  \
    \  Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n\
    \    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long sum = 0L;\n   \
    \ foreach(idx, val; arr[0..k])\n    {\n        if(val < 100L)\n        {\n   \
    \         sum += val;\n        }\n    }\n    return sum;\n}\nunittest\n{\n   \
    \ alias candidate = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L,\
    \ 57L, 76L, 87L, 88L, 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L,\
    \ 4000L, 5L, 6L], 2L) == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L,\
    \ 7L, 8L, 9L], 4L) == 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L,\
    \ 6L, 7L, 8L, 9L], 4L) == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n    >>>\
    \ add_elements([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\n    24L\n\n  \
    \  Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n\
    \    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long sum = 0L;\n   \
    \ long i = 0L;\n    while (i < k)\n    {\n        if (arr[i] < 100L)\n       \
    \ {\n            sum += arr[i];\n        }\n        i++;\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add_elements;\n\n    assert(candidate([1L,\
    \ -2L, -3L, 41L, 57L, 76L, 87L, 88L, 99L], 3L) == -4L);\n    assert(candidate([111L,\
    \ 121L, 3L, 4000L, 5L, 6L], 2L) == 0L);\n    assert(candidate([11L, 21L, 3L, 90L,\
    \ 5L, 6L, 7L, 8L, 9L], 4L) == 125L);\n    assert(candidate([111L, 21L, 3L, 4000L,\
    \ 5L, 6L, 7L, 8L, 9L], 4L) == 24L);\n    assert(candidate([1L], 1L) == 1L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n    >>>\
    \ add_elements([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\n    24L\n\n  \
    \  Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n\
    \    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long sum = 0L;\n   \
    \ foreach(i; 0..k)\n    {\n        if(arr[i] < 100L)\n        {\n            sum\
    \ += arr[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n    >>>\
    \ add_elements([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\n    24L\n\n  \
    \  Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n\
    \    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long sum = 0L;\n   \
    \ foreach(i; 0 .. k)\n    {\n        if(arr[i] < 100L)\n        {\n          \
    \  sum += arr[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias\
    \ candidate = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L,\
    \ 87L, 88L, 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L,\
    \ 6L], 2L) == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L],\
    \ 4L) == 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L],\
    \ 4L) == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n    >>>\
    \ add_elements([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\n    24L\n\n  \
    \  Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n\
    \    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long sum = 0L;\n   \
    \ foreach(i; 0 .. k)\n    {\n        if (arr[i] < 100L)\n        {\n         \
    \   sum += arr[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias\
    \ candidate = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L,\
    \ 87L, 88L, 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L,\
    \ 6L], 2L) == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L],\
    \ 4L) == 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L],\
    \ 4L) == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
