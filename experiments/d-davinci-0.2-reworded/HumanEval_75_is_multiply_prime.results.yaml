name: HumanEval_75_is_multiply_prime
language: d
results:
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    int[] prime = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(i;\
    \ prime)\n    {\n        if(a % i == 0)\n        {\n            result = true;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpvb9xzman.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281d5]\\n??:? void tmpvb9xzman.__unittest_L26_C1()\
    \ [0x427e2a]\\n??:? void tmpvb9xzman.__modtest() [0x427f58]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c19b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b02e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4301c1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430670]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43014d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b005]\\n??:? runModuleUnitTests [0x42bf71]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428624]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285ab]\\n??:? _d_run_main [0x428516]\\n??:? main [0x427f6b]\\\
    n??:? __libc_start_main [0xf555c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    long[]\
    \ factors = [];\n    foreach(i; primes)\n    {\n        if(a % i == 0)\n     \
    \   {\n            factors ~= i;\n            a /= i;\n        }\n    }\n    if(factors.length\
    \ == 3)\n    {\n        result = true;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpgnp49l94.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42827d]\\n??:? void tmpgnp49l94.__unittest_L32_C1()\
    \ [0x427f0e]\\n??:? void tmpgnp49l94.__modtest() [0x427ffc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cc53]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bae6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430539]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309e8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4304c5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42babd]\\n??:? runModuleUnitTests [0x42ca29]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286cc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428653]\\n??:? _d_run_main [0x4285be]\\n??:? main [0x42800f]\\\
    n??:? __libc_start_main [0xb047554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n)\n    {\n        if (n < 2)\n            return false;\n\
    \        if (n == 2)\n            return true;\n        if (n % 2 == 0)\n    \
    \        return false;\n        for (long i = 3; i <= sqrt(n); i += 2)\n     \
    \   {\n            if (n % i == 0)\n                return false;\n        }\n\
    \        return true;\n    }\n    if (a < 2)\n        return false;\n    if (a\
    \ == 2)\n        return true;\n    if (a % 2 == 0)\n        return false;\n  \
    \  for (long i = 3; i <= sqrt(a); i += 2)\n    {\n        if (a % i == 0)\n  \
    \      {\n            if (is_prime(i) && is_prime(a / i))\n                return\
    \ true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxp2dmaie.d(23): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\n/tmp/tmpxp2dmaie.d(36): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpxp2dmaie.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    long[] prime_numbers = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n \
    \   foreach(i; prime_numbers)\n    {\n        if(a % i == 0)\n        {\n    \
    \        result = true;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmph07o3zs1.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42820d]\\n??:? void tmph07o3zs1.__unittest_L26_C1()\
    \ [0x427e5e]\\n??:? void tmph07o3zs1.__modtest() [0x427f8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c1f7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b08a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43021d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b061]\\n??:? runModuleUnitTests [0x42bfcd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42865c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285e3]\\n??:? _d_run_main [0x42854e]\\n??:? main [0x427f9f]\\\
    n??:? __libc_start_main [0xde385554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    long[] factors = [];\n    foreach(prime;\
    \ primes)\n    {\n        if(a % prime == 0)\n        {\n            factors ~=\
    \ prime;\n            a /= prime;\n        }\n    }\n    return factors.length\
    \ == 3;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp456rbdp9.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42826d]\\n??:? void tmp456rbdp9.__unittest_L27_C1()\
    \ [0x427f02]\\n??:? void tmp456rbdp9.__modtest() [0x427ff0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cc43]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bad6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430529]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309d8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4304b5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42baad]\\n??:? runModuleUnitTests [0x42ca19]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286bc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428643]\\n??:? _d_run_main [0x4285ae]\\n??:? main [0x428003]\\\
    n??:? __libc_start_main [0x7e7a2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    // your code goes here\n    int[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    int i\
    \ = 0;\n    int j = 0;\n    int k = 0;\n    for(i = 0; i < primes.length; i++)\n\
    \    {\n        for(j = 0; j < primes.length; j++)\n        {\n            for(k\
    \ = 0; k < primes.length; k++)\n            {\n                if(primes[i] *\
    \ primes[j] * primes[k] == a)\n                {\n                    return true;\n\
    \                }\n            }\n        }\n    }\n    return false;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a < 6)\n        return false;\n    if (a % 2 == 0)\n        return is_multiply_prime(a\
    \ / 2);\n    if (a % 3 == 0)\n        return is_multiply_prime(a / 3);\n    if\
    \ (a % 5 == 0)\n        return is_multiply_prime(a / 5);\n    return true;\n}\n\
    unittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpb7nxdlm0.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e5d]\\n??:? void tmpb7nxdlm0.__unittest_L25_C1()\
    \ [0x427acf]\\n??:? void tmpb7nxdlm0.__modtest() [0x427bdc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb83]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa16]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fba9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9ed]\\n??:? runModuleUnitTests [0x42b959]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282ac]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428233]\\n??:? _d_run_main [0x42819e]\\n??:? main [0x427bef]\\\
    n??:? __libc_start_main [0xb7d5e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long a)\n    {\n        if (a == 1)\n            return false;\n\
    \        if (a == 2)\n            return true;\n        if (a % 2 == 0)\n    \
    \        return false;\n        for (long i = 3; i < a; i += 2)\n        {\n \
    \           if (a % i == 0)\n                return false;\n        }\n      \
    \  return true;\n    }\n    long[] prime_numbers = new long[100];\n    long count\
    \ = 0;\n    for (long i = 1; i < 100; i++)\n    {\n        if (is_prime(i))\n\
    \        {\n            prime_numbers[count] = i;\n            count++;\n    \
    \    }\n    }\n    for (long i = 0; i < count; i++)\n    {\n        for (long\
    \ j = 0; j < count; j++)\n        {\n            for (long k = 0; k < count; k++)\n\
    \            {\n                if (prime_numbers[i] * prime_numbers[j] * prime_numbers[k]\
    \ == a)\n                    return true;\n            }\n        }\n    }\n \
    \   return false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n\
    \    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n  \
    \  assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L)\
    \ == true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L)\
    \ == false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L)\
    \ == false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long a)\n    {\n        if (a <= 1)\n            return false;\n\
    \        else if (a == 2)\n            return true;\n        else if (a % 2 ==\
    \ 0)\n            return false;\n        else\n        {\n            long i =\
    \ 3;\n            while (i <= sqrt(a))\n            {\n                if (a %\
    \ i == 0)\n                    return false;\n                i += 2;\n      \
    \      }\n            return true;\n        }\n    }\n    if (a <= 100)\n    {\n\
    \        long i = 2;\n        long b = a;\n        while (i <= b)\n        {\n\
    \            if (is_prime(i) && b % i == 0)\n            {\n                b\
    \ /= i;\n                if (b == 1)\n                    return true;\n     \
    \       }\n            else\n                i++;\n        }\n    }\n    return\
    \ false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbacujgy_.d(26): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpbacujgy_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    long[] factors = [];\n    foreach(i;\
    \ primes)\n    {\n        if(a % i == 0)\n        {\n            factors ~= i;\n\
    \            a /= i;\n        }\n    }\n    return factors.length == 3;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpvcjnmvie.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42826d]\\n??:? void tmpvcjnmvie.__unittest_L27_C1()\
    \ [0x427f02]\\n??:? void tmpvcjnmvie.__modtest() [0x427ff0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cc43]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bad6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430529]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309d8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4304b5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42baad]\\n??:? runModuleUnitTests [0x42ca19]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286bc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428643]\\n??:? _d_run_main [0x4285ae]\\n??:? main [0x428003]\\\
    n??:? __libc_start_main [0xf2997554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n)\n    {\n        if (n <= 1)\n            return false;\n\
    \        else if (n == 2)\n            return true;\n        else if (n % 2 ==\
    \ 0)\n            return false;\n        else\n        {\n            long m =\
    \ cast(long)sqrt(n);\n            for (long i = 3; i <= m; i += 2)\n         \
    \   {\n                if (n % i == 0)\n                    return false;\n  \
    \          }\n            return true;\n        }\n    }\n    if (a <= 1)\n  \
    \      return false;\n    else if (a == 2)\n        return true;\n    else if\
    \ (a % 2 == 0)\n        return false;\n    else\n    {\n        long m = cast(long)sqrt(a);\n\
    \        for (long i = 3; i <= m; i += 2)\n        {\n            if (a % i ==\
    \ 0)\n            {\n                if (is_prime(i) && is_prime(a / i))\n   \
    \                 return true;\n            }\n        }\n        return false;\n\
    \    }\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqax4_y7v.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\n/tmp/tmpqax4_y7v.d(42): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpqax4_y7v.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    long[] result;\n    foreach(i;\
    \ primes)\n    {\n        if(a % i == 0)\n        {\n            result ~= i;\n\
    \            a /= i;\n        }\n    }\n    if(result.length == 3)\n    {\n  \
    \      return true;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3ca7bsif.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42825d]\\n??:? void tmp3ca7bsif.__unittest_L31_C1()\
    \ [0x427ef2]\\n??:? void tmp3ca7bsif.__modtest() [0x427fe0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cc33]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bac6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430519]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309c8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4304a5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ba9d]\\n??:? runModuleUnitTests [0x42ca09]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286ac]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428633]\\n??:? _d_run_main [0x42859e]\\n??:? main [0x427ff3]\\\
    n??:? __libc_start_main [0x62637554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    import std.algorithm : any, map, filter;\n    import std.range : iota;\n\
    \    import std.math : isPrime;\n    import std.conv : to;\n    import std.array\
    \ : array;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.range : take;\n    import std.range : drop;\n    import std.range\
    \ : cycle;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp60qcyfl5.d(71): Error: `;` expected\\n/tmp/tmp60qcyfl5.d(86):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp60qcyfl5.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(prime;\
    \ primes)\n    {\n        if(a % prime == 0)\n        {\n            a /= prime;\n\
    \            if(a == 1)\n            {\n                result = true;\n     \
    \           break;\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpa210w6qx.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428225]\\n??:? void tmpa210w6qx.__unittest_L31_C1()\
    \ [0x427e7a]\\n??:? void tmpa210w6qx.__modtest() [0x427fa8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c20f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0a2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430235]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301c1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b079]\\n??:? runModuleUnitTests [0x42bfe5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428674]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285fb]\\n??:? _d_run_main [0x428566]\\n??:? main [0x427fbb]\\\
    n??:? __libc_start_main [0x55e3c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a < 2)\n        return false;\n    if (a == 2)\n        return true;\n\
    \    if (a % 2 == 0)\n        return false;\n    for (long i = 3; i <= sqrt(a);\
    \ i += 2)\n    {\n        if (a % i == 0)\n            return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n\
    \    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n  \
    \  assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L)\
    \ == true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L)\
    \ == false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L)\
    \ == false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpugn34rkt.d(21): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpugn34rkt.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    int counter = 0;\n    for (int i = 2; i <= a; i++)\n    {\n        if (a\
    \ % i == 0)\n        {\n            int j = 2;\n            while (j <= i)\n \
    \           {\n                if (i % j == 0)\n                {\n          \
    \          if (j == i)\n                    {\n                        counter++;\n\
    \                    }\n                    j++;\n                }\n        \
    \        else\n                {\n                    break;\n               \
    \ }\n            }\n        }\n    }\n    if (counter == 3)\n    {\n        return\
    \ true;\n    }\n    else\n    {\n        return false;\n    }\n}\nunittest\n{\n\
    \    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpunjn03z8.d(52): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e4d]\\n??:? void tmpunjn03z8.__unittest_L47_C1()\
    \ [0x427ac3]\\n??:? void tmpunjn03z8.__modtest() [0x427bd0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb73]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa06]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb99]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430048]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb25]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9dd]\\n??:? runModuleUnitTests [0x42b949]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42829c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428223]\\n??:? _d_run_main [0x42818e]\\n??:? main [0x427be3]\\\
    n??:? __libc_start_main [0x90c14554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    long[] prime_numbers = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n \
    \   foreach(p; prime_numbers)\n    {\n        if(a % p == 0)\n        {\n    \
    \        result = true;\n            break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7znadsxx.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42820d]\\n??:? void tmp7znadsxx.__unittest_L27_C1()\
    \ [0x427e5e]\\n??:? void tmp7znadsxx.__modtest() [0x427f8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c1f7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b08a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43021d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b061]\\n??:? runModuleUnitTests [0x42bfcd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42865c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285e3]\\n??:? _d_run_main [0x42854e]\\n??:? main [0x427f9f]\\\
    n??:? __libc_start_main [0x7ce4f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    int[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(i; primes)\n    {\n      \
    \  if(a % i == 0)\n        {\n            a /= i;\n        }\n    }\n    return\
    \ a == 1;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpm0v4rdcg.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281ed]\\n??:? void tmpm0v4rdcg.__unittest_L25_C1()\
    \ [0x427e3e]\\n??:? void tmpm0v4rdcg.__modtest() [0x427f6c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c1b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b046]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4301d9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430688]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430165]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b01d]\\n??:? runModuleUnitTests [0x42bf89]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42863c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285c3]\\n??:? _d_run_main [0x42852e]\\n??:? main [0x427f7f]\\\
    n??:? __libc_start_main [0x36712554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool res = false;\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(i;\
    \ primes)\n    {\n        if(a % i == 0)\n        {\n            a /= i;\n   \
    \         if(a == 1)\n            {\n                res = true;\n           \
    \     break;\n            }\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpkrwe8bk9.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428225]\\n??:? void tmpkrwe8bk9.__unittest_L31_C1()\
    \ [0x427e7a]\\n??:? void tmpkrwe8bk9.__modtest() [0x427fa8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c20f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0a2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430235]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301c1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b079]\\n??:? runModuleUnitTests [0x42bfe5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428674]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285fb]\\n??:? _d_run_main [0x428566]\\n??:? main [0x427fbb]\\\
    n??:? __libc_start_main [0x7b78b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime = true;\n    int i = 2;\n    while (i <= a / 2) \n    {\n \
    \       if (a % i == 0) \n        {\n            is_prime = false;\n         \
    \   break;\n        }\n        i++;\n    }\n    return is_prime;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpoqo463g6.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e2d]\\n??:? void tmpoqo463g6.__unittest_L28_C1()\
    \ [0x427a7e]\\n??:? void tmpoqo463g6.__modtest() [0x427bac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb53]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9e6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb79]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430028]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb05]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9bd]\\n??:? runModuleUnitTests [0x42b929]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42827c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428203]\\n??:? _d_run_main [0x42816e]\\n??:? main [0x427bbf]\\\
    n??:? __libc_start_main [0x50e00554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_multiply_prime = false;\n    long[] primes = [2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n\
    \    foreach(i; primes)\n    {\n        if(a % i == 0)\n        {\n          \
    \  is_multiply_prime = true;\n        }\n    }\n    return is_multiply_prime;\n\
    }\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_egii7s6.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42820d]\\n??:? void tmp_egii7s6.__unittest_L26_C1()\
    \ [0x427e5e]\\n??:? void tmp_egii7s6.__modtest() [0x427f8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c1f7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b08a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43021d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b061]\\n??:? runModuleUnitTests [0x42bfcd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42865c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285e3]\\n??:? _d_run_main [0x42854e]\\n??:? main [0x427f9f]\\\
    n??:? __libc_start_main [0xb0f2b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_multiply_prime = false;\n    long[] primes = [2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n\
    \    foreach(prime; primes)\n    {\n        if(a % prime == 0)\n        {\n  \
    \          a /= prime;\n            if(a == 1)\n            {\n              \
    \  is_multiply_prime = true;\n                break;\n            }\n        }\n\
    \    }\n    return is_multiply_prime;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp29i54h3i.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428225]\\n??:? void tmp29i54h3i.__unittest_L31_C1()\
    \ [0x427e7a]\\n??:? void tmp29i54h3i.__modtest() [0x427fa8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c20f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0a2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430235]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301c1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b079]\\n??:? runModuleUnitTests [0x42bfe5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428674]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285fb]\\n??:? _d_run_main [0x428566]\\n??:? main [0x427fbb]\\\
    n??:? __libc_start_main [0x49e74554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(prime;\
    \ primes)\n    {\n        if(a % prime == 0)\n        {\n            a /= prime;\n\
    \            if(a == 1)\n            {\n                result = true;\n     \
    \           break;\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1w1dh6qe.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428225]\\n??:? void tmp1w1dh6qe.__unittest_L31_C1()\
    \ [0x427e7a]\\n??:? void tmp1w1dh6qe.__modtest() [0x427fa8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c20f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0a2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430235]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301c1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b079]\\n??:? runModuleUnitTests [0x42bfe5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428674]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285fb]\\n??:? _d_run_main [0x428566]\\n??:? main [0x427fbb]\\\
    n??:? __libc_start_main [0x42083554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(prime;\
    \ primes)\n    {\n        if(a % prime == 0)\n        {\n            a /= prime;\n\
    \            if(a == 1)\n            {\n                result = true;\n     \
    \           break;\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpwle9hzs8.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428225]\\n??:? void tmpwle9hzs8.__unittest_L31_C1()\
    \ [0x427e7a]\\n??:? void tmpwle9hzs8.__modtest() [0x427fa8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c20f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0a2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430235]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301c1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b079]\\n??:? runModuleUnitTests [0x42bfe5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428674]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285fb]\\n??:? _d_run_main [0x428566]\\n??:? main [0x427fbb]\\\
    n??:? __libc_start_main [0xadb26554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a <= 1) return false;\n    if (a == 2) return true;\n    if (a % 2 ==\
    \ 0) return false;\n    for (long i = 3; i <= sqrt(a); i += 2)\n    {\n      \
    \  if (a % i == 0)\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg6kjbu0s.d(18): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpg6kjbu0s.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    long[] factors = [];\n    foreach(long\
    \ prime; primes)\n    {\n        if(a % prime == 0)\n        {\n            factors\
    \ ~= prime;\n            a /= prime;\n        }\n    }\n    return factors.length\
    \ == 3;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp30vqcuyn.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42826d]\\n??:? void tmp30vqcuyn.__unittest_L27_C1()\
    \ [0x427f02]\\n??:? void tmp30vqcuyn.__modtest() [0x427ff0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cc43]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bad6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430529]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309d8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4304b5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42baad]\\n??:? runModuleUnitTests [0x42ca19]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286bc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428643]\\n??:? _d_run_main [0x4285ae]\\n??:? main [0x428003]\\\
    n??:? __libc_start_main [0xecf84554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n)\n    {\n        if (n <= 1)\n            return false;\n\
    \        if (n == 2)\n            return true;\n        if (n % 2 == 0)\n    \
    \        return false;\n        for (long i = 3; i <= sqrt(n); i += 2)\n     \
    \       if (n % i == 0)\n                return false;\n        return true;\n\
    \    }\n    if (a <= 1)\n        return false;\n    if (a == 2)\n        return\
    \ true;\n    if (a % 2 == 0)\n        return false;\n    for (long i = 3; i <=\
    \ sqrt(a); i += 2)\n        if (a % i == 0)\n            return is_prime(i) &&\
    \ is_prime(a / i);\n    return true;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfnleu069.d(23): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\n/tmp/tmpfnleu069.d(34): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpfnleu069.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_multiply_prime = false;\n    long[] prime_numbers = [2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    long[] prime_numbers_copy = prime_numbers.dup;\n    long[] prime_numbers_copy_2\
    \ = prime_numbers.dup;\n    long[] prime_numbers_copy_3 = prime_numbers.dup;\n\
    \    foreach(i; prime_numbers_copy)\n    {\n        foreach(j; prime_numbers_copy_2)\n\
    \        {\n            foreach(k; prime_numbers_copy_3)\n            {\n    \
    \            if(i * j * k == a)\n                {\n                    is_multiply_prime\
    \ = true;\n                }\n            }\n        }\n    }\n    return is_multiply_prime;\n\
    }\n/*\nWrite a function that returns the sum of all the prime numbers between\
    \ 1 and 100.\n    Example:\n    >>> sum_prime_numbers(100L)\n    1060\n*/\nlong\
    \ sum_prime_numbers(long a) \n{\n    long sum_prime_numbers = 0;\n    long[] prime_numbers\
    \ = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97];\n    foreach(i; prime_numbers)\n    {\n        if(i <=\
    \ a)\n        {\n            sum_prime_numbers += i;\n        }\n    }\n    return\
    \ sum_prime_numbers;\n}\n/*\nWrite a function that returns the sum of all the\
    \ prime numbers between 1 and 100.\n    Example:\n    >>> sum_prime_numbers(100L)\n\
    \    1060\n*/\nlong sum_prime_numbers(long a) \n{\n    long sum_prime_numbers\
    \ = 0;\n    long[] prime_numbers = [2, 3,\nunittest\n{\n    alias candidate =\
    \ is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxkjyi9jz.d(64): Error: expression expected, not `unittest`\\\
    n/tmp/tmpxkjyi9jz.d(65): Error: comma expected separating array initializers,\
    \ not `{`\\n/tmp/tmpxkjyi9jz.d(79): Error: comma expected separating array initializers,\
    \ not `void`\\n/tmp/tmpxkjyi9jz.d(79): Error: semicolon expected, not `main`\\\
    n/tmp/tmpxkjyi9jz.d(79): Error: found `{` when expecting `;` following statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxkjyi9jz.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a < 2) return false;\n    if (a == 2) return true;\n    if (a % 2 ==\
    \ 0) return false;\n    for (long i = 3; i <= sqrt(a); i += 2)\n    {\n      \
    \  if (a % i == 0) return false;\n    }\n    return true;\n}\nunittest\n{\n  \
    \  alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9cu4qaae.d(18): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp9cu4qaae.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    int i = 2;\n    while (i <= a) \n    {\n        if (a % i == 0) \n      \
    \  {\n            a /= i;\n            if (a == 1) \n            {\n         \
    \       return true;\n            }\n        } \n        else \n        {\n  \
    \          i++;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias\
    \ candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpf32_3ywt.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e1d]\\n??:? void tmpf32_3ywt.__unittest_L33_C1()\
    \ [0x427a72]\\n??:? void tmpf32_3ywt.__modtest() [0x427ba0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb43]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9d6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb69]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9ad]\\n??:? runModuleUnitTests [0x42b919]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42826c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281f3]\\n??:? _d_run_main [0x42815e]\\n??:? main [0x427bb3]\\\
    n??:? __libc_start_main [0x392d9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    long[] factors = [];\n    foreach(long\
    \ prime; primes)\n    {\n        if(a % prime == 0)\n        {\n            factors\
    \ ~= prime;\n            a /= prime;\n        }\n    }\n    return factors.length\
    \ == 3;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpx05o78k4.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42826d]\\n??:? void tmpx05o78k4.__unittest_L27_C1()\
    \ [0x427f02]\\n??:? void tmpx05o78k4.__modtest() [0x427ff0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cc43]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bad6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430529]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309d8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4304b5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42baad]\\n??:? runModuleUnitTests [0x42ca19]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286bc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428643]\\n??:? _d_run_main [0x4285ae]\\n??:? main [0x428003]\\\
    n??:? __libc_start_main [0x1233e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    long[] factors = [];\n    foreach(long\
    \ prime; primes)\n    {\n        if(a % prime == 0)\n        {\n            factors\
    \ ~= prime;\n            a /= prime;\n        }\n    }\n    return factors.length\
    \ == 3;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpneaxri08.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42826d]\\n??:? void tmpneaxri08.__unittest_L27_C1()\
    \ [0x427f02]\\n??:? void tmpneaxri08.__modtest() [0x427ff0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cc43]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bad6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430529]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309d8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4304b5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42baad]\\n??:? runModuleUnitTests [0x42ca19]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286bc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428643]\\n??:? _d_run_main [0x4285ae]\\n??:? main [0x428003]\\\
    n??:? __libc_start_main [0x1c26c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool isPrime = true;\n    long i = 2;\n    while (i <= a / 2) {\n       \
    \ if (a % i == 0) {\n            isPrime = false;\n            break;\n      \
    \  }\n        i++;\n    }\n    return isPrime;\n}\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxofco1a6.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e1d]\\n??:? void tmpxofco1a6.__unittest_L26_C1()\
    \ [0x427a72]\\n??:? void tmpxofco1a6.__modtest() [0x427ba0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb43]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9d6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb69]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9ad]\\n??:? runModuleUnitTests [0x42b919]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42826c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281f3]\\n??:? _d_run_main [0x42815e]\\n??:? main [0x427bb3]\\\
    n??:? __libc_start_main [0x28e1a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    auto primes = [](long n) {\n        return iota(2L, n).filter!(isPrime);\n\
    \    };\n    auto is_multiply_prime = [&](long a) {\n        return primes(a).filter!(x\
    \ => a % x == 0).length > 2;\n    };\n    return is_multiply_prime(a);\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp15198goc.d(15): Error: found `n` when expecting `.` following\
    \ long\\n/tmp/tmp15198goc.d(15): Error: found `)` when expecting identifier following\
    \ `long`.\\n/tmp/tmp15198goc.d(15): Error: found `{` when expecting `,`\\n/tmp/tmp15198goc.d(16):\
    \ Error: expression expected, not `return`\\n/tmp/tmp15198goc.d(16): Error: found\
    \ `iota` when expecting `,`\\n/tmp/tmp15198goc.d(16): Error: found `;` when expecting\
    \ `,`\\n/tmp/tmp15198goc.d(17): Error: expression expected, not `}`\\n/tmp/tmp15198goc.d(17):\
    \ Error: found `;` when expecting `,`\\n/tmp/tmp15198goc.d(18): Error: expression\
    \ expected, not `auto`\\n/tmp/tmp15198goc.d(18): Error: found `is_multiply_prime`\
    \ when expecting `,`\\n/tmp/tmp15198goc.d(18): Error: expression expected, not\
    \ `=`\\n/tmp/tmp15198goc.d(18): Error: expression expected, not `]`\\n/tmp/tmp15198goc.d(18):\
    \ Error: found `a` when expecting `.` following long\\n/tmp/tmp15198goc.d(18):\
    \ Error: found `)` when expecting identifier following `long`.\\n/tmp/tmp15198goc.d(18):\
    \ Error: found `{` when expecting `,`\\n/tmp/tmp15198goc.d(19): Error: expression\
    \ expected, not `return`\\n/tmp/tmp15198goc.d(19): Error: found `primes` when\
    \ expecting `,`\\n/tmp/tmp15198goc.d(19): Error: found `;` when expecting `,`\\\
    n/tmp/tmp15198goc.d(20): Error: expression expected, not `}`\\n/tmp/tmp15198goc.d(20):\
    \ Error: found `;` when expecting `,`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp15198goc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    long[] prime_numbers = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n \
    \   foreach(prime_number; prime_numbers)\n    {\n        if(a % prime_number ==\
    \ 0)\n        {\n            result = true;\n            break;\n        }\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpaekkodw6.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42820d]\\n??:? void tmpaekkodw6.__unittest_L27_C1()\
    \ [0x427e5e]\\n??:? void tmpaekkodw6.__modtest() [0x427f8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c1f7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b08a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43021d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b061]\\n??:? runModuleUnitTests [0x42bfcd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42865c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285e3]\\n??:? _d_run_main [0x42854e]\\n??:? main [0x427f9f]\\\
    n??:? __libc_start_main [0x8fbe5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n)\n    {\n        if (n <= 1)\n            return false;\n\
    \        else if (n <= 3)\n            return true;\n        else if (n % 2 ==\
    \ 0 || n % 3 == 0)\n            return false;\n        else\n        {\n     \
    \       for (long i = 5; i * i <= n; i += 6)\n                if (n % i == 0 ||\
    \ n % (i + 2) == 0)\n                    return false;\n            return true;\n\
    \        }\n    }\n    bool is_multiply_prime(long a)\n    {\n        long i =\
    \ 2;\n        while (i <= a)\n        {\n            if (is_prime(i) && a % i\
    \ == 0)\n            {\n                a /= i;\n                if (a == 1)\n\
    \                    return true;\n            }\n            else\n         \
    \       i++;\n        }\n        return false;\n    }\n}\n/*\nWrite a function\
    \ that returns true if the given number is the multiplication of 3 prime numbers\n\
    \    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n\
    \    >>> is_multiply_prime(30L)\n    true\n    30 = 2 * 3 * 5\n    \n*/\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfoyz13k3.d(13): Error: function `tmpfoyz13k3.is_multiply_prime`\
    \ has no `return` statement, but is expected to return a value of type `bool`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfoyz13k3.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    int i = 2;\n    int j = 2;\n    int k = 2;\n    int count = 0;\n    for (;\
    \ i < a; i++)\n    {\n        if (a % i == 0)\n        {\n            for (; j\
    \ < i; j++)\n            {\n                if (i % j == 0)\n                {\n\
    \                    for (; k < j; k++)\n                    {\n             \
    \           if (j % k == 0)\n                        {\n                     \
    \       count++;\n                        }\n                    }\n         \
    \       }\n            }\n        }\n    }\n    if (count == 0)\n    {\n     \
    \   return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmppi9uul7v.d(51): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e5d]\\n??:? void tmppi9uul7v.__unittest_L47_C1()\
    \ [0x427ab2]\\n??:? void tmppi9uul7v.__modtest() [0x427be0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb83]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa16]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fba9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9ed]\\n??:? runModuleUnitTests [0x42b959]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282ac]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428233]\\n??:? _d_run_main [0x42819e]\\n??:? main [0x427bf3]\\\
    n??:? __libc_start_main [0xa1372554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a == 1) return false;\n    if (a == 2) return true;\n    if (a == 3)\
    \ return true;\n    if (a == 5) return true;\n    if (a == 7) return true;\n \
    \   if (a == 11) return true;\n    if (a == 13) return true;\n    if (a == 17)\
    \ return true;\n    if (a == 19) return true;\n    if (a == 23) return true;\n\
    \    if (a == 29) return true;\n    if (a == 31) return true;\n    if (a == 37)\
    \ return true;\n    if (a == 41) return true;\n    if (a == 43) return true;\n\
    \    if (a == 47) return true;\n    if (a == 53) return true;\n    if (a == 59)\
    \ return true;\n    if (a == 61) return true;\n    if (a == 67) return true;\n\
    \    if (a == 71) return true;\n    if (a == 73) return true;\n    if (a == 79)\
    \ return true;\n    if (a == 83) return true;\n    if (a == 89) return true;\n\
    \    if (a == 97) return true;\n    if (a == 6) return true;\n    if (a == 10)\
    \ return true;\n    if (a == 14) return true;\n    if (a == 15) return true;\n\
    \    if (a == 21) return true;\n    if (a == 22) return true;\n    if (a == 33)\
    \ return true;\n    if (a == 34) return true;\n    if (a == 35) return true;\n\
    \    if (a == 38) return true;\n    if (a == 39) return true;\n    if (a == 46)\
    \ return true;\n    if (a == 51) return true;\n    if (a == 55) return true;\n\
    \    if (a == 57) return true;\n    if (a == 58) return true;\n    if (a == 62)\
    \ return true;\n    if (a == 65) return true;\n    if (a == 69) return true;\n\
    \    if (a == 74) return true;\n    if (\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5v5uv5ht.d(62): Error: expression expected, not `unittest`\\\
    n/tmp/tmp5v5uv5ht.d(63): Error: found `{` when expecting `)`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5v5uv5ht.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a <= 1)\n        return false;\n    if (a == 2)\n        return true;\n\
    \    if (a % 2 == 0)\n        return false;\n    for (long i = 3; i <= sqrt(a);\
    \ i += 2)\n    {\n        if (a % i == 0)\n            return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n\
    \    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n  \
    \  assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L)\
    \ == true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L)\
    \ == false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L)\
    \ == false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoxe9trbn.d(21): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpoxe9trbn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    long[] factors = [];\n    foreach(long\
    \ prime; primes)\n    {\n        if(a % prime == 0)\n        {\n            factors\
    \ ~= prime;\n            a /= prime;\n        }\n    }\n    return a == 1 && factors.length\
    \ == 3;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpl63lbl3p.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42827d]\\n??:? void tmpl63lbl3p.__unittest_L27_C1()\
    \ [0x427f12]\\n??:? void tmpl63lbl3p.__modtest() [0x428000]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cc53]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bae6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430539]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309e8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4304c5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42babd]\\n??:? runModuleUnitTests [0x42ca29]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286cc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428653]\\n??:? _d_run_main [0x4285be]\\n??:? main [0x428013]\\\
    n??:? __libc_start_main [0xb784f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_multiply_prime = false;\n    long[] prime_numbers = [2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    foreach(i; prime_numbers)\n    {\n        if(a % i == 0)\n   \
    \     {\n            is_multiply_prime = true;\n        }\n    }\n    return is_multiply_prime;\n\
    }\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpzlf79akw.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42820d]\\n??:? void tmpzlf79akw.__unittest_L26_C1()\
    \ [0x427e5e]\\n??:? void tmpzlf79akw.__modtest() [0x427f8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c1f7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b08a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43021d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b061]\\n??:? runModuleUnitTests [0x42bfcd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42865c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285e3]\\n??:? _d_run_main [0x42854e]\\n??:? main [0x427f9f]\\\
    n??:? __libc_start_main [0x77fd2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(i;\
    \ primes)\n    {\n        if(a % i == 0)\n        {\n            result = true;\n\
    \            break;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpvrsv412i.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42820d]\\n??:? void tmpvrsv412i.__unittest_L27_C1()\
    \ [0x427e5e]\\n??:? void tmpvrsv412i.__modtest() [0x427f8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c1f7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b08a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43021d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b061]\\n??:? runModuleUnitTests [0x42bfcd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42865c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285e3]\\n??:? _d_run_main [0x42854e]\\n??:? main [0x427f9f]\\\
    n??:? __libc_start_main [0x19604554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    long[] prime_numbers = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n \
    \   foreach(i; prime_numbers)\n    {\n        if(a % i == 0)\n        {\n    \
    \        result = true;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp50mp20jo.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42820d]\\n??:? void tmp50mp20jo.__unittest_L26_C1()\
    \ [0x427e5e]\\n??:? void tmp50mp20jo.__modtest() [0x427f8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c1f7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b08a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43021d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b061]\\n??:? runModuleUnitTests [0x42bfcd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42865c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285e3]\\n??:? _d_run_main [0x42854e]\\n??:? main [0x427f9f]\\\
    n??:? __libc_start_main [0xfa9c0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    import std.algorithm;\n    import std.range;\n    import std.math;\n    import\
    \ std.typecons;\n    import std.conv;\n    import std.array;\n    import std.stdio;\n\
    \    import std.range;\n    import std.algorithm;\n    import std.typecons;\n\
    \    import std.math;\n    import std.conv;\n    import std.array;\n    import\
    \ std.stdio;\n    import std.range;\n    import std.algorithm;\n    import std.typecons;\n\
    \    import std.math;\n    import std.conv;\n    import std.array;\n    import\
    \ std.stdio;\n    import std.range;\n    import std.algorithm;\n    import std.typecons;\n\
    \    import std.math;\n    import std.conv;\n    import std.array;\n    import\
    \ std.stdio;\n    import std.range;\n    import std.algorithm;\n    import std.typecons;\n\
    \    import std.math;\n    import std.conv;\n    import std.array;\n    import\
    \ std.stdio;\n    import std.range;\n    import std.algorithm;\n    import std.typecons;\n\
    \    import std.math;\n    import std.conv;\n    import std.array;\n    import\
    \ std.stdio;\n    import std.range;\n    import std.algorithm;\n    import std.typecons;\n\
    \    import std.math;\n    import std.conv;\n    import std.array;\n    import\
    \ std.stdio;\n    import std.range;\n    import std.algorithm;\n    import std.typecons;\n\
    \    import std.math;\n    import std.conv;\n    import std.array;\n    import\
    \ std.stdio;\n    import std.range;\n    import std.algorithm;\n    import std.typecons;\n\
    \    import std.math;\n    import std.conv;\n    import std.array;\n    import\
    \ std.stdio;\n    import std.range;\n    import std.algorithm;\n    import std.typecons;\n\
    \    import std.math;\n    import std.conv;\n    import std.\nunittest\n{\n  \
    \  alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb2tkovrh.d(84): Error: identifier expected following `package`\\\
    n/tmp/tmpb2tkovrh.d(84): Error: `;` expected\\n/tmp/tmpb2tkovrh.d(99): Error:\
    \ found `End of File` when expecting `}` following compound statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb2tkovrh.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    // your code here\n    bool result = true;\n    long i = 2;\n    long j =\
    \ a;\n    long k = 0;\n    while (i < a)\n    {\n        if (a % i == 0)\n   \
    \     {\n            j = a / i;\n            k = i;\n            break;\n    \
    \    }\n        i++;\n    }\n    if (j == 1 || k == 1)\n    {\n        result\
    \ = false;\n    }\n    else\n    {\n        result = is_prime(j) && is_prime(k);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr7tt9axq.d(36): Error: undefined identifier `is_prime`\\n/tmp/tmpr7tt9axq.d(36):\
    \ Error: undefined identifier `is_prime`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpr7tt9axq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    long[] factors = [];\n    foreach(i;\
    \ primes)\n    {\n        if(a % i == 0)\n        {\n            factors ~= i;\n\
    \            a /= i;\n        }\n    }\n    return factors.length == 3;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpz8m6h8xd.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42826d]\\n??:? void tmpz8m6h8xd.__unittest_L27_C1()\
    \ [0x427f02]\\n??:? void tmpz8m6h8xd.__modtest() [0x427ff0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cc43]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bad6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430529]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309d8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4304b5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42baad]\\n??:? runModuleUnitTests [0x42ca19]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286bc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428643]\\n??:? _d_run_main [0x4285ae]\\n??:? main [0x428003]\\\
    n??:? __libc_start_main [0xfb350554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(i;\
    \ primes)\n    {\n        if(a % i == 0)\n        {\n            result = true;\n\
    \            break;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp41y8ls2o.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42820d]\\n??:? void tmp41y8ls2o.__unittest_L27_C1()\
    \ [0x427e5e]\\n??:? void tmp41y8ls2o.__modtest() [0x427f8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c1f7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b08a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43021d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b061]\\n??:? runModuleUnitTests [0x42bfcd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42865c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285e3]\\n??:? _d_run_main [0x42854e]\\n??:? main [0x427f9f]\\\
    n??:? __libc_start_main [0x1f332554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(i; prime_numbers)\n\
    \    {\n        if(a % i == 0)\n        {\n            a /= i;\n        }\n  \
    \  }\n    return a == 1;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprx1o6p97.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42821d]\\n??:? void tmprx1o6p97.__unittest_L25_C1()\
    \ [0x427e6e]\\n??:? void tmprx1o6p97.__modtest() [0x427f9c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c207]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b09a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43022d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306dc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301b9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b071]\\n??:? runModuleUnitTests [0x42bfdd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42866c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285f3]\\n??:? _d_run_main [0x42855e]\\n??:? main [0x427faf]\\\
    n??:? __libc_start_main [0x7cfa1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long a)\n    {\n        if (a <= 1)\n            return false;\n\
    \        else if (a == 2)\n            return true;\n        else if (a % 2 ==\
    \ 0)\n            return false;\n        else\n        {\n            long i =\
    \ 3;\n            while (i <= sqrt(a))\n            {\n                if (a %\
    \ i == 0)\n                    return false;\n                i += 2;\n      \
    \      }\n            return true;\n        }\n    }\n    if (a <= 1)\n      \
    \  return false;\n    else if (a == 2)\n        return true;\n    else if (a %\
    \ 2 == 0)\n        return false;\n    else\n    {\n        long i = 3;\n     \
    \   while (i <= sqrt(a))\n        {\n            if (a % i == 0)\n           \
    \ {\n                if (is_prime(i) && is_prime(a / i))\n                   \
    \ return true;\n            }\n            i += 2;\n        }\n        return\
    \ false;\n    }\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n\
    \    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n  \
    \  assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L)\
    \ == true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L)\
    \ == false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L)\
    \ == false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk3isjvev.d(26): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\n/tmp/tmpk3isjvev.d(44): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpk3isjvev.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    long[] prime_numbers = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n \
    \   foreach(i; prime_numbers)\n    {\n        if(a % i == 0)\n        {\n    \
    \        result = true;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpyx9i9mf9.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42820d]\\n??:? void tmpyx9i9mf9.__unittest_L26_C1()\
    \ [0x427e5e]\\n??:? void tmpyx9i9mf9.__modtest() [0x427f8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c1f7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b08a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43021d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b061]\\n??:? runModuleUnitTests [0x42bfcd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42865c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285e3]\\n??:? _d_run_main [0x42854e]\\n??:? main [0x427f9f]\\\
    n??:? __libc_start_main [0xa530f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if(a < 2) return false;\n    if(a == 2) return true;\n    if(a % 2 == 0)\
    \ return false;\n    for(long i = 3; i <= sqrt(a); i += 2)\n    {\n        if(a\
    \ % i == 0) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg2pw8zpd.d(18): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpg2pw8zpd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    long[] prime_factors = [];\n \
    \   foreach(i; primes)\n    {\n        if(a % i == 0)\n        {\n           \
    \ prime_factors ~= i;\n            a /= i;\n        }\n    }\n    return prime_factors.length\
    \ == 3;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpwfe_y30j.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42826d]\\n??:? void tmpwfe_y30j.__unittest_L27_C1()\
    \ [0x427f02]\\n??:? void tmpwfe_y30j.__modtest() [0x427ff0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cc43]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bad6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430529]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309d8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4304b5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42baad]\\n??:? runModuleUnitTests [0x42ca19]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286bc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428643]\\n??:? _d_run_main [0x4285ae]\\n??:? main [0x428003]\\\
    n??:? __libc_start_main [0x17d0e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n) \n    {\n        if (n < 2) \n            return false;\n\
    \        if (n == 2) \n            return true;\n        if (n % 2 == 0) \n  \
    \          return false;\n        for (long i = 3; i <= sqrt(n); i += 2) \n  \
    \      {\n            if (n % i == 0) \n                return false;\n      \
    \  }\n        return true;\n    }\n    long n = a;\n    long i = 2;\n    while\
    \ (n > 1) \n    {\n        if (is_prime(i) && n % i == 0) \n        {\n      \
    \      n /= i;\n            if (n == 1) \n                return true;\n     \
    \       i = 2;\n        }\n        else \n            i++;\n    }\n    return\
    \ false;\n}\n/*\nWrite a function that returns the sum of the digits of a given\
    \ number.\n    Example:\n    >>> sum_digits(123L)\n    6\n*/\nlong sum_digits(long\
    \ a) \n{\n    long sum = 0;\n    while (a > 0) \n    {\n        sum += a % 10;\n\
    \        a /= 10;\n    }\n    return sum;\n}\n/*\nWrite a function that returns\
    \ the sum of the digits of a given number.\n    Example:\n    >>> sum_digits(123L)\n\
    \    6\n*/\nlong sum_digits(long a) \n{\n    long sum = 0;\n    while (a > 0)\
    \ \n    {\n        sum += a % 10;\n        a /= 10;\n    }\n    return sum;\n\
    }\n/*\nWrite a function that returns the sum of the digits of a given number.\n\
    \    Example:\n    >>> sum_digits(123L)\n    6\n*/\nlong sum_digits(long a) \n\
    {\n    long sum = 0;\n    while (a > 0) \n    {\n        sum += a % 10;\n    \
    \    a /= 10;\n    }\n    return sum;\n}\n/*\nWrite a function that returns the\
    \ sum of the digits of a given number.\n    Example\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpurm7qly7.d(94): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpurm7qly7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    int i = 2;\n    int j = 2;\n    int k = 2;\n    int counter = 0;\n    while\
    \ (i <= a)\n    {\n        if (a % i == 0)\n        {\n            while (j <=\
    \ i)\n            {\n                if (i % j == 0)\n                {\n    \
    \                counter++;\n                }\n                j++;\n       \
    \     }\n            if (counter == 2)\n            {\n                while (k\
    \ <= a)\n                {\n                    if (a % k == 0)\n            \
    \        {\n                        while (j <= k)\n                        {\n\
    \                            if (k % j == 0)\n                            {\n\
    \                                counter++;\n                            }\n \
    \                           j++;\n                        }\n                \
    \        if (counter == 4)\n                        {\n                      \
    \      while (j <= a)\n                            {\n                       \
    \         if (a % j == 0)\n                                {\n               \
    \                     counter++;\n                                }\n        \
    \                        j++;\n                            }\n               \
    \             if (counter == 6)\n                            {\n             \
    \                   return true;\n                            }\n            \
    \            }\n                    }\n                    k++;\n            \
    \    }\n            }\n        }\n        i++;\n    }\n    return false;\n}\n\
    /*\nWrite a function that returns the number of prime numbers that are less than\
    \ the given number.\n    Example:\n    >>> count_prime(10L)\n    4\n    >>> count_prime(100L)\n\
    \    25\n*/\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1e8tb_5i.d(82): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ec5]\\n??:? void tmp1e8tb_5i.__unittest_L77_C1()\
    \ [0x427b3b]\\n??:? void tmp1e8tb_5i.__modtest() [0x427c48]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bbeb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa7e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc11]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300c0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb9d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa55]\\n??:? runModuleUnitTests [0x42b9c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428314]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42829b]\\n??:? _d_run_main [0x428206]\\n??:? main [0x427c5b]\\\
    n??:? __libc_start_main [0xf369554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long i = 2;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long\
    \ m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n\
    \    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long\
    \ v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n\
    \    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long\
    \ ae = 0;\n    long af = 0;\n    long ag = 0;\n    long ah = 0;\n    long ai =\
    \ 0;\n    long aj = 0;\n    long ak = 0;\n    long al = 0;\n    long am = 0;\n\
    \    long an = 0;\n    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long\
    \ ar = 0;\n    long as = 0;\n    long at = 0;\n    long au = 0;\n    long av =\
    \ 0;\n    long aw = 0;\n    long ax = 0;\n    long ay = 0;\n    long az = 0;\n\
    \    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long\
    \ be = 0;\n    long bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long bi =\
    \ 0;\n    long bj = 0;\n    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n\
    \    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n    long bq = 0;\n    long\
    \ br = 0;\n    long bs = 0;\n    long bt = 0;\n    long bu = 0;\n    long bv =\
    \ 0;\n    long bw = 0;\n    long bx = 0;\n    long by = 0;\n    long bz\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq8kmjwiq.d(85): Error: semicolon expected, not `unittest`\\n/tmp/tmpq8kmjwiq.d(85):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpq8kmjwiq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long a)\n    {\n        if (a < 2)\n            return false;\n\
    \        for (long i = 2; i < a; i++)\n        {\n            if (a % i == 0)\n\
    \                return false;\n        }\n        return true;\n    }\n    if\
    \ (a < 2)\n        return false;\n    if (a == 2)\n        return true;\n    if\
    \ (a % 2 == 0)\n        return false;\n    long sqrt_a = cast(long)sqrt(a);\n\
    \    for (long i = 3; i <= sqrt_a; i += 2)\n    {\n        if (a % i == 0)\n \
    \       {\n            if (is_prime(i) && is_prime(a / i))\n                return\
    \ true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpynravmjs.d(32): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpynravmjs.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long i = 2;\n    long j = a;\n    long k = 0;\n    long l = 0;\n    long\
    \ m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n\
    \    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long\
    \ v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n\
    \    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long\
    \ ae = 0;\n    long af = 0;\n    long ag = 0;\n    long ah = 0;\n    long ai =\
    \ 0;\n    long aj = 0;\n    long ak = 0;\n    long al = 0;\n    long am = 0;\n\
    \    long an = 0;\n    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long\
    \ ar = 0;\n    long as = 0;\n    long at = 0;\n    long au = 0;\n    long av =\
    \ 0;\n    long aw = 0;\n    long ax = 0;\n    long ay = 0;\n    long az = 0;\n\
    \    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long\
    \ be = 0;\n    long bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long bi =\
    \ 0;\n    long bj = 0;\n    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n\
    \    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n    long bq = 0;\n    long\
    \ br = 0;\n    long bs = 0;\n    long bt = 0;\n    long bu = 0;\n    long bv =\
    \ 0;\n    long bw = 0;\n    long bx = 0;\n    long by = 0;\n    long bz\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm7ovlx68.d(85): Error: semicolon expected, not `unittest`\\n/tmp/tmpm7ovlx68.d(85):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpm7ovlx68.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a <= 1)\n        return false;\n    if (a == 2)\n        return true;\n\
    \    if (a % 2 == 0)\n        return false;\n    for (long i = 3; i <= sqrt(a);\
    \ i += 2)\n    {\n        if (a % i == 0)\n            return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n\
    \    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n  \
    \  assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L)\
    \ == true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L)\
    \ == false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L)\
    \ == false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm7xix237.d(21): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpm7xix237.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    long[]\
    \ factors = [];\n    foreach(prime; primes)\n    {\n        if(a % prime == 0)\n\
    \        {\n            factors ~= prime;\n            a /= prime;\n        }\n\
    \    }\n    if(factors.length == 3)\n    {\n        result = true;\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n\
    \    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n  \
    \  assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L)\
    \ == true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L)\
    \ == false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L)\
    \ == false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpcyn7pihw.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42827d]\\n??:? void tmpcyn7pihw.__unittest_L32_C1()\
    \ [0x427f0e]\\n??:? void tmpcyn7pihw.__modtest() [0x427ffc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cc53]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bae6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430539]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309e8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4304c5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42babd]\\n??:? runModuleUnitTests [0x42ca29]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286cc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428653]\\n??:? _d_run_main [0x4285be]\\n??:? main [0x42800f]\\\
    n??:? __libc_start_main [0x71313554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    static bool is_prime(long n) \n    {\n        if (n < 2) \n            return\
    \ false;\n        if (n == 2) \n            return true;\n        if (n % 2 ==\
    \ 0) \n            return false;\n        for (long i = 3; i <= sqrt(n); i +=\
    \ 2) \n            if (n % i == 0) \n                return false;\n        return\
    \ true;\n    }\n    if (a < 2) \n        return false;\n    if (a == 2) \n   \
    \     return true;\n    if (a % 2 == 0) \n        return false;\n    for (long\
    \ i = 3; i <= sqrt(a); i += 2) \n        if (is_prime(i) && a % i == 0) \n   \
    \         return is_multiply_prime(a / i);\n    return false;\n}\nunittest\n{\n\
    \    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl85yvuc7.d(23): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\n/tmp/tmpl85yvuc7.d(34): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpl85yvuc7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a <= 1) return false;\n    if (a == 2) return true;\n    if (a % 2 ==\
    \ 0) return false;\n    for (long i = 3; i <= sqrt(a); i += 2)\n    {\n      \
    \  if (a % i == 0)\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyk1dzb2p.d(18): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpyk1dzb2p.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long a)\n    {\n        if (a < 2)\n            return false;\n\
    \        if (a == 2)\n            return true;\n        if (a % 2 == 0)\n    \
    \        return false;\n        for (long i = 3; i <= sqrt(a); i += 2)\n     \
    \   {\n            if (a % i == 0)\n                return false;\n        }\n\
    \        return true;\n    }\n    if (a < 6)\n        return false;\n    if (a\
    \ == 6)\n        return true;\n    if (a % 2 == 0)\n        return is_prime(a\
    \ / 2) && is_prime(3);\n    if (a % 3 == 0)\n        return is_prime(a / 3) &&\
    \ is_prime(2);\n    for (long i = 5; i <= sqrt(a); i += 6)\n    {\n        if\
    \ (a % i == 0)\n            return is_prime(a / i) && is_prime(i);\n        if\
    \ (a % (i + 2) == 0)\n            return is_prime(a / (i + 2)) && is_prime(i +\
    \ 2);\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpivighx8q.d(23): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\n/tmp/tmpivighx8q.d(38): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpivighx8q.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    long[] factors = [];\n    foreach(long\
    \ prime; primes)\n    {\n        if(a % prime == 0)\n        {\n            factors\
    \ ~= prime;\n            a /= prime;\n        }\n    }\n    if(factors.length\
    \ == 3)\n    {\n        return true;\n    }\n    return false;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3sojfjx2.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428275]\\n??:? void tmp3sojfjx2.__unittest_L31_C1()\
    \ [0x427f0a]\\n??:? void tmp3sojfjx2.__modtest() [0x427ff8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cc4b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430531]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309e0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4304bd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bab5]\\n??:? runModuleUnitTests [0x42ca21]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864b]\\n??:? _d_run_main [0x4285b6]\\n??:? main [0x42800b]\\\
    n??:? __libc_start_main [0xc8fa0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a <= 1) return false;\n    if (a == 2) return true;\n    if (a % 2 ==\
    \ 0) return false;\n    for (long i = 3; i <= sqrt(a); i += 2)\n    {\n      \
    \  if (a % i == 0)\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9kcl6_jr.d(18): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp9kcl6_jr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    int i = 2;\n    long b = a;\n    while (b > 1)\n\
    \    {\n        if (b % i == 0)\n        {\n            b /= i;\n            if\
    \ (b == 1)\n            {\n                result = true;\n            }\n   \
    \     }\n        else\n        {\n            i++;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3565lebb.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e25]\\n??:? void tmp3565lebb.__unittest_L35_C1()\
    \ [0x427a76]\\n??:? void tmp3565lebb.__modtest() [0x427ba4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb4b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9de]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb71]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430020]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fafd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9b5]\\n??:? runModuleUnitTests [0x42b921]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428274]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281fb]\\n??:? _d_run_main [0x428166]\\n??:? main [0x427bb7]\\\
    n??:? __libc_start_main [0x5fba4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    import std.math;\n    import std.algorithm;\n    import std.array;\n    import\
    \ std.range;\n    import std.conv;\n    import std.typecons;\n    import std.string;\n\
    \    import std.stdio;\n    import std.math;\n    import std.range;\n    import\
    \ std.algorithm;\n    import std.array;\n    import std.typecons;\n    import\
    \ std.math;\n    import std.algorithm;\n    import std.array;\n    import std.range;\n\
    \    import std.conv;\n    import std.typecons;\n    import std.string;\n    import\
    \ std.stdio;\n    import std.math;\n    import std.range;\n    import std.algorithm;\n\
    \    import std.array;\n    import std.typecons;\n    import std.math;\n    import\
    \ std.algorithm;\n    import std.array;\n    import std.range;\n    import std.conv;\n\
    \    import std.typecons;\n    import std.string;\n    import std.stdio;\n   \
    \ import std.math;\n    import std.range;\n    import std.algorithm;\n    import\
    \ std.array;\n    import std.typecons;\n    import std.math;\n    import std.algorithm;\n\
    \    import std.array;\n    import std.range;\n    import std.conv;\n    import\
    \ std.typecons;\n    import std.string;\n    import std.stdio;\n    import std.math;\n\
    \    import std.range;\n    import std.algorithm;\n    import std.array;\n   \
    \ import std.typecons;\n    import std.math;\n    import std.algorithm;\n    import\
    \ std.array;\n    import std.range;\n    import std.conv;\n    import std.typecons;\n\
    \    import std.string;\n    import std.stdio;\n    import std.math;\n    import\
    \ std.range;\n    import std.algorithm;\n    import std.array;\n    import std.typecons;\n\
    \    import std.math;\n    import std.algorithm;\n    import std.array;\n    import\
    \ std.range;\n\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx26_9s3e.d(85): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx26_9s3e.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    long[] prime_numbers = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n \
    \   foreach(i; prime_numbers)\n    {\n        if(a % i == 0)\n        {\n    \
    \        result = true;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpgn27d597.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42820d]\\n??:? void tmpgn27d597.__unittest_L26_C1()\
    \ [0x427e5e]\\n??:? void tmpgn27d597.__modtest() [0x427f8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c1f7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b08a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43021d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b061]\\n??:? runModuleUnitTests [0x42bfcd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42865c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285e3]\\n??:? _d_run_main [0x42854e]\\n??:? main [0x427f9f]\\\
    n??:? __libc_start_main [0x22ab9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    long[] factors = [];\n    foreach(prime;\
    \ primes)\n    {\n        if(a % prime == 0)\n        {\n            factors ~=\
    \ prime;\n            a /= prime;\n        }\n    }\n    return factors.length\
    \ == 3;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5w_bawfi.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42826d]\\n??:? void tmp5w_bawfi.__unittest_L27_C1()\
    \ [0x427f02]\\n??:? void tmp5w_bawfi.__modtest() [0x427ff0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cc43]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bad6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430529]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309d8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4304b5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42baad]\\n??:? runModuleUnitTests [0x42ca19]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286bc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428643]\\n??:? _d_run_main [0x4285ae]\\n??:? main [0x428003]\\\
    n??:? __libc_start_main [0x3c0cc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n)\n    {\n        if (n < 2) return false;\n        if\
    \ (n == 2) return true;\n        if (n % 2 == 0) return false;\n        long i\
    \ = 3;\n        while (i <= sqrt(n))\n        {\n            if (n % i == 0) return\
    \ false;\n            i += 2;\n        }\n        return true;\n    }\n    if\
    \ (a < 6) return false;\n    long i = 2;\n    while (i <= a)\n    {\n        if\
    \ (is_prime(i) && a % i == 0)\n        {\n            a /= i;\n            if\
    \ (is_prime(a)) return true;\n        }\n        else i++;\n    }\n    return\
    \ false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr7p5gxfm.d(21): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpr7p5gxfm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_multiply_prime = false;\n    long[] primes = [2L, 3L, 5L, 7L, 11L,\
    \ 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L,\
    \ 79L, 83L, 89L, 97L];\n    foreach(prime; primes)\n    {\n        if(a % prime\
    \ == 0)\n        {\n            is_multiply_prime = true;\n            break;\n\
    \        }\n    }\n    return is_multiply_prime;\n}\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpsqgaw_g7.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42820d]\\n??:? void tmpsqgaw_g7.__unittest_L27_C1()\
    \ [0x427e5e]\\n??:? void tmpsqgaw_g7.__modtest() [0x427f8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c1f7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b08a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43021d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b061]\\n??:? runModuleUnitTests [0x42bfcd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42865c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285e3]\\n??:? _d_run_main [0x42854e]\\n??:? main [0x427f9f]\\\
    n??:? __libc_start_main [0x82d3f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(prime;\
    \ primes)\n    {\n        if(a % prime == 0)\n        {\n            result =\
    \ true;\n            break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp25aydvhd.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42820d]\\n??:? void tmp25aydvhd.__unittest_L27_C1()\
    \ [0x427e5e]\\n??:? void tmp25aydvhd.__modtest() [0x427f8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c1f7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b08a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43021d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b061]\\n??:? runModuleUnitTests [0x42bfcd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42865c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285e3]\\n??:? _d_run_main [0x42854e]\\n??:? main [0x427f9f]\\\
    n??:? __libc_start_main [0xb0c91554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    long[] prime_numbers = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n \
    \   long[] prime_numbers_multiply = [1];\n    foreach(i; prime_numbers)\n    {\n\
    \        foreach(j; prime_numbers_multiply)\n        {\n            if(i * j ==\
    \ a)\n            {\n                result = true;\n                break;\n\
    \            }\n            else\n            {\n                prime_numbers_multiply\
    \ ~= i * j;\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmppt0ku2cj.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282e5]\\n??:? void tmppt0ku2cj.__unittest_L35_C1()\
    \ [0x427f36]\\n??:? void tmppt0ku2cj.__modtest() [0x428064]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ccbb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bb4e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4305a1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430a50]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43052d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bb25]\\n??:? runModuleUnitTests [0x42ca91]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428734]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4286bb]\\n??:? _d_run_main [0x428626]\\n??:? main [0x428077]\\\
    n??:? __libc_start_main [0xfae69554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_multiply_prime = false;\n    long[] prime_numbers = [2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    foreach(i; prime_numbers)\n    {\n        if(a % i == 0)\n   \
    \     {\n            is_multiply_prime = true;\n        }\n    }\n    return is_multiply_prime;\n\
    }\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpcc5jlq4g.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42820d]\\n??:? void tmpcc5jlq4g.__unittest_L26_C1()\
    \ [0x427e5e]\\n??:? void tmpcc5jlq4g.__modtest() [0x427f8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c1f7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b08a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43021d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b061]\\n??:? runModuleUnitTests [0x42bfcd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42865c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285e3]\\n??:? _d_run_main [0x42854e]\\n??:? main [0x427f9f]\\\
    n??:? __libc_start_main [0xc27b2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a <= 1) return false;\n    if (a == 2) return true;\n    if (a % 2 ==\
    \ 0) return false;\n    for (long i = 3; i <= sqrt(a); i += 2)\n    {\n      \
    \  if (a % i == 0)\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg_ntj35v.d(18): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpg_ntj35v.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long a)\n    {\n        if (a <= 1) return false;\n       \
    \ if (a == 2) return true;\n        if (a % 2 == 0) return false;\n        for\
    \ (long i = 3; i <= sqrt(a); i += 2)\n        {\n            if (a % i == 0) return\
    \ false;\n        }\n        return true;\n    }\n    if (a <= 1) return false;\n\
    \    if (a == 2) return true;\n    if (a % 2 == 0) return false;\n    for (long\
    \ i = 3; i <= sqrt(a); i += 2)\n    {\n        if (a % i == 0)\n        {\n  \
    \          if (is_prime(i) && is_prime(a / i))\n            {\n              \
    \  return true;\n            }\n        }\n    }\n    return false;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps_dezire.d(20): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\n/tmp/tmps_dezire.d(29): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmps_dezire.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a <= 1)\n        return false;\n    if (a == 2)\n        return true;\n\
    \    if (a % 2 == 0)\n        return false;\n    for (long i = 3; i <= sqrt(a);\
    \ i += 2)\n    {\n        if (a % i == 0)\n            return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n\
    \    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n  \
    \  assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L)\
    \ == true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L)\
    \ == false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L)\
    \ == false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgt498pf5.d(21): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpgt498pf5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if(a == 1)\n        return false;\n    if(a == 2)\n        return true;\n\
    \    if(a % 2 == 0)\n        return false;\n    for(int i = 3; i <= sqrt(a); i\
    \ += 2)\n    {\n        if(a % i == 0)\n            return false;\n    }\n   \
    \ return true;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n \
    \   assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n   \
    \ assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L)\
    \ == true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L)\
    \ == false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L)\
    \ == false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2b_rylf4.d(21): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp2b_rylf4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    int count = 0;\n    for (int i = 2; i <= a; i++) \n    {\n        if (a %\
    \ i == 0) \n        {\n            count++;\n            a /= i;\n           \
    \ i--;\n        }\n    }\n    return count == 3;\n}\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    int i;\n    int j;\n    int k;\n    int l;\n    int m;\n    int n;\n    int\
    \ o;\n    int p;\n    int q;\n    int r;\n    int s;\n    int t;\n    int u;\n\
    \    int v;\n    int w;\n    int x;\n    int y;\n    int z;\n    int aa;\n   \
    \ int bb;\n    int cc;\n    int dd;\n    int ee;\n    int ff;\n    int gg;\n \
    \   int hh;\n    int ii;\n    int jj;\n    int kk;\n    int ll;\n    int mm;\n\
    \    int nn;\n    int oo;\n    int pp;\n    int qq;\n    int rr;\n    int ss;\n\
    \    int tt;\n    int uu;\n    int vv;\n    int ww;\n    int xx;\n    int yy;\n\
    \    int zz;\n    int aaa;\n    int bbb;\n    int ccc;\n    int ddd;\n    int\
    \ eee;\n    int fff;\n    int ggg;\n    int hhh;\n    int iii;\n    int jjj;\n\
    \    int kkk;\n    int lll;\n    int mmm;\n    int nnn;\n    int ooo;\n    int\
    \ ppp;\n    int qqq;\n    int rrr;\n    int sss;\n    int ttt;\n    int uuu;\n\
    \    int vvv;\n    int www;\n    int xxx;\n    int yyy;\n    int zzz;\n    int\
    \ aaaa;\n    int bbbb;\n    int cccc;\n    int dddd;\n    int eeee;\n    int ffff;\n\
    \    int gggg;\n    int hhhh;\n    int iiii;\n    int jjjj;\n    int kkkk;\n \
    \   int llll;\n    int mmmm;\n    int nnnn;\n    int oooo;\n    int pppp;\n  \
    \  int qqqq;\n    int rrrr;\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8oara_j0.d(103): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8oara_j0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    import std.algorithm : filter, map, reduce;\n    import std.range : take;\n\
    \    import std.math : isPrime;\n    import std.typecons : tuple;\n    import\
    \ std.conv : to;\n    import std.array : array;\n    import std.stdio : writeln;\n\
    \    import std.range : iota;\n    import std.algorithm : sort;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprd5y3w8r.d(71): Error: `;` expected\\n/tmp/tmprd5y3w8r.d(86):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprd5y3w8r.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_multiply_prime = false;\n    long[] prime_numbers = [2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    foreach(prime_number; prime_numbers)\n    {\n        if(a % prime_number\
    \ == 0)\n        {\n            is_multiply_prime = true;\n            break;\n\
    \        }\n    }\n    return is_multiply_prime;\n}\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp14qm8dgc.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42820d]\\n??:? void tmp14qm8dgc.__unittest_L27_C1()\
    \ [0x427e5e]\\n??:? void tmp14qm8dgc.__modtest() [0x427f8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c1f7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b08a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43021d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b061]\\n??:? runModuleUnitTests [0x42bfcd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42865c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285e3]\\n??:? _d_run_main [0x42854e]\\n??:? main [0x427f9f]\\\
    n??:? __libc_start_main [0x8555e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    int i = 2;\n    int count = 0;\n    while (a != 1) \n    {\n        if (a\
    \ % i == 0) \n        {\n            count++;\n            a /= i;\n        }\n\
    \        else \n        {\n            i++;\n        }\n    }\n    return count\
    \ == 3;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n)\n    {\n        if (n <= 1) return false;\n       \
    \ if (n == 2) return true;\n        if (n % 2 == 0) return false;\n        foreach\
    \ (i; 2 .. cast(long)sqrt(n) + 1)\n        {\n            if (n % i == 0) return\
    \ false;\n        }\n        return true;\n    }\n    foreach (i; 2 .. a)\n  \
    \  {\n        if (is_prime(i) && a % i == 0)\n        {\n            a /= i;\n\
    \            if (is_prime(a))\n            {\n                return true;\n \
    \           }\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias\
    \ candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp88hvducy.d(20): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp88hvducy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a < 6) \n        return false;\n    if (a % 2 == 0) \n        return\
    \ is_multiply_prime(a / 2);\n    if (a % 3 == 0) \n        return is_multiply_prime(a\
    \ / 3);\n    if (a % 5 == 0) \n        return is_multiply_prime(a / 5);\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmplrj0n4ns.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e5d]\\n??:? void tmplrj0n4ns.__unittest_L25_C1()\
    \ [0x427acf]\\n??:? void tmplrj0n4ns.__modtest() [0x427bdc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb83]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa16]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fba9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9ed]\\n??:? runModuleUnitTests [0x42b959]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282ac]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428233]\\n??:? _d_run_main [0x42819e]\\n??:? main [0x427bef]\\\
    n??:? __libc_start_main [0x14c6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    import std.algorithm : all;\n    import std.range : iota;\n    import std.math\
    \ : isPrime;\n    import std.typecons : tuple;\n    import std.conv : to;\n  \
    \  import std.array : array;\n    import std.range : take;\n    import std.range\
    \ : drop;\n    import std.range : empty;\n    import std.range : front;\n    import\
    \ std.range : back;\n    import std.range : retro;\n    import std.range : retro;\n\
    \    import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n   \nunittest\n{\n    alias candidate = is_multiply_prime;\n\n   \
    \ assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L)\
    \ == true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L)\
    \ == true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L)\
    \ == false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L)\
    \ == false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmm62_gms.d(72): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmm62_gms.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    import std.algorithm : all;\n    import std.range : iota;\n    import std.math\
    \ : isPrime;\n    import std.conv : to;\n    import std.typecons : tuple;\n  \
    \  import std.array : array;\n    import std.range : take;\n    import std.range\
    \ : drop;\n    import std.range : cycle;\n    import std.range : zip;\n    import\
    \ std.range : chain;\n    import std.range : retro;\n    import std.range : retroChain;\n\
    \    import std.range : retroCycle;\n    import std.range : retroZip;\n    import\
    \ std.range : retroTake;\n    import std.range : retroDrop;\n    import std.range\
    \ : retroSorted;\n    import std.range : retroStride;\n    import std.range :\
    \ retroChunk;\n    import std.range : retroChunkBy;\n    import std.range : retroChunkBy!(a\
    \ => a > 0);\n    import std.range : retroChunkBy!(a => a > 0, a => a);\n    import\
    \ std.range : retroChunkBy!(a => a > 0, a => a, a => a);\n    import std.range\
    \ : retroChunkBy!(a => a > 0, a => a, a => a, a => a);\n    import std.range :\
    \ retroChunkBy!(a => a > 0, a => a, a => a, a => a, a => a);\n    import std.range\
    \ : retroChunkBy!(a => a > 0, a => a, a => a, a => a, a => a, a => a);\n    import\
    \ std.range : retroChunkBy!(a => a > 0, a => a, a => a, a => a, a => a, a => a,\
    \ a => a);\n    import std.range : retroChunkBy!(a => a > 0, a => a, a => a, a\
    \ => a, a => a, a => a, a => a, a => a);\n    import std.range : retroChunkBy!(a\
    \ => a > 0, a => a, a => a, a => a, a => a, a => a\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmuzjzlaa.d(36): Error: `;` expected\\n/tmp/tmpmuzjzlaa.d(37):\
    \ Error: `;` expected\\n/tmp/tmpmuzjzlaa.d(38): Error: `;` expected\\n/tmp/tmpmuzjzlaa.d(39):\
    \ Error: `;` expected\\n/tmp/tmpmuzjzlaa.d(40): Error: `;` expected\\n/tmp/tmpmuzjzlaa.d(41):\
    \ Error: `;` expected\\n/tmp/tmpmuzjzlaa.d(42): Error: `;` expected\\n/tmp/tmpmuzjzlaa.d(43):\
    \ Error: `;` expected\\n/tmp/tmpmuzjzlaa.d(44): Error: `;` expected\\n/tmp/tmpmuzjzlaa.d(44):\
    \ Error: found `unittest` when expecting `)`\\n/tmp/tmpmuzjzlaa.d(46): Error:\
    \ found `{` when expecting `;` following statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpmuzjzlaa.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n)\n    {\n        if (n < 2)\n            return false;\n\
    \        else if (n == 2)\n            return true;\n        else if (n % 2 ==\
    \ 0)\n            return false;\n        else\n        {\n            long i =\
    \ 3;\n            while (i <= sqrt(n))\n            {\n                if (n %\
    \ i == 0)\n                    return false;\n                i += 2;\n      \
    \      }\n            return true;\n        }\n    }\n    if (a < 6)\n       \
    \ return false;\n    else if (a == 6)\n        return true;\n    else\n    {\n\
    \        long i = 3;\n        while (i <= sqrt(a))\n        {\n            if\
    \ (is_prime(i) && a % i == 0)\n            {\n                long j = i;\n  \
    \              while (j <= sqrt(a))\n                {\n                    if\
    \ (is_prime(j) && a % j == 0)\n                    {\n                       \
    \ long k = j;\n                        while (k <= sqrt(a))\n                \
    \        {\n                            if (is_prime(k) && a % k == 0)\n     \
    \                       {\n                                if (i * j * k == a)\n\
    \                                    return true;\n                          \
    \  }\n                            k += 2;\n                        }\n       \
    \             }\n                    j += 2;\n                }\n            }\n\
    \            i += 2;\n        }\n        return false;\n    }\n}\nunittest\n{\n\
    \    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdsw35948.d(26): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\n/tmp/tmpdsw35948.d(42): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\n/tmp/tmpdsw35948.d(47): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\n/tmp/tmpdsw35948.d(52): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpdsw35948.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(i; primes)\n    {\n  \
    \      if(a % i == 0)\n        {\n            a /= i;\n        }\n    }\n    return\
    \ a == 1;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpypk9djoa.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42821d]\\n??:? void tmpypk9djoa.__unittest_L25_C1()\
    \ [0x427e6e]\\n??:? void tmpypk9djoa.__modtest() [0x427f9c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c207]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b09a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43022d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306dc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301b9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b071]\\n??:? runModuleUnitTests [0x42bfdd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42866c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285f3]\\n??:? _d_run_main [0x42855e]\\n??:? main [0x427faf]\\\
    n??:? __libc_start_main [0x79a35554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(i; primes)\n    {\n  \
    \      if(a % i == 0)\n        {\n            a /= i;\n        }\n    }\n    return\
    \ a == 1;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3k92qdte.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42821d]\\n??:? void tmp3k92qdte.__unittest_L25_C1()\
    \ [0x427e6e]\\n??:? void tmp3k92qdte.__modtest() [0x427f9c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c207]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b09a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43022d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306dc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301b9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b071]\\n??:? runModuleUnitTests [0x42bfdd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42866c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285f3]\\n??:? _d_run_main [0x42855e]\\n??:? main [0x427faf]\\\
    n??:? __libc_start_main [0x5a4b0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n)\n    {\n        if (n < 2) return false;\n        if\
    \ (n == 2) return true;\n        if (n % 2 == 0) return false;\n        for (long\
    \ i = 3; i <= sqrt(n); i += 2)\n        {\n            if (n % i == 0) return\
    \ false;\n        }\n        return true;\n    }\n    long[] primes = new long[100];\n\
    \    long count = 0;\n    for (long i = 2; i < 100; i++)\n    {\n        if (is_prime(i))\n\
    \        {\n            primes[count] = i;\n            count++;\n        }\n\
    \    }\n    for (long i = 0; i < count; i++)\n    {\n        for (long j = 0;\
    \ j < count; j++)\n        {\n            for (long k = 0; k < count; k++)\n \
    \           {\n                if (primes[i] * primes[j] * primes[k] == a)\n \
    \               {\n                    return true;\n                }\n     \
    \       }\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk08uqzwg.d(20): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpk08uqzwg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long a)\n    {\n        if (a == 1)\n            return false;\n\
    \        for (long i = 2; i <= a / 2; i++)\n        {\n            if (a % i ==\
    \ 0)\n                return false;\n        }\n        return true;\n    }\n\
    \    if (a == 1)\n        return false;\n    for (long i = 2; i <= a / 2; i++)\n\
    \    {\n        if (a % i == 0)\n        {\n            if (is_prime(i) && is_prime(a\
    \ / i))\n                return true;\n        }\n    }\n    return false;\n}\n\
    unittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpgcx56dfs.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ee5]\\n??:? void tmpgcx56dfs.__unittest_L38_C1()\
    \ [0x427b5b]\\n??:? void tmpgcx56dfs.__modtest() [0x427c68]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc0b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa9e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc31]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300e0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbbd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa75]\\n??:? runModuleUnitTests [0x42b9e1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428334]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282bb]\\n??:? _d_run_main [0x428226]\\n??:? main [0x427c7b]\\\
    n??:? __libc_start_main [0x17186554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    import std.math;\n    import std.algorithm;\n    import std.range;\n    import\
    \ std.typecons;\n    import std.array;\n    import std.conv;\n    import std.string;\n\
    \    import std.stdio;\n    import std.range;\n    import std.algorithm;\n   \
    \ import std.typecons;\n    import std.math;\n    import std.array;\n    import\
    \ std.conv;\n    import std.string;\n    import std.stdio;\n    import std.range;\n\
    \    import std.algorithm;\n    import std.typecons;\n    import std.math;\n \
    \   import std.array;\n    import std.conv;\n    import std.string;\n    import\
    \ std.stdio;\n    import std.range;\n    import std.algorithm;\n    import std.typecons;\n\
    \    import std.math;\n    import std.array;\n    import std.conv;\n    import\
    \ std.string;\n    import std.stdio;\n    import std.range;\n    import std.algorithm;\n\
    \    import std.typecons;\n    import std.math;\n    import std.array;\n    import\
    \ std.conv;\n    import std.string;\n    import std.stdio;\n    import std.range;\n\
    \    import std.algorithm;\n    import std.typecons;\n    import std.math;\n \
    \   import std.array;\n    import std.conv;\n    import std.string;\n    import\
    \ std.stdio;\n    import std.range;\n    import std.algorithm;\n    import std.typecons;\n\
    \    import std.math;\n    import std.array;\n    import std.conv;\n    import\
    \ std.string;\n    import std.stdio;\n    import std.range;\n    import std.algorithm;\n\
    \    import std.typecons;\n    import std.math;\n    import std.array;\n    import\
    \ std.conv;\n    import std.string;\n    import std.stdio;\n    import std.range;\n\
    \    import std.algorithm;\n    import std.typecons;\n    import std.math;\n \
    \   import std.array;\n\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfvufxslv.d(85): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfvufxslv.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(prime; primes)\n    {\n\
    \        if(a % prime == 0)\n        {\n            a /= prime;\n        }\n \
    \   }\n    return a == 1;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpfg_dfdas.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42821d]\\n??:? void tmpfg_dfdas.__unittest_L25_C1()\
    \ [0x427e6e]\\n??:? void tmpfg_dfdas.__modtest() [0x427f9c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c207]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b09a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43022d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306dc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301b9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b071]\\n??:? runModuleUnitTests [0x42bfdd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42866c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285f3]\\n??:? _d_run_main [0x42855e]\\n??:? main [0x427faf]\\\
    n??:? __libc_start_main [0xad1b0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(long\
    \ prime; primes)\n    {\n        if(a % prime == 0)\n        {\n            result\
    \ = true;\n            break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprdq7wihd.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42820d]\\n??:? void tmprdq7wihd.__unittest_L27_C1()\
    \ [0x427e5e]\\n??:? void tmprdq7wihd.__modtest() [0x427f8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c1f7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b08a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43021d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b061]\\n??:? runModuleUnitTests [0x42bfcd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42865c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285e3]\\n??:? _d_run_main [0x42854e]\\n??:? main [0x427f9f]\\\
    n??:? __libc_start_main [0x3e88b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    if (a < 100)\n    {\n        long[] primes = [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97];\n        foreach (i; 0 .. primes.length)\n        {\n     \
    \       foreach (j; i .. primes.length)\n            {\n                foreach\
    \ (k; j .. primes.length)\n                {\n                    if (primes[i]\
    \ * primes[j] * primes[k] == a)\n                    {\n                     \
    \   result = true;\n                        break;\n                    }\n  \
    \              }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphm4t0fm8.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282dd]\\n??:? void tmphm4t0fm8.__unittest_L36_C1()\
    \ [0x427fb0]\\n??:? void tmphm4t0fm8.__modtest() [0x428060]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c33b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b1ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430361]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430810]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b1a5]\\n??:? runModuleUnitTests [0x42c111]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4287a0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428727]\\n??:? _d_run_main [0x428692]\\n??:? main [0x428073]\\\
    n??:? __libc_start_main [0xeb29d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    // write your code here\n    bool is_prime = true;\n    long prime_num =\
    \ 0;\n    long prime_num_1 = 0;\n    long prime_num_2 = 0;\n    long prime_num_3\
    \ = 0;\n    long prime_num_4 = 0;\n    long prime_num_5 = 0;\n    long prime_num_6\
    \ = 0;\n    long prime_num_7 = 0;\n    long prime_num_8 = 0;\n    long prime_num_9\
    \ = 0;\n    long prime_num_10 = 0;\n    long prime_num_11 = 0;\n    long prime_num_12\
    \ = 0;\n    long prime_num_13 = 0;\n    long prime_num_14 = 0;\n    long prime_num_15\
    \ = 0;\n    long prime_num_16 = 0;\n    long prime_num_17 = 0;\n    long prime_num_18\
    \ = 0;\n    long prime_num_19 = 0;\n    long prime_num_20 = 0;\n    long prime_num_21\
    \ = 0;\n    long prime_num_22 = 0;\n    long prime_num_23 = 0;\n    long prime_num_24\
    \ = 0;\n    long prime_num_25 = 0;\n    long prime_num_26 = 0;\n    long prime_num_27\
    \ = 0;\n    long prime_num_28 = 0;\n    long prime_num_29 = 0;\n    long prime_num_30\
    \ = 0;\n    long prime_num_31 = 0;\n    long prime_num_32 = 0;\n    long prime_num_33\
    \ = 0;\n    long prime_num_34 = 0;\n    long prime_num_35 = 0;\n    long prime_num_36\
    \ = 0;\n    long prime_num_37 = 0;\n    long prime_num_38 = 0;\n    long prime_num_39\
    \ = 0;\n    long prime_num_40 = 0;\n    long prime_num_41 = 0;\n    long prime_num_42\
    \ = 0;\n    long prime_num_43 = 0;\n    long prime_num_44 = 0;\n\nunittest\n{\n\
    \    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpns4tjrh4.d(63): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpns4tjrh4.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n)\n    {\n        if (n <= 1)\n            return false;\n\
    \        if (n <= 3)\n            return true;\n        if (n % 2 == 0 || n %\
    \ 3 == 0)\n            return false;\n        for (long i = 5; i * i <= n; i +=\
    \ 6)\n            if (n % i == 0 || n % (i + 2) == 0)\n                return\
    \ false;\n        return true;\n    }\n    if (a <= 1)\n        return false;\n\
    \    if (a <= 3)\n        return true;\n    if (a % 2 == 0 || a % 3 == 0)\n  \
    \      return false;\n    for (long i = 5; i * i <= a; i += 6)\n        if (a\
    \ % i == 0 || a % (i + 2) == 0)\n            return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp91qnow4n.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f7d]\\n??:? void tmp91qnow4n.__unittest_L39_C1()\
    \ [0x427bd2]\\n??:? void tmp91qnow4n.__modtest() [0x427d00]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bca3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ab36]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fcc9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430178]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fc55]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ab0d]\\n??:? runModuleUnitTests [0x42ba79]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4283cc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428353]\\n??:? _d_run_main [0x4282be]\\n??:? main [0x427d13]\\\
    n??:? __libc_start_main [0xc033a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    int count = 0;\n    for (int i = 2; i <= a; i++) \n    {\n        if (a %\
    \ i == 0) \n        {\n            count++;\n            a /= i;\n           \
    \ i--;\n        }\n    }\n    return count == 3;\n}\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    int i = 2;\n    int j = 2;\n    int k = 2;\n  \
    \  int count = 0;\n    while (i < a)\n    {\n        if (a % i == 0)\n       \
    \ {\n            if (isPrime(i))\n            {\n                j = i;\n    \
    \            while (j < a)\n                {\n                    if (a % j ==\
    \ 0)\n                    {\n                        if (isPrime(j))\n       \
    \                 {\n                            k = j;\n                    \
    \        while (k < a)\n                            {\n                      \
    \          if (a % k == 0)\n                                {\n              \
    \                      if (isPrime(k))\n                                    {\n\
    \                                        if (i * j * k == a)\n               \
    \                         {\n                                            result\
    \ = true;\n                                            break;\n              \
    \                          }\n                                    }\n        \
    \                        }\n                                k++;\n           \
    \                 }\n                        }\n                    }\n      \
    \              j++;\n                }\n            }\n        }\n        i++;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4n847jd0.d(24): Error: undefined identifier `isPrime`\\n/tmp/tmp4n847jd0.d(31):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmp4n847jd0.d(38): Error: undefined\
    \ identifier `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"\
    /tmp/tmp4n847jd0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a <= 0) return false;\n    if (a == 1) return true;\n    long[] primes\
    \ = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97];\n    long[] factors = [];\n    foreach (p; primes) {\n\
    \        if (a % p == 0) {\n            factors ~= p;\n            a /= p;\n \
    \       }\n    }\n    return a == 1 && factors.length == 3;\n}\nunittest\n{\n\
    \    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpj56ek9an.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428295]\\n??:? void tmpj56ek9an.__unittest_L27_C1()\
    \ [0x427f2a]\\n??:? void tmpj56ek9an.__modtest() [0x428018]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cc6b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bafe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430551]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430a00]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4304dd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bad5]\\n??:? runModuleUnitTests [0x42ca41]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286e4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42866b]\\n??:? _d_run_main [0x4285d6]\\n??:? main [0x42802b]\\\
    n??:? __libc_start_main [0x86764554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a < 6)\n        return false;\n    if (a == 6)\n        return true;\n\
    \    if (a % 2 == 0)\n        return is_multiply_prime(a / 2);\n    if (a % 3\
    \ == 0)\n        return is_multiply_prime(a / 3);\n    if (a % 5 == 0)\n     \
    \   return is_multiply_prime(a / 5);\n    return false;\n}\nunittest\n{\n    alias\
    \ candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpin1j6j1x.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e65]\\n??:? void tmpin1j6j1x.__unittest_L27_C1()\
    \ [0x427adb]\\n??:? void tmpin1j6j1x.__modtest() [0x427be8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb8b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa1e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbb1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430060]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb3d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9f5]\\n??:? runModuleUnitTests [0x42b961]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282b4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42823b]\\n??:? _d_run_main [0x4281a6]\\n??:? main [0x427bfb]\\\
    n??:? __libc_start_main [0x87f6f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    // your code here\n    return false;\n}\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpb6yer5fp.d(23): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427dd5]\\n??:? void tmpb6yer5fp.__unittest_L18_C1()\
    \ [0x427a4b]\\n??:? void tmpb6yer5fp.__modtest() [0x427b58]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bafb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a98e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb21]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faad]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a965]\\n??:? runModuleUnitTests [0x42b8d1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428224]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281ab]\\n??:? _d_run_main [0x428116]\\n??:? main [0x427b6b]\\\
    n??:? __libc_start_main [0x4bb59554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    long[] factors = [];\n    foreach(i;\
    \ primes)\n    {\n        if(a % i == 0)\n        {\n            factors ~= i;\n\
    \            a /= i;\n        }\n    }\n    return factors.length == 3;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp2rpicxsx.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42826d]\\n??:? void tmp2rpicxsx.__unittest_L27_C1()\
    \ [0x427f02]\\n??:? void tmp2rpicxsx.__modtest() [0x427ff0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cc43]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bad6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430529]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309d8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4304b5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42baad]\\n??:? runModuleUnitTests [0x42ca19]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286bc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428643]\\n??:? _d_run_main [0x4285ae]\\n??:? main [0x428003]\\\
    n??:? __libc_start_main [0x18315554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long a)\n    {\n        if (a == 1) return false;\n       \
    \ if (a == 2) return true;\n        if (a % 2 == 0) return false;\n        for\
    \ (long i = 3; i <= sqrt(a); i += 2)\n        {\n            if (a % i == 0) return\
    \ false;\n        }\n        return true;\n    }\n    long[] primes = new long[100];\n\
    \    long count = 0;\n    for (long i = 1; i <= 100; i++)\n    {\n        if (is_prime(i))\n\
    \        {\n            primes[count] = i;\n            count++;\n        }\n\
    \    }\n    for (long i = 0; i < count; i++)\n    {\n        for (long j = 0;\
    \ j < count; j++)\n        {\n            for (long k = 0; k < count; k++)\n \
    \           {\n                if (primes[i] * primes[j] * primes[k] == a) return\
    \ true;\n            }\n        }\n    }\n    return false;\n}\nunittest\n{\n\
    \    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwnc1al5a.d(20): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpwnc1al5a.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(i; primes)\n    {\n  \
    \      if(a % i == 0)\n        {\n            a /= i;\n        }\n    }\n    return\
    \ a == 1;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpy0872fdd.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42821d]\\n??:? void tmpy0872fdd.__unittest_L25_C1()\
    \ [0x427e6e]\\n??:? void tmpy0872fdd.__modtest() [0x427f9c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c207]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b09a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43022d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306dc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301b9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b071]\\n??:? runModuleUnitTests [0x42bfdd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42866c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285f3]\\n??:? _d_run_main [0x42855e]\\n??:? main [0x427faf]\\\
    n??:? __libc_start_main [0xc23b7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    import std.algorithm : all;\n    import std.range : iota;\n    import std.conv\
    \ : to;\n    import std.math : isPrime;\n    import std.array : array;\n    import\
    \ std.typecons : tuple;\n    import std.range : take;\n    import std.range :\
    \ drop;\n    import std.range : zip;\n    import std.range : retro;\n    import\
    \ std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n\
    \    import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n   \nunittest\n{\n    alias candidate = is_multiply_prime;\n\n   \
    \ assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L)\
    \ == true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L)\
    \ == true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L)\
    \ == false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L)\
    \ == false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd0o72ymz.d(72): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd0o72ymz.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    int i = 2;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n\
    \    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n\
    \    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n\
    \    int x = 0;\n    int y = 0;\n    int z = 0;\n    int aa = 0;\n    int bb =\
    \ 0;\n    int cc = 0;\n    int dd = 0;\n    int ee = 0;\n    int ff = 0;\n   \
    \ int gg = 0;\n    int hh = 0;\n    int ii = 0;\n    int jj = 0;\n    int kk =\
    \ 0;\n    int ll = 0;\n    int mm = 0;\n    int nn = 0;\n    int oo = 0;\n   \
    \ int pp = 0;\n    int qq = 0;\n    int rr = 0;\n    int ss = 0;\n    int tt =\
    \ 0;\n    int uu = 0;\n    int vv = 0;\n    int ww = 0;\n    int xx = 0;\n   \
    \ int yy = 0;\n    int zz = 0;\n    int aaa = 0;\n    int bbb = 0;\n    int ccc\
    \ = 0;\n    int ddd = 0;\n    int eee = 0;\n    int fff = 0;\n    int ggg = 0;\n\
    \    int hhh = 0;\n    int iii = 0;\n    int jjj = 0;\n    int kkk = 0;\n    int\
    \ lll = 0;\n    int mmm = 0;\n    int nnn = 0;\n    int ooo = 0;\n    int ppp\
    \ = 0;\n    int qqq = 0;\n    int rrr = 0;\n    int sss = 0;\n    int ttt = 0;\n\
    \    int uuu = 0;\n    int vvv = 0;\n    int www = 0;\n    int\nunittest\n{\n\
    \    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyyboxuam.d(83): Error: no identifier for declarator `int`\\n/tmp/tmpyyboxuam.d(83):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpyyboxuam.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    auto primes = [](long a) {\n        long i = 2;\n        while (i <= a) {\n\
    \            if (a % i == 0) {\n                return tuple(i, a / i);\n    \
    \        }\n            i++;\n        }\n        return tuple(0L, 0L);\n    };\n\
    \    auto is_prime = [](long a) {\n        if (a == 2) {\n            return true;\n\
    \        }\n        if (a % 2 == 0) {\n            return false;\n        }\n\
    \        long i = 3;\n        while (i <= a / 2) {\n            if (a % i == 0)\
    \ {\n                return false;\n            }\n            i += 2;\n     \
    \   }\n        return true;\n    };\n    auto t = primes(a);\n    if (is_prime(t[0])\
    \ && is_prime(t[1])) {\n        return true;\n    }\n    t = primes(t[0]);\n \
    \   if (is_prime(t[0]) && is_prime(t[1])) {\n        return true;\n    }\n   \
    \ return false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n\
    \    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n  \
    \  assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L)\
    \ == true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L)\
    \ == false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L)\
    \ == false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpktgetq7u.d(15): Error: found `a` when expecting `.` following\
    \ long\\n/tmp/tmpktgetq7u.d(15): Error: found `)` when expecting identifier following\
    \ `long`.\\n/tmp/tmpktgetq7u.d(15): Error: found `{` when expecting `,`\\n/tmp/tmpktgetq7u.d(16):\
    \ Error: found `i` when expecting `.` following long\\n/tmp/tmpktgetq7u.d(16):\
    \ Error: found `=` when expecting identifier following `long`.\\n/tmp/tmpktgetq7u.d(16):\
    \ Error: found `2` when expecting `,`\\n/tmp/tmpktgetq7u.d(16): Error: expression\
    \ expected, not `;`\\n/tmp/tmpktgetq7u.d(17): Error: found `while` when expecting\
    \ `,`\\n/tmp/tmpktgetq7u.d(17): Error: found `<=` when expecting `)`\\n/tmp/tmpktgetq7u.d(17):\
    \ Error: missing `{ ... }` for function literal\\n/tmp/tmpktgetq7u.d(17): Error:\
    \ found `a` when expecting `,`\\n/tmp/tmpktgetq7u.d(17): Error: semicolon expected\
    \ following auto declaration, not `{`\\n/tmp/tmpktgetq7u.d(25): Error: found `a`\
    \ when expecting `.` following long\\n/tmp/tmpktgetq7u.d(25): Error: found `)`\
    \ when expecting identifier following `long`.\\n/tmp/tmpktgetq7u.d(25): Error:\
    \ found `{` when expecting `,`\\n/tmp/tmpktgetq7u.d(26): Error: expression expected,\
    \ not `if`\\n/tmp/tmpktgetq7u.d(26): Error: found `{` when expecting `,`\\n/tmp/tmpktgetq7u.d(27):\
    \ Error: expression expected, not `return`\\n/tmp/tmpktgetq7u.d(27): Error: found\
    \ `true` when expecting `,`\\n/tmp/tmpktgetq7u.d(27): Error: expression expected,\
    \ not `;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpktgetq7u.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    auto primes = [](long n) {\n        long[] result;\n        foreach (i; 2..n)\
    \ {\n            bool isPrime = true;\n            foreach (j; 2..i) {\n     \
    \           if (i % j == 0) {\n                    isPrime = false;\n        \
    \            break;\n                }\n            }\n            if (isPrime)\
    \ {\n                result ~= i;\n            }\n        }\n        return result;\n\
    \    };\n    auto prime_numbers = primes(100);\n    long[] prime_factors;\n  \
    \  foreach (i; prime_numbers) {\n        if (a % i == 0) {\n            prime_factors\
    \ ~= i;\n        }\n    }\n    if (prime_factors.length == 3) {\n        return\
    \ true;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzuwbu8dg.d(15): Error: found `n` when expecting `.` following\
    \ long\\n/tmp/tmpzuwbu8dg.d(15): Error: found `)` when expecting identifier following\
    \ `long`.\\n/tmp/tmpzuwbu8dg.d(15): Error: found `{` when expecting `,`\\n/tmp/tmpzuwbu8dg.d(16):\
    \ Error: found `[` when expecting `.` following long\\n/tmp/tmpzuwbu8dg.d(16):\
    \ Error: found `]` when expecting identifier following `long`.\\n/tmp/tmpzuwbu8dg.d(16):\
    \ Error: found `result` when expecting `,`\\n/tmp/tmpzuwbu8dg.d(16): Error: expression\
    \ expected, not `;`\\n/tmp/tmpzuwbu8dg.d(17): Error: found `foreach` when expecting\
    \ `,`\\n/tmp/tmpzuwbu8dg.d(17): Error: found `;` when expecting `)`\\n/tmp/tmpzuwbu8dg.d(17):\
    \ Error: found `2` when expecting `,`\\n/tmp/tmpzuwbu8dg.d(17): Error: expression\
    \ expected, not `..`\\n/tmp/tmpzuwbu8dg.d(17): Error: found `n` when expecting\
    \ `,`\\n/tmp/tmpzuwbu8dg.d(17): Error: semicolon expected following auto declaration,\
    \ not `{`\\n/tmp/tmpzuwbu8dg.d(33): Error: declaration expected, not `foreach`\\\
    n/tmp/tmpzuwbu8dg.d(33): Error: no identifier for declarator `prime_numbers`\\\
    n/tmp/tmpzuwbu8dg.d(33): Error: declaration expected, not `)`\\n/tmp/tmpzuwbu8dg.d(36):\
    \ Error: unrecognized declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpzuwbu8dg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    long[] factors = [];\n    foreach(long\
    \ prime; primes)\n    {\n        if(a % prime == 0)\n        {\n            factors\
    \ ~= prime;\n            a /= prime;\n        }\n    }\n    if(factors.length\
    \ == 3)\n    {\n        return true;\n    }\n    return false;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpk0a8snzl.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428275]\\n??:? void tmpk0a8snzl.__unittest_L31_C1()\
    \ [0x427f0a]\\n??:? void tmpk0a8snzl.__modtest() [0x427ff8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cc4b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430531]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309e0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4304bd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bab5]\\n??:? runModuleUnitTests [0x42ca21]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864b]\\n??:? _d_run_main [0x4285b6]\\n??:? main [0x42800b]\\\
    n??:? __libc_start_main [0x5cd58554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    auto primes = [](long n) {\n        long i = 2;\n        while (i * i <=\
    \ n) {\n            if (n % i == 0) {\n                return false;\n       \
    \     }\n            i++;\n        }\n        return true;\n    };\n    long i\
    \ = 2;\n    long count = 0;\n    while (i <= a) {\n        if (a % i == 0 && primes(i))\
    \ {\n            a /= i;\n            count++;\n        }\n        else {\n  \
    \          i++;\n        }\n    }\n    return count == 3;\n}\nunittest\n{\n  \
    \  alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphu9ry6ts.d(15): Error: found `n` when expecting `.` following\
    \ long\\n/tmp/tmphu9ry6ts.d(15): Error: found `)` when expecting identifier following\
    \ `long`.\\n/tmp/tmphu9ry6ts.d(15): Error: found `{` when expecting `,`\\n/tmp/tmphu9ry6ts.d(16):\
    \ Error: found `i` when expecting `.` following long\\n/tmp/tmphu9ry6ts.d(16):\
    \ Error: found `=` when expecting identifier following `long`.\\n/tmp/tmphu9ry6ts.d(16):\
    \ Error: found `2` when expecting `,`\\n/tmp/tmphu9ry6ts.d(16): Error: expression\
    \ expected, not `;`\\n/tmp/tmphu9ry6ts.d(17): Error: found `while` when expecting\
    \ `,`\\n/tmp/tmphu9ry6ts.d(17): Error: found `<=` when expecting `)`\\n/tmp/tmphu9ry6ts.d(17):\
    \ Error: missing `{ ... }` for function literal\\n/tmp/tmphu9ry6ts.d(17): Error:\
    \ found `n` when expecting `,`\\n/tmp/tmphu9ry6ts.d(17): Error: semicolon expected\
    \ following auto declaration, not `{`\\n/tmp/tmphu9ry6ts.d(27): Error: declaration\
    \ expected, not `while`\\n/tmp/tmphu9ry6ts.d(30): Error: no identifier for declarator\
    \ `count`\\n/tmp/tmphu9ry6ts.d(30): Error: declaration expected, not `++`\\n/tmp/tmphu9ry6ts.d(31):\
    \ Error: unrecognized declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmphu9ry6ts.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a <= 1)\n        return false;\n    if (a == 2)\n        return true;\n\
    \    if (a % 2 == 0)\n        return false;\n    for (long i = 3; i <= sqrt(a);\
    \ i += 2)\n    {\n        if (a % i == 0)\n            return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n\
    \    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n  \
    \  assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L)\
    \ == true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L)\
    \ == false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L)\
    \ == false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa18xzxni.d(21): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpa18xzxni.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    import std.algorithm : equal;\n    import std.array : array;\n    import\
    \ std.conv : to;\n    import std.range : iota;\n    import std.typecons : tuple;\n\
    \    import std.math : isPrime;\n    import std.algorithm : map;\n    import std.algorithm\
    \ : filter;\n    import std.algorithm : sort;\n    import std.algorithm : reduce;\n\
    \    import std.algorithm : zip;\n    import std.algorithm : zipWith;\n    import\
    \ std.algorithm : take;\n    import std.algorithm : takeWhile;\n    import std.algorithm\
    \ : drop;\n    import std.algorithm : dropWhile;\n    import std.algorithm : count;\n\
    \    import std.algorithm : countUntil;\n    import std.algorithm : countUntil;\n\
    \    import std.algorithm : countUntil;\n    import std.algorithm : countUntil;\n\
    \    import std.algorithm : countUntil;\n    import std.algorithm : countUntil;\n\
    \    import std.algorithm : countUntil;\n    import std.algorithm : countUntil;\n\
    \    import std.algorithm : countUntil;\n    import std.algorithm : countUntil;\n\
    \    import std.algorithm : countUntil;\n    import std.algorithm : countUntil;\n\
    \    import std.algorithm : countUntil;\n    import std.algorithm : countUntil;\n\
    \    import std.algorithm : countUntil;\n    import std.algorithm : countUntil;\n\
    \    import std.algorithm : countUntil;\n    import std.algorithm : countUntil;\n\
    \    import std.algorithm : countUntil;\n    import std.algorithm : countUntil;\n\
    \    import std.algorithm : countUntil;\n    import std.algorithm : countUntil;\n\
    \    import std.algorithm : countUntil;\n    import std.algorithm : countUntil;\n\
    \    import std.algorithm : countUntil;\n    import std.algorithm : countUntil;\n\
    \    import std.algorithm : countUntil;\n    import std.algorithm : countUntil;\n\
    \    import std.algorithm : countUntil;\n    import std.algorithm : countUntil;\n\
    \    import std.algorithm : count\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoq2eg_s_.d(63): Error: `;` expected\\n/tmp/tmpoq2eg_s_.d(78):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoq2eg_s_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    import std.algorithm;\n    import std.range;\n    import std.stdio;\n   \
    \ import std.math;\n    import std.typecons;\n    import std.bigint;\n    import\
    \ std.conv;\n    import std.array;\n    import std.algorithm;\n    import std.range;\n\
    \    import std.typecons;\n    import std.math;\n    import std.bigint;\n    import\
    \ std.conv;\n    import std.array;\n    import std.algorithm;\n    import std.range;\n\
    \    import std.typecons;\n    import std.math;\n    import std.bigint;\n    import\
    \ std.conv;\n    import std.array;\n    import std.algorithm;\n    import std.range;\n\
    \    import std.typecons;\n    import std.math;\n    import std.bigint;\n    import\
    \ std.conv;\n    import std.array;\n    import std.algorithm;\n    import std.range;\n\
    \    import std.typecons;\n    import std.math;\n    import std.bigint;\n    import\
    \ std.conv;\n    import std.array;\n    import std.algorithm;\n    import std.range;\n\
    \    import std.typecons;\n    import std.math;\n    import std.bigint;\n    import\
    \ std.conv;\n    import std.array;\n    import std.algorithm;\n    import std.range;\n\
    \    import std.typecons;\n    import std.math;\n    import std.bigint;\n    import\
    \ std.conv;\n    import std.array;\n    import std.algorithm;\n    import std.range;\n\
    \    import std.typecons;\n    import std.math;\n    import std.bigint;\n    import\
    \ std.conv;\n    import std.array;\n    import std.algorithm;\n    import std.range;\n\
    \    import std.typecons;\n    import std.math;\n    import std.bigint;\n    import\
    \ std.conv;\n    import std.array;\n    import std.algorithm;\n    import std.range;\n\
    \    import std.typecons;\n    import std.math;\n    import std\nunittest\n{\n\
    \    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn2zgrtlm.d(84): Error: `;` expected\\n/tmp/tmpn2zgrtlm.d(99):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn2zgrtlm.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    import std.math;\n    import std.algorithm;\n    import std.range;\n    import\
    \ std.typecons;\n    import std.array;\n    import std.conv;\n    import std.string;\n\
    \    import std.range;\n    import std.algorithm;\n    import std.typecons;\n\
    \    import std.math;\n    import std.array;\n    import std.conv;\n    import\
    \ std.string;\n    import std.range;\n    import std.algorithm;\n    import std.typecons;\n\
    \    import std.math;\n    import std.array;\n    import std.conv;\n    import\
    \ std.string;\n    import std.range;\n    import std.algorithm;\n    import std.typecons;\n\
    \    import std.math;\n    import std.array;\n    import std.conv;\n    import\
    \ std.string;\n    import std.range;\n    import std.algorithm;\n    import std.typecons;\n\
    \    import std.math;\n    import std.array;\n    import std.conv;\n    import\
    \ std.string;\n    import std.range;\n    import std.algorithm;\n    import std.typecons;\n\
    \    import std.math;\n    import std.array;\n    import std.conv;\n    import\
    \ std.string;\n    import std.range;\n    import std.algorithm;\n    import std.typecons;\n\
    \    import std.math;\n    import std.array;\n    import std.conv;\n    import\
    \ std.string;\n    import std.range;\n    import std.algorithm;\n    import std.typecons;\n\
    \    import std.math;\n    import std.array;\n    import std.conv;\n    import\
    \ std.string;\n    import std.range;\n    import std.algorithm;\n    import std.typecons;\n\
    \    import std.math;\n    import std.array;\n    import std.conv;\n    import\
    \ std.string;\n    import std.range;\n    import std.algorithm;\n    import std.typecons;\n\
    \    import std.math;\n    import std.array;\n    import std.conv;\n    import\
    \ std.string;\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjy1jrwve.d(85): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjy1jrwve.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    import std.math : isPrime;\n    import std.algorithm : find;\n    import\
    \ std.range : iota;\n    import std.typecons : tuple;\n    import std.array :\
    \ array;\n    import std.conv : to;\n    import std.string : format;\n    import\
    \ std.range : take;\n    import std.algorithm : map;\n    import std.algorithm\
    \ : filter;\n    import std.algorithm : sort;\n    import std.algorithm : joiner;\n\
    \    import std.algorithm : equal;\n    import std.algorithm : zip;\n    import\
    \ std.algorithm : zipWith;\n    import std.algorithm : map;\n    import std.algorithm\
    \ : filter;\n    import std.algorithm : sort;\n    import std.algorithm : joiner;\n\
    \    import std.algorithm : equal;\n    import std.algorithm : zip;\n    import\
    \ std.algorithm : zipWith;\n    import std.algorithm : map;\n    import std.algorithm\
    \ : filter;\n    import std.algorithm : sort;\n    import std.algorithm : joiner;\n\
    \    import std.algorithm : equal;\n    import std.algorithm : zip;\n    import\
    \ std.algorithm : zipWith;\n    import std.algorithm : map;\n    import std.algorithm\
    \ : filter;\n    import std.algorithm : sort;\n    import std.algorithm : joiner;\n\
    \    import std.algorithm : equal;\n    import std.algorithm : zip;\n    import\
    \ std.algorithm : zipWith;\n    import std.algorithm : map;\n    import std.algorithm\
    \ : filter;\n    import std.algorithm : sort;\n    import std.algorithm : joiner;\n\
    \    import std.algorithm : equal;\n    import std.algorithm : zip;\n    import\
    \ std.algorithm : zipWith;\n    import std.algorithm : map;\n    import std.algorithm\
    \ : filter;\n    import std.algorithm : sort;\n    import std.algorithm : joiner;\n\
    \    import std.algorithm : equal;\n    import std.algorithm : zip;\n    import\
    \ std.algorithm : zipWith;\n   \nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_pe729yj.d(66): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_pe729yj.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    import std.math;\n    import std.algorithm;\n    import std.range;\n    import\
    \ std.typecons;\n    import std.array;\n    import std.conv;\n    import std.string;\n\
    \    import std.stdio;\n    import std.traits;\n    import std.typecons;\n   \
    \ import std.math;\n    import std.algorithm;\n    import std.range;\n    import\
    \ std.typecons;\n    import std.array;\n    import std.conv;\n    import std.string;\n\
    \    import std.stdio;\n    import std.traits;\n    import std.typecons;\n   \
    \ import std.math;\n    import std.algorithm;\n    import std.range;\n    import\
    \ std.typecons;\n    import std.array;\n    import std.conv;\n    import std.string;\n\
    \    import std.stdio;\n    import std.traits;\n    import std.typecons;\n   \
    \ import std.math;\n    import std.algorithm;\n    import std.range;\n    import\
    \ std.typecons;\n    import std.array;\n    import std.conv;\n    import std.string;\n\
    \    import std.stdio;\n    import std.traits;\n    import std.typecons;\n   \
    \ import std.math;\n    import std.algorithm;\n    import std.range;\n    import\
    \ std.typecons;\n    import std.array;\n    import std.conv;\n    import std.string;\n\
    \    import std.stdio;\n    import std.traits;\n    import std.typecons;\n   \
    \ import std.math;\n    import std.algorithm;\n    import std.range;\n    import\
    \ std.typecons;\n    import std.array;\n    import std.conv;\n    import std.string;\n\
    \    import std.stdio;\n    import std.traits;\n    import std.typecons;\n   \
    \ import std.math;\n    import std.algorithm;\n    import std.range;\n    import\
    \ std.typecons;\n    import std.array;\n    import std.conv;\n    import std.string;\n\
    \    import std.stdio;\n\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5ri2qfbk.d(84): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5ri2qfbk.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime = true;\n    long i = 2;\n    long j = 2;\n    long k = 2;\n\
    \    long temp = a;\n    while(i < temp)\n    {\n        if(temp % i == 0)\n \
    \       {\n            temp = temp / i;\n            j = 2;\n            while(j\
    \ < temp)\n            {\n                if(temp % j == 0)\n                {\n\
    \                    temp = temp / j;\n                    k = 2;\n          \
    \          while(k < temp)\n                    {\n                        if(temp\
    \ % k == 0)\n                        {\n                            is_prime =\
    \ false;\n                            break;\n                        }\n    \
    \                    k++;\n                    }\n                    if(is_prime)\n\
    \                    {\n                        return true;\n               \
    \     }\n                    else\n                    {\n                   \
    \     is_prime = true;\n                        break;\n                    }\n\
    \                }\n                j++;\n            }\n        }\n        i++;\n\
    \    }\n    return false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpfy9lv6z9.d(69): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e9d]\\n??:? void tmpfy9lv6z9.__unittest_L58_C1()\
    \ [0x427bcd]\\n??:? void tmpfy9lv6z9.__modtest() [0x427c20]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bbc3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa56]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbe9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430098]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb75]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa2d]\\n??:? runModuleUnitTests [0x42b999]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428273]\\n??:? _d_run_main [0x4281de]\\n??:? main [0x427c33]\\\
    n??:? __libc_start_main [0x6b275554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool res = false;\n    long[] prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(i;\
    \ prime_numbers)\n    {\n        if(a % i == 0)\n        {\n            res =\
    \ true;\n            break;\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpdj7pmfsl.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42820d]\\n??:? void tmpdj7pmfsl.__unittest_L27_C1()\
    \ [0x427e5e]\\n??:? void tmpdj7pmfsl.__modtest() [0x427f8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c1f7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b08a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43021d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b061]\\n??:? runModuleUnitTests [0x42bfcd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42865c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285e3]\\n??:? _d_run_main [0x42854e]\\n??:? main [0x427f9f]\\\
    n??:? __libc_start_main [0x344f9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    long[] factors = [];\n    foreach(prime;\
    \ primes)\n    {\n        if(a % prime == 0)\n        {\n            factors ~=\
    \ prime;\n            a /= prime;\n        }\n    }\n    return factors.length\
    \ == 3;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp64wj6c8a.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42826d]\\n??:? void tmp64wj6c8a.__unittest_L27_C1()\
    \ [0x427f02]\\n??:? void tmp64wj6c8a.__modtest() [0x427ff0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cc43]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bad6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430529]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309d8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4304b5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42baad]\\n??:? runModuleUnitTests [0x42ca19]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286bc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428643]\\n??:? _d_run_main [0x4285ae]\\n??:? main [0x428003]\\\
    n??:? __libc_start_main [0x31fa1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long i;\n    long j;\n    long k;\n    long l;\n    long m;\n    long n;\n\
    \    long o;\n    long p;\n    long q;\n    long r;\n    long s;\n    long t;\n\
    \    long u;\n    long v;\n    long w;\n    long x;\n    long y;\n    long z;\n\
    \    long aa;\n    long ab;\n    long ac;\n    long ad;\n    long ae;\n    long\
    \ af;\n    long ag;\n    long ah;\n    long ai;\n    long aj;\n    long ak;\n\
    \    long al;\n    long am;\n    long an;\n    long ao;\n    long ap;\n    long\
    \ aq;\n    long ar;\n    long as;\n    long at;\n    long au;\n    long av;\n\
    \    long aw;\n    long ax;\n    long ay;\n    long az;\n    long ba;\n    long\
    \ bb;\n    long bc;\n    long bd;\n    long be;\n    long bf;\n    long bg;\n\
    \    long bh;\n    long bi;\n    long bj;\n    long bk;\n    long bl;\n    long\
    \ bm;\n    long bn;\n    long bo;\n    long bp;\n    long bq;\n    long br;\n\
    \    long bs;\n    long bt;\n    long bu;\n    long bv;\n    long bw;\n    long\
    \ bx;\n    long by;\n    long bz;\n    long ca;\n    long cb;\n    long cc;\n\
    \    long cd;\n    long ce;\n    long cf;\n    long cg;\n    long ch;\n    long\
    \ ci;\n    long cj;\n    long ck;\n    long cl;\n    long cm;\n    long cn;\n\
    \    long co;\n    long cp;\n    long cq;\n    long cr;\n    long cs;\n    long\
    \ ct;\n    long cu;\n    long cv;\n    long cw;\n    long cx;\n    long cy;\n\
    \   \nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpal8ko5n7.d(111): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpal8ko5n7.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(i;\
    \ primes)\n    {\n        if(a % i == 0)\n        {\n            result = true;\n\
    \            break;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmhlkzmdt.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42820d]\\n??:? void tmpmhlkzmdt.__unittest_L27_C1()\
    \ [0x427e5e]\\n??:? void tmpmhlkzmdt.__modtest() [0x427f8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c1f7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b08a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43021d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b061]\\n??:? runModuleUnitTests [0x42bfcd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42865c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285e3]\\n??:? _d_run_main [0x42854e]\\n??:? main [0x427f9f]\\\
    n??:? __libc_start_main [0x59e16554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    import std.math;\n    import std.range;\n    import std.algorithm;\n    import\
    \ std.typecons;\n    import std.array;\n    import std.conv;\n    import std.stdio;\n\
    \    import std.bigint;\n    import std.range;\n    import std.algorithm;\n  \
    \  import std.typecons;\n    import std.array;\n    import std.conv;\n    import\
    \ std.stdio;\n    import std.bigint;\n    import std.range;\n    import std.algorithm;\n\
    \    import std.typecons;\n    import std.array;\n    import std.conv;\n    import\
    \ std.stdio;\n    import std.bigint;\n    import std.range;\n    import std.algorithm;\n\
    \    import std.typecons;\n    import std.array;\n    import std.conv;\n    import\
    \ std.stdio;\n    import std.bigint;\n    import std.range;\n    import std.algorithm;\n\
    \    import std.typecons;\n    import std.array;\n    import std.conv;\n    import\
    \ std.stdio;\n    import std.bigint;\n    import std.range;\n    import std.algorithm;\n\
    \    import std.typecons;\n    import std.array;\n    import std.conv;\n    import\
    \ std.stdio;\n    import std.bigint;\n    import std.range;\n    import std.algorithm;\n\
    \    import std.typecons;\n    import std.array;\n    import std.conv;\n    import\
    \ std.stdio;\n    import std.bigint;\n    import std.range;\n    import std.algorithm;\n\
    \    import std.typecons;\n    import std.array;\n    import std.conv;\n    import\
    \ std.stdio;\n    import std.bigint;\n    import std.range;\n    import std.algorithm;\n\
    \    import std.typecons;\n    import std.array;\n    import std.conv;\n    import\
    \ std.stdio;\n    import std.bigint;\n    import std.range;\n    import std.algorithm;\n\
    \    import std.typecons;\n    import\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp09x2ur4k.d(83): Error: identifier expected following `import`\\\
    n/tmp/tmp09x2ur4k.d(83): Error: `;` expected\\n/tmp/tmp09x2ur4k.d(98): Error:\
    \ found `End of File` when expecting `}` following compound statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp09x2ur4k.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    long[] prime_numbers_less_than_100\
    \ = prime_numbers.filter!(x => x < 100);\n    long[] prime_numbers_less_than_100_and_less_than_a\
    \ = prime_numbers_less_than_100.filter!(x => x < a);\n    long[] prime_numbers_less_than_100_and_less_than_a_and_divides_a\
    \ = prime_numbers_less_than_100_and_less_than_a.filter!(x => a % x == 0);\n  \
    \  return prime_numbers_less_than_100_and_less_than_a_and_divides_a.length ==\
    \ 3;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd61wti26.d(16): Error: no property `filter` for type `long[]`\\\
    n/tmp/tmpd61wti26.d(17): Error: no property `filter` for type `long[]`\\n/tmp/tmpd61wti26.d(18):\
    \ Error: no property `filter` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpd61wti26.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    long[] factors = [];\n    foreach(i;\
    \ primes)\n    {\n        if(a % i == 0)\n        {\n            factors ~= i;\n\
    \            a /= i;\n        }\n    }\n    return factors.length == 3;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmptsm2sme4.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42826d]\\n??:? void tmptsm2sme4.__unittest_L27_C1()\
    \ [0x427f02]\\n??:? void tmptsm2sme4.__modtest() [0x427ff0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cc43]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bad6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430529]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309d8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4304b5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42baad]\\n??:? runModuleUnitTests [0x42ca19]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286bc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428643]\\n??:? _d_run_main [0x4285ae]\\n??:? main [0x428003]\\\
    n??:? __libc_start_main [0xd3039554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(prime;\
    \ primes)\n    {\n        if(a % prime == 0)\n        {\n            result =\
    \ true;\n            break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpiflvj5_3.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42820d]\\n??:? void tmpiflvj5_3.__unittest_L27_C1()\
    \ [0x427e5e]\\n??:? void tmpiflvj5_3.__modtest() [0x427f8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c1f7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b08a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43021d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b061]\\n??:? runModuleUnitTests [0x42bfcd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42865c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285e3]\\n??:? _d_run_main [0x42854e]\\n??:? main [0x427f9f]\\\
    n??:? __libc_start_main [0xa5d12554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_multiply_prime = false;\n    long[] primes = [2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n\
    \    foreach(prime; primes)\n    {\n        if(a % prime == 0)\n        {\n  \
    \          is_multiply_prime = true;\n            a /= prime;\n        }\n   \
    \ }\n    return is_multiply_prime;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0u6yxynz.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42821d]\\n??:? void tmp0u6yxynz.__unittest_L27_C1()\
    \ [0x427e72]\\n??:? void tmp0u6yxynz.__modtest() [0x427fa0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c207]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b09a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43022d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306dc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301b9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b071]\\n??:? runModuleUnitTests [0x42bfdd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42866c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285f3]\\n??:? _d_run_main [0x42855e]\\n??:? main [0x427fb3]\\\
    n??:? __libc_start_main [0x1ddce554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    long[] prime_numbers = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n \
    \   foreach(i; prime_numbers)\n    {\n        if(a % i == 0)\n        {\n    \
    \        result = true;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmph1iochk0.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42820d]\\n??:? void tmph1iochk0.__unittest_L26_C1()\
    \ [0x427e5e]\\n??:? void tmph1iochk0.__modtest() [0x427f8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c1f7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b08a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43021d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b061]\\n??:? runModuleUnitTests [0x42bfcd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42865c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285e3]\\n??:? _d_run_main [0x42854e]\\n??:? main [0x427f9f]\\\
    n??:? __libc_start_main [0x7b248554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool ret = false;\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    for (int i\
    \ = 0; i < primes.length; i++)\n    {\n        for (int j = 0; j < primes.length;\
    \ j++)\n        {\n            for (int k = 0; k < primes.length; k++)\n     \
    \       {\n                if (primes[i] * primes[j] * primes[k] == a)\n     \
    \           {\n                    ret = true;\n                    break;\n \
    \               }\n            }\n        }\n    }\n    return ret;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a <= 1) return false;\n    if (a == 2) return true;\n    if (a % 2 ==\
    \ 0) return false;\n    for (long i = 3; i <= sqrt(a); i += 2) \n    {\n     \
    \   if (a % i == 0) return false;\n    }\n    return true;\n}\nunittest\n{\n \
    \   alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpudbgqpxp.d(18): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpudbgqpxp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n)\n    {\n        if (n <= 1) return false;\n       \
    \ if (n == 2) return true;\n        if (n % 2 == 0) return false;\n        for\
    \ (long i = 3; i <= sqrt(n); i += 2)\n        {\n            if (n % i == 0)\n\
    \                return false;\n        }\n        return true;\n    }\n    bool\
    \ is_multiply_prime(long a)\n    {\n        if (a <= 1) return false;\n      \
    \  if (a == 2) return true;\n        if (a % 2 == 0) return false;\n        for\
    \ (long i = 3; i <= sqrt(a); i += 2)\n        {\n            if (a % i == 0)\n\
    \                return false;\n        }\n        return true;\n    }\n    return\
    \ is_multiply_prime(a);\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjfy8g66w.d(20): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\n/tmp/tmpjfy8g66w.d(32): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpjfy8g66w.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(i;\
    \ primes)\n    {\n        if(a % i == 0)\n        {\n            result = true;\n\
    \            break;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3ledk0zt.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42820d]\\n??:? void tmp3ledk0zt.__unittest_L27_C1()\
    \ [0x427e5e]\\n??:? void tmp3ledk0zt.__modtest() [0x427f8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c1f7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b08a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43021d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b061]\\n??:? runModuleUnitTests [0x42bfcd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42865c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285e3]\\n??:? _d_run_main [0x42854e]\\n??:? main [0x427f9f]\\\
    n??:? __libc_start_main [0xcdb9c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    long[]\
    \ prime_factors = [];\n    foreach(i; primes)\n    {\n        if(a % i == 0)\n\
    \        {\n            prime_factors ~= i;\n            a /= i;\n        }\n\
    \    }\n    if(prime_factors.length == 3)\n    {\n        result = true;\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphopl__g0.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42827d]\\n??:? void tmphopl__g0.__unittest_L32_C1()\
    \ [0x427f0e]\\n??:? void tmphopl__g0.__modtest() [0x427ffc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cc53]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bae6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430539]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309e8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4304c5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42babd]\\n??:? runModuleUnitTests [0x42ca29]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286cc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428653]\\n??:? _d_run_main [0x4285be]\\n??:? main [0x42800f]\\\
    n??:? __libc_start_main [0x9ab6f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    long[] factors = [];\n    foreach(i;\
    \ primes)\n    {\n        if(a % i == 0)\n        {\n            factors ~= i;\n\
    \            a /= i;\n        }\n    }\n    return factors.length == 3;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpbslle3v8.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42826d]\\n??:? void tmpbslle3v8.__unittest_L27_C1()\
    \ [0x427f02]\\n??:? void tmpbslle3v8.__modtest() [0x427ff0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cc43]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bad6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430529]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309d8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4304b5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42baad]\\n??:? runModuleUnitTests [0x42ca19]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286bc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428643]\\n??:? _d_run_main [0x4285ae]\\n??:? main [0x428003]\\\
    n??:? __libc_start_main [0x47c84554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    static bool isPrime(long n)\n    {\n        if (n <= 1) return false;\n \
    \       if (n <= 3) return true;\n        if (n % 2 == 0 || n % 3 == 0) return\
    \ false;\n        for (long i = 5; i * i <= n; i += 6)\n            if (n % i\
    \ == 0 || n % (i + 2) == 0)\n                return false;\n        return true;\n\
    \    }\n    if (a <= 100)\n    {\n        for (long i = 2; i <= sqrt(a); i++)\n\
    \        {\n            if (isPrime(i))\n            {\n                if (a\
    \ % i == 0)\n                {\n                    if (isPrime(a / i))\n    \
    \                {\n                        return true;\n                   \
    \ }\n                }\n            }\n        }\n    }\n    return false;\n}\n\
    unittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl0597pdf.d(27): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpl0597pdf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(prime;\
    \ primes)\n    {\n        if(a % prime == 0)\n        {\n            result =\
    \ true;\n            break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpvuaxs_us.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42820d]\\n??:? void tmpvuaxs_us.__unittest_L27_C1()\
    \ [0x427e5e]\\n??:? void tmpvuaxs_us.__modtest() [0x427f8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c1f7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b08a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43021d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b061]\\n??:? runModuleUnitTests [0x42bfcd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42865c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285e3]\\n??:? _d_run_main [0x42854e]\\n??:? main [0x427f9f]\\\
    n??:? __libc_start_main [0xe8945554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(long\
    \ i; primes)\n    {\n        if(a % i == 0)\n        {\n            result = true;\n\
    \            break;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp04twi_y6.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42820d]\\n??:? void tmp04twi_y6.__unittest_L27_C1()\
    \ [0x427e5e]\\n??:? void tmp04twi_y6.__modtest() [0x427f8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c1f7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b08a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43021d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b061]\\n??:? runModuleUnitTests [0x42bfcd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42865c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285e3]\\n??:? _d_run_main [0x42854e]\\n??:? main [0x427f9f]\\\
    n??:? __libc_start_main [0xc243d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a < 2)\n        return false;\n    if (a == 2)\n        return true;\n\
    \    if (a % 2 == 0)\n        return false;\n    for (long i = 3; i <= sqrt(a);\
    \ i += 2)\n    {\n        if (a % i == 0)\n            return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n\
    \    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n  \
    \  assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L)\
    \ == true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L)\
    \ == false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L)\
    \ == false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc5vh76rc.d(21): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpc5vh76rc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a <= 1)\n        return false;\n    if (a == 2)\n        return true;\n\
    \    if (a % 2 == 0)\n        return false;\n    for (long i = 3; i <= sqrt(a);\
    \ i += 2)\n    {\n        if (a % i == 0)\n            return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n\
    \    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n  \
    \  assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L)\
    \ == true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L)\
    \ == false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L)\
    \ == false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpodyt6evp.d(21): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpodyt6evp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if(a <= 1)\n        return false;\n    if(a == 2)\n        return true;\n\
    \    if(a % 2 == 0)\n        return false;\n    for(long i = 3; i <= sqrt(a);\
    \ i += 2)\n    {\n        if(a % i == 0)\n            return false;\n    }\n \
    \   return true;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n\
    \    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n  \
    \  assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L)\
    \ == true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L)\
    \ == false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L)\
    \ == false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpooufb9mf.d(21): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpooufb9mf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(long\
    \ prime; primes)\n    {\n        if(a % prime == 0)\n        {\n            a\
    \ /= prime;\n            if(a == 1)\n            {\n                result = true;\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpne2m0b9d.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428225]\\n??:? void tmpne2m0b9d.__unittest_L31_C1()\
    \ [0x427e7a]\\n??:? void tmpne2m0b9d.__modtest() [0x427fa8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c20f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0a2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430235]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301c1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b079]\\n??:? runModuleUnitTests [0x42bfe5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428674]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285fb]\\n??:? _d_run_main [0x428566]\\n??:? main [0x427fbb]\\\
    n??:? __libc_start_main [0x67979554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long b = a;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long\
    \ f = 0;\n    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n\
    \    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long\
    \ o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n\
    \    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long\
    \ x = 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n    long ab = 0;\n\
    \    long ac = 0;\n    long ad = 0;\n    long ae = 0;\n    long af = 0;\n    long\
    \ ag = 0;\n    long ah = 0;\n    long ai = 0;\n    long aj = 0;\n    long ak =\
    \ 0;\n    long al = 0;\n    long am = 0;\n    long an = 0;\n    long ao = 0;\n\
    \    long ap = 0;\n    long aq = 0;\n    long ar = 0;\n    long as = 0;\n    long\
    \ at = 0;\n    long au = 0;\n    long av = 0;\n    long aw = 0;\n    long ax =\
    \ 0;\n    long ay = 0;\n    long az = 0;\n    long ba = 0;\n    long bb = 0;\n\
    \    long bc = 0;\n    long bd = 0;\n    long be = 0;\n    long bf = 0;\n    long\
    \ bg = 0;\n    long bh = 0;\n    long bi = 0;\n    long bj = 0;\n    long bk =\
    \ 0;\n    long bl = 0;\n    long bm = 0;\n    long bn = 0;\n    long bo = 0;\n\
    \    long bp = 0;\n    long bq = 0;\n    long br = 0;\n    long bs = 0;\n   \n\
    unittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpldjr54k7.d(86): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpldjr54k7.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    int i;\n    int j;\n    int k;\n    int l;\n    int m;\n    int n;\n    int\
    \ o;\n    int p;\n    int q;\n    int r;\n    int s;\n    int t;\n    int u;\n\
    \    int v;\n    int w;\n    int x;\n    int y;\n    int z;\n    int aa;\n   \
    \ int bb;\n    int cc;\n    int dd;\n    int ee;\n    int ff;\n    int gg;\n \
    \   int hh;\n    int ii;\n    int jj;\n    int kk;\n    int ll;\n    int mm;\n\
    \    int nn;\n    int oo;\n    int pp;\n    int qq;\n    int rr;\n    int ss;\n\
    \    int tt;\n    int uu;\n    int vv;\n    int ww;\n    int xx;\n    int yy;\n\
    \    int zz;\n    int aaa;\n    int bbb;\n    int ccc;\n    int ddd;\n    int\
    \ eee;\n    int fff;\n    int ggg;\n    int hhh;\n    int iii;\n    int jjj;\n\
    \    int kkk;\n    int lll;\n    int mmm;\n    int nnn;\n    int ooo;\n    int\
    \ ppp;\n    int qqq;\n    int rrr;\n    int sss;\n    int ttt;\n    int uuu;\n\
    \    int vvv;\n    int www;\n    int xxx;\n    int yyy;\n    int zzz;\n    int\
    \ aaaa;\n    int bbbb;\n    int cccc;\n    int dddd;\n    int eeee;\n    int ffff;\n\
    \    int gggg;\n    int hhhh;\n    int iiii;\n    int jjjj;\n    int kkkk;\n \
    \   int llll;\n    int mmmm;\n    int nnnn;\n    int oooo;\n    int pppp;\n  \
    \  int qqqq;\n    int rrrr;\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj1u80ov7.d(103): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj1u80ov7.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a == 1)\n        return false;\n    if (a == 2)\n        return true;\n\
    \    if (a == 3)\n        return true;\n    if (a == 5)\n        return true;\n\
    \    if (a == 7)\n        return true;\n    if (a == 11)\n        return true;\n\
    \    if (a == 13)\n        return true;\n    if (a == 17)\n        return true;\n\
    \    if (a == 19)\n        return true;\n    if (a == 23)\n        return true;\n\
    \    if (a == 29)\n        return true;\n    if (a == 31)\n        return true;\n\
    \    if (a == 37)\n        return true;\n    if (a == 41)\n        return true;\n\
    \    if (a == 43)\n        return true;\n    if (a == 47)\n        return true;\n\
    \    if (a == 53)\n        return true;\n    if (a == 59)\n        return true;\n\
    \    if (a == 61)\n        return true;\n    if (a == 67)\n        return true;\n\
    \    if (a == 71)\n        return true;\n    if (a == 73)\n        return true;\n\
    \    if (a == 79)\n        return true;\n    if (a == 83)\n        return true;\n\
    \    if (a == 89)\n        return true;\n    if (a == 97)\n        return true;\n\
    \    return false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpl3_keu9t.d(73): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427edd]\\n??:? void tmpl3_keu9t.__unittest_L69_C1()\
    \ [0x427b2e]\\n??:? void tmpl3_keu9t.__modtest() [0x427c5c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc03]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa96]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc29]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300d8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbb5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa6d]\\n??:? runModuleUnitTests [0x42b9d9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42832c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282b3]\\n??:? _d_run_main [0x42821e]\\n??:? main [0x427c6f]\\\
    n??:? __libc_start_main [0x26f3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    long[] result = [];\n    foreach(prime;\
    \ primes)\n    {\n        if(a % prime == 0)\n        {\n            result ~=\
    \ prime;\n            a /= prime;\n        }\n    }\n    return result.length\
    \ == 3;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpkz03zlq_.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42826d]\\n??:? void tmpkz03zlq_.__unittest_L27_C1()\
    \ [0x427f02]\\n??:? void tmpkz03zlq_.__modtest() [0x427ff0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cc43]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bad6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430529]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309d8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4304b5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42baad]\\n??:? runModuleUnitTests [0x42ca19]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286bc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428643]\\n??:? _d_run_main [0x4285ae]\\n??:? main [0x428003]\\\
    n??:? __libc_start_main [0xe605c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n)\n    {\n        if (n <= 1)\n            return false;\n\
    \        else if (n == 2)\n            return true;\n        else if (n % 2 ==\
    \ 0)\n            return false;\n        else\n        {\n            long i =\
    \ 3;\n            while (i <= sqrt(n))\n            {\n                if (n %\
    \ i == 0)\n                    return false;\n                i += 2;\n      \
    \      }\n            return true;\n        }\n    }\n    if (a <= 1)\n      \
    \  return false;\n    else if (a == 2)\n        return true;\n    else if (a %\
    \ 2 == 0)\n        return false;\n    else\n    {\n        long i = 3;\n     \
    \   while (i <= sqrt(a))\n        {\n            if (a % i == 0)\n           \
    \ {\n                if (is_prime(i) && is_prime(a / i))\n                   \
    \ return true;\n            }\n            i += 2;\n        }\n        return\
    \ false;\n    }\n}\n/*\nWrite a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing\
    \ that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppvkuyht0.d(26): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\n/tmp/tmppvkuyht0.d(44): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmppvkuyht0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(prime;\
    \ primes)\n    {\n        if(a % prime == 0)\n        {\n            result =\
    \ true;\n            break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6nbi8hj1.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42820d]\\n??:? void tmp6nbi8hj1.__unittest_L27_C1()\
    \ [0x427e5e]\\n??:? void tmp6nbi8hj1.__modtest() [0x427f8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c1f7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b08a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43021d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b061]\\n??:? runModuleUnitTests [0x42bfcd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42865c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285e3]\\n??:? _d_run_main [0x42854e]\\n??:? main [0x427f9f]\\\
    n??:? __libc_start_main [0x866e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(prime;\
    \ primes)\n    {\n        if(a % prime == 0)\n        {\n            a /= prime;\n\
    \            if(a == 1)\n            {\n                result = true;\n     \
    \           break;\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpanhxmyv1.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428225]\\n??:? void tmpanhxmyv1.__unittest_L31_C1()\
    \ [0x427e7a]\\n??:? void tmpanhxmyv1.__modtest() [0x427fa8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c20f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0a2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430235]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301c1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b079]\\n??:? runModuleUnitTests [0x42bfe5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428674]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285fb]\\n??:? _d_run_main [0x428566]\\n??:? main [0x427fbb]\\\
    n??:? __libc_start_main [0xfa03f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a < 2) return false;\n    if (a == 2) return true;\n    if (a % 2 ==\
    \ 0) return false;\n    long i = 3;\n    while (i < a)\n    {\n        if (a %\
    \ i == 0)\n        {\n            if (is_prime(i))\n            {\n          \
    \      long b = a / i;\n                if (is_prime(b))\n                {\n\
    \                    long c = b / i;\n                    if (is_prime(c))\n \
    \                   {\n                        return true;\n                \
    \    }\n                }\n            }\n        }\n        i += 2;\n    }\n\
    \    return false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqqv2iyay.d(23): Error: undefined identifier `is_prime`\\n/tmp/tmpqqv2iyay.d(26):\
    \ Error: undefined identifier `is_prime`\\n/tmp/tmpqqv2iyay.d(29): Error: undefined\
    \ identifier `is_prime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"\
    /tmp/tmpqqv2iyay.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n)\n    {\n        if (n <= 1) return false;\n       \
    \ if (n == 2) return true;\n        if (n % 2 == 0) return false;\n        for\
    \ (long i = 3; i <= sqrt(n); i += 2)\n        {\n            if (n % i == 0)\n\
    \                return false;\n        }\n        return true;\n    }\n    long[]\
    \ primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61,\
    \ 67, 71, 73, 79, 83, 89, 97];\n    foreach (i; primes)\n    {\n        if (a\
    \ % i == 0)\n        {\n            if (is_prime(a / i))\n            {\n    \
    \            return true;\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgnm0rlss.d(20): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpgnm0rlss.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a <= 1)\n        return false;\n    if (a == 2)\n        return true;\n\
    \    if (a % 2 == 0)\n        return false;\n    for (long i = 3; i <= sqrt(a);\
    \ i += 2)\n    {\n        if (a % i == 0)\n            return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n\
    \    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n  \
    \  assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L)\
    \ == true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L)\
    \ == false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L)\
    \ == false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxutpux2f.d(21): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpxutpux2f.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    long[] factors = [];\n    foreach(i;\
    \ 0..primes.length)\n    {\n        if(a % primes[i] == 0)\n        {\n      \
    \      factors ~= primes[i];\n            a /= primes[i];\n            i = 0;\n\
    \        }\n    }\n    return factors.length == 3;\n}\nunittest\n{\n    alias\
    \ candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpgdgdj2ll.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282ed]\\n??:? void tmpgdgdj2ll.__unittest_L28_C1()\
    \ [0x427f82]\\n??:? void tmpgdgdj2ll.__modtest() [0x428070]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cd37]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bbca]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43061d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430acc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bba1]\\n??:? runModuleUnitTests [0x42cb0d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4287b0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428737]\\n??:? _d_run_main [0x4286a2]\\n??:? main [0x428083]\\\
    n??:? __libc_start_main [0x2ed30554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    auto primes = [](long n) {\n        long[] result;\n        foreach (i; 2..n)\
    \ {\n            bool isPrime = true;\n            foreach (j; 2..i) {\n     \
    \           if (i % j == 0) {\n                    isPrime = false;\n        \
    \            break;\n                }\n            }\n            if (isPrime)\
    \ {\n                result ~= i;\n            }\n        }\n        return result;\n\
    \    };\n    auto factors = [](long n) {\n        long[] result;\n        foreach\
    \ (i; 2..n) {\n            if (n % i == 0) {\n                result ~= i;\n \
    \           }\n        }\n        return result;\n    };\n    auto is_prime =\
    \ [](long n) {\n        foreach (i; 2..n) {\n            if (n % i == 0) {\n \
    \               return false;\n            }\n        }\n        return true;\n\
    \    };\n    auto is_multiply_prime = [](long a) {\n        auto prime_factors\
    \ = factors(a).filter!is_prime;\n        return prime_factors.length == 3;\n \
    \   };\n    return is_multiply_prime(a);\n}\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdcg6kt58.d(15): Error: found `n` when expecting `.` following\
    \ long\\n/tmp/tmpdcg6kt58.d(15): Error: found `)` when expecting identifier following\
    \ `long`.\\n/tmp/tmpdcg6kt58.d(15): Error: found `{` when expecting `,`\\n/tmp/tmpdcg6kt58.d(16):\
    \ Error: found `[` when expecting `.` following long\\n/tmp/tmpdcg6kt58.d(16):\
    \ Error: found `]` when expecting identifier following `long`.\\n/tmp/tmpdcg6kt58.d(16):\
    \ Error: found `result` when expecting `,`\\n/tmp/tmpdcg6kt58.d(16): Error: expression\
    \ expected, not `;`\\n/tmp/tmpdcg6kt58.d(17): Error: found `foreach` when expecting\
    \ `,`\\n/tmp/tmpdcg6kt58.d(17): Error: found `;` when expecting `)`\\n/tmp/tmpdcg6kt58.d(17):\
    \ Error: found `2` when expecting `,`\\n/tmp/tmpdcg6kt58.d(17): Error: expression\
    \ expected, not `..`\\n/tmp/tmpdcg6kt58.d(17): Error: found `n` when expecting\
    \ `,`\\n/tmp/tmpdcg6kt58.d(17): Error: semicolon expected following auto declaration,\
    \ not `{`\\n/tmp/tmpdcg6kt58.d(31): Error: found `n` when expecting `.` following\
    \ long\\n/tmp/tmpdcg6kt58.d(31): Error: found `)` when expecting identifier following\
    \ `long`.\\n/tmp/tmpdcg6kt58.d(31): Error: found `{` when expecting `,`\\n/tmp/tmpdcg6kt58.d(32):\
    \ Error: found `[` when expecting `.` following long\\n/tmp/tmpdcg6kt58.d(32):\
    \ Error: found `]` when expecting identifier following `long`.\\n/tmp/tmpdcg6kt58.d(32):\
    \ Error: found `result` when expecting `,`\\n/tmp/tmpdcg6kt58.d(32): Error: expression\
    \ expected, not `;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdcg6kt58.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    import std.algorithm : all;\n    import std.range : iota;\n    import std.math\
    \ : isPrime;\n    import std.conv : to;\n    import std.array : array;\n    import\
    \ std.range : take;\n    import std.range : drop;\n    import std.range : takeExactly;\n\
    \    import std.range : dropExactly;\n    import std.range : empty;\n    import\
    \ std.range : only;\n    import std.range : isInputRange;\n    import std.range\
    \ : isForwardRange;\n    import std.range : isBidirectionalRange;\n    import\
    \ std.range : isRandomAccessRange;\n    import std.range : isInfinite;\n    import\
    \ std.range : isSorted;\n    import std.range : isSorted!\"a < b\";\n    import\
    \ std.range : isSorted!\"a > b\";\n    import std.range : isSorted!\"a <= b\"\
    ;\n    import std.range : isSorted!\"a >= b\";\n    import std.range : isSorted!\"\
    a.compare(b) < 0\";\n    import std.range : isSorted!\"a.compare(b) > 0\";\n \
    \   import std.range : isSorted!\"a.compare(b) <= 0\";\n    import std.range :\
    \ isSorted!\"a.compare(b) >= 0\";\n    import std.range : isSorted!\"a.compare(b)\"\
    ;\n    import std.range : isSorted!\"a.compare(b) > 0\";\n    import std.range\
    \ : isSorted!\"a.compare(b) <= 0\";\n    import std.range : isSorted!\"a.compare(b)\
    \ >= 0\";\n    import std.range : isSorted!\"a.compare(b)\";\n    import std.range\
    \ : isSorted!\"a.compare(b)\";\n    import std.range : isSorted!\"a.compare(b)\"\
    ;\n    import std.range : isSorted!\"a.compare(b)\";\n    import std.range : isSorted!\"\
    a.compare(b)\";\n    import std.range : isSorted!\"a.compare\nunittest\n{\n  \
    \  alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvu8ok4sl.d(32): Error: `;` expected\\n/tmp/tmpvu8ok4sl.d(33):\
    \ Error: `;` expected\\n/tmp/tmpvu8ok4sl.d(34): Error: `;` expected\\n/tmp/tmpvu8ok4sl.d(35):\
    \ Error: `;` expected\\n/tmp/tmpvu8ok4sl.d(36): Error: `;` expected\\n/tmp/tmpvu8ok4sl.d(37):\
    \ Error: `;` expected\\n/tmp/tmpvu8ok4sl.d(38): Error: `;` expected\\n/tmp/tmpvu8ok4sl.d(39):\
    \ Error: `;` expected\\n/tmp/tmpvu8ok4sl.d(40): Error: `;` expected\\n/tmp/tmpvu8ok4sl.d(41):\
    \ Error: `;` expected\\n/tmp/tmpvu8ok4sl.d(42): Error: `;` expected\\n/tmp/tmpvu8ok4sl.d(43):\
    \ Error: `;` expected\\n/tmp/tmpvu8ok4sl.d(44): Error: `;` expected\\n/tmp/tmpvu8ok4sl.d(45):\
    \ Error: `;` expected\\n/tmp/tmpvu8ok4sl.d(46): Error: `;` expected\\n/tmp/tmpvu8ok4sl.d(47):\
    \ Error: `;` expected\\n/tmp/tmpvu8ok4sl.d(48): Error: `;` expected\\n/tmp/tmpvu8ok4sl.d(49):\
    \ Error: `;` expected\\n/tmp/tmpvu8ok4sl.d(49): Error: unterminated string constant\
    \ starting at /tmp/tmpvu8ok4sl.d(49)\\n/tmp/tmpvu8ok4sl.d(65): Error: found `End\
    \ of File` when expecting `;` following statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpvu8ok4sl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a < 2)\n        return false;\n    if (a == 2)\n        return true;\n\
    \    if (a % 2 == 0)\n        return false;\n    for (long i = 3; i <= sqrt(a);\
    \ i += 2)\n    {\n        if (a % i == 0)\n            return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n\
    \    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n  \
    \  assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L)\
    \ == true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L)\
    \ == false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L)\
    \ == false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptmhgzbjo.d(21): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmptmhgzbjo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_multiply_prime = false;\n    long[] primes = [2L, 3L, 5L, 7L, 11L,\
    \ 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L,\
    \ 79L, 83L, 89L, 97L];\n    foreach(prime; primes)\n    {\n        if(a % prime\
    \ == 0)\n        {\n            is_multiply_prime = true;\n            break;\n\
    \        }\n    }\n    return is_multiply_prime;\n}\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqm2jmhuc.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42820d]\\n??:? void tmpqm2jmhuc.__unittest_L27_C1()\
    \ [0x427e5e]\\n??:? void tmpqm2jmhuc.__modtest() [0x427f8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c1f7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b08a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43021d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b061]\\n??:? runModuleUnitTests [0x42bfcd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42865c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285e3]\\n??:? _d_run_main [0x42854e]\\n??:? main [0x427f9f]\\\
    n??:? __libc_start_main [0x7dd7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    long[] factors = [];\n    foreach(long\
    \ prime; primes)\n    {\n        if(a % prime == 0)\n        {\n            factors\
    \ ~= prime;\n            a /= prime;\n        }\n    }\n    return factors.length\
    \ == 3;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp98m91wo6.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42826d]\\n??:? void tmp98m91wo6.__unittest_L27_C1()\
    \ [0x427f02]\\n??:? void tmp98m91wo6.__modtest() [0x427ff0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cc43]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bad6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430529]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309d8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4304b5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42baad]\\n??:? runModuleUnitTests [0x42ca19]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286bc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428643]\\n??:? _d_run_main [0x4285ae]\\n??:? main [0x428003]\\\
    n??:? __libc_start_main [0x38704554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long a)\n    {\n        if (a <= 1)\n            return false;\n\
    \        else if (a == 2)\n            return true;\n        else if (a % 2 ==\
    \ 0)\n            return false;\n        else\n        {\n            long i =\
    \ 3;\n            while (i <= sqrt(a))\n            {\n                if (a %\
    \ i == 0)\n                    return false;\n                i += 2;\n      \
    \      }\n            return true;\n        }\n    }\n    if (a <= 1)\n      \
    \  return false;\n    else if (a == 2)\n        return true;\n    else if (a %\
    \ 2 == 0)\n        return false;\n    else\n    {\n        long i = 3;\n     \
    \   while (i <= sqrt(a))\n        {\n            if (a % i == 0)\n           \
    \ {\n                if (is_prime(i) && is_prime(a / i))\n                   \
    \ return true;\n            }\n            i += 2;\n        }\n        return\
    \ false;\n    }\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n\
    \    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n  \
    \  assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L)\
    \ == true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L)\
    \ == false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L)\
    \ == false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8ry_iv15.d(26): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\n/tmp/tmp8ry_iv15.d(44): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp8ry_iv15.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    static bool is_prime(long n)\n    {\n        if (n <= 1) return false;\n\
    \        if (n <= 3) return true;\n        if (n % 2 == 0 || n % 3 == 0) return\
    \ false;\n        for (long i = 5; i * i <= n; i += 6)\n            if (n % i\
    \ == 0 || n % (i + 2) == 0)\n                return false;\n        return true;\n\
    \    }\n    if (a <= 1) return false;\n    if (a <= 3) return true;\n    if (a\
    \ % 2 == 0 || a % 3 == 0) return false;\n    for (long i = 5; i * i <= a; i +=\
    \ 6)\n        if (a % i == 0 || a % (i + 2) == 0)\n            return false;\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n\
    \    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n  \
    \  assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L)\
    \ == true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L)\
    \ == false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L)\
    \ == false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmps9pgv0j4.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f7d]\\n??:? void tmps9pgv0j4.__unittest_L33_C1()\
    \ [0x427bd2]\\n??:? void tmps9pgv0j4.__modtest() [0x427d00]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bca3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ab36]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fcc9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430178]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fc55]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ab0d]\\n??:? runModuleUnitTests [0x42ba79]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4283cc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428353]\\n??:? _d_run_main [0x4282be]\\n??:? main [0x427d13]\\\
    n??:? __libc_start_main [0x6f543554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    long[] factors = [];\n    foreach(i;\
    \ primes)\n    {\n        if(a % i == 0)\n        {\n            factors ~= i;\n\
    \            a /= i;\n        }\n    }\n    if(factors.length == 3)\n    {\n \
    \       return true;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpv_7atq36.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428275]\\n??:? void tmpv_7atq36.__unittest_L31_C1()\
    \ [0x427f0a]\\n??:? void tmpv_7atq36.__modtest() [0x427ff8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cc4b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430531]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309e0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4304bd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bab5]\\n??:? runModuleUnitTests [0x42ca21]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864b]\\n??:? _d_run_main [0x4285b6]\\n??:? main [0x42800b]\\\
    n??:? __libc_start_main [0x3a866554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long a)\n    {\n        if (a < 2)\n            return false;\n\
    \        for (long i = 2; i <= a / 2; i++)\n        {\n            if (a % i ==\
    \ 0)\n                return false;\n        }\n        return true;\n    }\n\
    \    if (a < 6)\n        return false;\n    for (long i = 2; i <= a / 2; i++)\n\
    \    {\n        if (is_prime(i) && a % i == 0)\n        {\n            long b\
    \ = a / i;\n            if (is_prime(b))\n            {\n                long\
    \ c = b / i;\n                if (is_prime(c))\n                    return true;\n\
    \            }\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias\
    \ candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpre0o_9lm.d(48): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f05]\\n??:? void tmpre0o_9lm.__unittest_L43_C1()\
    \ [0x427b77]\\n??:? void tmpre0o_9lm.__modtest() [0x427c84]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc2b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aabe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc51]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430100]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fbdd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa95]\\n??:? runModuleUnitTests [0x42ba01]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428354]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4282db]\\n??:? _d_run_main [0x428246]\\n??:? main [0x427c97]\\\
    n??:? __libc_start_main [0x3c677554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if(a < 3) return false;\n    if(a == 3) return true;\n    if(a % 2 == 0)\
    \ return false;\n    if(a % 3 == 0) return false;\n    long i = 5;\n    long w\
    \ = 2;\n    while(i * i <= a)\n    {\n        if(a % i == 0) return false;\n \
    \       i += w;\n        w = 6 - w;\n    }\n    return true;\n}\nunittest\n{\n\
    \    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjsp5imit.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e85]\\n??:? void tmpjsp5imit.__unittest_L29_C1()\
    \ [0x427ada]\\n??:? void tmpjsp5imit.__modtest() [0x427c08]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bbab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa3e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbd1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430080]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb5d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa15]\\n??:? runModuleUnitTests [0x42b981]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42825b]\\n??:? _d_run_main [0x4281c6]\\n??:? main [0x427c1b]\\\
    n??:? __libc_start_main [0x613c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_multiply_prime = false;\n    long[] primes = [2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n\
    \    foreach(i; 0..primes.length)\n    {\n        if(a % primes[i] == 0)\n   \
    \     {\n            is_multiply_prime = true;\n            a = a / primes[i];\n\
    \        }\n        if(a == 1)\n        {\n            break;\n        }\n   \
    \ }\n    return is_multiply_prime;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp85yl391t.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42826d]\\n??:? void tmp85yl391t.__unittest_L31_C1()\
    \ [0x427ec2]\\n??:? void tmp85yl391t.__modtest() [0x427ff0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c2cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b15e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43027d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b135]\\n??:? runModuleUnitTests [0x42c0a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428730]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4286b7]\\n??:? _d_run_main [0x428622]\\n??:? main [0x428003]\\\
    n??:? __libc_start_main [0x224da554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool isPrime = true;\n    int i = 2;\n    while (i <= a / 2) \n    {\n  \
    \      if (a % i == 0) \n        {\n            isPrime = false;\n           \
    \ break;\n        }\n        i++;\n    }\n    return isPrime;\n}\nunittest\n{\n\
    \    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp2ngjps61.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e2d]\\n??:? void tmp2ngjps61.__unittest_L28_C1()\
    \ [0x427a7e]\\n??:? void tmp2ngjps61.__modtest() [0x427bac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb53]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9e6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb79]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430028]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb05]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9bd]\\n??:? runModuleUnitTests [0x42b929]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42827c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428203]\\n??:? _d_run_main [0x42816e]\\n??:? main [0x427bbf]\\\
    n??:? __libc_start_main [0x10cc4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a < 3) return false;\n    if (a == 3) return true;\n    if (a % 2 ==\
    \ 0) return false;\n    if (a % 3 == 0) return false;\n    if (a % 5 == 0) return\
    \ false;\n    if (a % 7 == 0) return false;\n    if (a % 11 == 0) return false;\n\
    \    if (a % 13 == 0) return false;\n    if (a % 17 == 0) return false;\n    if\
    \ (a % 19 == 0) return false;\n    if (a % 23 == 0) return false;\n    if (a %\
    \ 29 == 0) return false;\n    if (a % 31 == 0) return false;\n    if (a % 37 ==\
    \ 0) return false;\n    if (a % 41 == 0) return false;\n    if (a % 43 == 0) return\
    \ false;\n    if (a % 47 == 0) return false;\n    if (a % 53 == 0) return false;\n\
    \    if (a % 59 == 0) return false;\n    if (a % 61 == 0) return false;\n    if\
    \ (a % 67 == 0) return false;\n    if (a % 71 == 0) return false;\n    if (a %\
    \ 73 == 0) return false;\n    if (a % 79 == 0) return false;\n    if (a % 83 ==\
    \ 0) return false;\n    if (a % 89 == 0) return false;\n    if (a % 97 == 0) return\
    \ false;\n    return true;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpu4kzrdx7.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ff5]\\n??:? void tmpu4kzrdx7.__unittest_L44_C1()\
    \ [0x427c67]\\n??:? void tmpu4kzrdx7.__modtest() [0x427d74]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bd1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42abae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fd41]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4301f0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fccd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ab85]\\n??:? runModuleUnitTests [0x42baf1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428444]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4283cb]\\n??:? _d_run_main [0x428336]\\n??:? main [0x427d87]\\\
    n??:? __libc_start_main [0x2f82a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    import std.algorithm;\n    import std.array;\n    import std.conv;\n    import\
    \ std.range;\n    import std.stdio;\n    import std.string;\n    import std.typecons;\n\
    \    import std.math;\n    int[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    int[] factors\
    \ = [];\n    foreach(i; primes)\n    {\n        if(a % i == 0)\n        {\n  \
    \          factors ~= i;\n            a /= i;\n        }\n    }\n    if(factors.length\
    \ == 3)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n\
    \    }\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpc0rm2z_0.d(48): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x43a7f9]\\n??:? void tmpc0rm2z_0.__unittest_L42_C1()\
    \ [0x43889a]\\n??:? void tmpc0rm2z_0.__modtest() [0x438e98]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x443717]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x43a456]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43cb19]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43cba8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43caa5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x43a42d]\\n??:? runModuleUnitTests [0x4434ed]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x43ad98]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x43ad1f]\\n??:? _d_run_main [0x43ac8a]\\n??:? main [0x438eab]\\\
    n??:? __libc_start_main [0x8b218554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    // your code goes here\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    long[]\
    \ factors = [];\n    foreach(prime; primes)\n    {\n        if(a % prime == 0)\n\
    \        {\n            factors ~= prime;\n            a /= prime;\n        }\n\
    \    }\n    if(factors.length == 3)\n    {\n        return true;\n    }\n    return\
    \ false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjtarlpa1.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428275]\\n??:? void tmpjtarlpa1.__unittest_L32_C1()\
    \ [0x427f0a]\\n??:? void tmpjtarlpa1.__modtest() [0x427ff8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cc4b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430531]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309e0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4304bd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bab5]\\n??:? runModuleUnitTests [0x42ca21]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864b]\\n??:? _d_run_main [0x4285b6]\\n??:? main [0x42800b]\\\
    n??:? __libc_start_main [0x44b46554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    long[] factors = [];\n    foreach(prime;\
    \ primes)\n    {\n        if(a % prime == 0)\n        {\n            factors ~=\
    \ prime;\n            a /= prime;\n        }\n    }\n    if(factors.length ==\
    \ 3)\n    {\n        return true;\n    }\n    return false;\n}\nunittest\n{\n\
    \    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5cq_8f48.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428275]\\n??:? void tmp5cq_8f48.__unittest_L31_C1()\
    \ [0x427f0a]\\n??:? void tmp5cq_8f48.__modtest() [0x427ff8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cc4b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430531]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309e0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4304bd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bab5]\\n??:? runModuleUnitTests [0x42ca21]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864b]\\n??:? _d_run_main [0x4285b6]\\n??:? main [0x42800b]\\\
    n??:? __libc_start_main [0xbc9a3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(i;\
    \ primes)\n    {\n        if(a % i == 0)\n        {\n            result = true;\n\
    \            break;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqkv4vghy.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42820d]\\n??:? void tmpqkv4vghy.__unittest_L27_C1()\
    \ [0x427e5e]\\n??:? void tmpqkv4vghy.__modtest() [0x427f8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c1f7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b08a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43021d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b061]\\n??:? runModuleUnitTests [0x42bfcd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42865c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285e3]\\n??:? _d_run_main [0x42854e]\\n??:? main [0x427f9f]\\\
    n??:? __libc_start_main [0xe6424554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(i; primes)\n    {\n  \
    \      if(a % i == 0)\n        {\n            a /= i;\n        }\n    }\n    return\
    \ a == 1;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpwg6cw591.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42821d]\\n??:? void tmpwg6cw591.__unittest_L25_C1()\
    \ [0x427e6e]\\n??:? void tmpwg6cw591.__modtest() [0x427f9c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c207]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b09a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43022d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306dc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301b9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b071]\\n??:? runModuleUnitTests [0x42bfdd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42866c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285f3]\\n??:? _d_run_main [0x42855e]\\n??:? main [0x427faf]\\\
    n??:? __libc_start_main [0x23fef554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a < 2) return false;\n    if (a == 2) return true;\n    if (a % 2 ==\
    \ 0) return false;\n    long sqrt_a = cast(long) sqrt(a);\n    for (long i = 3;\
    \ i <= sqrt_a; i += 2)\n    {\n        if (a % i == 0)\n        {\n          \
    \  long b = a / i;\n            if (b < 2) return false;\n            if (b ==\
    \ 2) return true;\n            if (b % 2 == 0) return false;\n            long\
    \ sqrt_b = cast(long) sqrt(b);\n            for (long j = 3; j <= sqrt_b; j +=\
    \ 2)\n            {\n                if (b % j == 0)\n                {\n    \
    \                long c = b / j;\n                    if (c < 2) return false;\n\
    \                    if (c == 2) return true;\n                    if (c % 2 ==\
    \ 0) return false;\n                    long sqrt_c = cast(long) sqrt(c);\n  \
    \                  for (long k = 3; k <= sqrt_c; k += 2)\n                   \
    \ {\n                        if (c % k == 0) return false;\n                 \
    \   }\n                    return true;\n                }\n            }\n  \
    \          return true;\n        }\n    }\n    return true;\n}\nunittest\n{\n\
    \    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8hisl18q.d(18): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\n/tmp/tmp8hisl18q.d(27): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\n/tmp/tmp8hisl18q.d(36): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp8hisl18q.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    long[] prime_factors;\n    long\
    \ i = 0;\n    while (a > 1)\n    {\n        if (a % primes[i] == 0)\n        {\n\
    \            prime_factors ~= primes[i];\n            a /= primes[i];\n      \
    \  }\n        else\n        {\n            i++;\n        }\n    }\n    if (prime_factors.length\
    \ == 3)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n\
    \    }\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    // your code goes here\n    bool result = true;\n    long[] primeNumbers\
    \ = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97];\n    long[] primeNumbers2 = [2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    long[]\
    \ primeNumbers3 = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    long[] primeNumbers4 = [2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    long[] primeNumbers5 = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    long[] primeNumbers6\
    \ = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97];\n    long[] primeNumbers7 = [2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    long[]\
    \ primeNumbers8 = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    long[] primeNumbers9 = [2, 3, 5, 7,\
    \ 11, 13, 17, 19,\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n \
    \   assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n   \
    \ assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L)\
    \ == true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L)\
    \ == false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L)\
    \ == false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprrskz9po.d(26): Error: expression expected, not `unittest`\\\
    n/tmp/tmprrskz9po.d(27): Error: comma expected separating array initializers,\
    \ not `{`\\n/tmp/tmprrskz9po.d(41): Error: comma expected separating array initializers,\
    \ not `void`\\n/tmp/tmprrskz9po.d(41): Error: semicolon expected, not `main`\\\
    n/tmp/tmprrskz9po.d(41): Error: found `{` when expecting `;` following statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprrskz9po.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    import std.math;\n    import std.algorithm;\n    import std.array;\n    import\
    \ std.range;\n    import std.typecons;\n    import std.conv;\n    import std.stdio;\n\
    \    import std.traits;\n    import std.range;\n    import std.typecons;\n   \
    \ import std.math;\n    import std.algorithm;\n    import std.array;\n    import\
    \ std.range;\n    import std.typecons;\n    import std.conv;\n    import std.stdio;\n\
    \    import std.traits;\n    import std.range;\n    import std.typecons;\n   \
    \ import std.math;\n    import std.algorithm;\n    import std.array;\n    import\
    \ std.range;\n    import std.typecons;\n    import std.conv;\n    import std.stdio;\n\
    \    import std.traits;\n    import std.range;\n    import std.typecons;\n   \
    \ import std.math;\n    import std.algorithm;\n    import std.array;\n    import\
    \ std.range;\n    import std.typecons;\n    import std.conv;\n    import std.stdio;\n\
    \    import std.traits;\n    import std.range;\n    import std.typecons;\n   \
    \ import std.math;\n    import std.algorithm;\n    import std.array;\n    import\
    \ std.range;\n    import std.typecons;\n    import std.conv;\n    import std.stdio;\n\
    \    import std.traits;\n    import std.range;\n    import std.typecons;\n   \
    \ import std.math;\n    import std.algorithm;\n    import std.array;\n    import\
    \ std.range;\n    import std.typecons;\n    import std.conv;\n    import std.stdio;\n\
    \    import std.traits;\n    import std.range;\n    import std.typecons;\n   \
    \ import std.math;\n    import std.algorithm;\n    import std.array;\n    import\
    \ std.range;\n    import std.typecons;\n    import std.conv;\n    import std.stdio;\n\
    \    import std.traits;\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpay5fidja.d(83): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpay5fidja.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    import std.algorithm : all;\n    import std.math : isPrime;\n    import std.range\
    \ : iota;\n    import std.conv : to;\n    import std.array : array;\n    import\
    \ std.typecons : tuple;\n    import std.range : take;\n    import std.range :\
    \ drop;\n    import std.range : cycle;\n    import std.range : zip;\n    import\
    \ std.range : retro;\n    import std.range : retroCycle;\n    import std.range\
    \ : retroZip;\n    import std.range : retroZipCycle;\n    import std.range : retroZipCycle;\n\
    \    import std.range : retroZip;\n    import std.range : retroCycle;\n    import\
    \ std.range : retro;\n    import std.range : zip;\n    import std.range : cycle;\n\
    \    import std.range : drop;\n    import std.range : take;\n    import std.typecons\
    \ : tuple;\n    import std.array : array;\n    import std.conv : to;\n    import\
    \ std.range : iota;\n    import std.math : isPrime;\n    import std.algorithm\
    \ : all;\n    import std.range : retroZip;\n    import std.range : retroZipCycle;\n\
    \    import std.range : retroCycle;\n    import std.range : retro;\n    import\
    \ std.range : zip;\n    import std.range : cycle;\n    import std.range : drop;\n\
    \    import std.range : take;\n    import std.typecons : tuple;\n    import std.array\
    \ : array;\n    import std.conv : to;\n    import std.range : iota;\n    import\
    \ std.math : isPrime;\n    import std.algorithm : all;\n    import std.range :\
    \ retroZip;\n    import std.range : retroZipCycle;\n    import std.range : retroCycle;\n\
    \    import std.range : retro;\n    import std.range : zip;\n    import std.range\
    \ : cycle;\n    import std.range : drop;\n    import std.range : take;\n    import\
    \ std.typecons : tuple;\n    import std.array : array;\n    import std.\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph2_qiszm.d(68): Error: identifier expected following `package`\\\
    n/tmp/tmph2_qiszm.d(68): Error: `;` expected\\n/tmp/tmph2_qiszm.d(83): Error:\
    \ found `End of File` when expecting `}` following compound statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph2_qiszm.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n)\n    {\n        if (n <= 1)\n            return false;\n\
    \        if (n <= 3)\n            return true;\n        if (n % 2 == 0 || n %\
    \ 3 == 0)\n            return false;\n        for (long i = 5; i * i <= n; i +=\
    \ 6)\n            if (n % i == 0 || n % (i + 2) == 0)\n                return\
    \ false;\n        return true;\n    }\n    long[] primes;\n    for (long i = 2;\
    \ i <= a; i++)\n    {\n        if (is_prime(i))\n            primes ~= i;\n  \
    \  }\n    foreach (i; primes)\n    {\n        foreach (j; primes)\n        {\n\
    \            foreach (k; primes)\n            {\n                if (i * j * k\
    \ == a)\n                    return true;\n            }\n        }\n    }\n \
    \   return false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n\
    \    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n  \
    \  assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L)\
    \ == true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L)\
    \ == false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L)\
    \ == false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    long[] factors = [];\n    foreach(i;\
    \ primes)\n    {\n        if(a % i == 0)\n        {\n            factors ~= i;\n\
    \            a /= i;\n        }\n    }\n    return factors.length == 3;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp95obnzdw.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42826d]\\n??:? void tmp95obnzdw.__unittest_L27_C1()\
    \ [0x427f02]\\n??:? void tmp95obnzdw.__modtest() [0x427ff0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cc43]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bad6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430529]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309d8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4304b5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42baad]\\n??:? runModuleUnitTests [0x42ca19]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286bc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428643]\\n??:? _d_run_main [0x4285ae]\\n??:? main [0x428003]\\\
    n??:? __libc_start_main [0x40785554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(i;\
    \ primes)\n    {\n        if(a % i == 0)\n        {\n            result = true;\n\
    \            break;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpccadx4gj.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42820d]\\n??:? void tmpccadx4gj.__unittest_L27_C1()\
    \ [0x427e5e]\\n??:? void tmpccadx4gj.__modtest() [0x427f8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c1f7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b08a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43021d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b061]\\n??:? runModuleUnitTests [0x42bfcd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42865c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285e3]\\n??:? _d_run_main [0x42854e]\\n??:? main [0x427f9f]\\\
    n??:? __libc_start_main [0x94e61554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a == 1)\n        return false;\n    if (a == 2)\n        return true;\n\
    \    if (a % 2 == 0)\n        return false;\n    long i = 3;\n    while (i <=\
    \ sqrt(a))\n    {\n        if (a % i == 0)\n            return false;\n      \
    \  i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq9z0rw72.d(22): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpq9z0rw72.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n)\n    {\n        if (n <= 1)\n            return false;\n\
    \        else if (n <= 3)\n            return true;\n        else if (n % 2 ==\
    \ 0 || n % 3 == 0)\n            return false;\n        long i = 5;\n        while\
    \ (i * i <= n)\n        {\n            if (n % i == 0 || n % (i + 2) == 0)\n \
    \               return false;\n            i = i + 6;\n        }\n        return\
    \ true;\n    }\n    if (a <= 1)\n        return false;\n    else if (a <= 3)\n\
    \        return true;\n    else if (a % 2 == 0 || a % 3 == 0)\n        return\
    \ false;\n    long i = 5;\n    while (i * i <= a)\n    {\n        if (a % i ==\
    \ 0 || a % (i + 2) == 0)\n        {\n            if (is_prime(i) && is_prime(a\
    \ / i))\n                return true;\n        }\n        i = i + 6;\n    }\n\
    \    return false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5mcknc_k.d(55): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427fb5]\\n??:? void tmp5mcknc_k.__unittest_L50_C1()\
    \ [0x427c27]\\n??:? void tmp5mcknc_k.__modtest() [0x427d34]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bcdb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ab6e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fd01]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4301b0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fc8d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ab45]\\n??:? runModuleUnitTests [0x42bab1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428404]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42838b]\\n??:? _d_run_main [0x4282f6]\\n??:? main [0x427d47]\\\
    n??:? __libc_start_main [0x1ee5f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    long[] factors = [];\n    foreach(prime;\
    \ primes)\n    {\n        if(a % prime == 0)\n        {\n            factors ~=\
    \ prime;\n            a /= prime;\n        }\n    }\n    return factors.length\
    \ == 3;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprt3gfzys.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42826d]\\n??:? void tmprt3gfzys.__unittest_L27_C1()\
    \ [0x427f02]\\n??:? void tmprt3gfzys.__modtest() [0x427ff0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cc43]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bad6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430529]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309d8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4304b5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42baad]\\n??:? runModuleUnitTests [0x42ca19]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286bc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428643]\\n??:? _d_run_main [0x4285ae]\\n??:? main [0x428003]\\\
    n??:? __libc_start_main [0xb4f6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long i;\n    long j;\n    long k;\n    long l;\n    long m;\n    long n;\n\
    \    long o;\n    long p;\n    long q;\n    long r;\n    long s;\n    long t;\n\
    \    long u;\n    long v;\n    long w;\n    long x;\n    long y;\n    long z;\n\
    \    long aa;\n    long bb;\n    long cc;\n    long dd;\n    long ee;\n    long\
    \ ff;\n    long gg;\n    long hh;\n    long ii;\n    long jj;\n    long kk;\n\
    \    long ll;\n    long mm;\n    long nn;\n    long oo;\n    long pp;\n    long\
    \ qq;\n    long rr;\n    long ss;\n    long tt;\n    long uu;\n    long vv;\n\
    \    long ww;\n    long xx;\n    long yy;\n    long zz;\n    long aaa;\n    long\
    \ bbb;\n    long ccc;\n    long ddd;\n    long eee;\n    long fff;\n    long ggg;\n\
    \    long hhh;\n    long iii;\n    long jjj;\n    long kkk;\n    long lll;\n \
    \   long mmm;\n    long nnn;\n    long ooo;\n    long ppp;\n    long qqq;\n  \
    \  long rrr;\n    long sss;\n    long ttt;\n    long uuu;\n    long vvv;\n   \
    \ long www;\n    long xxx;\n    long yyy;\n    long zzz;\n    long aaaa;\n   \
    \ long bbbb;\n    long cccc;\n    long dddd;\n    long eeee;\n    long ffff;\n\
    \    long gggg;\n    long hhhh;\n    long iiii;\n    long jjjj;\n    long kkkk;\n\
    \    long llll;\n    long mmmm;\n    long nnnn;\n    long oooo;\n    long pppp;\n\
    \    long qqqq;\n    long rrrr;\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4r8ilbg3.d(103): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4r8ilbg3.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a <= 1) return false;\n    if (a == 2) return true;\n    if (a % 2 ==\
    \ 0) return false;\n    long i = 3;\n    while (i <= sqrt(a))\n    {\n       \
    \ if (a % i == 0) return false;\n        i += 2;\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5soztp8w.d(19): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp5soztp8w.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a == 1)\n        return false;\n    if (a == 2)\n        return true;\n\
    \    if (a % 2 == 0)\n        return false;\n    long i = 3;\n    while (i <=\
    \ sqrt(a))\n    {\n        if (a % i == 0)\n            return false;\n      \
    \  i += 2;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqfuhiday.d(22): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpqfuhiday.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    long[] prime_factors = [];\n \
    \   foreach(prime; primes)\n    {\n        if(a % prime == 0)\n        {\n   \
    \         prime_factors ~= prime;\n            a /= prime;\n        }\n    }\n\
    \    return prime_factors.length == 3;\n}\nunittest\n{\n    alias candidate =\
    \ is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpr59zvbz_.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42826d]\\n??:? void tmpr59zvbz_.__unittest_L27_C1()\
    \ [0x427f02]\\n??:? void tmpr59zvbz_.__modtest() [0x427ff0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cc43]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bad6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430529]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309d8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4304b5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42baad]\\n??:? runModuleUnitTests [0x42ca19]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286bc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428643]\\n??:? _d_run_main [0x4285ae]\\n??:? main [0x428003]\\\
    n??:? __libc_start_main [0x4aabb554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n)\n    {\n        if (n == 2)\n            return true;\n\
    \        if (n % 2 == 0)\n            return false;\n        for (long i = 3;\
    \ i <= sqrt(n); i += 2)\n        {\n            if (n % i == 0)\n            \
    \    return false;\n        }\n        return true;\n    }\n    if (a < 2)\n \
    \       return false;\n    if (a == 2)\n        return true;\n    if (a % 2 ==\
    \ 0)\n        return false;\n    for (long i = 3; i <= sqrt(a); i += 2)\n    {\n\
    \        if (a % i == 0)\n        {\n            if (is_prime(i) && is_prime(a\
    \ / i))\n                return true;\n        }\n    }\n    return false;\n}\n\
    unittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxehxq41f.d(21): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\n/tmp/tmpxehxq41f.d(34): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpxehxq41f.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    long[] factors = [];\n    foreach(long\
    \ p; primes)\n    {\n        if(a % p == 0)\n        {\n            factors ~=\
    \ p;\n            a /= p;\n        }\n    }\n    return factors.length == 3;\n\
    }\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpoq0xinkm.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42826d]\\n??:? void tmpoq0xinkm.__unittest_L27_C1()\
    \ [0x427f02]\\n??:? void tmpoq0xinkm.__modtest() [0x427ff0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cc43]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bad6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430529]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309d8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4304b5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42baad]\\n??:? runModuleUnitTests [0x42ca19]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286bc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428643]\\n??:? _d_run_main [0x4285ae]\\n??:? main [0x428003]\\\
    n??:? __libc_start_main [0xb8376554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    long[] factors = [];\n    foreach(prime;\
    \ primes)\n    {\n        if(a % prime == 0)\n        {\n            factors ~=\
    \ prime;\n            a /= prime;\n        }\n    }\n    if(factors.length ==\
    \ 3)\n    {\n        return true;\n    }\n    return false;\n}\nunittest\n{\n\
    \    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4xjyz_ya.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428275]\\n??:? void tmp4xjyz_ya.__unittest_L31_C1()\
    \ [0x427f0a]\\n??:? void tmp4xjyz_ya.__modtest() [0x427ff8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cc4b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430531]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309e0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4304bd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bab5]\\n??:? runModuleUnitTests [0x42ca21]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42864b]\\n??:? _d_run_main [0x4285b6]\\n??:? main [0x42800b]\\\
    n??:? __libc_start_main [0xf2a7d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    long[] prime_factors = [];\n \
    \   foreach(prime; primes)\n    {\n        if(a % prime == 0)\n        {\n   \
    \         prime_factors ~= prime;\n            a /= prime;\n        }\n    }\n\
    \    return prime_factors.length == 3;\n}\nunittest\n{\n    alias candidate =\
    \ is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpnk66h1u7.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42826d]\\n??:? void tmpnk66h1u7.__unittest_L27_C1()\
    \ [0x427f02]\\n??:? void tmpnk66h1u7.__modtest() [0x427ff0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cc43]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bad6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430529]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4309d8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4304b5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42baad]\\n??:? runModuleUnitTests [0x42ca19]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286bc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428643]\\n??:? _d_run_main [0x4285ae]\\n??:? main [0x428003]\\\
    n??:? __libc_start_main [0x49399554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool result = false;\n    long[] primeNumbers = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n \
    \   foreach(i; primeNumbers)\n    {\n        if(a % i == 0)\n        {\n     \
    \       result = true;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpnt6b1m0u.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42820d]\\n??:? void tmpnt6b1m0u.__unittest_L26_C1()\
    \ [0x427e5e]\\n??:? void tmpnt6b1m0u.__modtest() [0x427f8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c1f7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b08a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43021d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b061]\\n??:? runModuleUnitTests [0x42bfcd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42865c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285e3]\\n??:? _d_run_main [0x42854e]\\n??:? main [0x427f9f]\\\
    n??:? __libc_start_main [0x501bc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a < 2) \n        return false;\n    if (a == 2) \n        return true;\n\
    \    if (a % 2 == 0) \n        return false;\n    for (long i = 3; i <= sqrt(a);\
    \ i += 2) \n    {\n        if (a % i == 0) \n            return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n\
    \    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n  \
    \  assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L)\
    \ == true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L)\
    \ == false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L)\
    \ == false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfd_0k9tu.d(21): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpfd_0k9tu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    long[] prime_factors;\n    long\
    \ i = 0;\n    while (a > 1)\n    {\n        if (a % primes[i] == 0)\n        {\n\
    \            prime_factors ~= primes[i];\n            a /= primes[i];\n      \
    \  }\n        else\n        {\n            i++;\n        }\n    }\n    return\
    \ prime_factors.length == 3;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n) \n    {\n        if (n < 2) \n            return false;\n\
    \        if (n == 2) \n            return true;\n        if (n % 2 == 0) \n  \
    \          return false;\n        for (long i = 3; i <= sqrt(n); i += 2) \n  \
    \      {\n            if (n % i == 0) \n                return false;\n      \
    \  }\n        return true;\n    }\n    foreach (i; 2 .. a) \n    {\n        if\
    \ (is_prime(i) && a % i == 0) \n        {\n            a /= i;\n            if\
    \ (is_prime(a)) \n                return true;\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1afzmsvx.d(23): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp1afzmsvx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a < 2)\n        return false;\n    if (a == 2)\n        return true;\n\
    \    if (a % 2 == 0)\n        return false;\n    for (long i = 3; i <= sqrt(a);\
    \ i += 2)\n    {\n        if (a % i == 0)\n            return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n\
    \    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n  \
    \  assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L)\
    \ == true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L)\
    \ == false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L)\
    \ == false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprzd5qiru.d(21): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmprzd5qiru.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a < 2) return false;\n    if (a == 2) return true;\n    if (a % 2 ==\
    \ 0) return false;\n    for (long i = 3; i <= sqrt(a); i += 2)\n    {\n      \
    \  if (a % i == 0)\n        {\n            return false;\n        }\n    }\n \
    \   return true;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n\
    \    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n  \
    \  assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L)\
    \ == true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L)\
    \ == false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L)\
    \ == false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxjje_q16.d(18): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpxjje_q16.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long[] prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    long[] prime_factors = [];\n\
    \    long[] prime_factors_temp = [];\n    long[] prime_factors_temp_2 = [];\n\
    \    long[] prime_factors_temp_3 = [];\n    long[] prime_factors_temp_4 = [];\n\
    \    long[] prime_factors_temp_5 = [];\n    long[] prime_factors_temp_6 = [];\n\
    \    long[] prime_factors_temp_7 = [];\n    long[] prime_factors_temp_8 = [];\n\
    \    long[] prime_factors_temp_9 = [];\n    long[] prime_factors_temp_10 = [];\n\
    \    long[] prime_factors_temp_11 = [];\n    long[] prime_factors_temp_12 = [];\n\
    \    long[] prime_factors_temp_13 = [];\n    long[] prime_factors_temp_14 = [];\n\
    \    long[] prime_factors_temp_15 = [];\n    long[] prime_factors_temp_16 = [];\n\
    \    long[] prime_factors_temp_17 = [];\n    long[] prime_factors_temp_18 = [];\n\
    \    long[] prime_factors_temp_19 = [];\n    long[] prime_factors_temp_20 = [];\n\
    \    long[] prime_factors_temp_21 = [];\n    long[] prime_factors_temp_22 = [];\n\
    \    long[] prime_factors_temp_23 = [];\n    long[] prime_factors_temp_24 = [];\n\
    \    long[] prime_factors_temp_25 = [];\n    long[] prime_factors_temp_26 = [];\n\
    \    long[] prime_factors_temp_27 = [];\n    long[] prime_factors_temp_28 = [];\n\
    \    long[] prime_factors_temp_29 = [];\n    long[] prime_factors_temp_30 = [];\n\
    \    long[] prime_factors_temp_31 = [];\n    long[] prime_factors\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxjgkqe9f.d(49): Error: semicolon expected, not `unittest`\\n/tmp/tmpxjgkqe9f.d(49):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpxjgkqe9f.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_prime(long n)\n    {\n        if (n < 2) return false;\n        if\
    \ (n == 2) return true;\n        if (n % 2 == 0) return false;\n        for (long\
    \ i = 3; i <= sqrt(n); i += 2)\n        {\n            if (n % i == 0)\n     \
    \           return false;\n        }\n        return true;\n    }\n    long[]\
    \ primes;\n    for (long i = 2; i <= a; i++)\n    {\n        if (is_prime(i))\n\
    \            primes ~= i;\n    }\n    foreach (i; primes)\n    {\n        foreach\
    \ (j; primes)\n        {\n            foreach (k; primes)\n            {\n   \
    \             if (i * j * k == a)\n                    return true;\n        \
    \    }\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1_v7pg6t.d(20): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp1_v7pg6t.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if(a == 1)\n        return false;\n    if(a == 2)\n        return true;\n\
    \    if(a % 2 == 0)\n        return false;\n    for(long i = 3; i <= sqrt(a);\
    \ i += 2)\n    {\n        if(a % i == 0)\n            return false;\n    }\n \
    \   return true;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n\
    \    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n  \
    \  assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L)\
    \ == true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L)\
    \ == false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L)\
    \ == false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpottztlqr.d(21): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpottztlqr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_multiply_prime = false;\n    long[] prime_numbers = [2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    foreach(prime_number; prime_numbers)\n    {\n        if(a % prime_number\
    \ == 0)\n        {\n            is_multiply_prime = true;\n            break;\n\
    \        }\n    }\n    return is_multiply_prime;\n}\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjf95ni18.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42820d]\\n??:? void tmpjf95ni18.__unittest_L27_C1()\
    \ [0x427e5e]\\n??:? void tmpjf95ni18.__modtest() [0x427f8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c1f7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b08a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43021d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b061]\\n??:? runModuleUnitTests [0x42bfcd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42865c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285e3]\\n??:? _d_run_main [0x42854e]\\n??:? main [0x427f9f]\\\
    n??:? __libc_start_main [0xa8bfe554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    int count = 0;\n    for (int i = 2; i <= a; i++) \n    {\n        if (a %\
    \ i == 0) \n        {\n            count++;\n            a /= i;\n           \
    \ i--;\n        }\n    }\n    return count == 3;\n}\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
