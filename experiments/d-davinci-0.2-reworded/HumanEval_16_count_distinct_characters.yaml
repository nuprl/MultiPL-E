name: HumanEval_16_count_distinct_characters
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n Given a string, find out how\
  \ many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
  xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n\
  */\nlong count_distinct_characters(string string) \n"
tests: "unittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
  \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
  ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
  Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
completions: ["{\n    return to!string(string.toLower()).length;\n}", "{\n    auto\
    \ char_set = set!char();\n    foreach(char c; string)\n    {\n        char_set.insert(c);\n\
    \    }\n    return char_set.length;\n}", "{\n    return string.toLower().chars.uniq.length;\n\
    }", "{\n    return set(string.toLowerCase).length;\n}", "{\n    return to!string(string.toLower()).length;\n\
    }", "{\n    return set(string.toLower).length;\n}", "{\n    return set!(char)(string).length;\n\
    }", "{\n    return string.toLower().toHashSet().length;\n}", "{\n    return to!(long)(set(string.toLower()).length);\n\
    }", "{\n    auto result = new HashSet!char();\n    foreach(c; string)\n    {\n\
    \        result.insert(c);\n    }\n    return result.length;\n}\n/*\n Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters_2(string string) \n\
    {\n    auto result = new HashSet!char();\n    foreach(c; string)\n    {\n    \
    \    result.insert(c);\n    }\n    return result.length;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters_3(string string) \n\
    {\n    auto result = new HashSet!char();\n    foreach(c; string)\n    {\n    \
    \    result.insert(c);\n    }\n    return result.length;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters_4(string string) \n\
    {\n    auto result = new HashSet!char();\n    foreach(c; string)\n    {\n    \
    \    result.insert(c);\n    }\n    return result.length;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters_5(string string) \n\
    {\n    auto result = new HashSet!char", "{\n    return string.toLower().toSet().length;\n\
    }", "{\n    return set(string.toLower).length;\n}", "{\n    auto result = new\
    \ Set!(char)();\n    foreach(c; string) \n    {\n        result.insert(c);\n \
    \   }\n    return result.length;\n}", "{\n    return to!(long)(uniq(string.toLower()));\n\
    }", "{\n    return set(string.toLowerCase).length;\n}", "{\n    return set(string.toLowerCase).length;\n\
    }", "{\n    return string.toLower().toHashSet().length;\n}", "{\n    auto result\
    \ = new HashSet!(char)();\n    foreach(char c; string)\n    {\n        result.insert(c);\n\
    \    }\n    return result.length;\n}", "{\n    return to!string(string.toLower()).byChunk(1).array.uniq.length;\n\
    }", "{\n    return to!string(string.toLower()).length;\n}", "{\n    return string.toLower().toHashSet().length;\n\
    }", "{\n    long count = 0;\n    foreach(char c; string)\n    {\n        if(c.tolower()\
    \ !in string.tolower())\n        {\n            count++;\n        }\n    }\n \
    \   return count;\n}", "{\n    return set(string.toLower()).length;\n}", "{\n\
    \    return string.toLower().toHashSet().length;\n}", "{\n    auto result = new\
    \ HashSet!char();\n    foreach(c; string)\n    {\n        result.insert(c);\n\
    \    }\n    return result.length;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
    xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n\
    */\nlong count_distinct_characters_2(string string) \n{\n    auto result = new\
    \ HashSet!char();\n    foreach(c; string)\n    {\n        result.insert(c);\n\
    \    }\n    return result.length;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
    xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n\
    */\nlong count_distinct_characters_3(string string) \n{\n    auto result = new\
    \ HashSet!char();\n    foreach(c; string)\n    {\n        result.insert(c);\n\
    \    }\n    return result.length;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
    xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n\
    */\nlong count_distinct_characters_4(string string) \n{\n    auto result = new\
    \ HashSet!char();\n    foreach(c; string)\n    {\n        result.insert(c);\n\
    \    }\n    return result.length;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
    xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n\
    */\nlong count_distinct_characters_5(string string) \n{\n    auto result = new\
    \ HashSet!char", "{\n    return set(string.toLowerCase).length;\n}", "{\n    return\
    \ to!string(string.toLower()).length;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
    xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n\
    */\nlong count_distinct_characters2(string string) \n{\n    return to!string(string.toLower()).length;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n\
    \    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters3(string\
    \ string) \n{\n    return to!string(string.toLower()).length;\n}\n/*\n Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters4(string string) \n\
    {\n    return to!string(string.toLower()).length;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \   >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters5(string string) \n\
    {\n    return to!string(string.toLower()).length;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \   >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters6(string string) \n\
    {\n    return to!string(string.toLower()).length;\n}\n/*\n", "{\n    return set(string.toLowerCase).length;\n\
    }", "{\n    return set(string.toLowerCase).length;\n}", "{\n    long count = 0;\n\
    \    foreach(char c; string)\n    {\n        if(c.isLetter)\n        {\n     \
    \       count += 1;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    foreach(char c; string)\n    {\n        if(c.isAlpha)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    foreach(char c; string)\n    {\n        if(c.tolower() in count)\n\
    \            continue;\n        count++;\n    }\n    return count;\n}", "{\n \
    \   long count = 0;\n    foreach(char c; string)\n    {\n        if(!count)\n\
    \        {\n            count++;\n        }\n        else\n        {\n       \
    \     bool found = false;\n            foreach(char c2; string[0..count])\n  \
    \          {\n                if(c == c2)\n                {\n               \
    \     found = true;\n                    break;\n                }\n         \
    \   }\n            if(!found)\n            {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}", "{\n    long count = 0;\n\
    \    foreach(char c; string)\n    {\n        if(c.tolower() !in count)\n     \
    \   {\n            count ~= c.tolower();\n        }\n    }\n    return count.length;\n\
    }", "{\n    return string.toLower().toHashSet().length;\n}", "{\n    auto char_set\
    \ = set!char();\n    foreach(char c; string)\n    {\n        char_set.insert(toLower(c));\n\
    \    }\n    return char_set.length;\n}", "{\n    return string.toLower().distinct.length;\n\
    }", "{\n    long count = 0;\n    foreach(char c; string)\n    {\n        if(c.isAlpha)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    return to!(long)(reduce!((a, b) => a + b, \n                            \
    \ map!((c) => 1, \n                                  map!((c) => toLower(c), \n\
    \                                       string))));\n}", "{\n    return to!(long)(uniq(string.toLower()));\n\
    }", "{\n    return string.toLower().toHashSet().length;\n}", "{\n    return set(string.toLowerCase).length;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n\
    \    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    return set(string.toLowerCase).length;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return set(string.toLowerCase).length;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return set(string.toLowerCase).length;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return set(string.toLowerCase).length;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return set(string.toLowerCase).length;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does", "{\n    return set(string.toLowerCase).length;\n\
    }", "{\n    return string.toLower().distinct.length;\n}", "{\n    return string.toLower().length;\n\
    }", "{\n    long count = 0;\n    foreach(char c; string)\n    {\n        if(c.tolower()\
    \ !in string.tolower())\n        {\n            count++;\n        }\n    }\n \
    \   return count;\n}", "{\n    return to!string(string.toLower).length;\n}", "{\n\
    \    long count = 0;\n    foreach(char c; string)\n    {\n        if(c.tolower()\
    \ !in string.tolower())\n        {\n            count++;\n        }\n    }\n \
    \   return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
    xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n\
    */\nlong count_distinct_characters2(string string) \n{\n    long count = 0;\n\
    \    foreach(char c; string)\n    {\n        if(c.tolower() !in string.tolower())\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n\
    \ Given a string, find out how many distinct characters (regardless of case) does\
    \ it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>>\
    \ count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters3(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c; string)\n    {\n     \
    \   if(c.tolower() !in string.tolower())\n        {\n            count++;\n  \
    \      }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
    xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n\
    */\nlong count_distinct_characters4(string string) \n{\n    long count = 0;\n\
    \    foreach(char c; string)\n    {\n        if(c.tolower() !in string.tolower())\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n\
    \ Given a string, find out how many distinct characters (regardless of case) does\
    \ it consist of\n    >>> count_distinct_characters(\"xy", "{\n    return set(string.tolower).length;\n\
    }", "{\n    return to!string(string.toLower()).length;\n}", "{\n    return set(string.toLower()).length;\n\
    }", "{\n    return to!(long)(uniq(string.toLower()));\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return to!(long)(uniq(string.toLower()));\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return to!(long)(uniq(string.toLower()));\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return to!(long)(uniq(string.toLower()));\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return to!(long)(uniq(string.toLower()));\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return to!(long)(uniq(string.toLower", "{\n    long count = 0;\n    foreach(char\
    \ c; string)\n    {\n        if(c.isLetter)\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(char\
    \ c; string)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n           \
    \ count++;\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n    \
    \        count++;\n        }\n    }\n    return count;\n}", "{\n    return set(string.toLower).length;\n\
    }", "{\n    return set!(char)(string).length;\n}", "{\n    return set(string.toLowerCase).length;\n\
    }", "{\n    auto char_set = new Set!char;\n    foreach(c; string)\n    {\n   \
    \     char_set.insert(c);\n    }\n    return char_set.length;\n}", "{\n    return\
    \ set(string.toLowerCase).length;\n}", "{\n    long count = 0;\n    foreach(char\
    \ c; string)\n    {\n        if(c.tolower() !in string.tolower())\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}", "{\n    return\
    \ string.toLower().chars.distinct.length;\n}", "{\n    return set(string.toLowerCase).length;\n\
    }", "{\n    return string.toLower().toHashSet().length;\n}", "{\n    return string.toLower().toHashSet().length;\n\
    }", "{\n    return to!(long)(reduce!((a, b) => a + b)(map!(to!(long)(_))(string.toLower())));\n\
    }", "{\n    return string.toLower().toHashSet().length;\n}", "{\n    return to!(long)(std.algorithm.uniq(string.toLower()).length);\n\
    }", "{\n    return set(string.toLower).length;\n}", "{\n    return string.toLower().toHashSet().length;\n\
    }", "{\n    auto result = new HashSet!char();\n    foreach(char c; string)\n \
    \   {\n        result.insert(c);\n    }\n    return result.length;\n}", "{\n \
    \   return to!string(string.toLower()).length;\n}", "{\n    return set(string.toLower).length;\n\
    }", "{\n    return string.toLower().toHashSet().length;\n}", "{\n    return set(string.toLower).length;\n\
    }", "{\n    return to!(long)(std.algorithm.uniq(string.toLower()).length);\n}",
  "{\n    return set(string.toLowerCase).length;\n}", "{\n    return to!string(string.toLower()).length;\n\
    }", "{\n    return string.toLower().toHashSet().length;\n}", "{\n    return set(string.toLower()).length;\n\
    }", "{\n    return to!string(string.toLower()).unique.length;\n}", "{\n    return\
    \ to!string(string.toLower()).unique.length;\n}", "{\n    return std.algorithm.uniq(string.toLower).length;\n\
    }", "{\n    return to!string(string.toLower()).length;\n}", "{\n    return string.toLower().toHashSet().length;\n\
    }", "{\n    return string.toLower().toHashSet().length;\n}", "{\n    return string.toLower().toHashSet().length;\n\
    }", "{\n    return to!string(string.toLower()).length;\n}", "{\n    return set(string.toLower).length;\n\
    }", "{\n    long count = 0;\n    foreach(char c; string) \n    {\n        if(c.isAlpha)\
    \ \n        {\n            count++;\n        }\n    }\n    return count;\n}",
  "{\n    long count = 0;\n    foreach(char c; string)\n    {\n        if(c.tolower()\
    \ in count)\n            continue;\n        count++;\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(char c; string)\n    {\n        if(c.isLetter)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    return to!string(string.toLower()).unique.length;\n}", "{\n    long count\
    \ = 0;\n    foreach(char c; string)\n    {\n        if(c.isAlpha)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char c; string)\n    {\n        if(c.isAlpha)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n\
    \ Given a string, find out how many distinct characters (regardless of case) does\
    \ it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>>\
    \ count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c; string)\n    {\n     \
    \   if(c.isAlpha)\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong\
    \ count_distinct_characters(string string) \n{\n    long count = 0;\n    foreach(char\
    \ c; string)\n    {\n        if(c.isAlpha)\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
    xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n\
    */\nlong count_distinct_characters(", "{\n    long count = 0;\n    foreach(char\
    \ c; string)\n    {\n        if(c.isLetter)\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    return string.toLower().toSet().length;\n\
    }", "{\n    return string.toLower().unique.length;\n}", "{\n    return to!string(string.toLower()).length;\n\
    }", "{\n    return to!(long)(map!(toLower)(string).distinct.length);\n}", "{\n\
    \    return set(string.toLowerCase).length;\n}", "{\n    return set(string.toLower()).length;\n\
    }", "{\n    return string.toLower().toHashSet().length;\n}", "{\n    auto result\
    \ = new HashSet!char();\n    foreach(c; string)\n    {\n        result.insert(c);\n\
    \    }\n    return result.length;\n}", "{\n    return string.toLower().length;\n\
    }", "{\n    long count = 0;\n    foreach(char c; string)\n    {\n        if(c.isAlpha)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    return string.toLower().toHashSet().length;\n}", "{\n    return to!long(set(string.toLower()).length);\n\
    }", "{\n    return string.toLower().length;\n}", "{\n    return to!string(string.toLower()).length;\n\
    }", "{\n    auto char_set = set!char();\n    foreach(c; string)\n    {\n     \
    \   char_set.insert(toLower(c));\n    }\n    return char_set.length;\n}", "{\n\
    \    return to!(long)(uniq(string.toLower()));\n}", "{\n    long count = 0;\n\
    \    foreach(char c; string)\n    {\n        if(c.tolower() in count)\n      \
    \      continue;\n        count++;\n    }\n    return count;\n}", "{\n    return\
    \ std.algorithm.uniq(string.toLower()).length;\n}", "{\n    return to!(long)(uniq(string.toLower()));\n\
    }", "{\n    return string.toLower().toHashSet().length;\n}", "{\n    return string.toLower().unique.length;\n\
    }", "{\n    long count = 0;\n    foreach(char c; string)\n    {\n        if(c.isLetter)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    return string.toLower().toHashSet().length;\n}", "{\n    return to!(long)(uniq(string.toLower()));\n\
    }", "{\n    long result = 0;\n    foreach(char c; string)\n    {\n        result\
    \ += !(c in string[0..$-1]);\n    }\n    return result;\n}", "{\n    return to!(long)(std.algorithm.uniq(string.toLower()).length);\n\
    }", "{\n    return set(string.toLowerCase).length;\n}", "{\n    return string.toLower().toHashSet().length;\n\
    }", "{\n    return to!(long)(set(string.toLower()).length);\n}", "{\n    //return\
    \ string.length;\n    //return string.length - string.count(\" \");\n    //return\
    \ string.length - string.count(\" \") - string.count(\".\");\n    //return string.length\
    \ - string.count(\" \") - string.count(\".\") - string.count(\"!\");\n    //return\
    \ string.length - string.count(\" \") - string.count(\".\") - string.count(\"\
    !\") - string.count(\"?\");\n    //return string.length - string.count(\" \")\
    \ - string.count(\".\") - string.count(\"!\") - string.count(\"?\") - string.count(\"\
    '\");\n    //return string.length - string.count(\" \") - string.count(\".\")\
    \ - string.count(\"!\") - string.count(\"?\") - string.count(\"'\") - string.count(\"\
    ,\");\n    //return string.length - string.count(\" \") - string.count(\".\")\
    \ - string.count(\"!\") - string.count(\"?\") - string.count(\"'\") - string.count(\"\
    ,\") - string.count(\"-\");\n    //return string.length - string.count(\" \")\
    \ - string.count(\".\") - string.count(\"!\") - string.count(\"?\") - string.count(\"\
    '\") - string.count(\",\") - string.count(\"-\") - string.count(\";\");\n    //return\
    \ string.length - string.count(\" \") - string.count(\".\") - string.count(\"\
    !\") - string.count(\"?\") - string.count(\"'\") - string.count(\",\") - string.count(\"\
    -\") - string.count(\";\") - string.count(\":\");\n    //return string.length\
    \ - string.count(\" \") - string.count(\".\") - string.count(\"!\") - string.count(\"\
    ?\") - string.count(\"'\") - string.count(\",\") - string.count(\"-\") - string.count(\"\
    ;\") - string.count(\":\") - string.count(\"_\");\n    //return string.length\
    \ - string.count(\" \") - string.count(\".\") - string.count(\"!\") - string.count(\"\
    ?\") - string.count(\"'\") - string.count(\",\") - string.count(\"-\")", "{\n\
    \    return set(string.toLowerCase).length;\n}", "{\n    return to!string(string.toLower()).length;\n\
    }", "{\n    long result = 0;\n    foreach(char c; string)\n    {\n        if (c\
    \ >= 'a' && c <= 'z')\n        {\n            result++;\n        }\n        else\
    \ if (c >= 'A' && c <= 'Z')\n        {\n            result++;\n        }\n   \
    \ }\n    return result;\n}", "{\n    return std.algorithm.uniq(string.toLower()).length;\n\
    }", "{\n    return set(string.toLower()).length;\n}", "{\n    long count = 0;\n\
    \    foreach(char c; string)\n    {\n        if(c.tolower() in string)\n     \
    \   {\n            count++;\n        }\n    }\n    return count;\n}", "{\n   \
    \ auto result = set!(char)();\n    foreach(c; string)\n    {\n        result.insert(toLower(c));\n\
    \    }\n    return result.length;\n}", "{\n    return string.toLower().toHashSet().length;\n\
    }", "{\n    return string.toLower().length;\n}", "{\n    return string.toLower().toHashSet().length;\n\
    }", "{\n    return to!string(string.toLower()).length;\n}", "{\n    long count\
    \ = 0;\n    foreach(char c; string)\n    {\n        if(c.isLetter)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}", "{\n    return\
    \ std.algorithm.uniq(string.toLower()).length;\n}", "{\n    return string.toLower().length;\n\
    }", "{\n    return string.toLower().toHashSet().length;\n}", "{\n    return string.toLower().toHashSet().length;\n\
    }", "{\n    long count = 0;\n    foreach(char c; string)\n    {\n        if(c\
    \ >= 'a' && c <= 'z')\n        {\n            count++;\n        }\n        else\
    \ if(c >= 'A' && c <= 'Z')\n        {\n            count++;\n        }\n    }\n\
    \    return count;\n}", "{\n    auto distinct_chars = new HashSet!char;\n    foreach(char\
    \ c; string)\n    {\n        distinct_chars.insert(c);\n    }\n    return distinct_chars.length;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n\
    \    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters2(string\
    \ string) \n{\n    auto distinct_chars = new HashSet!char;\n    foreach(char c;\
    \ string)\n    {\n        distinct_chars.insert(c);\n    }\n    return distinct_chars.length;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n\
    \    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters3(string\
    \ string) \n{\n    auto distinct_chars = new HashSet!char;\n    foreach(char c;\
    \ string)\n    {\n        distinct_chars.insert(c);\n    }\n    return distinct_chars.length;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n\
    \    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters4(string\
    \ string) \n{\n    auto distinct_chars = new HashSet!char;\n    foreach(char c;\
    \ string)\n    {\n        distinct_chars.insert(c);\n    }\n    return distinct_chars.length;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n\
    \    >>> count_distinct_characters(\"Jerry", "{\n    return string.toLower().unique.length;\n\
    }", "{\n    long count = 0;\n    foreach(char c; string)\n    {\n        if(c.tolower()\
    \ in count)\n            continue;\n        count++;\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(char c; string)\n    {\n        if(c.isLetter)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    auto set = new Set!(char)();\n    foreach(char c; string)\n    {\n      \
    \  set.insert(c);\n    }\n    return set.length;\n}", "{\n    return to!string(string.toLower()).length;\n\
    }", "{\n    return to!(long)(set(string.toLowerCase));\n}", "{\n    return set(string.toLower()).length;\n\
    }", "{\n    long count = 0;\n    foreach(char c; string)\n    {\n        if(c.isAlpha)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    foreach(char c; string)\n    {\n        if(c >= 'a'\
    \ && c <= 'z')\n        {\n            count++;\n        }\n        else if(c\
    \ >= 'A' && c <= 'Z')\n        {\n            count++;\n        }\n    }\n   \
    \ return count;\n}", "{\n    return set(string.toLowerCase).length;\n}", "{\n\
    \    long count = 0;\n    foreach(char c; string)\n    {\n        if(c.tolower()\
    \ in count)\n            continue;\n        count++;\n    }\n    return count;\n\
    }", "{\n    return string.toLower().toHashSet().length;\n}", "{\n    return to!string(string.toLowerCase).length;\n\
    }", "{\n    return to!string(string.toLower()).length;\n}", "{\n    return string.toLower().toHashSet().length;\n\
    }", "{\n    return set(string.toLower()).length;\n}", "{\n    return string.toLower().toHashSet().length;\n\
    }", "{\n    return set(string.toLower()).length;\n}", "{\n    return to!(long)(std.algorithm.uniq(string.toLower()).length);\n\
    }", "{\n    return string.toLower().toHashSet().length;\n}", "{\n    return string.toLower().toHashSet().length;\n\
    }", "{\n    return set(string.toLower).length;\n}", "{\n    return to!string(string.toUpper()).unique().length;\n\
    }", "{\n    return string.toLower().toHashSet().length;\n}", "{\n    return set(string.toLower).length;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n\
    \    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    return set(string.toLower).length;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return set(string.toLower).length;\n}\n/*\n Given a string, find out how\
    \ many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
    xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n\
    */\nlong count_distinct_characters(string string) \n{\n    return set(string.toLower).length;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n\
    \    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    return set(string.toLower).length;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    return set(string.toLower).length;\n}\n/*\n Given a string, find out how\
    \ many distinct characters (regardless of case) does it consist of\n    >>>",
  "{\n    return string.toLower().toHashSet().length;\n}", "{\n    return set(string.toLower).length;\n\
    }", "{\n    return string.toLower().distinct.length;\n}", "{\n    return string.toLower().toHashSet().length;\n\
    }", "{\n    long count = 0;\n    foreach(char c; string)\n    {\n        if(c.isLetter)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    return string.toLower().toHashSet().length;\n}", "{\n    long count = 0;\n\
    \    foreach(char c; string) \n    {\n        if(c.isAlpha) \n        {\n    \
    \        count++;\n        }\n    }\n    return count;\n}", "{\n    return to!(long)(uniq(string.toLower()));\n\
    }", "{\n    return set(string.toLower).length;\n}", "{\n    return set(string.toLowerCase).length;\n\
    }", "{\n    long count = 0;\n    foreach(char c; string)\n    {\n        if(c.isLetter)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    return to!string(string.toLower()).length;\n}", "{\n    return to!string(string.toLower()).length;\n\
    }", "{\n    auto result = new HashSet!char();\n    foreach(c; string)\n    {\n\
    \        result.insert(c);\n    }\n    return result.length;\n}", "{\n    return\
    \ set!(char)(string).length;\n}", "{\n    auto result = new HashSet!char;\n  \
    \  foreach(char c; string)\n    {\n        result.insert(toLower(c));\n    }\n\
    \    return result.length;\n}", "{\n    long count = 0;\n    foreach(char c; string)\n\
    \    {\n        if(c != ' ')\n        {\n            count++;\n        }\n   \
    \ }\n    return count;\n}", "{\n    auto set = new Set!char;\n    foreach(char\
    \ c; string)\n    {\n        set.insert(c);\n    }\n    return set.length;\n}",
  "{\n    //TODO\n    return 0;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
    xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n\
    */\nlong count_distinct_characters(string string) \n{\n    //TODO\n    return\
    \ 0;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong\
    \ count_distinct_characters(string string) \n{\n    //TODO\n    return 0;\n}\n\
    /*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n\
    \    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    //TODO\n    return 0;\n}\n/*\n Given a string, find out how\
    \ many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
    xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n\
    */\nlong count_distinct_characters(string string) \n{\n    //TODO\n    return\
    \ 0;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong\
    \ count_distinct_characters(string string) \n{\n    //TODO\n    return 0;\n}\n\
    /*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n    >>> count_distinct_char", "{\n    return string.toLower().toSet().length;\n\
    }", "{\n    auto result = new HashSet!char();\n    foreach(c; string)\n    {\n\
    \        result.insert(c);\n    }\n    return result.length;\n}", "{\n    return\
    \ string.toUpper().toHashSet().length;\n}", "{\n    return to!(long)(string.toUpper().unique.length);\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n\
    \    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters_2(string\
    \ string) \n{\n    return to!(long)(string.toUpper().unique.length);\n}\n/*\n\
    \ Given a string, find out how many distinct characters (regardless of case) does\
    \ it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>>\
    \ count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters_3(string\
    \ string) \n{\n    return to!(long)(string.toUpper().unique.length);\n}\n/*\n\
    \ Given a string, find out how many distinct characters (regardless of case) does\
    \ it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>>\
    \ count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters_4(string\
    \ string) \n{\n    return to!(long)(string.toUpper().unique.length);\n}\n/*\n\
    \ Given a string, find out how many distinct characters (regardless of case) does\
    \ it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>>\
    \ count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters_5(string\
    \ string) \n{\n    return to!(long)(string.toUpper().unique.length);\n}\n/*\n\
    \ Given a string, find out how many distinct characters (regardless of case) does\
    \ it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>>\
    \ count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters_6(string\
    \ string) \n{", "{\n    long count = 0;\n    foreach(char c; string)\n    {\n\
    \        if(c.isUpper)\n        {\n            c = toLower(c);\n        }\n  \
    \      if(!c.isAlpha)\n        {\n            continue;\n        }\n        if(!count)\n\
    \        {\n            count++;\n        }\n        else\n        {\n       \
    \     bool found = false;\n            foreach(char c2; string[0..$-1])\n    \
    \        {\n                if(c2.isUpper)\n                {\n              \
    \      c2 = toLower(c2);\n                }\n                if(c == c2)\n   \
    \             {\n                    found = true;\n                    break;\n\
    \                }\n            }\n            if(!found)\n            {\n   \
    \             count++;\n            }\n        }\n    }\n    return count;\n}",
  "{\n    return to!string(string.toLower).unique.length;\n}", "{\n    return string.toLower().distinct.length;\n\
    }", "{\n    return string.toLower().chars.sort.uniq.length;\n}", "{\n    return\
    \ to!string(string.toLower()).length;\n}", "{\n    return string.toLower().toHashSet().length;\n\
    }", "{\n    auto result = new HashSet!(char)();\n    foreach(char c; string)\n\
    \    {\n        result.insert(c);\n    }\n    return result.length;\n}", "{\n\
    \    return to!string(string.toLower()).unique.length;\n}", "{\n    long count\
    \ = 0;\n    foreach(char c; string)\n    {\n        if(c.isAlpha)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}", "{\n    return\
    \ to!string(string.toLower()).length;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
