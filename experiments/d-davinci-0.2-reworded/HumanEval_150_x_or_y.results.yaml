name: HumanEval_150_x_or_y
language: d
results:
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n == 2L) \n    {\n        return x;\n    }\n    if (n %\
    \ 2L == 0L) \n    {\n        return y;\n    }\n    long i = 3L;\n    while (i\
    \ <= sqrt(n)) \n    {\n        if (n % i == 0L) \n        {\n            return\
    \ y;\n        }\n        i += 2L;\n    }\n    return x;\n}\nunittest\n{\n    alias\
    \ candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L,\
    \ 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpiaij3wsa.d(26): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpiaij3wsa.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n == 2L) {\n        return x;\n    }\n    if (n % 2L ==\
    \ 0L) {\n        return y;\n    }\n    long i = 3L;\n    while (i * i <= n) {\n\
    \        if (n % i == 0L) {\n            return y;\n        }\n        i += 2L;\n\
    \    }\n    return x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L,\
    \ 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L,\
    \ 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8qs4297p.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ebd]\\n??:? void tmp8qs4297p.__unittest_L32_C1()\
    \ [0x427c06]\\n??:? void tmp8qs4297p.__modtest() [0x427c40]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bbe3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa76]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc09]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300b8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb95]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa4d]\\n??:? runModuleUnitTests [0x42b9b9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42830c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428293]\\n??:? _d_run_main [0x4281fe]\\n??:? main [0x427c53]\\\
    n??:? __libc_start_main [0xc6e50554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L) \n    {\n        return y;\n    }\n    else \n\
    \    {\n        long i = 2L;\n        while (i <= (n - 1L)) \n        {\n    \
    \        if ((n % i) == 0L) \n            {\n                return y;\n     \
    \       }\n            i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n\
    {\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    long i;\n    long j;\n    long k;\n    long l;\n    long m;\n\
    \    long o;\n    long p;\n    long q;\n    long r;\n    long s;\n    long t;\n\
    \    long u;\n    long v;\n    long w;\n    long z;\n    long aa;\n    long ab;\n\
    \    long ac;\n    long ad;\n    long ae;\n    long af;\n    long ag;\n    long\
    \ ah;\n    long ai;\n    long aj;\n    long ak;\n    long al;\n    long am;\n\
    \    long an;\n    long ao;\n    long ap;\n    long aq;\n    long ar;\n    long\
    \ as;\n    long at;\n    long au;\n    long av;\n    long aw;\n    long ax;\n\
    \    long ay;\n    long az;\n    long ba;\n    long bb;\n    long bc;\n    long\
    \ bd;\n    long be;\n    long bf;\n    long bg;\n    long bh;\n    long bi;\n\
    \    long bj;\n    long bk;\n    long bl;\n    long bm;\n    long bn;\n    long\
    \ bo;\n    long bp;\n    long bq;\n    long br;\n    long bs;\n    long bt;\n\
    \    long bu;\n    long bv;\n    long bw;\n    long bx;\n    long by;\n    long\
    \ bz;\n    long ca;\n    long cb;\n    long cc;\n    long cd;\n    long ce;\n\
    \    long cf;\n    long cg;\n    long ch;\n    long ci;\n    long cj;\n    long\
    \ ck;\n    long cl;\n    long cm;\n    long cn;\n    long co;\n    long cp;\n\
    \    long cq;\n    long cr;\n    long cs;\n    long ct;\n    long cu;\n    long\
    \ cv;\n    long cw;\n    long cx;\n    long cy;\n    long cz;\n    long da;\n\
    \    long db;\n   \nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L,\
    \ 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L,\
    \ 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp478jkxr2.d(113): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp478jkxr2.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n == 1)\n        return y;\n    else if (n == 2)\n    \
    \    return x;\n    else if (n % 2 == 0)\n        return y;\n    else\n    {\n\
    \        long i = 3;\n        while (i <= sqrt(n))\n        {\n            if\
    \ (n % i == 0)\n                return y;\n            i += 2;\n        }\n  \
    \      return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n   \
    \ assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) ==\
    \ 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxmhdqyy0.d(26): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpxmhdqyy0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (isPrime(n))\n    {\n        return x;\n    }\n    else\n\
    \    {\n        return y;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\
    \n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L)\
    \ == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp00rl2n9y.d(17): Error: undefined identifier `isPrime`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp00rl2n9y.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if(n == 1L)\n    {\n        return y;\n    }\n    else\n  \
    \  {\n        long i = 2L;\n        while(i < n)\n        {\n            if(n\
    \ % i == 0L)\n            {\n                return y;\n            }\n      \
    \      i = i + 1L;\n        }\n        return x;\n    }\n}\n/*\nA simple program\
    \ which should return the value of x if n is \n    a prime number and should return\
    \ the value of y otherwise.\nunittest\n{\n    alias candidate = x_or_y;\n\n  \
    \  assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L)\
    \ == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4nviwpc8.d(35): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4nviwpc8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n == 2L) \n    {\n        return x;\n    }\n    if (n <\
    \ 2L) \n    {\n        return y;\n    }\n    if (n % 2L == 0L) \n    {\n     \
    \   return y;\n    }\n    long i = 3L;\n    while (i <= sqrt(n)) \n    {\n   \
    \     if (n % i == 0L) \n        {\n            return y;\n        }\n       \
    \ i += 2L;\n    }\n    return x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\
    \n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L)\
    \ == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcgld0x27.d(30): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpcgld0x27.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if(isPrime(n))\n        return x;\n    else\n        return\
    \ y;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L,\
    \ 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L,\
    \ 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuw1mcj7e.d(17): Error: undefined identifier `isPrime`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuw1mcj7e.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (isPrime(n))\n        return x;\n    else\n        return\
    \ y;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L,\
    \ 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L,\
    \ 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbdggymz_.d(17): Error: undefined identifier `isPrime`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbdggymz_.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n == 2L) \n    {\n        return x;\n    }\n    if (n %\
    \ 2L == 0L) \n    {\n        return y;\n    }\n    long i = 3L;\n    while (i\
    \ <= sqrt(n)) \n    {\n        if (n % i == 0L) \n        {\n            return\
    \ y;\n        }\n        i += 2L;\n    }\n    return x;\n}\nunittest\n{\n    alias\
    \ candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L,\
    \ 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvtpq9_wd.d(26): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpvtpq9_wd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L) \n    {\n        return y;\n    }\n    else \n\
    \    {\n        long i = 2L;\n        while (i < n) \n        {\n            if\
    \ (n % i == 0L) \n            {\n                return y;\n            }\n  \
    \          i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n\
    \    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L)\n    {\n        return y;\n    }\n    else\n \
    \   {\n        long i = 2L;\n        while (i <= n / 2L)\n        {\n        \
    \    if (n % i == 0L)\n            {\n                return y;\n            }\n\
    \            i += 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n \
    \   alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n == 2L) \n    {\n        return x;\n    }\n    if (n %\
    \ 2L == 0L) \n    {\n        return y;\n    }\n    long i = 3L;\n    while (i\
    \ <= sqrt(n)) \n    {\n        if (n % i == 0L) \n        {\n            return\
    \ y;\n        }\n        i += 2L;\n    }\n    return x;\n}\nunittest\n{\n    alias\
    \ candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L,\
    \ 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9gvutb7v.d(26): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp9gvutb7v.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n == 2L)\n    {\n        return x;\n    }\n    else if\
    \ (n == 3L)\n    {\n        return x;\n    }\n    else if (n == 5L)\n    {\n \
    \       return x;\n    }\n    else if (n == 7L)\n    {\n        return x;\n  \
    \  }\n    else if (n == 11L)\n    {\n        return x;\n    }\n    else if (n\
    \ == 13L)\n    {\n        return x;\n    }\n    else if (n == 17L)\n    {\n  \
    \      return x;\n    }\n    else if (n == 19L)\n    {\n        return x;\n  \
    \  }\n    else if (n == 23L)\n    {\n        return x;\n    }\n    else if (n\
    \ == 29L)\n    {\n        return x;\n    }\n    else if (n == 31L)\n    {\n  \
    \      return x;\n    }\n    else if (n == 37L)\n    {\n        return x;\n  \
    \  }\n    else if (n == 41L)\n    {\n        return x;\n    }\n    else if (n\
    \ == 43L)\n    {\n        return x;\n    }\n    else if (n == 47L)\n    {\n  \
    \      return x;\n    }\n    else if (n == 53L)\n    {\n        return x;\n  \
    \  }\n    else if (n == 59L)\n    {\n        return x;\n    }\n    else if (n\
    \ == 61L)\n    {\n        return x;\n    }\n    else if (n == 67L)\n    {\n  \
    \      return x;\n    }\n    else if (n == 71L)\n    {\n        return x;\n  \
    \  }\n    else if (n == 73L)\n    {\n        return x;\n    }\n    else if (n\
    \ == 79L)\n    {\n        return x;\n    }\n    else if (n == 83L)\n    {\n  \
    \      return x;\n    }\n    else if (n == 89L)\n    {\n        return x;\n  \
    \  }\n    else if (n ==\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L,\
    \ 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L,\
    \ 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf71k4we2.d(114): Error: expression expected, not `unittest`\\\
    n/tmp/tmpf71k4we2.d(115): Error: found `{` when expecting `)`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf71k4we2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n < 2L)\n    {\n        return y;\n    }\n    else if (n\
    \ == 2L)\n    {\n        return x;\n    }\n    else\n    {\n        long i = 2L;\n\
    \        while (i < n)\n        {\n            if (n % i == 0L)\n            {\n\
    \                return y;\n            }\n            i = i + 1L;\n        }\n\
    \        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n \
    \   assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L)\
    \ == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n == 1) \n    {\n        return y;\n    }\n    else if\
    \ (n == 2) \n    {\n        return x;\n    }\n    else \n    {\n        long i\
    \ = 2;\n        while (i <= n / 2) \n        {\n            if (n % i == 0) \n\
    \            {\n                return y;\n            }\n            i = i +\
    \ 1;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L,\
    \ 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n < 2L)\n    {\n        return y;\n    }\n    else\n  \
    \  {\n        long i = 2L;\n        while (i < n)\n        {\n            if (n\
    \ % i == 0L)\n            {\n                return y;\n            }\n      \
    \      i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L,\
    \ 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n == 2L) \n    {\n        return x;\n    }\n    if (n %\
    \ 2L == 0L) \n    {\n        return y;\n    }\n    long i = 3L;\n    while (i\
    \ <= sqrt(n)) \n    {\n        if (n % i == 0L) \n        {\n            return\
    \ y;\n        }\n        i += 2L;\n    }\n    return x;\n}\nunittest\n{\n    alias\
    \ candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L,\
    \ 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpldd0nayn.d(26): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpldd0nayn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L) \n    {\n        return y;\n    }\n    else if\
    \ (n == 2L) \n    {\n        return x;\n    }\n    else \n    {\n        long\
    \ i = 2L;\n        while (i < n) \n        {\n            if (n % i == 0L) \n\
    \            {\n                return y;\n            }\n            i = i +\
    \ 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L,\
    \ 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n == 2)\n        return x;\n    if (n % 2 == 0)\n     \
    \   return y;\n    for (long i = 3; i < n; i += 2)\n    {\n        if (n % i ==\
    \ 0)\n            return y;\n    }\n    return x;\n}\nunittest\n{\n    alias candidate\
    \ = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L,\
    \ 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpk69_mhk7.d(40): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ebd]\\n??:? void tmpk69_mhk7.__unittest_L28_C1()\
    \ [0x427c02]\\n??:? void tmpk69_mhk7.__modtest() [0x427c3c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bbe3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa76]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc09]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300b8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb95]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa4d]\\n??:? runModuleUnitTests [0x42b9b9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42830c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428293]\\n??:? _d_run_main [0x4281fe]\\n??:? main [0x427c4f]\\\
    n??:? __libc_start_main [0x3e0cf554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n == 2L) \n    {\n        return x;\n    }\n    else \n\
    \    {\n        if (n % 2L == 0L) \n        {\n            return y;\n       \
    \ }\n        else \n        {\n            long i = 3L;\n            while (i\
    \ <= sqrt(n)) \n            {\n                if (n % i == 0L) \n           \
    \     {\n                    return y;\n                }\n                i =\
    \ i + 2L;\n            }\n            return x;\n        }\n    }\n}\nunittest\n\
    {\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3bp9wov_.d(30): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp3bp9wov_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (isPrime(n))\n        return x;\n    else\n        return\
    \ y;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L,\
    \ 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L,\
    \ 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdhk42mvz.d(17): Error: undefined identifier `isPrime`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdhk42mvz.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L)\n    {\n        return y;\n    }\n    else\n \
    \   {\n        long i = 2L;\n        while (i <= n / 2L)\n        {\n        \
    \    if (n % i == 0L)\n            {\n                return y;\n            }\n\
    \            i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n\
    \    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L) \n    {\n        return y;\n    }\n    else \n\
    \    {\n        long i = 2L;\n        while (i < n) \n        {\n            if\
    \ (n % i == 0L) \n            {\n                return y;\n            }\n  \
    \          i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n\
    \    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    return isPrime(n) ? x : y;\n}\nunittest\n{\n    alias candidate\
    \ = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L,\
    \ 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcyxl4qa6.d(17): Error: undefined identifier `isPrime`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcyxl4qa6.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n == 2L) \n    {\n        return x;\n    }\n    else if\
    \ (n == 1L) \n    {\n        return y;\n    }\n    else if (n % 2L == 0L) \n \
    \   {\n        return y;\n    }\n    else \n    {\n        long i = 3L;\n    \
    \    while (i <= sqrt(n)) \n        {\n            if (n % i == 0L) \n       \
    \     {\n                return y;\n            }\n            i += 2L;\n    \
    \    }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\
    \n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L)\
    \ == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt8x84fju.d(32): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpt8x84fju.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (isPrime(n)) \n    {\n        return x;\n    }\n    else\
    \ \n    {\n        return y;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\
    \n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L)\
    \ == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo_wyj8ww.d(17): Error: undefined identifier `isPrime`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo_wyj8ww.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n == 2L) \n    {\n        return x;\n    }\n    else if\
    \ (n == 3L) \n    {\n        return x;\n    }\n    else if (n == 5L) \n    {\n\
    \        return x;\n    }\n    else if (n == 7L) \n    {\n        return x;\n\
    \    }\n    else if (n == 11L) \n    {\n        return x;\n    }\n    else if\
    \ (n == 13L) \n    {\n        return x;\n    }\n    else if (n == 17L) \n    {\n\
    \        return x;\n    }\n    else if (n == 19L) \n    {\n        return x;\n\
    \    }\n    else if (n == 23L) \n    {\n        return x;\n    }\n    else if\
    \ (n == 29L) \n    {\n        return x;\n    }\n    else if (n == 31L) \n    {\n\
    \        return x;\n    }\n    else if (n == 37L) \n    {\n        return x;\n\
    \    }\n    else if (n == 41L) \n    {\n        return x;\n    }\n    else if\
    \ (n == 43L) \n    {\n        return x;\n    }\n    else if (n == 47L) \n    {\n\
    \        return x;\n    }\n    else if (n == 53L) \n    {\n        return x;\n\
    \    }\n    else if (n == 59L) \n    {\n        return x;\n    }\n    else if\
    \ (n == 61L) \n    {\n        return x;\n    }\n    else if (n == 67L) \n    {\n\
    \        return x;\n    }\n    else if (n == 71L) \n    {\n        return x;\n\
    \    }\n    else if (n == 73L) \n    {\n        return x;\n    }\n    else if\
    \ (n == 79L) \n    {\n        return x;\n    }\n    else if (n == 83L) \n    {\n\
    \        return x;\n    }\n    else if (\nunittest\n{\n    alias candidate = x_or_y;\n\
    \n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L)\
    \ == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp14bpxffz.d(110): Error: expression expected, not `unittest`\\\
    n/tmp/tmp14bpxffz.d(111): Error: found `{` when expecting `)`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp14bpxffz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L) \n    {\n        return y;\n    }\n    else \n\
    \    {\n        long i = 2L;\n        while (i < n) \n        {\n            if\
    \ (n % i == 0L) \n            {\n                return y;\n            }\n  \
    \          i = i + 1L;\n        }\n        return x;\n    }\n}\n/*\nA simple program\
    \ which should return the value of x if n is \n    a prime number and should return\
    \ the value of y otherwise.\nunittest\n{\n    alias candidate = x_or_y;\n\n  \
    \  assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L)\
    \ == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsbwl3u65.d(35): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsbwl3u65.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L) {\n        return y;\n    }\n    else {\n    \
    \    long i = 2L;\n        while (i < n) {\n            if (n % i == 0L) {\n \
    \               return y;\n            }\n            i = i + 1L;\n        }\n\
    \        return x;\n    }\n}\n/*\nA simple program which should return the value\
    \ of x if n is \n    a prime number and should return the value of y otherwise.\n\
    unittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L)\
    \ == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L,\
    \ 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzgiixf_z.d(31): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzgiixf_z.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (isPrime(n))\n        return x;\n    else\n        return\
    \ y;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L,\
    \ 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L,\
    \ 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1f1aweyf.d(17): Error: undefined identifier `isPrime`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1f1aweyf.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n < 2)\n        return y;\n    if (n == 2)\n        return\
    \ x;\n    if (n % 2 == 0)\n        return y;\n    long m = cast(long)sqrt(n);\n\
    \    for (long i = 3; i <= m; i += 2)\n        if (n % i == 0)\n            return\
    \ y;\n    return x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L,\
    \ 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L,\
    \ 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcda2i4z1.d(23): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpcda2i4z1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n == 1L)\n        return y;\n    else if (n == 2L)\n  \
    \      return x;\n    else if (n % 2L == 0L)\n        return y;\n    else\n  \
    \  {\n        long i = 3L;\n        while (i <= sqrt(n))\n        {\n        \
    \    if (n % i == 0L)\n                return y;\n            i += 2L;\n     \
    \   }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\
    \n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L)\
    \ == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7vehi2w6.d(26): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp7vehi2w6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n == 2L) \n    {\n        return x;\n    }\n    if (n %\
    \ 2L == 0L) \n    {\n        return y;\n    }\n    long i = 3L;\n    while (i\
    \ <= sqrt(n)) \n    {\n        if (n % i == 0L) \n        {\n            return\
    \ y;\n        }\n        i += 2L;\n    }\n    return x;\n}\nunittest\n{\n    alias\
    \ candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L,\
    \ 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphau95v0n.d(26): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmphau95v0n.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (isPrime(n))\n        return x;\n    else\n        return\
    \ y;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L,\
    \ 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L,\
    \ 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpunynkk7l.d(17): Error: undefined identifier `isPrime`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpunynkk7l.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L)\n    {\n        return y;\n    }\n    else\n \
    \   {\n        if (n == 2L)\n        {\n            return x;\n        }\n   \
    \     else\n        {\n            if (n % 2L == 0L)\n            {\n        \
    \        return y;\n            }\n            else\n            {\n         \
    \       long i = 3L;\n                while (i <= sqrt(n))\n                {\n\
    \                    if (n % i == 0L)\n                    {\n               \
    \         return y;\n                    }\n                    i += 2L;\n   \
    \             }\n                return x;\n            }\n        }\n    }\n\
    }\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L,\
    \ 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L,\
    \ 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprc5jz42z.d(36): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmprc5jz42z.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L) \n    {\n        return y;\n    }\n    else \n\
    \    {\n        long i = 2L;\n        while (i < n) \n        {\n            if\
    \ (n % i == 0L) \n            {\n                return y;\n            }\n  \
    \          i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n\
    \    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n == 2L)\n    {\n        return x;\n    }\n    if (n %\
    \ 2L == 0L)\n    {\n        return y;\n    }\n    long i = 3L;\n    while (i <=\
    \ sqrt(n))\n    {\n        if (n % i == 0L)\n        {\n            return y;\n\
    \        }\n        i += 2L;\n    }\n    return x;\n}\nunittest\n{\n    alias\
    \ candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L,\
    \ 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmcmsc4kh.d(26): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpmcmsc4kh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n == 2L) \n    {\n        return x;\n    }\n    else \n\
    \    {\n        if (n % 2L == 0L) \n        {\n            return y;\n       \
    \ }\n        else \n        {\n            long i = 3L;\n            while (i\
    \ <= sqrt(n)) \n            {\n                if (n % i == 0L) \n           \
    \     {\n                    return y;\n                }\n                i =\
    \ i + 2L;\n            }\n            return x;\n        }\n    }\n}\nunittest\n\
    {\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp12y6r2so.d(30): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp12y6r2so.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n < 2) \n    {\n        return y;\n    }\n    else \n \
    \   {\n        long i = 2;\n        while (i < n) \n        {\n            if\
    \ (n % i == 0) \n            {\n                return y;\n            }\n   \
    \         i = i + 1;\n        }\n        return x;\n    }\n}\nunittest\n{\n  \
    \  alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    return isPrime(n) ? x : y;\n}\nunittest\n{\n    alias candidate\
    \ = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L,\
    \ 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplarj8wld.d(17): Error: undefined identifier `isPrime`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplarj8wld.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n < 2)\n        return y;\n    else if (n == 2)\n     \
    \   return x;\n    else if (n % 2 == 0)\n        return y;\n    else\n    {\n\
    \        long i;\n        for (i = 3; i < n; i += 2)\n        {\n            if\
    \ (n % i == 0)\n                return y;\n        }\n        return x;\n    }\n\
    }\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L,\
    \ 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L,\
    \ 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n == 2L)\n    {\n        return x;\n    }\n    else if\
    \ (n % 2L == 0L)\n    {\n        return y;\n    }\n    else\n    {\n        long\
    \ i = 3L;\n        while (i <= sqrt(n))\n        {\n            if (n % i == 0L)\n\
    \            {\n                return y;\n            }\n            i += 2L;\n\
    \        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\
    \n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L)\
    \ == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzosvqzeh.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpzosvqzeh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n == 2L)\n    {\n        return x;\n    }\n    else if\
    \ (n % 2L == 0L)\n    {\n        return y;\n    }\n    else\n    {\n        long\
    \ i = 3L;\n        while (i <= sqrt(n))\n        {\n            if (n % i == 0L)\n\
    \            {\n                return y;\n            }\n            i += 2L;\n\
    \        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\
    \n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L)\
    \ == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6xpvevfi.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp6xpvevfi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    return isPrime(n) ? x : y;\n}\nunittest\n{\n    alias candidate\
    \ = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L,\
    \ 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph2zthv2u.d(17): Error: undefined identifier `isPrime`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph2zthv2u.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n == 2L)\n    {\n        return x;\n    }\n    else if\
    \ (n % 2L == 0L)\n    {\n        return y;\n    }\n    else\n    {\n        long\
    \ i = 3L;\n        while (i * i <= n)\n        {\n            if (n % i == 0L)\n\
    \            {\n                return y;\n            }\n            i += 2L;\n\
    \        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\
    \n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L)\
    \ == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpsi6kp36b.d(51): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ebd]\\n??:? void tmpsi6kp36b.__unittest_L39_C1()\
    \ [0x427c06]\\n??:? void tmpsi6kp36b.__modtest() [0x427c40]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bbe3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa76]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc09]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300b8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb95]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa4d]\\n??:? runModuleUnitTests [0x42b9b9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42830c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428293]\\n??:? _d_run_main [0x4281fe]\\n??:? main [0x427c53]\\\
    n??:? __libc_start_main [0xe75c7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n < 2L) \n    {\n        return y;\n    }\n    else \n\
    \    {\n        long i = 2L;\n        while (i <= n / 2L) \n        {\n      \
    \      if (n % i == 0L) \n            {\n                return y;\n         \
    \   }\n            i = i + 1L;\n        }\n        return x;\n    }\n}\n/*\nA\
    \ simple program which should return the value of x if n is \n    a prime number\
    \ and should return the value of y otherwise.\nunittest\n{\n    alias candidate\
    \ = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L,\
    \ 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3hq7_c8u.d(35): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3hq7_c8u.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n == 2L)\n    {\n        return x;\n    }\n    else\n \
    \   {\n        if (n % 2L == 0L)\n        {\n            return y;\n        }\n\
    \        else\n        {\n            long i = 3L;\n            while (i <= sqrt(n))\n\
    \            {\n                if (n % i == 0L)\n                {\n        \
    \            return y;\n                }\n                i = i + 2L;\n     \
    \       }\n            return x;\n        }\n    }\n}\nunittest\n{\n    alias\
    \ candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L,\
    \ 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpba7817f9.d(30): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpba7817f9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n == 2L)\n    {\n        return x;\n    }\n    else if\
    \ (n % 2L == 0L)\n    {\n        return y;\n    }\n    else\n    {\n        long\
    \ i = 3L;\n        while (i * i <= n)\n        {\n            if (n % i == 0L)\n\
    \            {\n                return y;\n            }\n            i += 2L;\n\
    \        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\
    \n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L)\
    \ == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpj9codmjn.d(51): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ebd]\\n??:? void tmpj9codmjn.__unittest_L39_C1()\
    \ [0x427c06]\\n??:? void tmpj9codmjn.__modtest() [0x427c40]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bbe3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa76]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc09]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300b8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb95]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa4d]\\n??:? runModuleUnitTests [0x42b9b9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42830c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428293]\\n??:? _d_run_main [0x4281fe]\\n??:? main [0x427c53]\\\
    n??:? __libc_start_main [0x6cde3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if(n == 1)\n        return y;\n    if(n == 2)\n        return\
    \ x;\n    if(n % 2 == 0)\n        return y;\n    long i = 3;\n    while(i <= sqrt(n))\n\
    \    {\n        if(n % i == 0)\n            return y;\n        i += 2;\n    }\n\
    \    return x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L,\
    \ 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L,\
    \ 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpte0p2geu.d(24): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpte0p2geu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L) \n    {\n        return y;\n    }\n    else \n\
    \    {\n        long i = 2L;\n        while (i < n) \n        {\n            if\
    \ (n % i == 0L) \n            {\n                return y;\n            }\n  \
    \          i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n\
    \    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n < 2L) \n    {\n        return y;\n    }\n    else \n\
    \    {\n        long i = 2L;\n        while (i <= n / 2L) \n        {\n      \
    \      if (n % i == 0L) \n            {\n                return y;\n         \
    \   }\n            i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n\
    {\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n == 2L)\n    {\n        return x;\n    }\n    else\n \
    \   {\n        if (n % 2L == 0L)\n        {\n            return y;\n        }\n\
    \        else\n        {\n            long i = 3L;\n            while (i <= sqrt(n))\n\
    \            {\n                if (n % i == 0L)\n                {\n        \
    \            return y;\n                }\n                i = i + 2L;\n     \
    \       }\n            return x;\n        }\n    }\n}\nunittest\n{\n    alias\
    \ candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L,\
    \ 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo9r617t0.d(30): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpo9r617t0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n < 2L) \n    {\n        return y;\n    }\n    else \n\
    \    {\n        long i = 2L;\n        while (i < n) \n        {\n            if\
    \ (n % i == 0L) \n            {\n                return y;\n            }\n  \
    \          i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n\
    \    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (isPrime(n))\n    {\n        return x;\n    }\n    else\n\
    \    {\n        return y;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\
    \n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L)\
    \ == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9qzv3tyn.d(17): Error: undefined identifier `isPrime`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9qzv3tyn.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n == 2L)\n        return x;\n    if (n % 2L == 0L)\n  \
    \      return y;\n    long i = 3L;\n    while (i <= sqrt(n))\n    {\n        if\
    \ (n % i == 0L)\n            return y;\n        i += 2L;\n    }\n    return x;\n\
    }\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L,\
    \ 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L,\
    \ 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0nhmcg8x.d(22): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp0nhmcg8x.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L) \n    {\n        return y;\n    }\n    if (n <=\
    \ 3L) \n    {\n        return x;\n    }\n    if ((n % 2L) == 0L || (n % 3L) ==\
    \ 0L) \n    {\n        return y;\n    }\n    long i = 5L;\n    while (i * i <=\
    \ n) \n    {\n        if ((n % i) == 0L || (n % (i + 2L)) == 0L) \n        {\n\
    \            return y;\n        }\n        i = i + 6L;\n    }\n    return x;\n\
    }\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L,\
    \ 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L,\
    \ 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (isPrime(n))\n        return x;\n    else\n        return\
    \ y;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L,\
    \ 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L,\
    \ 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjzje5ywj.d(17): Error: undefined identifier `isPrime`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjzje5ywj.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L) \n    {\n        return y;\n    }\n    else if\
    \ (n == 2L) \n    {\n        return x;\n    }\n    else \n    {\n        long\
    \ i = 2L;\n        while (i < n) \n        {\n            if (n % i == 0L) \n\
    \            {\n                return y;\n            }\n            i = i +\
    \ 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L,\
    \ 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n == 2L) \n    {\n        return x;\n    }\n    else if\
    \ (n % 2L == 0L) \n    {\n        return y;\n    }\n    else \n    {\n       \
    \ long i = 3L;\n        while (i * i <= n) \n        {\n            if (n % i\
    \ == 0L) \n            {\n                return y;\n            }\n         \
    \   i += 2L;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L,\
    \ 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprym_zq95.d(51): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ebd]\\n??:? void tmprym_zq95.__unittest_L39_C1()\
    \ [0x427c06]\\n??:? void tmprym_zq95.__modtest() [0x427c40]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bbe3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa76]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc09]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300b8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb95]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa4d]\\n??:? runModuleUnitTests [0x42b9b9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42830c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428293]\\n??:? _d_run_main [0x4281fe]\\n??:? main [0x427c53]\\\
    n??:? __libc_start_main [0xbd27554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n < 2L) \n    {\n        return y;\n    }\n    else \n\
    \    {\n        long i = 2L;\n        while (i <= n / 2L) \n        {\n      \
    \      if (n % i == 0L) \n            {\n                return y;\n         \
    \   }\n            i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n\
    {\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n < 2)\n        return y;\n    else if (n == 2)\n     \
    \   return x;\n    else if (n % 2 == 0)\n        return y;\n    else\n    {\n\
    \        long m = cast(long)sqrt(n);\n        foreach (i; 3..m + 1)\n        {\n\
    \            if (n % i == 0)\n                return y;\n        }\n        return\
    \ x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L,\
    \ 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L,\
    \ 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu5i2ek0f.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpu5i2ek0f.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n == 2L) {\n        return x;\n    }\n    if (n % 2L ==\
    \ 0L) {\n        return y;\n    }\n    long i = 3L;\n    while (i * i <= n) {\n\
    \        if (n % i == 0L) {\n            return y;\n        }\n        i += 2L;\n\
    \    }\n    return x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L,\
    \ 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L,\
    \ 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpgmp5rm2c.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ebd]\\n??:? void tmpgmp5rm2c.__unittest_L32_C1()\
    \ [0x427c06]\\n??:? void tmpgmp5rm2c.__modtest() [0x427c40]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bbe3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa76]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc09]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300b8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb95]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa4d]\\n??:? runModuleUnitTests [0x42b9b9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42830c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428293]\\n??:? _d_run_main [0x4281fe]\\n??:? main [0x427c53]\\\
    n??:? __libc_start_main [0x4495e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n == 2L)\n    {\n        return x;\n    }\n    if (n %\
    \ 2L == 0L)\n    {\n        return y;\n    }\n    long i = 3L;\n    while (i <=\
    \ sqrt(n))\n    {\n        if (n % i == 0L)\n        {\n            return y;\n\
    \        }\n        i += 2L;\n    }\n    return x;\n}\nunittest\n{\n    alias\
    \ candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L,\
    \ 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp04q2yfc8.d(26): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp04q2yfc8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n < 2L) \n    {\n        return y;\n    }\n    else \n\
    \    {\n        long i = 2L;\n        while (i < n) \n        {\n            if\
    \ (n % i == 0L) \n            {\n                return y;\n            }\n  \
    \          i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n\
    \    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n == 1)\n    {\n        return y;\n    }\n    else\n  \
    \  {\n        long i = 2;\n        while (i <= n / 2)\n        {\n           \
    \ if (n % i == 0)\n            {\n                return y;\n            }\n \
    \           i = i + 1;\n        }\n        return x;\n    }\n}\nunittest\n{\n\
    \    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n == 2L) \n    {\n        return x;\n    }\n    else if\
    \ (n % 2L == 0L) \n    {\n        return y;\n    }\n    else \n    {\n       \
    \ long i = 3L;\n        while (i <= sqrt(n)) \n        {\n            if (n %\
    \ i == 0L) \n            {\n                return y;\n            }\n       \
    \     i += 2L;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L,\
    \ 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwfkeho4f.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpwfkeho4f.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n == 2L) \n    {\n        return x;\n    }\n    if (n %\
    \ 2L == 0L) \n    {\n        return y;\n    }\n    foreach (i; 2L .. (long)sqrt(n)\
    \ + 1L) \n    {\n        if (n % i == 0L) \n        {\n            return y;\n\
    \        }\n    }\n    return x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\
    \n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L)\
    \ == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt1h97g9y.d(25): Error: C style cast illegal, use `cast(long)sqrt(n)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt1h97g9y.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if(n == 1)\n        return y;\n    else if(n == 2)\n      \
    \  return x;\n    else\n    {\n        for(long i = 2; i < n; i++)\n        {\n\
    \            if(n % i == 0)\n                return y;\n        }\n        return\
    \ x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L,\
    \ 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L,\
    \ 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L)\n    {\n        return y;\n    }\n    else if\
    \ (n == 2L)\n    {\n        return x;\n    }\n    else\n    {\n        long i\
    \ = 2L;\n        while (i < n)\n        {\n            if (n % i == 0L)\n    \
    \        {\n                return y;\n            }\n            i = i + 1L;\n\
    \        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\
    \n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L)\
    \ == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L) \n    {\n        return y;\n    }\n    long i\
    \ = 2L;\n    while (i < n) \n    {\n        if (n % i == 0L) \n        {\n   \
    \         return y;\n        }\n        i = i + 1L;\n    }\n    return x;\n}\n\
    /*\nA simple program which should return the value of x if n is \n    a prime\
    \ number and should return the value of y otherwise.\nunittest\n{\n    alias candidate\
    \ = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L,\
    \ 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy_k8ruqn.d(32): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy_k8ruqn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n == 2L) \n    {\n        return x;\n    }\n    else if\
    \ (n == 1L) \n    {\n        return y;\n    }\n    else if (n % 2L == 0L) \n \
    \   {\n        return y;\n    }\n    else \n    {\n        long i = 3L;\n    \
    \    while (i <= sqrt(n)) \n        {\n            if (n % i == 0L) \n       \
    \     {\n                return y;\n            }\n            i += 2L;\n    \
    \    }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\
    \n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L)\
    \ == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfz9_jacs.d(32): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpfz9_jacs.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if(isPrime(n))\n        return x;\n    else\n        return\
    \ y;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L,\
    \ 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L,\
    \ 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnsdu3lgv.d(17): Error: undefined identifier `isPrime`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnsdu3lgv.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n == 2L)\n    {\n        return x;\n    }\n    if (n %\
    \ 2L == 0L)\n    {\n        return y;\n    }\n    long i = 3L;\n    while (i <=\
    \ sqrt(n))\n    {\n        if (n % i == 0L)\n        {\n            return y;\n\
    \        }\n        i += 2L;\n    }\n    return x;\n}\nunittest\n{\n    alias\
    \ candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L,\
    \ 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyjt90u98.d(26): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpyjt90u98.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n < 2L)\n    {\n        return y;\n    }\n    else\n  \
    \  {\n        long i = 2L;\n        while (i < n)\n        {\n            if (n\
    \ % i == 0L)\n            {\n                return y;\n            }\n      \
    \      i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L,\
    \ 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    long i = 2L;\n    while (i < n) \n    {\n        if (n % i\
    \ == 0L) \n        {\n            return y;\n        }\n        i = i + 1L;\n\
    \    }\n    return x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L,\
    \ 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L,\
    \ 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpi2j0l3e4.d(40): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e9d]\\n??:? void tmpi2j0l3e4.__unittest_L28_C1()\
    \ [0x427be2]\\n??:? void tmpi2j0l3e4.__modtest() [0x427c1c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bbc3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa56]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbe9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430098]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb75]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa2d]\\n??:? runModuleUnitTests [0x42b999]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428273]\\n??:? _d_run_main [0x4281de]\\n??:? main [0x427c2f]\\\
    n??:? __libc_start_main [0xff75f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L)\n    {\n        return y;\n    }\n    else if\
    \ (n == 2L)\n    {\n        return x;\n    }\n    else if (n % 2L == 0L)\n   \
    \ {\n        return y;\n    }\n    else\n    {\n        long i = 3L;\n       \
    \ while (i <= sqrt(n))\n        {\n            if (n % i == 0L)\n            {\n\
    \                return y;\n            }\n            i += 2L;\n        }\n \
    \       return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n  \
    \  assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L)\
    \ == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpitzcmk19.d(32): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpitzcmk19.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L) \n    {\n        return y;\n    }\n    else \n\
    \    {\n        long i = 2L;\n        while (i <= n / 2L) \n        {\n      \
    \      if (n % i == 0L) \n            {\n                return y;\n         \
    \   }\n            i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n\
    {\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L)\n    {\n        return y;\n    }\n    else\n \
    \   {\n        long i = 2L;\n        for (; i < n; i++)\n        {\n         \
    \   if (n % i == 0L)\n            {\n                return y;\n            }\n\
    \        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\
    \n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L)\
    \ == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L) \n    {\n        return y;\n    }\n    if (n ==\
    \ 2L) \n    {\n        return x;\n    }\n    if (n % 2L == 0L) \n    {\n     \
    \   return y;\n    }\n    long i = 3L;\n    while (i <= sqrt(n)) \n    {\n   \
    \     if (n % i == 0L) \n        {\n            return y;\n        }\n       \
    \ i += 2L;\n    }\n    return x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\
    \n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L)\
    \ == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzrsw66_v.d(30): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpzrsw66_v.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n < 2L) \n    {\n        return y;\n    }\n    else \n\
    \    {\n        long i = 2L;\n        while (i <= n / 2L) \n        {\n      \
    \      if (n % i == 0L) \n            {\n                return y;\n         \
    \   }\n            i = i + 1L;\n        }\n        return x;\n    }\n}\n/*\nA\
    \ simple program which should return the value of x if n is \n    a prime number\
    \ and should return the value of y otherwise.\nunittest\n{\n    alias candidate\
    \ = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L,\
    \ 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppc1bkab8.d(35): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppc1bkab8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n == 2L)\n        return x;\n    if (n % 2L == 0L)\n  \
    \      return y;\n    long i = 3L;\n    while (i <= sqrt(n))\n    {\n        if\
    \ (n % i == 0L)\n            return y;\n        i += 2L;\n    }\n    return x;\n\
    }\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L,\
    \ 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L,\
    \ 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpiiy8ryvd.d(22): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpiiy8ryvd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n == 2L) \n    {\n        return x;\n    }\n    else if\
    \ (n == 3L) \n    {\n        return x;\n    }\n    else if (n == 5L) \n    {\n\
    \        return x;\n    }\n    else if (n == 7L) \n    {\n        return x;\n\
    \    }\n    else if (n == 11L) \n    {\n        return x;\n    }\n    else if\
    \ (n == 13L) \n    {\n        return x;\n    }\n    else if (n == 17L) \n    {\n\
    \        return x;\n    }\n    else if (n == 19L) \n    {\n        return x;\n\
    \    }\n    else if (n == 23L) \n    {\n        return x;\n    }\n    else if\
    \ (n == 29L) \n    {\n        return x;\n    }\n    else if (n == 31L) \n    {\n\
    \        return x;\n    }\n    else if (n == 37L) \n    {\n        return x;\n\
    \    }\n    else if (n == 41L) \n    {\n        return x;\n    }\n    else if\
    \ (n == 43L) \n    {\n        return x;\n    }\n    else if (n == 47L) \n    {\n\
    \        return x;\n    }\n    else if (n == 53L) \n    {\n        return x;\n\
    \    }\n    else if (n == 59L) \n    {\n        return x;\n    }\n    else if\
    \ (n == 61L) \n    {\n        return x;\n    }\n    else if (n == 67L) \n    {\n\
    \        return x;\n    }\n    else if (n == 71L) \n    {\n        return x;\n\
    \    }\n    else if (n == 73L) \n    {\n        return x;\n    }\n    else if\
    \ (n == 79L) \n    {\n        return x;\n    }\n    else if (n == 83L) \n    {\n\
    \        return x;\n    }\n    else if (\nunittest\n{\n    alias candidate = x_or_y;\n\
    \n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L)\
    \ == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7bgt4qbw.d(110): Error: expression expected, not `unittest`\\\
    n/tmp/tmp7bgt4qbw.d(111): Error: found `{` when expecting `)`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7bgt4qbw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n < 2L) \n    {\n        return y;\n    }\n    else \n\
    \    {\n        long i = 2L;\n        while (i <= n / 2L) \n        {\n      \
    \      if (n % i == 0L) \n            {\n                return y;\n         \
    \   }\n            i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n\
    {\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L) \n    {\n        return y;\n    }\n    long i\
    \ = 2L;\n    while (i <= sqrt(n)) \n    {\n        if (n % i == 0L) \n       \
    \ {\n            return y;\n        }\n        i += 1L;\n    }\n    return x;\n\
    }\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L,\
    \ 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L,\
    \ 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpacuj_jd1.d(22): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpacuj_jd1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n == 2L)\n    {\n        return x;\n    }\n    else if\
    \ (n % 2L == 0L)\n    {\n        return y;\n    }\n    else\n    {\n        long\
    \ i = 3L;\n        while (i <= sqrt(n))\n        {\n            if (n % i == 0L)\n\
    \            {\n                return y;\n            }\n            i = i +\
    \ 2L;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L,\
    \ 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplsb6nmd5.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmplsb6nmd5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n == 2L) \n    {\n        return x;\n    }\n    else if\
    \ (n < 2L) \n    {\n        return y;\n    }\n    else \n    {\n        long i\
    \ = 2L;\n        while (i < n) \n        {\n            if (n % i == 0L) \n  \
    \          {\n                return y;\n            }\n            i = i + 1L;\n\
    \        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\
    \n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L)\
    \ == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n == 2L) \n    {\n        return x;\n    }\n    if (n %\
    \ 2L == 0L) \n    {\n        return y;\n    }\n    long i = 3L;\n    while (i\
    \ <= sqrt(n)) \n    {\n        if (n % i == 0L) \n        {\n            return\
    \ y;\n        }\n        i += 2L;\n    }\n    return x;\n}\nunittest\n{\n    alias\
    \ candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L,\
    \ 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgfviv7n7.d(26): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpgfviv7n7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n == 1)\n        return y;\n    else if (n == 2)\n    \
    \    return x;\n    else\n    {\n        for (long i = 2; i < n; i++)\n      \
    \  {\n            if (n % i == 0)\n                return y;\n        }\n    \
    \    return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L,\
    \ 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L,\
    \ 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L)\n    {\n        return y;\n    }\n    else\n \
    \   {\n        long i = 2L;\n        while (i < n)\n        {\n            if\
    \ (n % i == 0L)\n            {\n                return y;\n            }\n   \
    \         i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n \
    \   alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L)\n    {\n        return y;\n    }\n    else\n \
    \   {\n        long i = 2L;\n        while (i < n)\n        {\n            if\
    \ (n % i == 0L)\n            {\n                return y;\n            }\n   \
    \         i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n \
    \   alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L) \n    {\n        return y;\n    }\n    else \n\
    \    {\n        foreach (i; 2L .. cast(long)(sqrt(n)) + 1L) \n        {\n    \
    \        if (n % i == 0L) \n            {\n                return y;\n       \
    \     }\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L,\
    \ 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps5zxgnbp.d(23): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmps5zxgnbp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n == 2L) \n    {\n        return x;\n    }\n    if (n %\
    \ 2L == 0L) \n    {\n        return y;\n    }\n    long i = 3L;\n    while (i\
    \ <= sqrt(n)) \n    {\n        if (n % i == 0L) \n        {\n            return\
    \ y;\n        }\n        i += 2L;\n    }\n    return x;\n}\nunittest\n{\n    alias\
    \ candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L,\
    \ 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd0h80nvq.d(26): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpd0h80nvq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L) \n    {\n        return y;\n    }\n    else \n\
    \    {\n        long i = 2L;\n        while (i < n) \n        {\n            if\
    \ (n % i == 0L) \n            {\n                return y;\n            }\n  \
    \          i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n\
    \    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n == 2L)\n    {\n        return x;\n    }\n    else\n \
    \   {\n        if (n % 2L == 0L)\n        {\n            return y;\n        }\n\
    \        else\n        {\n            long i = 3L;\n            while (i <= sqrt(n))\n\
    \            {\n                if (n % i == 0L)\n                {\n        \
    \            return y;\n                }\n                i = i + 2L;\n     \
    \       }\n            return x;\n        }\n    }\n}\nunittest\n{\n    alias\
    \ candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L,\
    \ 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpadsdyvox.d(30): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpadsdyvox.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n < 2L) \n    {\n        return y;\n    }\n    else \n\
    \    {\n        long i = 2L;\n        while (i < n) \n        {\n            if\
    \ (n % i == 0L) \n            {\n                return y;\n            }\n  \
    \          i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n\
    \    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L)\n    {\n        return y;\n    }\n    else\n \
    \   {\n        long i = 2L;\n        while (i <= n / 2L)\n        {\n        \
    \    if (n % i == 0L)\n            {\n                return y;\n            }\n\
    \            i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n\
    \    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n == 1L) \n    {\n        return y;\n    }\n    else \n\
    \    {\n        long i = 2L;\n        while (i < n) \n        {\n            if\
    \ (n % i == 0L) \n            {\n                return y;\n            }\n  \
    \          i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n\
    \    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n < 2L) \n    {\n        return y;\n    }\n    else \n\
    \    {\n        long i = 2L;\n        while (i < n) \n        {\n            if\
    \ (n % i == 0L) \n            {\n                return y;\n            }\n  \
    \          i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n\
    \    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n < 2L)\n    {\n        return y;\n    }\n    else if (n\
    \ == 2L)\n    {\n        return x;\n    }\n    else\n    {\n        long i = 2L;\n\
    \        while (i <= cast(long)(sqrt(cast(real)(n))))\n        {\n           \
    \ if (n % i == 0L)\n            {\n                return y;\n            }\n\
    \            i += 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n \
    \   alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L) \n    {\n        return y;\n    }\n    else \n\
    \    {\n        if (n == 2L) \n        {\n            return x;\n        }\n \
    \       else \n        {\n            if (n % 2L == 0L) \n            {\n    \
    \            return y;\n            }\n            else \n            {\n    \
    \            long i = 3L;\n                while (i <= sqrt(n)) \n           \
    \     {\n                    if (n % i == 0L) \n                    {\n      \
    \                  return y;\n                    }\n                    i = i\
    \ + 2L;\n                }\n                return x;\n            }\n       \
    \ }\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L,\
    \ 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L,\
    \ 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpad2oz2hh.d(36): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpad2oz2hh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n < 2L) \n    {\n        return y;\n    }\n    if (n ==\
    \ 2L) \n    {\n        return x;\n    }\n    if (n % 2L == 0L) \n    {\n     \
    \   return y;\n    }\n    long i = 3L;\n    while (i * i <= n) \n    {\n     \
    \   if (n % i == 0L) \n        {\n            return y;\n        }\n        i\
    \ += 2L;\n    }\n    return x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\
    \n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L)\
    \ == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n < 2L)\n    {\n        return y;\n    }\n    else\n  \
    \  {\n        long i = 2L;\n        while (i < n)\n        {\n            if (n\
    \ % i == 0L)\n            {\n                return y;\n            }\n      \
    \      i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L,\
    \ 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L) \n    {\n        return y;\n    }\n    else \n\
    \    {\n        long i = 2L;\n        while (i < n) \n        {\n            if\
    \ (n % i == 0L) \n            {\n                return y;\n            }\n  \
    \          i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n\
    \    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L)\n    {\n        return y;\n    }\n    else\n \
    \   {\n        long i = 2L;\n        while (i < n)\n        {\n            if\
    \ (n % i == 0L)\n            {\n                return y;\n            }\n   \
    \         i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n \
    \   alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n < 2L)\n    {\n        return y;\n    }\n    else\n  \
    \  {\n        long i = 2L;\n        while (i < n)\n        {\n            if (n\
    \ % i == 0L)\n            {\n                return y;\n            }\n      \
    \      i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L,\
    \ 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n < 2L) \n    {\n        return y;\n    }\n    else \n\
    \    {\n        long i = 2L;\n        while (i < n) \n        {\n            if\
    \ (n % i == 0L) \n            {\n                return y;\n            }\n  \
    \          i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n\
    \    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L)\n    {\n        return y;\n    }\n    else if\
    \ (n == 2L)\n    {\n        return x;\n    }\n    else\n    {\n        long i\
    \ = 2L;\n        while (i < n)\n        {\n            if (n % i == 0L)\n    \
    \        {\n                return y;\n            }\n            i = i + 1L;\n\
    \        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\
    \n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L)\
    \ == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L)\n    {\n        return y;\n    }\n    else\n \
    \   {\n        long i = 2L;\n        while (i < n)\n        {\n            if\
    \ (n % i == 0L)\n            {\n                return y;\n            }\n   \
    \         i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n \
    \   alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L)\n    {\n        return y;\n    }\n    else if\
    \ (n == 2L)\n    {\n        return x;\n    }\n    else\n    {\n        long i\
    \ = 2L;\n        while (i <= cast(long)(sqrt(cast(real)(n))))\n        {\n   \
    \         if (n % i == 0L)\n            {\n                return y;\n       \
    \     }\n            i += 1L;\n        }\n        return x;\n    }\n}\nunittest\n\
    {\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n < 2L) \n    {\n        return y;\n    }\n    else \n\
    \    {\n        long i = 2L;\n        while (i < n) \n        {\n            if\
    \ (n % i == 0L) \n            {\n                return y;\n            }\n  \
    \          i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n\
    \    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n < 2L) \n    {\n        return y;\n    }\n    if (n ==\
    \ 2L) \n    {\n        return x;\n    }\n    if (n % 2L == 0L) \n    {\n     \
    \   return y;\n    }\n    long i = 3L;\n    while (i <= sqrt(n)) \n    {\n   \
    \     if (n % i == 0L) \n        {\n            return y;\n        }\n       \
    \ i += 2L;\n    }\n    return x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\
    \n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L)\
    \ == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplxgr437w.d(30): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmplxgr437w.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n < 2L) \n    {\n        return y;\n    }\n    if (n ==\
    \ 2L) \n    {\n        return x;\n    }\n    if (n % 2L == 0L) \n    {\n     \
    \   return y;\n    }\n    long i = 3L;\n    while (i * i <= n) \n    {\n     \
    \   if (n % i == 0L) \n        {\n            return y;\n        }\n        i\
    \ += 2L;\n    }\n    return x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\
    \n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L)\
    \ == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if(n < 2)\n        return y;\n    else if(n == 2)\n       \
    \ return x;\n    else\n    {\n        long i = 2;\n        while(i < n)\n    \
    \    {\n            if(n % i == 0)\n                return y;\n            i++;\n\
    \        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\
    \n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L)\
    \ == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n == 2L) {\n        return x;\n    }\n    if (n == 3L)\
    \ {\n        return x;\n    }\n    if (n == 5L) {\n        return x;\n    }\n\
    \    if (n == 7L) {\n        return x;\n    }\n    if (n == 11L) {\n        return\
    \ x;\n    }\n    if (n == 13L) {\n        return x;\n    }\n    if (n == 17L)\
    \ {\n        return x;\n    }\n    if (n == 19L) {\n        return x;\n    }\n\
    \    if (n == 23L) {\n        return x;\n    }\n    if (n == 29L) {\n        return\
    \ x;\n    }\n    if (n == 31L) {\n        return x;\n    }\n    if (n == 37L)\
    \ {\n        return x;\n    }\n    if (n == 41L) {\n        return x;\n    }\n\
    \    if (n == 43L) {\n        return x;\n    }\n    if (n == 47L) {\n        return\
    \ x;\n    }\n    if (n == 53L) {\n        return x;\n    }\n    if (n == 59L)\
    \ {\n        return x;\n    }\n    if (n == 61L) {\n        return x;\n    }\n\
    \    if (n == 67L) {\n        return x;\n    }\n    if (n == 71L) {\n        return\
    \ x;\n    }\n    if (n == 73L) {\n        return x;\n    }\n    if (n == 79L)\
    \ {\n        return x;\n    }\n    if (n == 83L) {\n        return x;\n    }\n\
    \    if (n == 89L) {\n        return x;\n    }\n    if (n == 97L) {\n        return\
    \ x;\n    }\n    if (n == 101L) {\n        return x;\n    }\n    if (n == 103L)\
    \ {\n        return x;\n    }\n    if (n == 107L) {\n        return x;\n    }\n\
    \    if (n ==\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L,\
    \ 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L,\
    \ 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi723lgz8.d(102): Error: expression expected, not `unittest`\\\
    n/tmp/tmpi723lgz8.d(103): Error: found `{` when expecting `)`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi723lgz8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L)\n    {\n        return y;\n    }\n    else\n \
    \   {\n        long i = 2L;\n        while (i < n)\n        {\n            if\
    \ (n % i == 0L)\n            {\n                return y;\n            }\n   \
    \         i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n \
    \   alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L) \n    {\n        return y;\n    }\n    else if\
    \ (n <= 3L) \n    {\n        return x;\n    }\n    else if ((n % 2L) == 0L ||\
    \ (n % 3L) == 0L) \n    {\n        return y;\n    }\n    long i = 5L;\n    while\
    \ (i * i <= n) \n    {\n        if ((n % i) == 0L || (n % (i + 2L)) == 0L) \n\
    \        {\n            return y;\n        }\n        i = i + 6L;\n    }\n   \
    \ return x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L,\
    \ 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L,\
    \ 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L)\n    {\n        return y;\n    }\n    else if\
    \ (n == 2L)\n    {\n        return x;\n    }\n    else if (n % 2L == 0L)\n   \
    \ {\n        return y;\n    }\n    else\n    {\n        long i = 3L;\n       \
    \ while (i <= sqrt(n))\n        {\n            if (n % i == 0L)\n            {\n\
    \                return y;\n            }\n            i += 2L;\n        }\n \
    \       return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n  \
    \  assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L)\
    \ == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzhr3jjm9.d(32): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpzhr3jjm9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L)\n    {\n        return y;\n    }\n    if (n ==\
    \ 2L)\n    {\n        return x;\n    }\n    if (n % 2L == 0L)\n    {\n       \
    \ return y;\n    }\n    long i = 3L;\n    while (i * i <= n)\n    {\n        if\
    \ (n % i == 0L)\n        {\n            return y;\n        }\n        i += 2L;\n\
    \    }\n    return x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L,\
    \ 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L,\
    \ 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n == 2L) {\n        return x;\n    }\n    if (n < 2L) {\n\
    \        return y;\n    }\n    long i = 2L;\n    while (i < n) {\n        if (n\
    \ % i == 0L) {\n            return y;\n        }\n        i = i + 1L;\n    }\n\
    \    return x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L,\
    \ 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L,\
    \ 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n < 2L)\n    {\n        return y;\n    }\n    if (n ==\
    \ 2L)\n    {\n        return x;\n    }\n    if (n % 2L == 0L)\n    {\n       \
    \ return y;\n    }\n    long i = 3L;\n    while (i * i <= n)\n    {\n        if\
    \ (n % i == 0L)\n        {\n            return y;\n        }\n        i += 2L;\n\
    \    }\n    return x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L,\
    \ 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L,\
    \ 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (isPrime(n))\n    {\n        return x;\n    }\n    else\n\
    \    {\n        return y;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\
    \n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L)\
    \ == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy38zpryr.d(17): Error: undefined identifier `isPrime`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy38zpryr.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n == 2L) \n    {\n        return x;\n    }\n    else if\
    \ (n % 2L == 0L) \n    {\n        return y;\n    }\n    else \n    {\n       \
    \ long i = 3L;\n        while (i <= sqrt(n)) \n        {\n            if (n %\
    \ i == 0L) \n            {\n                return y;\n            }\n       \
    \     i += 2L;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L,\
    \ 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpggy_b219.d(28): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpggy_b219.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L) \n    {\n        return y;\n    }\n    else \n\
    \    {\n        long i = 2L;\n        while (i < n) \n        {\n            if\
    \ (n % i == 0L) \n            {\n                return y;\n            }\n  \
    \          i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n\
    \    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n < 2L)\n    {\n        return y;\n    }\n    else\n  \
    \  {\n        long i = 2L;\n        while (i < n)\n        {\n            if (n\
    \ % i == 0L)\n            {\n                return y;\n            }\n      \
    \      i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L,\
    \ 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L) \n    {\n        return y;\n    }\n    else \n\
    \    {\n        long i = 2L;\n        while (i < n) \n        {\n            if\
    \ (n % i == 0L) \n            {\n                return y;\n            }\n  \
    \          i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n\
    \    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n % 2 == 0)\n    {\n        return y;\n    }\n    else\n\
    \    {\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\
    \n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L)\
    \ == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmph99vaup3.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e6d]\\n??:? void tmph99vaup3.__unittest_L26_C1()\
    \ [0x427a75]\\n??:? void tmph99vaup3.__modtest() [0x427bf0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb93]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa26]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbb9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9fd]\\n??:? runModuleUnitTests [0x42b969]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282bc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428243]\\n??:? _d_run_main [0x4281ae]\\n??:? main [0x427c03]\\\
    n??:? __libc_start_main [0xd0dbd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n < 2L)\n    {\n        return y;\n    }\n    else\n  \
    \  {\n        long i = 2L;\n        while (i <= n / 2L)\n        {\n         \
    \   if (n % i == 0L)\n            {\n                return y;\n            }\n\
    \            i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n\
    \    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if(isPrime(n))\n    {\n        return x;\n    }\n    else\n\
    \    {\n        return y;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\
    \n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L)\
    \ == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpodp0qokh.d(17): Error: undefined identifier `isPrime`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpodp0qokh.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n < 2L)\n    {\n        return y;\n    }\n    else\n  \
    \  {\n        if (n == 2L)\n        {\n            return x;\n        }\n    \
    \    else\n        {\n            if (n % 2L == 0L)\n            {\n         \
    \       return y;\n            }\n            else\n            {\n          \
    \      long i = 3L;\n                while (i <= sqrt(n))\n                {\n\
    \                    if (n % i == 0L)\n                    {\n               \
    \         return y;\n                    }\n                    i += 2L;\n   \
    \             }\n                return x;\n            }\n        }\n    }\n\
    }\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L,\
    \ 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L,\
    \ 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8x6mhr9l.d(36): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp8x6mhr9l.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n == 1) \n    {\n        return y;\n    }\n    else \n\
    \    {\n        long i = 2;\n        while (i < n) \n        {\n            if\
    \ (n % i == 0) \n            {\n                return y;\n            }\n   \
    \         i = i + 1;\n        }\n        return x;\n    }\n}\nunittest\n{\n  \
    \  alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (isPrime(n))\n        return x;\n    else\n        return\
    \ y;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L,\
    \ 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L,\
    \ 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl_u7nnz4.d(17): Error: undefined identifier `isPrime`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl_u7nnz4.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L)\n    {\n        return y;\n    }\n    else\n \
    \   {\n        long i = 2L;\n        while (i < n)\n        {\n            if\
    \ (n % i == 0L)\n            {\n                return y;\n            }\n   \
    \         i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n \
    \   alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n == 2L)\n    {\n        return x;\n    }\n    else if\
    \ (n == 3L)\n    {\n        return x;\n    }\n    else if (n == 5L)\n    {\n \
    \       return x;\n    }\n    else if (n == 7L)\n    {\n        return x;\n  \
    \  }\n    else if (n == 11L)\n    {\n        return x;\n    }\n    else if (n\
    \ == 13L)\n    {\n        return x;\n    }\n    else if (n == 17L)\n    {\n  \
    \      return x;\n    }\n    else if (n == 19L)\n    {\n        return x;\n  \
    \  }\n    else if (n == 23L)\n    {\n        return x;\n    }\n    else if (n\
    \ == 29L)\n    {\n        return x;\n    }\n    else if (n == 31L)\n    {\n  \
    \      return x;\n    }\n    else if (n == 37L)\n    {\n        return x;\n  \
    \  }\n    else if (n == 41L)\n    {\n        return x;\n    }\n    else if (n\
    \ == 43L)\n    {\n        return x;\n    }\n    else if (n == 47L)\n    {\n  \
    \      return x;\n    }\n    else if (n == 53L)\n    {\n        return x;\n  \
    \  }\n    else if (n == 59L)\n    {\n        return x;\n    }\n    else if (n\
    \ == 61L)\n    {\n        return x;\n    }\n    else if (n == 67L)\n    {\n  \
    \      return x;\n    }\n    else if (n == 71L)\n    {\n        return x;\n  \
    \  }\n    else if (n == 73L)\n    {\n        return x;\n    }\n    else if (n\
    \ == 79L)\n    {\n        return x;\n    }\n    else if (n == 83L)\n    {\n  \
    \      return x;\n    }\n    else if (n == 89L)\n    {\n        return x;\n  \
    \  }\n    else if (n ==\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L,\
    \ 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L,\
    \ 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzxp25929.d(114): Error: expression expected, not `unittest`\\\
    n/tmp/tmpzxp25929.d(115): Error: found `{` when expecting `)`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzxp25929.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L)\n    {\n        return y;\n    }\n    else if\
    \ (n == 2L)\n    {\n        return x;\n    }\n    else\n    {\n        long i\
    \ = 2L;\n        while (i < n)\n        {\n            if (n % i == 0L)\n    \
    \        {\n                return y;\n            }\n            i = i + 1L;\n\
    \        }\n        return x;\n    }\n}\n/*\nA simple program which should return\
    \ the value of x if n is \n    a prime number and should return the value of y\
    \ otherwise.\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L,\
    \ 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L,\
    \ 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_dx8lprq.d(39): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_dx8lprq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L)\n    {\n        return y;\n    }\n    else\n \
    \   {\n        long i = 2L;\n        while (i < n)\n        {\n            if\
    \ (n % i == 0L)\n            {\n                return y;\n            }\n   \
    \         i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n \
    \   alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L) \n    {\n        return y;\n    }\n    else \n\
    \    {\n        long i = 2L;\n        while (i < n) \n        {\n            if\
    \ (n % i == 0L) \n            {\n                return y;\n            }\n  \
    \          i = i + 1L;\n        }\n        return x;\n    }\n}\n/*\nA simple program\
    \ which should return the value of x if n is \n    a prime number and should return\
    \ the value of y otherwise.\nunittest\n{\n    alias candidate = x_or_y;\n\n  \
    \  assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L)\
    \ == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm6b7a5h3.d(35): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm6b7a5h3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L)\n    {\n        return y;\n    }\n    else\n \
    \   {\n        long i = 2L;\n        while (i < n)\n        {\n            if\
    \ (n % i == 0L)\n            {\n                return y;\n            }\n   \
    \         i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n \
    \   alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n < 2L)\n    {\n        return y;\n    }\n    else\n  \
    \  {\n        long i = 2L;\n        while (i < n)\n        {\n            if (n\
    \ % i == 0L)\n            {\n                return y;\n            }\n      \
    \      i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L,\
    \ 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n < 2) return y;\n    if (n == 2) return x;\n    if (n\
    \ % 2 == 0) return y;\n    foreach (i; 2 .. cast(long)sqrt(n) + 1) \n    {\n \
    \       if (n % i == 0) return y;\n    }\n    return x;\n}\nunittest\n{\n    alias\
    \ candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L,\
    \ 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg0rjyojf.d(20): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpg0rjyojf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L) \n    {\n        return y;\n    }\n    else \n\
    \    {\n        long i = 2L;\n        while (i < n) \n        {\n            if\
    \ (n % i == 0L) \n            {\n                return y;\n            }\n  \
    \          i = i + 1L;\n        }\n        return x;\n    }\n}\n/*\nA simple program\
    \ which should return the value of x if n is \n    a prime number and should return\
    \ the value of y otherwise.\nunittest\n{\n    alias candidate = x_or_y;\n\n  \
    \  assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L)\
    \ == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpepl2lj3o.d(35): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpepl2lj3o.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L)\n    {\n        return y;\n    }\n    else\n \
    \   {\n        long i = 2L;\n        while (i < n)\n        {\n            if\
    \ (n % i == 0L)\n            {\n                return y;\n            }\n   \
    \         i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n \
    \   alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L)\n    {\n        return y;\n    }\n    else if\
    \ (n == 2L)\n    {\n        return x;\n    }\n    else if (n % 2L == 0L)\n   \
    \ {\n        return y;\n    }\n    else\n    {\n        long i = 3L;\n       \
    \ while (i <= sqrt(n))\n        {\n            if (n % i == 0L)\n            {\n\
    \                return y;\n            }\n            i += 2L;\n        }\n \
    \       return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n  \
    \  assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L)\
    \ == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkr0n7o_1.d(32): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpkr0n7o_1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L) \n    {\n        return y;\n    }\n    if (n ==\
    \ 2L) \n    {\n        return x;\n    }\n    if (n % 2L == 0L) \n    {\n     \
    \   return y;\n    }\n    long i = 3L;\n    while (i * i <= n) \n    {\n     \
    \   if (n % i == 0L) \n        {\n            return y;\n        }\n        i\
    \ += 2L;\n    }\n    return x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\
    \n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L)\
    \ == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L) \n    {\n        return y;\n    }\n    else if\
    \ (n == 2L) \n    {\n        return x;\n    }\n    else if (n % 2L == 0L) \n \
    \   {\n        return y;\n    }\n    else \n    {\n        long i = 3L;\n    \
    \    while (i <= sqrt(n)) \n        {\n            if (n % i == 0L) \n       \
    \     {\n                return y;\n            }\n            i += 2L;\n    \
    \    }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\
    \n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L)\
    \ == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7bmt59nx.d(32): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp7bmt59nx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n < 2L)\n    {\n        return y;\n    }\n    else\n  \
    \  {\n        long i = 2L;\n        while (i <= n / 2L)\n        {\n         \
    \   if (n % i == 0L)\n            {\n                return y;\n            }\n\
    \            i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n\
    \    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n == 1)\n        return y;\n    else if (n == 2)\n    \
    \    return x;\n    else if (n % 2 == 0)\n        return y;\n    else\n    {\n\
    \        long i = 3;\n        while (i <= sqrt(n))\n        {\n            if\
    \ (n % i == 0)\n                return y;\n            i += 2;\n        }\n  \
    \      return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n   \
    \ assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) ==\
    \ 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuw6rzizr.d(26): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpuw6rzizr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L)\n    {\n        return y;\n    }\n    else\n \
    \   {\n        long i = 2L;\n        while (i < n)\n        {\n            if\
    \ (n % i == 0L)\n            {\n                return y;\n            }\n   \
    \         i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n \
    \   alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L) \n    {\n        return y;\n    }\n    else \n\
    \    {\n        long i = 2L;\n        for (; i < n; i++) \n        {\n       \
    \     if (n % i == 0L) \n            {\n                return y;\n          \
    \  }\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L,\
    \ 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L) \n    {\n        return y;\n    }\n    else \n\
    \    {\n        long i = 2L;\n        while (i < n) \n        {\n            if\
    \ (n % i == 0L) \n            {\n                return y;\n            }\n  \
    \          i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n\
    \    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (isPrime(n))\n        return x;\n    else\n        return\
    \ y;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L,\
    \ 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L,\
    \ 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcseodlag.d(17): Error: undefined identifier `isPrime`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcseodlag.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L) \n    {\n        return y;\n    }\n    else \n\
    \    {\n        long i = 2L;\n        while (i < n) \n        {\n            if\
    \ (n % i == 0L) \n            {\n                return y;\n            }\n  \
    \          i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n\
    \    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n < 2L)\n    {\n        return y;\n    }\n    else if (n\
    \ == 2L)\n    {\n        return x;\n    }\n    else if (n % 2L == 0L)\n    {\n\
    \        return y;\n    }\n    else\n    {\n        long i = 3L;\n        while\
    \ (i <= sqrt(n))\n        {\n            if (n % i == 0L)\n            {\n   \
    \             return y;\n            }\n            i += 2L;\n        }\n    \
    \    return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L,\
    \ 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L,\
    \ 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo0cqg2dt.d(32): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpo0cqg2dt.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L) \n    {\n        return y;\n    }\n    else \n\
    \    {\n        long i = 2L;\n        while (i < n) \n        {\n            if\
    \ (n % i == 0L) \n            {\n                return y;\n            }\n  \
    \          i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n\
    \    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n == 2L) \n    {\n        return x;\n    }\n    else if\
    \ (n < 2L) \n    {\n        return y;\n    }\n    else \n    {\n        long i\
    \ = 2L;\n        while (i < n) \n        {\n            if (n % i == 0L) \n  \
    \          {\n                return y;\n            }\n            i = i + 1L;\n\
    \        }\n        return x;\n    }\n}\n/*\nA simple program which should return\
    \ the value of x if n is \n    a prime number and should return the value of y\
    \ otherwise.\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L,\
    \ 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L,\
    \ 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpblaefvnq.d(39): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpblaefvnq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (isPrime(n))\n        return x;\n    else\n        return\
    \ y;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L,\
    \ 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L,\
    \ 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwd7c2a3g.d(17): Error: undefined identifier `isPrime`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwd7c2a3g.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n == 2L) \n    {\n        return x;\n    }\n    else \n\
    \    {\n        if (n % 2L == 0L) \n        {\n            return y;\n       \
    \ }\n        else \n        {\n            long i = 3L;\n            while (i\
    \ <= sqrt(n)) \n            {\n                if (n % i == 0L) \n           \
    \     {\n                    return y;\n                }\n                i =\
    \ i + 2L;\n            }\n            return x;\n        }\n    }\n}\nunittest\n\
    {\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj7piintc.d(30): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpj7piintc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L) \n    {\n        return y;\n    }\n    else if\
    \ (n == 2L) \n    {\n        return x;\n    }\n    else if (n % 2L == 0L) \n \
    \   {\n        return y;\n    }\n    else \n    {\n        long i = 3L;\n    \
    \    while (i <= sqrt(n)) \n        {\n            if (n % i == 0L) \n       \
    \     {\n                return y;\n            }\n            i += 2L;\n    \
    \    }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\
    \n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L)\
    \ == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6daau68d.d(32): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp6daau68d.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n < 2L)\n    {\n        return y;\n    }\n    else\n  \
    \  {\n        long i = 2L;\n        while (i <= n / 2L)\n        {\n         \
    \   if (n % i == 0L)\n            {\n                return y;\n            }\n\
    \            i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n\
    \    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L) \n    {\n        return y;\n    }\n    else \n\
    \    {\n        long i = 2L;\n        while (i < n) \n        {\n            if\
    \ (n % i == 0L) \n            {\n                return y;\n            }\n  \
    \          i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n\
    \    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n % 2 == 0)\n        return y;\n    else\n        return\
    \ x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L,\
    \ 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L,\
    \ 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp09n66mgr.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e6d]\\n??:? void tmp09n66mgr.__unittest_L22_C1()\
    \ [0x427a75]\\n??:? void tmp09n66mgr.__modtest() [0x427bf0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb93]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa26]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbb9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9fd]\\n??:? runModuleUnitTests [0x42b969]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282bc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428243]\\n??:? _d_run_main [0x4281ae]\\n??:? main [0x427c03]\\\
    n??:? __libc_start_main [0xb45ab554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (isPrime(n))\n        return x;\n    else\n        return\
    \ y;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L,\
    \ 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L,\
    \ 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnsnly2q2.d(17): Error: undefined identifier `isPrime`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnsnly2q2.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if(n == 2L)\n    {\n        return x;\n    }\n    else if(n\
    \ == 3L)\n    {\n        return x;\n    }\n    else if(n == 5L)\n    {\n     \
    \   return x;\n    }\n    else if(n == 7L)\n    {\n        return x;\n    }\n\
    \    else if(n == 11L)\n    {\n        return x;\n    }\n    else if(n == 13L)\n\
    \    {\n        return x;\n    }\n    else if(n == 17L)\n    {\n        return\
    \ x;\n    }\n    else if(n == 19L)\n    {\n        return x;\n    }\n    else\
    \ if(n == 23L)\n    {\n        return x;\n    }\n    else if(n == 29L)\n    {\n\
    \        return x;\n    }\n    else if(n == 31L)\n    {\n        return x;\n \
    \   }\n    else if(n == 37L)\n    {\n        return x;\n    }\n    else if(n ==\
    \ 41L)\n    {\n        return x;\n    }\n    else if(n == 43L)\n    {\n      \
    \  return x;\n    }\n    else if(n == 47L)\n    {\n        return x;\n    }\n\
    \    else if(n == 53L)\n    {\n        return x;\n    }\n    else if(n == 59L)\n\
    \    {\n        return x;\n    }\n    else if(n == 61L)\n    {\n        return\
    \ x;\n    }\n    else if(n == 67L)\n    {\n        return x;\n    }\n    else\
    \ if(n == 71L)\n    {\n        return x;\n    }\n    else if(n == 73L)\n    {\n\
    \        return x;\n    }\n    else if(n == 79L)\n    {\n        return x;\n \
    \   }\n    else if(n == 83L)\n    {\n        return x;\n    }\n    else if(n ==\
    \ 89L)\n    {\n        return x;\n    }\n    else if(n ==\nunittest\n{\n    alias\
    \ candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L,\
    \ 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvyjrqaj_.d(114): Error: expression expected, not `unittest`\\\
    n/tmp/tmpvyjrqaj_.d(115): Error: found `{` when expecting `)`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvyjrqaj_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n == 2L)\n    {\n        return x;\n    }\n    else\n \
    \   {\n        if (n % 2L == 0L)\n        {\n            return y;\n        }\n\
    \        else\n        {\n            long i = 3L;\n            while (i < n)\n\
    \            {\n                if (n % i == 0L)\n                {\n        \
    \            return y;\n                }\n                i = i + 2L;\n     \
    \       }\n            return x;\n        }\n    }\n}\nunittest\n{\n    alias\
    \ candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L,\
    \ 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpdcvkpgl2.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ec5]\\n??:? void tmpdcvkpgl2.__unittest_L42_C1()\
    \ [0x427c0a]\\n??:? void tmpdcvkpgl2.__modtest() [0x427c44]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bbeb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa7e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc11]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300c0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb9d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa55]\\n??:? runModuleUnitTests [0x42b9c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428314]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42829b]\\n??:? _d_run_main [0x428206]\\n??:? main [0x427c57]\\\
    n??:? __libc_start_main [0x25405554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n == 2L)\n        return x;\n    if (n % 2L == 0L)\n  \
    \      return y;\n    long i = 3L;\n    while (i * i <= n) {\n        if (n %\
    \ i == 0L)\n            return y;\n        i += 2L;\n    }\n    return x;\n}\n\
    unittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L)\
    \ == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L,\
    \ 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpl54ig0_x.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ebd]\\n??:? void tmpl54ig0_x.__unittest_L29_C1()\
    \ [0x427c06]\\n??:? void tmpl54ig0_x.__modtest() [0x427c40]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bbe3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa76]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fc09]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300b8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb95]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa4d]\\n??:? runModuleUnitTests [0x42b9b9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42830c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428293]\\n??:? _d_run_main [0x4281fe]\\n??:? main [0x427c53]\\\
    n??:? __libc_start_main [0x494c8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n < 2L)\n    {\n        return y;\n    }\n    else\n  \
    \  {\n        long i = 2L;\n        while (i <= n / 2L)\n        {\n         \
    \   if (n % i == 0L)\n            {\n                return y;\n            }\n\
    \            i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n\
    \    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    return isPrime(n) ? x : y;\n}\nunittest\n{\n    alias candidate\
    \ = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L,\
    \ 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8zp_jpbf.d(17): Error: undefined identifier `isPrime`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8zp_jpbf.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L)\n    {\n        return y;\n    }\n    else\n \
    \   {\n        long i = 2L;\n        while (i < n)\n        {\n            if\
    \ (n % i == 0L)\n            {\n                return y;\n            }\n   \
    \         i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n \
    \   alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n < 2L)\n    {\n        return y;\n    }\n    else\n  \
    \  {\n        long i = 2L;\n        while (i < n)\n        {\n            if (n\
    \ % i == 0L)\n            {\n                return y;\n            }\n      \
    \      i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L,\
    \ 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L)\n    {\n        return y;\n    }\n    else if\
    \ (n == 2L)\n    {\n        return x;\n    }\n    else if (n % 2L == 0L)\n   \
    \ {\n        return y;\n    }\n    else\n    {\n        long i = 3L;\n       \
    \ while (i <= sqrt(n))\n        {\n            if (n % i == 0L)\n            {\n\
    \                return y;\n            }\n            i += 2L;\n        }\n \
    \       return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n  \
    \  assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L)\
    \ == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmp7uot09.d(32): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpmp7uot09.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n < 2L) \n    {\n        return y;\n    }\n    else \n\
    \    {\n        long i = 2L;\n        while (i < n) \n        {\n            if\
    \ (n % i == 0L) \n            {\n                return y;\n            }\n  \
    \          i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n\
    \    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n < 2L) \n    {\n        return y;\n    }\n    else \n\
    \    {\n        long i = 2L;\n        while (i < n) \n        {\n            if\
    \ (n % i == 0L) \n            {\n                return y;\n            }\n  \
    \          i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n\
    \    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L) \n    {\n        return y;\n    }\n    else \n\
    \    {\n        long i = 2L;\n        while (i < n) \n        {\n            if\
    \ (n % i == 0L) \n            {\n                return y;\n            }\n  \
    \          i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n\
    \    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n == 2)\n        return x;\n    if (n % 2 == 0)\n     \
    \   return y;\n    for (long i = 3; i <= sqrt(n); i += 2)\n    {\n        if (n\
    \ % i == 0)\n            return y;\n    }\n    return x;\n}\nunittest\n{\n   \
    \ alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n \
    \   assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3ma5bq3w.d(21): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp3ma5bq3w.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L) \n    {\n        return y;\n    }\n    else \n\
    \    {\n        long i = 2L;\n        while (i < n) \n        {\n            if\
    \ (n % i == 0L) \n            {\n                return y;\n            }\n  \
    \          i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n\
    \    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L)\n    {\n        return y;\n    }\n    else\n \
    \   {\n        if (n == 2L)\n        {\n            return x;\n        }\n   \
    \     else\n        {\n            long i = 2L;\n            while (i < n)\n \
    \           {\n                if (n % i == 0L)\n                {\n         \
    \           return y;\n                }\n                i = i + 1L;\n      \
    \      }\n            return x;\n        }\n    }\n}\nunittest\n{\n    alias candidate\
    \ = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L,\
    \ 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L)\n    {\n        return y;\n    }\n    else if\
    \ (n <= 3L)\n    {\n        return x;\n    }\n    else if (n % 2L == 0L || n %\
    \ 3L == 0L)\n    {\n        return y;\n    }\n    long i = 5L;\n    while (i *\
    \ i <= n)\n    {\n        if (n % i == 0L || n % (i + 2L) == 0L)\n        {\n\
    \            return y;\n        }\n        i = i + 6L;\n    }\n    return x;\n\
    }\n/*\nA simple program which should return the value of x if n is \n    a prime\
    \ number and should return the value of y otherwise.\nunittest\n{\n    alias candidate\
    \ = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L,\
    \ 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt228t2t7.d(40): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt228t2t7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n == 1L) \n    {\n        return y;\n    }\n    else \n\
    \    {\n        long i = 2L;\n        while (i < n) \n        {\n            if\
    \ (n % i == 0L) \n            {\n                return y;\n            }\n  \
    \          i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n\
    \    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (isPrime(n))\n        return x;\n    else\n        return\
    \ y;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L,\
    \ 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L,\
    \ 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzwkul2ut.d(17): Error: undefined identifier `isPrime`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzwkul2ut.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n == 2L)\n        return x;\n    if (n < 2L)\n        return\
    \ y;\n    long i = 2L;\n    while (i < n)\n    {\n        if (n % i == 0L)\n \
    \           return y;\n        i = i + 1L;\n    }\n    return x;\n}\n/*\nA simple\
    \ program which should return the value of x if n is \n    a prime number and\
    \ should return the value of y otherwise.\nunittest\n{\n    alias candidate =\
    \ x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L,\
    \ 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe45p1qk8.d(30): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe45p1qk8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L)\n    {\n        return y;\n    }\n    else\n \
    \   {\n        long i = 2L;\n        while (i < n)\n        {\n            if\
    \ (n % i == 0L)\n            {\n                return y;\n            }\n   \
    \         i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n \
    \   alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L) \n    {\n        return y;\n    }\n    else \n\
    \    {\n        long i = 2L;\n        while (i < n) \n        {\n            if\
    \ (n % i == 0L) \n            {\n                return y;\n            }\n  \
    \          i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n\
    \    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n == 2L)\n        return x;\n    else if (n % 2L == 0L)\n\
    \        return y;\n    else if (n == 3L)\n        return x;\n    else if (n %\
    \ 3L == 0L)\n        return y;\n    else if (n == 5L)\n        return x;\n   \
    \ else if (n % 5L == 0L)\n        return y;\n    else if (n == 7L)\n        return\
    \ x;\n    else if (n % 7L == 0L)\n        return y;\n    else if (n == 11L)\n\
    \        return x;\n    else if (n % 11L == 0L)\n        return y;\n    else if\
    \ (n == 13L)\n        return x;\n    else if (n % 13L == 0L)\n        return y;\n\
    \    else if (n == 17L)\n        return x;\n    else if (n % 17L == 0L)\n    \
    \    return y;\n    else if (n == 19L)\n        return x;\n    else if (n % 19L\
    \ == 0L)\n        return y;\n    else if (n == 23L)\n        return x;\n    else\
    \ if (n % 23L == 0L)\n        return y;\n    else if (n == 29L)\n        return\
    \ x;\n    else if (n % 29L == 0L)\n        return y;\n    else if (n == 31L)\n\
    \        return x;\n    else if (n % 31L == 0L)\n        return y;\n    else if\
    \ (n == 37L)\n        return x;\n    else if (n % 37L == 0L)\n        return y;\n\
    \    else if (n == 41L)\n        return x;\n    else if (n % 41L == 0L)\n    \
    \    return y;\n    else if (n == 43L)\n        return x;\n    else if (n % 43L\
    \ == 0L)\n        return y;\n    else if (n == 47L)\n        return x;\n    else\
    \ if (n % 47L == 0L)\n        return y;\n    else if (n == 53L)\n        return\
    \ x;\n\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L,\
    \ 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L,\
    \ 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpujo6_8hy.d(80): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpujo6_8hy.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n < 2L) \n    {\n        return y;\n    }\n    else \n\
    \    {\n        long i = 2L;\n        while (i < n) \n        {\n            if\
    \ (n % i == 0L) \n            {\n                return y;\n            }\n  \
    \          i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n\
    \    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L)\n    {\n        return y;\n    }\n    else\n \
    \   {\n        long i = 2L;\n        while ((i <= n / 2L))\n        {\n      \
    \      if ((n % i) == 0L)\n            {\n                return y;\n        \
    \    }\n            i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n\
    {\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L)\n    {\n        return y;\n    }\n    else if\
    \ (n == 2L)\n    {\n        return x;\n    }\n    else\n    {\n        foreach\
    \ (i; 2L .. cast(long)(sqrt(n)))\n        {\n            if (n % i == 0L)\n  \
    \          {\n                return y;\n            }\n        }\n        return\
    \ x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L,\
    \ 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L,\
    \ 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvi53khtq.d(27): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpvi53khtq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (isPrime(n)) \n    {\n        return x;\n    }\n    else\
    \ \n    {\n        return y;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\
    \n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L)\
    \ == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvf6pbpt9.d(17): Error: undefined identifier `isPrime`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvf6pbpt9.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    return isPrime(n) ? x : y;\n}\nunittest\n{\n    alias candidate\
    \ = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L,\
    \ 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpot_coanr.d(17): Error: undefined identifier `isPrime`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpot_coanr.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L) \n    {\n        return y;\n    }\n    else \n\
    \    {\n        long i = 2L;\n        while (i < n) \n        {\n            if\
    \ (n % i == 0L) \n            {\n                return y;\n            }\n  \
    \          i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n\
    \    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n == 2L)\n        return x;\n    else if (n < 2L)\n   \
    \     return y;\n    else \n    {\n        long i = 2L;\n        while (i < n)\
    \ \n        {\n            if (n % i == 0L)\n                return y;\n     \
    \       i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n   \
    \ alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n \
    \   assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L)\n    {\n        return y;\n    }\n    else\n \
    \   {\n        long i = 2L;\n        while (i < n)\n        {\n            if\
    \ (n % i == 0L)\n            {\n                return y;\n            }\n   \
    \         i += 1L;\n        }\n        return x;\n    }\n}\n/*\nA simple program\
    \ which should return the value of x if n is \n    a prime number and should return\
    \ the value of y otherwise.\nunittest\n{\n    alias candidate = x_or_y;\n\n  \
    \  assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L)\
    \ == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwqp90lax.d(35): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwqp90lax.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L) \n    {\n        return y;\n    }\n    else \n\
    \    {\n        long i = 2L;\n        while (i < n) \n        {\n            if\
    \ (n % i == 0L) \n            {\n                return y;\n            }\n  \
    \          i = i + 1L;\n        }\n        return x;\n    }\n}\n/*\nA simple program\
    \ which should return the value of x if n is \n    a prime number and should return\
    \ the value of y otherwise.\nunittest\n{\n    alias candidate = x_or_y;\n\n  \
    \  assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L)\
    \ == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzc1lx0g7.d(35): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzc1lx0g7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n < 2L)\n    {\n        return y;\n    }\n    else if (n\
    \ == 2L)\n    {\n        return x;\n    }\n    else\n    {\n        long i = 2L;\n\
    \        while (i < n)\n        {\n            if (n % i == 0L)\n            {\n\
    \                return y;\n            }\n            i = i + 1L;\n        }\n\
    \        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n \
    \   assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L)\
    \ == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n < 2)\n        return y;\n    if (n == 2)\n        return\
    \ x;\n    if (n % 2 == 0)\n        return y;\n    for (long i = 3; i <= sqrt(n);\
    \ i += 2)\n    {\n        if (n % i == 0)\n            return y;\n    }\n    return\
    \ x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L,\
    \ 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L,\
    \ 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyr97_q9j.d(23): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpyr97_q9j.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n == 2L) \n    {\n        return x;\n    }\n    if (n ==\
    \ 1L || n % 2L == 0L) \n    {\n        return y;\n    }\n    long i = 3L;\n  \
    \  while (i <= sqrt(n)) \n    {\n        if (n % i == 0L) \n        {\n      \
    \      return y;\n        }\n        i += 2L;\n    }\n    return x;\n}\nunittest\n\
    {\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppc1xb94c.d(26): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmppc1xb94c.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L) \n    {\n        return y;\n    }\n    else \n\
    \    {\n        long i = 2L;\n        while (i < n) \n        {\n            if\
    \ (n % i == 0L) \n            {\n                return y;\n            }\n  \
    \          i = i + 1L;\n        }\n        return x;\n    }\n}\nunittest\n{\n\
    \    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n\
    \    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L)\
    \ == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n <= 1L) \n    {\n        return y;\n    }\n    else \n\
    \    {\n        long i = 2L;\n        while (i < n) \n        {\n            if\
    \ (n % i == 0L) \n            {\n                return y;\n            }\n  \
    \          i = i + 1L;\n        }\n        return x;\n    }\n}\n/*\nA simple program\
    \ which should return the value of x if n is \n    a prime number and should return\
    \ the value of y otherwise.\nunittest\n{\n    alias candidate = x_or_y;\n\n  \
    \  assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L)\
    \ == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw6eg7t9h.d(35): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw6eg7t9h.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    long i = 2L;\n    long j = 0L;\n    while (i < n) {\n     \
    \   if (n % i == 0L) {\n            j = 1L;\n            break;\n        }\n \
    \       i = i + 1L;\n    }\n    if (j == 0L) {\n        return x;\n    } else\
    \ {\n        return y;\n    }\n}\n/*\nA simple program which should return the\
    \ value of x if n is \n    a prime number and should return the value of y otherwise.\n\
    unittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L)\
    \ == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L,\
    \ 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
    \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n   \
    \ assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L)\
    \ == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L,\
    \ 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4nmyfseo.d(32): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4nmyfseo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\nA simple program which should\
    \ return the value of x if n is \n    a prime number and should return the value\
    \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n  \
    \  >>> x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x,\
    \ long y) \n{\n    if (n < 2L) \n    {\n        return y;\n    }\n    else \n\
    \    {\n        long i = 2L;\n        while (i < n) \n        {\n            if\
    \ (n % i == 0L) \n            {\n                return y;\n            }\n  \
    \          i = i + 1L;\n        }\n        return x;\n    }\n}\n/*\nA simple program\
    \ which should return the value of x if n is \n    a prime number and should return\
    \ the value of y otherwise.\nunittest\n{\n    alias candidate = x_or_y;\n\n  \
    \  assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L)\
    \ == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L,\
    \ 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L,\
    \ 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n   \
    \ assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L)\
    \ == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp_tq5q_z.d(35): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp_tq5q_z.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
