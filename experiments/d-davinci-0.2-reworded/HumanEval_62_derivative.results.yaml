name: HumanEval_62_derivative
language: d
results:
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\nlong[] integral(long[] xs) \n{\n    long[]\
    \ result = new long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    87L\n    >>> evaluate([1L, 2L, 3L], 3L)\n    38L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return coefficients of the polynomial\
    \ that is the product of this\n\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3spjrqrm.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3spjrqrm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n    double[] result\
    \ = new double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    \
    \    result[i + 1] = xs[i] / (i + 1);\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return value of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong\
    \ evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i\
    \ < xs.length; i++)\n        result += xs[i] * pow(x, i);\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptlvdvc3b.d(54): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptlvdvc3b.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    return xs[1 .. $].map!(a => a * cast(long)(xs.length\
    \ - 1));\n}\n/*\n    Return the integral of a polynomial.\n    >>> integral([3L,\
    \ 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n   \
    \ >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\nlong[] integral(long[]\
    \ xs) \n{\n    return [0L] ~ xs.map!(a => a / cast(long)(xs.length));\n}\n/*\n\
    \    Return the value of a polynomial at a given point.\n    >>> polyval([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    59L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong polyval(long[] xs, long x) \n{\n    long result = 0L;\n    foreach\
    \ (i, a; xs)\n    {\n        result += a * pow(x, i);\n    }\n    return result;\n\
    }\n/*\n    Return the roots of a polynomial.\n    >>> roots([1L, 2L, 3L])\n  \
    \  [-1L, -3L]\n    >>> roots([1L, -2L, 1L])\n    [-1L, 1L]\n    >>> roots([1L,\
    \ 0L, -1L])\n    [-1L, 1L]\n    >>> roots([1L, 0L, 0L, -1L])\n    [-1L, 1L, 1L,\
    \ -1L]\n    >>> roots([1L, 0L, 0L, 0L, -1L])\n    [-1L, 1L, 1L, 1L, -1L]\n   \
    \ \n*/\nlong[] roots(long[] xs) \n{\n    long[] result = [];\n    if (xs.length\
    \ == 2)\n    {\n        result ~= -xs[0] / xs[1];\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbomdw_4w.d(66): Error: found `unittest` instead of statement\\\
    n/tmp/tmpbomdw_4w.d(76): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbomdw_4w.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    67L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate\nunittest\n{\n    alias candidate = derivative;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0ok86zem.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ok86zem.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return the\
    \ value of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n\
    \    61L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return the value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    61L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n   \
    \ }\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return the value of this polynomial\
    \ at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    61L\n    >>> evaluate([1L,\
    \ 2L, 3L], 2\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcwuoo76r.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcwuoo76r.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    return xs[1 .. $].map!(a => a * cast(long)(xs.length\
    \ - 1));\n}\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n    Return integral of this polynomial in the same\
    \ form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 2L, 4L, 5L]\n\
    \    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 3L]\n*/\nlong[] integral(long[]\
    \ xs) \n{\n    return [0L] ~ xs.map!(a => a / cast(long)(xs.length + 1));\n}\n\
    /*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return value of this polynomial at x.\n    >>> polynomial([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    43L\n    >>> polynomial([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong polynomial(long[] xs, long x) \n{\n    long result = 0L;\n    foreach\
    \ (i, a; xs)\n    {\n        result += a * pow(x, i);\n    }\n    return result;\n\
    }\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x +\
    \ xs[2] * x^2 + ....\n    Return value of this polynomial at x.\n    >>> polynomial([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    43L\n    >>> polynomial([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong polynomial2(long[] xs, long x) \n{\n    long result = 0L;\n    foreach\
    \ (i,\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu1rwxh5g.d(61): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpu1rwxh5g.d(61): Error: no identifier for declarator `_error_`\\n/tmp/tmpu1rwxh5g.d(61):\
    \ Error: found `unittest` when expecting `;`\\n/tmp/tmpu1rwxh5g.d(71): Error:\
    \ found `void` when expecting `)`\\n/tmp/tmpu1rwxh5g.d(71): Error: found `{` when\
    \ expecting `;` following statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpu1rwxh5g.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    55L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate\nunittest\n{\n    alias candidate = derivative;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpozwndz9b.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpozwndz9b.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] res = new long[xs.length - 1];\n\
    \    for (int i = 0; i < res.length; i++)\n    {\n        res[i] = xs[i + 1] *\
    \ (i + 1);\n    }\n    return res;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n    double[] res =\
    \ new double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        res[i + 1] = xs[i] / (i + 1);\n    }\n    return res;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return value of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong\
    \ evaluate(long[] xs, long x) \n{\n    long res = 0;\n    for (int i = 0; i <\
    \ xs.length; i++)\n    {\n        res += xs[i] * pow(x, i);\n    }\n    return\
    \ res;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return value of this polynomial at x.\n    >>>\
    \ evaluate\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqmg9hq1p.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqmg9hq1p.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the polynomial\
    \ with the given coefficients evaluated at x.\n    >>> evaluate([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    Return the polynomial with the given coefficients evaluated at x.\n  \
    \  >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L,\
    \ 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the polynomial with\
    \ the given coefficients evaluated at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L],\
    \ 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    Return the polynomial with the given coefficients evaluated at x.\n  \
    \  >>> evaluate([3L, 1L, 2L, 4L\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdfehtyg2.d(70): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdfehtyg2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the sum\
    \ of the two polynomials.\n    >>> add([1L, 2L, 3L], [3L, 4L, 5L])\n    [4L, 6L,\
    \ 8L]\n    >>> add([1L, 2L, 3L], [3L, 4L, 5L, 6L])\n    [4L, 6L, 8L, 6L]\n   \
    \ >>> add([1L, 2L, 3L, 4L], [3L, 4L, 5L])\n    [4L, 6L, 8L, 4L]\n*/\nlong[] add(long[]\
    \ xs, long[] ys) \n{\n    long[] result = new long[max(xs.length, ys.length)];\n\
    \    for (int i = 0; i < result.length; i++) \n    {\n        result[i] = (i <\
    \ xs.length ? xs[i] : 0) + (i < ys.length ? ys[i] : 0);\n    }\n    return result;\n\
    }\n/*\n    Return the product of the two polynomials.\n    >>> multiply([1L, 2L,\
    \ 3L], [3L, 4L, 5L])\n    [3L, 10L, 22L, 26L, 15L]\n    >>> multiply([1L, 2L,\
    \ 3L], [3L, 4L, 5L, 6L])\n    [3L, 10L, 22L, 26L, 39L, 30L]\n    >>> multiply([1L,\
    \ 2L, 3L, 4L], [3L, 4L, 5L])\n    [3L, 10L, 22L, 26L, 39L, 30L]\n*/\nlong[] multiply(long[]\
    \ xs, long[] ys) \n{\n    long[] result = new long[xs.length + ys.length - 1];\n\
    \    for (\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo7wk20ma.d(53): Error: found `unittest` instead of statement\\\
    n/tmp/tmpo7wk20ma.d(58): Error: found `;` when expecting `)`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo7wk20ma.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the value\
    \ of a polynomial at a given point.\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n\
    \    >>> polyval([1L, 2L, 3L], 0L)\n    1L\n    >>> polyval([1L, 2L, 3L], 1L)\n\
    \    6L\n*/\nlong polyval(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n    Return the value of a polynomial at a given\
    \ point.\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n    >>> polyval([1L, 2L,\
    \ 3L], 0L)\n    1L\n    >>> polyval([1L, 2L, 3L], 1L)\n    6L\n*/\nlong polyval(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    Return the value of a polynomial at a given point.\n    >>> polyval([1L,\
    \ 2L, 3L], 2L)\n    17L\n    >>> polyval([1L, 2L, 3L], 0L)\n    1L\n    >>> polyval([1L,\
    \ 2L, 3L], 1L)\n    6L\n*/\nlong polyval(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n       \nunittest\n{\n\
    \    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpverraiay.d(73): Error: found `unittest` instead of statement\\\
    n/tmp/tmpverraiay.d(83): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpverraiay.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the polynomial\
    \ in the form of a string.\n    >>> polynomial([1L, 2L, 3L])\n    'x^2 + 2x +\
    \ 3'\n    >>> polynomial([1L, 2L, 3L, 4L])\n    'x^3 + 2x^2 + 3x + 4'\n    >>>\
    \ polynomial([1L, 2L, 3L, 4L, 5L])\n    'x^4 + 2x^3 + 3x^2 + 4x + 5'\n    >>>\
    \ polynomial([1L, 2L, 3L, 4L, 5L, 6L])\n    'x^5 + 2x^4 + 3x^3 + 4x^2 + 5x + 6'\n\
    \    >>> polynomial([1L, 2L, 3L, 4L, 5L, 6L, 7L])\n    'x^6 + 2x^5 + 3x^4 + 4x^3\
    \ + 5x^2 + 6x + 7'\n    >>> polynomial([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L])\n   \
    \ 'x^7 + 2x^6 + 3x^5 + 4x^4 + 5x^3 + 6x^2 + 7x + 8'\n    >>> polynomial([1L, 2L,\
    \ 3L, 4L, 5L, 6L, 7L, 8L, 9L])\n    'x^8 + 2x^7 + 3x^6 + 4x^5 + 5x^4 + 6x^3 +\
    \ 7x^2 + 8x + 9'\n    >>> polynomial([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L])\n\
    \    'x^9 + 2x^8 + 3x^7 + 4x^6 + 5x^5 +\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6krp1f0m.d(22): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6krp1f0m.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 2L, 4L, 5L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L,\
    \ 1L, 3L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length\
    \ + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1]\
    \ = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return the\
    \ value of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n\
    \    97L\n    >>> evaluate([1L, 2L, 3L], 3L)\n    40L\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return the value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8gr5f82g.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8gr5f82g.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] ys = new long[xs.length - 1];\n\
    \    for (int i = 0; i < ys.length; i++)\n    {\n        ys[i] = xs[i + 1] * (i\
    \ + 1);\n    }\n    return ys;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n    double[] ys = new\
    \ double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n   \
    \     ys[i + 1] = xs[i] / (i + 1);\n    }\n    return ys;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return the value of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L,\
    \ 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 3L)\n    42L\n    \n*/\n\
    long evaluate(long[] xs, long x) \n{\n    long y = 0;\n    for (int i = 0; i <\
    \ xs.length; i++)\n    {\n        y += xs[i] * pow(x, i);\n    }\n    return y;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return the value of this po\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplpfwajvb.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplpfwajvb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = (double)xs[i] / (i + 1);\n    }\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return value of this polynomial at x.\n    >>>\
    \ evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L],\
    \ 2L)\n    17L\n    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n   \nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcfjceitd.d(37): Error: C style cast illegal, use `cast(double)xs[i]`\\\
    n/tmp/tmpcfjceitd.d(60): Error: unterminated /* */ comment\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcfjceitd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    61L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate\nunittest\n{\n    alias candidate = derivative;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpssuj__ah.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpssuj__ah.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result\
    \ = new long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 3L)\n    28L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n    }\n\
    \    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n \
    \   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of this polynomial\
    \ at x.\n    >>> evaluate([\nunittest\n{\n    alias candidate = derivative;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwvk5y_ka.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwvk5y_ka.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = (i + 1) * xs[i + 1];\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result\
    \ = new long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n   \
    \ }\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of this polynomial\
    \ at x.\n   \nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpozvlo4hf.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpozvlo4hf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    return xs[1 .. $].array;\n}\n/*\n  \
    \  xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n    Return integral of this polynomial in the same form.\n    >>>\
    \ integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 2L, 4L, 5L]\n    >>> integral([1L,\
    \ 2L, 3L])\n    [0L, 1L, 1L, 3L]\n*/\nlong[] integral(long[] xs) \n{\n    return\
    \ [0L] ~ xs.array;\n}\n/*\n    xs represent coefficients of a polynomial.\n  \
    \  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of this polynomial\
    \ at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    41L\n    >>> evaluate([1L,\
    \ 2L, 3L], 3L)\n    28L\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result\
    \ = 0L;\n    foreach (i, xi; xs)\n    {\n        result += xi * pow(x, i);\n \
    \   }\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of this polynomial\
    \ at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    41L\n    >>> evaluate([1L,\
    \ 2L, 3L], 3L)\n    28L\n*/\nlong evaluate2(long[] xs, long x) \n{\n    long result\
    \ = 0L;\n    foreach (i, xi; xs)\n    {\n        result += xi * pow(x, i);\n \
    \   }\n    return result;\n}\n/*\n    xs represent coefficients\nunittest\n{\n\
    \    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmporw5wirq.d(66): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmporw5wirq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the sum\
    \ of the polynomials represented by xs and ys.\n    >>> add([1L, 2L, 3L], [4L,\
    \ 5L, 6L])\n    [5L, 7L, 9L]\n    >>> add([1L, 2L, 3L], [4L, 5L, 6L, 7L])\n  \
    \  [5L, 7L, 9L, 7L]\n    >>> add([1L, 2L, 3L, 4L], [4L, 5L, 6L])\n    [5L, 7L,\
    \ 9L, 4L]\n    \n*/\nlong[] add(long[] xs, long[] ys) \n{\n    long[] result =\
    \ new long[max(xs.length, ys.length)];\n    for (int i = 0; i < result.length;\
    \ i++) \n    {\n        result[i] = (i < xs.length ? xs[i] : 0) + (i < ys.length\
    \ ? ys[i] : 0);\n    }\n    return result;\n}\n/*\n    Return the product of the\
    \ polynomials represented by xs and ys.\n    >>> multiply([1L, 2L, 3L], [4L, 5L,\
    \ 6L])\n    [4L, 13L, 28L, 27L, 18L]\n    >>> multiply([1L, 2L, 3L], [4L, 5L,\
    \ 6L, 7L])\n    [4L, 13L, 28L, 39L, 42L, 27L, 18L]\n    >>> multiply([1L, 2L,\
    \ 3L, 4L], [4L, 5L, 6L])\n    [4L, 13L, 28L, 39L, 42L, 27L]\n    \n*/\nlong[]\
    \ multiply(long[] xs, long[] ys) \n{\n    long[] result\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwp056ksz.d(54): Error: semicolon expected, not `unittest`\\n/tmp/tmpwp056ksz.d(54):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpwp056ksz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 2L, 4L, 5L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L,\
    \ 1L, 3L]\n    \n*/\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length\
    \ + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1]\
    \ = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    63L\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong evaluate(long[] xs,\
    \ long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L,\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6g_r6zod.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6g_r6zod.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral\
    \ of a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1.0L, 1.5L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result = new\
    \ long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n    \
    \    result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n    Return\
    \ the value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n\
    \    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    Return the value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_azu21v7.d(67): Error: found `unittest` instead of statement\\\
    n/tmp/tmp_azu21v7.d(77): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_azu21v7.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return a polynomial\
    \ that is the integral of this polynomial.\n    >>> integral([3L, 1L, 2L, 4L,\
    \ 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.25L]\n    >>> integral([1L,\
    \ 2L, 3L])\n    [0L, 1L, 1.0L, 1.0L]\n    \n*/\nlong[] integral(long[] xs) \n\
    {\n    long[] result = new long[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++) \n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the value of this polynomial at x.\n    >>> evaluate([3L, 1L,\
    \ 2L, 4L, 5L], 2L)\n    63L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n   \
    \ \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int\
    \ i = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n \
    \   }\n    return result;\n}\n/*\n    Return the value of this polynomial at x.\n\
    \    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    63L\n    >>> evaluate([1L, 2L,\
    \ 3L], 2L)\n    17L\n    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long\
    \ result = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n        result\
    \ += xs[i] *\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1ksf0j4r.d(70): Error: expression expected, not `unittest`\\\
    n/tmp/tmp1ksf0j4r.d(71): Error: found `{` when expecting `;` following statement\\\
    n/tmp/tmp1ksf0j4r.d(80): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1ksf0j4r.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    return xs[1 .. $].array;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return integral of this polynomial in the same form.\n    >>> integral([3L,\
    \ 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n   \
    \ >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[]\
    \ xs) \n{\n    double[] ys = new double[xs.length + 1];\n    ys[0] = 0.0;\n  \
    \  foreach (i, x; xs) \n    {\n        ys[i + 1] = x / (i + 1);\n    }\n    return\
    \ ys;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return value of this polynomial at x.\n    >>>\
    \ polyval([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n\
    \    17L\n    \n*/\nlong polyval(long[] xs, long x) \n{\n    long y = 0;\n   \
    \ foreach (i, xi; xs) \n    {\n        y += xi * pow(x, i);\n    }\n    return\
    \ y;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return value of this polynomial at x.\n    >>>\
    \ polyval([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n\
    \    17L\n    \n\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvj_zrdkh.d(56): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvj_zrdkh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result\
    \ = new long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return value of this polynomial at x.\n    >>> polyval([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong polyval(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n   \
    \ }\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return coefficients of the polynomial\
    \ xs\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8sjfmtwi.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8sjfmtwi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    67L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate\nunittest\n{\n    alias candidate = derivative;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvx6ofjds.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvx6ofjds.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    import std.algorithm;\n    import std.range;\n\
    \    import std.stdio;\n    import std.math;\n    import std.conv;\n    import\
    \ std.array;\n    import std.range;\n    import std.algorithm;\n    import std.typecons;\n\
    \    import std.math;\n    import std.conv;\n    import std.array;\n    import\
    \ std.range;\n    import std.algorithm;\n    import std.typecons;\n    import\
    \ std.math;\n    import std.conv;\n    import std.array;\n    import std.range;\n\
    \    import std.algorithm;\n    import std.typecons;\n    import std.math;\n \
    \   import std.conv;\n    import std.array;\n    import std.range;\n    import\
    \ std.algorithm;\n    import std.typecons;\n    import std.math;\n    import std.conv;\n\
    \    import std.array;\n    import std.range;\n    import std.algorithm;\n   \
    \ import std.typecons;\n    import std.math;\n    import std.conv;\n    import\
    \ std.array;\n    import std.range;\n    import std.algorithm;\n    import std.typecons;\n\
    \    import std.math;\n    import std.conv;\n    import std.array;\n    import\
    \ std.range;\n    import std.algorithm;\n    import std.typecons;\n    import\
    \ std.math;\n    import std.conv;\n    import std.array;\n    import std.range;\n\
    \    import std.algorithm;\n    import std.typecons;\n    import std.math;\n \
    \   import std.conv;\n    import std.array;\n    import std.range;\n    import\
    \ std.algorithm;\n    import std.typecons;\n    import std.math;\n    import std.conv;\n\
    \    import std.array;\n    import std.range;\n    import std.algorithm;\n   \
    \ import std.typecons;\n    import std.math;\n    import std.conv;\n    import\
    \ std.array;\n    import std.range;\n    import std.algorithm;\n    import std.typecons;\n\
    \    import\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4ewu7rp6.d(85): Error: identifier expected following `import`\\\
    n/tmp/tmp4ewu7rp6.d(85): Error: `;` expected\\n/tmp/tmp4ewu7rp6.d(95): Error:\
    \ found `End of File` when expecting `}` following compound statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ewu7rp6.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{ \n    long[] result = new long[xs.length\
    \ - 1];\n    for (size_t i = 0; i < result.length; i++)\n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return a list\
    \ of coefficients of the polynomial\n    x^0 + x^1 + x^2 + ... + x^n\n    >>>\
    \ polynomial(3)\n    [1L, 1L, 1L, 1L]\n    >>> polynomial(0)\n    [1L]\n*/\nlong[]\
    \ polynomial(size_t n) \n{ \n    long[] result = new long[n + 1];\n    result[0]\
    \ = 1;\n    for (size_t i = 1; i < result.length; i++)\n    {\n        result[i]\
    \ = 1;\n    }\n    return result;\n}\n/*\n    Return the value of the polynomial\
    \ with coefficients xs at x.\n    >>> evaluate([1L, 2L, 3L], 4L)\n    57L\n*/\n\
    long evaluate(long[] xs, long x) \n{ \n    long result = 0;\n    for (size_t i\
    \ = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n    }\n\
    \    return result;\n}\n/*\n    Return the value of the polynomial with coefficients\
    \ xs at x.\n    >>> evaluate([1L, 2L, 3L], 4L)\n    57L\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{ \n    long result = 0;\n    for (size_t i = 0; i < xs.length;\
    \ i++)\n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n\
    }\n/*\n    Return the value of the polynomial with coefficients xs at x.\n   \
    \ >>> evaluate([1L, 2L, 3L], 4L)\n    57L\n*/\nlong evaluate(long[] xs, long x)\
    \ \n{ \n    long\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpennb7l66.d(76): Error: no identifier for declarator `long`\\\
    n/tmp/tmpennb7l66.d(76): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpennb7l66.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral\
    \ of a polynomial.\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n   \
    \ >>> integral([1L, 2L, 3L, 4L])\n    [0L, 1L, 1L, 1L, 1L]\n*/\nlong[] integral(long[]\
    \ xs) \n{\n    long[] result = new long[xs.length + 1];\n    for (int i = 0; i\
    \ < xs.length; i++) \n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n\
    \    return result;\n}\n/*\n    Return the value of a polynomial at x.\n    >>>\
    \ evaluate([1L, 2L, 3L], 2L)\n    17L\n    >>> evaluate([1L, 2L, 3L], 3L)\n  \
    \  34L\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n    Return the value of a polynomial at x.\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    >>> evaluate([1L, 2L, 3L], 3L)\n\
    \    34L\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n   \
    \ for (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x,\
    \ i);\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial\
    \ at x.\n    >>> evaluate([1L, 2L, 3\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8ws6uv2q.d(70): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8ws6uv2q.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] ret = new long[xs.length - 1];\n\
    \    for (int i = 0; i < ret.length; i++)\n    {\n        ret[i] = xs[i + 1] *\
    \ (i + 1);\n    }\n    return ret;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n    double[] ret =\
    \ new double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        ret[i + 1] = xs[i] / (i + 1);\n    }\n    return ret;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return value of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    37L\n    >>> evaluate([1L, 2L, 3L], 3L)\n    22L\n    \n*/\nlong\
    \ evaluate(long[] xs, long x) \n{\n    long ret = 0;\n    for (int i = 0; i <\
    \ xs.length; i++)\n    {\n        ret += xs[i] * pow(x, i);\n    }\n    return\
    \ ret;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return the polynomial in string form.\n    >>>\
    \ str_\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0odgjpgm.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0odgjpgm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\nlong[] integral(long[] xs) \n{\n    long[]\
    \ result = new long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++) \n\
    \    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return the value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    63L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return the value of this polynomial\
    \ at x\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi9hxq68k.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi9hxq68k.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate\nunittest\n{\n    alias candidate = derivative;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppv49r_um.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppv49r_um.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 2L, 4L, 5L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L,\
    \ 1L, 3L]\n    \n*/\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length\
    \ + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1]\
    \ = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    69L\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong evaluate(long[] xs,\
    \ long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L,\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkr_s4nzz.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkr_s4nzz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x = x0.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    47L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x0) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x0, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv05uujrp.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv05uujrp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    int n = xs.length;\n    if (n == 0)\n\
    \    {\n        return xs;\n    }\n    long[] ys = new long[n - 1];\n    for (int\
    \ i = 0; i < n - 1; i++)\n    {\n        ys[i] = (i + 1) * xs[i + 1];\n    }\n\
    \    return ys;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial in\
    \ the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\n\
    double[] integral(long[] xs) \n{\n    int n = xs.length;\n    double[] ys = new\
    \ double[n + 1];\n    for (int i = 0; i < n; i++)\n    {\n        ys[i + 1] =\
    \ xs[i] / (i + 1);\n    }\n    return ys;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n\
    \    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong polyval(long[] xs,\
    \ long x) \n{\n    int n = xs.length;\n    long y = 0;\n    for (int i = 0; i\
    \ < n; i++)\n    {\n        y = y * x + xs[i];\n    }\n    return y;\n}\n/*\n\
    \ xs represent coefficients of a po\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu3phc879.d(67): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu3phc879.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return the\
    \ value of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n\
    \    49L\n    >>> evaluate([1L, 2L, 3L], 3L)\n    28L\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return the value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 3L)\n    28L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n   \
    \ }\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return the value of this polynomial\
    \ at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L,\
    \ 2L, 3L], 3\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9f8vr08c.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9f8vr08c.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\nlong[] integral(long[] xs) \n{\n    long[]\
    \ result = new long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++) \n\
    \    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    109L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyrc8gb3q.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyrc8gb3q.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral\
    \ of a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1.0L, 1.5L]\n*/\ndouble[] integral(long[] xs) \n{\n    double[] result =\
    \ new double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of a polynomial at x.\n    >>> value([3L, 1L, 2L, 4L, 5L],\
    \ 2)\n    49L\n    >>> value([1L, 2L, 3L], 2)\n    17L\n*/\nlong value(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    Return the value of a polynomial at x.\n    >>> value([3L, 1L, 2L, 4L,\
    \ 5L], 2)\n    49L\n    >>> value([1L, 2L, 3L], 2)\n    17L\n*/\nlong value(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) ==\
    \ [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ (i + 1) * xs[i + 1];\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return the value of this polynomial at x.\n    >>> value([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    55L\n    >>> value([1L, 2L, 3L], 3L)\n    38L\n  \
    \  \n*/\nlong value(long[] xs, long x) \n{\n    long result = 0;\n    for (int\
    \ i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n  \
    \  }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return the value of this polynomial\
    \ at x.\n   \nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_ez7sxyw.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_ez7sxyw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return the\
    \ value of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n\
    \    49L\n    >>> evaluate([1L, 2L, 3L], 3L)\n    28L\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return the value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 3L)\n    28L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n    }\n\
    \    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n \
    \   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return the value of this polynomial\
    \ at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L,\
    \ 2L, 3L], 3L)\n\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe1b7eaap.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe1b7eaap.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    return result;\n}\n/*\n    Return the value of the polynomial\
    \ at x.\n    >>> value(1L, [1L, 2L, 3L])\n    6L\n    >>> value(2L, [1L, 2L, 3L])\n\
    \    17L\n    >>> value(3L, [1L, 2L, 3L])\n    34L\n*/\nlong value(long x, long[]\
    \ xs) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n   \
    \     result += xs[i] * pow(x, i);\n    return result;\n}\n/*\n    Return the\
    \ value of the polynomial at x.\n    >>> value(1L, [1L, 2L, 3L])\n    6L\n   \
    \ >>> value(2L, [1L, 2L, 3L])\n    17L\n    >>> value(3L, [1L, 2L, 3L])\n    34L\n\
    */\nlong value(long x, long[] xs) \n{\n    long result = 0;\n    for (int i =\
    \ 0; i < xs.length; i++)\n        result += xs[i] * pow(x, i);\n    return result;\n\
    }\n/*\n    Return the value of the polynomial at x.\n    >>> value(1L, [1L, 2L,\
    \ 3L])\n    6L\n    >>> value(2L, [1L, 2L, 3L])\n    17L\n    >>> value(3L, [1L,\
    \ 2L, 3L])\n    34L\n*/\nlong value(long x, long[] xs) \n{\n    long result =\
    \ 0;\n    for (int i = 0; i < xs.length; i++)\n        result += xs[i] * pow(x,\
    \ i);\n    return result;\n}\n/*\n    Return the value of the polynomial at\n\
    unittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) ==\
    \ [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmvjvur28.d(68): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmvjvur28.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n\
    \    >>> evaluate([1L, 2L, 3L], 3L)\n    28L\n    \n*/\nlong evaluate(long[] xs,\
    \ long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return integral of this polynomial in the same form.\n    >>>\
    \ integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L,\
    \ 1.25L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1.0L, 1.5L]\n    \n*/\n\
    double[] integral(long[] xs) \n{\n    double[] result = new double[xs.length +\
    \ 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] =\
    \ xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return the\
    \ sum of this polynomial and y\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkvcyfjjj.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkvcyfjjj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{ \n    return xs[1 .. $].map!(a => a * cast(long)(xs.length\
    \ - 1)).array;\n}\n/*\n    Return the integral of a polynomial.\n    >>> integral([3L,\
    \ 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.25L]\n  \
    \  >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1.0L]\n*/\ndouble[] integral(long[]\
    \ xs) \n{ \n    return [0.0L] ~ xs.map!(a => a / cast(double)(xs.length)).array;\n\
    }\n/*\n    Return the value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L,\
    \ 4L, 5L], 2L)\n    51L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong\
    \ polyval(long[] xs, long x) \n{ \n    return xs.zip(xs.map!(a => x ^ cast(long)(xs.length\
    \ - 1 - a)).array).map!(a => a[0] * a[1]).sum;\n}\n/*\n    Return the value of\
    \ a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n    51L\n   \
    \ >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[] xs, long x)\
    \ \n{ \n    return xs.zip(xs.map!(a => x ^ cast(long)(xs.length - 1 - a)).array).map!(a\
    \ => a[0] * a[1]).sum;\n}\n/*\n    Return the value of a polynomial at x.\n  \
    \  >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n    51L\n    >>> polyval([1L, 2L, 3L],\
    \ 2L)\n    17L\n*/\nlong poly\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp94iahu9h.d(58): Error: semicolon expected, not `unittest`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp94iahu9h.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 2L, 4L, 5L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L,\
    \ 1L, 3L]\n    \n*/\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length\
    \ + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1]\
    \ = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong evaluate(long[] xs,\
    \ long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L,\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyft6bql9.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyft6bql9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{ \n    return xs[1 .. $].array; \n}\n/*\n\
    \    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return integral of this polynomial in the same form.\n   \
    \ >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.25L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n*/\nlong[]\
    \ integral(long[] xs) \n{ \n    long[] result = new long[xs.length + 1]; \n  \
    \  foreach (i, x; xs) \n        result[i + 1] = x / cast(long)(i + 1); \n    return\
    \ result; \n}\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] +\
    \ xs[1] * x + xs[2] * x^2 + ....\n    Return the value of this polynomial at x.\n\
    \    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L,\
    \ 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long x) \n{ \n    long result\
    \ = 0; \n    foreach (i, x; xs) \n        result += x * pow(x, i); \n    return\
    \ result; \n}\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] +\
    \ xs[1] * x + xs[2] * x^2 + ....\n    Return the value of this polynomial at x.\n\
    \    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L,\
    \ 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long x) \n{ \n    long result\
    \ =\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpre5_o_jd.d(61): Error: expression expected, not `unittest`\\\
    n/tmp/tmpre5_o_jd.d(62): Error: semicolon expected, not `{`\\n/tmp/tmpre5_o_jd.d(71):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpre5_o_jd.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = (i + 1) * xs[i + 1];\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++) \n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    long\
    \ power = 1;\n    for (int i = 0; i < xs.length; i++) \n    {\n        result\
    \ += xs[i] * power;\n        power *= x;\n    }\n    return result;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4cggfz83.d(62): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4cggfz83.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{ \n    long[] ys = new long[xs.length - 1];\n\
    \    for (int i = 0; i < ys.length; i++)\n        ys[i] = xs[i + 1] * (i + 1);\n\
    \    return ys;\n}\n/*\n    Return the polynomial with the given coefficients\
    \ evaluated at x.\n    >>> evaluate([1L, 2L, 3L], 5L)\n    76L\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{ \n    long y = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \        y += xs[i] * pow(x, i);\n    return y;\n}\n/*\n    Return the polynomial\
    \ with the given coefficients evaluated at x.\n    >>> evaluate([1L, 2L, 3L],\
    \ 5L)\n    76L\n*/\nlong evaluate(long[] xs, long x) \n{ \n    long y = 0;\n \
    \   for (int i = 0; i < xs.length; i++)\n        y += xs[i] * pow(x, i);\n   \
    \ return y;\n}\n/*\n    Return the polynomial with the given coefficients evaluated\
    \ at x.\n    >>> evaluate([1L, 2L, 3L], 5L)\n    76L\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{ \n    long y = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \        y += xs[i] * pow(x, i);\n    return y;\n}\n/*\n    Return the polynomial\
    \ with the given coefficients evaluated at x.\n    >>> evaluate([1L, 2L, 3L],\
    \ 5L)\n    76L\n*/\nlong evaluate(long[] xs, long x) \n{ \n    long y = 0;\n \
    \   for (int i = 0; i < xs.length; i++)\n        y += xs[i] * pow(x, i);\n   \
    \ return y;\n}\n/*\n    Return the polynomial with the given coefficients evaluated\
    \ at x.\n    >>> evaluate([1L, 2L, 3L\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4t5zfgm0.d(68): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4t5zfgm0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (long i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = (i + 1) * xs[i + 1];\n    }\n    return result;\n}\n/*\n    Return the integral\
    \ of a polynomial,\n    i.e. the polynomial that you get by adding a 0-th coefficient\
    \ of 0.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.25L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n*/\nlong[]\
    \ integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n    for\
    \ (long i = 0; i < xs.length; i++) \n    {\n        result[i + 1] = xs[i] / (i\
    \ + 1);\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial\
    \ at a given point.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n   \
    \ >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long x)\
    \ \n{\n    long result = 0;\n    for (long i = 0; i < xs.length; i++) \n    {\n\
    \        result = result * x + xs[i];\n    }\n    return result;\n}\n/*\n    Return\
    \ the value of a polynomial at a given point.\n    >>> evaluate([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (long i = 0; i < xs.length; i++)\
    \ \n    {\n       \nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3xxutz0f.d(68): Error: found `unittest` instead of statement\\\
    n/tmp/tmp3xxutz0f.d(78): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3xxutz0f.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the polynomial\
    \ of degree n with the given coefficients.\n    >>> poly([1L, 2L, 3L])\n    3L\
    \ * x^2 + 2L * x + 1L\n    >>> poly([1L, 2L, 3L, 4L])\n    4L * x^3 + 3L * x^2\
    \ + 2L * x + 1L\n*/\nPolynomial poly(long[] xs) \n{\n    Polynomial result = new\
    \ Polynomial(xs.length - 1);\n    for (int i = 0; i < xs.length; i++) \n    {\n\
    \        result.setCoefficient(i, xs[i]);\n    }\n    return result;\n}\n/*\n\
    \    Return the polynomial of degree n with the given coefficients.\n    >>> poly([1L,\
    \ 2L, 3L])\n    3L * x^2 + 2L * x + 1L\n    >>> poly([1L, 2L, 3L, 4L])\n    4L\
    \ * x^3 + 3L * x^2 + 2L * x + 1L\n*/\nPolynomial poly(long[] xs) \n{\n    Polynomial\
    \ result = new Polynomial(xs.length - 1);\n    for (int i = 0; i < xs.length;\
    \ i++) \n    {\n        result.setCoefficient(i, xs[i]);\n    }\n    return result;\n\
    }\n/*\n    Return the polynomial of degree n with the given coefficients.\n  \
    \  >>> poly([1L, 2L, 3L])\n    3L * x^2 + 2L * x + 1L\n    >>> poly([1L, 2L, 3L,\
    \ 4L])\n    4L * x^3 + 3L * x^2 + 2L * x + 1L\n*/\nPolynomial poly(long[] xs)\
    \ \n{\n    Poly\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl80dg08v.d(64): Error: found `unittest` when expecting `;` following\
    \ statement\\n/tmp/tmpl80dg08v.d(74): Error: found `End of File` when expecting\
    \ `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmpl80dg08v.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    93L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate\nunittest\n{\n    alias candidate = derivative;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbkhx3at3.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbkhx3at3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{ \n    return xs[1 .. $].array; \n}\nunittest\n\
    {\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L,\
    \ 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr3evvzt0.d(15): Error: no property `array` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr3evvzt0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ (i + 1) * xs[i + 1];\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result\
    \ = new long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    63L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n    }\n\
    \    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n \
    \   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of this polynomial\
    \ at x.\n    >>> evaluate([\nunittest\n{\n    alias candidate = derivative;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpejj753jn.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpejj753jn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.25L]\n    >>> integral([1L,\
    \ 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\nlong[] integral(long[] xs) \n{\n \
    \   long[] result = new long[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate\nunittest\n{\n    alias candidate = derivative;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaevr07mj.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaevr07mj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ (i + 1) * xs[i + 1];\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return the value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    63L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return the value of this polynomial\
    \ at x.\n   \nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph0xordqg.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph0xordqg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate\nunittest\n{\n    alias candidate = derivative;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgpsziht3.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgpsziht3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] res = new long[xs.length - 1];\n\
    \    for (int i = 0; i < res.length; i++)\n    {\n        res[i] = xs[i + 1] *\
    \ (i + 1);\n    }\n    return res;\n}\n/*\n    xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return the value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long res = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        res += xs[i] * pow(x, i);\n    }\n    return res;\n}\n/*\n    xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \    Return the value of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L,\
    \ 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong\
    \ evaluate(long[] xs, long x) \n{\n    long res = 0;\n    for (int i = 0; i <\
    \ xs.length; i++)\n    {\n        res += xs[i] * pow(x, i);\n    }\n    return\
    \ res;\n}\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n    Return the value of this polynomial at x.\n  \
    \  >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L,\
    \ 3L], 2L)\n\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy45m_0q5.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy45m_0q5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{ \n    return xs[1 .. $].array; \n}\n/*\n\
    \    Return the integral of a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.25L]\n    >>> integral([1L,\
    \ 2L, 3L])\n    [0L, 1L, 1.0L, 1.5L]\n*/\ndouble[] integral(long[] xs) \n{ \n\
    \    return [0.0] ~ xs.map!(a => a / (xs.length - xs.indexOf(a))); \n}\n/*\n \
    \   Return the value of a polynomial at a given point.\n    >>> polyval([3L, 1L,\
    \ 2L, 4L, 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\n\
    long polyval(long[] xs, long x) \n{ \n    return xs.zip(xs.map!(a => x ^ (xs.length\
    \ - xs.indexOf(a) - 1))).map!(a => a[0] * a[1]).sum; \n}\n/*\n    Return the value\
    \ of a polynomial at a given point.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n\
    \    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[]\
    \ xs, long x) \n{ \n    return xs.zip(xs.map!(a => x ^ (xs.length - xs.indexOf(a)\
    \ - 1))).map!(a => a[0] * a[1]).sum; \n}\n/*\n    Return the value of a polynomial\
    \ at a given point.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>>\
    \ polyval([1L, 2L, 3L], 2L)\n    17L\n\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq4j0wj_k.d(50): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq4j0wj_k.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral\
    \ of a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.25L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1.0L, 1.5L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result = new\
    \ long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n    \
    \    result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n    Return\
    \ the value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n\
    \    37L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result = result * x + xs[i];\n    }\n    return result;\n}\n\
    /*\n    Return the value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    37L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result = result * x + xs[i];\n    }\n    return\nunittest\n\
    {\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L,\
    \ 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe4zta4ru.d(69): Error: expression expected, not `unittest`\\\
    n/tmp/tmpe4zta4ru.d(70): Error: found `{` when expecting `;` following `return`\
    \ statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe4zta4ru.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++) \n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 3L)\n    28L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7dbnda4n.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7dbnda4n.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++) \n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return the value of this polynomial at x.\n    >>> value([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    63L\n    >>> value([1L, 2L, 3L], 2L)\n    17L\n  \
    \  \n*/\nlong value(long[] xs, long x) \n{\n    long result = 0;\n    for (int\
    \ i = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n \
    \   }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return the value of this polynomial\
    \ at x\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn1sz85hf.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn1sz85hf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] res = new long[xs.length - 1];\n\
    \    for (int i = 0; i < res.length; i++)\n    {\n        res[i] = (i + 1) * xs[i\
    \ + 1];\n    }\n    return res;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1L]\n*/\ndouble[] integral(long[] xs) \n{\n    double[] res = new double[xs.length\
    \ + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n        res[i + 1] =\
    \ xs[i] / (i + 1);\n    }\n    return res;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value\
    \ of this polynomial at x.\n    >>> value([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n\
    \    >>> value([1L, 2L, 3L], 2L)\n    17L\n*/\nlong value(long[] xs, long x) \n\
    {\n    long res = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n       \
    \ res += xs[i] * pow(x, i);\n    }\n    return res;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value\
    \ of this polynomial at x.\n    >>> value([\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptv916mk9.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptv916mk9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate\nunittest\n{\n    alias candidate = derivative;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvym69a9i.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvym69a9i.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\nlong[] integral(long[] xs) \n{\n    long[]\
    \ result = new long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++) \n\
    \    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> value([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> value([1L, 2L, 3L], 3L)\n    28L\n  \
    \  \n*/\nlong value(long[] xs, long x) \n{\n    long result = 0;\n    for (int\
    \ i = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n \
    \   }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpximucmvm.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpximucmvm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    return xs[1..$].map!((x, i) => (i +\
    \ 1) * x)();\n}\n/*\n    Return the integral of a polynomial.\n    >>> integral([3L,\
    \ 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.25L]\n  \
    \  >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\nlong[] integral(long[]\
    \ xs) \n{\n    return [0L] ~ xs.map!((x, i) => x / (i + 1))();\n}\n/*\n    Return\
    \ the value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n\
    \    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong polyval(long[]\
    \ xs, long x) \n{\n    return xs.map!((x, i) => x * pow(x, i))().sum;\n}\n/*\n\
    \    Return the value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong\
    \ polyval(long[] xs, long x) \n{\n    return xs.map!((x, i) => x * pow(x, i))().sum;\n\
    }\n/*\n    Return the value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L,\
    \ 4L, 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n    \n*/\n\
    long polyval(long[] xs, long x) \n{\n    return xs.map!((x, i) => x * pow(x, i))().sum;\n\
    }\n/*\n    Return the value\nunittest\n{\n    alias candidate = derivative;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps73oaeky.d(65): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps73oaeky.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n\
    \    >>> evaluate([1L, 2L, 3L], 3L)\n    28L\n    \n*/\nlong evaluate(long[] xs,\
    \ long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return integral of this polynomial in the same form.\n    >>>\
    \ integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 2L, 4L, 5L]\n    >>> integral([1L,\
    \ 2L, 3L])\n    [0L, 1L, 1L, 3L]\n    \n*/\nlong[] integral(long[] xs) \n{\n \
    \   long[] result = new long[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L,\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb7bnbyhi.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb7bnbyhi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (size_t i = 0; i < result.length; i++)\n    {\n        result[i]\
    \ = (i + 1) * xs[i + 1];\n    }\n    return result;\n}\n/*\n    Return the polynomial\
    \ with coefficients given by xs evaluated at x.\n    >>> evaluate([3L, 1L, 2L,\
    \ 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong\
    \ evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (size_t i = 0;\
    \ i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n    }\n  \
    \  return result;\n}\n/*\n    Return the polynomial with coefficients given by\
    \ xs evaluated at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n  \
    \  >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (size_t i = 0; i < xs.length; i++)\n \
    \   {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the polynomial with coefficients given by xs evaluated at x.\n   \
    \ >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L],\
    \ 2L)\n    17L\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n\
    \    for (size_t i = 0; i < xs.length; i++)\n    {\n        result += xs[i] *\
    \ pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the polynomial with\
    \ coefficients given by xs evaluated at x.\n    >>> evaluate\nunittest\n{\n  \
    \  alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpba1pnp1d.d(70): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpba1pnp1d.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (size_t i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = (i + 1) * xs[i + 1];\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result\
    \ = new long[xs.length + 1];\n    for (size_t i = 0; i < xs.length; i++) \n  \
    \  {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n\
    /*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return the value of this polynomial at x.\n    >>> value([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> value([1L, 2L, 3L], 2L)\n    17L\n*/\n\
    long value(long[] xs, long x) \n{\n    long result = 0;\n    for (size_t i = 0;\
    \ i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n    }\n \
    \   return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n  \
    \  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return the value of this\nunittest\n\
    {\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L,\
    \ 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2qp0adsw.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2qp0adsw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = (i + 1) * xs[i + 1];\n    }\n    return result;\n}\n/*\n    Return the integral\
    \ of a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.25L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1.0L, 1.5L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result = new\
    \ long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n    \
    \    result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n    Return\
    \ the value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n\
    \    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    Return the value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdpqt7opl.d(67): Error: found `unittest` instead of statement\\\
    n/tmp/tmpdpqt7opl.d(77): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdpqt7opl.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (size_t i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = (i + 1) * xs[i + 1];\n    }\n    return result;\n}\n/*\n    Return the integral\
    \ of a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1.0L, 1.5L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result = new\
    \ long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n    \
    \    result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n    Return\
    \ the value of a polynomial at a given point.\n    >>> evaluate([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    43L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    Return the value of a polynomial at a given point.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    43L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n   \n\
    unittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) ==\
    \ [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpybwb4scd.d(68): Error: found `unittest` instead of statement\\\
    n/tmp/tmpybwb4scd.d(78): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpybwb4scd.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral\
    \ of a polynomial, i.e. the antiderivative.\n    The constant of integration is\
    \ set to 0.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.25L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1.0L, 1.5L]\n  \
    \  \n*/\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length\
    \ + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1]\
    \ = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n    Return the value of\
    \ a polynomial at a given point.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n\
    \    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong polyval(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    Return the value of a polynomial at a given point.\n    >>> polyval([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong polyval(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i =\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr_sqffkn.d(69): Error: expression expected, not `unittest`\\\
    n/tmp/tmpr_sqffkn.d(70): Error: semicolon expected, not `{`\\n/tmp/tmpr_sqffkn.d(79):\
    \ Error: found `void` when expecting `;` following `for` condition\\n/tmp/tmpr_sqffkn.d(79):\
    \ Error: found `{` when expecting `)`\\n/tmp/tmpr_sqffkn.d(79): Error: found `}`\
    \ instead of statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"\
    /tmp/tmpr_sqffkn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2)\n    17L\n \
    \   \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate([3\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprscs2qfv.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprscs2qfv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result\
    \ = new long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    63L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n    }\n\
    \    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n \
    \   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of this polynomial\
    \ at x.\n    >>> evaluate([\nunittest\n{\n    alias candidate = derivative;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp87gsf381.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp87gsf381.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the polynomial\
    \ xs evaluated at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n  \
    \  >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n   \
    \ {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the polynomial xs multiplied by the polynomial ys.\n    >>> multiply([1L,\
    \ 2L, 3L], [4L, 5L, 6L])\n    [4L, 13L, 28L, 27L, 18L]\n    >>> multiply([1L,\
    \ 2L, 3L], [4L, 5L])\n    [4L, 13L, 28L, 15L]\n    >>> multiply([1L, 2L, 3L],\
    \ [4L])\n    [4L, 8L, 12L]\n    >>> multiply([1L, 2L, 3L], [])\n    []\n    >>>\
    \ multiply([], [4L, 5L, 6L])\n    []\n    >>> multiply([], [])\n    []\n*/\nlong[]\
    \ multiply(long[] xs, long[] ys) \n{\n    long[] result = new long[xs.length +\
    \ ys.length - 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n        for\
    \ (int j = 0; j < ys.length; j++) \n        {\n            result[i + j] += xs[i]\
    \ * ys[j];\n        }\n    }\n    return result;\n}\n/*\n    Return the polynomial\
    \ xs divided by the po\nunittest\n{\n    alias candidate = derivative;\n\n   \
    \ assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmyh0_zsb.d(65): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmyh0_zsb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate\nunittest\n{\n    alias candidate = derivative;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwb61hzmx.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwb61hzmx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the polynomial\
    \ of degree n with coefficients c.\n    >>> poly([1L, 2L, 3L], 2)\n    1L + 2L\
    \ * x + 3L * x^2\n    >>> poly([1L, 2L, 3L], 3)\n    1L + 2L * x + 3L * x^3\n\
    \    >>> poly([1L, 2L, 3L], 4)\n    1L + 2L * x + 3L * x^4\n*/\nlong poly(long[]\
    \ c, long n) \n{\n    long result = 0;\n    for (int i = 0; i < c.length; i++)\
    \ \n    {\n        result += c[i] * pow(n, i);\n    }\n    return result;\n}\n\
    /*\n    Return the polynomial of degree n with coefficients c.\n    >>> poly([1L,\
    \ 2L, 3L], 2)\n    1L + 2L * x + 3L * x^2\n    >>> poly([1L, 2L, 3L], 3)\n   \
    \ 1L + 2L * x + 3L * x^3\n    >>> poly([1L, 2L, 3L], 4)\n    1L + 2L * x + 3L\
    \ * x^4\n*/\nlong poly(long[] c, long n) \n{\n    long result = 0;\n    for (int\
    \ i = 0; i < c.length; i++) \n    {\n        result += c[i] * pow(n, i);\n   \
    \ }\n    return result;\n}\n/*\n    Return the polynomial of degree n with coefficients\
    \ c.\n    >>> poly([1L, 2L, 3L], 2)\n    1L + 2L * x + 3L * x^2\n    >>> poly([1L,\
    \ 2L, 3L], 3)\n    1L + 2L * x + 3L * x^3\n   \nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfn98cffo.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfn98cffo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result\
    \ = new long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n    }\n\
    \    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n \
    \   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return the polynomial that is\
    \ the product of this polynomial and\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpblzht1g7.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpblzht1g7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    if (xs.length == 0)\n    {\n       \
    \ return new long[0];\n    }\n    long[] result = new long[xs.length - 1];\n \
    \   for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n Return the integral of a polynomial.\n\
    \    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return integral of this polynomial in the same form.\n  \
    \  >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\n\
    double[] integral(long[] xs) \n{\n    double[] result = new double[xs.length +\
    \ 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] =\
    \ xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n Return the value of a polynomial\
    \ at a given point.\n    xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return the value of this polynomial at\
    \ x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L,\
    \ 2L, 3L], 3L)\n    28L\n    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long\
    \ result = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        result\
    \ += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n Return the\nunittest\n\
    {\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L,\
    \ 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6h_p7cnb.d(66): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6h_p7cnb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral\
    \ of a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1.0L]\n*/\ndouble[] integral(long[] xs) \n{\n    double[] result = new\
    \ double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n   \
    \     result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n   \
    \ Return the value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L],\
    \ 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return\nunittest\n{\n\
    \    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpot9jiwdx.d(69): Error: expression expected, not `unittest`\\\
    n/tmp/tmpot9jiwdx.d(70): Error: found `{` when expecting `;` following `return`\
    \ statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpot9jiwdx.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ (i + 1) * xs[i + 1];\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result\
    \ = new long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n    }\n\
    \    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n \
    \   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of this polynomial\
    \ at x.\n    >>> evaluate([\nunittest\n{\n    alias candidate = derivative;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz4akcltf.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz4akcltf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{ \n    return xs[1 .. $].map!(a => a * cast(long)($\
    \ - 1)).array;\n}\n/*\n    Return the integral of this polynomial in the same\
    \ form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.25L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n*/\nlong[]\
    \ integral(long[] xs) \n{ \n    return [0L] ~ xs.map!(a => a / cast(long)($)).array;\n\
    }\n/*\n    Return the value of this polynomial at x.\n    >>> polyval([3L, 1L,\
    \ 2L, 4L, 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\n\
    long polyval(long[] xs, long x) \n{ \n    return xs.map!(a => a * pow(x, $ - 1)).sum;\n\
    }\n/*\n    Return the value of the derivative of this polynomial at x.\n    >>>\
    \ polyval(derivative([3L, 1L, 2L, 4L, 5L]), 2L)\n    41L\n    >>> polyval(derivative([1L,\
    \ 2L, 3L]), 2L)\n    11L\n*/\nlong polyval_derivative(long[] xs, long x) \n{ \n\
    \    return polyval(derivative(xs), x);\n}\n/*\n    Return the value of the integral\
    \ of this polynomial at x.\n    >>> polyval(integral([3L, 1L, 2L, 4L, 5L]), 2L)\n\
    \    50.5L\n    >>> polyval(integral([1L, 2L, 3L]), 2L)\n    8L\n*/\nlong polyval_integral(long[]\
    \ xs, long x) \n{ \n    return polyval(integral(xs), x);\n}\n/*\n\nunittest\n\
    {\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L,\
    \ 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgv90ray_.d(15): Error: `$` is valid only inside [] of index or\
    \ slice\\n/tmp/tmpgv90ray_.d(26): Error: `$` is valid only inside [] of index\
    \ or slice\\n/tmp/tmpgv90ray_.d(37): Error: `$` is valid only inside [] of index\
    \ or slice\\n/tmp/tmpgv90ray_.d(61): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgv90ray_.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral\
    \ of a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1.0L, 1.5L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result = new\
    \ long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n    \
    \    result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n    Return\
    \ the value of a polynomial at a given point.\n    >>> evaluate([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    41L\n    >>> evaluate([1L, 2L, 3L], 3L)\n    22L\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    Return the value of a polynomial at a given point.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    41L\n    >>> evaluate([1L, 2L, 3L], 3L)\n    22L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n   \n\
    unittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) ==\
    \ [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwkingsk7.d(68): Error: found `unittest` instead of statement\\\
    n/tmp/tmpwkingsk7.d(78): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwkingsk7.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = (i + 1) * xs[i + 1];\n    }\n    return result;\n}\n/*\n    Return the integral\
    \ of a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.25L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1.0L, 1.5L]\n    \n*/\nlong[] integral(long[] xs) \n{\n    long[] result\
    \ = new long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of a polynomial at x.\n    >>> value([3L, 1L, 2L, 4L, 5L],\
    \ 2L)\n    49L\n    >>> value([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong value(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    Return the value of a polynomial at x.\n    >>> value([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    49L\n    >>> value([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong\
    \ value(long[] xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i <\
    \ xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\nunittest\n{\n\
    \    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3_ar0txy.d(70): Error: found `unittest` instead of statement\\\
    n/tmp/tmp3_ar0txy.d(80): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3_ar0txy.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = (i + 1) * xs[i + 1];\n    }\n    return result;\n}\n/*\n    Return the integral\
    \ of a polynomial.\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n*/\n\
    long[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial\
    \ at x.\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[] xs,\
    \ long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n\
    \    {\n        result = result * x + xs[i];\n    }\n    return result;\n}\n/*\n\
    \    Return the value of a polynomial at x.\n    >>> polyval([1L, 2L, 3L], 2L)\n\
    \    17L\n*/\nlong polyval(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++) \n    {\n        result = result * x + xs[i];\n\
    \    }\n    return result;\n}\n/*\n    Return the value of a polynomial at x.\n\
    \    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n   \
    \ {\n        result = result * x + xs[i];\n    }\n    return result;\n\nunittest\n\
    {\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L,\
    \ 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq6rbixvf.d(78): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq6rbixvf.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result\
    \ = new long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    71L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n    }\n\
    \    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n \
    \   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of this polynomial\
    \ at x.\n    >>> evaluate([\nunittest\n{\n    alias candidate = derivative;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpghqbett0.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpghqbett0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral\
    \ of a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1.0L]\n*/\ndouble[] integral(long[] xs) \n{\n    double[] result = new\
    \ double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n   \
    \     result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n   \
    \ Return the value of a polynomial at x.\n    >>> polynomial([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    49L\n    >>> polynomial([1L, 2L, 3L], 2L)\n    17L\n*/\nlong polynomial(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of a polynomial at x.\n    >>> polynomial([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    49L\n    >>> polynomial([1L, 2L, 3L], 2L)\n    17L\n*/\nlong polynomial(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3rnu9kag.d(67): Error: found `unittest` instead of statement\\\
    n/tmp/tmp3rnu9kag.d(77): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3rnu9kag.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral\
    \ of a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    \n*/\ndouble[] integral(long[] xs) \n\
    {\n    double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the value of a polynomial at x.\n    >>> value([3L, 1L, 2L,\
    \ 4L, 5L], 2L)\n    43L\n    \n*/\nlong value(long[] xs, long x) \n{\n    long\
    \ result = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        result\
    \ += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the value\
    \ of a polynomial at x.\n    >>> value([3L, 1L, 2L, 4L, 5L], 2L)\n    43L\n  \
    \  \n*/\nlong value(long[] xs, long x) \n{\n    long result = 0;\n    for (int\
    \ i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n  \
    \  }\n    return result;\n}\n/*\n    Return the value of a polynomial at x.\n\
    \    >>> value([3L, 1L, 2L, 4L, 5L], 2L)\n    43L\n    \n*/\nlong value(long[]\
    \ xs, long x) \n{\n    long result = 0;\n\nunittest\n{\n    alias candidate =\
    \ derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n\
    \    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L,\
    \ 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L,\
    \ 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphxlyeqwl.d(77): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphxlyeqwl.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 2L, 4L, 5L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L,\
    \ 1L, 3L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length\
    \ + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1]\
    \ = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n    Return the value of\
    \ a polynomial with coefficients xs evaluated at x.\n    >>> evaluate([3L, 1L,\
    \ 2L, 4L, 5L], 2L)\n    63L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\n\
    long evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i = 0;\
    \ i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n    }\n \
    \   return result;\n}\n/*\n    Return the value of a polynomial with coefficients\
    \ xs evaluated at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    63L\n  \
    \  >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoeewfidl.d(67): Error: found `unittest` when expecting `(`\\\
    n/tmp/tmpoeewfidl.d(77): Error: found `main` when expecting `.` following void\\\
    n/tmp/tmpoeewfidl.d(77): Error: found `(` when expecting identifier following\
    \ `void`.\\n/tmp/tmpoeewfidl.d(77): Error: found `)` when expecting `;` following\
    \ `for` condition\\n/tmp/tmpoeewfidl.d(77): Error: found `End of File` when expecting\
    \ `)`\\n/tmp/tmpoeewfidl.d(77): Error: found `End of File` instead of statement\\\
    n/tmp/tmpoeewfidl.d(77): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoeewfidl.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 2L, 4L, 5L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L,\
    \ 1L, 3L]\n    \n*/\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length\
    \ + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1]\
    \ = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    47L\n\
    \    >>> evaluate([1L, 2L, 3L], 3L)\n    28L\n    \n*/\nlong evaluate(long[] xs,\
    \ long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return coefficients of the polynomial obtained by multiplying\
    \ this polynomial with xs.\nunittest\n{\n    alias candidate = derivative;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpga3d6dtg.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpga3d6dtg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ (i + 1) * xs[i + 1];\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n*/\ndouble[] integral(long[] xs) \n{\n    double[]\
    \ result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x +\
    \ xs[2] * x^2 + ....\n    Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n    }\n\
    \    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n \
    \   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of this polynomial\
    \ at x.\n    >>> evaluate([\nunittest\n{\n    alias candidate = derivative;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnye0_8oi.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnye0_8oi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 2L, 4L, 5L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L,\
    \ 1L, 3L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length\
    \ + 1];\n    result[0] = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 3L)\n    28L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n    }\n\
    \    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n \
    \   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of this polynomial\
    \ at x.\n    >>>\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2ncc2hy0.d(59): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2ncc2hy0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 2L, 4L, 5L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L,\
    \ 1L, 3L]\n    \n*/\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length\
    \ + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1]\
    \ = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return the\
    \ value of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n\
    \    47L\n    >>> evaluate([1L, 2L, 3L], 3L)\n    28L\n    \n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return the value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpogbqzk6g.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpogbqzk6g.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    59L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate\nunittest\n{\n    alias candidate = derivative;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpea7_f_2c.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpea7_f_2c.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] ys = new long[xs.length - 1];\n\
    \    for (int i = 0; i < ys.length; i++)\n    {\n        ys[i] = xs[i + 1] * (i\
    \ + 1);\n    }\n    return ys;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n    double[] ys = new\
    \ double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n   \
    \     ys[i + 1] = xs[i] / (i + 1);\n    }\n    return ys;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return value of this polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    79L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong\
    \ polyval(long[] xs, long x) \n{\n    long y = 0;\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        y += xs[i] * pow(x, i);\n    }\n    return y;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return coefficients of po\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd7ol9lfw.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd7ol9lfw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the sum\
    \ of the polynomials xs and ys.\n    >>> add([1L, 2L, 3L], [3L, 4L, 5L])\n   \
    \ [4L, 6L, 8L]\n    >>> add([1L, 2L, 3L], [3L, 4L, 5L, 6L])\n    [4L, 6L, 8L,\
    \ 6L]\n    >>> add([1L, 2L, 3L, 4L], [3L, 4L, 5L])\n    [4L, 6L, 8L, 4L]\n*/\n\
    long[] add(long[] xs, long[] ys) \n{\n    long[] result = new long[max(xs.length,\
    \ ys.length)];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = (i < xs.length ? xs[i] : 0) + (i < ys.length ? ys[i] : 0);\n    }\n    return\
    \ result;\n}\n/*\n    Return the product of the polynomials xs and ys.\n    >>>\
    \ multiply([1L, 2L, 3L], [3L, 4L, 5L])\n    [3L, 10L, 22L, 26L, 15L]\n    >>>\
    \ multiply([1L, 2L, 3L], [3L, 4L, 5L, 6L])\n    [3L, 10L, 22L, 26L, 39L, 30L]\n\
    \    >>> multiply([1L, 2L, 3L, 4L], [3L, 4L, 5L])\n    [3L, 10L, 22L, 26L, 39L,\
    \ 30L]\n*/\nlong[] multiply(long[] xs, long[] ys) \n{\n    long[] result = new\
    \ long[xs.length + ys.\nunittest\n{\n    alias candidate = derivative;\n\n   \
    \ assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm_m548ik.d(52): Error: identifier expected following `.`, not\
    \ `unittest`\\n/tmp/tmpm_m548ik.d(53): Error: found `{` when expecting `]`\\n/tmp/tmpm_m548ik.d(54):\
    \ Error: semicolon expected, not `alias`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpm_m548ik.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++) \n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    101L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4yuyzwxe.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4yuyzwxe.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result\
    \ = new long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n   \
    \ }\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return list of roots of this\
    \ polynomial.\n   \nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsir_pykh.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsir_pykh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = (i + 1) * xs[i + 1];\n    }\n    return result;\n}\n/*\n    Return the integral\
    \ of a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.25L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1.0L, 1.5L]\n*/\ndouble[] integral(long[] xs) \n{\n    double[] result =\
    \ new double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of a polynomial.\n    >>> value([3L, 1L, 2L, 4L, 5L], 2L)\n\
    \    63L\n    >>> value([1L, 2L, 3L], 2L)\n    17L\n*/\nlong value(long[] xs,\
    \ long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of a polynomial.\n    >>> value([3L, 1L, 2L, 4L, 5L], 2L)\n\
    \    63L\n    >>> value([1L, 2L, 3L], 2L)\n    17L\n*/\nlong value(long[] xs,\
    \ long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L,\
    \ 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] res = new long[xs.length - 1];\n\
    \    for (int i = 0; i < res.length; i++)\n    {\n        res[i] = xs[i + 1] *\
    \ (i + 1);\n    }\n    return res;\n}\n/*\n    Return the integral of a polynomial.\n\
    \    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n*/\nlong[]\
    \ integral(long[] xs) \n{\n    long[] res = new long[xs.length + 1];\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        res[i + 1] = xs[i] / (i + 1);\n\
    \    }\n    return res;\n}\n/*\n    Return the value of a polynomial at a given\
    \ point.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    63L\n    >>> evaluate([1L,\
    \ 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long x) \n{\n    long res\
    \ = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        res += xs[i] *\
    \ pow(x, i);\n    }\n    return res;\n}\n/*\n    Return the value of a polynomial\
    \ at a given point.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    63L\n   \
    \ >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long x)\
    \ \n{\n    long res = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n   \
    \     res += xs[i] * pow(x, i);\n    }\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\nlong[] integral(long[] xs) \n{\n    long[]\
    \ result = new long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++) \n\
    \    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    47L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn0tefoq_.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn0tefoq_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ (i + 1) * xs[i + 1];\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return the\
    \ value of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n\
    \    49L\n    >>> evaluate([1L, 2L, 3L], 3L)\n    28L\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return the value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 3L)\n    28L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n    }\n\
    \    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n \
    \   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return the value of this polynomial\
    \ at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L,\
    \ 2L, 3L], 3L)\n\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbdztsi71.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbdztsi71.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] ys =\
    \ new long[n - 1];\n    for (int i = 1; i < n; i++) \n    {\n        ys[i - 1]\
    \ = xs[i] * i;\n    }\n    return ys;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\nlong[] integral(long[] xs) \n{\n    int\
    \ n = xs.length;\n    long[] ys = new long[n + 1];\n    for (int i = 0; i < n;\
    \ i++) \n    {\n        ys[i + 1] = xs[i] / (i + 1);\n    }\n    return ys;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    81L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long y = 0;\n    for (int\
    \ i = xs.length - 1; i >= 0; i--) \n    {\n        y = y * x + xs[i];\n    }\n\
    \    return y;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 +\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0rf8_p5h.d(62): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0rf8_p5h.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    int n = xs.length;\n    if (n == 0)\n\
    \    {\n        return new long[0];\n    }\n    long[] ys = new long[n - 1];\n\
    \    for (int i = 0; i < n - 1; i++)\n    {\n        ys[i] = (i + 1) * xs[i +\
    \ 1];\n    }\n    return ys;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1L]\n*/\ndouble[] integral(long[] xs) \n{\n    int n = xs.length;\n\
    \    double[] ys = new double[n + 1];\n    for (int i = 0; i < n; i++)\n    {\n\
    \        ys[i + 1] = xs[i] / (i + 1);\n    }\n    return ys;\n}\n/*\n    xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \    Return value of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L,\
    \ 5L], 2)\n    43L\n    >>> evaluate([1L, 2L, 3L], 2)\n    17L\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    int n = xs.length;\n    long y = 0;\n    for (int i = 0;\
    \ i < n; i++)\n    {\n        y = y * x + xs[i];\n    }\n    return y;\n}\n/*\n\
    \    xs represent coefficients of a polynomial.\n\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjjpvtlaq.d(65): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjjpvtlaq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ (i + 1) * xs[i + 1];\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    63L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate\nunittest\n{\n    alias candidate = derivative;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa43ymy0p.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa43ymy0p.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] ys = new long[xs.length - 1];\n\
    \    for (int i = 0; i < ys.length; i++)\n    {\n        ys[i] = (i + 1) * xs[i\
    \ + 1];\n    }\n    return ys;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.25L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] ys = new long[xs.length\
    \ + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n        ys[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return ys;\n}\n/*\n    xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return the value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    41L\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long y = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n  \
    \      y += xs[i] * pow(x, i);\n    }\n    return y;\n}\n/*\n    xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \    Return the value of this polyn\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp31ciymr1.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp31ciymr1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral\
    \ of a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1.0L, 1.5L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n    double[] result\
    \ = new double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++) \n   \
    \ {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n\
    /*\n    Return the value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong\
    \ polyval(long[] xs, long x) \n{\n    long result = 0;\n    long xpow = 1;\n \
    \   for (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i] * xpow;\n\
    \        xpow *= x;\n    }\n    return result;\n}\n/*\n    Return the value of\
    \ a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n   \
    \ >>> polyval([1L, 2L, 3L], 2L)\n    17L\n    \n*/\ndouble polyval(double[] xs,\
    \ double x) \n{\n    double result = 0;\n    double xpow = 1;\n    for (int i\
    \ = 0; i <\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5ec05hq0.d(71): Error: expression expected, not `unittest`\\\
    n/tmp/tmp5ec05hq0.d(72): Error: found `{` when expecting `;` following `for` condition\\\
    n/tmp/tmp5ec05hq0.d(73): Error: expression expected, not `alias`\\n/tmp/tmp5ec05hq0.d(73):\
    \ Error: found `candidate` when expecting `)`\\n/tmp/tmp5ec05hq0.d(73): Error:\
    \ found `=` instead of statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp5ec05hq0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the polynomial\
    \ that is the integral of the given polynomial.\n    >>> integral([3L, 1L, 2L,\
    \ 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.25L]\n    >>> integral([1L,\
    \ 2L, 3L])\n    [0L, 1L, 1.0L, 1.5L]\n*/\nlong[] integral(long[] xs) \n{\n   \
    \ long[] result = new long[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++) \n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the value of the given polynomial at the given point.\n    >>>\
    \ value_at(3L, [3L, 1L, 2L, 4L, 5L])\n    462L\n    >>> value_at(1L, [1L, 2L,\
    \ 3L])\n    6L\n*/\nlong value_at(long x, long[] xs) \n{\n    long result = 0;\n\
    \    for (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x,\
    \ i);\n    }\n    return result;\n}\n/*\n    Return the value of the given polynomial\
    \ at the given point.\n    >>> value_at(3L, [3L, 1L, 2L, 4L, 5L])\n    462L\n\
    \    >>> value_at(1L, [1L, 2L, 3L])\n    6L\n*/\nlong value_at(long x, long[]\
    \ xs) \n{\n    long result = 0;\n    for (int i = 0; i < xs\nunittest\n{\n   \
    \ alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoi8980br.d(65): Error: found `unittest` when expecting `;` following\
    \ `for` condition\\n/tmp/tmpoi8980br.d(75): Error: found `void` when expecting\
    \ `)`\\n/tmp/tmpoi8980br.d(75): Error: found `{` when expecting `;` following\
    \ statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoi8980br.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] ys = new long[xs.length - 1];\n\
    \    for (int i = 0; i < ys.length; i++)\n    {\n        ys[i] = xs[i + 1] * (i\
    \ + 1);\n    }\n    return ys;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1L]\n    \n*/\nlong[] integral(long[] xs) \n{\n    long[] ys = new long[xs.length\
    \ + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n        ys[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return ys;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return the value of this polynomial\
    \ at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L,\
    \ 2L, 3L], 2L)\n    17L\n    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long\
    \ y = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        y += xs[i] *\
    \ pow(x, i);\n    }\n    return y;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return the value of this po\n\
    unittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) ==\
    \ [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_cv1z72s.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_cv1z72s.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    return result;\n}\n/*\n    xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result\
    \ = new long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n      \
    \  result[i + 1] = xs[i] / (i + 1);\n    return result;\n}\n/*\n    xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \    Return value of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    61L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \        result += xs[i] * pow(x, i);\n    return result;\n}\n/*\n    xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \    Return value of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8bj2hs3o.d(52): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8bj2hs3o.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return the value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    45L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return the value of this polynomial\
    \ at x.\n   \nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3pqwrbaa.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3pqwrbaa.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    return xs[1 .. $].map!((x, i) => (i\
    \ + 1) * x)();\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial in\
    \ the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 2L,\
    \ 4L, 5L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 3L]\n    \n*/\nlong[]\
    \ integral(long[] xs) \n{\n    return [0L] ~ xs.map!((x, i) => x / (i + 1))();\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return the value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    59L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    return xs.map!((x, i) =>\
    \ x * pow(x, i))().sum;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return the value of this polynomial\
    \ at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    59L\n    >>> evaluate([1L,\
    \ 2L, 3L], 2L)\n    17L\n    \n*/\nlong evaluate(long[] xs, long x) \n{\n    return\
    \ xs.map!((x, i) => x * pow(x, i))().sum;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n   \nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1ypsj0rg.d(59): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1ypsj0rg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2)\n    59L\n    >>> evaluate([1L, 2L, 3L], 2)\n    17L\n \
    \   \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate([3\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe02bjse4.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe02bjse4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 2L, 4L, 5L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L,\
    \ 1L, 3L]\n    \n*/\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length\
    \ + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1]\
    \ = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    91L\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong evaluate(long[] xs,\
    \ long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n\
    \    {\n        result = result * x + xs[i];\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L,\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3k2c8aie.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3k2c8aie.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral\
    \ of a polynomial.\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n   \
    \ >>> integral([1L, 2L, 3L, 4L])\n    [0L, 1L, 1L, 1L, 1L]\n*/\nlong[] integral(long[]\
    \ xs) \n{\n    long[] result = new long[xs.length + 1];\n    for (int i = 0; i\
    \ < xs.length; i++) \n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n\
    \    return result;\n}\n/*\n    Return the value of a polynomial at x.\n    >>>\
    \ evaluate([1L, 2L, 3L], 5L)\n    76L\n    >>> evaluate([1L, 2L, 3L], 0L)\n  \
    \  3L\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n    Return the value of a polynomial at x.\n\
    \    >>> evaluate([1L, 2L, 3L], 5L)\n    76L\n    >>> evaluate([1L, 2L, 3L], 0L)\n\
    \    3L\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n    Return the value of a polynomial at x.\n\
    \    >>> evaluate([1L, 2L, 3\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp93y7zxkq.d(70): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp93y7zxkq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{ \n    return xs[1 .. $].array; \n}\n/*\n\
    \    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return integral of this polynomial in the same form.\n   \
    \ >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.25L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n\
    */\nlong[] integral(long[] xs) \n{ \n    long[] ys = new long[xs.length + 1];\
    \ \n    ys[0] = 0; \n    foreach (i, x; xs) \n    { \n        ys[i + 1] = x /\
    \ (i + 1); \n    } \n    return ys; \n}\n/*\n    xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong evaluate(long[] xs,\
    \ long x) \n{ \n    long y = 0; \n    foreach (i, xi; xs) \n    { \n        y\
    \ += xi * pow(x, i); \n    } \n    return y; \n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n\
    \    >>> evaluate([1L, 2L, 3L\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpejd6zh5k.d(56): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpejd6zh5k.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ (i + 1) * xs[i + 1];\n    }\n    return result;\n}\n/*\n    Return the value\
    \ of the polynomial at x.\n    >>> value([3L, 1L, 2L, 4L, 5L], 2L)\n    43L\n\
    \    >>> value([1L, 2L, 3L], 3L)\n    20L\n*/\nlong value(long[] xs, long x) \n\
    {\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n    \
    \    result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return\
    \ the value of the polynomial at x.\n    >>> value([3L, 1L, 2L, 4L, 5L], 2L)\n\
    \    43L\n    >>> value([1L, 2L, 3L], 3L)\n    20L\n*/\nlong value(long[] xs,\
    \ long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of the polynomial at x.\n    >>> value([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    43L\n    >>> value([1L, 2L, 3L], 3L)\n    20L\n*/\nlong value(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of the polynomial at x.\n    >>> value([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    43L\n\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzxtex5vg.d(70): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzxtex5vg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral\
    \ of a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1.0L]\n*/\ndouble[] integral(long[] xs) \n{\n    double[] result = new\
    \ double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n   \
    \     result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n   \
    \ Return the value of a polynomial at x.\n    >>> polynomial([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    49L\n    >>> polynomial([1L, 2L, 3L], 2L)\n    17L\n*/\nlong polynomial(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of a polynomial at x.\n    >>> polynomial([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    49L\n    >>> polynomial([1L, 2L, 3L], 2L)\n    17L\n*/\nlong polynomial(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3n3jpd1_.d(67): Error: found `unittest` instead of statement\\\
    n/tmp/tmp3n3jpd1_.d(77): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3n3jpd1_.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    return xs[1 .. $].array;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return integral of this polynomial in the same form.\n    >>> integral([3L,\
    \ 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n   \
    \ >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[]\
    \ xs) \n{\n    double[] result = new double[xs.length + 1];\n    result[0] = 0.0;\n\
    \    foreach (i, x; xs)\n    {\n        result[i + 1] = (double)x / (i + 1);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L,\
    \ 2L, 3L], 3L)\n    28L\n    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long\
    \ result = 0;\n    foreach (i, xi; xs)\n    {\n        result += xi * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L,\
    \ 2L, 3L], 3L)\n    28L\n    \n*/\nlong evaluate(long[] x\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp_tah667.d(33): Error: C style cast illegal, use `cast(double)x`\\\
    n/tmp/tmpp_tah667.d(67): Error: found `unittest` when expecting `)`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp_tah667.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> polyval([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong polyval(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnkfvw_5n.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnkfvw_5n.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1.0L, 1.5L]\n*/\nlong[] integral(long[] xs) \n{\n    long[]\
    \ result = new long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++) \n\
    \    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the value of this polynomial at x.\n    >>> value([3L, 1L, 2L,\
    \ 4L, 5L], 2L)\n    49L\n    >>> value([1L, 2L, 3L], 3L)\n    20L\n*/\nlong value(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    Return the value of this polynomial at x.\n    >>> value([3L, 1L, 2L,\
    \ 4L, 5L], 2L)\n    49L\n    >>> value([1L, 2L, 3L], 3L)\n    20L\n*/\nlong value(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n   \nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyvrka_1n.d(68): Error: found `unittest` instead of statement\\\
    n/tmp/tmpyvrka_1n.d(78): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyvrka_1n.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{ \n    if (xs.length == 0) \n    { \n    \
    \    return xs; \n    } \n    long[] result = new long[xs.length - 1]; \n    for\
    \ (size_t i = 0; i < result.length; i++) \n    { \n        result[i] = (i + 1)\
    \ * xs[i + 1]; \n    } \n    return result; \n} \nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] dxs = new long[xs.length - 1];\n\
    \    for (int i = 0; i < dxs.length; i++)\n    {\n        dxs[i] = xs[i + 1] *\
    \ (i + 1);\n    }\n    return dxs;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n    double[] ixs =\
    \ new double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        ixs[i + 1] = xs[i] / (i + 1);\n    }\n    return ixs;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return value of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    37L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong\
    \ evaluate(long[] xs, long x) \n{\n    long y = 0;\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        y += xs[i] * pow(x, i);\n    }\n    return y;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return value of this\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpww3bslg3.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpww3bslg3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n*/\ndouble[] integral(long[] xs) \n{\n    double[]\
    \ result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x +\
    \ xs[2] * x^2 + ....\n    Return value of this polynomial at x.\n    >>> polyval([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong polyval(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n   \
    \ }\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of this polynomial\
    \ at x\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5v2iw9d3.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5v2iw9d3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return the\
    \ value of this polynomial evaluated at x.\n    >>> evaluate([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    57L\n    >>> evaluate([1L, 2L, 3L], 3L)\n    28L\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return the value of this polynomial evaluated at x.\n    >>>\
    \ evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    57L\n    >>> evaluate([1L, 2L, 3L],\
    \ 3L)\n    28L\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x,\
    \ i);\n    }\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return the value of this polynomial\
    \ evaluated at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    57L\n    >>>\
    \ evaluate([1L, 2L, 3L], 3\nunittest\n{\n    alias candidate = derivative;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5u6hwlel.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5u6hwlel.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    foreach (i, x; xs) \n    {\n        if (i > 0) \n        {\n      \
    \      result[i - 1] = i * x;\n        }\n    }\n    return result;\n}\n/*\n \
    \   Return polynomial in the form of a list of coefficients.\n    >>> poly([1L,\
    \ 2L, 3L])\n    [1L, 2L, 3L]\n    >>> poly([1L, 2L, 3L], x=2L)\n    [1L, 4L, 12L]\n\
    \    >>> poly([1L, 2L, 3L], x=2L, n=4)\n    [1L, 4L, 12L, 24L]\n    >>> poly([1L,\
    \ 2L, 3L], x=2L, n=2)\n    [1L, 4L]\n*/\nlong[] poly(long[] xs, long x = 1L, long\
    \ n = 0L) \n{\n    if (n == 0L) \n    {\n        n = xs.length;\n    }\n    long[]\
    \ result = new long[n];\n    foreach (i, x; xs) \n    {\n        result[i] = x\
    \ * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the sum of two polynomials.\n\
    \    >>> add_poly([1L, 2L, 3L], [1L, 2L, 3L])\n    [2L, 4L, 6L]\n    >>> add_poly([1L,\
    \ 2L, 3L], [1L, 2L, 3L], x=2L)\n    [2L, 8L, 18L]\n    >>> add_poly([1L, 2L, 3L],\
    \ [1L, 2L, 3L], x=2L, n=4)\n    [2L, 8L, 18L, 24L]\n    >>> add_poly([1L, 2L,\
    \ 3L], [1L, 2L, 3L], x=2L, n=2)\n    [2L, 8L]\n*/\nlong\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpojlm5hha.d(61): Error: no identifier for declarator `long`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpojlm5hha.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return the\
    \ value of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n\
    \    77L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return the value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    77L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n    }\n\
    \    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n \
    \   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return the value of this polynomial\
    \ at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    77L\n    >>> evaluate([1L,\
    \ 2L, 3L], 2L)\n\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2ncy41of.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2ncy41of.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n*/\ndouble[] integral(long[] xs) \n{\n    double[]\
    \ result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x +\
    \ xs[2] * x^2 + ....\n    Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n    }\n\
    \    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n \
    \   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of this polynomial\
    \ at x.\n    >>> evaluate([\nunittest\n{\n    alias candidate = derivative;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppjpte3ko.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppjpte3ko.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    long n = xs.length;\n    for (long i = 0; i < n - 1; i++) \n    {\n\
    \        result[i] = (i + 1) * xs[i + 1];\n    }\n    return result;\n}\n/*\n\
    \    Return a list of coefficients of the polynomial\n    x^n + a[0] * x^(n-1)\
    \ + a[1] * x^(n-2) + ... + a[n-1]\n    evaluated at x = x0.\n    >>> horner([1L,\
    \ 2L, 3L], 5L)\n    76L\n    >>> horner([1L, 2L, 3L], 0L)\n    3L\n    >>> horner([1L,\
    \ 2L, 3L], -7L)\n    -142L\n    >>> horner([1L, 2L, 3L], 1L)\n    6L\n    >>>\
    \ horner([1L, 2L, 3L], -4L)\n    -25L\n*/\nlong horner(long[] a, long x0) \n{\n\
    \    long result = 0;\n    long n = a.length;\n    for (long i = n - 1; i >= 0;\
    \ i--) \n    {\n        result = result * x0 + a[i];\n    }\n    return result;\n\
    }\n/*\n    Return the polynomial\n    x^n + a[0] * x^(n-1) + a[1] * x^(n-2) +\
    \ ... + a[n-1]\n    evaluated at x = x0.\n    >>> horner([1L, 2L, 3L], 5L)\n \
    \   76L\n    >>> horner([1L, 2L, 3L], 0L)\n    3L\n    >>> horner([1L, 2L, 3L],\
    \ -7L)\n    -142L\n    >>> horner([1L, 2L, 3L], 1L)\n    6L\n    >>> horner([1L,\
    \ 2L, 3L], -4L)\n    -25L\n*/\nlong horner\nunittest\n{\n    alias candidate =\
    \ derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n\
    \    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L,\
    \ 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L,\
    \ 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp422mg7np.d(64): Error: semicolon expected, not `unittest`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp422mg7np.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    return xs[1 .. $].array;\n}\n/*\n  \
    \  xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n    Return integral of this polynomial in the same form.\n    >>>\
    \ integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L,\
    \ 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n*/\nlong[] integral(long[]\
    \ xs) \n{\n    long[] result = new long[xs.length + 1];\n    result[0] = 0;\n\
    \    foreach (i, x; xs)\n    {\n        result[i + 1] = x / cast(long)(i + 1);\n\
    \    }\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of this polynomial\
    \ at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L,\
    \ 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    foreach (i, xi; xs)\n    {\n        result += xi * pow(x, i);\n  \
    \  }\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of this polynomial\
    \ at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L,\
    \ 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long x)\nunittest\n{\n \
    \   alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8cgnyger.d(64): Error: semicolon expected following function\
    \ declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8cgnyger.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral\
    \ of a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1.0L, 1.5L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result = new\
    \ long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n    \
    \    result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n    Return\
    \ the value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2)\n\
    \    51L\n    >>> polyval([1L, 2L, 3L], 2)\n    17L\n*/\nlong polyval(long[] xs,\
    \ long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L,\
    \ 5L], 2)\n    51L\n    >>> polyval([1L, 2L, 3L], 2)\n    17L\n*/\nlong polyval(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8u_z5vyj.d(69): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8u_z5vyj.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral\
    \ of a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1.0L]\n*/\ndouble[] integral(long[] xs) \n{\n    double[] result = new\
    \ double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n   \
    \     result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n   \
    \ Return the value of a polynomial at x.\n    >>> value([3L, 1L, 2L, 4L, 5L],\
    \ 2L)\n    49L\n    >>> value([1L, 2L, 3L], 3L)\n    20L\n*/\nlong value(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of a polynomial at x.\n    >>> value([3L, 1L, 2L, 4L, 5L],\
    \ 2L)\n    49L\n    >>> value([1L, 2L, 3L], 3L)\n    20L\n*/\nlong value(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    unittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) ==\
    \ [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsjd2b73r.d(70): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsjd2b73r.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    63L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate\nunittest\n{\n    alias candidate = derivative;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp46ehkfzt.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp46ehkfzt.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral\
    \ of a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.25L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1.0L, 1.5L]\n    \n*/\nlong[] integral(long[] xs) \n{\n    long[] result\
    \ = new long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of a polynomial at a point.\n    >>> polyval([3L, 1L, 2L,\
    \ 4L, 5L], 2L)\n    55L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n    \n*/\n\
    long polyval(long[] xs, long x) \n{\n    long result = 0;\n    for (int i = 0;\
    \ i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n    }\n \
    \   return result;\n}\n/*\n    Return the value of a polynomial at a point.\n\
    \    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n    55L\n    >>> polyval([1L, 2L,\
    \ 3L], 2L)\n    17L\n    \n*/\nlong polyval(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i\n\
    unittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) ==\
    \ [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp51dlyshs.d(70): Error: found `unittest` when expecting `,`\\\
    n/tmp/tmp51dlyshs.d(80): Error: found `void` when expecting `,`\\n/tmp/tmp51dlyshs.d(80):\
    \ Error: found `{` when expecting `,`\\n/tmp/tmp51dlyshs.d(80): Error: expression\
    \ expected, not `}`\\n/tmp/tmp51dlyshs.d(80): Error: found `End of File` when\
    \ expecting `,`\\n/tmp/tmp51dlyshs.d(80): Error: found `End of File` when expecting\
    \ `]`\\n/tmp/tmp51dlyshs.d(80): Error: found `End of File` when expecting `;`\
    \ following statement\\n/tmp/tmp51dlyshs.d(80): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmp51dlyshs.d(80): Error:\
    \ found `End of File` when expecting `}` following compound statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp51dlyshs.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] ys = new long[xs.length - 1];\n\
    \    for (int i = 0; i < ys.length; i++)\n    {\n        ys[i] = (i + 1) * xs[i\
    \ + 1];\n    }\n    return ys;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1L]\n*/\ndouble[] integral(long[] xs) \n{\n    double[] ys = new double[xs.length\
    \ + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n        ys[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return ys;\n}\n/*\n    xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of\
    \ this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    47L\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long y = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n  \
    \      y += xs[i] * pow(x, i);\n    }\n    return y;\n}\n/*\n    xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \    Return value of this polynomial at\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl1xq3vry.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl1xq3vry.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] ys = new long[xs.length - 1];\n\
    \    for (int i = 0; i < ys.length; i++)\n        ys[i] = xs[i + 1] * (i + 1);\n\
    \    return ys;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial in\
    \ the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\n\
    double[] integral(long[] xs) \n{\n    double[] ys = new double[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++)\n        ys[i + 1] = xs[i] / (i + 1);\n\
    \    return ys;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial at x.\n\
    \    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L,\
    \ 3L], 2L)\n    17L\n    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long\
    \ y = 0;\n    for (int i = 0; i < xs.length; i++)\n        y += xs[i] * pow(x,\
    \ i);\n    return y;\n}\n/*\n xs represent coefficients of a polynomial.\n   \
    \ xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate([3L, 1L, 2L, 4\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp49f1ahb1.d(54): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp49f1ahb1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] res = new long[xs.length - 1];\n\
    \    for (int i = 0; i < res.length; i++)\n    {\n        res[i] = xs[i + 1] *\
    \ (i + 1);\n    }\n    return res;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n    double[] res =\
    \ new double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        res[i + 1] = (double)xs[i] / (i + 1);\n    }\n    return res;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    63L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long res = 0;\n    for (int\
    \ i = 0; i < xs.length; i++)\n    {\n        res += xs[i] * pow(x, i);\n    }\n\
    \    return res;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial at x.\n\
    \   \nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcloesl4f.d(37): Error: C style cast illegal, use `cast(double)xs[i]`\\\
    n/tmp/tmpcloesl4f.d(60): Error: unterminated /* */ comment\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcloesl4f.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the sum\
    \ of the polynomials represented by xs and ys.\n    >>> add([1L, 2L, 3L], [3L,\
    \ 4L, 5L])\n    [4L, 6L, 8L]\n    >>> add([1L, 2L, 3L], [3L, 4L])\n    [4L, 6L,\
    \ 3L]\n    >>> add([1L, 2L], [3L, 4L, 5L])\n    [4L, 6L, 5L]\n*/\nlong[] add(long[]\
    \ xs, long[] ys) \n{\n    long[] result = new long[max(xs.length, ys.length)];\n\
    \    for (int i = 0; i < result.length; i++) \n    {\n        result[i] = (i <\
    \ xs.length ? xs[i] : 0) + (i < ys.length ? ys[i] : 0);\n    }\n    return result;\n\
    }\n/*\n    Return the product of the polynomials represented by xs and ys.\n \
    \   >>> multiply([1L, 2L, 3L], [3L, 4L, 5L])\n    [3L, 10L, 22L, 26L, 15L]\n \
    \   >>> multiply([1L, 2L, 3L], [3L, 4L])\n    [3L, 10L, 13L, 8L]\n    >>> multiply([1L,\
    \ 2L], [3L, 4L, 5L])\n    [3L, 10L, 13L, 8L]\n*/\nlong[] multiply(long[] xs, long[]\
    \ ys) \n{\n    long[] result = new long[xs.length + ys.length - 1];\n    for (int\
    \ i = 0; i < xs.length; i++) \n    {\n        for (int j = 0; j < y\nunittest\n\
    {\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L,\
    \ 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyui3tkdq.d(55): Error: found `unittest` when expecting `;` following\
    \ `for` condition\\n/tmp/tmpyui3tkdq.d(65): Error: found `void` when expecting\
    \ `)`\\n/tmp/tmpyui3tkdq.d(65): Error: found `{` when expecting `;` following\
    \ statement\\n/tmp/tmpyui3tkdq.d(65): Error: found `End of File` when expecting\
    \ `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmpyui3tkdq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n*/\ndouble[] integral(long[] xs) \n{\n    double[]\
    \ result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x +\
    \ xs[2] * x^2 + ....\n    Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    81L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n   \
    \ }\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of this polynomial\
    \ at x.\n   \nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb4ew1mn_.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb4ew1mn_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    return xs[1 .. $].map!(a => a * cast(long)(xs.length\
    \ - 1)).array;\n}\n/*\n    Return the value of a polynomial at a given point.\n\
    \    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[] xs, long\
    \ x) \n{\n    long result = 0L;\n    foreach (i, a; xs)\n    {\n        result\
    \ += a * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the value of\
    \ a polynomial at a given point.\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong polyval(long[] xs, long x) \n{\n    long result = 0L;\n    foreach (i,\
    \ a; xs)\n    {\n        result += a * pow(x, i);\n    }\n    return result;\n\
    }\n/*\n    Return the value of a polynomial at a given point.\n    >>> polyval([1L,\
    \ 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[] xs, long x) \n{\n    long result\
    \ = 0L;\n    foreach (i, a; xs)\n    {\n        result += a * pow(x, i);\n   \
    \ }\n    return result;\n}\n/*\n    Return the value of a polynomial at a given\
    \ point.\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[]\
    \ xs, long x) \n{\n    long result = 0L;\n    foreach (i, a; xs)\n    {\n    \
    \    result += a * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the\
    \ value of a polynomial at a given point.\n    >>> polyval([1L, 2L, 3L], 2L)\n\
    \    17L\n*/\nlong polyval(long[] xs, long x) \n{\n    long result = 0L;\n   \
    \ foreach (i\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe17nrqao.d(82): Error: no identifier for declarator `i`\\n/tmp/tmpe17nrqao.d(82):\
    \ Error: found `unittest` when expecting `;`\\n/tmp/tmpe17nrqao.d(92): Error:\
    \ found `void` when expecting `)`\\n/tmp/tmpe17nrqao.d(92): Error: found `{` when\
    \ expecting `;` following statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpe17nrqao.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (size_t i = 0; i < result.length; i++)\n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 2L, 4L, 5L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L,\
    \ 1L, 3L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length\
    \ + 1];\n    for (size_t i = 0; i < xs.length; i++)\n    {\n        result[i +\
    \ 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (size_t i = 0; i < xs.length; i++)\n \
    \   {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return value of this polynomial at x.\n    >>> evaluate([3\n\
    unittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) ==\
    \ [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6kvf35ym.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6kvf35ym.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\nlong[] integral(long[] xs) \n{\n    long[]\
    \ result = new long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++) \n\
    \    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprl1qvpx9.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprl1qvpx9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral\
    \ of a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1.0L]\n*/\ndouble[] integral(long[] xs) \n{\n    double[] result = new\
    \ double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n   \
    \     result[i + 1] = (double)xs[i] / (i + 1);\n    }\n    return result;\n}\n\
    /*\n    Return the value of a polynomial at a given point.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    47L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n    }\n\
    \    return result;\n}\n/*\n    Return the value of a polynomial at a given point.\n\
    \    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    47L\n    >>> evaluate([1L, 2L,\
    \ 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzn49fpjp.d(34): Error: C style cast illegal, use `cast(double)xs[i]`\\\
    n/tmp/tmpzn49fpjp.d(69): Error: expression expected, not `unittest`\\n/tmp/tmpzn49fpjp.d(70):\
    \ Error: found `{` when expecting `;` following `return` statement\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzn49fpjp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    return xs[1 .. $].map!(a => a * cast(long)(xs.length\
    \ - 1));\n}\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5gy785ej.d(15): Error: no property `map` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5gy785ej.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    return xs[1..$].map!(a => a * cast(long)(xs.length\
    \ - 1));\n}\n/*\n    Return polynomial evaluated at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    47L\n    >>> evaluate([1L, 2L, 3L], 3L)\n    28L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    foreach (i,\
    \ a; xs)\n    {\n        result += a * pow(x, i);\n    }\n    return result;\n\
    }\n/*\n    Return polynomial evaluated at x.\n    >>> evaluate([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    47L\n    >>> evaluate([1L, 2L, 3L], 3L)\n    28L\n*/\nlong evaluate2(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    foreach (i, a; xs)\n    {\n     \
    \   result += a * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return polynomial\
    \ evaluated at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    47L\n    >>>\
    \ evaluate([1L, 2L, 3L], 3L)\n    28L\n*/\nlong evaluate3(long[] xs, long x) \n\
    {\n    long result = 0;\n    foreach (i, a; xs)\n    {\n        result += a *\
    \ pow(x, i);\n    }\n    return result;\n}\n/*\n    Return polynomial evaluated\
    \ at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    47L\n    >>> evaluate([1L,\
    \ 2L, 3L], 3L)\n    28L\n*/\nlong evaluate4(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    foreach (i, a; xs)\n    {\n        result += a * pow(x, i);\n    }\n\
    \nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvxvyxy_1.d(80): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvxvyxy_1.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    101L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate\nunittest\n{\n    alias candidate = derivative;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdto2a11x.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdto2a11x.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral\
    \ of a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.0L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1.0L, 1.0L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result = new\
    \ long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n    \
    \    result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n    Return\
    \ the value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n\
    \    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    Return the value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvury9zmg.d(67): Error: found `unittest` instead of statement\\\
    n/tmp/tmpvury9zmg.d(77): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvury9zmg.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral\
    \ of a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 2L, 4L, 5L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 3L]\n*/\nlong[]\
    \ integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n    for\
    \ (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1] = xs[i] / (i\
    \ + 1);\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial\
    \ at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> polyval([1L,\
    \ 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial\
    \ at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> polyval([1L,\
    \ 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n*/\ndouble[] integral(long[] xs) \n{\n    double[]\
    \ result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x +\
    \ xs[2] * x^2 + ....\n    Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n    }\n\
    \    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n \
    \   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of this polynomial\
    \ at x.\n    >>> evaluate([\nunittest\n{\n    alias candidate = derivative;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzw9ldolj.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzw9ldolj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{ \n    long[] result = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return the\
    \ value of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n\
    \    45L\n    >>> evaluate([1L, 2L, 3L], 3L)\n    18L\n    \n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return the integral of this polynomial in the same form.\n\
    \    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 2L, 4L, 5L]\n    >>>\
    \ integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 3L]\n    \n*/\nlong[] integral(long[]\
    \ xs) \n{\n    long[] result = new long[xs.length + 1];\n    for (int i = 0; i\
    \ < xs.length; i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return the value of the integral of this\
    \ polynomial at x.\n    >>> integrate([\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpahdz85je.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpahdz85je.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result\
    \ = new long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n   \
    \ }\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of this polynomial\
    \ at x.\n   \nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkb07y588.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkb07y588.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    return result;\n}\n/*\n    Return the integral of a polynomial.\n\
    \    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1.0L]\n*/\ndouble[]\
    \ integral(long[] xs) \n{\n    double[] result = new double[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++)\n        result[i + 1] = xs[i] / (i +\
    \ 1);\n    return result;\n}\n/*\n    Return the value of a polynomial at x.\n\
    \    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> polyval([1L, 2L,\
    \ 3L], 2L)\n    17L\n*/\nlong polyval(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++)\n        result += xs[i] * pow(x,\
    \ i);\n    return result;\n}\n/*\n    Return the value of a polynomial at x.\n\
    \    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> polyval([1L, 2L,\
    \ 3L], 2L)\n    17L\n*/\nlong polyval(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++)\n        result += xs[i] * pow(x,\
    \ i);\n    return result;\n}\n/*\n    Return the value of a polynomial at x.\n\
    \    >>> polyval\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxecny_94.d(62): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxecny_94.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral\
    \ of a polynomial.\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n   \
    \ >>> integral([1L, 2L, 3L, 4L])\n    [0L, 1L, 1L, 1L, 1L]\n*/\nlong[] integral(long[]\
    \ xs) \n{\n    long[] result = new long[xs.length + 1];\n    for (int i = 0; i\
    \ < xs.length; i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n\
    \    return result;\n}\n/*\n    Return the value of a polynomial at a given point.\n\
    \    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return\
    \ the polynomial that is the product of two polynomials.\n    >>> polymul([1L,\
    \ 2L, 3L], [1L, 2L, 3L])\n    [1L, 4L, 10L, 12L, 9L]\n    >>> polymul([1L, 2L,\
    \ 3L], [1L, 2L])\n    [1L, 4L, 7L, 6L]\n*/\nlong[] polymul(long[] xs, long[] ys)\
    \ \n{\n    long[] result = new long[xs.length + ys.length - 1];\n    for (int\
    \ i = 0; i < xs.length; i++)\n    {\n        for (int j = 0; j <\nunittest\n{\n\
    \    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6_u62wvh.d(65): Error: expression expected, not `unittest`\\\
    n/tmp/tmp6_u62wvh.d(66): Error: found `{` when expecting `;` following `for` condition\\\
    n/tmp/tmp6_u62wvh.d(67): Error: expression expected, not `alias`\\n/tmp/tmp6_u62wvh.d(67):\
    \ Error: found `candidate` when expecting `)`\\n/tmp/tmp6_u62wvh.d(67): Error:\
    \ found `=` instead of statement\\n/tmp/tmp6_u62wvh.d(75): Error: found `End of\
    \ File` when expecting `}` following compound statement\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp6_u62wvh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ (i + 1) * xs[i + 1];\n    }\n    return result;\n}\n/*\n    Return the integral\
    \ of a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.0L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1.0L, 1.0L]\n*/\ndouble[] integral(long[] xs) \n{\n    double[] result =\
    \ new double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2qmtysgd.d(69): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2qmtysgd.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n*/\ndouble[] integral(long[] xs) \n{\n    double[]\
    \ result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x +\
    \ xs[2] * x^2 + ....\n    Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    39L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n   \
    \ }\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of this polynomial\
    \ at x.\n   \nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp44p523ya.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp44p523ya.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result\
    \ = new long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 3L)\n    20L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n    }\n\
    \    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n \
    \   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of this polynomial\
    \ at x.\n    >>> evaluate([\nunittest\n{\n    alias candidate = derivative;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp52u_ow8o.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp52u_ow8o.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate\nunittest\n{\n    alias candidate = derivative;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp10ons4vv.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp10ons4vv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    auto n = xs.length;\n    if (n == 0)\n\
    \    {\n        return xs;\n    }\n    long[] ys = new long[n - 1];\n    for (size_t\
    \ i = 0; i < n - 1; i++)\n    {\n        ys[i] = (i + 1) * xs[i + 1];\n    }\n\
    \    return ys;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial in\
    \ the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\n\
    long[] integral(long[] xs) \n{\n    auto n = xs.length;\n    long[] ys = new long[n\
    \ + 1];\n    for (size_t i = 0; i < n; i++)\n    {\n        ys[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return ys;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> eval_poly([3L, 1L, 2L, 4L, 5L], 2L)\n    47L\n    >>> eval_poly([1L,\
    \ 2L, 3L], 2L)\n    17L\n    \n*/\nlong eval_poly(long[] xs, long x) \n{\n   \
    \ auto n = xs.length;\n    long y = 0;\n    for (size_t i = 0; i < n; i++)\n \
    \   {\n        y = y * x + xs[i];\n    }\n    return y;\n}\n\nunittest\n{\n  \
    \  alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    return xs[1 .. $].array;\n}\n/*\n  \
    \  xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n    Return integral of this polynomial in the same form.\n    >>>\
    \ integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 2L, 4L, 5L]\n    >>> integral([1L,\
    \ 2L, 3L])\n    [0L, 1L, 1L, 3L]\n*/\nlong[] integral(long[] xs) \n{\n    long[]\
    \ result = new long[xs.length + 1];\n    result[0] = 0;\n    foreach (i, x; xs)\
    \ \n    {\n        result[i + 1] = x / cast(long)(i + 1);\n    }\n    return result;\n\
    }\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x +\
    \ xs[2] * x^2 + ....\n    Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    foreach (i,\
    \ xi; xs) \n    {\n        result += xi * pow(x, i);\n    }\n    return result;\n\
    }\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x +\
    \ xs[2] * x^2 + ....\n    Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n   \nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp04htllna.d(66): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp04htllna.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{ \n    long[] result = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1.0L, 1.5L]\n*/\ndouble[] integral(long[] xs) \n{ \n    double[]\
    \ result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x +\
    \ xs[2] * x^2 + ....\n    Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    47L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong evaluate(long[] xs, long x) \n{ \n    long result = 0;\n    for (int\
    \ i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n  \
    \  }\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of this polynomial\
    \ at\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1i5zoxu7.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1i5zoxu7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ (i + 1) * xs[i + 1];\n    }\n    return result;\n}\n/*\n    Return the integral\
    \ of a polynomial.\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n   \
    \ >>> integral([1L, 2L, 3L, 4L])\n    [0L, 1L, 1L, 1L, 1L]\n*/\nlong[] integral(long[]\
    \ xs) \n{\n    long[] result = new long[xs.length + 1];\n    for (int i = 0; i\
    \ < xs.length; i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n\
    \    return result;\n}\n/*\n    Return the value of a polynomial at a point.\n\
    \    >>> value(3L, [1L, 2L, 3L])\n    18L\n    >>> value(3L, [1L, 2L, 3L, 4L])\n\
    \    54L\n*/\nlong value(long x, long[] xs) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n    Return the polynomial that is the product\
    \ of the two given polynomials.\n    >>> multiply([1L, 2L, 3L], [1L, 2L, 3L])\n\
    \    [1L, 4L, 10L, 12L, 9L]\n    >>> multiply([1L, 2L, 3L, 4L], [1L, 2L, 3L])\n\
    \    [1L, 4L, 10L, 16L, 22L, 12L]\n*/\nlong[] multiply(long[] xs, long[] ys) \n\
    {\n    long[] result = new long[xs.length + ys.length - 1];\n\nunittest\n{\n \
    \   alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpde2__5_g.d(65): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpde2__5_g.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return the value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    73L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return the value of this polynomial\
    \ at x.\n   \nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm5uq4l3y.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm5uq4l3y.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{ \n    if (xs.length == 0) \n    { \n    \
    \    return new long[0]; \n    } \n    long[] result = new long[xs.length - 1];\
    \ \n    for (size_t i = 0; i < result.length; i++) \n    { \n        result[i]\
    \ = (i + 1) * xs[i + 1]; \n    } \n    return result; \n} \nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = (i + 1) * xs[i + 1];\n    }\n    return result;\n}\n/*\n    Return the integral\
    \ of a polynomial, as a list of coefficients.\n    >>> integral([3L, 1L, 2L, 4L,\
    \ 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.25L]\n    >>> integral([1L,\
    \ 2L, 3L])\n    [0L, 1L, 1.0L, 1.0L]\n    \n*/\nlong[] integral(long[] xs) \n\
    {\n    long[] result = new long[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++) \n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L,\
    \ 4L, 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n    \n*/\n\
    long polyval(long[] xs, long x) \n{\n    long result = 0;\n    for (int i = 0;\
    \ i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n    }\n \
    \   return result;\n}\n/*\n    Return the value of a polynomial at x.\n    >>>\
    \ polyval([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n\
    \    17L\n    \n*/\nlong polyval(long[] xs, long x) \n{\n    long result = 0;\n\
    \    for (int i = 0; i < xs.length; i++) \n    {\n        result +=\nunittest\n\
    {\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L,\
    \ 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8st08g_2.d(70): Error: expression expected, not `unittest`\\\
    n/tmp/tmp8st08g_2.d(71): Error: found `{` when expecting `;` following statement\\\
    n/tmp/tmp8st08g_2.d(80): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8st08g_2.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    int n = xs.length;\n    long[] ys =\
    \ new long[n - 1];\n    for (int i = 1; i < n; i++) \n    {\n        ys[i - 1]\
    \ = i * xs[i];\n    }\n    return ys;\n}\n/*\n    Return the polynomial that is\
    \ the integral of this polynomial.\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L,\
    \ 1L, 1L]\n    >>> integral([1L, 2L, 3L, 4L])\n    [0L, 1L, 1L, 1L, 1L]\n*/\n\
    long[] integral(long[] xs) \n{\n    int n = xs.length;\n    long[] ys = new long[n\
    \ + 1];\n    for (int i = 0; i < n; i++) \n    {\n        ys[i + 1] = xs[i] /\
    \ (i + 1);\n    }\n    return ys;\n}\n/*\n    Return the value of this polynomial\
    \ at x.\n    >>> polyval([1L, 2L, 3L], 1L)\n    6L\n    >>> polyval([1L, 2L, 3L],\
    \ 2L)\n    17L\n    >>> polyval([1L, 2L, 3L], 3L)\n    34L\n*/\nlong polyval(long[]\
    \ xs, long x) \n{\n    int n = xs.length;\n    long y = 0;\n    for (int i = 0;\
    \ i < n; i++) \n    {\n        y += xs[i] * pow(x, i);\n    }\n    return y;\n\
    }\n/*\n    Return the value of this polynomial at x.\n    >>> polyval([1L, 2L,\
    \ 3L], 1L)\n    6L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n    >>> polyval([1L,\
    \ 2L, 3L], 3L)\n    34L\n*/\nlong polyval(long[] xs, long x) \n{\n    int n =\
    \ x\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi0kvvush.d(71): Error: semicolon expected, not `unittest`\\n/tmp/tmpi0kvvush.d(71):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpi0kvvush.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[$ - 1];\n \
    \   foreach (i, x; xs[1 .. $]) \n    {\n        result[i - 1] = i * x;\n    }\n\
    \    return result;\n}\n/*\n    Return the polynomial with coefficients xs evaluated\
    \ at x.\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    >>> evaluate([1L, 2L,\
    \ 3L], 0L)\n    1L\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result\
    \ = 0L;\n    foreach (i, x; xs) \n    {\n        result += x * pow(x, i);\n  \
    \  }\n    return result;\n}\n/*\n    Return the polynomial with coefficients xs\
    \ evaluated at x.\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    >>> evaluate([1L,\
    \ 2L, 3L], 0L)\n    1L\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result\
    \ = 0L;\n    foreach (i, x; xs) \n    {\n        result += x * pow(x, i);\n  \
    \  }\n    return result;\n}\n/*\n    Return the polynomial with coefficients xs\
    \ evaluated at x.\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    >>> evaluate([1L,\
    \ 2L, 3L], 0L)\n    1L\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result\
    \ = 0L;\n    foreach (i, x; xs) \n    {\n        result += x * pow(x, i);\n  \
    \  }\n    return result;\n}\n/*\n    Return the polynomial with coefficients xs\
    \ evaluated at x.\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    >>> evaluate([1L,\
    \ 2L, 3L], 0L)\n    1L\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result\
    \ = 0L;\n    foreach\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwwsgwdka.d(81): Error: found `unittest` when expecting `(`\\\
    n/tmp/tmpwwsgwdka.d(82): Error: basic type expected, not `{`\\n/tmp/tmpwwsgwdka.d(82):\
    \ Error: no identifier for declarator `_error_`\\n/tmp/tmpwwsgwdka.d(82): Error:\
    \ found `{` when expecting `;`\\n/tmp/tmpwwsgwdka.d(83): Error: expression expected,\
    \ not `alias`\\n/tmp/tmpwwsgwdka.d(83): Error: found `candidate` when expecting\
    \ `)`\\n/tmp/tmpwwsgwdka.d(83): Error: found `=` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwwsgwdka.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] res = new long[xs.length - 1];\n\
    \    for (int i = 0; i < res.length; i++)\n    {\n        res[i] = xs[i + 1] *\
    \ (i + 1);\n    }\n    return res;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n    double[] res =\
    \ new double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        res[i + 1] = xs[i] / (i + 1);\n    }\n    return res;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return value of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    63L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong\
    \ evaluate(long[] xs, long x) \n{\n    long res = 0;\n    for (int i = 0; i <\
    \ xs.length; i++)\n    {\n        res += xs[i] * pow(x, i);\n    }\n    return\
    \ res;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return value of this polynomial at x.\n    >>>\
    \ evaluate\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfwb2kq7v.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfwb2kq7v.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] ys = new long[xs.length - 1];\n\
    \    for (int i = 0; i < ys.length; i++)\n    {\n        ys[i] = xs[i + 1] * (i\
    \ + 1);\n    }\n    return ys;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.25L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n    double[] ys = new\
    \ double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n   \
    \     ys[i + 1] = xs[i] / (i + 1);\n    }\n    return ys;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return value of this polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong\
    \ polyval(long[] xs, long x) \n{\n    long y = 0;\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        y += xs[i] * pow(x, i);\n    }\n    return y;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return value of this\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwiavylpe.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwiavylpe.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] ys = new long[xs.length - 1];\n\
    \    for (int i = 0; i < ys.length; i++) \n    {\n        ys[i] = xs[i + 1] *\
    \ (i + 1);\n    }\n    return ys;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] ys = new long[xs.length\
    \ + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n        ys[i + 1] =\
    \ xs[i] / (i + 1);\n    }\n    return ys;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return the\
    \ value of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n\
    \    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long y = 0;\n    for (int i = 0; i < xs.length; i++) \n\
    \    {\n        y += xs[i] * pow(x, i);\n    }\n    return y;\n}\n/*\n    xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \    Return the value of\nunittest\n{\n    alias candidate = derivative;\n\n \
    \   assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpelsbpzez.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpelsbpzez.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral\
    \ of a polynomial.\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n   \
    \ >>> integral([1L, 2L, 3L, 4L])\n    [0L, 1L, 1L, 1L, 1L]\n*/\nlong[] integral(long[]\
    \ xs) \n{\n    long[] result = new long[xs.length + 1];\n    for (int i = 0; i\
    \ < xs.length; i++) \n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n\
    \    return result;\n}\n/*\n    Return the value of a polynomial at a given point.\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n   \
    \ {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the sum of two polynomials.\n    >>> add([1L, 2L, 3L], [4L, 5L, 6L])\n\
    \    [5L, 7L, 9L]\n    >>> add([1L, 2L, 3L], [4L, 5L, 6L, 7L])\n    [5L, 7L, 9L,\
    \ 7L]\n*/\nlong[] add(long[] xs, long[] ys) \n{\n    long[] result = new long[max(xs.length,\
    \ ys.length)];\n    for (int i = 0; i < xs.length; i++) \n    {\n        result[i]\
    \ += xs[i];\n    }\n    for (int\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqcai94n7.d(67): Error: no identifier for declarator `int`\\n/tmp/tmpqcai94n7.d(67):\
    \ Error: expression expected, not `unittest`\\n/tmp/tmpqcai94n7.d(68): Error:\
    \ found `{` when expecting `;` following `for` condition\\n/tmp/tmpqcai94n7.d(69):\
    \ Error: expression expected, not `alias`\\n/tmp/tmpqcai94n7.d(69): Error: found\
    \ `candidate` when expecting `)`\\n/tmp/tmpqcai94n7.d(69): Error: found `=` instead\
    \ of statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqcai94n7.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++) \n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    85L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8eq65dcx.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8eq65dcx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++) \n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return polynomial in the same\
    \ form, but with\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdaekgicj.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdaekgicj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 2L, 4L, 5L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L,\
    \ 1L, 3L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length\
    \ + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1]\
    \ = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    47L\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n   \
    \ {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsciy5yus.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsciy5yus.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n*/\ndouble[] integral(long[] xs) \n{\n    double[]\
    \ result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x +\
    \ xs[2] * x^2 + ....\n    Return the value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n    }\n\
    \    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n \
    \   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return the value of this polynomial\
    \ at x.\n    >>>\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwiw737ex.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwiw737ex.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n  xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\nlong[] integral(long[] xs) \n{\n    long[]\
    \ result = new long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n  xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    45L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n  xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmnyz96ch.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmnyz96ch.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    return xs[1 .. $].map!(a => a * cast(long)(xs.length\
    \ - 1)).array;\n}\n/*\n    Return the integral of this polynomial in the same\
    \ form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.25L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n\
    */\nlong[] integral(long[] xs) \n{\n    return [0L] ~ xs.map!(a => a / cast(long)(xs.length)).array;\n\
    }\n/*\n    Return the value of this polynomial at x.\n    >>> polyval([3L, 1L,\
    \ 2L, 4L, 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n    \n\
    */\nlong polyval(long[] xs, long x) \n{\n    long result = 0L;\n    foreach (i,\
    \ a; xs)\n    {\n        result += a * pow(x, i);\n    }\n    return result;\n\
    }\n/*\n    Return the value of this polynomial at x.\n    >>> polyval([3L, 1L,\
    \ 2L, 4L, 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n    \n\
    */\nlong polyval(long[] xs, long x) \n{\n    long result = 0L;\n    foreach (i,\
    \ a; xs)\n    {\n        result += a * pow(x, i);\n    }\n    return result;\n\
    }\n/*\n    Return the value of this polynomial at x.\n    >>> polyval([3L, 1L,\
    \ 2L, 4L, 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n    \n\
    */\nlong polyval(long[]\nunittest\n{\n    alias candidate = derivative;\n\n  \
    \  assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpck85fel0.d(72): Error: found `unittest` when expecting `)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpck85fel0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate\nunittest\n{\n    alias candidate = derivative;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpiytbgxyx.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiytbgxyx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    63L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return coefficients of the polynomial\
    \ that is the product of this\n\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0vgq9db8.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0vgq9db8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the value\
    \ of the polynomial with coefficients xs at x.\n    >>> evaluate([3L, 1L, 2L,\
    \ 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong\
    \ evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i\
    \ < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n    }\n    return\
    \ result;\n}\n/*\n    Return the polynomial with coefficients xs divided by the\
    \ polynomial with coefficients ys.\n    >>> divide([3L, 1L, 2L, 4L, 5L], [1L,\
    \ 2L, 3L])\n    [3L, -1L, -2L, 13L]\n    >>> divide([1L, 2L, 3L], [1L, 2L, 3L])\n\
    \    [1L]\n*/\nlong[] divide(long[] xs, long[] ys) \n{\n    long[] result = new\
    \ long[xs.length - ys.length + 1];\n    for (int i = 0; i < result.length; i++)\n\
    \    {\n        result[i] = xs[i] / ys[0];\n        for (int j = 0; j < ys.length;\
    \ j++)\n        {\n            xs[i + j] -= result[i] * ys[j];\n        }\n  \
    \  }\n    return result;\n}\n/*\n    Return the polynomial with coefficients xs\
    \ multiplied by the polynomial with coefficients ys.\n    >>> multiply([3L, 1L,\
    \ 2L, 4L, 5L], [1L, 2L, 3L])\n    [3L, 7L, 17L, 27L, 33L, 30L\nunittest\n{\n \
    \   alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoilnemor.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoilnemor.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] ys = new long[xs.length - 1];\n\
    \    for (int i = 0; i < ys.length; i++)\n    {\n        ys[i] = xs[i + 1] * (i\
    \ + 1);\n    }\n    return ys;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n    double[] ys = new\
    \ double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n   \
    \     ys[i + 1] = xs[i] / (i + 1);\n    }\n    return ys;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return value of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    63L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong\
    \ evaluate(long[] xs, long x) \n{\n    long y = 0;\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        y += xs[i] * pow(x, i);\n    }\n    return y;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return value of this polynomial\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw8ukqo2r.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw8ukqo2r.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result\
    \ = new long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    47L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n    }\n\
    \    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n \
    \   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of this polynomial\
    \ at x.\n    >>> evaluate([\nunittest\n{\n    alias candidate = derivative;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe5sdidbk.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe5sdidbk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = (i + 1) * xs[i + 1];\n    }\n    return result;\n}\n/*\n    Return the integral\
    \ of a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1.0L, 1.5L]\n    \n*/\nlong[] integral(long[] xs) \n{\n    long[] result\
    \ = new long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of a polynomial at a given point.\n    >>> polyval([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong polyval(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++) \n    {\n        result = result * x + xs[i];\n\
    \    }\n    return result;\n}\n/*\n    Return the value of a polynomial at a given\
    \ point.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> polyval([1L,\
    \ 2L, 3L], 2L)\n    17L\n    \n*/\nlong polyval(long[] xs, long x) \n{\n    long\
    \ result = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n        result\
    \ = result * x + x\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgjdd_bm4.d(70): Error: found `unittest` when expecting `;` following\
    \ statement\\n/tmp/tmpgjdd_bm4.d(80): Error: found `End of File` when expecting\
    \ `}` following compound statement\\n/tmp/tmpgjdd_bm4.d(80): Error: found `End\
    \ of File` when expecting `}` following compound statement\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgjdd_bm4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate\nunittest\n{\n    alias candidate = derivative;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprd74mc1f.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprd74mc1f.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = (i + 1) * xs[i + 1];\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++) \n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> value([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    47L\n    >>> value([1L, 2L, 3L], 2L)\n    17L\n  \
    \  \n*/\nlong value(long[] xs, long x) \n{\n    long result = 0;\n    for (int\
    \ i = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n \
    \   }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk05vbdna.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk05vbdna.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the value\
    \ of the polynomial at x.\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong\
    \ polyval(long[] xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i\
    \ < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n    }\n   \
    \ return result;\n}\n/*\n    Return the value of the polynomial at x.\n    >>>\
    \ polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[] xs, long x) \n{\n\
    \    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n     \
    \   result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return\
    \ the value of the polynomial at x.\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong polyval(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n   \
    \ }\n    return result;\n}\n/*\n    Return the value of the polynomial at x.\n\
    \    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n   \
    \ {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \   \nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq_bs3xqe.d(78): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq_bs3xqe.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    47L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate\nunittest\n{\n    alias candidate = derivative;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe5mz5sll.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe5mz5sll.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{ \n    long[] result = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1.0L, 1.5L]\n*/\ndouble[] integral(long[] xs) \n{ \n    double[]\
    \ result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x +\
    \ xs[2] * x^2 + ....\n    Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong evaluate(long[] xs, long x) \n{ \n    long result = 0;\n    for (int\
    \ i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n  \
    \  }\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of this polynomial\
    \ at\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpge6awehw.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpge6awehw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 2L, 4L, 5L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L,\
    \ 1L, 3L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length\
    \ + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1]\
    \ = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return the\
    \ value of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n\
    \    49L\n    >>> evaluate([1L, 2L, 3L], 3L)\n    28L\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return the value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpebrpnxso.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebrpnxso.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    93L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate\nunittest\n{\n    alias candidate = derivative;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptggop7ql.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptggop7ql.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{ \n    return xs[1 .. $].array; \n}\n/*\n\
    \    Return the integral of a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.25L]\n    >>> integral([1L,\
    \ 2L, 3L])\n    [0L, 1L, 1.0L, 1.5L]\n*/\ndouble[] integral(long[] xs) \n{ \n\
    \    return [0.0L] ~ xs.map!(a => a / (xs.length - xs.indexOf(a))); \n}\n/*\n\
    \    Return the value of a polynomial.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L],\
    \ 2L)\n    51L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{ \n    return xs.zip(xs.map!(a => x ^ (xs.length - xs.indexOf(a)\
    \ - 1))).map!(a => a[0] * a[1]).sum; \n}\n/*\n    Return the value of a polynomial.\n\
    \    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    51L\n    >>> evaluate([1L, 2L,\
    \ 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long x) \n{ \n    return xs.zip(xs.map!(a\
    \ => x ^ (xs.length - xs.indexOf(a) - 1))).map!(a => a[0] * a[1]).sum; \n}\n/*\n\
    \    Return the value of a polynomial.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L],\
    \ 2L)\n    51L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{ \n   \nunittest\n{\n    alias candidate = derivative;\n\n  \
    \  assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqwh_i0ir.d(60): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqwh_i0ir.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral\
    \ of a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1.0L, 1.5L]\n*/\ndouble[] integral(long[] xs) \n{\n    double[] result =\
    \ new double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of a polynomial at x.\n    >>> value([3L, 1L, 2L, 4L, 5L],\
    \ 2)\n    67L\n    >>> value([1L, 2L, 3L], 2)\n    17L\n*/\nlong value(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    Return the value of a polynomial at x.\n    >>> value([3L, 1L, 2L, 4L,\
    \ 5L], 2)\n    67L\n    >>> value([1L, 2L, 3L], 2)\n    17L\n*/\nlong value(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) ==\
    \ [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the value\
    \ of the polynomial represented by xs at x.\n    >>> evaluate([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    Return the value of the polynomial represented by xs at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n   \
    \ }\n    return result;\n}\n/*\n    Return the value of the polynomial represented\
    \ by xs at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L,\
    \ 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the value of the\
    \ polynomial represented by xs at x.\n    >>> evaluate([3L,\nunittest\n{\n   \
    \ alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx7p7cbbb.d(70): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx7p7cbbb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++) \n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 3L)\n    28L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    long\
    \ pow = 1;\n    for (int i = 0; i < xs.length; i++) \n    {\n        result +=\
    \ xs[i] * pow;\n        pow *= x;\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn093l23u.d(62): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn093l23u.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    return xs[1 .. $].array;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return integral of this polynomial in the same form.\n    >>> integral([3L,\
    \ 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n   \
    \ >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\nlong[] integral(long[]\
    \ xs) \n{\n    long[] ys = new long[xs.length + 1];\n    ys[0] = 0L;\n    foreach\
    \ (i, x; xs) \n    {\n        ys[i + 1] = x / (i + 1);\n    }\n    return ys;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    53L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long y = 0L;\n    foreach\
    \ (i, xi; xs) \n    {\n        y += xi * pow(x, i);\n    }\n    return y;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    53L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(\nunittest\n{\n    alias candidate = derivative;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbvzflw7v.d(67): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpbvzflw7v.d(67): Error: found `unittest` when expecting `)`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbvzflw7v.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] res = new long[xs.length - 1];\n\
    \    for (int i = 0; i < res.length; i++)\n    {\n        res[i] = xs[i + 1] *\
    \ (i + 1);\n    }\n    return res;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n    double[] res =\
    \ new double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        res[i + 1] = xs[i] / (i + 1);\n    }\n    return res;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return value of this polynomial at x.\n    >>> value([3L, 1L, 2L, 4L, 5L],\
    \ 2L)\n    37L\n    >>> value([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong value(long[]\
    \ xs, long x) \n{\n    long res = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        res += xs[i] * pow(x, i);\n    }\n    return res;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return value of this polynomial at x.\n    >>> value\nunittest\n\
    {\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L,\
    \ 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo92quhzk.d(60): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo92quhzk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = (i + 1) * xs[i + 1];\n    }\n    return result;\n}\n/*\n    Return the integral\
    \ of a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.25L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1.0L, 1.5L]\n    \n*/\nlong[] integral(long[] xs) \n{\n    long[] result\
    \ = new long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of a polynomial at a point.\n    >>> value([3L, 1L, 2L,\
    \ 4L, 5L], 2L)\n    49L\n    >>> value([1L, 2L, 3L], 2L)\n    17L\n    \n*/\n\
    long value(long[] xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i\
    \ < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n    }\n   \
    \ return result;\n}\n/*\n    Return the value of a polynomial at a point.\n  \
    \  >>> value([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> value([1L, 2L, 3L], 2L)\n\
    \    17L\n    \n*/\nlong value(long[] xs, long x) \n{\n    long result = 0;\n\
    \    for (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x,\n\
    unittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) ==\
    \ [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpug8whap4.d(70): Error: expression expected, not `unittest`\\\
    n/tmp/tmpug8whap4.d(71): Error: found `{` when expecting `,`\\n/tmp/tmpug8whap4.d(72):\
    \ Error: expression expected, not `alias`\\n/tmp/tmpug8whap4.d(72): Error: found\
    \ `candidate` when expecting `,`\\n/tmp/tmpug8whap4.d(72): Error: expression expected,\
    \ not `=`\\n/tmp/tmpug8whap4.d(72): Error: found `derivative` when expecting `,`\\\
    n/tmp/tmpug8whap4.d(72): Error: expression expected, not `;`\\n/tmp/tmpug8whap4.d(74):\
    \ Error: found `assert` when expecting `,`\\n/tmp/tmpug8whap4.d(74): Error: found\
    \ `;` when expecting `,`\\n/tmp/tmpug8whap4.d(75): Error: found `;` when expecting\
    \ `,`\\n/tmp/tmpug8whap4.d(76): Error: found `;` when expecting `,`\\n/tmp/tmpug8whap4.d(77):\
    \ Error: found `;` when expecting `,`\\n/tmp/tmpug8whap4.d(78): Error: found `;`\
    \ when expecting `,`\\n/tmp/tmpug8whap4.d(79): Error: expression expected, not\
    \ `}`\\n/tmp/tmpug8whap4.d(80): Error: found `void` when expecting `,`\\n/tmp/tmpug8whap4.d(80):\
    \ Error: found `{` when expecting `,`\\n/tmp/tmpug8whap4.d(80): Error: expression\
    \ expected, not `}`\\n/tmp/tmpug8whap4.d(80): Error: found `End of File` when\
    \ expecting `,`\\n/tmp/tmpug8whap4.d(80): Error: found `End of File` when expecting\
    \ `)`\\n/tmp/tmpug8whap4.d(80): Error: found `End of File` when expecting `;`\
    \ following statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpug8whap4.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
    \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
    */\nlong[] derivative(long[] xs) \n{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral\
    \ of a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1.0L, 1.5L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result = new\
    \ long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n    \
    \    result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n    Return\
    \ the value of a polynomial at a given point.\n    >>> polyval([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result = result * x + xs[i];\n    }\n    return result;\n}\n\
    /*\n    Return the value of a polynomial at a given point.\n    >>> polyval([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong polyval(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++) \n    {\n        result = result * x + xs[i];\n   \n\
    unittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) ==\
    \ [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmncq387h.d(68): Error: found `unittest` instead of statement\\\
    n/tmp/tmpmncq387h.d(78): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmncq387h.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
