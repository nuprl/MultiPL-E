name: HumanEval_68_pluck
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
  \ a branch of a tree that has non-negative integer nodes\n    your task is to pluck\
  \ one of the nodes and return it.\n    The plucked node should be the node with\
  \ the smallest even value.\n    If multiple nodes with the same smallest even value\
  \ are found return the node that has smallest index.\n\n    The plucked node should\
  \ be returned in an array, [ smalest_value, its index ],\n    If there are no even\
  \ values or the given array is empty, return [].\n\n    >>> pluck([4L, 2L, 3L])\n\
  \    [2L, 1L]\n\n    >>> pluck([1L, 2L, 3L])\n    [2L, 1L]\n\n    >>> pluck([])\n\
  \    []\n    \n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n\n    Constraints:\n\
  \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\nlong[]\
  \ pluck(long[] arr) \n"
tests: "unittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
  \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
  \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
  \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
  \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
  \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
completions: ["{\n    long[] result = new long[2];\n    if (arr.length == 0)\n   \
    \     return result;\n    long min = arr[0];\n    long index = 0;\n    for (int\
    \ i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] <\
    \ min)\n        {\n            min = arr[i];\n            index = i;\n       \
    \ }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1]\
    \ = index;\n    }\n    return result;\n}", "{\n    if (arr.length == 0)\n    \
    \    return [];\n    long min = arr[0];\n    long index = 0;\n    for (long i\
    \ = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n\
    \        {\n            min = arr[i];\n            index = i;\n        }\n   \
    \ }\n    if (min % 2 == 0)\n        return [min, index];\n    else\n        return\
    \ [];\n}", "{\n    if (arr.length == 0)\n        return new long[0];\n    long\
    \ min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n\
    \    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min\
    \ = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \        return [min, index];\n    else\n        return new long[0];\n}", "{\n\
    \    long[] result = new long[2];\n    if (arr.length == 0)\n        return result;\n\
    \    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0)\n        {\n            if (arr[i]\
    \ < min)\n            {\n                min = arr[i];\n                index\
    \ = i;\n            }\n        }\n    }\n    if (min % 2 == 0)\n    {\n      \
    \  result[0] = min;\n        result[1] = index;\n    }\n    return result;\n}",
  "{\n    if (arr.length == 0)\n        return new long[0];\n    long min = arr[0];\n\
    \    long index = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 &&\
    \ e < min)\n        {\n            min = e;\n            index = i;\n        }\n\
    \    }\n    if (min % 2 == 0)\n        return [min, index];\n    return new long[0];\n\
    }", "{\n    if (arr.length == 0)\n        return new long[0];\n    long min =\
    \ long.max;\n    long index = 0;\n    foreach (i, v; arr)\n    {\n        if (v\
    \ % 2 == 0 && v < min)\n        {\n            min = v;\n            index = i;\n\
    \        }\n    }\n    if (min == long.max)\n        return new long[0];\n   \
    \ return [min, index];\n}", "{\n    if (arr.length == 0)\n        return [];\n\
    \    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n        {\n     \
    \       min = arr[i];\n            index = i;\n        }\n    }\n    if (min %\
    \ 2 == 0)\n        return [min, index];\n    else\n        return [];\n}", "{\n\
    \    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n\
    \        {\n            min = e;\n            index = i;\n        }\n    }\n \
    \   if (min % 2 == 0)\n        return [min, index];\n    return [];\n}", "{\n\
    \    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if\
    \ (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n  \
    \          minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, minIndex];\n    else\n        return [];\n}", "{\n    long[] result =\
    \ [0L, 0L];\n    if (arr.length == 0) return result;\n    auto min = arr[0];\n\
    \    auto index = 0L;\n    foreach (i, e; arr) \n    {\n        if (e % 2 == 0\
    \ && e < min) \n        {\n            min = e;\n            index = i;\n    \
    \    }\n    }\n    if (min == arr[0]) return result;\n    result[0] = min;\n \
    \   result[1] = index;\n    return result;\n}", "{\n    long[] result = new long[2];\n\
    \    if (arr.length == 0)\n        return result;\n    long minEven = arr[0];\n\
    \    long minEvenIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n\
    \        if (arr[i] % 2 == 0)\n        {\n            if (arr[i] < minEven)\n\
    \            {\n                minEven = arr[i];\n                minEvenIndex\
    \ = i;\n            }\n        }\n    }\n    if (minEven % 2 == 0)\n    {\n  \
    \      result[0] = minEven;\n        result[1] = minEvenIndex;\n    }\n    return\
    \ result;\n}", "{\n    if (arr.length == 0)\n        return [];\n    auto evens\
    \ = arr.filter!(a => a % 2 == 0);\n    if (evens.length == 0)\n        return\
    \ [];\n    auto min = evens.min;\n    auto index = arr.indexOf(min);\n    return\
    \ [min, index];\n}", "{\n    long[] result = [0L, 0L];\n    if (arr.length ==\
    \ 0)\n        return result;\n    long min = arr[0];\n    long index = 0;\n  \
    \  for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 &&\
    \ arr[i] < min)\n        {\n            min = arr[i];\n            index = i;\n\
    \        }\n    }\n    if (min == arr[0])\n        return result;\n    result[0]\
    \ = min;\n    result[1] = index;\n    return result;\n}", "{\n    if (arr.length\
    \ == 0)\n        return new long[0];\n    \n    long minEven = long.max;\n   \
    \ long minEvenIndex = long.max;\n    foreach (i, v; arr)\n    {\n        if (v\
    \ % 2 == 0 && v < minEven)\n        {\n            minEven = v;\n            minEvenIndex\
    \ = i;\n        }\n    }\n    \n    if (minEven == long.max)\n        return new\
    \ long[0];\n    \n    return [minEven, minEvenIndex];\n}", "{\n    if (arr.length\
    \ == 0)\n        return [];\n    auto evens = arr.filter!(a => a % 2 == 0);\n\
    \    if (evens.length == 0)\n        return [];\n    auto min = evens.min;\n \
    \   auto index = arr.indexOf(min);\n    return [min, index];\n}", "{\n    if (arr.length\
    \ == 0)\n        return new long[0];\n    long minEven = arr[0];\n    long minEvenIndex\
    \ = 0;\n    bool found = false;\n    foreach (i, v; arr)\n    {\n        if (v\
    \ % 2 == 0)\n        {\n            if (!found)\n            {\n             \
    \   minEven = v;\n                minEvenIndex = i;\n                found = true;\n\
    \            }\n            else\n            {\n                if (v < minEven)\n\
    \                {\n                    minEven = v;\n                    minEvenIndex\
    \ = i;\n                }\n            }\n        }\n    }\n    if (found)\n \
    \       return [minEven, minEvenIndex];\n    else\n        return new long[0];\n\
    }", "{\n    if (arr.length == 0)\n        return new long[0];\n    long min =\
    \ arr[0];\n    long min_index = 0;\n    for (long i = 0; i < arr.length; i++)\n\
    \    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min\
    \ = arr[i];\n            min_index = i;\n        }\n    }\n    if (min % 2 ==\
    \ 0)\n        return new long[] { min, min_index };\n    else\n        return\
    \ new long[0];\n}", "{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    \n    long minEven = long.max;\n    long minEvenIndex = long.max;\n    for\
    \ (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i]\
    \ < minEven)\n        {\n            minEven = arr[i];\n            minEvenIndex\
    \ = i;\n        }\n    }\n    \n    if (minEven == long.max)\n        return new\
    \ long[0];\n    \n    return [minEven, minEvenIndex];\n}", "{\n    auto res =\
    \ arr.filter!(x => x % 2 == 0).min;\n    if (res.empty) return [];\n    return\
    \ [res, arr.indexOf(res)];\n}", "{\n    if (arr.length == 0) return new long[0];\n\
    \    long[] result = new long[2];\n    long min = arr[0];\n    long index = 0;\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            index =\
    \ i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = index;\n    }\n    return result;\n}", "{\n    if (arr.length\
    \ == 0)\n        return new long[0];\n    else\n    {\n        long min = arr[0];\n\
    \        long minIndex = 0;\n        for (long i = 0; i < arr.length; i++)\n \
    \       {\n            if (arr[i] % 2 == 0 && arr[i] < min)\n            {\n \
    \               min = arr[i];\n                minIndex = i;\n            }\n\
    \        }\n        if (min % 2 == 0)\n            return [min, minIndex];\n \
    \       else\n            return new long[0];\n    }\n}", "{\n    if (arr.length\
    \ == 0)\n        return new long[0];\n    \n    long minEven = arr[0];\n    long\
    \ minEvenIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n      \
    \  if (arr[i] % 2 == 0)\n        {\n            if (arr[i] < minEven)\n      \
    \      {\n                minEven = arr[i];\n                minEvenIndex = i;\n\
    \            }\n        }\n    }\n    if (minEven % 2 == 0)\n        return [minEven,\
    \ minEvenIndex];\n    else\n        return new long[0];\n}", "{\n    long[] result\
    \ = [0L, 0L];\n    if (arr.length == 0)\n        return result;\n    long min\
    \ = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n    {\n        if (v\
    \ % 2 == 0 && v < min)\n        {\n            min = v;\n            index = i;\n\
    \        }\n    }\n    if (min == arr[0])\n        return result;\n    result[0]\
    \ = min;\n    result[1] = index;\n    return result;\n}", "{\n    if (arr.length\
    \ == 0)\n        return [];\n    long minEven = arr[0];\n    long minEvenIndex\
    \ = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < minEven)\n\
    \        {\n            minEven = v;\n            minEvenIndex = i;\n        }\n\
    \    }\n    if (minEven % 2 == 0)\n        return [minEven, minEvenIndex];\n \
    \   return [];\n}", "{\n    long[] result = [0L, 0L];\n    if (arr.length == 0)\n\
    \        return result;\n    long min = arr[0];\n    foreach (i, e; arr)\n   \
    \ {\n        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n   \
    \         result[0] = min;\n            result[1] = i;\n        }\n    }\n   \
    \ if (result[0] == 0)\n        return [];\n    return result;\n}", "{\n    long[]\
    \ result = [0L, 0L];\n    long min = long.max;\n    foreach(i, e; arr)\n    {\n\
    \        if(e % 2 == 0 && e < min)\n        {\n            min = e;\n        \
    \    result[0] = e;\n            result[1] = i;\n        }\n    }\n    if(min\
    \ == long.max)\n        return [];\n    return result;\n}", "{\n    long[] result\
    \ = new long[2];\n    long min = long.max;\n    long index = 0;\n    foreach(long\
    \ i, long e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n    \
    \        min = e;\n            index = i;\n        }\n    }\n    if (min == long.max)\n\
    \    {\n        return result;\n    }\n    result[0] = min;\n    result[1] = index;\n\
    \    return result;\n}", "{\n    if (arr.length == 0)\n        return [];\n  \
    \  long minEven = arr[0];\n    long minEvenIndex = 0;\n    foreach (i, v; arr)\n\
    \    {\n        if (v % 2 == 0 && v < minEven)\n        {\n            minEven\
    \ = v;\n            minEvenIndex = i;\n        }\n    }\n    if (minEven % 2 ==\
    \ 0)\n        return [minEven, minEvenIndex];\n    return [];\n}", "{\n    if\
    \ (arr.length == 0)\n        return new long[0];\n    long minEven = long.max;\n\
    \    long minEvenIndex = long.max;\n    for (long i = 0; i < arr.length; i++)\n\
    \    {\n        if (arr[i] % 2 == 0 && arr[i] < minEven)\n        {\n        \
    \    minEven = arr[i];\n            minEvenIndex = i;\n        }\n    }\n    if\
    \ (minEven == long.max)\n        return new long[0];\n    return [minEven, minEvenIndex];\n\
    }", "{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n\
    \    long index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 &&\
    \ v < min)\n        {\n            min = v;\n            index = i;\n        }\n\
    \    }\n    if (min % 2 == 0)\n        return [min, index];\n    return [];\n}",
  "{\n    long[] result = new long[2];\n    if (arr.length == 0)\n        return result;\n\
    \    long min = arr[0];\n    long index = 0;\n    for (int i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            index = i;\n        }\n    }\n    if (min %\
    \ 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n    }\n\
    \    return result;\n}", "{\n    long[] result = new long[2];\n    long min =\
    \ long.max;\n    long index = 0;\n    foreach(i, v; arr)\n    {\n        if(v\
    \ % 2 == 0 && v < min)\n        {\n            min = v;\n            index = i;\n\
    \        }\n    }\n    if(min == long.max)\n    {\n        return result;\n  \
    \  }\n    result[0] = min;\n    result[1] = index;\n    return result;\n}", "{\n\
    \    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v <\
    \ min)\n        {\n            min = v;\n            minIndex = i;\n        }\n\
    \    }\n    if (min % 2 == 0)\n        return [min, minIndex];\n    return [];\n\
    }", "{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n\
    \    long minIndex = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 ==\
    \ 0 && e < min)\n        {\n            min = e;\n            minIndex = i;\n\
    \        }\n    }\n    if (min % 2 == 0)\n        return [min, minIndex];\n  \
    \  return [];\n}", "{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long[] result = new long[2];\n    long min = arr[0];\n    long minIndex =\
    \ 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < min\
    \ && arr[i] % 2 == 0)\n        {\n            min = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = minIndex;\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[2];\n    long smallestEven = long.max;\n    long smallestEvenIndex\
    \ = long.max;\n    foreach(index, value; arr)\n    {\n        if(value % 2 ==\
    \ 0 && value < smallestEven)\n        {\n            smallestEven = value;\n \
    \           smallestEvenIndex = index;\n        }\n    }\n    if(smallestEven\
    \ != long.max)\n    {\n        result[0] = smallestEven;\n        result[1] =\
    \ smallestEvenIndex;\n    }\n    return result;\n}", "{\n    long[] result = new\
    \ long[2];\n    long min = long.max;\n    long index = -1;\n    foreach(i, e;\
    \ arr)\n    {\n        if(e % 2 == 0 && e < min)\n        {\n            min =\
    \ e;\n            index = i;\n        }\n    }\n    if(index != -1)\n    {\n \
    \       result[0] = min;\n        result[1] = index;\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[2];\n    long min = long.max;\n    long index\
    \ = -1;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v < min)\n  \
    \      {\n            min = v;\n            index = i;\n        }\n    }\n   \
    \ if(index == -1)\n        return result;\n    result[0] = min;\n    result[1]\
    \ = index;\n    return result;\n}", "{\n    if (arr.length == 0) return new long[0];\n\
    \    long min = arr[0];\n    long minIndex = 0;\n    foreach (i, v; arr)\n   \
    \ {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n   \
    \         minIndex = i;\n        }\n    }\n    if (min == arr[0]) return new long[0];\n\
    \    return [min, minIndex];\n}", "{\n    long[] ret = new long[2];\n    long\
    \ min = long.max;\n    long minIdx = long.max;\n    foreach(i, v; arr)\n    {\n\
    \        if(v % 2 == 0 && v < min)\n        {\n            min = v;\n        \
    \    minIdx = i;\n        }\n    }\n    if(min == long.max)\n        return ret;\n\
    \    ret[0] = min;\n    ret[1] = minIdx;\n    return ret;\n}", "{\n    if (arr.length\
    \ == 0)\n        return [];\n    long minEven = arr[0];\n    long minEvenIndex\
    \ = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] %\
    \ 2 == 0)\n        {\n            if (arr[i] < minEven)\n            {\n     \
    \           minEven = arr[i];\n                minEvenIndex = i;\n           \
    \ }\n        }\n    }\n    if (minEven % 2 == 0)\n        return [minEven, minEvenIndex];\n\
    \    else\n        return [];\n}", "{\n    if (arr.length == 0)\n        return\
    \ [];\n    long min = arr[0];\n    long minIndex = 0;\n    foreach (i, v; arr)\n\
    \    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n\
    \            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, minIndex];\n    return [];\n}", "{\n    if (arr.length == 0)\n       \
    \ return new long[0];\n    long[] result = new long[2];\n    long min = arr[0];\n\
    \    long minIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n  \
    \      if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n\
    \            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n \
    \       result[0] = min;\n        result[1] = minIndex;\n    }\n    return result;\n\
    }", "{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n\
    \    long index = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 &&\
    \ e < min)\n        {\n            min = e;\n            index = i;\n        }\n\
    \    }\n    if (min % 2 == 0)\n        return [min, index];\n    return [];\n}",
  "{\n    if (arr.length == 0)\n        return new long[0];\n    long min = arr[0];\n\
    \    long minIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n  \
    \      if (arr[i] < min && arr[i] % 2 == 0)\n        {\n            min = arr[i];\n\
    \            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, minIndex];\n    else\n        return new long[0];\n}", "{\n    if (arr.length\
    \ == 0)\n        return new long[0];\n    long min = arr[0];\n    long index =\
    \ 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n   \
    \     {\n            min = v;\n            index = i;\n        }\n    }\n    if\
    \ (min == arr[0])\n        return new long[0];\n    return [min, index];\n}",
  "{\n    long[] result = [0L, 0L];\n    long min = long.max;\n    foreach(i, v; arr)\n\
    \    {\n        if(v % 2 == 0 && v < min)\n        {\n            min = v;\n \
    \           result[0] = v;\n            result[1] = i;\n        }\n    }\n   \
    \ if(min == long.max)\n        return [];\n    return result;\n}", "{\n    if\
    \ (arr.length == 0)\n        return new long[0];\n    long min = arr[0];\n   \
    \ long index = 0;\n    for (int i = 0; i < arr.length; i++)\n    {\n        if\
    \ (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n  \
    \          index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ new long[] { min, index };\n    return new long[0];\n}", "{\n    if (arr.length\
    \ == 0)\n        return [];\n    long min = arr[0];\n    long index = 0;\n   \
    \ foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n\
    \            min = v;\n            index = i;\n        }\n    }\n    if (min %\
    \ 2 == 0)\n        return [min, index];\n    return [];\n}", "{\n    if (arr.length\
    \ == 0)\n        return [];\n    long min = arr[0];\n    long minIndex = 0;\n\
    \    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n\
    \            min = v;\n            minIndex = i;\n        }\n    }\n    if (min\
    \ % 2 == 0)\n        return [min, minIndex];\n    return [];\n}", "{\n    long[]\
    \ result = new long[2];\n    if (arr.length == 0)\n        return result;\n  \
    \  long minEven = arr[0];\n    long minEvenIndex = 0;\n    for (long i = 0; i\
    \ < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0)\n        {\n       \
    \     if (arr[i] < minEven)\n            {\n                minEven = arr[i];\n\
    \                minEvenIndex = i;\n            }\n        }\n    }\n    if (minEven\
    \ % 2 == 0)\n    {\n        result[0] = minEven;\n        result[1] = minEvenIndex;\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[2];\n    long\
    \ min = long.max;\n    long index = -1;\n    foreach(i, e; arr)\n    {\n     \
    \   if(e % 2 == 0 && e < min)\n        {\n            min = e;\n            index\
    \ = i;\n        }\n    }\n    if(index == -1)\n        return result;\n    result[0]\
    \ = min;\n    result[1] = index;\n    return result;\n}", "{\n    if (arr.length\
    \ == 0) return new long[0];\n    long min = long.max;\n    long index = 0;\n \
    \   foreach (i, v; arr) \n    {\n        if (v % 2 == 0 && v < min) \n       \
    \ {\n            min = v;\n            index = i;\n        }\n    }\n    if (min\
    \ == long.max) return new long[0];\n    return [min, index];\n}", "{\n    long[]\
    \ result = new long[2];\n    long minEven = long.max;\n    long minEvenIndex =\
    \ long.max;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 && e < minEven)\n\
    \        {\n            minEven = e;\n            minEvenIndex = i;\n        }\n\
    \    }\n    if(minEven == long.max)\n    {\n        return result;\n    }\n  \
    \  result[0] = minEven;\n    result[1] = minEvenIndex;\n    return result;\n}",
  "{\n    if (arr.length == 0)\n        return new long[0];\n    long min = arr[0];\n\
    \    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n     \
    \   if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n\
    \            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, index];\n    else\n        return new long[0];\n}", "{\n    long[] result\
    \ = [0L, 0L];\n    long min = long.max;\n    foreach(i, e; arr)\n    {\n     \
    \   if(e % 2 == 0 && e < min)\n        {\n            min = e;\n            result[0]\
    \ = e;\n            result[1] = i;\n        }\n    }\n    if(min == long.max)\n\
    \        return [];\n    return result;\n}", "{\n    if (arr.length == 0) \n \
    \       return new long[0];\n    long min = long.max;\n    long index = 0;\n \
    \   foreach (i, v; arr) \n    {\n        if (v % 2 == 0 && v < min) \n       \
    \ {\n            min = v;\n            index = i;\n        }\n    }\n    if (min\
    \ == long.max)\n        return new long[0];\n    return [min, index];\n}", "{\n\
    \    if (arr.length == 0) \n        return [];\n    long minEven = long.max;\n\
    \    long minEvenIndex = -1;\n    foreach (i, v; arr) \n    {\n        if (v %\
    \ 2 == 0 && v < minEven) \n        {\n            minEven = v;\n            minEvenIndex\
    \ = i;\n        }\n    }\n    if (minEvenIndex == -1) \n        return [];\n \
    \   return [minEven, minEvenIndex];\n}", "{\n    if (arr.length == 0)\n      \
    \  return [];\n    long min = arr[0];\n    long index = 0;\n    for (long i =\
    \ 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n\
    \        {\n            min = arr[i];\n            index = i;\n        }\n   \
    \ }\n    if (min % 2 == 0)\n        return [min, index];\n    else\n        return\
    \ [];\n}", "{\n    long[] result = [0L, 0L];\n    long min = long.max;\n    foreach(i,\
    \ e; arr)\n    {\n        if(e % 2 == 0 && e < min)\n        {\n            min\
    \ = e;\n            result[0] = e;\n            result[1] = i;\n        }\n  \
    \  }\n    if(min == long.max)\n        return [];\n    return result;\n}", "{\n\
    \    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if\
    \ (arr[i] < min && arr[i] % 2 == 0)\n        {\n            min = arr[i];\n  \
    \          minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, minIndex];\n    else\n        return [];\n}", "{\n    if (arr.length ==\
    \ 0)\n        return [];\n    long min = arr[0];\n    long index = 0;\n    foreach\
    \ (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n        \
    \    min = v;\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \        return [min, index];\n    return [];\n}", "{\n    if (arr.length == 0)\n\
    \        return new long[0];\n    \n    long min = arr[0];\n    long index = 0;\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            index =\
    \ i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n\
    \    else\n        return new long[0];\n}", "{\n    if (arr.length == 0)\n   \
    \     return [];\n    long min = arr[0];\n    long minIndex = 0;\n    for (long\
    \ i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] <\
    \ min)\n        {\n            min = arr[i];\n            minIndex = i;\n    \
    \    }\n    }\n    if (min % 2 == 0)\n        return [min, minIndex];\n    else\n\
    \        return [];\n}", "{\n    long[] result = new long[2];\n    long min =\
    \ long.max;\n    long index = 0;\n    foreach(i, e; arr)\n    {\n        if(e\
    \ % 2 == 0 && e < min)\n        {\n            min = e;\n            index = i;\n\
    \        }\n    }\n    if(min == long.max)\n    {\n        return result;\n  \
    \  }\n    result[0] = min;\n    result[1] = index;\n    return result;\n}", "{\n\
    \    if (arr.length == 0)\n        return new long[0];\n    long min = arr[0];\n\
    \    long index = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 &&\
    \ e < min)\n        {\n            min = e;\n            index = i;\n        }\n\
    \    }\n    if (min % 2 == 0)\n        return [min, index];\n    return new long[0];\n\
    }", "{\n    if (arr.length == 0) \n        return [];\n    long min = arr[0];\n\
    \    long index = 0;\n    foreach (i, v; arr) \n    {\n        if (v % 2 == 0\
    \ && v < min) \n        {\n            min = v;\n            index = i;\n    \
    \    }\n    }\n    if (min % 2 == 0) \n        return [min, index];\n    return\
    \ [];\n}", "{\n    if (arr.length == 0)\n        return new long[0];\n    long\
    \ min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n        {\n     \
    \       min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min\
    \ % 2 == 0)\n        return new long[] { min, minIndex };\n    return new long[0];\n\
    }", "{\n    auto evens = arr.filter!(a => a % 2 == 0);\n    if (evens.empty)\n\
    \        return [];\n    auto min = evens.min;\n    auto index = arr.indexOf(min);\n\
    \    return [min, index];\n}", "{\n    if (arr.length == 0)\n        return new\
    \ long[0];\n    \n    long minEven = arr[0];\n    long minEvenIndex = 0;\n   \
    \ foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < minEven)\n       \
    \ {\n            minEven = v;\n            minEvenIndex = i;\n        }\n    }\n\
    \    if (minEven % 2 == 0)\n        return [minEven, minEvenIndex];\n    else\n\
    \        return new long[0];\n}", "{\n    if (arr.length == 0)\n        return\
    \ [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n\
    \    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n\
    \            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, index];\n    return [];\n}", "{\n    if (arr.length == 0)\n        return\
    \ new long[0];\n    \n    long minEven = long.max;\n    long minEvenIndex = long.max;\n\
    \    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < minEven)\n    \
    \    {\n            minEven = v;\n            minEvenIndex = i;\n        }\n \
    \   }\n    \n    if (minEven == long.max)\n        return new long[0];\n    \n\
    \    return [minEven, minEvenIndex];\n}", "{\n    long[] result = new long[2];\n\
    \    long min = long.max;\n    long index = 0;\n    foreach(i, e; arr)\n    {\n\
    \        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n       \
    \     index = i;\n        }\n    }\n    if (min == long.max)\n    {\n        return\
    \ result;\n    }\n    result[0] = min;\n    result[1] = index;\n    return result;\n\
    }", "{\n    if (arr.length == 0)\n        return new long[0];\n    long min =\
    \ arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n  \
    \  {\n        if (arr[i] < min && arr[i] % 2 == 0)\n        {\n            min\
    \ = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \        return [min, index];\n    else\n        return new long[0];\n}", "{\n\
    \    long[] result = [0L, 0L];\n    long minEven = long.max;\n    long minEvenIndex\
    \ = 0L;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v < minEven)\n\
    \        {\n            minEven = v;\n            minEvenIndex = i;\n        }\n\
    \    }\n    if(minEven != long.max)\n    {\n        result[0] = minEven;\n   \
    \     result[1] = minEvenIndex;\n    }\n    return result;\n}", "{\n    if (arr.length\
    \ == 0)\n        return [];\n    long minEven = arr[0];\n    long minEvenIndex\
    \ = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < minEven)\n\
    \        {\n            minEven = e;\n            minEvenIndex = i;\n        }\n\
    \    }\n    if (minEven % 2 == 0)\n        return [minEven, minEvenIndex];\n \
    \   return [];\n}", "{\n    if (arr.length == 0) \n        return new long[0];\n\
    \    long min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i < arr.length;\
    \ i++) \n    {\n        if (arr[i] % 2 == 0 && arr[i] < min) \n        {\n   \
    \         min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min\
    \ % 2 == 0) \n        return [min, minIndex];\n    return new long[0];\n}", "{\n\
    \    if (arr.length == 0)\n        return new long[0];\n    long min = arr[0];\n\
    \    long index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 &&\
    \ v < min)\n        {\n            min = v;\n            index = i;\n        }\n\
    \    }\n    if (min % 2 == 0)\n        return [min, index];\n    return new long[0];\n\
    }", "{\n    if (arr.length == 0)\n        return [];\n    long min = long.max;\n\
    \    long index = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 &&\
    \ e < min)\n        {\n            min = e;\n            index = i;\n        }\n\
    \    }\n    if (min == long.max)\n        return [];\n    return [min, index];\n\
    }", "{\n    if (arr.length == 0)\n        return new long[0];\n    long minEven\
    \ = arr[0];\n    long minEvenIndex = 0;\n    bool found = false;\n    foreach\
    \ (i, v; arr)\n    {\n        if (v % 2 == 0)\n        {\n            if (!found)\n\
    \            {\n                minEven = v;\n                minEvenIndex = i;\n\
    \                found = true;\n            }\n            else\n            {\n\
    \                if (v < minEven)\n                {\n                    minEven\
    \ = v;\n                    minEvenIndex = i;\n                }\n           \
    \ }\n        }\n    }\n    if (found)\n        return [minEven, minEvenIndex];\n\
    \    else\n        return new long[0];\n}", "{\n    if (arr.length == 0)\n   \
    \     return new long[0];\n    long min = arr[0];\n    long minIndex = 0;\n  \
    \  for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 &&\
    \ arr[i] < min)\n        {\n            min = arr[i];\n            minIndex =\
    \ i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, minIndex];\n\
    \    else\n        return new long[0];\n}", "{\n    long[] result = [0L, 0L];\n\
    \    long min = arr[0];\n    long index = 0;\n    foreach(i, v; arr)\n    {\n\
    \        if(v % 2 == 0 && v < min)\n        {\n            min = v;\n        \
    \    index = i;\n        }\n    }\n    if(min == arr[0])\n    {\n        return\
    \ result;\n    }\n    else\n    {\n        result[0] = min;\n        result[1]\
    \ = index;\n        return result;\n    }\n}", "{\n    long[] result = new long[2];\n\
    \    if (arr.length == 0) \n    {\n        return result;\n    }\n    long minEven\
    \ = arr[0];\n    long minEvenIndex = 0;\n    for (long i = 0; i < arr.length;\
    \ i++) \n    {\n        if (arr[i] % 2 == 0) \n        {\n            if (arr[i]\
    \ < minEven) \n            {\n                minEven = arr[i];\n            \
    \    minEvenIndex = i;\n            }\n        }\n    }\n    if (minEven % 2 ==\
    \ 0) \n    {\n        result[0] = minEven;\n        result[1] = minEvenIndex;\n\
    \    }\n    return result;\n}", "{\n    long[] result = [long.max, long.max];\n\
    \    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v < result[0])\n    \
    \    {\n            result[0] = v;\n            result[1] = i;\n        }\n  \
    \  }\n    if(result[0] == long.max)\n        return [];\n    return result;\n}",
  "{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long\
    \ index = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i]\
    \ % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n          \
    \  index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n\
    \    else\n        return [];\n}", "{\n    long[] result = new long[2];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n\
    \        {\n            min = e;\n            index = i;\n        }\n    }\n \
    \   if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n\
    \    }\n    return result;\n}", "{\n    if (arr.length == 0)\n        return [];\n\
    \    auto evens = arr.filter!(x => x % 2 == 0);\n    if (evens.length == 0)\n\
    \        return [];\n    auto min = evens.min;\n    auto index = arr.indexOf(min);\n\
    \    return [min, index];\n}", "{\n    if (arr.length == 0)\n        return new\
    \ long[0];\n    \n    long minEven = arr[0];\n    long minEvenIndex = 0;\n   \
    \ bool found = false;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0)\n\
    \        {\n            if (!found)\n            {\n                minEven =\
    \ v;\n                minEvenIndex = i;\n                found = true;\n     \
    \       }\n            else\n            {\n                if (v < minEven)\n\
    \                {\n                    minEven = v;\n                    minEvenIndex\
    \ = i;\n                }\n            }\n        }\n    }\n    if (found)\n \
    \       return [minEven, minEvenIndex];\n    else\n        return new long[0];\n\
    }", "{\n    long[] result = [long.max, long.max];\n    foreach(i, v; arr)\n  \
    \  {\n        if(v % 2 == 0 && v < result[0])\n        {\n            result[0]\
    \ = v;\n            result[1] = i;\n        }\n    }\n    if(result[0] == long.max)\n\
    \        return [];\n    return result;\n}", "{\n    long[] result = [0L, 0L];\n\
    \    long min = long.max;\n    foreach(i, e; arr)\n    {\n        if(e % 2 ==\
    \ 0 && e < min)\n        {\n            min = e;\n            result[0] = e;\n\
    \            result[1] = i;\n        }\n    }\n    if(min == long.max)\n     \
    \   return [];\n    return result;\n}", "{\n    long[] result = [0L, 0L];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n\
    \        {\n            min = v;\n            index = i;\n        }\n    }\n \
    \   if (min == arr[0])\n        return result;\n    result[0] = min;\n    result[1]\
    \ = index;\n    return result;\n}", "{\n    if (arr.length == 0)\n        return\
    \ new long[0];\n    long min = long.max;\n    long index = 0;\n    foreach (i,\
    \ v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min\
    \ = v;\n            index = i;\n        }\n    }\n    if (min == long.max)\n \
    \       return new long[0];\n    return [min, index];\n}", "{\n    long[] result\
    \ = [0L, 0L];\n    long min = long.max;\n    foreach(i, e; arr)\n    {\n     \
    \   if(e % 2 == 0 && e < min)\n        {\n            min = e;\n            result[0]\
    \ = e;\n            result[1] = i;\n        }\n    }\n    if(min == long.max)\n\
    \        return [];\n    return result;\n}", "{\n    long[] result = [0L, 0L];\n\
    \    long min = long.max;\n    foreach(i, v; arr)\n    {\n        if(v % 2 ==\
    \ 0 && v < min)\n        {\n            min = v;\n            result[0] = v;\n\
    \            result[1] = i;\n        }\n    }\n    if(min == long.max)\n     \
    \   return [];\n    return result;\n}", "{\n    if (arr.length == 0)\n       \
    \ return new long[0];\n    long min = arr[0];\n    long minIndex = 0;\n    for\
    \ (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i]\
    \ < min)\n        {\n            min = arr[i];\n            minIndex = i;\n  \
    \      }\n    }\n    if (min % 2 == 0)\n        return [min, minIndex];\n    else\n\
    \        return new long[0];\n}", "{\n    if (arr.length == 0)\n        return\
    \ [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, e; arr)\n\
    \    {\n        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n\
    \            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, index];\n    return [];\n}", "{\n    long[] result = [0L, 0L];\n    long\
    \ minEven = long.max;\n    foreach(i, v; arr)\n    {\n        if (v % 2 == 0 &&\
    \ v < minEven)\n        {\n            minEven = v;\n            result[0] = v;\n\
    \            result[1] = i;\n        }\n    }\n    if (minEven == long.max)\n\
    \    {\n        return [];\n    }\n    return result;\n}", "{\n    if (arr.length\
    \ == 0)\n        return [];\n    long minEven = arr[0];\n    long minEvenIndex\
    \ = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] %\
    \ 2 == 0)\n        {\n            if (arr[i] < minEven)\n            {\n     \
    \           minEven = arr[i];\n                minEvenIndex = i;\n           \
    \ }\n        }\n    }\n    if (minEven % 2 == 0)\n        return [minEven, minEvenIndex];\n\
    \    else\n        return [];\n}", "{\n    long[] result = new long[2];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ index = 0;\n    bool found = false;\n    foreach (i, v; arr)\n    {\n      \
    \  if (v % 2 == 0)\n        {\n            if (!found)\n            {\n      \
    \          min = v;\n                index = i;\n                found = true;\n\
    \            }\n            else\n            {\n                if (v < min)\n\
    \                {\n                    min = v;\n                    index =\
    \ i;\n                }\n            }\n        }\n    }\n    if (found)\n   \
    \ {\n        result[0] = min;\n        result[1] = index;\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[2];\n    long minEven = long.max;\n    long\
    \ minEvenIndex = long.max;\n    foreach(i, v; arr)\n    {\n        if(v % 2 ==\
    \ 0 && v < minEven)\n        {\n            minEven = v;\n            minEvenIndex\
    \ = i;\n        }\n    }\n    if(minEven == long.max)\n    {\n        return result;\n\
    \    }\n    result[0] = minEven;\n    result[1] = minEvenIndex;\n    return result;\n\
    }", "{\n    if (arr.length == 0)\n        return new long[0];\n    long[] result\
    \ = new long[2];\n    long min = arr[0];\n    size_t min_index = 0;\n    bool\
    \ found = false;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0)\n  \
    \      {\n            if (!found)\n            {\n                min = v;\n \
    \               min_index = i;\n                found = true;\n            }\n\
    \            else\n            {\n                if (v < min)\n             \
    \   {\n                    min = v;\n                    min_index = i;\n    \
    \            }\n            }\n        }\n    }\n    if (found)\n    {\n     \
    \   result[0] = min;\n        result[1] = min_index;\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[2];\n    if (arr.length == 0) \n    {\n \
    \       return result;\n    }\n    long min = arr[0];\n    long minIndex = 0;\n\
    \    for (long i = 0; i < arr.length; i++) \n    {\n        if (arr[i] % 2 ==\
    \ 0) \n        {\n            if (arr[i] < min) \n            {\n            \
    \    min = arr[i];\n                minIndex = i;\n            }\n        }\n\
    \    }\n    if (min % 2 == 0) \n    {\n        result[0] = min;\n        result[1]\
    \ = minIndex;\n    }\n    return result;\n}", "{\n    if (arr.length == 0) return\
    \ [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n\
    \    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n\
    \            index = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n    \
    \    return [min, index];\n    }\n    return [];\n}", "{\n    if (arr.length ==\
    \ 0)\n        return new long[0];\n    long min = arr[0];\n    long minIndex =\
    \ 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2\
    \ == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return new long[] { min,\
    \ minIndex };\n    return new long[0];\n}", "{\n    long[] result = new long[2];\n\
    \    long min = long.max;\n    long index = 0;\n    foreach(i, e; arr)\n    {\n\
    \        if(e % 2 == 0 && e < min)\n        {\n            min = e;\n        \
    \    index = i;\n        }\n    }\n    if(min == long.max)\n    {\n        return\
    \ result;\n    }\n    result[0] = min;\n    result[1] = index;\n    return result;\n\
    }", "{\n    long[] result = new long[2];\n    if (arr.length == 0)\n        return\
    \ result;\n    long min = arr[0];\n    long minIndex = 0;\n    foreach (i, v;\
    \ arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min\
    \ = v;\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n \
    \   {\n        result[0] = min;\n        result[1] = minIndex;\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[2];\n    if (arr.length == 0)\n\
    \        return result;\n    long min = arr[0];\n    long minIndex = 0;\n    for\
    \ (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i]\
    \ < min)\n        {\n            min = arr[i];\n            minIndex = i;\n  \
    \      }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n    \
    \    result[1] = minIndex;\n    }\n    return result;\n}", "{\n    long[] result\
    \ = [0L, 0L];\n    long[] evens = [0L, 0L];\n    long[] odds = [0L, 0L];\n   \
    \ long[] empty = [0L, 0L];\n    long[] temp = [0L, 0L];\n    long[] temp2 = [0L,\
    \ 0L];\n    long[] temp3 = [0L, 0L];\n    long[] temp4 = [0L, 0L];\n    long[]\
    \ temp5 = [0L, 0L];\n    long[] temp6 = [0L, 0L];\n    long[] temp7 = [0L, 0L];\n\
    \    long[] temp8 = [0L, 0L];\n    long[] temp9 = [0L, 0L];\n    long[] temp10\
    \ = [0L, 0L];\n    long[] temp11 = [0L, 0L];\n    long[] temp12 = [0L, 0L];\n\
    \    long[] temp13 = [0L, 0L];\n    long[] temp14 = [0L, 0L];\n    long[] temp15\
    \ = [0L, 0L];\n    long[] temp16 = [0L, 0L];\n    long[] temp17 = [0L, 0L];\n\
    \    long[] temp18 = [0L, 0L];\n    long[] temp19 = [0L, 0L];\n    long[] temp20\
    \ = [0L, 0L];\n    long[] temp21 = [0L, 0L];\n    long[] temp22 = [0L, 0L];\n\
    \    long[] temp23 = [0L, 0L];\n    long[] temp24 = [0L, 0L];\n    long[] temp25\
    \ = [0L, 0L];\n    long[] temp26 = [0L, 0L];\n    long[] temp27 = [0L, 0L];\n\
    \    long[] temp28 = [0L, 0L];\n    long[] temp29 = [0L, 0L];\n    long[] temp30\
    \ = [0L, 0L];\n    long[] temp31 = [0L, 0L];\n    long[] temp32 = [0L, 0L];\n\
    \    long[] temp33 = [0L", "{\n    if (arr.length == 0) \n        return new long[0];\n\
    \    \n    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length;\
    \ i++) \n    {\n        if (arr[i] % 2 == 0 && arr[i] < min) \n        {\n   \
    \         min = arr[i];\n            index = i;\n        }\n    }\n    if (min\
    \ % 2 == 0) \n        return [min, index];\n    else \n        return new long[0];\n\
    }", "{\n    if (arr.length == 0)\n        return new long[0];\n    \n    long\
    \ minEven = arr[0];\n    long minEvenIndex = 0;\n    bool foundEven = false;\n\
    \    for (size_t i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 ==\
    \ 0)\n        {\n            if (!foundEven)\n            {\n                minEven\
    \ = arr[i];\n                minEvenIndex = i;\n                foundEven = true;\n\
    \            }\n            else\n            {\n                if (arr[i] <\
    \ minEven)\n                {\n                    minEven = arr[i];\n       \
    \             minEvenIndex = i;\n                }\n            }\n        }\n\
    \    }\n    if (foundEven)\n        return [minEven, minEvenIndex];\n    else\n\
    \        return new long[0];\n}", "{\n    long min = long.max;\n    long index\
    \ = 0;\n    long[] result = new long[2];\n    foreach(i, e; arr)\n    {\n    \
    \    if(e % 2 == 0 && e < min)\n        {\n            min = e;\n            index\
    \ = i;\n        }\n    }\n    if(min == long.max)\n    {\n        return result;\n\
    \    }\n    result[0] = min;\n    result[1] = index;\n    return result;\n}",
  "{\n    if (arr.length == 0)\n        return [];\n    long minEven = arr[0];\n \
    \   long minEvenIndex = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2\
    \ == 0 && e < minEven)\n        {\n            minEven = e;\n            minEvenIndex\
    \ = i;\n        }\n    }\n    if (minEven % 2 == 0)\n        return [minEven,\
    \ minEvenIndex];\n    return [];\n}", "{\n    if (arr.length == 0)\n        return\
    \ [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n\
    \    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n\
    \            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, index];\n    return [];\n}", "{\n    if (arr.length == 0)\n        return\
    \ [];\n    long minEven = long.max;\n    long minEvenIndex = -1;\n    foreach\
    \ (i, v; arr)\n    {\n        if (v % 2 == 0 && v < minEven)\n        {\n    \
    \        minEven = v;\n            minEvenIndex = i;\n        }\n    }\n    if\
    \ (minEvenIndex == -1)\n        return [];\n    return [minEven, minEvenIndex];\n\
    }", "{\n    auto result = [0L, 0L];\n    if (arr.length == 0)\n        return\
    \ result;\n    auto minEven = arr[0];\n    foreach (i, v; arr)\n    {\n      \
    \  if (v % 2 == 0 && v < minEven)\n        {\n            minEven = v;\n     \
    \       result[0] = v;\n            result[1] = i;\n        }\n    }\n    if (result[0]\
    \ == 0)\n        return [0L, 0L];\n    return result;\n}", "{\n    if (arr.length\
    \ == 0)\n        return new long[0];\n    long min = long.max;\n    long minIndex\
    \ = long.max;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n\
    \        {\n            min = v;\n            minIndex = i;\n        }\n    }\n\
    \    if (min == long.max)\n        return new long[0];\n    return [min, minIndex];\n\
    }", "{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n\
    \    long index = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 &&\
    \ e < min)\n        {\n            min = e;\n            index = i;\n        }\n\
    \    }\n    if (min % 2 == 0)\n        return [min, index];\n    return [];\n}",
  "{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n\
    \        {\n            min = v;\n            index = i;\n        }\n    }\n \
    \   if (min % 2 == 0)\n        return [min, index];\n    return [];\n}", "{\n\
    \    if (arr.length == 0)\n        return new long[0];\n    long minEven = arr[0];\n\
    \    long minEvenIndex = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2\
    \ == 0 && v < minEven)\n        {\n            minEven = v;\n            minEvenIndex\
    \ = i;\n        }\n    }\n    if (minEven % 2 == 0)\n        return [minEven,\
    \ minEvenIndex];\n    return new long[0];\n}", "{\n    if (arr.length == 0)\n\
    \        return new long[0];\n    long min = arr[0];\n    long minIndex = 0;\n\
    \    bool found = false;\n    foreach (i, v; arr)\n    {\n        if (v % 2 ==\
    \ 0)\n        {\n            if (!found)\n            {\n                min =\
    \ v;\n                minIndex = i;\n                found = true;\n         \
    \   }\n            else\n            {\n                if (v < min)\n       \
    \         {\n                    min = v;\n                    minIndex = i;\n\
    \                }\n            }\n        }\n    }\n    if (found)\n        return\
    \ [min, minIndex];\n    else\n        return new long[0];\n}", "{\n    long[]\
    \ result = new long[2];\n    if (arr.length == 0)\n        return result;\n  \
    \  long min = arr[0];\n    long index = 0;\n    bool found = false;\n    foreach\
    \ (i, v; arr)\n    {\n        if (v % 2 == 0)\n        {\n            if (!found)\n\
    \            {\n                min = v;\n                index = i;\n       \
    \         found = true;\n            }\n            else\n            {\n    \
    \            if (v < min)\n                {\n                    min = v;\n \
    \                   index = i;\n                }\n            }\n        }\n\
    \    }\n    if (found)\n    {\n        result[0] = min;\n        result[1] = index;\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long index = 0;\n\
    \    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n\
    \            min = e;\n            index = i;\n        }\n    }\n    if (min %\
    \ 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n    }\n\
    \    return result;\n}", "{\n    long[] result = [0L, 0L];\n    long min = long.max;\n\
    \    long index = 0L;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 &&\
    \ e < min)\n        {\n            min = e;\n            index = i;\n        }\n\
    \    }\n    if(min != long.max)\n    {\n        result[0] = min;\n        result[1]\
    \ = index;\n    }\n    return result;\n}", "{\n    if (arr.length == 0)\n    \
    \    return [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i,\
    \ e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n            min\
    \ = e;\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n    \
    \    return [min, index];\n    return [];\n}", "{\n    long[] res = new long[2];\n\
    \    if (arr.length == 0)\n        return res;\n    long min = arr[0];\n    long\
    \ index = 0;\n    bool isEven = false;\n    foreach (i, e; arr)\n    {\n     \
    \   if (e % 2 == 0)\n        {\n            if (!isEven)\n            {\n    \
    \            min = e;\n                index = i;\n                isEven = true;\n\
    \            }\n            else\n            {\n                if (e < min)\n\
    \                {\n                    min = e;\n                    index =\
    \ i;\n                }\n            }\n        }\n    }\n    if (isEven)\n  \
    \  {\n        res[0] = min;\n        res[1] = index;\n    }\n    return res;\n\
    }", "{\n    long[] result = new long[2];\n    long min = long.max;\n    long index\
    \ = -1;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 && e < min)\n  \
    \      {\n            min = e;\n            index = i;\n        }\n    }\n   \
    \ if(index != -1)\n    {\n        result[0] = min;\n        result[1] = index;\n\
    \    }\n    return result;\n}", "{\n    if (arr.length == 0)\n        return new\
    \ long[0];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n\
    \    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n\
    \            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, index];\n    return new long[0];\n}", "{\n    if (arr.length == 0) return\
    \ new long[0];\n    long min = arr[0];\n    long minIndex = 0;\n    for (long\
    \ i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] <\
    \ min)\n        {\n            min = arr[i];\n            minIndex = i;\n    \
    \    }\n    }\n    if (min == arr[0]) return new long[0];\n    return [min, minIndex];\n\
    }", "{\n    long[] result = new long[2];\n    long min = int.max;\n    long index\
    \ = -1;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v < min)\n  \
    \      {\n            min = v;\n            index = i;\n        }\n    }\n   \
    \ if(index == -1)\n        return [];\n    result[0] = min;\n    result[1] = index;\n\
    \    return result;\n}", "{\n    long[] result = [0L, 0L];\n    long min = long.max;\n\
    \    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 && e < min)\n        {\n\
    \            min = e;\n            result[0] = e;\n            result[1] = i;\n\
    \        }\n    }\n    if(min == long.max)\n        return [];\n    return result;\n\
    }", "{\n    long[] result = new long[2];\n    long min = long.max;\n    long index\
    \ = -1;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 && e < min)\n  \
    \      {\n            min = e;\n            index = i;\n        }\n    }\n   \
    \ if(index != -1)\n    {\n        result[0] = min;\n        result[1] = index;\n\
    \    }\n    return result;\n}", "{\n    if (arr.length == 0)\n        return new\
    \ long[0];\n    long min = long.max;\n    long minIndex = -1;\n    foreach (i,\
    \ v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min\
    \ = v;\n            minIndex = i;\n        }\n    }\n    if (min == long.max)\n\
    \        return new long[0];\n    return [min, minIndex];\n}", "{\n    if (arr.length\
    \ == 0)\n        return new long[0];\n    auto min = arr[0];\n    auto minIndex\
    \ = 0L;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n\
    \        {\n            min = e;\n            minIndex = i;\n        }\n    }\n\
    \    if (min % 2 == 0)\n        return [min, minIndex];\n    return new long[0];\n\
    }", "{\n    long[] result = [long.max, long.max];\n    foreach(i, v; arr)\n  \
    \  {\n        if(v % 2 == 0 && v < result[0])\n        {\n            result[0]\
    \ = v;\n            result[1] = i;\n        }\n    }\n    if(result[0] == long.max)\n\
    \        return [];\n    return result;\n}", "{\n    long[] result = [0L, 0L];\n\
    \    long min = long.max;\n    long index = 0L;\n    foreach(i, e; arr)\n    {\n\
    \        if(e % 2 == 0 && e < min)\n        {\n            min = e;\n        \
    \    index = i;\n        }\n    }\n    if(min != long.max)\n    {\n        result[0]\
    \ = min;\n        result[1] = index;\n    }\n    return result;\n}", "{\n    if\
    \ (arr.length == 0)\n        return [];\n    auto min = arr[0];\n    auto minIndex\
    \ = 0;\n    for (size_t i = 0; i < arr.length; i++)\n    {\n        if (arr[i]\
    \ % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n          \
    \  minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min,\
    \ minIndex];\n    return [];\n}", "{\n    long[] result = new long[2];\n    if\
    \ (arr.length == 0) return result;\n    long min = arr[0];\n    long minIndex\
    \ = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] <\
    \ min && arr[i] % 2 == 0)\n        {\n            min = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = minIndex;\n    }\n    return result;\n}", "{\n    if (arr.length\
    \ == 0)\n        return [];\n    long min = arr[0];\n    long index = 0;\n   \
    \ for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 &&\
    \ arr[i] < min)\n        {\n            min = arr[i];\n            index = i;\n\
    \        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n    else\n\
    \        return [];\n}", "{\n    if (arr.length == 0)\n        return [];\n  \
    \  long minEven = arr[0];\n    long minEvenIndex = 0;\n    for (long i = 0; i\
    \ < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0)\n        {\n       \
    \     if (arr[i] < minEven)\n            {\n                minEven = arr[i];\n\
    \                minEvenIndex = i;\n            }\n        }\n    }\n    if (minEven\
    \ % 2 == 0)\n        return [minEven, minEvenIndex];\n    else\n        return\
    \ [];\n}", "{\n    long[] result = new long[2];\n    long min = long.max;\n  \
    \  long minIndex = long.max;\n    foreach(i, e; arr)\n    {\n        if(e % 2\
    \ == 0 && e < min)\n        {\n            min = e;\n            minIndex = i;\n\
    \        }\n    }\n    if(min == long.max)\n    {\n        return [];\n    }\n\
    \    result[0] = min;\n    result[1] = minIndex;\n    return result;\n}", "{\n\
    \    if (arr.length == 0)\n        return new long[0];\n    long min = arr[0];\n\
    \    long index = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 &&\
    \ e < min)\n        {\n            min = e;\n            index = i;\n        }\n\
    \    }\n    if (min % 2 == 0)\n        return [min, index];\n    return new long[0];\n\
    }", "{\n    if (arr.length == 0) return new long[0];\n    auto evens = arr.filter!(a\
    \ => a % 2 == 0);\n    if (evens.length == 0) return new long[0];\n    auto min\
    \ = evens.min;\n    auto index = arr.indexOf(min);\n    return [min, index];\n\
    }", "{\n    long[] result = new long[2];\n    long minEven = long.max;\n    long\
    \ minEvenIndex = -1;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 &&\
    \ v < minEven)\n        {\n            minEven = v;\n            minEvenIndex\
    \ = i;\n        }\n    }\n    if(minEvenIndex == -1)\n    {\n        return result;\n\
    \    }\n    result[0] = minEven;\n    result[1] = minEvenIndex;\n    return result;\n\
    }", "{\n    if (arr.length == 0)\n        return [];\n    long minEven = arr[0];\n\
    \    long minEvenIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n\
    \        if (arr[i] % 2 == 0)\n        {\n            if (arr[i] < minEven)\n\
    \            {\n                minEven = arr[i];\n                minEvenIndex\
    \ = i;\n            }\n        }\n    }\n    if (minEven % 2 == 0)\n        return\
    \ [minEven, minEvenIndex];\n    else\n        return [];\n}", "{\n    if (arr.length\
    \ == 0)\n        return [];\n    long min = arr[0];\n    long index = 0;\n   \
    \ foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n\
    \            min = e;\n            index = i;\n        }\n    }\n    if (min %\
    \ 2 == 0)\n        return [min, index];\n    return [];\n}", "{\n    long[] result\
    \ = new long[2];\n    long min = long.max;\n    long index = -1;\n    foreach(i,\
    \ e; arr)\n    {\n        if(e % 2 == 0 && e < min)\n        {\n            min\
    \ = e;\n            index = i;\n        }\n    }\n    if(index == -1)\n      \
    \  return result;\n    result[0] = min;\n    result[1] = index;\n    return result;\n\
    }", "{\n    if (arr.length == 0) return new long[0];\n    long min = arr[0];\n\
    \    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n     \
    \   if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n\
    \            index = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n    \
    \    return [min, index];\n    }\n    return new long[0];\n}", "{\n    if (arr.length\
    \ == 0)\n        return [];\n    long min = arr[0];\n    long index = 0;\n   \
    \ foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n\
    \            min = v;\n            index = i;\n        }\n    }\n    if (min %\
    \ 2 == 0)\n        return [min, index];\n    return [];\n}", "{\n    if (arr.length\
    \ == 0)\n        return [];\n    long[] result = [arr[0], 0];\n    foreach (i,\
    \ e; arr)\n    {\n        if (e % 2 == 0 && e < result[0])\n        {\n      \
    \      result[0] = e;\n            result[1] = i;\n        }\n    }\n    if (result[0]\
    \ % 2 != 0)\n        return [];\n    return result;\n}", "{\n    if (arr.length\
    \ == 0)\n        return [];\n    long minEven = arr[0];\n    long minEvenIndex\
    \ = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] %\
    \ 2 == 0)\n        {\n            if (arr[i] < minEven)\n            {\n     \
    \           minEven = arr[i];\n                minEvenIndex = i;\n           \
    \ }\n        }\n    }\n    if (minEven % 2 == 0)\n        return [minEven, minEvenIndex];\n\
    \    else\n        return [];\n}", "{\n    long[] result = [long.max, long.max];\n\
    \    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v < result[0])\n    \
    \    {\n            result[0] = v;\n            result[1] = i;\n        }\n  \
    \  }\n    if(result[0] == long.max)\n        return [];\n    return result;\n}",
  "{\n    long[] result = new long[2];\n    if (arr.length == 0)\n        return result;\n\
    \    long min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min\
    \ % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = minIndex;\n\
    \    }\n    return result;\n}", "{\n    long[] result = [0L, 0L];\n    long min\
    \ = long.max;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v < min)\n\
    \        {\n            min = v;\n            result[0] = v;\n            result[1]\
    \ = i;\n        }\n    }\n    if(min == long.max)\n        return [];\n    return\
    \ result;\n}", "{\n    if (arr.length == 0)\n        return [];\n    long minEven\
    \ = arr[0];\n    long minEvenIndex = 0;\n    foreach (i, v; arr)\n    {\n    \
    \    if (v % 2 == 0 && v < minEven)\n        {\n            minEven = v;\n   \
    \         minEvenIndex = i;\n        }\n    }\n    if (minEven % 2 == 0)\n   \
    \     return [minEven, minEvenIndex];\n    return [];\n}", "{\n    long[] ret\
    \ = new long[2];\n    long min = long.max;\n    long minIdx = long.max;\n    foreach(idx,\
    \ val; arr)\n    {\n        if(val % 2 == 0 && val < min)\n        {\n       \
    \     min = val;\n            minIdx = idx;\n        }\n    }\n    if(min == long.max)\n\
    \        return ret;\n    ret[0] = min;\n    ret[1] = minIdx;\n    return ret;\n\
    }", "{\n    long[] ret = new long[2];\n    long min = long.max;\n    long minIndex\
    \ = long.max;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v < min)\n\
    \        {\n            min = v;\n            minIndex = i;\n        }\n    }\n\
    \    if(min == long.max)\n        return ret;\n    ret[0] = min;\n    ret[1] =\
    \ minIndex;\n    return ret;\n}", "{\n    if (arr.length == 0)\n        return\
    \ [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n\
    \    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n\
    \            index = i;\n        }\n    }\n    if (min == arr[0])\n        return\
    \ [];\n    return [min, index];\n}", "{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ index = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i]\
    \ % 2 == 0)\n        {\n            if (arr[i] < min)\n            {\n       \
    \         min = arr[i];\n                index = i;\n            }\n        }\n\
    \    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1]\
    \ = index;\n    }\n    return result;\n}", "{\n    if (arr.length == 0)\n    \
    \    return [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i,\
    \ e; arr)\n    {\n        if (e < min && e % 2 == 0)\n        {\n            min\
    \ = e;\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n    \
    \    return [min, index];\n    return [];\n}", "{\n    long[] result = new long[2];\n\
    \    long minEven = long.max;\n    long minEvenIndex = long.max;\n    foreach(long\
    \ i, long v; arr)\n    {\n        if(v % 2 == 0 && v < minEven)\n        {\n \
    \           minEven = v;\n            minEvenIndex = i;\n        }\n    }\n  \
    \  if(minEven == long.max)\n    {\n        return result;\n    }\n    result[0]\
    \ = minEven;\n    result[1] = minEvenIndex;\n    return result;\n}", "{\n    if\
    \ (arr.length == 0)\n        return new long[0];\n    \n    long[] result = new\
    \ long[2];\n    long min = long.max;\n    long index = long.max;\n    for (long\
    \ i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] <\
    \ min)\n        {\n            min = arr[i];\n            index = i;\n       \
    \ }\n    }\n    if (min == long.max)\n        return new long[0];\n    result[0]\
    \ = min;\n    result[1] = index;\n    return result;\n}", "{\n    if (arr.length\
    \ == 0)\n        return new long[0];\n    long min = arr[0];\n    long index =\
    \ 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2\
    \ == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            index\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n\
    \    else\n        return new long[0];\n}", "{\n    if (arr.length == 0)\n   \
    \     return [];\n    long minEven = arr[0];\n    long minEvenIndex = 0;\n   \
    \ foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < minEven)\n       \
    \ {\n            minEven = v;\n            minEvenIndex = i;\n        }\n    }\n\
    \    if (minEven % 2 == 0)\n        return [minEven, minEvenIndex];\n    return\
    \ [];\n}", "{\n    long[] result = [0L, 0L];\n    if (arr.length == 0)\n     \
    \   return result;\n    long min = arr[0];\n    long index = 0;\n    foreach (i,\
    \ e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n            min\
    \ = e;\n            index = i;\n        }\n    }\n    if (min == arr[0])\n   \
    \     return result;\n    result[0] = min;\n    result[1] = index;\n    return\
    \ result;\n}", "{\n    long[] result = new long[2];\n    long minEven = long.max;\n\
    \    long minEvenIndex = -1;\n    foreach(i, elem; arr)\n    {\n        if(elem\
    \ % 2 == 0 && elem < minEven)\n        {\n            minEven = elem;\n      \
    \      minEvenIndex = i;\n        }\n    }\n    if(minEvenIndex != -1)\n    {\n\
    \        result[0] = minEven;\n        result[1] = minEvenIndex;\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[2];\n    if (arr.length == 0)\n\
    \        return result;\n    long min = arr[0];\n    long minIndex = 0;\n    foreach\
    \ (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n        \
    \    min = v;\n            minIndex = i;\n        }\n    }\n    if (min % 2 ==\
    \ 0)\n    {\n        result[0] = min;\n        result[1] = minIndex;\n    }\n\
    \    return result;\n}", "{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n    {\n\
    \        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n       \
    \     index = i;\n        }\n    }\n    if (min == arr[0])\n        return new\
    \ long[0];\n    return [min, index];\n}", "{\n    long[] result = [0L, 0L];\n\
    \    long min = 0;\n    long index = 0;\n    long i = 0;\n    foreach(long val;\
    \ arr)\n    {\n        if(val % 2 == 0)\n        {\n            if(min == 0)\n\
    \            {\n                min = val;\n                index = i;\n     \
    \       }\n            else if(val < min)\n            {\n                min\
    \ = val;\n                index = i;\n            }\n        }\n        i++;\n\
    \    }\n    if(min != 0)\n    {\n        result[0] = min;\n        result[1] =\
    \ index;\n    }\n    return result;\n}", "{\n    if (arr.length == 0)\n      \
    \  return new long[0];\n    long[] result = new long[2];\n    result[0] = long.max;\n\
    \    result[1] = long.max;\n    foreach (i, e; arr)\n    {\n        if (e % 2\
    \ == 0 && e < result[0])\n        {\n            result[0] = e;\n            result[1]\
    \ = i;\n        }\n    }\n    if (result[0] == long.max)\n        return new long[0];\n\
    \    return result;\n}", "{\n    long[] result = [0L, 0L];\n    long min = long.max;\n\
    \    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v < min)\n        {\n\
    \            min = v;\n            result[0] = v;\n            result[1] = i;\n\
    \        }\n    }\n    if(min == long.max)\n        return [];\n    return result;\n\
    }", "{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n\
    \    long index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 &&\
    \ v < min)\n        {\n            min = v;\n            index = i;\n        }\n\
    \    }\n    if (min % 2 == 0)\n        return [min, index];\n    return [];\n}",
  "{\n    auto result = [long.max, -1L];\n    foreach (i, v; arr)\n    {\n       \
    \ if (v % 2 == 0 && v < result[0])\n        {\n            result[0] = v;\n  \
    \          result[1] = i;\n        }\n    }\n    if (result[0] == long.max)\n\
    \    {\n        return [];\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[2];\n    if (arr.length == 0) \n    {\n        return result;\n \
    \   }\n    long min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i\
    \ < arr.length; i++) \n    {\n        if (arr[i] % 2 == 0) \n        {\n     \
    \       if (arr[i] < min) \n            {\n                min = arr[i];\n   \
    \             minIndex = i;\n            }\n        }\n    }\n    if (min % 2\
    \ == 0) \n    {\n        result[0] = min;\n        result[1] = minIndex;\n   \
    \ }\n    return result;\n}", "{\n    if (arr.length == 0)\n        return new\
    \ long[0];\n    \n    long[] result = new long[2];\n    long minEven = long.max;\n\
    \    long minEvenIndex = long.max;\n    foreach (i, v; arr)\n    {\n        if\
    \ (v % 2 == 0 && v < minEven)\n        {\n            minEven = v;\n         \
    \   minEvenIndex = i;\n        }\n    }\n    if (minEven == long.max)\n      \
    \  return new long[0];\n    result[0] = minEven;\n    result[1] = minEvenIndex;\n\
    \    return result;\n}", "{\n    long[] result = new long[2];\n    long min =\
    \ long.max;\n    long index = 0;\n    foreach(i, e; arr)\n    {\n        if(e\
    \ % 2 == 0 && e < min)\n        {\n            min = e;\n            index = i;\n\
    \        }\n    }\n    if(min == long.max)\n    {\n        return result;\n  \
    \  }\n    result[0] = min;\n    result[1] = index;\n    return result;\n}", "{\n\
    \    if (arr.length == 0)\n        return new long[0];\n    long min = arr[0];\n\
    \    long index = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 &&\
    \ e < min)\n        {\n            min = e;\n            index = i;\n        }\n\
    \    }\n    if (min % 2 == 0)\n        return [min, index];\n    return new long[0];\n\
    }", "{\n    if (arr.length == 0)\n        return new long[0];\n    long min =\
    \ arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n  \
    \  {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min\
    \ = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \        return [min, index];\n    else\n        return new long[0];\n}", "{\n\
    \    long[] res = new long[2];\n    long min = long.max;\n    long index = 0;\n\
    \    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v < min)\n        {\n\
    \            min = v;\n            index = i;\n        }\n    }\n    if(min ==\
    \ long.max)\n        return [];\n    res[0] = min;\n    res[1] = index;\n    return\
    \ res;\n}", "{\n    if (arr.length == 0)\n        return new long[0];\n    \n\
    \    long minEven = long.max;\n    long minEvenIndex = long.max;\n    foreach\
    \ (i, v; arr)\n    {\n        if (v % 2 == 0 && v < minEven)\n        {\n    \
    \        minEven = v;\n            minEvenIndex = i;\n        }\n    }\n    \n\
    \    if (minEven == long.max)\n        return new long[0];\n    \n    return [minEven,\
    \ minEvenIndex];\n}", "{\n    long[] ret = new long[2];\n    long min = long.max;\n\
    \    long index = 0;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 &&\
    \ e < min)\n        {\n            min = e;\n            index = i;\n        }\n\
    \    }\n    if(min == long.max)\n        return ret;\n    ret[0] = min;\n    ret[1]\
    \ = index;\n    return ret;\n}", "{\n    long[] result = new long[2];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = long.max;\n    long\
    \ index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n\
    \        {\n            min = v;\n            index = i;\n        }\n    }\n \
    \   if (min == long.max)\n        return result;\n    result[0] = min;\n    result[1]\
    \ = index;\n    return result;\n}", "{\n    if (arr.length == 0)\n        return\
    \ new long[0];\n    long[] res = new long[2];\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if\
    \ (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n  \
    \          minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n   \
    \     res[0] = min;\n        res[1] = minIndex;\n    }\n    return res;\n}", "{\n\
    \    long[] result = new long[2];\n    if (arr.length == 0)\n        return result;\n\
    \    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0)\n        {\n            if (arr[i]\
    \ < min)\n            {\n                min = arr[i];\n                index\
    \ = i;\n            }\n        }\n    }\n    if (min % 2 == 0)\n    {\n      \
    \  result[0] = min;\n        result[1] = index;\n    }\n    return result;\n}",
  "{\n    if (arr.length == 0)\n        return [];\n    long minEven = arr[0];\n \
    \   long minEvenIndex = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2\
    \ == 0 && e < minEven)\n        {\n            minEven = e;\n            minEvenIndex\
    \ = i;\n        }\n    }\n    if (minEven % 2 == 0)\n        return [minEven,\
    \ minEvenIndex];\n    return [];\n}", "{\n    long minEven = long.max;\n    long\
    \ minEvenIndex = long.max;\n    foreach(i, val; arr)\n    {\n        if(val %\
    \ 2 == 0 && val < minEven)\n        {\n            minEven = val;\n          \
    \  minEvenIndex = i;\n        }\n    }\n    if(minEven == long.max)\n    {\n \
    \       return [];\n    }\n    return [minEven, minEvenIndex];\n}", "{\n    if\
    \ (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long index\
    \ = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] <\
    \ min && arr[i] % 2 == 0)\n        {\n            min = arr[i];\n            index\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n\
    \    else\n        return [];\n}", "{\n    long[] result = new long[2];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n\
    \        {\n            min = v;\n            index = i;\n        }\n    }\n \
    \   if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n\
    \    }\n    return result;\n}", "{\n    if (arr.length == 0) return new long[0];\n\
    \    long minEven = arr[0];\n    long minEvenIndex = 0;\n    foreach (i, v; arr)\n\
    \    {\n        if (v % 2 == 0 && v < minEven)\n        {\n            minEven\
    \ = v;\n            minEvenIndex = i;\n        }\n    }\n    if (minEven == arr[0])\
    \ return new long[0];\n    return [minEven, minEvenIndex];\n}", "{\n    if (arr.length\
    \ == 0)\n        return [];\n    long minEven = arr[0];\n    long minEvenIndex\
    \ = 0;\n    bool foundEven = false;\n    foreach (long i, long v; arr)\n    {\n\
    \        if (v % 2 == 0)\n        {\n            if (!foundEven)\n           \
    \ {\n                minEven = v;\n                minEvenIndex = i;\n       \
    \         foundEven = true;\n            }\n            else\n            {\n\
    \                if (v < minEven)\n                {\n                    minEven\
    \ = v;\n                    minEvenIndex = i;\n                }\n           \
    \ }\n        }\n    }\n    if (foundEven)\n        return [minEven, minEvenIndex];\n\
    \    else\n        return [];\n}", "{\n    long[] result = new long[2];\n    long\
    \ min = long.max;\n    long index = 0;\n    foreach(i, e; arr)\n    {\n      \
    \  if(e % 2 == 0 && e < min)\n        {\n            min = e;\n            index\
    \ = i;\n        }\n    }\n    if(min == long.max)\n    {\n        return result;\n\
    \    }\n    result[0] = min;\n    result[1] = index;\n    return result;\n}",
  "{\n    if (arr.length == 0)\n        return [];\n    long[] result = [arr[0], 0];\n\
    \    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < result[0])\n  \
    \      {\n            result[0] = e;\n            result[1] = i;\n        }\n\
    \    }\n    if (result[0] % 2 != 0)\n        return [];\n    return result;\n}",
  "{\n    long[] result = [0L, 0L];\n    long min = 0;\n    long index = 0;\n    bool\
    \ found = false;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0)\n    \
    \    {\n            if(!found)\n            {\n                min = e;\n    \
    \            index = i;\n                found = true;\n            }\n      \
    \      else\n            {\n                if(e < min)\n                {\n \
    \                   min = e;\n                    index = i;\n               \
    \ }\n            }\n        }\n    }\n    if(found)\n    {\n        result[0]\
    \ = min;\n        result[1] = index;\n    }\n    return result;\n}", "{\n    if\
    \ (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long index\
    \ = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] <\
    \ min && arr[i] % 2 == 0)\n        {\n            min = arr[i];\n            index\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n\
    \    else\n        return [];\n}", "{\n    if (arr.length == 0) return new long[0];\n\
    \    long min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min\
    \ % 2 == 0)\n    {\n        return [min, minIndex];\n    }\n    return new long[0];\n\
    }", "{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n\
    \    long index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 &&\
    \ v < min)\n        {\n            min = v;\n            index = i;\n        }\n\
    \    }\n    if (min % 2 == 0)\n        return [min, index];\n    return [];\n}",
  "{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v <\
    \ min)\n        {\n            min = v;\n            minIndex = i;\n        }\n\
    \    }\n    if (min % 2 == 0)\n        return [min, minIndex];\n    return [];\n\
    }", "{\n    if (arr.length == 0)\n        return [];\n    long minEven = arr[0];\n\
    \    long minEvenIndex = 0;\n    bool found = false;\n    foreach (i, v; arr)\n\
    \    {\n        if (v % 2 == 0)\n        {\n            if (!found)\n        \
    \    {\n                minEven = v;\n                minEvenIndex = i;\n    \
    \            found = true;\n            }\n            else\n            {\n \
    \               if (v < minEven)\n                {\n                    minEven\
    \ = v;\n                    minEvenIndex = i;\n                }\n           \
    \ }\n        }\n    }\n    if (found)\n        return [minEven, minEvenIndex];\n\
    \    else\n        return [];\n}", "{\n    if (arr.length == 0)\n        return\
    \ [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n\
    \    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n\
    \            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, index];\n    return [];\n}", "{\n    if (arr.length == 0)\n        return\
    \ new long[0];\n    long min = arr[0];\n    long minIndex = 0;\n    for (long\
    \ i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] <\
    \ min)\n        {\n            min = arr[i];\n            minIndex = i;\n    \
    \    }\n    }\n    if (min % 2 == 0)\n        return [min, minIndex];\n    else\n\
    \        return new long[0];\n}", "{\n    long[] result = new long[2];\n    long\
    \ min = long.max;\n    long index = -1;\n    foreach(i, e; arr)\n    {\n     \
    \   if(e % 2 == 0 && e < min)\n        {\n            min = e;\n            index\
    \ = i;\n        }\n    }\n    if(index == -1)\n        return result;\n    result[0]\
    \ = min;\n    result[1] = index;\n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
