name: HumanEval_68_pluck
language: d
prompt: "import std.math;\n/*\n\n    \"Given an array representing a branch of a tree\
  \ that has non-negative integer nodes\n    your task is to pluck one of the nodes\
  \ and return it.\n    The plucked node should be the node with the smallest even\
  \ value.\n    If multiple nodes with the same smallest even value are found return\
  \ the node that has smallest index.\n\n    The plucked node should be returned in\
  \ an array, [ smalest_value, its index ],\n    If there are no even values or the\
  \ given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4L, 2L, 3L])\n\
  \    [2L, 1L]\n    Explanation: 2 has the smallest even value, and 2 has the smallest\
  \ index.\n\n    Example 2:\n    >>> pluck([1L, 2L, 3L])\n    [2L, 1L]\n    Explanation:\
  \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n\
  \    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L,\
  \ 4L, 2L])\n    [0L, 1L]\n    Explanation: 0 is the smallest value, but  there are\
  \ two zeros,\n                 so we will choose the first zero, which has the smallest\
  \ index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0\
  \ <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n"
tests: "unittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
  \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
  \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
  \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
  \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
  \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
completions: ["{\n    long[] result = new long[2];\n    if (arr.length == 0)\n   \
    \     return result;\n    long min = arr[0];\n    int index = 0;\n    for (int\
    \ i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] <\
    \ min)\n        {\n            min = arr[i];\n            index = i;\n       \
    \ }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1]\
    \ = index;\n    }\n    return result;\n}", "{\n    long[] result = new long[2];\n\
    \    long min = long.max;\n    int index = -1;\n    for (int i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            index = i;\n        }\n    }\n    if (index\
    \ == -1)\n    {\n        return new long[0];\n    }\n    result[0] = min;\n  \
    \  result[1] = index;\n    return result;\n}", "{\n    long[] result = new long[2];\n\
    \    long min = long.max;\n    int index = -1;\n    for (int i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            index = i;\n        }\n    }\n    if (index\
    \ == -1)\n    {\n        return new long[0];\n    }\n    result[0] = min;\n  \
    \  result[1] = index;\n    return result;\n}", "{\n    long minEven = long.max;\n\
    \    long minEvenIndex = long.max;\n    foreach(i, v; arr)\n    {\n        if(v\
    \ % 2 == 0 && v < minEven)\n        {\n            minEven = v;\n            minEvenIndex\
    \ = i;\n        }\n    }\n    if(minEven == long.max)\n    {\n        return [];\n\
    \    }\n    return [minEven, minEvenIndex];\n}", "{\n    long[] result = new long[2];\n\
    \    if (arr.length == 0)\n        return result;\n    long min = arr[0];\n  \
    \  long index = 0;\n    for (int i = 0; i < arr.length; i++)\n    {\n        if\
    \ (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n  \
    \          index = i;\n        }\n    }\n    if (min == arr[0])\n        return\
    \ result;\n    result[0] = min;\n    result[1] = index;\n    return result;\n}",
  "{\n    long[] result = new long[2];\n    long smallest = 0;\n    long index = 0;\n\
    \    bool found = false;\n    for (int i = 0; i < arr.length; i++)\n    {\n  \
    \      if (arr[i] % 2 == 0)\n        {\n            if (!found)\n            {\n\
    \                smallest = arr[i];\n                index = i;\n            \
    \    found = true;\n            }\n            else\n            {\n         \
    \       if (arr[i] < smallest)\n                {\n                    smallest\
    \ = arr[i];\n                    index = i;\n                }\n            }\n\
    \        }\n    }\n    if (found)\n    {\n        result[0] = smallest;\n    \
    \    result[1] = index;\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[2];\n    if (arr.length == 0) return result;\n    long min = arr[0];\n\
    \    long minIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n  \
    \      if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n\
    \            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n \
    \       result[0] = min;\n        result[1] = minIndex;\n    }\n    return result;\n\
    }", "{\n    long[] res = new long[2];\n    long min = long.max;\n    int index\
    \ = -1;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v < min)\n  \
    \      {\n            min = v;\n            index = i;\n        }\n    }\n   \
    \ if(index == -1)\n        return res;\n    res[0] = min;\n    res[1] = index;\n\
    \    return res;\n}", "{\n    long min = 10001;\n    long index = -1;\n    for\
    \ (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i]\
    \ < min)\n        {\n            min = arr[i];\n            index = i;\n     \
    \   }\n    }\n    if (index == -1)\n    {\n        return new long[0];\n    }\n\
    \    return new long[] { min, index };\n}", "{\n    long[] result = new long[2];\n\
    \    int index = -1;\n    long min = -1;\n    for (int i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0)\n        {\n            if (index\
    \ == -1)\n            {\n                index = i;\n                min = arr[i];\n\
    \            }\n            else if (arr[i] < min)\n            {\n          \
    \      index = i;\n                min = arr[i];\n            }\n        }\n \
    \   }\n    if (index != -1)\n    {\n        result[0] = min;\n        result[1]\
    \ = index;\n    }\n    return result;\n}", "{\n    long min = long.max;\n    long\
    \ minIndex = -1;\n    for (int i = 0; i < arr.length; i++)\n    {\n        if\
    \ (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n  \
    \          minIndex = i;\n        }\n    }\n    if (minIndex == -1)\n    {\n \
    \       return new long[0];\n    }\n    return new long[] { min, minIndex };\n\
    }", "{\n    long[] result = new long[2];\n    if (arr.length == 0) return result;\n\
    \    long min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min\
    \ % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = minIndex;\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[2];\n    long\
    \ min = 10001;\n    long index = 0;\n    bool found = false;\n    foreach(long\
    \ i, long val; arr)\n    {\n        if(val % 2 == 0 && val < min)\n        {\n\
    \            min = val;\n            index = i;\n            found = true;\n \
    \       }\n    }\n    if(found)\n    {\n        result[0] = min;\n        result[1]\
    \ = index;\n    }\n    return result;\n}", "{\n    long[] result = new long[2];\n\
    \    long min = 10001;\n    long index = -1;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            index = i;\n        }\n    }\n    if (index\
    \ == -1)\n    {\n        return new long[0];\n    }\n    result[0] = min;\n  \
    \  result[1] = index;\n    return result;\n}", "{\n    long[] result = new long[2];\n\
    \    long min = 10001;\n    long index = 0;\n    for (int i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            index = i;\n        }\n    }\n    if (min ==\
    \ 10001)\n    {\n        return new long[0];\n    }\n    result[0] = min;\n  \
    \  result[1] = index;\n    return result;\n}", "{\n    long[] res = new long[2];\n\
    \    long min = long.max;\n    long index = -1;\n    foreach(i, v; arr)\n    {\n\
    \        if(v % 2 == 0 && v < min)\n        {\n            min = v;\n        \
    \    index = i;\n        }\n    }\n    if(index != -1)\n    {\n        res[0]\
    \ = min;\n        res[1] = index;\n    }\n    return res;\n}", "{\n    long[]\
    \ result = new long[2];\n    long min = long.max;\n    long index = 0;\n    foreach(i,\
    \ e; arr)\n    {\n        if(e % 2 == 0 && e < min)\n        {\n            min\
    \ = e;\n            index = i;\n        }\n    }\n    if(min == long.max)\n  \
    \  {\n        return result;\n    }\n    result[0] = min;\n    result[1] = index;\n\
    \    return result;\n}", "{\n    long min = long.max;\n    long index = -1;\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            index =\
    \ i;\n        }\n    }\n    if (index == -1)\n        return new long[0];\n  \
    \  return new long[] { min, index };\n}", "{\n    long[] result = new long[2];\n\
    \    if (arr.length == 0)\n        return result;\n    long min = arr[0];\n  \
    \  long minIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n    \
    \    if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n\
    \            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n \
    \       result[0] = min;\n        result[1] = minIndex;\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[2];\n    if (arr.length == 0)\n        return\
    \ result;\n    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i\
    \ < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n  \
    \      {\n            min = arr[i];\n            index = i;\n        }\n    }\n\
    \    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[2];\n    long\
    \ min = long.max;\n    long index = 0;\n    foreach(i, e; arr)\n    {\n      \
    \  if(e % 2 == 0 && e < min)\n        {\n            min = e;\n            index\
    \ = i;\n        }\n    }\n    if(min == long.max)\n    {\n        return [];\n\
    \    }\n    result[0] = min;\n    result[1] = index;\n    return result;\n}",
  "{\n    long[] result = new long[2];\n    if (arr.length == 0) return result;\n\
    \    long min = arr[0];\n    int minIndex = 0;\n    for (int i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min) {\n            min = arr[i];\n\
    \            minIndex = i;\n        }\n    }\n    if (min % 2 == 0) {\n      \
    \  result[0] = min;\n        result[1] = minIndex;\n    }\n    return result;\n\
    }", "{\n    long min = long.max;\n    long index = -1;\n    foreach(i, v; arr)\n\
    \    {\n        if(v % 2 == 0 && v < min)\n        {\n            min = v;\n \
    \           index = i;\n        }\n    }\n    if(index == -1)\n        return\
    \ [];\n    return [min, index];\n}", "{\n    long[] result = new long[2];\n  \
    \  long min = long.max;\n    long index = 0;\n    foreach(i, v; arr)\n    {\n\
    \        if(v % 2 == 0 && v < min)\n        {\n            min = v;\n        \
    \    index = i;\n        }\n    }\n    if(min == long.max)\n    {\n        return\
    \ [];\n    }\n    result[0] = min;\n    result[1] = index;\n    return result;\n\
    }", "{\n    if (arr.length == 0) return new long[0];\n    long min = arr[0];\n\
    \    long min_index = 0;\n    bool found = false;\n    for (int i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0)\n        {\n            if (!found)\n\
    \            {\n                min = arr[i];\n                min_index = i;\n\
    \                found = true;\n            }\n            else\n            {\n\
    \                if (arr[i] < min)\n                {\n                    min\
    \ = arr[i];\n                    min_index = i;\n                }\n         \
    \   }\n        }\n    }\n    if (found)\n    {\n        return new long[] { min,\
    \ min_index };\n    }\n    else\n    {\n        return new long[0];\n    }\n}",
  "{\n    long min = long.max;\n    long index = -1;\n    for (int i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            index = i;\n        }\n    }\n    return min\
    \ == long.max ? new long[0] : new long[] { min, index };\n}", "{\n    long[] result\
    \ = new long[2];\n    long min = arr[0];\n    long index = 0;\n    bool found\
    \ = false;\n    for (long i = 0; i < arr.length; i++) \n    {\n        if (arr[i]\
    \ % 2 == 0) \n        {\n            if (arr[i] < min) \n            {\n     \
    \           min = arr[i];\n                index = i;\n                found =\
    \ true;\n            }\n        }\n    }\n    if (found) \n    {\n        result[0]\
    \ = min;\n        result[1] = index;\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[2];\n    long min = long.max;\n    long index = 0;\n    foreach(i,\
    \ v; arr)\n    {\n        if(v % 2 == 0 && v < min)\n        {\n            min\
    \ = v;\n            index = i;\n        }\n    }\n    if(min == long.max)\n  \
    \  {\n        return [];\n    }\n    result[0] = min;\n    result[1] = index;\n\
    \    return result;\n}", "{\n    long[] result = new long[2];\n    long min =\
    \ 10001;\n    long index = -1;\n    for (int i = 0; i < arr.length; i++)\n   \
    \ {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min\
    \ = arr[i];\n            index = i;\n        }\n    }\n    if (index == -1)\n\
    \    {\n        return new long[0];\n    }\n    result[0] = min;\n    result[1]\
    \ = index;\n    return result;\n}", "{\n    long[] result = new long[2];\n   \
    \ if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ index = 0;\n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i]\
    \ % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n          \
    \  index = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0]\
    \ = min;\n        result[1] = index;\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[2];\n    long min = 0;\n    long index = 0;\n    long count\
    \ = 0;\n    foreach(long i; arr)\n    {\n        if(i % 2 == 0)\n        {\n \
    \           if(count == 0)\n            {\n                min = i;\n        \
    \        index = count;\n            }\n            else\n            {\n    \
    \            if(i < min)\n                {\n                    min = i;\n  \
    \                  index = count;\n                }\n            }\n        }\n\
    \        count++;\n    }\n    if(min == 0)\n    {\n        return result;\n  \
    \  }\n    result[0] = min;\n    result[1] = index;\n    return result;\n}", "{\n\
    \    long[] result = new long[2];\n    long min = long.max;\n    int index = -1;\n\
    \    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            index =\
    \ i;\n        }\n    }\n    if (index == -1)\n    {\n        return result;\n\
    \    }\n    result[0] = min;\n    result[1] = index;\n    return result;\n}",
  "{\n    long[] result = new long[2];\n    result[0] = -1;\n    result[1] = -1;\n\
    \    if (arr.length == 0)\n        return result;\n    for (int i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0)\n        {\n            if (result[0]\
    \ == -1)\n            {\n                result[0] = arr[i];\n               \
    \ result[1] = i;\n            }\n            else if (arr[i] < result[0])\n  \
    \          {\n                result[0] = arr[i];\n                result[1] =\
    \ i;\n            }\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[2];\n    long min = -1;\n    long index = -1;\n    foreach(i,\
    \ v; arr)\n    {\n        if(v % 2 == 0)\n        {\n            if(min == -1)\n\
    \            {\n                min = v;\n                index = i;\n       \
    \     }\n            else if(v < min)\n            {\n                min = v;\n\
    \                index = i;\n            }\n        }\n    }\n    if(min != -1)\n\
    \    {\n        result[0] = min;\n        result[1] = index;\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[2];\n    if (arr.length == 0)\n\
    \        return result;\n    long minEven = 10001;\n    long minIndex = 0;\n \
    \   for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 &&\
    \ arr[i] < minEven)\n        {\n            minEven = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    if (minEven == 10001)\n        return result;\n\
    \    result[0] = minEven;\n    result[1] = minIndex;\n    return result;\n}",
  "{\n    if (arr.length == 0) return new long[0];\n    long min = arr[0];\n    long\
    \ index = 0;\n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i]\
    \ % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n          \
    \  index = i;\n        }\n    }\n    if (min % 2 != 0) return new long[0];\n \
    \   return new long[] { min, index };\n}", "{\n    long[] result = new long[2];\n\
    \    if (arr.length == 0)\n        return result;\n    long min = arr[0];\n  \
    \  long index = 0;\n    for (int i = 0; i < arr.length; i++)\n    {\n        if\
    \ (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n  \
    \          index = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n      \
    \  result[0] = min;\n        result[1] = index;\n    }\n    return result;\n}",
  "{\n    long[] result = new long[2];\n    long min = long.max;\n    long index =\
    \ -1;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v < min)\n    \
    \    {\n            min = v;\n            index = i;\n        }\n    }\n    if(index\
    \ != -1)\n    {\n        result[0] = min;\n        result[1] = index;\n    }\n\
    \    return result;\n}", "{\n    long[] result = new long[2];\n    long min =\
    \ long.max;\n    long index = -1;\n    foreach(i, v; arr)\n    {\n        if(v\
    \ % 2 == 0 && v < min)\n        {\n            min = v;\n            index = i;\n\
    \        }\n    }\n    if(index == -1)\n        return [];\n    result[0] = min;\n\
    \    result[1] = index;\n    return result;\n}", "{\n    long[] result = new long[2];\n\
    \    long min = 10001;\n    long index = -1;\n    for (int i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            index = i;\n        }\n    }\n    if (index\
    \ == -1)\n    {\n        return new long[0];\n    }\n    result[0] = min;\n  \
    \  result[1] = index;\n    return result;\n}", "{\n    long[] result = new long[2];\n\
    \    long min = arr[0];\n    long index = 0;\n    for (int i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            index = i;\n        }\n    }\n    if (min %\
    \ 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n    }\n\
    \    return result;\n}", "{\n    long[] result = new long[2];\n    long min =\
    \ -1;\n    long index = -1;\n    foreach(i, v; arr)\n    {\n        if(v % 2 ==\
    \ 0)\n        {\n            if(min == -1)\n            {\n                min\
    \ = v;\n                index = i;\n            }\n            else if(v < min)\n\
    \            {\n                min = v;\n                index = i;\n       \
    \     }\n        }\n    }\n    if(min == -1)\n    {\n        return result;\n\
    \    }\n    result[0] = min;\n    result[1] = index;\n    return result;\n}",
  "{\n    long[] result = new long[2];\n    if (arr.length == 0) return result;\n\
    \    long min = arr[0];\n    int index = 0;\n    for (int i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            index = i;\n        }\n    }\n    if (min %\
    \ 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n    }\n\
    \    return result;\n}", "{\n    long[] result = new long[2];\n    long min =\
    \ arr[0];\n    long index = 0;\n    foreach(i, e; arr)\n    {\n        if(e %\
    \ 2 == 0 && e < min)\n        {\n            min = e;\n            index = i;\n\
    \        }\n    }\n    if(min % 2 == 0)\n    {\n        result[0] = min;\n   \
    \     result[1] = index;\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[2];\n    long min = arr[0];\n    long index = 0;\n    for (int i\
    \ = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n\
    \        {\n            min = arr[i];\n            index = i;\n        }\n   \
    \ }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1]\
    \ = index;\n    }\n    return result;\n}", "{\n    long[] result = new long[2];\n\
    \    if (arr.length == 0)\n        return result;\n    long min = arr[0];\n  \
    \  long index = 0;\n    for (int i = 0; i < arr.length; i++)\n    {\n        if\
    \ (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n  \
    \          index = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n      \
    \  result[0] = min;\n        result[1] = index;\n    }\n    return result;\n}",
  "{\n    long[] result = new long[2];\n    if (arr.length == 0)\n        return result;\n\
    \    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n        {\n     \
    \       min = arr[i];\n            index = i;\n        }\n    }\n    if (min %\
    \ 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n    }\n\
    \    return result;\n}", "{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    for (int i = 0; i\
    \ < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n  \
    \      {\n            min = arr[i];\n            result[0] = min;\n          \
    \  result[1] = i;\n        }\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[2];\n    long min = long.max;\n    long index = 0;\n    foreach(i,\
    \ e; arr)\n    {\n        if(e % 2 == 0 && e < min)\n        {\n            min\
    \ = e;\n            index = i;\n        }\n    }\n    if(min == long.max)\n  \
    \  {\n        return result;\n    }\n    result[0] = min;\n    result[1] = index;\n\
    \    return result;\n}", "{\n    long[] result = new long[2];\n    long min =\
    \ 0;\n    long index = 0;\n    bool found = false;\n    for (int i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0)\n        {\n            if (!found)\n\
    \            {\n                min = arr[i];\n                index = i;\n  \
    \              found = true;\n            }\n            else\n            {\n\
    \                if (arr[i] < min)\n                {\n                    min\
    \ = arr[i];\n                    index = i;\n                }\n            }\n\
    \        }\n    }\n    if (found)\n    {\n        result[0] = min;\n        result[1]\
    \ = index;\n    }\n    return result;\n}", "{\n    long[] result = new long[2];\n\
    \    long min = long.max;\n    long index = -1;\n    for (int i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            index = i;\n        }\n    }\n    if (index\
    \ == -1)\n    {\n        return new long[0];\n    }\n    result[0] = min;\n  \
    \  result[1] = index;\n    return result;\n}", "{\n    long[] result = new long[2];\n\
    \    long min = INT_MAX;\n    long index = 0;\n    foreach(i, v; arr)\n    {\n\
    \        if(v % 2 == 0 && v < min)\n        {\n            min = v;\n        \
    \    index = i;\n        }\n    }\n    if(min == INT_MAX)\n        return [];\n\
    \    result[0] = min;\n    result[1] = index;\n    return result;\n}", "{\n  \
    \  long[] result = new long[2];\n    if (arr.length == 0)\n        return result;\n\
    \    long min = arr[0];\n    int index = 0;\n    for (int i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            index = i;\n        }\n    }\n    if (min %\
    \ 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n    }\n\
    \    return result;\n}", "{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            index = i;\n        }\n    }\n    if (min %\
    \ 2 == 0)\n        return new long[] { min, index };\n    return new long[0];\n\
    }", "{\n    long[] result = new long[2];\n    if (arr.length == 0)\n        return\
    \ result;\n    long smallest = arr[0];\n    long index = 0;\n    for (int i =\
    \ 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < smallest)\n\
    \        {\n            smallest = arr[i];\n            index = i;\n        }\n\
    \    }\n    if (smallest % 2 == 0)\n    {\n        result[0] = smallest;\n   \
    \     result[1] = index;\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[2];\n    if (arr.length == 0)\n        return result;\n    long min\
    \ = arr[0];\n    int minIndex = 0;\n    for (int i = 0; i < arr.length; i++)\n\
    \    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min\
    \ = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \    {\n        result[0] = min;\n        result[1] = minIndex;\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[2];\n    if (arr.length == 0)\n\
    \        return result;\n    long min = arr[0];\n    long minIndex = 0;\n    for\
    \ (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i]\
    \ < min)\n        {\n            min = arr[i];\n            minIndex = i;\n  \
    \      }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n    \
    \    result[1] = minIndex;\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[2];\n    long min = long.max;\n    int index = 0;\n    for (int i\
    \ = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n\
    \        {\n            min = arr[i];\n            index = i;\n        }\n   \
    \ }\n    if (min == long.max)\n    {\n        return result;\n    }\n    result[0]\
    \ = min;\n    result[1] = index;\n    return result;\n}", "{\n    long[] result\
    \ = new long[2];\n    if (arr.length == 0)\n        return result;\n    long min\
    \ = arr[0];\n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i]\
    \ % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n          \
    \  result[0] = min;\n            result[1] = i;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[2];\n    if (arr.length == 0)\
    \ return result;\n    long min = arr[0];\n    long index = 0;\n    for (long i\
    \ = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n\
    \        {\n            min = arr[i];\n            index = i;\n        }\n   \
    \ }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1]\
    \ = index;\n    }\n    return result;\n}", "{\n    long[] result = new long[2];\n\
    \    if (arr.length == 0)\n        return result;\n    long min = arr[0];\n  \
    \  int minIndex = 0;\n    for (int i = 0; i < arr.length; i++)\n    {\n      \
    \  if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n\
    \            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n \
    \       result[0] = min;\n        result[1] = minIndex;\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[2];\n    if (arr.length == 0)\n        return\
    \ result;\n    long min = arr[0];\n    int index = 0;\n    for (int i = 0; i <\
    \ arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n    \
    \    {\n            min = arr[i];\n            index = i;\n        }\n    }\n\
    \    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long index = 0;\n\
    \    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            index =\
    \ i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = index;\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[2];\n    long min = long.max;\n    int index = -1;\n    for (int\
    \ i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] <\
    \ min)\n        {\n            min = arr[i];\n            index = i;\n       \
    \ }\n    }\n    if (index == -1)\n    {\n        return new long[0];\n    }\n\
    \    result[0] = min;\n    result[1] = index;\n    return result;\n}", "{\n  \
    \  long minEven = long.max;\n    long minEvenIndex = long.max;\n    foreach(i,\
    \ v; arr)\n    {\n        if(v % 2 == 0 && v < minEven)\n        {\n         \
    \   minEven = v;\n            minEvenIndex = i;\n        }\n    }\n    if(minEven\
    \ == long.max)\n    {\n        return [];\n    }\n    return [minEven, minEvenIndex];\n\
    }", "{\n    long[] result = new long[2];\n    if (arr.length == 0)\n        return\
    \ result;\n    long min = arr[0];\n    long index = 0;\n    for (int i = 0; i\
    \ < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n  \
    \      {\n            min = arr[i];\n            index = i;\n        }\n    }\n\
    \    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n\
    \    }\n    return result;\n}", "{\n    long min = long.max;\n    long index =\
    \ -1;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v < min)\n    \
    \    {\n            min = v;\n            index = i;\n        }\n    }\n    if(index\
    \ == -1)\n        return [];\n    return [min, index];\n}", "{\n    long[] result\
    \ = new long[2];\n    long min = long.max;\n    int minIndex = -1;\n    for (int\
    \ i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] <\
    \ min)\n        {\n            min = arr[i];\n            minIndex = i;\n    \
    \    }\n    }\n    if (minIndex != -1)\n    {\n        result[0] = min;\n    \
    \    result[1] = minIndex;\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[2];\n    if (arr.length == 0)\n        return result;\n    long min\
    \ = arr[0];\n    long index = 0;\n    for (int i = 0; i < arr.length; i++)\n \
    \   {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min\
    \ = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \    {\n        result[0] = min;\n        result[1] = index;\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[2];\n    if (arr.length == 0)\n\
    \        return result;\n    long min = arr[0];\n    long index = 0;\n    for\
    \ (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i]\
    \ < min)\n        {\n            min = arr[i];\n            index = i;\n     \
    \   }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n       \
    \ result[1] = index;\n    }\n    return result;\n}", "{\n    long[] result = new\
    \ long[2];\n    result[0] = -1;\n    result[1] = -1;\n    if (arr.length == 0)\n\
    \        return result;\n    foreach (i, e; arr)\n    {\n        if (e % 2 ==\
    \ 0)\n        {\n            if (result[0] == -1 || e < result[0])\n         \
    \   {\n                result[0] = e;\n                result[1] = i;\n      \
    \      }\n        }\n    }\n    return result;\n}", "{\n    long[] result = new\
    \ long[2];\n    long min = 999999999;\n    long index = 0;\n    for (int i = 0;\
    \ i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n\
    \        {\n            min = arr[i];\n            index = i;\n        }\n   \
    \ }\n    if (min != 999999999)\n    {\n        result[0] = min;\n        result[1]\
    \ = index;\n    }\n    return result;\n}", "{\n    long[] result = new long[2];\n\
    \    long min = 0;\n    long minIndex = 0;\n    bool found = false;\n    for (long\
    \ i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0)\n        {\n\
    \            if (!found)\n            {\n                min = arr[i];\n     \
    \           minIndex = i;\n                found = true;\n            }\n    \
    \        else\n            {\n                if (arr[i] < min)\n            \
    \    {\n                    min = arr[i];\n                    minIndex = i;\n\
    \                }\n            }\n        }\n    }\n    if (found)\n    {\n \
    \       result[0] = min;\n        result[1] = minIndex;\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[2];\n    if (arr.length == 0) return result;\n\
    \    long min = arr[0];\n    long index = 0;\n    for (int i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            index = i;\n        }\n    }\n    if (min %\
    \ 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n    }\n\
    \    return result;\n}", "{\n    long[] result = new long[2];\n    int min = int.max;\n\
    \    int index = -1;\n    foreach(i, v; arr)\n    {\n        if (v % 2 == 0 &&\
    \ v < min)\n        {\n            min = v;\n            index = i;\n        }\n\
    \    }\n    if (index != -1)\n    {\n        result[0] = min;\n        result[1]\
    \ = index;\n    }\n    return result;\n}", "{\n    long min = long.max;\n    long\
    \ index = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i]\
    \ % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n          \
    \  index = i;\n        }\n    }\n    if (index == -1)\n        return [];\n  \
    \  return [min, index];\n}", "{\n    long[] result = new long[2];\n    long min\
    \ = long.max;\n    int index = -1;\n    for (int i = 0; i < arr.length; i++)\n\
    \    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min\
    \ = arr[i];\n            index = i;\n        }\n    }\n    if (index != -1)\n\
    \    {\n        result[0] = min;\n        result[1] = index;\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[2];\n    if (arr.length == 0)\n\
    \        return result;\n    long min = arr[0];\n    int index = 0;\n    for (int\
    \ i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] <\
    \ min)\n        {\n            min = arr[i];\n            index = i;\n       \
    \ }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1]\
    \ = index;\n    }\n    return result;\n}", "{\n    long[] result = new long[2];\n\
    \    long min = 10001;\n    for (int i = 0; i < arr.length; i++)\n    {\n    \
    \    if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n\
    \            result[0] = min;\n            result[1] = i;\n        }\n    }\n\
    \    if (min == 10001)\n    {\n        return new long[0];\n    }\n    return\
    \ result;\n}", "{\n    if (arr.length == 0)\n        return new long[0];\n   \
    \ long min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n        {\n     \
    \       min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min\
    \ % 2 == 0)\n        return new long[] { min, minIndex };\n    return new long[0];\n\
    }", "{\n    if (arr.length == 0)\n        return new long[0];\n    long min =\
    \ arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n  \
    \  {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min\
    \ = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \        return new long[] { min, index };\n    return new long[0];\n}", "{\n\
    \    long[] res = new long[2];\n    long min = long.max;\n    long index = -1;\n\
    \    foreach(long i, long v; arr)\n    {\n        if(v % 2 == 0 && v < min)\n\
    \        {\n            min = v;\n            index = i;\n        }\n    }\n \
    \   if(index == -1)\n        return res;\n    res[0] = min;\n    res[1] = index;\n\
    \    return res;\n}", "{\n    long[] result = new long[2];\n    long min = long.max;\n\
    \    long index = -1;\n    for (int i = 0; i < arr.length; i++)\n    {\n     \
    \   if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n\
    \            index = i;\n        }\n    }\n    if (index == -1)\n    {\n     \
    \   return new long[0];\n    }\n    result[0] = min;\n    result[1] = index;\n\
    \    return result;\n}", "{\n    long[] result = new long[2];\n    long min =\
    \ 0;\n    long minIndex = 0;\n    bool found = false;\n    for (int i = 0; i <\
    \ arr.length; i++)\n    {\n        if (arr[i] % 2 == 0)\n        {\n         \
    \   if (!found)\n            {\n                min = arr[i];\n              \
    \  minIndex = i;\n                found = true;\n            }\n            else\n\
    \            {\n                if (arr[i] < min)\n                {\n       \
    \             min = arr[i];\n                    minIndex = i;\n             \
    \   }\n            }\n        }\n    }\n    if (found)\n    {\n        result[0]\
    \ = min;\n        result[1] = minIndex;\n    }\n    return result;\n}", "{\n \
    \   long[] result = new long[2];\n    if (arr.length == 0)\n        return result;\n\
    \    long min = arr[0];\n    long index = 0;\n    for (int i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            index = i;\n        }\n    }\n    if (min %\
    \ 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n    }\n\
    \    return result;\n}", "{\n    long[] result = new long[2];\n    long min =\
    \ long.max;\n    long index = 0;\n    long count = 0;\n    foreach(long i; arr)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            if(i < min)\n         \
    \   {\n                min = i;\n                index = count;\n            }\n\
    \        }\n        count++;\n    }\n    if(min == long.max)\n    {\n        return\
    \ result;\n    }\n    result[0] = min;\n    result[1] = index;\n    return result;\n\
    }", "{\n    long[] result = new long[2];\n    long smallest = 0;\n    long index\
    \ = 0;\n    bool found = false;\n    for (long i = 0; i < arr.length; i++)\n \
    \   {\n        if (arr[i] % 2 == 0)\n        {\n            if (!found)\n    \
    \        {\n                smallest = arr[i];\n                index = i;\n \
    \               found = true;\n            }\n            else\n            {\n\
    \                if (arr[i] < smallest)\n                {\n                 \
    \   smallest = arr[i];\n                    index = i;\n                }\n  \
    \          }\n        }\n    }\n    if (found)\n    {\n        result[0] = smallest;\n\
    \        result[1] = index;\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[2];\n    if (arr.length == 0) return result;\n    long min = arr[0];\n\
    \    long minIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n  \
    \      if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n\
    \            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n \
    \       result[0] = min;\n        result[1] = minIndex;\n    }\n    return result;\n\
    }", "{\n    if (arr.length == 0)\n        return new long[0];\n    \n    long\
    \ minEven = long.max;\n    long minEvenIndex = -1;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < minEven)\n        {\n \
    \           minEven = arr[i];\n            minEvenIndex = i;\n        }\n    }\n\
    \    \n    if (minEvenIndex == -1)\n        return new long[0];\n    \n    return\
    \ new long[] { minEven, minEvenIndex };\n}", "{\n    long[] result = new long[2];\n\
    \    long min = int.max;\n    long index = 0;\n    foreach(i, v; arr)\n    {\n\
    \        if(v % 2 == 0 && v < min)\n        {\n            min = v;\n        \
    \    index = i;\n        }\n    }\n    if(min == int.max)\n    {\n        return\
    \ result;\n    }\n    result[0] = min;\n    result[1] = index;\n    return result;\n\
    }", "{\n    long[] result = new long[2];\n    long min = arr[0];\n    long index\
    \ = 0;\n    bool found = false;\n    for (long i = 0; i < arr.length; i++)\n \
    \   {\n        if (arr[i] % 2 == 0)\n        {\n            if (arr[i] < min)\n\
    \            {\n                min = arr[i];\n                index = i;\n  \
    \              found = true;\n            }\n        }\n    }\n    if (found)\n\
    \    {\n        result[0] = min;\n        result[1] = index;\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[2];\n    long min = 10001;\n \
    \   long index = -1;\n    for (int i = 0; i < arr.length; i++)\n    {\n      \
    \  if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n\
    \            index = i;\n        }\n    }\n    if (index == -1)\n    {\n     \
    \   return new long[0];\n    }\n    result[0] = min;\n    result[1] = index;\n\
    \    return result;\n}", "{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            index = i;\n        }\n    }\n    if (min %\
    \ 2 == 0)\n        return new long[] { min, index };\n    return new long[0];\n\
    }", "{\n    long[] result = new long[2];\n    if (arr.length == 0)\n        return\
    \ result;\n    long min = arr[0];\n    int index = 0;\n    for (int i = 0; i <\
    \ arr.length; i++)\n    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n    \
    \    {\n            min = arr[i];\n            index = i;\n        }\n    }\n\
    \    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[2];\n    long\
    \ min = 10001;\n    long index = -1;\n    for (int i = 0; i < arr.length; i++)\n\
    \    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min\
    \ = arr[i];\n            index = i;\n        }\n    }\n    if (index == -1)\n\
    \    {\n        return new long[0];\n    }\n    result[0] = min;\n    result[1]\
    \ = index;\n    return result;\n}", "{\n    if (arr.length == 0)\n        return\
    \ [];\n    long min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i\
    \ < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n  \
    \      {\n            min = arr[i];\n            minIndex = i;\n        }\n  \
    \  }\n    if (min % 2 == 0)\n        return [min, minIndex];\n    return [];\n\
    }", "{\n    long[] result = new long[2];\n    long min = long.max;\n    long index\
    \ = -1;\n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] %\
    \ 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            index\
    \ = i;\n        }\n    }\n    if (index == -1)\n    {\n        return new long[0];\n\
    \    }\n    result[0] = min;\n    result[1] = index;\n    return result;\n}",
  "{\n    long min = 10001;\n    long index = -1;\n    for (int i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            index = i;\n        }\n    }\n    if (index\
    \ == -1)\n    {\n        return new long[0];\n    }\n    return new long[] { min,\
    \ index };\n}", "{\n    long[] result = new long[2];\n    long min = 10001;\n\
    \    long index = -1;\n    for (int i = 0; i < arr.length; i++)\n    {\n     \
    \   if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n\
    \            index = i;\n        }\n    }\n    if (index == -1)\n    {\n     \
    \   return new long[0];\n    }\n    result[0] = min;\n    result[1] = index;\n\
    \    return result;\n}", "{\n    long[] result = new long[2];\n    long min =\
    \ arr[0];\n    long index = 0;\n    for (int i = 0; i < arr.length; i++)\n   \
    \ {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min\
    \ = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \    {\n        result[0] = min;\n        result[1] = index;\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[2];\n    long min = long.max;\n\
    \    long index = -1;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 &&\
    \ e < min)\n        {\n            min = e;\n            index = i;\n        }\n\
    \    }\n    if(index == -1)\n        return [];\n    result[0] = min;\n    result[1]\
    \ = index;\n    return result;\n}", "{\n    if (arr.length == 0) return new long[0];\n\
    \    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n        {\n     \
    \       min = arr[i];\n            index = i;\n        }\n    }\n    if (min %\
    \ 2 == 0) return new long[] {min, index};\n    return new long[0];\n}", "{\n \
    \   long[] result = new long[2];\n    long min = long.max;\n    long index = 0;\n\
    \    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            index =\
    \ i;\n        }\n    }\n    if (min == long.max)\n    {\n        return result;\n\
    \    }\n    result[0] = min;\n    result[1] = index;\n    return result;\n}",
  "{\n    long min = long.max;\n    long index = -1;\n    for (int i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            index = i;\n        }\n    }\n    return index\
    \ == -1 ? new long[0] : new long[] { min, index };\n}", "{\n    if (arr.length\
    \ == 0) return new long[0];\n    long min = arr[0];\n    long index = 0;\n   \
    \ for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < min && arr[i]\
    \ % 2 == 0)\n        {\n            min = arr[i];\n            index = i;\n  \
    \      }\n    }\n    if (min % 2 == 0) return new long[] {min, index};\n    return\
    \ new long[0];\n}", "{\n    long[] result = new long[2];\n    if (arr.length ==\
    \ 0)\n        return result;\n    long min = arr[0];\n    long minIndex = 0;\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[(int)i] < min\
    \ && arr[(int)i] % 2 == 0)\n        {\n            min = arr[(int)i];\n      \
    \      minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n       \
    \ result[0] = min;\n        result[1] = minIndex;\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[2];\n    long min = 0;\n    long index =\
    \ 0;\n    bool found = false;\n    for (long i = 0; i < arr.length; i++)\n   \
    \ {\n        if (arr[i] % 2 == 0)\n        {\n            if (!found)\n      \
    \      {\n                min = arr[i];\n                index = i;\n        \
    \        found = true;\n            }\n            else\n            {\n     \
    \           if (arr[i] < min)\n                {\n                    min = arr[i];\n\
    \                    index = i;\n                }\n            }\n        }\n\
    \    }\n    if (found)\n    {\n        result[0] = min;\n        result[1] = index;\n\
    \    }\n    return result;\n}", "{\n    long[] res = new long[2];\n    long min\
    \ = long.max;\n    long minIndex = long.max;\n    foreach(i, v; arr)\n    {\n\
    \        if(v % 2 == 0 && v < min)\n        {\n            min = v;\n        \
    \    minIndex = i;\n        }\n    }\n    if(min != long.max)\n    {\n       \
    \ res[0] = min;\n        res[1] = minIndex;\n    }\n    return res;\n}", "{\n\
    \    long[] result = new long[2];\n    long min = 10001;\n    long index = 0;\n\
    \    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            index =\
    \ i;\n        }\n    }\n    if (min == 10001)\n    {\n        return result;\n\
    \    }\n    result[0] = min;\n    result[1] = index;\n    return result;\n}",
  "{\n    long[] result = new long[2];\n    long min = long.max;\n    long index =\
    \ 0;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 && e < min)\n     \
    \   {\n            min = e;\n            index = i;\n        }\n    }\n    if(min\
    \ != long.max)\n    {\n        result[0] = min;\n        result[1] = index;\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0) return result;\n    long min = arr[0];\n    long index = 0;\n    for (long\
    \ i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] <\
    \ min)\n        {\n            min = arr[i];\n            index = i;\n       \
    \ }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1]\
    \ = index;\n    }\n    return result;\n}", "{\n    long[] result = new long[2];\n\
    \    if (arr.length == 0)\n        return result;\n    long min = arr[0];\n  \
    \  long index = 0;\n    foreach (i, v; arr)\n    {\n        if (v < min && v %\
    \ 2 == 0)\n        {\n            min = v;\n            index = i;\n        }\n\
    \    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1]\
    \ = index;\n    }\n    return result;\n}", "{\n    long[] result = new long[2];\n\
    \    if (arr.length == 0) return result;\n    long min = arr[0];\n    long index\
    \ = 0;\n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] %\
    \ 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            index\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = index;\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[2];\n    long min = 999999999;\n    long index = 0;\n    foreach(long\
    \ i; arr)\n    {\n        if(i % 2 == 0 && i < min)\n        {\n            min\
    \ = i;\n            index = arr.indexOf(i);\n        }\n    }\n    if(min == 999999999)\n\
    \    {\n        return result;\n    }\n    result[0] = min;\n    result[1] = index;\n\
    \    return result;\n}", "{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    int index = 0;\n\
    \    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            index =\
    \ i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = index;\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[2];\n    if (arr.length == 0) return result;\n    long min = arr[0];\n\
    \    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            result[0]\
    \ = min;\n            result[1] = i;\n        }\n    }\n    return result;\n}",
  "{\n    long[] res = new long[2];\n    long min = long.max;\n    long index = -1;\n\
    \    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v < min)\n        {\n\
    \            min = v;\n            index = i;\n        }\n    }\n    if(index\
    \ == -1)\n        return [];\n    res[0] = min;\n    res[1] = index;\n    return\
    \ res;\n}", "{\n    long[] result = new long[2];\n    long min = long.max;\n \
    \   long index = -1;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 &&\
    \ e < min)\n        {\n            min = e;\n            index = i;\n        }\n\
    \    }\n    if(index != -1)\n    {\n        result[0] = min;\n        result[1]\
    \ = index;\n    }\n    return result;\n}", "{\n    long[] result = new long[2];\n\
    \    if (arr.length == 0)\n        return result;\n    long min = arr[0];\n  \
    \  long index = 0;\n    for (int i = 0; i < arr.length; i++)\n    {\n        if\
    \ (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n  \
    \          index = i;\n        }\n    }\n    if (min == arr[0])\n        return\
    \ result;\n    result[0] = min;\n    result[1] = index;\n    return result;\n}",
  "{\n    long[] result = new long[2];\n    if (arr.length == 0)\n        return result;\n\
    \    long min = arr[0];\n    long index = 0;\n    for (int i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            index = i;\n        }\n    }\n    if (min %\
    \ 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n    }\n\
    \    return result;\n}", "{\n    long min = arr[0];\n    long index = 0;\n   \
    \ for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 &&\
    \ arr[i] <= min)\n        {\n            min = arr[i];\n            index = i;\n\
    \        }\n    }\n    if (min % 2 == 0)\n    {\n        return new long[] {min,\
    \ index};\n    }\n    return new long[] {};\n}", "{\n    long[] result = new long[2];\n\
    \    if (arr.length == 0)\n        return result;\n    long min = arr[0];\n  \
    \  for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 &&\
    \ arr[i] < min)\n        {\n            min = arr[i];\n            result[0] =\
    \ min;\n            result[1] = i;\n        }\n    }\n    return result;\n}",
  "{\n    long[] result = new long[2];\n    long min = long.max;\n    long index =\
    \ -1;\n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2\
    \ == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            index\
    \ = i;\n        }\n    }\n    if (index == -1)\n    {\n        return new long[0];\n\
    \    }\n    result[0] = min;\n    result[1] = index;\n    return result;\n}",
  "{\n    long[] result = new long[2];\n    long min = 10001;\n    long index = 0;\n\
    \    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            index =\
    \ i;\n        }\n    }\n    if (min == 10001)\n    {\n        return result;\n\
    \    }\n    result[0] = min;\n    result[1] = index;\n    return result;\n}",
  "{\n    long[] result = new long[2];\n    long min = 10001;\n    long index = 0;\n\
    \    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            index =\
    \ i;\n        }\n    }\n    if (min == 10001)\n    {\n        return result;\n\
    \    }\n    result[0] = min;\n    result[1] = index;\n    return result;\n}",
  "{\n    long[] result = new long[2];\n    if (arr.length == 0)\n        return result;\n\
    \    long min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min\
    \ % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = minIndex;\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[2];\n    long\
    \ min = long.max;\n    long index = 0;\n    bool found = false;\n    foreach(long\
    \ i, long v; arr)\n    {\n        if(v % 2 == 0 && v < min)\n        {\n     \
    \       min = v;\n            index = i;\n            found = true;\n        }\n\
    \    }\n    if(found)\n    {\n        result[0] = min;\n        result[1] = index;\n\
    \    }\n    return result;\n}", "{\n    long min = long.max;\n    long index =\
    \ -1;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v < min)\n    \
    \    {\n            min = v;\n            index = i;\n        }\n    }\n    if(index\
    \ == -1)\n        return [];\n    return [min, index];\n}", "{\n    long[] result\
    \ = new long[2];\n    if (arr.length == 0)\n        return result;\n    long min\
    \ = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n\
    \    {\n        if (arr[(int)i] % 2 == 0 && arr[(int)i] < min)\n        {\n  \
    \          min = arr[(int)i];\n            minIndex = i;\n        }\n    }\n \
    \   if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = minIndex;\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long minIndex = 0;\n\
    \    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = minIndex;\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[2];\n    if (arr.length == 0) return result;\n    long min\
    \ = arr[0];\n    long index = 0;\n    for (int i = 0; i < arr.length; i++)\n \
    \   {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min\
    \ = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \    {\n        result[0] = min;\n        result[1] = index;\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[2];\n    if (arr.length == 0)\n\
    \        return result;\n    long min = arr[0];\n    long minIndex = 0;\n    for\
    \ (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i]\
    \ < min)\n        {\n            min = arr[i];\n            minIndex = i;\n  \
    \      }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n    \
    \    result[1] = minIndex;\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[2];\n    long min = long.max;\n    long index = 0;\n    foreach(i,\
    \ e; arr)\n    {\n        if(e % 2 == 0 && e < min)\n        {\n            min\
    \ = e;\n            index = i;\n        }\n    }\n    if(min == long.max)\n  \
    \  {\n        return result;\n    }\n    result[0] = min;\n    result[1] = index;\n\
    \    return result;\n}", "{\n    long[] result = new long[2];\n    long min =\
    \ long.max;\n    long minIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n\
    \    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min\
    \ = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min == long.max)\n\
    \    {\n        return result;\n    }\n    result[0] = min;\n    result[1] = minIndex;\n\
    \    return result;\n}", "{\n    long[] result = new long[2];\n    long min =\
    \ long.max;\n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i]\
    \ % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n          \
    \  result[0] = min;\n            result[1] = i;\n        }\n    }\n    if (min\
    \ == long.max)\n    {\n        return new long[0];\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[2];\n    if (arr.length == 0)\n        return\
    \ result;\n    long min = arr[0];\n    long minIndex = 0;\n    for (int i = 0;\
    \ i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n\
    \        {\n            min = arr[i];\n            minIndex = i;\n        }\n\
    \    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1]\
    \ = minIndex;\n    }\n    return result;\n}", "{\n    long[] result = new long[2];\n\
    \    if (arr.length == 0) return result;\n    long min = arr[0];\n    long minIndex\
    \ = 0;\n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] %\
    \ 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = minIndex;\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[2];\n    long min = long.max;\n    long index = -1;\n    foreach(i,\
    \ v; arr)\n    {\n        if(v % 2 == 0 && v < min)\n        {\n            min\
    \ = v;\n            index = i;\n        }\n    }\n    if(index == -1)\n      \
    \  return [];\n    result[0] = min;\n    result[1] = index;\n    return result;\n\
    }", "{\n    long min = long.max;\n    long index = -1;\n    for (int i = 0; i\
    \ < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n  \
    \      {\n            min = arr[i];\n            index = i;\n        }\n    }\n\
    \    if (index == -1)\n        return new long[0];\n    return new long[] { min,\
    \ index };\n}", "{\n    long[] result = new long[2];\n    if (arr.length == 0)\n\
    \        return result;\n    long min = arr[0];\n    long minIndex = 0;\n    for\
    \ (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i]\
    \ < min)\n        {\n            min = arr[i];\n            minIndex = i;\n  \
    \      }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n    \
    \    result[1] = minIndex;\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[2];\n    long min = 10001;\n    long index = -1;\n    for (int i\
    \ = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n\
    \        {\n            min = arr[i];\n            index = i;\n        }\n   \
    \ }\n    if (index != -1)\n    {\n        result[0] = min;\n        result[1]\
    \ = index;\n    }\n    return result;\n}", "{\n    long[] result = new long[2];\n\
    \    long smallest = 0;\n    long index = 0;\n    bool found = false;\n    foreach(long\
    \ i, long v; arr)\n    {\n        if(v % 2 == 0)\n        {\n            if(!found)\n\
    \            {\n                found = true;\n                smallest = v;\n\
    \                index = i;\n            }\n            else\n            {\n\
    \                if(v < smallest)\n                {\n                    smallest\
    \ = v;\n                    index = i;\n                }\n            }\n   \
    \     }\n    }\n    if(found)\n    {\n        result[0] = smallest;\n        result[1]\
    \ = index;\n    }\n    return result;\n}", "{\n    long[] result = new long[2];\n\
    \    long min = long.max;\n    long index = 0;\n    foreach(long i; 0..arr.length)\n\
    \    {\n        if(arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min\
    \ = arr[i];\n            index = i;\n        }\n    }\n    if(min == long.max)\n\
    \    {\n        return result;\n    }\n    result[0] = min;\n    result[1] = index;\n\
    \    return result;\n}", "{\n    long[] result = new long[2];\n    long min =\
    \ int.max;\n    long minIndex = int.max;\n    for (int i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min\
    \ == int.max)\n    {\n        return new long[0];\n    }\n    result[0] = min;\n\
    \    result[1] = minIndex;\n    return result;\n}", "{\n    long[] result = new\
    \ long[2];\n    if (arr.length == 0) return result;\n    long min = arr[0];\n\
    \    long index = 0;\n    for (int i = 0; i < arr.length; i++)\n    {\n      \
    \  if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n\
    \            index = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n    \
    \    result[0] = min;\n        result[1] = index;\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[2];\n    if (arr.length == 0)\n        return\
    \ result;\n    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i\
    \ < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n  \
    \      {\n            min = arr[i];\n            index = i;\n        }\n    }\n\
    \    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[2];\n    long\
    \ min = long.max;\n    long index = -1;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            index = i;\n        }\n    }\n    if (index\
    \ == -1)\n    {\n        return new long[0];\n    }\n    result[0] = min;\n  \
    \  result[1] = index;\n    return result;\n}", "{\n    long[] result = new long[2];\n\
    \    if (arr.length == 0) return result;\n    long min = arr[0];\n    long minIndex\
    \ = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] %\
    \ 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = minIndex;\n    }\n    return result;\n}", "{\n    if (arr.length\
    \ == 0)\n        return [];\n    long min = arr[0];\n    long minIndex = 0;\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, minIndex];\n\
    \    return [];\n}", "{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0) return result;\n    long min = arr[0];\n    int minIndex = 0;\n    for\
    \ (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i]\
    \ < min)\n        {\n            min = arr[i];\n            minIndex = i;\n  \
    \      }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n    \
    \    result[1] = minIndex;\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[2];\n    if (arr.length == 0) return result;\n    long min = arr[0];\n\
    \    long minIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n  \
    \      if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n\
    \            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n \
    \       result[0] = min;\n        result[1] = minIndex;\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[2];\n    long min = 0;\n    long index =\
    \ 0;\n    bool found = false;\n    for (int i = 0; i < arr.length; i++)\n    {\n\
    \        if (arr[i] % 2 == 0)\n        {\n            if (!found)\n          \
    \  {\n                min = arr[i];\n                index = i;\n            \
    \    found = true;\n            }\n            else\n            {\n         \
    \       if (arr[i] < min)\n                {\n                    min = arr[i];\n\
    \                    index = i;\n                }\n            }\n        }\n\
    \    }\n    if (found)\n    {\n        result[0] = min;\n        result[1] = index;\n\
    \    }\n    return result;\n}", "{\n    long min = 10001L;\n    long index = -1L;\n\
    \    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v < min)\n        {\n\
    \            min = v;\n            index = i;\n        }\n    }\n    if(index\
    \ == -1L)\n        return [];\n    return [min, index];\n}", "{\n    long[] result\
    \ = new long[2];\n    long min = 10001;\n    long index = -1;\n    for (int i\
    \ = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n\
    \        {\n            min = arr[i];\n            index = i;\n        }\n   \
    \ }\n    if (index == -1)\n    {\n        return new long[0];\n    }\n    result[0]\
    \ = min;\n    result[1] = index;\n    return result;\n}", "{\n    long[] result\
    \ = new long[2];\n    long min = long.max;\n    long index = 0;\n    foreach(i,\
    \ e; arr)\n    {\n        if(e % 2 == 0 && e < min)\n        {\n            min\
    \ = e;\n            index = i;\n        }\n    }\n    if(min == long.max)\n  \
    \  {\n        return result;\n    }\n    result[0] = min;\n    result[1] = index;\n\
    \    return result;\n}", "{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long index = 0;\n\
    \    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            index =\
    \ i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = index;\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[2];\n    if (arr.length == 0) return result;\n    long min = arr[0];\n\
    \    long index = 0;\n    for (int i = 0; i < arr.length; i++)\n    {\n      \
    \  if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n\
    \            index = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n    \
    \    result[0] = min;\n        result[1] = index;\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[2];\n    if (arr.length == 0) return result;\n\
    \    long min = arr[0];\n    for (int i = 0; i < arr.length; i++)\n    {\n   \
    \     if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n\
    \            result[0] = min;\n            result[1] = i;\n        }\n    }\n\
    \    return result;\n}", "{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    int index = 0;\n\
    \    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            index =\
    \ i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = index;\n    }\n    return result;\n}", "{\n    long min =\
    \ long.max;\n    long index = -1;\n    for (long i = 0; i < arr.length; i++)\n\
    \    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min\
    \ = arr[i];\n            index = i;\n        }\n    }\n    if (index == -1)\n\
    \        return new long[0];\n    return new long[] { min, index };\n}", "{\n\
    \    if (arr.length == 0) return new long[0];\n    long min = arr[0];\n    long\
    \ index = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i]\
    \ % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n          \
    \  index = i;\n        }\n    }\n    if (min % 2 != 0) return new long[0];\n \
    \   return new long[] { min, index };\n}", "{\n    long[] result = new long[2];\n\
    \    if (arr.length == 0) return result;\n    long min = arr[0];\n    long index\
    \ = 0;\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] < min &&\
    \ arr[i] % 2 == 0) {\n            min = arr[i];\n            index = i;\n    \
    \    }\n    }\n    if (min % 2 == 0) {\n        result[0] = min;\n        result[1]\
    \ = index;\n    }\n    return result;\n}", "{\n    long min = long.max;\n    long\
    \ index = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i]\
    \ % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n          \
    \  index = i;\n        }\n    }\n    if (index == -1)\n        return new long[0];\n\
    \    return new long[] { min, index };\n}", "{\n    long[] result = new long[2];\n\
    \    long min = 0;\n    long minIndex = 0;\n    bool found = false;\n    for (int\
    \ i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0)\n        {\n\
    \            if (!found)\n            {\n                min = arr[i];\n     \
    \           minIndex = i;\n                found = true;\n            }\n    \
    \        else\n            {\n                if (arr[i] < min)\n            \
    \    {\n                    min = arr[i];\n                    minIndex = i;\n\
    \                }\n            }\n        }\n    }\n    if (found)\n    {\n \
    \       result[0] = min;\n        result[1] = minIndex;\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[2];\n    long min = 0;\n    long minIndex\
    \ = 0;\n    bool hasEven = false;\n    for (int i = 0; i < arr.length; i++)\n\
    \    {\n        if (arr[i] % 2 == 0)\n        {\n            if (!hasEven)\n \
    \           {\n                min = arr[i];\n                minIndex = i;\n\
    \                hasEven = true;\n            }\n            else\n          \
    \  {\n                if (arr[i] < min)\n                {\n                 \
    \   min = arr[i];\n                    minIndex = i;\n                }\n    \
    \        }\n        }\n    }\n    if (hasEven)\n    {\n        result[0] = min;\n\
    \        result[1] = minIndex;\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[2];\n    long min = 10001;\n    long index = -1;\n    foreach(i,\
    \ v; arr)\n    {\n        if(v % 2 == 0 && v < min)\n        {\n            min\
    \ = v;\n            index = i;\n        }\n    }\n    if(index == -1)\n      \
    \  return result;\n    result[0] = min;\n    result[1] = index;\n    return result;\n\
    }", "{\n    long[] result = new long[2];\n    if (arr.length == 0)\n        return\
    \ result;\n    long min = arr[0];\n    long index = 0;\n    for (int i = 0; i\
    \ < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n  \
    \      {\n            min = arr[i];\n            index = i;\n        }\n    }\n\
    \    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n\
    \    }\n    return result;\n}", "{\n    long min = 10001;\n    long index = -1;\n\
    \    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            index =\
    \ i;\n        }\n    }\n    if (index == -1)\n    {\n        return new long[0];\n\
    \    }\n    return new long[] { min, index };\n}", "{\n    if (arr.length == 0)\n\
    \        return [];\n    long min = arr[0];\n    long index = 0;\n    foreach\
    \ (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n        \
    \    min = v;\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \        return [min, index];\n    return [];\n}", "{\n    long[] result = new\
    \ long[2];\n    int minIndex = -1;\n    long minValue = 0;\n    for (int i = 0;\
    \ i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0)\n        {\n     \
    \       if (minIndex == -1)\n            {\n                minIndex = i;\n  \
    \              minValue = arr[i];\n            }\n            else if (arr[i]\
    \ < minValue)\n            {\n                minIndex = i;\n                minValue\
    \ = arr[i];\n            }\n        }\n    }\n    if (minIndex != -1)\n    {\n\
    \        result[0] = minValue;\n        result[1] = minIndex;\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[2];\n    if (arr.length == 0)\n\
    \        return result;\n    long min = arr[0];\n    int minIndex = 0;\n    for\
    \ (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i]\
    \ < min)\n        {\n            min = arr[i];\n            minIndex = i;\n  \
    \      }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n    \
    \    result[1] = minIndex;\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[2];\n    if (arr.length == 0)\n        return result;\n    long min\
    \ = arr[0];\n    int index = 0;\n    foreach (i, e; arr)\n    {\n        if (e\
    \ % 2 == 0 && e < min)\n        {\n            min = e;\n            index = i;\n\
    \        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n  \
    \      result[1] = index;\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[2];\n    long min = long.max;\n    long index = -1;\n    foreach(i,\
    \ v; arr)\n    {\n        if(v % 2 == 0 && v < min)\n        {\n            min\
    \ = v;\n            index = i;\n        }\n    }\n    if(index == -1)\n      \
    \  return [];\n    result[0] = min;\n    result[1] = index;\n    return result;\n\
    }", "{\n    long[] result = new long[2];\n    long minEven = long.max;\n    long\
    \ minEvenIndex = long.max;\n    for (long i = 0; i < arr.length; i++)\n    {\n\
    \        if (arr[i] % 2 == 0 && arr[i] < minEven)\n        {\n            minEven\
    \ = arr[i];\n            minEvenIndex = i;\n        }\n    }\n    if (minEven\
    \ == long.max)\n    {\n        return result;\n    }\n    result[0] = minEven;\n\
    \    result[1] = minEvenIndex;\n    return result;\n}", "{\n    long[] result\
    \ = new long[2];\n    long min = long.max;\n    int index = -1;\n    for (int\
    \ i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] <\
    \ min)\n        {\n            min = arr[i];\n            index = i;\n       \
    \ }\n    }\n    if (index == -1)\n    {\n        return result;\n    }\n    result[0]\
    \ = min;\n    result[1] = index;\n    return result;\n}", "{\n    long[] result\
    \ = new long[2];\n    long min = 0;\n    long index = 0;\n    bool found = false;\n\
    \    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0)\n\
    \        {\n            if (!found)\n            {\n                min = arr[i];\n\
    \                index = i;\n                found = true;\n            }\n  \
    \          else\n            {\n                if (arr[i] < min)\n          \
    \      {\n                    min = arr[i];\n                    index = i;\n\
    \                }\n            }\n        }\n    }\n    if (found)\n    {\n \
    \       result[0] = min;\n        result[1] = index;\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[2];\n    if (arr.length == 0)\n        return\
    \ result;\n    long min = arr[0];\n    long index = 0;\n    for (int i = 0; i\
    \ < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n  \
    \      {\n            min = arr[i];\n            index = i;\n        }\n    }\n\
    \    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[2];\n    long\
    \ min = long.max;\n    long index = 0;\n    foreach(i, v; arr)\n    {\n      \
    \  if(v % 2 == 0 && v < min)\n        {\n            min = v;\n            index\
    \ = i;\n        }\n    }\n    if(min == long.max)\n    {\n        return result;\n\
    \    }\n    result[0] = min;\n    result[1] = index;\n    return result;\n}",
  "{\n    long[] result = new long[2];\n    long min = long.max;\n    long index =\
    \ -1;\n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2\
    \ == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            index\
    \ = i;\n        }\n    }\n    if (index != -1)\n    {\n        result[0] = min;\n\
    \        result[1] = index;\n    }\n    return result;\n}", "{\n    long min =\
    \ 10001L;\n    long index = -1L;\n    for (int i = 0; i < arr.length; i++)\n \
    \   {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min\
    \ = arr[i];\n            index = i;\n        }\n    }\n    if (index == -1L)\n\
    \    {\n        return new long[0];\n    }\n    return new long[] { min, index\
    \ };\n}", "{\n    long min = 999999999;\n    long index = 0;\n    long[] result\
    \ = new long[2];\n    for (int i = 0; i < arr.length; i++)\n    {\n        if\
    \ (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n  \
    \          index = i;\n        }\n    }\n    if (min == 999999999)\n    {\n  \
    \      return result;\n    }\n    result[0] = min;\n    result[1] = index;\n \
    \   return result;\n}", "{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            index = i;\n        }\n    }\n    if (min ==\
    \ arr[0])\n        return new long[0];\n    return new long[] { min, index };\n\
    }", "{\n    long[] result = new long[2];\n    if (arr.length == 0)\n        return\
    \ result;\n    long min = arr[0];\n    int index = 0;\n    for (int i = 0; i <\
    \ arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n    \
    \    {\n            min = arr[i];\n            index = i;\n        }\n    }\n\
    \    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    int minIndex = 0;\n\
    \    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = minIndex;\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[2];\n    long min = long.max;\n    long index = -1;\n    for\
    \ (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i]\
    \ < min)\n        {\n            min = arr[i];\n            index = i;\n     \
    \   }\n    }\n    if (index == -1)\n    {\n        return new long[0];\n    }\n\
    \    result[0] = min;\n    result[1] = index;\n    return result;\n}", "{\n  \
    \  long[] result = new long[2];\n    long min = long.max;\n    long index = -1;\n\
    \    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            index =\
    \ i;\n        }\n    }\n    if (index == -1)\n    {\n        return new long[0];\n\
    \    }\n    result[0] = min;\n    result[1] = index;\n    return result;\n}",
  "{\n    long[] result = new long[2];\n    long min = 10001;\n    long index = -1;\n\
    \    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            index =\
    \ i;\n        }\n    }\n    if (index == -1)\n    {\n        return new long[0];\n\
    \    }\n    result[0] = min;\n    result[1] = index;\n    return result;\n}",
  "{\n    long min = long.max;\n    long minIndex = -1;\n    foreach(i, v; arr)\n\
    \    {\n        if(v % 2 == 0 && v < min)\n        {\n            min = v;\n \
    \           minIndex = i;\n        }\n    }\n    if(minIndex == -1)\n        return\
    \ [];\n    return [min, minIndex];\n}", "{\n    long[] result = new long[2];\n\
    \    if (arr.length == 0)\n        return result;\n    long min = arr[0];\n  \
    \  int index = 0;\n    for (int i = 0; i < arr.length; i++)\n    {\n        if\
    \ (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n  \
    \          index = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n      \
    \  result[0] = min;\n        result[1] = index;\n    }\n    return result;\n}",
  "{\n    long min = long.max;\n    long index = -1;\n    foreach(i, v; arr)\n   \
    \ {\n        if(v % 2 == 0 && v < min)\n        {\n            min = v;\n    \
    \        index = i;\n        }\n    }\n    if(index == -1)\n        return [];\n\
    \    return [min, index];\n}", "{\n    long min = long.max;\n    long index =\
    \ -1;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v < min)\n    \
    \    {\n            min = v;\n            index = i;\n        }\n    }\n    if(index\
    \ == -1)\n        return [];\n    return [min, index];\n}", "{\n    long[] result\
    \ = new long[2];\n    long min = 0;\n    long index = 0;\n    bool found = false;\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0)\n\
    \        {\n            if (found == false)\n            {\n                min\
    \ = arr[i];\n                index = i;\n                found = true;\n     \
    \       }\n            else\n            {\n                if (arr[i] < min)\n\
    \                {\n                    min = arr[i];\n                    index\
    \ = i;\n                }\n            }\n        }\n    }\n    if (found == true)\n\
    \    {\n        result[0] = min;\n        result[1] = index;\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[2];\n    long min = long.max;\n\
    \    long index = 0;\n    long minIndex = 0;\n    foreach(i; arr)\n    {\n   \
    \     if(i % 2 == 0 && i < min)\n        {\n            min = i;\n           \
    \ minIndex = index;\n        }\n        index++;\n    }\n    if(min == long.max)\n\
    \    {\n        return result;\n    }\n    else\n    {\n        result[0] = min;\n\
    \        result[1] = minIndex;\n        return result;\n    }\n}", "{\n    if\
    \ (arr.length == 0)\n        return new long[0];\n    long min = arr[0];\n   \
    \ long minIndex = 0;\n    for (int i = 0; i < arr.length; i++)\n    {\n      \
    \  if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n\
    \            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ new long[] { min, minIndex };\n    return new long[0];\n}", "{\n    long min\
    \ = arr[0];\n    long minIndex = 0;\n    bool found = false;\n    for (long i\
    \ = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0)\n        {\n\
    \            if (!found)\n            {\n                min = arr[i];\n     \
    \           minIndex = i;\n                found = true;\n            }\n    \
    \        else\n            {\n                if (arr[i] < min)\n            \
    \    {\n                    min = arr[i];\n                    minIndex = i;\n\
    \                }\n            }\n        }\n    }\n    if (found)\n    {\n \
    \       return [min, minIndex];\n    }\n    else\n    {\n        return [];\n\
    \    }\n}", "{\n    long min = arr[0];\n    long index = 0;\n    bool found =\
    \ false;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i]\
    \ % 2 == 0)\n        {\n            if (!found)\n            {\n             \
    \   min = arr[i];\n                index = i;\n                found = true;\n\
    \            }\n            else\n            {\n                if (arr[i] <\
    \ min)\n                {\n                    min = arr[i];\n               \
    \     index = i;\n                }\n            }\n        }\n    }\n    if (found)\n\
    \    {\n        return [min, index];\n    }\n    else\n    {\n        return [];\n\
    \    }\n}", "{\n    long[] result = new long[2];\n    if (arr.length == 0) return\
    \ result;\n    long min = arr[0];\n    int index = 0;\n    for (int i = 0; i <\
    \ arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n    \
    \    {\n            min = arr[i];\n            index = i;\n        }\n    }\n\
    \    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[2];\n    long\
    \ min = 10001;\n    long index = -1;\n    for (int i = 0; i < arr.length; i++)\n\
    \    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min\
    \ = arr[i];\n            index = i;\n        }\n    }\n    if (index == -1)\n\
    \    {\n        return new long[0];\n    }\n    result[0] = min;\n    result[1]\
    \ = index;\n    return result;\n}", "{\n    long[] result = new long[2];\n   \
    \ long min = long.max;\n    long index = -1;\n    for (int i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            index = i;\n        }\n    }\n    if (index\
    \ == -1)\n    {\n        return new long[0];\n    }\n    result[0] = min;\n  \
    \  result[1] = index;\n    return result;\n}", "{\n    long min = long.max;\n\
    \    long index = -1;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 &&\
    \ v < min)\n        {\n            min = v;\n            index = i;\n        }\n\
    \    }\n    if(index == -1)\n        return [];\n    return [min, index];\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
