name: HumanEval_14_all_prefixes
language: d
results:
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n   \
    \ assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptx1ujwi_.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptx1ujwi_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2zb5m58a.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2zb5m58a.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] prefixes;\n    foreach(i; 0 .. string.length)\n    {\n   \
    \     prefixes ~= string[0 .. i];\n    }\n    return prefixes;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvcethfx1.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvcethfx1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return array\
    \ of all suffixes from shortest to longest of the input string\n    >>> all_suffixes(\"\
    abc\")\n    [\"c\", \"bc\", \"abc\"]\n    \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    result ~= string[i .. $];\n    }\n    return result;\n}\n/*\n Return array\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length) \n    {\n        foreach(j; i .. string.length) \n        {\n\
    \            result ~= string[i .. j];\n        }\n    }\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\",\
    \ \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length) \n    {\n        foreach(j; i .. string.length)\
    \ \n        {\n            result ~= string[i .. j];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    , \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        foreach(j;\
    \ i .. string.length) \n        {\n\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph0d7pmmf.d(83): Error: found `unittest` instead of statement\\\
    n/tmp/tmph0d7pmmf.d(91): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmph0d7pmmf.d(91): Error: found `End of File` when\
    \ expecting `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmph0d7pmmf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return array\
    \ of all suffixes from shortest to longest of the input string\n    >>> all_suffixes(\"\
    abc\")\n    [\"c\", \"bc\", \"abc\"]\n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    result ~= string[i .. $];\n    }\n    return result;\n}\n/*\n Return array\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        foreach(j; i .. string.length) \n        {\n            result ~=\
    \ string[i .. j];\n        }\n    }\n    return result;\n}\n/*\n Return array\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        foreach(j; i .. string.length) \n        {\n            result ~=\
    \ string[i .. j];\n        }\n    }\n    return result;\n}\n/*\n Return array\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        foreach(j; i .. string.length) \n        {\n            result ~=\
    \ string[i ..\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptbhypm22.d(79): Error: expression expected, not `unittest`\\\
    n/tmp/tmptbhypm22.d(80): Error: found `{` when expecting `,`\\n/tmp/tmptbhypm22.d(81):\
    \ Error: expression expected, not `alias`\\n/tmp/tmptbhypm22.d(81): Error: found\
    \ `candidate` when expecting `,`\\n/tmp/tmptbhypm22.d(81): Error: expression expected,\
    \ not `=`\\n/tmp/tmptbhypm22.d(81): Error: found `all_prefixes` when expecting\
    \ `,`\\n/tmp/tmptbhypm22.d(81): Error: expression expected, not `;`\\n/tmp/tmptbhypm22.d(83):\
    \ Error: found `assert` when expecting `,`\\n/tmp/tmptbhypm22.d(83): Error: found\
    \ `;` when expecting `,`\\n/tmp/tmptbhypm22.d(84): Error: found `;` when expecting\
    \ `,`\\n/tmp/tmptbhypm22.d(85): Error: found `;` when expecting `,`\\n/tmp/tmptbhypm22.d(86):\
    \ Error: expression expected, not `}`\\n/tmp/tmptbhypm22.d(87): Error: found `void`\
    \ when expecting `,`\\n/tmp/tmptbhypm22.d(87): Error: found `{` when expecting\
    \ `,`\\n/tmp/tmptbhypm22.d(87): Error: expression expected, not `}`\\n/tmp/tmptbhypm22.d(87):\
    \ Error: found `End of File` when expecting `,`\\n/tmp/tmptbhypm22.d(87): Error:\
    \ found `End of File` when expecting `]`\\n/tmp/tmptbhypm22.d(87): Error: found\
    \ `End of File` when expecting `;` following statement\\n/tmp/tmptbhypm22.d(87):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmptbhypm22.d(87): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptbhypm22.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvcu3tjgu.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvcu3tjgu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaln3_ohw.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaln3_ohw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmuk0pizh.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmuk0pizh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n   \
    \ assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv6j76u1h.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv6j76u1h.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd4ty6ozj.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd4ty6ozj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt0ct51n9.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt0ct51n9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n   \
    \ assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg6r3ancs.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg6r3ancs.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n   \
    \ assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa7zfxtx0.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa7zfxtx0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfufyo27b.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfufyo27b.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp01zc64o4.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp01zc64o4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n   \
    \ assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6ebbl86k.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6ebbl86k.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return array\
    \ of all suffixes from shortest to longest of the input string\n    >>> all_suffixes(\"\
    abc\")\n    [\"c\", \"bc\", \"abc\"]\n    \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[i .. $];\n    }\n    return result;\n}\n/*\n Return array\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n    {\n        foreach(j; i .. string.length)\n        {\n \
    \           result ~= string[i .. j];\n        }\n    }\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\",\
    \ \"c\"]\n    \n*/\nstring[] all_substrings2(string string) \n{\n    string[]\
    \ result;\n    foreach(i; 0 .. string.length)\n    {\n        foreach(j; i ..\
    \ string.length)\n        {\n            result ~= string[i .. j];\n        }\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings3(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdcrdza__.d(83): Error: expression expected, not `unittest`\\\
    n/tmp/tmpdcrdza__.d(84): Error: found `{` when expecting `,`\\n/tmp/tmpdcrdza__.d(85):\
    \ Error: expression expected, not `alias`\\n/tmp/tmpdcrdza__.d(85): Error: found\
    \ `candidate` when expecting `,`\\n/tmp/tmpdcrdza__.d(85): Error: expression expected,\
    \ not `=`\\n/tmp/tmpdcrdza__.d(85): Error: found `all_prefixes` when expecting\
    \ `,`\\n/tmp/tmpdcrdza__.d(85): Error: expression expected, not `;`\\n/tmp/tmpdcrdza__.d(87):\
    \ Error: found `assert` when expecting `,`\\n/tmp/tmpdcrdza__.d(87): Error: found\
    \ `;` when expecting `,`\\n/tmp/tmpdcrdza__.d(88): Error: found `;` when expecting\
    \ `,`\\n/tmp/tmpdcrdza__.d(89): Error: found `;` when expecting `,`\\n/tmp/tmpdcrdza__.d(90):\
    \ Error: expression expected, not `}`\\n/tmp/tmpdcrdza__.d(91): Error: found `void`\
    \ when expecting `,`\\n/tmp/tmpdcrdza__.d(91): Error: found `{` when expecting\
    \ `,`\\n/tmp/tmpdcrdza__.d(91): Error: expression expected, not `}`\\n/tmp/tmpdcrdza__.d(91):\
    \ Error: found `End of File` when expecting `,`\\n/tmp/tmpdcrdza__.d(91): Error:\
    \ found `End of File` when expecting `]`\\n/tmp/tmpdcrdza__.d(91): Error: found\
    \ `End of File` when expecting `;` following statement\\n/tmp/tmpdcrdza__.d(91):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmpdcrdza__.d(91): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdcrdza__.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9v0atsi0.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9v0atsi0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmposb8aw2i.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmposb8aw2i.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpofzibmdr.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpofzibmdr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0pz3_ize.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0pz3_ize.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr8h0xy0o.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr8h0xy0o.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n   \
    \ assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7hx7sypx.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7hx7sypx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe1wdse56.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe1wdse56.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n   \
    \ assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfqfyx5ey.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfqfyx5ey.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n   \
    \ assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuce8acoq.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuce8acoq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmix0c7mg.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmix0c7mg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2p2ziphh.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2p2ziphh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n   \
    \ assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9_14xarq.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9_14xarq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpar3eu4gi.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpar3eu4gi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n   \
    \ assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp28hp09km.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp28hp09km.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n   \
    \ assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw05ya447.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw05ya447.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvhxko08v.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvhxko08v.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1gipw5k_.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1gipw5k_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo3hy2qem.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo3hy2qem.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq3ip73rv.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq3ip73rv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7z23ub7h.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7z23ub7h.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0soizvlq.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0soizvlq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_73a0e3x.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_73a0e3x.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj_05ilxd.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj_05ilxd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4q3l0ucy.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4q3l0ucy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn1mxwxzp.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn1mxwxzp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6pisb42m.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6pisb42m.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd_np3o2j.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd_np3o2j.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] prefixes;\n    foreach(i; 0 .. string.length) \n    {\n  \
    \      prefixes ~= string[0 .. i];\n    }\n    return prefixes;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp26i9tf3r.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp26i9tf3r.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return array\
    \ of all suffixes from shortest to longest of the input string\n    >>> all_suffixes(\"\
    abc\")\n    [\"c\", \"bc\", \"abc\"]\n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    result ~= string[i .. $];\n    }\n    return result;\n}\n/*\n Return array\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        foreach(j; i .. string.length) \n        {\n            result ~=\
    \ string[i .. j];\n        }\n    }\n    return result;\n}\n/*\n Return array\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        foreach(j; i .. string.length) \n        {\n            result ~=\
    \ string[i .. j];\n        }\n    }\n    return result;\n}\n/*\n Return array\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        foreach(j; i .. string.length) \n        {\n            result ~=\
    \ string[i ..\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmlzktofa.d(79): Error: expression expected, not `unittest`\\\
    n/tmp/tmpmlzktofa.d(80): Error: found `{` when expecting `,`\\n/tmp/tmpmlzktofa.d(81):\
    \ Error: expression expected, not `alias`\\n/tmp/tmpmlzktofa.d(81): Error: found\
    \ `candidate` when expecting `,`\\n/tmp/tmpmlzktofa.d(81): Error: expression expected,\
    \ not `=`\\n/tmp/tmpmlzktofa.d(81): Error: found `all_prefixes` when expecting\
    \ `,`\\n/tmp/tmpmlzktofa.d(81): Error: expression expected, not `;`\\n/tmp/tmpmlzktofa.d(83):\
    \ Error: found `assert` when expecting `,`\\n/tmp/tmpmlzktofa.d(83): Error: found\
    \ `;` when expecting `,`\\n/tmp/tmpmlzktofa.d(84): Error: found `;` when expecting\
    \ `,`\\n/tmp/tmpmlzktofa.d(85): Error: found `;` when expecting `,`\\n/tmp/tmpmlzktofa.d(86):\
    \ Error: expression expected, not `}`\\n/tmp/tmpmlzktofa.d(87): Error: found `void`\
    \ when expecting `,`\\n/tmp/tmpmlzktofa.d(87): Error: found `{` when expecting\
    \ `,`\\n/tmp/tmpmlzktofa.d(87): Error: expression expected, not `}`\\n/tmp/tmpmlzktofa.d(87):\
    \ Error: found `End of File` when expecting `,`\\n/tmp/tmpmlzktofa.d(87): Error:\
    \ found `End of File` when expecting `]`\\n/tmp/tmpmlzktofa.d(87): Error: found\
    \ `End of File` when expecting `;` following statement\\n/tmp/tmpmlzktofa.d(87):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmpmlzktofa.d(87): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmlzktofa.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmqkmhimp.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmqkmhimp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr4yned9n.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr4yned9n.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n   \
    \ assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmeaijyhc.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmeaijyhc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7niu_xa3.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7niu_xa3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl_qsp15k.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl_qsp15k.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpenuf0g_9.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpenuf0g_9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr8leyim9.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr8leyim9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n   \
    \ assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsod8izrq.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsod8izrq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return array\
    \ of all suffixes from shortest to longest of the input string\n    >>> all_suffixes(\"\
    abc\")\n    [\"c\", \"bc\", \"abc\"]\n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    result ~= string[i .. $];\n    }\n    return result;\n}\n/*\n Return array\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        foreach(j; i .. string.length) \n        {\n            result ~=\
    \ string[i .. j];\n        }\n    }\n    return result;\n}\n/*\n Return array\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n*/\nstring[] all_substrings2(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        foreach(j; i .. string.length) \n        {\n            result ~=\
    \ string[i .. j];\n        }\n    }\n    return result;\n}\n/*\n Return array\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n*/\nstring[] all_substrings3(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        foreach(j; i .. string.length) \n        {\n            result ~=\
    \ string[\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6inb2mlc.d(79): Error: expression expected, not `unittest`\\\
    n/tmp/tmp6inb2mlc.d(80): Error: found `{` when expecting `,`\\n/tmp/tmp6inb2mlc.d(81):\
    \ Error: expression expected, not `alias`\\n/tmp/tmp6inb2mlc.d(81): Error: found\
    \ `candidate` when expecting `,`\\n/tmp/tmp6inb2mlc.d(81): Error: expression expected,\
    \ not `=`\\n/tmp/tmp6inb2mlc.d(81): Error: found `all_prefixes` when expecting\
    \ `,`\\n/tmp/tmp6inb2mlc.d(81): Error: expression expected, not `;`\\n/tmp/tmp6inb2mlc.d(83):\
    \ Error: found `assert` when expecting `,`\\n/tmp/tmp6inb2mlc.d(83): Error: found\
    \ `;` when expecting `,`\\n/tmp/tmp6inb2mlc.d(84): Error: found `;` when expecting\
    \ `,`\\n/tmp/tmp6inb2mlc.d(85): Error: found `;` when expecting `,`\\n/tmp/tmp6inb2mlc.d(86):\
    \ Error: expression expected, not `}`\\n/tmp/tmp6inb2mlc.d(87): Error: found `void`\
    \ when expecting `,`\\n/tmp/tmp6inb2mlc.d(87): Error: found `{` when expecting\
    \ `,`\\n/tmp/tmp6inb2mlc.d(87): Error: expression expected, not `}`\\n/tmp/tmp6inb2mlc.d(87):\
    \ Error: found `End of File` when expecting `,`\\n/tmp/tmp6inb2mlc.d(87): Error:\
    \ found `End of File` when expecting `]`\\n/tmp/tmp6inb2mlc.d(87): Error: found\
    \ `End of File` when expecting `;` following statement\\n/tmp/tmp6inb2mlc.d(87):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmp6inb2mlc.d(87): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6inb2mlc.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n   \
    \ assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxjk44vt3.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxjk44vt3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvehdq7qc.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvehdq7qc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplfjdoaej.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplfjdoaej.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n   \
    \ assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgcse8hz4.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgcse8hz4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpui9u4r1c.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpui9u4r1c.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaari1ml6.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaari1ml6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo1bzrb0t.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo1bzrb0t.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n   \
    \ assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvsqy4w3m.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvsqy4w3m.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return array\
    \ of all suffixes from shortest to longest of the input string\n    >>> all_suffixes(\"\
    abc\")\n    [\"c\", \"bc\", \"abc\"]\n    \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[i .. $];\n    }\n    return result;\n}\n/*\n Return array\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n    {\n        foreach(j; i .. string.length)\n        {\n \
    \           result ~= string[i .. j];\n        }\n    }\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\",\
    \ \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        foreach(j; i .. string.length)\n\
    \        {\n            result ~= string[i .. j];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    , \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        foreach(j;\
    \ i .. string.length)\n        {\n            result ~= string[i ..\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp926lx2b5.d(83): Error: expression expected, not `unittest`\\\
    n/tmp/tmp926lx2b5.d(84): Error: found `{` when expecting `,`\\n/tmp/tmp926lx2b5.d(85):\
    \ Error: expression expected, not `alias`\\n/tmp/tmp926lx2b5.d(85): Error: found\
    \ `candidate` when expecting `,`\\n/tmp/tmp926lx2b5.d(85): Error: expression expected,\
    \ not `=`\\n/tmp/tmp926lx2b5.d(85): Error: found `all_prefixes` when expecting\
    \ `,`\\n/tmp/tmp926lx2b5.d(85): Error: expression expected, not `;`\\n/tmp/tmp926lx2b5.d(87):\
    \ Error: found `assert` when expecting `,`\\n/tmp/tmp926lx2b5.d(87): Error: found\
    \ `;` when expecting `,`\\n/tmp/tmp926lx2b5.d(88): Error: found `;` when expecting\
    \ `,`\\n/tmp/tmp926lx2b5.d(89): Error: found `;` when expecting `,`\\n/tmp/tmp926lx2b5.d(90):\
    \ Error: expression expected, not `}`\\n/tmp/tmp926lx2b5.d(91): Error: found `void`\
    \ when expecting `,`\\n/tmp/tmp926lx2b5.d(91): Error: found `{` when expecting\
    \ `,`\\n/tmp/tmp926lx2b5.d(91): Error: expression expected, not `}`\\n/tmp/tmp926lx2b5.d(91):\
    \ Error: found `End of File` when expecting `,`\\n/tmp/tmp926lx2b5.d(91): Error:\
    \ found `End of File` when expecting `]`\\n/tmp/tmp926lx2b5.d(91): Error: found\
    \ `End of File` when expecting `;` following statement\\n/tmp/tmp926lx2b5.d(91):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmp926lx2b5.d(91): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp926lx2b5.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzz8csbg1.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzz8csbg1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph5006_an.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph5006_an.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppw22f_gb.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppw22f_gb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkt0rriq_.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkt0rriq_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n   \
    \ assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjako7ahg.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjako7ahg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprs_4e6ya.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprs_4e6ya.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz4r3t8ss.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz4r3t8ss.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] ret;\n    foreach(immutable i; 0 .. string.length)\n    {\n\
    \        ret ~= string[0 .. i];\n    }\n    return ret;\n}\nunittest\n{\n    alias\
    \ candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaujs6x8l.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaujs6x8l.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_ek8x8go.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_ek8x8go.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n   \
    \ assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyxm69kso.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyxm69kso.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8j7mceks.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8j7mceks.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n   \
    \ assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjjqur52h.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjjqur52h.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpipuzxo93.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpipuzxo93.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplxuaj518.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplxuaj518.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj78gdx19.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj78gdx19.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph7o5xyjj.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph7o5xyjj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcb5_tabs.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcb5_tabs.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n   \
    \ assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa9do5ess.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa9do5ess.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6xfgd6br.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6xfgd6br.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpatmk5fs6.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpatmk5fs6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1rn0vhxq.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1rn0vhxq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(int i; 0 .. string.length) \n    {\n\
    \        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1hw8xy5l.d(11): Error: `string` is used as a type\\n/tmp/tmp1hw8xy5l.d(12):\
    \ Error: cannot implicitly convert expression `string.length` of type `ulong`\
    \ to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1hw8xy5l.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4xvz51ra.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4xvz51ra.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpboes0h98.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpboes0h98.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0ygrrt39.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ygrrt39.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg__daq7q.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg__daq7q.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return array\
    \ of all suffixes from shortest to longest of the input string\n    >>> all_suffixes(\"\
    abc\")\n    [\"c\", \"bc\", \"abc\"]\n    \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[i .. $];\n    }\n    return result;\n}\n/*\n Return array\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n    {\n        foreach(j; i .. string.length)\n        {\n \
    \           result ~= string[i .. j];\n        }\n    }\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\",\
    \ \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        foreach(j; i .. string.length)\n\
    \        {\n            result ~= string[i .. j];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    , \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        foreach(j;\
    \ i .. string.length)\n        {\n            result ~= string[i ..\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1mejqff8.d(83): Error: expression expected, not `unittest`\\\
    n/tmp/tmp1mejqff8.d(84): Error: found `{` when expecting `,`\\n/tmp/tmp1mejqff8.d(85):\
    \ Error: expression expected, not `alias`\\n/tmp/tmp1mejqff8.d(85): Error: found\
    \ `candidate` when expecting `,`\\n/tmp/tmp1mejqff8.d(85): Error: expression expected,\
    \ not `=`\\n/tmp/tmp1mejqff8.d(85): Error: found `all_prefixes` when expecting\
    \ `,`\\n/tmp/tmp1mejqff8.d(85): Error: expression expected, not `;`\\n/tmp/tmp1mejqff8.d(87):\
    \ Error: found `assert` when expecting `,`\\n/tmp/tmp1mejqff8.d(87): Error: found\
    \ `;` when expecting `,`\\n/tmp/tmp1mejqff8.d(88): Error: found `;` when expecting\
    \ `,`\\n/tmp/tmp1mejqff8.d(89): Error: found `;` when expecting `,`\\n/tmp/tmp1mejqff8.d(90):\
    \ Error: expression expected, not `}`\\n/tmp/tmp1mejqff8.d(91): Error: found `void`\
    \ when expecting `,`\\n/tmp/tmp1mejqff8.d(91): Error: found `{` when expecting\
    \ `,`\\n/tmp/tmp1mejqff8.d(91): Error: expression expected, not `}`\\n/tmp/tmp1mejqff8.d(91):\
    \ Error: found `End of File` when expecting `,`\\n/tmp/tmp1mejqff8.d(91): Error:\
    \ found `End of File` when expecting `]`\\n/tmp/tmp1mejqff8.d(91): Error: found\
    \ `End of File` when expecting `;` following statement\\n/tmp/tmp1mejqff8.d(91):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmp1mejqff8.d(91): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1mejqff8.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcdl1ijuk.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcdl1ijuk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(immutable i; 0 .. string.length)\n  \
    \  {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjrxrzbxo.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjrxrzbxo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxor06e58.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxor06e58.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphoqoiobn.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphoqoiobn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    auto result = new string[];\n    foreach (i; 0 .. string.length)\n\
    \        result ~= string[0 .. i];\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmsnu4mkk.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmsnu4mkk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0xv2wbz7.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0xv2wbz7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5h4kgaw5.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5h4kgaw5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n   \
    \ assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1bkzbsj9.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1bkzbsj9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n   \
    \ assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb_7uuh6l.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb_7uuh6l.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxopri370.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxopri370.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe81o3ylq.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe81o3ylq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3vylmoj8.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3vylmoj8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpybddhhz4.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpybddhhz4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqp0xi76q.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqp0xi76q.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc1jahjl5.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc1jahjl5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp73_ipgcg.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp73_ipgcg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1ef32ufr.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1ef32ufr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpalqo_l7f.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpalqo_l7f.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplqnq0a2b.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplqnq0a2b.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return array\
    \ of all suffixes from shortest to longest of the input string\n    >>> all_suffixes(\"\
    abc\")\n    [\"c\", \"bc\", \"abc\"]\n    \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    result ~= string[i .. $];\n    }\n    return result;\n}\n/*\n Return array\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length) \n    {\n        foreach(j; i .. string.length) \n        {\n\
    \            result ~= string[i .. j];\n        }\n    }\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\",\
    \ \"c\"]\n    \n*/\nstring[] all_substrings2(string string) \n{\n    string[]\
    \ result;\n    foreach(i; 0 .. string.length) \n    {\n        foreach(j; i ..\
    \ string.length) \n        {\n            result ~= string[i .. j];\n        }\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings3(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n   \
    \ {\n        foreach(j; i .. string.length) \n       \nunittest\n{\n    alias\
    \ candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyh306ts0.d(82): Error: found `unittest` instead of statement\\\
    n/tmp/tmpyh306ts0.d(90): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyh306ts0.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprl7sqycv.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprl7sqycv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpakap7n3g.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpakap7n3g.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1_2wp8ty.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1_2wp8ty.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpas3hre9y.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpas3hre9y.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt4_ne8_w.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt4_ne8_w.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdbn7inx8.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdbn7inx8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8jd1pjmn.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8jd1pjmn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppwv546sh.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppwv546sh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp854js1ja.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp854js1ja.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmq9robe1.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmq9robe1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxr6961y6.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxr6961y6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjm71ddud.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjm71ddud.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n   \
    \ assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn6znbghp.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn6znbghp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz308u6b6.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz308u6b6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo3ca_ern.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo3ca_ern.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n   \
    \ assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp54ira6mw.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp54ira6mw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfnssg781.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfnssg781.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return array\
    \ of all suffixes from shortest to longest of the input string\n    >>> all_suffixes(\"\
    abc\")\n    [\"c\", \"bc\", \"abc\"]\n    \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[i .. $];\n    }\n    return result;\n}\n/*\n Return array\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n    {\n        foreach(j; i .. string.length)\n        {\n \
    \           result ~= string[i .. j];\n        }\n    }\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\",\
    \ \"c\"]\n    \n*/\nstring[] all_substrings2(string string) \n{\n    string[]\
    \ result;\n    foreach(i; 0 .. string.length)\n    {\n        foreach(j; i ..\
    \ string.length)\n        {\n            result ~= string[i .. j];\n        }\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings3(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp11hdg8_x.d(83): Error: expression expected, not `unittest`\\\
    n/tmp/tmp11hdg8_x.d(84): Error: found `{` when expecting `,`\\n/tmp/tmp11hdg8_x.d(85):\
    \ Error: expression expected, not `alias`\\n/tmp/tmp11hdg8_x.d(85): Error: found\
    \ `candidate` when expecting `,`\\n/tmp/tmp11hdg8_x.d(85): Error: expression expected,\
    \ not `=`\\n/tmp/tmp11hdg8_x.d(85): Error: found `all_prefixes` when expecting\
    \ `,`\\n/tmp/tmp11hdg8_x.d(85): Error: expression expected, not `;`\\n/tmp/tmp11hdg8_x.d(87):\
    \ Error: found `assert` when expecting `,`\\n/tmp/tmp11hdg8_x.d(87): Error: found\
    \ `;` when expecting `,`\\n/tmp/tmp11hdg8_x.d(88): Error: found `;` when expecting\
    \ `,`\\n/tmp/tmp11hdg8_x.d(89): Error: found `;` when expecting `,`\\n/tmp/tmp11hdg8_x.d(90):\
    \ Error: expression expected, not `}`\\n/tmp/tmp11hdg8_x.d(91): Error: found `void`\
    \ when expecting `,`\\n/tmp/tmp11hdg8_x.d(91): Error: found `{` when expecting\
    \ `,`\\n/tmp/tmp11hdg8_x.d(91): Error: expression expected, not `}`\\n/tmp/tmp11hdg8_x.d(91):\
    \ Error: found `End of File` when expecting `,`\\n/tmp/tmp11hdg8_x.d(91): Error:\
    \ found `End of File` when expecting `]`\\n/tmp/tmp11hdg8_x.d(91): Error: found\
    \ `End of File` when expecting `;` following statement\\n/tmp/tmp11hdg8_x.d(91):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmp11hdg8_x.d(91): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp11hdg8_x.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpglg5ynk4.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpglg5ynk4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpakzav2cq.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpakzav2cq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp29c10iyq.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp29c10iyq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0ksc6y79.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ksc6y79.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4eajdutl.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4eajdutl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] prefixes;\n    foreach(int i; 0 .. string.length)\n    {\n\
    \        prefixes ~= string[0 .. i];\n    }\n    return prefixes;\n}\n/*\n Return\
    \ array of all suffixes from shortest to longest of the input string\n    >>>\
    \ all_suffixes(\"abc\")\n    [\"c\", \"bc\", \"abc\"]\n    \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] suffixes;\n    foreach(int i; 0 .. string.length)\n\
    \    {\n        suffixes ~= string[i .. $];\n    }\n    return suffixes;\n}\n\
    /*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\",\
    \ \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] substrings;\n\
    \    foreach(int i; 0 .. string.length)\n    {\n        foreach(int j; i .. string.length)\n\
    \        {\n            substrings ~= string[i .. j];\n        }\n    }\n    return\
    \ substrings;\n}\n/*\n Return array of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings_2(string string)\
    \ \n{\n    string[] substrings;\n    foreach(int i; 0 .. string.length)\n    {\n\
    \        foreach(int j; i .. string.length)\n        {\n            substrings\
    \ ~= string[i .. j];\n        }\n    }\n    return substrings;\n}\n/*\n Return\
    \ array of all substrings from shortest to longest of the input string\n    >>>\
    \ all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings_3(string string) \n{\n    string[] substrings;\n\
    \    foreach(int i; 0 .. string.length)\n    {\n\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzef_kscu.d(81): Error: found `unittest` instead of statement\\\
    n/tmp/tmpzef_kscu.d(89): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzef_kscu.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz5di6o5_.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz5di6o5_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n   \
    \ assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp29hmba6z.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp29hmba6z.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n   \
    \ assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdg6823tm.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdg6823tm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcteqn0rs.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcteqn0rs.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n   \
    \ assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgygdsz2s.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgygdsz2s.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbxc57iqy.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbxc57iqy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n   \
    \ assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxyxpjlgd.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxyxpjlgd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n   \
    \ assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy91n5pdf.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy91n5pdf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_2i3r7d1.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_2i3r7d1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5i2j0sft.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5i2j0sft.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2lly3bh6.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2lly3bh6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] prefixes;\n    foreach(i; 0 .. string.length)\n    {\n   \
    \     prefixes ~= string[0 .. i];\n    }\n    return prefixes;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj3s_279f.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj3s_279f.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(immutable i; 0 .. string.length)\n  \
    \  {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return\
    \ array of all suffixes from shortest to longest of the input string\n    >>>\
    \ all_suffixes(\"abc\")\n    [\"c\", \"bc\", \"abc\"]\n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result;\n    foreach(immutable i; 0 .. string.length)\n\
    \    {\n        result ~= string[i .. $];\n    }\n    return result;\n}\n/*\n\
    \ Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\",\
    \ \"c\"]\n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n\
    \    foreach(immutable i; 0 .. string.length)\n    {\n        foreach(immutable\
    \ j; i .. string.length)\n        {\n            result ~= string[i .. j];\n \
    \       }\n    }\n    return result;\n}\n/*\n Return array of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result;\n    foreach(immutable i; 0 .. string.length)\n\
    \    {\n        foreach(immutable j; i .. string.length)\n        {\n        \
    \    result ~= string[i .. j];\n        }\n    }\n    return result;\n}\n/*\n\
    \ Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\",\
    \ \"c\"]\n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n\
    \    foreach(immutable i; 0 .. string.length)\n    {\n        foreach(immutable\
    \ j; i .. string.length)\n        {\n\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeg4dyr99.d(79): Error: found `unittest` instead of statement\\\
    n/tmp/tmpeg4dyr99.d(87): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmpeg4dyr99.d(87): Error: found `End of File` when\
    \ expecting `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpeg4dyr99.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqeb20zlr.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqeb20zlr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo7rzjvij.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo7rzjvij.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n   \
    \ assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0q8l45dc.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0q8l45dc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(int i; 0..string.length)\n    {\n   \
    \     result ~= string[0..i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjg3a5fjc.d(11): Error: `string` is used as a type\\n/tmp/tmpjg3a5fjc.d(12):\
    \ Error: cannot implicitly convert expression `string.length` of type `ulong`\
    \ to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjg3a5fjc.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgyo7km6g.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgyo7km6g.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn7sf4d7_.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn7sf4d7_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp19pi7x79.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp19pi7x79.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpghh_rkmr.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpghh_rkmr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw4uxkv2v.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw4uxkv2v.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2p01gsq9.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2p01gsq9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpov78x_f_.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpov78x_f_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n   \
    \ assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwkaqjvsz.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwkaqjvsz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return array\
    \ of all suffixes from shortest to longest of the input string\n    >>> all_suffixes(\"\
    abc\")\n    [\"c\", \"bc\", \"abc\"]\n    \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[i .. $];\n    }\n    return result;\n}\n/*\n Return array\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n    {\n        foreach(j; i .. string.length)\n        {\n \
    \           result ~= string[i .. j];\n        }\n    }\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\",\
    \ \"c\"]\n    \n*/\nstring[] all_substrings2(string string) \n{\n    string[]\
    \ result;\n    foreach(i; 0 .. string.length)\n    {\n        foreach(j; i ..\
    \ string.length)\n        {\n            result ~= string[i .. j];\n        }\n\
    \    }\n    return result;\n}\n/*\n Return array of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings3(string\
    \ string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n\
    \        foreach(j; i .. string.length)\n        {\n            result ~= string[\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpthqur0cw.d(83): Error: expression expected, not `unittest`\\\
    n/tmp/tmpthqur0cw.d(84): Error: found `{` when expecting `,`\\n/tmp/tmpthqur0cw.d(85):\
    \ Error: expression expected, not `alias`\\n/tmp/tmpthqur0cw.d(85): Error: found\
    \ `candidate` when expecting `,`\\n/tmp/tmpthqur0cw.d(85): Error: expression expected,\
    \ not `=`\\n/tmp/tmpthqur0cw.d(85): Error: found `all_prefixes` when expecting\
    \ `,`\\n/tmp/tmpthqur0cw.d(85): Error: expression expected, not `;`\\n/tmp/tmpthqur0cw.d(87):\
    \ Error: found `assert` when expecting `,`\\n/tmp/tmpthqur0cw.d(87): Error: found\
    \ `;` when expecting `,`\\n/tmp/tmpthqur0cw.d(88): Error: found `;` when expecting\
    \ `,`\\n/tmp/tmpthqur0cw.d(89): Error: found `;` when expecting `,`\\n/tmp/tmpthqur0cw.d(90):\
    \ Error: expression expected, not `}`\\n/tmp/tmpthqur0cw.d(91): Error: found `void`\
    \ when expecting `,`\\n/tmp/tmpthqur0cw.d(91): Error: found `{` when expecting\
    \ `,`\\n/tmp/tmpthqur0cw.d(91): Error: expression expected, not `}`\\n/tmp/tmpthqur0cw.d(91):\
    \ Error: found `End of File` when expecting `,`\\n/tmp/tmpthqur0cw.d(91): Error:\
    \ found `End of File` when expecting `]`\\n/tmp/tmpthqur0cw.d(91): Error: found\
    \ `End of File` when expecting `;` following statement\\n/tmp/tmpthqur0cw.d(91):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmpthqur0cw.d(91): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpthqur0cw.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0e0tul7t.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0e0tul7t.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1m757woa.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1m757woa.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg_6i1owp.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg_6i1owp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] prefixes;\n    foreach(i; 0 .. string.length)\n    {\n   \
    \     prefixes ~= string[0 .. i];\n    }\n    return prefixes;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0kprgjzf.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0kprgjzf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplvy86j10.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplvy86j10.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprynn7lpe.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprynn7lpe.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n   \
    \ assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn8ymibzn.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8ymibzn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmf7c9boy.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmf7c9boy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqjco2m7s.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqjco2m7s.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj1tw83nt.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj1tw83nt.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwgdvmt6z.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwgdvmt6z.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n   \
    \ assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkwtoptjg.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkwtoptjg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpebalraju.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebalraju.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n   \
    \ assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbjsjt9mg.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbjsjt9mg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8bg7jrjy.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8bg7jrjy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptxscpisr.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptxscpisr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1mklxyv4.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1mklxyv4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqt3queg2.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqt3queg2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n   \
    \ assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6g39dqdr.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6g39dqdr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1ugw7leo.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1ugw7leo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8i62rypi.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8i62rypi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpin6eu1w5.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpin6eu1w5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n   \
    \ assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpndx3yyl4.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpndx3yyl4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    import std.algorithm;\n    import std.range;\n    import std.conv;\n\
    \    import std.array;\n    import std.string;\n    import std.range;\n    import\
    \ std.typecons;\n    import std.math;\n    import std.algorithm;\n    import std.range;\n\
    \    import std.conv;\n    import std.array;\n    import std.string;\n    import\
    \ std.range;\n    import std.typecons;\n    import std.math;\n    import std.algorithm;\n\
    \    import std.range;\n    import std.conv;\n    import std.array;\n    import\
    \ std.string;\n    import std.range;\n    import std.typecons;\n    import std.math;\n\
    \    import std.algorithm;\n    import std.range;\n    import std.conv;\n    import\
    \ std.array;\n    import std.string;\n    import std.range;\n    import std.typecons;\n\
    \    import std.math;\n    import std.algorithm;\n    import std.range;\n    import\
    \ std.conv;\n    import std.array;\n    import std.string;\n    import std.range;\n\
    \    import std.typecons;\n    import std.math;\n    import std.algorithm;\n \
    \   import std.range;\n    import std.conv;\n    import std.array;\n    import\
    \ std.string;\n    import std.range;\n    import std.typecons;\n    import std.math;\n\
    \    import std.algorithm;\n    import std.range;\n    import std.conv;\n    import\
    \ std.array;\n    import std.string;\n    import std.range;\n    import std.typecons;\n\
    \    import std.math;\n    import std.algorithm;\n    import std.range;\n    import\
    \ std.conv;\n    import std.array;\n    import std.string;\n    import std.range;\n\
    \    import std.typecons;\n    import std.math;\n    import std.algorithm;\n \
    \   import std.range;\n    import std.conv;\n    import std.array;\n    import\
    \ std.string;\n    import std.range;\n    import\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3hefog10.d(82): Error: identifier expected following `import`\\\
    n/tmp/tmp3hefog10.d(82): Error: `;` expected\\n/tmp/tmp3hefog10.d(90): Error:\
    \ found `End of File` when expecting `}` following compound statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3hefog10.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsegz7qwa.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsegz7qwa.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n    \
    \    result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n   \
    \ assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps9awhiia.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps9awhiia.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq196rhnk.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq196rhnk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt3_ysx9z.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt3_ysx9z.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return array\
    \ of all suffixes from shortest to longest of the input string\n    >>> all_suffixes(\"\
    abc\")\n    [\"c\", \"bc\", \"abc\"]\n    \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[i .. $];\n    }\n    return result;\n}\n/*\n Return array\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result;\n    foreach(i; 0 ..\
    \ string.length)\n    {\n        foreach(j; i .. string.length)\n        {\n \
    \           result ~= string[i .. j];\n        }\n    }\n    return result;\n\
    }\n/*\n Return array of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\",\
    \ \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n\
    \    foreach(i; 0 .. string.length)\n    {\n        foreach(j; i .. string.length)\n\
    \        {\n            result ~= string[i .. j];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Return array of all substrings from shortest to longest of\
    \ the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    , \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n\
    \    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        foreach(j;\
    \ i .. string.length)\n        {\n            result ~= string[i ..\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprskxj_gj.d(83): Error: expression expected, not `unittest`\\\
    n/tmp/tmprskxj_gj.d(84): Error: found `{` when expecting `,`\\n/tmp/tmprskxj_gj.d(85):\
    \ Error: expression expected, not `alias`\\n/tmp/tmprskxj_gj.d(85): Error: found\
    \ `candidate` when expecting `,`\\n/tmp/tmprskxj_gj.d(85): Error: expression expected,\
    \ not `=`\\n/tmp/tmprskxj_gj.d(85): Error: found `all_prefixes` when expecting\
    \ `,`\\n/tmp/tmprskxj_gj.d(85): Error: expression expected, not `;`\\n/tmp/tmprskxj_gj.d(87):\
    \ Error: found `assert` when expecting `,`\\n/tmp/tmprskxj_gj.d(87): Error: found\
    \ `;` when expecting `,`\\n/tmp/tmprskxj_gj.d(88): Error: found `;` when expecting\
    \ `,`\\n/tmp/tmprskxj_gj.d(89): Error: found `;` when expecting `,`\\n/tmp/tmprskxj_gj.d(90):\
    \ Error: expression expected, not `}`\\n/tmp/tmprskxj_gj.d(91): Error: found `void`\
    \ when expecting `,`\\n/tmp/tmprskxj_gj.d(91): Error: found `{` when expecting\
    \ `,`\\n/tmp/tmprskxj_gj.d(91): Error: expression expected, not `}`\\n/tmp/tmprskxj_gj.d(91):\
    \ Error: found `End of File` when expecting `,`\\n/tmp/tmprskxj_gj.d(91): Error:\
    \ found `End of File` when expecting `]`\\n/tmp/tmprskxj_gj.d(91): Error: found\
    \ `End of File` when expecting `;` following statement\\n/tmp/tmprskxj_gj.d(91):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmprskxj_gj.d(91): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprskxj_gj.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw_f5y_3j.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw_f5y_3j.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmn8t17jt.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmn8t17jt.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp76f9q7l5.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp76f9q7l5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] ret;\n    foreach(int i; 0..string.length) \n    {\n     \
    \   ret ~= string[0..i];\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt0u4j3va.d(11): Error: `string` is used as a type\\n/tmp/tmpt0u4j3va.d(12):\
    \ Error: cannot implicitly convert expression `string.length` of type `ulong`\
    \ to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt0u4j3va.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv28jzs5g.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv28jzs5g.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyq3mx_sb.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyq3mx_sb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvcdollq1.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvcdollq1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjdsl32tn.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjdsl32tn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_i6mm5lx.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_i6mm5lx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Return array of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n     \
    \   result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnuk9z8iv.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnuk9z8iv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
