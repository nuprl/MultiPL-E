name: HumanEval_88_sort_array
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
  \ integers, return a cod of the given array after sorting,\n    you will sort the\
  \ given array in ascending order if the sum( first index value, last index value)\
  \ is odd,\n    or sort it in descending order if the sum( first index value, last\
  \ index value) is even.\n\n    Note:\n    * don't change the given array.\n\n  \
  \  Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n    [5L]\n\
  \    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L, 5L]\n  \
  \  >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L, 2L, 1L, 0L]\n\
  \    \n*/\nlong[] sort_array(long[] array) \n"
tests: "unittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
  \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L,\
  \ 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L,\
  \ 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
  \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
  \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
  \ 21L, 14L, 11L]);\n}\nvoid main(){}"
completions: ["{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    if (array[0] + array[array.length - 1] % 2\
    \ == 0)\n        return array.sort(std.numeric.comparison);\n    else\n      \
    \  return array.sort(std.numeric.comparison).reverse();\n}", "{\n    if (array.length\
    \ == 0)\n        return array;\n    else if (array.length == 1)\n        return\
    \ array;\n    else\n    {\n        long first = array[0];\n        long last =\
    \ array[array.length - 1];\n        if ((first + last) % 2 == 0)\n        {\n\
    \            array.sort!((a, b) => a > b);\n            return array;\n      \
    \  }\n        else\n        {\n            array.sort!((a, b) => a < b);\n   \
    \         return array;\n        }\n    }\n}", "{\n    if (array.length == 0)\n\
    \        return array;\n    if (array.length == 1)\n        return array;\n  \
    \  if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort!((a,\
    \ b) => b - a);\n    else\n        return array.sort!((a, b) => a - b);\n}", "{\n\
    \    if (array.length == 0)\n        return array;\n    if (array.length == 1)\n\
    \        return array;\n    if (array[0] + array[array.length - 1] % 2 == 0)\n\
    \        return array.sort(std.numeric.cmp.greater);\n    else\n        return\
    \ array.sort(std.numeric.cmp.less);\n}", "{\n    if (array.length == 0)\n    \
    \    return array;\n    if (array.length == 1)\n        return array;\n    if\
    \ (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort!((a,\
    \ b) => a > b);\n    else\n        return array.sort!((a, b) => a < b);\n}", "{\n\
    \    long[] result = array.dup;\n    if (result.length == 0)\n        return result;\n\
    \    if (result.length == 1)\n        return result;\n    if (result[0] + result[$\
    \ - 1] % 2 == 0)\n        result.sort!((a, b) => a > b);\n    else\n        result.sort!((a,\
    \ b) => a < b);\n    return result;\n}", "{\n    if (array.length == 0)\n    \
    \    return array;\n    else if (array.length == 1)\n        return array;\n \
    \   else\n    {\n        long[] result = array.dup;\n        if ((array[0] + array[$\
    \ - 1]) % 2 == 0)\n            result.sort!((a, b) => b.compare(a));\n       \
    \ else\n            result.sort!((a, b) => a.compare(b));\n        return result;\n\
    \    }\n}", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    if (array[0] + array[$-1] % 2 == 0)\n    \
    \    return array.sort!((a, b) => b - a);\n    else\n        return array.sort!((a,\
    \ b) => a - b);\n}", "{\n    if (array.length == 0)\n        return array;\n \
    \   if (array.length == 1)\n        return array;\n    if (array[0] + array[array.length\
    \ - 1] % 2 == 0)\n        return sort(array, (a, b) => b - a);\n    else\n   \
    \     return sort(array, (a, b) => a - b);\n}", "{\n    long[] result = new long[array.length];\n\
    \    if(array.length == 0)\n        return array;\n    if(array.length == 1)\n\
    \        return array;\n    if(array.length == 2)\n    {\n        if(array[0]\
    \ > array[1])\n        {\n            long temp = array[0];\n            array[0]\
    \ = array[1];\n            array[1] = temp;\n        }\n        return array;\n\
    \    }\n    if((array[0] + array[array.length - 1]) % 2 == 0)\n    {\n       \
    \ long[] temp = new long[array.length];\n        for(int i = 0; i < array.length;\
    \ i++)\n        {\n            temp[i] = array[i];\n        }\n        temp.sort();\n\
    \        for(int i = 0; i < array.length; i++)\n        {\n            result[i]\
    \ = temp[array.length - 1 - i];\n        }\n    }\n    else\n    {\n        array.sort();\n\
    \        for(int i = 0; i < array.length; i++)\n        {\n            result[i]\
    \ = array[i];\n        }\n    }\n    return result;\n}", "{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[$-1] % 2 == 0)\n        return array.sort(std.math.greater);\n\
    \    else\n        return array.sort(std.math.less);\n}", "{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort!((a,\
    \ b) => a > b);\n    else\n        return array.sort!((a, b) => a < b);\n}", "{\n\
    \    if (array.length == 0)\n        return array;\n    if (array.length == 1)\n\
    \        return array;\n    if (array[0] + array[$-1] % 2 == 0)\n        return\
    \ array.sort!((a, b) => b - a);\n    else\n        return array.sort!((a, b) =>\
    \ a - b);\n}", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    if (array[0] + array[$-1] % 2 == 0)\n    \
    \    return array.sort(std.math.greater);\n    else\n        return array.sort(std.math.less);\n\
    }", "{\n    long[] result = array.dup;\n    if(result.length == 0)\n        return\
    \ result;\n    if(result.length == 1)\n        return result;\n    if(result[0]\
    \ + result[$-1] % 2 == 0)\n        result.sort!((a, b) => a > b);\n    else\n\
    \        result.sort!((a, b) => a < b);\n    return result;\n}", "{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort!((a,\
    \ b) => a > b);\n    else\n        return array.sort!((a, b) => a < b);\n}", "{\n\
    \    if (array.length == 0)\n        return array;\n    if (array.length == 1)\n\
    \        return array;\n    if (array[0] + array[$-1] % 2 == 0)\n        return\
    \ sort(array, (a, b) => a > b);\n    else\n        return sort(array, (a, b) =>\
    \ a < b);\n}", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    if (array[0] + array[$-1] % 2 == 0)\n    \
    \    return array.sort!((a, b) => b - a);\n    else\n        return array.sort!((a,\
    \ b) => a - b);\n}", "{\n    if (array.length == 0)\n        return array;\n \
    \   if (array.length == 1)\n        return array;\n    if (array[0] + array[$-1]\
    \ % 2 == 0)\n        return array.sort(std.math.descending);\n    else\n     \
    \   return array.sort(std.math.ascending);\n}", "{\n    if (array.length == 0)\n\
    \        return array;\n    if (array.length == 1)\n        return array;\n  \
    \  if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort(std.math.greater);\n\
    \    else\n        return array.sort(std.math.less);\n}", "{\n    if (array.length\
    \ == 0)\n        return array;\n    else if (array.length == 1)\n        return\
    \ array;\n    else\n    {\n        long[] result = new long[array.length];\n \
    \       long first = array[0];\n        long last = array[array.length - 1];\n\
    \        long sum = first + last;\n        if (sum % 2 == 0)\n        {\n    \
    \        sort(array);\n            reverse(array);\n            return array;\n\
    \        }\n        else\n        {\n            sort(array);\n            return\
    \ array;\n        }\n    }\n}", "{\n    if (array.length == 0)\n        return\
    \ array;\n    if (array.length == 1)\n        return array;\n    if (array[0]\
    \ + array[$-1] % 2 == 0)\n        return array.sort!((a, b) => a > b);\n    else\n\
    \        return array.sort!((a, b) => a < b);\n}", "{\n    if (array.length ==\
    \ 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[$-1] % 2 == 0)\n        return array.sort!((a, b) =>\
    \ a > b);\n    else\n        return array.sort!((a, b) => a < b);\n}", "{\n  \
    \  if (array.length == 0)\n        return array;\n    if (array.length == 1)\n\
    \        return array;\n    if (array[0] + array[array.length - 1] % 2 == 0)\n\
    \        return sort(array, (a, b) => b - a);\n    else\n        return sort(array,\
    \ (a, b) => a - b);\n}", "{\n    if (array.length == 0)\n        return array;\n\
    \    if (array.length == 1)\n        return array;\n    if (array[0] + array[$-1]\
    \ % 2 == 0)\n        return array.sort!((a, b) => a > b);\n    else\n        return\
    \ array.sort!((a, b) => a < b);\n}", "{\n    auto sum = array.front + array.back;\n\
    \    if (sum % 2 == 0)\n    {\n        return array.sort!((a, b) => a > b);\n\
    \    }\n    else\n    {\n        return array.sort!((a, b) => a < b);\n    }\n\
    }", "{\n    if (array.length == 0) return array;\n    if (array.length == 1) return\
    \ array;\n    if (array.length == 2) return array[0] < array[1] ? array : array.reverse();\n\
    \    long[] result = array.dup;\n    if ((array[0] + array[$ - 1]) % 2 == 0)\n\
    \    {\n        result.sort!((a, b) => a > b);\n    }\n    else\n    {\n     \
    \   result.sort!((a, b) => a < b);\n    }\n    return result;\n}", "{\n    if\
    \ (array.length == 0)\n        return array;\n    else if (array.length == 1)\n\
    \        return array;\n    else\n    {\n        long first = array[0];\n    \
    \    long last = array[array.length - 1];\n        if ((first + last) % 2 == 0)\n\
    \        {\n            sort(array);\n            return array;\n        }\n \
    \       else\n        {\n            sort(array);\n            reverse(array);\n\
    \            return array;\n        }\n    }\n}", "{\n    if (array.length ==\
    \ 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if ((array[0] + array[array.length - 1]) % 2 == 0)\n    {\n        array.sort!((a,\
    \ b) => a > b);\n    }\n    else\n    {\n        array.sort!((a, b) => a < b);\n\
    \    }\n    return array;\n}", "{\n    if (array.length == 0)\n        return\
    \ array;\n    if (array.length == 1)\n        return array;\n    if (array[0]\
    \ + array[$-1] % 2 == 0)\n        return array.sort!((a, b) => a > b);\n    else\n\
    \        return array.sort!((a, b) => a < b);\n}", "{\n    if (array.length ==\
    \ 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return sort(array,\
    \ (a, b) => a > b);\n    else\n        return sort(array, (a, b) => a < b);\n}",
  "{\n    if (array.length == 0)\n        return array;\n    else if (array.length\
    \ == 1)\n        return array;\n    else if (array.length == 2)\n    {\n     \
    \   if (array[0] > array[1])\n        {\n            long temp = array[0];\n \
    \           array[0] = array[1];\n            array[1] = temp;\n        }\n  \
    \      return array;\n    }\n    else\n    {\n        if ((array[0] + array[array.length\
    \ - 1]) % 2 == 0)\n        {\n            array = array.sort(std.math.greater);\n\
    \        }\n        else\n        {\n            array = array.sort(std.math.less);\n\
    \        }\n        return array;\n    }\n}", "{\n    if (array.length == 0)\n\
    \        return array;\n    if (array.length == 1)\n        return array;\n  \
    \  if ((array[0] + array[array.length - 1]) % 2 == 0)\n    {\n        array.sort!((a,\
    \ b) => b - a);\n    }\n    else\n    {\n        array.sort!((a, b) => a - b);\n\
    \    }\n    return array;\n}", "{\n    if (array.length == 0)\n        return\
    \ array;\n    if (array.length == 1)\n        return array;\n    if (array[0]\
    \ + array[array.length - 1] % 2 == 0)\n        return array.sort(std.numeric.comparison);\n\
    \    else\n        return array.sort(std.numeric.comparison).reverse();\n}", "{\n\
    \    if (array.length == 0)\n        return array;\n    if (array.length == 1)\n\
    \        return array;\n    if (array[0] + array[$-1] % 2 == 0)\n        return\
    \ sort!((a, b) => a > b)(array);\n    else\n        return sort!((a, b) => a <\
    \ b)(array);\n}", "{\n    long[] result = array.dup;\n    if(array.length == 0)\
    \ return result;\n    if(array.length == 1) return result;\n    if(array[0] +\
    \ array[$-1] % 2 == 0)\n    {\n        result.sort!((a, b) => a > b);\n    }\n\
    \    else\n    {\n        result.sort!((a, b) => a < b);\n    }\n    return result;\n\
    }", "{\n    if (array.length == 0)\n        return array;\n    else if (array.length\
    \ == 1)\n        return array;\n    else\n    {\n        long first = array[0];\n\
    \        long last = array[array.length - 1];\n        if ((first + last) % 2\
    \ == 0)\n        {\n            array = array.sort!((a, b) => b - a);\n      \
    \      return array;\n        }\n        else\n        {\n            array =\
    \ array.sort!((a, b) => a - b);\n            return array;\n        }\n    }\n\
    }", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    if (array[0] + array[array.length - 1] % 2\
    \ == 0)\n        return array.sort!((a, b) => a > b);\n    else\n        return\
    \ array.sort!((a, b) => a < b);\n}", "{\n    if (array.length == 0) return array;\n\
    \    if (array.length == 1) return array;\n    if (array[0] + array[array.length\
    \ - 1] % 2 == 0)\n    {\n        return array.sort!((a, b) => a > b);\n    }\n\
    \    else\n    {\n        return array.sort!((a, b) => a < b);\n    }\n}", "{\n\
    \    if (array.length == 0)\n        return array;\n    if (array.length == 1)\n\
    \        return array;\n    if (array[0] + array[array.length - 1] % 2 == 0)\n\
    \        return sort(array, (a, b) => b - a);\n    else\n        return sort(array,\
    \ (a, b) => a - b);\n}", "{\n    long[] result = array.dup;\n    if(array.length\
    \ == 0)\n        return result;\n    if(array.length == 1)\n        return result;\n\
    \    if(array[0] + array[$-1] % 2 == 0)\n        result.sort!((a, b) => b - a);\n\
    \    else\n        result.sort!((a, b) => a - b);\n    return result;\n}", "{\n\
    \    if (array.length == 0)\n        return array;\n    if (array.length == 1)\n\
    \        return array;\n    if (array[0] + array[$-1] % 2 == 0)\n        return\
    \ array.sort!((a, b) => a > b);\n    else\n        return array.sort!((a, b) =>\
    \ a < b);\n}", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    if (array[0] + array[array.length - 1] % 2\
    \ == 0)\n        return sort(array, (a, b) => b - a);\n    else\n        return\
    \ sort(array, (a, b) => a - b);\n}", "{\n    if (array.length == 0)\n        return\
    \ array;\n    if (array.length == 1)\n        return array;\n    if (array[0]\
    \ + array[array.length - 1] % 2 == 0)\n        return array.sort!((a, b) => b\
    \ - a);\n    else\n        return array.sort!((a, b) => a - b);\n}", "{\n    if\
    \ (array.length == 0)\n        return array;\n    if (array.length == 1)\n   \
    \     return array;\n    if (array[0] + array[$-1] % 2 == 0)\n        return array.sort!((a,\
    \ b) => b - a);\n    else\n        return array.sort!((a, b) => a - b);\n}", "{\n\
    \    if (array.length == 0)\n        return array;\n    if (array.length == 1)\n\
    \        return array;\n    if (array[0] + array[array.length - 1] % 2 == 0)\n\
    \        return sort(array, (a, b) => a > b);\n    else\n        return sort(array,\
    \ (a, b) => a < b);\n}", "{\n    if (array.length == 0)\n        return array;\n\
    \    if (array.length == 1)\n        return array;\n    if ((array[0] + array[array.length\
    \ - 1]) % 2 == 0)\n    {\n        array = array.sort!((a, b) => a > b);\n    }\n\
    \    else\n    {\n        array = array.sort!((a, b) => a < b);\n    }\n    return\
    \ array;\n}", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    if (array[0] + array[array.length - 1] % 2\
    \ == 0)\n        return array.sort!((a, b) => b - a);\n    else\n        return\
    \ array.sort!((a, b) => a - b);\n}", "{\n    if (array.length == 0)\n        return\
    \ array;\n    if (array.length == 1)\n        return array;\n    if (array[0]\
    \ + array[$-1] % 2 == 0)\n        return array.sort(std.math.greater);\n    else\n\
    \        return array.sort(std.math.less);\n}", "{\n    if (array.length == 0)\n\
    \        return array;\n    if (array.length == 1)\n        return array;\n  \
    \  long[] sorted = array.dup;\n    if ((array[0] + array[array.length - 1]) %\
    \ 2 == 0)\n        sorted.sort!((a, b) => b - a);\n    else\n        sorted.sort!((a,\
    \ b) => a - b);\n    return sorted;\n}", "{\n    if (array.length == 0)\n    \
    \    return array;\n    if (array.length == 1)\n        return array;\n    if\
    \ (array[0] + array[array.length - 1] % 2 == 0)\n        return sort(array, (a,\
    \ b) => a > b);\n    else\n        return sort(array, (a, b) => a < b);\n}", "{\n\
    \    if (array.length == 0)\n        return array;\n    if (array.length == 1)\n\
    \        return array;\n    if (array[0] + array[array.length - 1] % 2 == 0)\n\
    \        return array.sort!((a, b) => a > b);\n    else\n        return array.sort!((a,\
    \ b) => a < b);\n}", "{\n    long[] result = array.dup;\n    if (result.length\
    \ == 0)\n        return result;\n    if (result.length == 1)\n        return result;\n\
    \    if (result[0] + result[$ - 1] % 2 == 0)\n        sort!((a, b) => a > b)(result);\n\
    \    else\n        sort!((a, b) => a < b)(result);\n    return result;\n}", "{\n\
    \    if (array.length == 0)\n        return array;\n    if (array.length == 1)\n\
    \        return array;\n    if (array[0] + array[array.length - 1] % 2 == 0)\n\
    \        return array.sort(std.numeric.comparison);\n    else\n        return\
    \ array.sort(std.numeric.comparison).reverse();\n}", "{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    long[] result = new long[array.length];\n    if ((array[0] + array[array.length\
    \ - 1]) % 2 == 0)\n    {\n        array.sort(std.numeric.comparison);\n      \
    \  foreach (i, v; array)\n            result[i] = v;\n    }\n    else\n    {\n\
    \        array.sort(std.numeric.comparison);\n        foreach (i, v; array)\n\
    \            result[array.length - 1 - i] = v;\n    }\n    return result;\n}",
  "{\n    if (array.length == 0)\n        return array;\n    if (array.length == 1)\n\
    \        return array;\n    if (array[0] + array[$-1] % 2 == 0)\n        return\
    \ array.sort!((a, b) => a > b);\n    else\n        return array.sort!((a, b) =>\
    \ a < b);\n}", "{\n    long[] result = new long[array.length];\n    if (array.length\
    \ == 0) return result;\n    if (array.length == 1) return array;\n    if (array[0]\
    \ + array[array.length - 1] % 2 == 0)\n    {\n        result = array.sort!((a,\
    \ b) => a > b);\n    }\n    else\n    {\n        result = array.sort!((a, b) =>\
    \ a < b);\n    }\n    return result;\n}", "{\n    long[] result = array.dup;\n\
    \    if (result.length == 0)\n        return result;\n    if (result.length ==\
    \ 1)\n        return result;\n    if (result[0] + result[$ - 1] % 2 == 0)\n  \
    \      result.sort!((a, b) => a > b);\n    else\n        result.sort!((a, b) =>\
    \ a < b);\n    return result;\n}", "{\n    if (array.length == 0)\n        return\
    \ array;\n    if (array.length == 1)\n        return array;\n    if (array[0]\
    \ + array[array.length - 1] % 2 == 0)\n        return array.sort(std.numeric.cmp.greater);\n\
    \    else\n        return array.sort(std.numeric.cmp.less);\n}", "{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    long first = array[0];\n    long last = array[array.length - 1];\n    if\
    \ ((first + last) % 2 == 0)\n    {\n        array.sort!((a, b) => b - a);\n  \
    \  }\n    else\n    {\n        array.sort!((a, b) => a - b);\n    }\n    return\
    \ array;\n}", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    if (array[0] + array[array.length - 1] % 2\
    \ == 0)\n        return array.sort!((a, b) => a > b);\n    else\n        return\
    \ array.sort!((a, b) => a < b);\n}", "{\n    if (array.length == 0)\n        return\
    \ array;\n    else if (array.length == 1)\n        return array;\n    else\n \
    \   {\n        if ((array[0] + array[$-1]) % 2 == 0)\n            return array.sort!((a,\
    \ b) => b - a);\n        else\n            return array.sort!((a, b) => a - b);\n\
    \    }\n}", "{\n    long[] result = new long[array.length];\n    long[] array_copy\
    \ = array.dup;\n    if(array.length == 0)\n        return result;\n    if(array.length\
    \ == 1)\n        return array;\n    if(array[0] + array[array.length - 1] % 2\
    \ == 0)\n    {\n        array_copy.sort!((a, b) => b - a);\n        foreach(i,\
    \ e; array_copy)\n            result[i] = e;\n    }\n    else\n    {\n       \
    \ array_copy.sort!((a, b) => a - b);\n        foreach(i, e; array_copy)\n    \
    \        result[i] = e;\n    }\n    return result;\n}", "{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort(std.numeric.comparison);\n\
    \    else\n        return array.sort(std.numeric.comparison).reverse();\n}", "{\n\
    \    if (array.length == 0)\n        return array;\n    else if (array.length\
    \ == 1)\n        return array;\n    else\n    {\n        long[] result = array.dup;\n\
    \        if (array[0] + array[$ - 1] % 2 == 0)\n            result.sort!((a, b)\
    \ => b - a);\n        else\n            result.sort!((a, b) => a - b);\n     \
    \   return result;\n    }\n}", "{\n    if (array.length == 0)\n        return\
    \ array;\n    if (array.length == 1)\n        return array;\n    if (array[0]\
    \ + array[array.length - 1] % 2 == 0)\n        return array.sort(std.numeric.comparison);\n\
    \    else\n        return array.sort(std.numeric.comparison).reverse();\n}", "{\n\
    \    if (array.length == 0)\n        return array;\n    if (array.length == 1)\n\
    \        return array;\n    if (array[0] + array[array.length - 1] % 2 == 0)\n\
    \        return array.sort(std.numeric.cmp.greater);\n    else\n        return\
    \ array.sort(std.numeric.cmp.less);\n}", "{\n    int size = array.length;\n  \
    \  if (size == 0)\n        return array;\n    if (size == 1)\n        return array;\n\
    \    if (array[0] + array[size - 1] % 2 == 0)\n        return sort(array, (a,\
    \ b) => a > b);\n    else\n        return sort(array, (a, b) => a < b);\n}", "{\n\
    \    if (array.length == 0)\n        return array;\n    if (array.length == 1)\n\
    \        return array;\n    if ((array[0] + array[array.length - 1]) % 2 == 0)\n\
    \        return array.sort!((a, b) => b - a);\n    else\n        return array.sort!((a,\
    \ b) => a - b);\n}", "{\n    if (array.length == 0)\n        return array;\n \
    \   if (array.length == 1)\n        return array;\n    if (array[0] + array[$-1]\
    \ % 2 == 0)\n        return array.sort!((a, b) => a > b);\n    else\n        return\
    \ array.sort!((a, b) => a < b);\n}", "{\n    if (array.length == 0)\n        return\
    \ array;\n    if (array.length == 1)\n        return array;\n    if (array[0]\
    \ + array[array.length - 1] % 2 == 0)\n        return array.sort(std.numeric.comparison);\n\
    \    else\n        return array.sort(std.numeric.comparison).reverse();\n}", "{\n\
    \    long[] result = array.dup;\n    if(array.length == 0)\n        return result;\n\
    \    if(array.length == 1)\n        return result;\n    if(array[0] + array[$-1]\
    \ % 2 == 0)\n        result.sort!((a, b) => a > b);\n    else\n        result.sort!((a,\
    \ b) => a < b);\n    return result;\n}", "{\n    if (array.length == 0)\n    \
    \    return array;\n    if (array.length == 1)\n        return array;\n    if\
    \ (array[0] + array[$-1] % 2 == 0)\n        return array.sort(std.math.greater);\n\
    \    else\n        return array.sort();\n}", "{\n    if (array.length == 0)\n\
    \        return array;\n    if (array.length == 1)\n        return array;\n  \
    \  if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort(std.numeric.cmp.greater);\n\
    \    else\n        return array.sort(std.numeric.cmp.less);\n}", "{\n    if (array.length\
    \ == 0) return array;\n    if (array.length == 1) return array;\n    long[] result\
    \ = new long[array.length];\n    if (array[0] + array[array.length - 1] % 2 ==\
    \ 0)\n    {\n        result = array.dup;\n        result.sort!((a, b) => a > b);\n\
    \    }\n    else\n    {\n        result = array.dup;\n        result.sort!((a,\
    \ b) => a < b);\n    }\n    return result;\n}", "{\n    if (array.length == 0)\n\
    \        return array;\n    if (array.length == 1)\n        return array;\n  \
    \  if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort(std.numeric.comparison);\n\
    \    else\n        return array.sort(std.numeric.comparison).reverse();\n}", "{\n\
    \    if (array.length == 0)\n        return array;\n    else if (array.length\
    \ == 1)\n        return array;\n    else\n    {\n        long[] result = array.dup;\n\
    \        if ((result[0] + result[$ - 1]) % 2 == 0)\n            result.sort!((a,\
    \ b) => b - a);\n        else\n            result.sort!((a, b) => a - b);\n  \
    \      return result;\n    }\n}", "{\n    if (array.length == 0)\n        return\
    \ array;\n    if (array.length == 1)\n        return array;\n    if (array[0]\
    \ + array[array.length - 1] % 2 == 0)\n        return sort(array, (a, b) => b\
    \ - a);\n    else\n        return sort(array, (a, b) => a - b);\n}", "{\n    if\
    \ (array.length == 0)\n        return array;\n    if (array.length == 1)\n   \
    \     return array;\n    if (array[0] + array[array.length - 1] % 2 == 0)\n  \
    \      return array.sort!((a, b) => b - a);\n    else\n        return array.sort!((a,\
    \ b) => a - b);\n}", "{\n    if (array.length == 0)\n        return array;\n \
    \   if (array.length == 1)\n        return array;\n    if (array[0] + array[$-1]\
    \ % 2 == 0)\n        return array.sort(std.numeric.comparison);\n    else\n  \
    \      return array.sort(std.numeric.comparison).reverse();\n}", "{\n    if (array.length\
    \ == 0)\n        return array;\n    else if (array.length == 1)\n        return\
    \ array;\n    else\n    {\n        long[] result = array.dup;\n        if ((result[0]\
    \ + result[$ - 1]) % 2 == 0)\n            result.sort!((a, b) => a > b);\n   \
    \     else\n            result.sort!((a, b) => a < b);\n        return result;\n\
    \    }\n}", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    if (array[0] + array[array.length - 1] % 2\
    \ == 0)\n        return array.sort(std.numeric.comparison);\n    else\n      \
    \  return array.sort(std.numeric.comparison).reverse();\n}", "{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[$-1] % 2 == 0)\n        return array.sort(std.math.greater);\n\
    \    else\n        return array.sort(std.math.less);\n}", "{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[$-1] % 2 == 0)\n        return sort(array, (a, b) =>\
    \ a > b);\n    else\n        return sort(array, (a, b) => a < b);\n}", "{\n  \
    \  if (array.length == 0)\n        return array;\n    if (array.length == 1)\n\
    \        return array;\n    if (array[0] + array[$-1] % 2 == 0)\n        return\
    \ array.sort(std.numeric.comparison);\n    else\n        return array.sort(std.numeric.comparison).reverse();\n\
    }", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    if (array[0] + array[$-1] % 2 == 0)\n    \
    \    return array.sort!((a, b) => b - a);\n    else\n        return array.sort!((a,\
    \ b) => a - b);\n}", "{\n    if (array.length == 0)\n        return array;\n \
    \   if (array.length == 1)\n        return array;\n    if (array[0] + array[$-1]\
    \ % 2 == 0)\n        return array.sort!((a, b) => b - a);\n    else\n        return\
    \ array.sort!((a, b) => a - b);\n}", "{\n    long[] result = array.dup;\n    if\
    \ (result.length == 0)\n        return result;\n    if (result.length == 1)\n\
    \        return result;\n    if (result[0] + result[result.length - 1] % 2 ==\
    \ 0)\n        result.sort!((a, b) => a > b);\n    else\n        result.sort!((a,\
    \ b) => a < b);\n    return result;\n}", "{\n    if (array.length == 0)\n    \
    \    return array;\n    if (array.length == 1)\n        return array;\n    if\
    \ (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort!((a,\
    \ b) => a > b);\n    else\n        return array.sort!((a, b) => a < b);\n}", "{\n\
    \    if (array.length == 0)\n        return array;\n    else if (array.length\
    \ == 1)\n        return array;\n    else\n    {\n        long first = array[0];\n\
    \        long last = array[array.length - 1];\n        if ((first + last) % 2\
    \ == 0)\n        {\n            array = array.sort(std.math.descending);\n   \
    \     }\n        else\n        {\n            array = array.sort(std.math.ascending);\n\
    \        }\n        return array;\n    }\n}", "{\n    if (array.length == 0)\n\
    \        return array;\n    if (array.length == 1)\n        return array;\n  \
    \  if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort!((a,\
    \ b) => a > b);\n    else\n        return array.sort!((a, b) => a < b);\n}", "{\n\
    \    if (array.length == 0)\n        return array;\n    if (array.length == 1)\n\
    \        return array;\n    if (array[0] + array[array.length - 1] % 2 == 0)\n\
    \        return sort(array, std.numeric.cmp.by!((a, b) => b - a));\n    else\n\
    \        return sort(array, std.numeric.cmp.by!((a, b) => a - b));\n}", "{\n \
    \   long[] result = array.dup;\n    if(result.length == 0)\n        return result;\n\
    \    if(result.length == 1)\n        return result;\n    if(result[0] + result[$-1]\
    \ % 2 == 0)\n        sort(result, (a, b) => a > b);\n    else\n        sort(result,\
    \ (a, b) => a < b);\n    return result;\n}", "{\n    if (array.length == 0)\n\
    \        return array;\n    if (array.length == 1)\n        return array;\n  \
    \  if (array[0] + array[$-1] % 2 == 0)\n        return sort(array, (a, b) => b\
    \ - a);\n    else\n        return sort(array, (a, b) => a - b);\n}", "{\n    if\
    \ (array.length == 0)\n        return array;\n    else if (array.length == 1)\n\
    \        return array;\n    else\n    {\n        long first = array[0];\n    \
    \    long last = array[array.length - 1];\n        long sum = first + last;\n\
    \        if (sum % 2 == 0)\n        {\n            return array.sort!((a, b) =>\
    \ a > b);\n        }\n        else\n        {\n            return array.sort!((a,\
    \ b) => a < b);\n        }\n    }\n}", "{\n    if (array.length == 0)\n      \
    \  return array;\n    if (array.length == 1)\n        return array;\n    if (array[0]\
    \ + array[array.length - 1] % 2 == 0)\n        return array.sort(std.math.greater);\n\
    \    else\n        return array.sort();\n}", "{\n    if (array.length == 0)\n\
    \        return array;\n    else if (array.length == 1)\n        return array;\n\
    \    else if (array.length == 2)\n    {\n        if ((array[0] + array[1]) % 2\
    \ == 0)\n        {\n            long temp = array[0];\n            array[0] =\
    \ array[1];\n            array[1] = temp;\n        }\n        return array;\n\
    \    }\n    else\n    {\n        if ((array[0] + array[array.length - 1]) % 2\
    \ == 0)\n        {\n            long temp = array[0];\n            array[0] =\
    \ array[array.length - 1];\n            array[array.length - 1] = temp;\n    \
    \    }\n        return sort_array(array[1..$-1]);\n    }\n}", "{\n    long[] result\
    \ = array.dup;\n    if(array.length == 0 || array.length == 1)\n        return\
    \ result;\n    if((array[0] + array[$-1]) % 2 == 0)\n        sort(result, (a,\
    \ b) => b - a);\n    else\n        sort(result);\n    return result;\n}", "{\n\
    \    if (array.length == 0)\n        return array;\n    if (array.length == 1)\n\
    \        return array;\n    if (array[0] + array[$-1] % 2 == 0)\n        return\
    \ array.sort(std.numeric.comparison);\n    else\n        return array.sort(std.numeric.comparison).reverse();\n\
    }", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    if (array[0] + array[array.length - 1] % 2\
    \ == 0)\n        return array.sort!((a, b) => b - a);\n    else\n        return\
    \ array.sort!((a, b) => a - b);\n}", "{\n    if (array.length == 0)\n        return\
    \ array;\n    if (array.length == 1)\n        return array;\n    if (array[0]\
    \ + array[$-1] % 2 == 0)\n        return sort(array, (a, b) => b - a);\n    else\n\
    \        return sort(array, (a, b) => a - b);\n}", "{\n    if (array.length ==\
    \ 0)\n        return array;\n    else if (array.length == 1)\n        return array;\n\
    \    else if (array.length == 2)\n    {\n        if (array[0] > array[1])\n  \
    \      {\n            long temp = array[0];\n            array[0] = array[1];\n\
    \            array[1] = temp;\n        }\n        return array;\n    }\n    else\n\
    \    {\n        if ((array[0] + array[array.length - 1]) % 2 == 0)\n        {\n\
    \            array = array.sort!((a, b) => a > b);\n        }\n        else\n\
    \        {\n            array = array.sort!((a, b) => a < b);\n        }\n   \
    \     return array;\n    }\n}", "{\n    if (array.length == 0)\n        return\
    \ array;\n    if (array.length == 1)\n        return array;\n    auto sum = array[0]\
    \ + array[$-1];\n    auto is_even = sum % 2 == 0;\n    if (is_even)\n        return\
    \ array.sort!((a, b) => b - a);\n    else\n        return array.sort!((a, b) =>\
    \ a - b);\n}", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    if (array[0] + array[$-1] % 2 == 0)\n    \
    \    return array.sort!((a, b) => a > b);\n    else\n        return array.sort!((a,\
    \ b) => a < b);\n}", "{\n    if (array.length == 0)\n        return array;\n \
    \   if (array.length == 1)\n        return array;\n    if (array[0] + array[array.length\
    \ - 1] % 2 == 0)\n        return array.sort!((a, b) => b - a);\n    else\n   \
    \     return array.sort!((a, b) => a - b);\n}", "{\n    if (array.length == 0)\n\
    \        return array;\n    if (array.length == 1)\n        return array;\n  \
    \  if (array[0] + array[array.length - 1] % 2 == 0)\n        return sort(array,\
    \ (a, b) => a > b);\n    else\n        return sort(array, (a, b) => a < b);\n}",
  "{\n    long[] result = array.dup;\n    if(array.length == 0)\n        return result;\n\
    \    if(array.length == 1)\n        return result;\n    if(array[0] + array[array.length\
    \ - 1] % 2 == 0)\n        result.sort!((a, b) => a > b);\n    else\n        result.sort!((a,\
    \ b) => a < b);\n    return result;\n}", "{\n    if (array.length == 0)\n    \
    \    return array;\n    auto result = array.dup;\n    if ((result[0] + result[$-1])\
    \ % 2 == 0)\n        result.sort!((a, b) => b - a);\n    else\n        result.sort!((a,\
    \ b) => a - b);\n    return result;\n}", "{\n    if (array.length == 0)\n    \
    \    return array;\n    if (array.length == 1)\n        return array;\n    if\
    \ (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort(std.numeric.comparison);\n\
    \    else\n        return array.sort(std.numeric.comparison).reverse();\n}", "{\n\
    \    if (array.length == 0)\n        return array;\n    if (array.length == 1)\n\
    \        return array;\n    if (array[0] + array[$-1] % 2 == 0)\n        return\
    \ array.sort(std.numeric.comparison);\n    else\n        return array.sort(std.numeric.comparison).reverse();\n\
    }", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    if (array[0] + array[array.length - 1] % 2\
    \ == 0)\n        return array.sort(std.numeric.cmp.greater);\n    else\n     \
    \   return array.sort(std.numeric.cmp.less);\n}", "{\n    if (array.length ==\
    \ 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    long sum = array[0] + array[array.length - 1];\n    if (sum % 2 == 0)\n \
    \   {\n        array.sort!((a, b) => b - a);\n    }\n    else\n    {\n       \
    \ array.sort!((a, b) => a - b);\n    }\n    return array;\n}", "{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[$-1] % 2 == 0)\n        return sort(array, (a, b) =>\
    \ a > b);\n    else\n        return sort(array, (a, b) => a < b);\n}", "{\n  \
    \  if (array.length == 0)\n        return array;\n    if (array.length == 1)\n\
    \        return array;\n    if (array[0] + array[array.length - 1] % 2 == 0)\n\
    \        return sort(array, (a, b) => b - a);\n    else\n        return sort(array,\
    \ (a, b) => a - b);\n}", "{\n    if (array.length == 0)\n        return array;\n\
    \    if (array.length == 1)\n        return array;\n    if (array[0] + array[$-1]\
    \ % 2 == 0)\n        return sort(array, (a, b) => a > b);\n    else\n        return\
    \ sort(array, (a, b) => a < b);\n}", "{\n    if (array.length == 0)\n        return\
    \ array;\n    if (array.length == 1)\n        return array;\n    if (array[0]\
    \ + array[$-1] % 2 == 0)\n        return array.sort(std.math.greater);\n    else\n\
    \        return array.sort();\n}", "{\n    if (array.length == 0)\n        return\
    \ array;\n    if (array.length == 1)\n        return array;\n    if (array[0]\
    \ + array[$-1] % 2 == 0)\n        return array.sort!((a, b) => b < a);\n    return\
    \ array.sort!((a, b) => a < b);\n}", "{\n    if (array.length == 0)\n        return\
    \ array;\n    if (array.length == 1)\n        return array;\n    if (array[0]\
    \ + array[$-1] % 2 == 0)\n        return sort(array, (a, b) => a > b);\n    else\n\
    \        return sort(array, (a, b) => a < b);\n}", "{\n    if (array.length ==\
    \ 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[$-1] % 2 == 0)\n        return sort(array, (a, b) =>\
    \ a > b);\n    else\n        return sort(array, (a, b) => a < b);\n}", "{\n  \
    \  long[] result = array.dup;\n    if(array.length == 0)\n        return result;\n\
    \    if(array.length == 1)\n        return result;\n    if(array[0] + array[$-1]\
    \ % 2 == 0)\n        sort!((a, b) => a > b)(result);\n    else\n        sort!((a,\
    \ b) => a < b)(result);\n    return result;\n}", "{\n    if (array.length == 0)\n\
    \        return array;\n    if (array.length == 1)\n        return array;\n  \
    \  if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort!((a,\
    \ b) => b - a);\n    else\n        return array.sort!((a, b) => a - b);\n}", "{\n\
    \    if (array.length == 0)\n        return array;\n    if (array.length == 1)\n\
    \        return array;\n    if (array[0] + array[array.length - 1] % 2 == 0)\n\
    \        return array.sort(std.numeric.comparison);\n    else\n        return\
    \ array.sort(std.numeric.comparison).reverse();\n}", "{\n    if (array.length\
    \ == 0)\n        return array;\n    else if (array.length == 1)\n        return\
    \ array;\n    else\n    {\n        long first = array[0];\n        long last =\
    \ array[array.length - 1];\n        if ((first + last) % 2 == 0)\n        {\n\
    \            array = array.sort!((a, b) => b - a);\n        }\n        else\n\
    \        {\n            array = array.sort!((a, b) => a - b);\n        }\n   \
    \     return array;\n    }\n}", "{\n    if (array.length == 0) return array;\n\
    \    long[] result = array.dup;\n    if ((array[0] + array[$ - 1]) % 2 == 0)\n\
    \    {\n        sort(result, (a, b) => b - a);\n    }\n    else\n    {\n     \
    \   sort(result);\n    }\n    return result;\n}", "{\n    if (array.length ==\
    \ 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort(std.numeric.comparison.greater);\n\
    \    else\n        return array.sort(std.numeric.comparison.less);\n}", "{\n \
    \   if (array.length == 0)\n        return array;\n    if (array.length == 1)\n\
    \        return array;\n    bool is_odd = (array[0] + array[$-1]) % 2 == 1;\n\
    \    if (is_odd)\n        return array.sort();\n    else\n        return array.sort!((a,\
    \ b) => b - a);\n}", "{\n    if (array.length == 0)\n        return array;\n \
    \   if (array.length == 1)\n        return array;\n    if (array[0] + array[array.length\
    \ - 1] % 2 == 0)\n        return array.sort(std.numeric.comparisonFunctor!(\"\
    >\"));\n    else\n        return array.sort(std.numeric.comparisonFunctor!(\"\
    <\"));\n}", "{\n    if (array.length == 0) return array;\n    if (array.length\
    \ == 1) return array;\n    long[] result = array.dup;\n    if ((array[0] + array[$\
    \ - 1]) % 2 == 0)\n    {\n        result.sort!((a, b) => b - a);\n    }\n    else\n\
    \    {\n        result.sort!((a, b) => a - b);\n    }\n    return result;\n}",
  "{\n    if (array.length == 0)\n        return array;\n    if (array.length == 1)\n\
    \        return array;\n    if (array[0] + array[array.length - 1] % 2 == 0)\n\
    \        return array.sort!((a, b) => a > b);\n    else\n        return array.sort!((a,\
    \ b) => a < b);\n}", "{\n    if (array.length == 0)\n        return array;\n \
    \   if (array.length == 1)\n        return array;\n    if (array[0] + array[array.length\
    \ - 1] % 2 == 0)\n        return sort(array, (a, b) => a > b);\n    else\n   \
    \     return sort(array, (a, b) => a < b);\n}", "{\n    if (array.length == 0)\n\
    \        return array;\n    if (array.length == 1)\n        return array;\n  \
    \  if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort!((a,\
    \ b) => a < b);\n    else\n        return array.sort!((a, b) => a > b);\n}", "{\n\
    \    if (array.length == 0)\n        return array;\n    if (array.length == 1)\n\
    \        return array;\n    if (array[0] + array[array.length - 1] % 2 == 0)\n\
    \        return array.sort!((a, b) => b - a);\n    else\n        return array.sort!((a,\
    \ b) => a - b);\n}", "{\n    if (array.length == 0)\n        return array;\n \
    \   if (array.length == 1)\n        return array;\n    if (array[0] + array[array.length\
    \ - 1] % 2 == 0)\n        return array.sort(std.numeric.cmp.greater);\n    else\n\
    \        return array.sort(std.numeric.cmp.less);\n}", "{\n    long[] result =\
    \ array.dup;\n    if(array.length == 0)\n        return result;\n    if(array.length\
    \ == 1)\n        return result;\n    if(array[0] + array[$-1] % 2 == 0)\n    \
    \    result.sort!((a, b) => b - a);\n    else\n        result.sort!((a, b) =>\
    \ a - b);\n    return result;\n}", "{\n    if (array.length == 0)\n        return\
    \ array;\n    else if (array.length == 1)\n        return array;\n    else\n \
    \   {\n        if ((array[0] + array[$-1]) % 2 == 0)\n            return array.sort!((a,\
    \ b) => b - a);\n        else\n            return array.sort!((a, b) => a - b);\n\
    \    }\n}", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    if (array[0] + array[array.length - 1] % 2\
    \ == 0)\n        return array.sort!((a, b) => a > b);\n    else\n        return\
    \ array.sort!((a, b) => a < b);\n}", "{\n    if (array.length == 0)\n        return\
    \ array;\n    if (array.length == 1)\n        return array;\n    if (array[0]\
    \ + array[$-1] % 2 == 0)\n        return array.sort(std.numeric.cmp.descending);\n\
    \    else\n        return array.sort(std.numeric.cmp.ascending);\n}", "{\n   \
    \ if (array.length == 0)\n        return array;\n    else if (array.length ==\
    \ 1)\n        return array;\n    else\n    {\n        if ((array[0] + array[$-1])\
    \ % 2 == 0)\n            return array.sort!((a, b) => b - a);\n        else\n\
    \            return array.sort!((a, b) => a - b);\n    }\n}", "{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[$-1] % 2 == 0)\n        return array.sort!((a, b) =>\
    \ a > b);\n    else\n        return array.sort!((a, b) => a < b);\n}", "{\n  \
    \  if (array.length == 0) return array;\n    if (array.length == 1) return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n    {\n        return array.sort!((a,\
    \ b) => a > b);\n    }\n    else\n    {\n        return array.sort!((a, b) =>\
    \ a < b);\n    }\n}", "{\n    if (array.length == 0)\n        return array;\n\
    \    if (array.length == 1)\n        return array;\n    if (array[0] + array[array.length\
    \ - 1] % 2 == 0)\n        return array.sort!((a, b) => b - a);\n    else\n   \
    \     return array.sort!((a, b) => a - b);\n}", "{\n    if (array.length == 0)\n\
    \        return array;\n    else if (array.length == 1)\n        return array;\n\
    \    else if (array.length == 2)\n    {\n        if ((array[0] + array[1]) % 2\
    \ == 0)\n        {\n            long temp = array[0];\n            array[0] =\
    \ array[1];\n            array[1] = temp;\n        }\n        return array;\n\
    \    }\n    else\n    {\n        long[] temp = new long[array.length];\n     \
    \   long[] temp2 = new long[array.length];\n        long[] temp3 = new long[array.length];\n\
    \        long[] temp4 = new long[array.length];\n        long[] temp5 = new long[array.length];\n\
    \        long[] temp6 = new long[array.length];\n        long[] temp7 = new long[array.length];\n\
    \        long[] temp8 = new long[array.length];\n        long[] temp9 = new long[array.length];\n\
    \        long[] temp10 = new long[array.length];\n        long[] temp11 = new\
    \ long[array.length];\n        long[] temp12 = new long[array.length];\n     \
    \   long[] temp13 = new long[array.length];\n        long[] temp14 = new long[array.length];\n\
    \        long[] temp15 = new long[array.length];\n        long[] temp16 = new\
    \ long[array.length];\n        long[] temp17 = new long[array.length];\n     \
    \   long[] temp18 = new long[array.length];\n        long[] temp19 = new long[array.length];\n\
    \        long[] temp20 = new long[array.length];\n        long[] temp21 = new\
    \ long[array.length];\n        long[] temp22 = new long[array.length];\n     \
    \   long[] temp23 = new long[array.length];\n        long[] temp24 = new long[array.length];\n\
    \        long[] temp25 = new long[array.length];\n        long[] temp26 = new\
    \ long[array.length];\n        long[] temp27 = new long[array.length];\n     \
    \   long[] temp28 = new long[array.length];\n        long[] temp29 =", "{\n  \
    \  if (array.length == 0)\n        return array;\n    if (array.length == 1)\n\
    \        return array;\n    if (array[0] + array[array.length - 1] % 2 == 0)\n\
    \        return array.sort(std.numeric.comparison);\n    else\n        return\
    \ array.sort(std.numeric.comparison).reverse();\n}", "{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort(std.numeric.cmp.greater);\n\
    \    else\n        return array.sort(std.numeric.cmp.less);\n}", "{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort!((a,\
    \ b) => a > b);\n    else\n        return array.sort!((a, b) => a < b);\n}", "{\n\
    \    if (array.length == 0)\n        return array;\n    if (array.length == 1)\n\
    \        return array;\n    bool isOdd = (array[0] + array[array.length - 1])\
    \ % 2 == 1;\n    if (isOdd)\n        return array.sort!((a, b) => a < b);\n  \
    \  else\n        return array.sort!((a, b) => a > b);\n}", "{\n    if (array.length\
    \ == 0) return array;\n    if (array.length == 1) return array;\n    if (array[0]\
    \ + array[array.length - 1] % 2 == 0)\n    {\n        return array.sort!((a, b)\
    \ => b - a);\n    }\n    else\n    {\n        return array.sort!((a, b) => a -\
    \ b);\n    }\n}", "{\n    if (array.length == 0)\n        return array;\n    if\
    \ (array.length == 1)\n        return array;\n    if (array[0] + array[$-1] %\
    \ 2 == 0)\n        return sort(array, (a, b) => a > b);\n    else\n        return\
    \ sort(array, (a, b) => a < b);\n}", "{\n    if (array.length == 0)\n        return\
    \ array;\n    else if (array.length == 1)\n        return array;\n    else if\
    \ (array.length == 2)\n    {\n        if (array[0] > array[1])\n        {\n  \
    \          long temp = array[0];\n            array[0] = array[1];\n         \
    \   array[1] = temp;\n        }\n        return array;\n    }\n    else\n    {\n\
    \        long first = array[0];\n        long last = array[array.length - 1];\n\
    \        if ((first + last) % 2 == 0)\n        {\n            array.sort!((a,\
    \ b) => a < b);\n        }\n        else\n        {\n            array.sort!((a,\
    \ b) => a > b);\n        }\n        return array;\n    }\n}", "{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[$-1] % 2 == 0)\n        return array.sort(std.math.comparator!\"\
    a > b\");\n    else\n        return array.sort(std.math.comparator!\"a < b\");\n\
    }", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    if (array[0] + array[$-1] % 2 == 0)\n    \
    \    return array.sort!((a, b) => a > b);\n    else\n        return array.sort!((a,\
    \ b) => a < b);\n}", "{\n    if (array.length == 0)\n        return array;\n \
    \   if (array.length == 1)\n        return array;\n    if (array[0] + array[$-1]\
    \ % 2 == 0)\n        return array.sort(std.math.greater);\n    else\n        return\
    \ array.sort(std.math.less);\n}", "{\n    long[] result = array.dup;\n    if(result.length\
    \ == 0)\n        return result;\n    if(result.length == 1)\n        return result;\n\
    \    if(result[0] + result[$-1] % 2 == 0)\n        result.sort!((a, b) => a >\
    \ b);\n    else\n        result.sort!((a, b) => a < b);\n    return result;\n}",
  "{\n    if (array.length == 0)\n        return array;\n    if (array.length == 1)\n\
    \        return array;\n    if (array[0] + array[array.length - 1] % 2 == 0)\n\
    \        return sort(array, (a, b) => a > b);\n    else\n        return sort(array,\
    \ (a, b) => a < b);\n}", "{\n    long[] result = array.dup;\n    if (array.length\
    \ == 0)\n        return result;\n    if (array.length == 1)\n        return result;\n\
    \    if (array[0] + array[$ - 1] % 2 == 0)\n        result.sort!((a, b) => a >\
    \ b);\n    else\n        result.sort!((a, b) => a < b);\n    return result;\n}",
  "{\n    if (array.length == 0)\n        return array;\n    if (array.length == 1)\n\
    \        return array;\n    auto sum = array[0] + array[$-1];\n    auto isEven\
    \ = sum % 2 == 0;\n    if (isEven)\n        return array.sort!((a, b) => b - a);\n\
    \    else\n        return array.sort!((a, b) => a - b);\n}", "{\n    if (array.length\
    \ == 0)\n        return array;\n    else if (array.length == 1)\n        return\
    \ array;\n    else if (array.length == 2)\n    {\n        if (array[0] > array[1])\n\
    \        {\n            long temp = array[0];\n            array[0] = array[1];\n\
    \            array[1] = temp;\n        }\n        return array;\n    }\n    else\n\
    \    {\n        long first = array[0];\n        long last = array[array.length\
    \ - 1];\n        if ((first + last) % 2 == 0)\n        {\n            array =\
    \ array.sort!((a, b) => a > b);\n        }\n        else\n        {\n        \
    \    array = array.sort!((a, b) => a < b);\n        }\n        return array;\n\
    \    }\n}", "{\n    if (array.length == 0)\n        return array;\n    else if\
    \ (array.length == 1)\n        return array;\n    else\n    {\n        long[]\
    \ result = new long[array.length];\n        if ((array[0] + array[array.length\
    \ - 1]) % 2 == 0)\n        {\n            sort(array);\n            foreach (i,\
    \ e; array)\n                result[array.length - 1 - i] = e;\n        }\n  \
    \      else\n        {\n            sort(array);\n            foreach (i, e; array)\n\
    \                result[i] = e;\n        }\n        return result;\n    }\n}",
  "{\n    auto result = array.dup;\n    if(array.length == 0)\n        return result;\n\
    \    if(array.length == 1)\n        return result;\n    if(array[0] + array[array.length\
    \ - 1] % 2 == 0)\n        result.sort!((a, b) => a > b);\n    else\n        result.sort!((a,\
    \ b) => a < b);\n    return result;\n}", "{\n    if (array.length == 0)\n    \
    \    return array;\n    if (array.length == 1)\n        return array;\n    if\
    \ (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort!((a,\
    \ b) => b - a);\n    else\n        return array.sort!((a, b) => a - b);\n}", "{\n\
    \    if (array.length == 0)\n        return array;\n    if (array.length == 1)\n\
    \        return array;\n    if (array[0] + array[array.length - 1] % 2 == 0)\n\
    \        return array.sort(std.math.greater);\n    else\n        return array.sort(std.math.less);\n\
    }", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    if (array[0] + array[array.length - 1] % 2\
    \ == 0)\n        return array.sort!((a, b) => a > b);\n    else\n        return\
    \ array.sort!((a, b) => a < b);\n}", "{\n    if (array.length == 0)\n        return\
    \ array;\n    if (array.length == 1)\n        return array;\n    if ((array[0]\
    \ + array[array.length - 1]) % 2 == 0)\n        return array.sort(std.numeric.comparison);\n\
    \    else\n        return array.sort(std.numeric.comparison).reverse();\n}", "{\n\
    \    if (array.length == 0)\n        return array;\n    if (array.length == 1)\n\
    \        return array;\n    auto sum = array[0] + array[$-1];\n    if (sum % 2\
    \ == 0)\n        return array.sort!((a, b) => b - a);\n    else\n        return\
    \ array.sort!((a, b) => a - b);\n}", "{\n    long[] result = array.dup;\n    if(array.length\
    \ > 0)\n    {\n        if((array[0] + array[$-1]) % 2 == 0)\n        {\n     \
    \       result.sort!((a, b) => b - a);\n        }\n        else\n        {\n \
    \           result.sort!((a, b) => a - b);\n        }\n    }\n    return result;\n\
    }", "{\n    if (array.length == 0) return array;\n    if (array.length == 1) return\
    \ array;\n    if (array[0] + array[array.length - 1] % 2 == 0)\n    {\n      \
    \  array.sort!((a, b) => a > b);\n    }\n    else\n    {\n        array.sort!((a,\
    \ b) => a < b);\n    }\n    return array;\n}", "{\n    if (array.length == 0)\n\
    \        return array;\n    if (array.length == 1)\n        return array;\n  \
    \  if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort(std.numeric.cmp.descending);\n\
    \    else\n        return array.sort(std.numeric.cmp.ascending);\n}", "{\n   \
    \ if (array.length == 0)\n        return array;\n    auto sum = array[0] + array[$-1];\n\
    \    if (sum % 2 == 0)\n        return array.sort!((a, b) => b - a);\n    else\n\
    \        return array.sort!((a, b) => a - b);\n}", "{\n    if (array.length ==\
    \ 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort(std.numeric.comparison);\n\
    \    else\n        return array.sort(std.numeric.comparison).reverse();\n}", "{\n\
    \    if (array.length == 0)\n        return array;\n    if (array.length == 1)\n\
    \        return array;\n    if (array[0] + array[array.length - 1] % 2 == 0)\n\
    \        return array.sort!((a, b) => a > b);\n    else\n        return array.sort!((a,\
    \ b) => a < b);\n}", "{\n    if (array.length == 0)\n        return array;\n \
    \   if (array.length == 1)\n        return array;\n    if (array[0] + array[array.length\
    \ - 1] % 2 == 0)\n        return array.sort!((a, b) => a > b);\n    else\n   \
    \     return array.sort!((a, b) => a < b);\n}", "{\n    if (array.length == 0)\n\
    \        return array;\n    else if (array.length == 1)\n        return array;\n\
    \    else\n    {\n        long sum = array[0] + array[array.length - 1];\n   \
    \     if (sum % 2 == 0)\n            return array.sort!((a, b) => a > b);\n  \
    \      else\n            return array.sort!((a, b) => a < b);\n    }\n}", "{\n\
    \    if (array.length == 0)\n        return array;\n    if (array.length == 1)\n\
    \        return array;\n    if (array[0] + array[array.length - 1] % 2 == 0)\n\
    \        return array.sort(std.numeric.comparison);\n    else\n        return\
    \ array.sort(std.numeric.comparison).reverse();\n}", "{\n    auto result = array.dup;\n\
    \    if(array.length > 0)\n    {\n        if((array[0] + array[$-1]) % 2 == 0)\n\
    \        {\n            result.sort!((a, b) => b - a);\n        }\n        else\n\
    \        {\n            result.sort!((a, b) => a - b);\n        }\n    }\n   \
    \ return result;\n}", "{\n    if (array.length == 0)\n        return array;\n\
    \    if (array.length == 1)\n        return array;\n    if (array[0] + array[array.length\
    \ - 1] % 2 == 0)\n        return array.sort!((a, b) => a > b);\n    else\n   \
    \     return array.sort!((a, b) => a < b);\n}", "{\n    if (array.length == 0)\n\
    \        return array;\n    if (array.length == 1)\n        return array;\n  \
    \  if (array[0] + array[array.length - 1] % 2 == 0)\n        return sort(array,\
    \ (a, b) => b - a);\n    else\n        return sort(array, (a, b) => a - b);\n}",
  "{\n    if (array.length == 0)\n        return array;\n    if (array.length == 1)\n\
    \        return array;\n    auto sum = array[0] + array[$-1];\n    auto is_even\
    \ = sum % 2 == 0;\n    if (is_even)\n        return array.sort!((a, b) => b -\
    \ a);\n    else\n        return array.sort!((a, b) => a - b);\n}", "{\n    if\
    \ (array.length == 0)\n        return array;\n    if (array.length == 1)\n   \
    \     return array;\n    if (array[0] + array[array.length - 1] % 2 == 0)\n  \
    \      return array.sort!((a, b) => b - a);\n    else\n        return array.sort!((a,\
    \ b) => a - b);\n}", "{\n    if (array.length == 0)\n        return array;\n \
    \   if (array.length == 1)\n        return array;\n    auto result = array.dup;\n\
    \    if ((array[0] + array[$-1]) % 2 == 0)\n        result.sort!((a, b) => a >\
    \ b);\n    else\n        result.sort!((a, b) => a < b);\n    return result;\n}",
  "{\n    if (array.length == 0)\n        return array;\n    if (array.length == 1)\n\
    \        return array;\n    if (array[0] + array[array.length - 1] % 2 == 0)\n\
    \        return array.sort(std.numeric.comparison);\n    else\n        return\
    \ array.sort(std.numeric.comparison).reverse();\n}", "{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[$-1] % 2 == 0)\n        return array.sort!((a, b) =>\
    \ b - a);\n    else\n        return array.sort!((a, b) => a - b);\n}", "{\n  \
    \  if (array.length == 0)\n        return array;\n    if (array.length == 1)\n\
    \        return array;\n    if (array[0] + array[$-1] % 2 == 0)\n        return\
    \ array.sort(std.math.greater);\n    else\n        return array.sort(std.math.less);\n\
    }", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    if (array[0] + array[array.length - 1] % 2\
    \ == 0)\n        return array.sort!((a, b) => a > b);\n    else\n        return\
    \ array.sort!((a, b) => a < b);\n}", "{\n    if (array.length == 0)\n        return\
    \ array;\n    if (array.length == 1)\n        return array;\n    if (array[0]\
    \ + array[array.length - 1] % 2 == 0)\n        return array.sort(std.numeric.comparison);\n\
    \    else\n        return array.sort(std.numeric.comparison).reverse();\n}", "{\n\
    \    if (array.length == 0)\n        return array;\n    if (array.length == 1)\n\
    \        return array;\n    if (array[0] + array[$-1] % 2 == 0)\n        return\
    \ array.sort(std.math.greater);\n    else\n        return array.sort(std.math.less);\n\
    }", "{\n    if (array.length == 0)\n        return array;\n    else if (array.length\
    \ == 1)\n        return array;\n    else\n    {\n        long first = array[0];\n\
    \        long last = array[array.length - 1];\n        if ((first + last) % 2\
    \ == 0)\n        {\n            array = array.sort!((a, b) => a > b);\n      \
    \      return array;\n        }\n        else\n        {\n            array =\
    \ array.sort!((a, b) => a < b);\n            return array;\n        }\n    }\n\
    }", "{\n    // your code here\n    if(array.length == 0)\n        return array;\n\
    \    if(array.length == 1)\n        return array;\n    if(array[0] + array[array.length\
    \ - 1] % 2 == 0)\n    {\n        array.sort!((a, b) => a > b);\n    }\n    else\n\
    \    {\n        array.sort!((a, b) => a < b);\n    }\n    return array;\n}", "{\n\
    \    long[] sorted_array = array.dup;\n    if (array.length == 0)\n        return\
    \ array;\n    if (array.length == 1)\n        return array;\n    if (array[0]\
    \ + array[$ - 1] % 2 == 0)\n        sorted_array.sort!((a, b) => a < b);\n   \
    \ else\n        sorted_array.sort!((a, b) => a > b);\n    return sorted_array;\n\
    }", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    if (array[0] + array[$-1] % 2 == 0)\n    \
    \    return array.sort!((a, b) => a > b);\n    else\n        return array.sort!((a,\
    \ b) => a < b);\n}", "{\n    if (array.length == 0)\n        return array;\n \
    \   if (array.length == 1)\n        return array;\n    if (array[0] + array[array.length\
    \ - 1] % 2 == 0)\n        return array.sort(std.numeric.comparison);\n    else\n\
    \        return array.sort(std.numeric.comparison).reverse();\n}", "{\n    if\
    \ (array.length == 0)\n        return array;\n    if (array.length == 1)\n   \
    \     return array;\n    if (array[0] + array[array.length - 1] % 2 == 0)\n  \
    \      return array.sort(std.numeric.comparison);\n    else\n        return array.sort(std.numeric.comparison).reverse();\n\
    }", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    if (array[0] + array[$-1] % 2 == 0)\n    \
    \    return array.sort!((a, b) => b - a);\n    else\n        return array.sort!((a,\
    \ b) => a - b);\n}", "{\n    if (array.length == 0)\n        return array;\n \
    \   if (array.length == 1)\n        return array;\n    if (array[0] + array[array.length\
    \ - 1] % 2 == 0)\n        return array.sort(std.numeric.comparison);\n    else\n\
    \        return array.sort(std.numeric.comparison).reverse();\n}", "{\n    if\
    \ (array.length == 0)\n        return array;\n    if (array.length == 1)\n   \
    \     return array;\n    if (array[0] + array[array.length - 1] % 2 == 0)\n  \
    \      return array.sort!((a, b) => a > b);\n    else\n        return array.sort!((a,\
    \ b) => a < b);\n}", "{\n    if (array.length == 0)\n        return array;\n \
    \   if (array.length == 1)\n        return array;\n    if ((array[0] + array[array.length\
    \ - 1]) % 2 == 0)\n    {\n        array.sort!((a, b) => b - a);\n    }\n    else\n\
    \    {\n        array.sort!((a, b) => a - b);\n    }\n    return array;\n}", "{\n\
    \    auto result = array.dup;\n    if(array.length > 0)\n    {\n        auto first\
    \ = array[0];\n        auto last = array[$ - 1];\n        if((first + last) %\
    \ 2 == 0)\n        {\n            result.sort!((a, b) => b - a);\n        }\n\
    \        else\n        {\n            result.sort!((a, b) => a - b);\n       \
    \ }\n    }\n    return result;\n}", "{\n    long[] result = array.dup;\n    if\
    \ (result.length == 0)\n        return result;\n    if (result.length == 1)\n\
    \        return result;\n    if (result[0] + result[$ - 1] % 2 == 0)\n       \
    \ result.sort!((a, b) => b - a);\n    else\n        result.sort!((a, b) => a -\
    \ b);\n    return result;\n}", "{\n    if (array.length == 0)\n        return\
    \ array;\n    if (array.length == 1)\n        return array;\n    if (array[0]\
    \ + array[$-1] % 2 == 0)\n        return sort(array, (a, b) => b - a);\n    else\n\
    \        return sort(array, (a, b) => a - b);\n}", "{\n    if (array.length ==\
    \ 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort!((a,\
    \ b) => a > b);\n    else\n        return array.sort!((a, b) => a < b);\n}", "{\n\
    \    if (array.length == 0)\n        return array;\n    if (array.length == 1)\n\
    \        return array;\n    if (array[0] + array[array.length - 1] % 2 == 0)\n\
    \        return array.sort(std.numeric.comparison);\n    else\n        return\
    \ array.sort(std.numeric.comparison).reverse();\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
