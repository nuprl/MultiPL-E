name: HumanEval_100_make_a_pile
language: d
results:
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n\
    \        result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxdtxm64o.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284a5]\\n??:? void tmpxdtxm64o.__unittest_L27_C1()\
    \ [0x427f6e]\\n??:? void tmpxdtxm64o.__modtest() [0x428228]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c55f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3f2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43067d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b2c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430609]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3c9]\\n??:? runModuleUnitTests [0x42c335]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428968]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288ef]\\n??:? _d_run_main [0x42885a]\\n??:? main [0x42823b]\\\
    n??:? __libc_start_main [0xb6a55554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    for (int i = 0; i < n; i++)\n    {\n        result[i] = n\
    \ + i * 2 + (n % 2 == 0 ? 1 : 0);\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n\
    \    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) ==\
    \ [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L,\
    \ 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpkdiion4l.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42844d]\\n??:? void tmpkdiion4l.__unittest_L26_C1()\
    \ [0x427f8f]\\n??:? void tmpkdiion4l.__modtest() [0x4281d0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c507]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b39a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430625]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ad4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305b1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b371]\\n??:? runModuleUnitTests [0x42c2dd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428910]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428897]\\n??:? _d_run_main [0x428802]\\n??:? main [0x4281e3]\\\
    n??:? __libc_start_main [0x8d10b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_q3aymik.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ad]\\n??:? void tmp_q3aymik.__unittest_L27_C1()\
    \ [0x427f76]\\n??:? void tmp_q3aymik.__modtest() [0x428230]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c567]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430685]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430611]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3d1]\\n??:? runModuleUnitTests [0x42c33d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428970]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288f7]\\n??:? _d_run_main [0x428862]\\n??:? main [0x428243]\\\
    n??:? __libc_start_main [0xe525a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n\
    \        if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n\
    \        else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqyq4n918.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpqyq4n918.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmpqyq4n918.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x4fc19554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n\
    \        else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpzgi2nsn9.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpzgi2nsn9.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmpzgi2nsn9.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x374f2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    long num = n;\n    for (int i = 0; i < n; i++)\n    {\n  \
    \      result[i] = num;\n        if (num % 2 == 0)\n            num++;\n     \
    \   else\n            num += 2;\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n\
    \    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) ==\
    \ [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L,\
    \ 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp054sb3_e.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428445]\\n??:? void tmp054sb3_e.__unittest_L31_C1()\
    \ [0x427f87]\\n??:? void tmp054sb3_e.__modtest() [0x4281c8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4ff]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b392]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43061d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430acc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b369]\\n??:? runModuleUnitTests [0x42c2d5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428908]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42888f]\\n??:? _d_run_main [0x4287fa]\\n??:? main [0x4281db]\\\
    n??:? __libc_start_main [0x61ed3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n\
    \        else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpou27nx40.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpou27nx40.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmpou27nx40.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x51359554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n\
    \        else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmn53vaq3.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpmn53vaq3.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmpmn53vaq3.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0xfb17b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n\
    \        if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n\
    \        else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp35kopivn.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmp35kopivn.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmp35kopivn.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0xf557b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n\
    \        if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n\
    \        else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpbe_s685r.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpbe_s685r.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmpbe_s685r.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x8635e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    for (int i = 0; i < n; i++)\n    {\n        result[i] = n\
    \ + 2 * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n\
    \ + 2 * i + (n % 2);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L)\
    \ == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n\
    \    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L)\
    \ == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqw7bjucr.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42843d]\\n??:? void tmpqw7bjucr.__unittest_L26_C1()\
    \ [0x427f02]\\n??:? void tmpqw7bjucr.__modtest() [0x4281bc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4f7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b38a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430615]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305a1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b361]\\n??:? runModuleUnitTests [0x42c2cd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428900]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428887]\\n??:? _d_run_main [0x4287f2]\\n??:? main [0x4281cf]\\\
    n??:? __libc_start_main [0x74a70554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphbufm36z.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ad]\\n??:? void tmphbufm36z.__unittest_L27_C1()\
    \ [0x427f76]\\n??:? void tmphbufm36z.__modtest() [0x428230]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c567]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430685]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430611]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3d1]\\n??:? runModuleUnitTests [0x42c33d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428970]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288f7]\\n??:? _d_run_main [0x428862]\\n??:? main [0x428243]\\\
    n??:? __libc_start_main [0xa5a00554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    long i = 0;\n    while (i < n)\n    {\n        result[i] =\
    \ n;\n        n = (n % 2 == 0) ? n + 2 : n + 1;\n        i++;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp3o3kqps8.d(23): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4284f6]\\n??:? long[] tmp3o3kqps8.make_a_pile(long) [0x427e43]\\\
    n??:? void tmp3o3kqps8.__unittest_L29_C1() [0x427ea5]\\n??:? void tmp3o3kqps8.__modtest()\
    \ [0x4281c4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4ff]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b392]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43061d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430acc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b369]\\n??:? runModuleUnitTests [0x42c2d5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428908]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42888f]\\n??:? _d_run_main [0x4287fa]\\n??:? main [0x4281d7]\\\
    n??:? __libc_start_main [0xc0f0a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n\
    \        result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmtcxb3fw.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284a5]\\n??:? void tmpmtcxb3fw.__unittest_L27_C1()\
    \ [0x427f6e]\\n??:? void tmpmtcxb3fw.__modtest() [0x428228]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c55f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3f2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43067d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b2c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430609]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3c9]\\n??:? runModuleUnitTests [0x42c335]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428968]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288ef]\\n??:? _d_run_main [0x42885a]\\n??:? main [0x42823b]\\\
    n??:? __libc_start_main [0xa8ec9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       if (n % 2 == 0)\n        {\n            result[i] = result[i-1] + 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + 1;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphugb_kg0.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmphugb_kg0.__unittest_L34_C1()\
    \ [0x427f9e]\\n??:? void tmphugb_kg0.__modtest() [0x428258]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c58f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b422]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306ad]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b5c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430639]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3f9]\\n??:? runModuleUnitTests [0x42c365]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x42826b]\\\
    n??:? __libc_start_main [0x12cd9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n\
    \        else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpgr8_wgol.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpgr8_wgol.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmpgr8_wgol.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x100c4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n\
    \ + 2 * i + (n % 2);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L)\
    \ == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n\
    \    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L)\
    \ == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpan_mqtro.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42843d]\\n??:? void tmpan_mqtro.__unittest_L26_C1()\
    \ [0x427f02]\\n??:? void tmpan_mqtro.__modtest() [0x4281bc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4f7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b38a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430615]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305a1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b361]\\n??:? runModuleUnitTests [0x42c2cd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428900]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428887]\\n??:? _d_run_main [0x4287f2]\\n??:? main [0x4281cf]\\\
    n??:? __libc_start_main [0x7d705554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    for (int i = 0; i < n; i++)\n    {\n        result[i] = n\
    \ + 2 * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    for (int i = 0; i < n; i++)\n    {\n        result[i] = n;\n\
    \        n = (n % 2 == 0) ? n + 2 : n + 1;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L,\
    \ 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpnd0re_cl.d(22): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4284f6]\\n??:? long[] tmpnd0re_cl.make_a_pile(long) [0x427e42]\\\
    n??:? void tmpnd0re_cl.__unittest_L27_C1() [0x427ea5]\\n??:? void tmpnd0re_cl.__modtest()\
    \ [0x4281c4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4ff]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b392]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43061d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430acc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b369]\\n??:? runModuleUnitTests [0x42c2d5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428908]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42888f]\\n??:? _d_run_main [0x4287fa]\\n??:? main [0x4281d7]\\\
    n??:? __libc_start_main [0x202f2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n\
    \ + 2 * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    for (int i = 0; i < n; i++)\n    {\n        result[i] = n\
    \ + 2 * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    long i = 0;\n    while (i < n)\n    {\n        result[i] =\
    \ n;\n        n = n % 2 == 0 ? n + 2 : n + 1;\n        i++;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpgj5nlkao.d(23): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4284f6]\\n??:? long[] tmpgj5nlkao.make_a_pile(long) [0x427e43]\\\
    n??:? void tmpgj5nlkao.__unittest_L29_C1() [0x427ea5]\\n??:? void tmpgj5nlkao.__modtest()\
    \ [0x4281c4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4ff]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b392]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43061d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430acc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b369]\\n??:? runModuleUnitTests [0x42c2d5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428908]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42888f]\\n??:? _d_run_main [0x4287fa]\\n??:? main [0x4281d7]\\\
    n??:? __libc_start_main [0x6d5b0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    for (int i = 0; i < n; i++)\n    {\n        result[i] = n\
    \ + 2 * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    for (int i = 0; i < n; i++)\n    {\n        result[i] = n\
    \ + 2 * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpbb8vxdi6.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ad]\\n??:? void tmpbb8vxdi6.__unittest_L27_C1()\
    \ [0x427f76]\\n??:? void tmpbb8vxdi6.__modtest() [0x428230]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c567]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430685]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430611]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3d1]\\n??:? runModuleUnitTests [0x42c33d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428970]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288f7]\\n??:? _d_run_main [0x428862]\\n??:? main [0x428243]\\\
    n??:? __libc_start_main [0xe5685554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n\
    \        else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpzpjlpsut.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpzpjlpsut.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmpzpjlpsut.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x2673d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n\
    \ + 2*i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n\
    \        if (n % 2 == 0)\n        {\n            result[i] = result[i-1] + 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + 1;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpzg5f93y6.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpzg5f93y6.__unittest_L34_C1()\
    \ [0x427f9e]\\n??:? void tmpzg5f93y6.__modtest() [0x428258]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c58f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b422]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306ad]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b5c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430639]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3f9]\\n??:? runModuleUnitTests [0x42c365]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x42826b]\\\
    n??:? __libc_start_main [0xea600554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    for (int i = 0; i < n; i++)\n    {\n        result[i] = n\
    \ + 2 * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    long i = 0;\n    while (i < n) {\n        result[i] = n;\n\
    \        n = (n % 2 == 0) ? n + 1 : n + 2;\n        i++;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpx2twm_wf.d(22): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4284f6]\\n??:? long[] tmpx2twm_wf.make_a_pile(long) [0x427e43]\\\
    n??:? void tmpx2twm_wf.__unittest_L28_C1() [0x427ea5]\\n??:? void tmpx2twm_wf.__modtest()\
    \ [0x4281c4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4ff]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b392]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43061d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430acc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b369]\\n??:? runModuleUnitTests [0x42c2d5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428908]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42888f]\\n??:? _d_run_main [0x4287fa]\\n??:? main [0x4281d7]\\\
    n??:? __libc_start_main [0xded55554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    long i = 0;\n    long stones = n;\n    while (i < n)\n   \
    \ {\n        result[i] = stones;\n        stones = stones % 2 == 0 ? stones +\
    \ 2 : stones + 1;\n        i++;\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n\
    \    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) ==\
    \ [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L,\
    \ 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpikuk67ss.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428455]\\n??:? void tmpikuk67ss.__unittest_L30_C1()\
    \ [0x427f1a]\\n??:? void tmpikuk67ss.__modtest() [0x4281d4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c50f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3a2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43062d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430adc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305b9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b379]\\n??:? runModuleUnitTests [0x42c2e5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428918]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42889f]\\n??:? _d_run_main [0x42880a]\\n??:? main [0x4281e7]\\\
    n??:? __libc_start_main [0xff7e9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n\
    \ + 2 * i + (n % 2);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L)\
    \ == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n\
    \    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L)\
    \ == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1e3v7f88.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42843d]\\n??:? void tmp1e3v7f88.__unittest_L26_C1()\
    \ [0x427f02]\\n??:? void tmp1e3v7f88.__modtest() [0x4281bc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4f7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b38a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430615]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305a1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b361]\\n??:? runModuleUnitTests [0x42c2cd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428900]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428887]\\n??:? _d_run_main [0x4287f2]\\n??:? main [0x4281cf]\\\
    n??:? __libc_start_main [0x6a678554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n\
    \        if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n\
    \        else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpz3zxcgix.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpz3zxcgix.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmpz3zxcgix.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x8676554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpc973fn09.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ad]\\n??:? void tmpc973fn09.__unittest_L27_C1()\
    \ [0x427f76]\\n??:? void tmpc973fn09.__modtest() [0x428230]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c567]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430685]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430611]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3d1]\\n??:? runModuleUnitTests [0x42c33d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428970]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288f7]\\n??:? _d_run_main [0x428862]\\n??:? main [0x428243]\\\
    n??:? __libc_start_main [0xbb26c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpb5r3u75d.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ad]\\n??:? void tmpb5r3u75d.__unittest_L27_C1()\
    \ [0x427f76]\\n??:? void tmpb5r3u75d.__modtest() [0x428230]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c567]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430685]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430611]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3d1]\\n??:? runModuleUnitTests [0x42c33d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428970]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288f7]\\n??:? _d_run_main [0x428862]\\n??:? main [0x428243]\\\
    n??:? __libc_start_main [0x6bcf3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpnfw_7mpi.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ad]\\n??:? void tmpnfw_7mpi.__unittest_L27_C1()\
    \ [0x427f76]\\n??:? void tmpnfw_7mpi.__modtest() [0x428230]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c567]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430685]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430611]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3d1]\\n??:? runModuleUnitTests [0x42c33d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428970]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288f7]\\n??:? _d_run_main [0x428862]\\n??:? main [0x428243]\\\
    n??:? __libc_start_main [0xbca2d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    for (int i = 0; i < n; i++)\n    {\n        result[i] = n\
    \ + 2 * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n\
    \        result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqygx69a1.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284a5]\\n??:? void tmpqygx69a1.__unittest_L27_C1()\
    \ [0x427f6e]\\n??:? void tmpqygx69a1.__modtest() [0x428228]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c55f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3f2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43067d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b2c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430609]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3c9]\\n??:? runModuleUnitTests [0x42c335]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428968]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288ef]\\n??:? _d_run_main [0x42885a]\\n??:? main [0x42823b]\\\
    n??:? __libc_start_main [0xb6563554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n\
    \        result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpitew61tm.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284a5]\\n??:? void tmpitew61tm.__unittest_L27_C1()\
    \ [0x427f6e]\\n??:? void tmpitew61tm.__modtest() [0x428228]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c55f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3f2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43067d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b2c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430609]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3c9]\\n??:? runModuleUnitTests [0x42c335]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428968]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288ef]\\n??:? _d_run_main [0x42885a]\\n??:? main [0x42823b]\\\
    n??:? __libc_start_main [0x408a7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n\
    \        else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6k_lakgr.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmp6k_lakgr.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmp6k_lakgr.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0xd00c1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpq9d3uxrq.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ad]\\n??:? void tmpq9d3uxrq.__unittest_L27_C1()\
    \ [0x427f76]\\n??:? void tmpq9d3uxrq.__modtest() [0x428230]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c567]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430685]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430611]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3d1]\\n??:? runModuleUnitTests [0x42c33d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428970]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288f7]\\n??:? _d_run_main [0x428862]\\n??:? main [0x428243]\\\
    n??:? __libc_start_main [0xb50b7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n\
    \        if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n\
    \        else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3aclb3ku.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmp3aclb3ku.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmp3aclb3ku.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0xa3abb554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    long stones = n;\n    for (long i = 0; i < n; i++) {\n   \
    \     result[i] = stones;\n        stones = (stones % 2 == 0) ? stones + 2 : stones\
    \ + 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpdq54hpeg.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428455]\\n??:? void tmpdq54hpeg.__unittest_L27_C1()\
    \ [0x427f1a]\\n??:? void tmpdq54hpeg.__modtest() [0x4281d4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c50f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3a2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43062d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430adc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305b9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b379]\\n??:? runModuleUnitTests [0x42c2e5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428918]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42889f]\\n??:? _d_run_main [0x42880a]\\n??:? main [0x4281e7]\\\
    n??:? __libc_start_main [0xc62d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphprawl2g.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ad]\\n??:? void tmphprawl2g.__unittest_L27_C1()\
    \ [0x427f76]\\n??:? void tmphprawl2g.__modtest() [0x428230]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c567]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430685]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430611]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3d1]\\n??:? runModuleUnitTests [0x42c33d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428970]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288f7]\\n??:? _d_run_main [0x428862]\\n??:? main [0x428243]\\\
    n??:? __libc_start_main [0xa0756554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    long i = 0;\n    while (i < n) {\n        result[i] = n;\n\
    \        if (n % 2 == 0) {\n            n += 1;\n        } else {\n          \
    \  n += 2;\n        }\n        i += 1;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L,\
    \ 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpz1s64kqa.d(22): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4284f6]\\n??:? long[] tmpz1s64kqa.make_a_pile(long) [0x427e43]\\\
    n??:? void tmpz1s64kqa.__unittest_L32_C1() [0x427ea9]\\n??:? void tmpz1s64kqa.__modtest()\
    \ [0x4281c8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4ff]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b392]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43061d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430acc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b369]\\n??:? runModuleUnitTests [0x42c2d5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428908]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42888f]\\n??:? _d_run_main [0x4287fa]\\n??:? main [0x4281db]\\\
    n??:? __libc_start_main [0x7a58a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n\
    \        if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n\
    \        else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmps_xycgs8.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmps_xycgs8.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmps_xycgs8.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x88fe2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n\
    \        result[i] = result[i-1] + 2*(i%2) + 1;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L) ==\
    \ [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpv_qjt06d.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42848d]\\n??:? void tmpv_qjt06d.__unittest_L27_C1()\
    \ [0x427f52]\\n??:? void tmpv_qjt06d.__modtest() [0x42820c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c547]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430665]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3b1]\\n??:? runModuleUnitTests [0x42c31d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428950]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288d7]\\n??:? _d_run_main [0x428842]\\n??:? main [0x42821f]\\\
    n??:? __libc_start_main [0x4aa9e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n\
    \        result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpups5djae.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284a5]\\n??:? void tmpups5djae.__unittest_L27_C1()\
    \ [0x427f6e]\\n??:? void tmpups5djae.__modtest() [0x428228]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c55f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3f2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43067d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b2c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430609]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3c9]\\n??:? runModuleUnitTests [0x42c335]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428968]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288ef]\\n??:? _d_run_main [0x42885a]\\n??:? main [0x42823b]\\\
    n??:? __libc_start_main [0xf9bb7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n\
    \        else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpajvs6uy6.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpajvs6uy6.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmpajvs6uy6.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x89fe554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       if (n % 2 == 0)\n        {\n            result[i] = result[i-1] + 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + 1;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpuyiayy0a.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpuyiayy0a.__unittest_L34_C1()\
    \ [0x427f9e]\\n??:? void tmpuyiayy0a.__modtest() [0x428258]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c58f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b422]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306ad]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b5c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430639]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3f9]\\n??:? runModuleUnitTests [0x42c365]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x42826b]\\\
    n??:? __libc_start_main [0x1f2ab554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    long current = n;\n    for (int i = 0; i < n; i++)\n    {\n\
    \        result[i] = current;\n        current = current % 2 == 0 ? current +\
    \ 2 : current + 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L)\
    \ == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n\
    \    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L)\
    \ == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp582ygs29.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428455]\\n??:? void tmp582ygs29.__unittest_L28_C1()\
    \ [0x427f1a]\\n??:? void tmp582ygs29.__modtest() [0x4281d4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c50f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3a2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43062d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430adc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305b9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b379]\\n??:? runModuleUnitTests [0x42c2e5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428918]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42889f]\\n??:? _d_run_main [0x42880a]\\n??:? main [0x4281e7]\\\
    n??:? __libc_start_main [0x3d674554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    long i = 0;\n    while (i < n) {\n        result[i] = n;\n\
    \        n = (n % 2 == 0) ? n + 1 : n + 2;\n        i++;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp03e5czoz.d(22): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4284f6]\\n??:? long[] tmp03e5czoz.make_a_pile(long) [0x427e43]\\\
    n??:? void tmp03e5czoz.__unittest_L28_C1() [0x427ea5]\\n??:? void tmp03e5czoz.__modtest()\
    \ [0x4281c4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4ff]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b392]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43061d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430acc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b369]\\n??:? runModuleUnitTests [0x42c2d5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428908]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42888f]\\n??:? _d_run_main [0x4287fa]\\n??:? main [0x4281d7]\\\
    n??:? __libc_start_main [0xaac7e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpaab52ezb.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ad]\\n??:? void tmpaab52ezb.__unittest_L27_C1()\
    \ [0x427f76]\\n??:? void tmpaab52ezb.__modtest() [0x428230]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c567]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430685]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430611]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3d1]\\n??:? runModuleUnitTests [0x42c33d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428970]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288f7]\\n??:? _d_run_main [0x428862]\\n??:? main [0x428243]\\\
    n??:? __libc_start_main [0x9a056554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    long stones = n;\n    for (int i = 0; i < n; i++)\n    {\n\
    \        result[i] = stones;\n        stones = (stones % 2 == 0) ? stones + 2\
    \ : stones + 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L)\
    \ == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n\
    \    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L)\
    \ == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpk3ckb8tj.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428455]\\n??:? void tmpk3ckb8tj.__unittest_L28_C1()\
    \ [0x427f1a]\\n??:? void tmpk3ckb8tj.__modtest() [0x4281d4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c50f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3a2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43062d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430adc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305b9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b379]\\n??:? runModuleUnitTests [0x42c2e5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428918]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42889f]\\n??:? _d_run_main [0x42880a]\\n??:? main [0x4281e7]\\\
    n??:? __libc_start_main [0x7af7c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n\
    \        else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpwbin1nyr.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpwbin1nyr.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmpwbin1nyr.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0xb2495554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       result[i] = result[i-1] + (i % 2 == 0 ? 2 : 1);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7p99jzzt.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42847d]\\n??:? void tmp7p99jzzt.__unittest_L27_C1()\
    \ [0x427f42]\\n??:? void tmp7p99jzzt.__modtest() [0x4281fc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c537]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3ca]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430655]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b04]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305e1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3a1]\\n??:? runModuleUnitTests [0x42c30d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428940]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288c7]\\n??:? _d_run_main [0x428832]\\n??:? main [0x42820f]\\\
    n??:? __libc_start_main [0xc6a9a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n\
    \ + 2 * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n\
    \        else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjtv3f1es.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpjtv3f1es.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmpjtv3f1es.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0xa3424554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n\
    \        else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6ocgzps4.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmp6ocgzps4.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmp6ocgzps4.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x960d6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n\
    \        else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpo85w0vsd.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpo85w0vsd.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmpo85w0vsd.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x50a4a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    long num = n;\n    for (int i = 0; i < n; i++)\n    {\n  \
    \      result[i] = num;\n        if (num % 2 == 0)\n            num++;\n     \
    \   else\n            num += 2;\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n\
    \    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) ==\
    \ [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L,\
    \ 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpsxnppgh8.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428445]\\n??:? void tmpsxnppgh8.__unittest_L31_C1()\
    \ [0x427f87]\\n??:? void tmpsxnppgh8.__modtest() [0x4281c8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4ff]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b392]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43061d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430acc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b369]\\n??:? runModuleUnitTests [0x42c2d5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428908]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42888f]\\n??:? _d_run_main [0x4287fa]\\n??:? main [0x4281db]\\\
    n??:? __libc_start_main [0x5fdf7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n\
    \ + 2 * i + (n % 2 == 0 ? 1 : 0);\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n\
    \    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) ==\
    \ [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L,\
    \ 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpfz22y9ki.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428445]\\n??:? void tmpfz22y9ki.__unittest_L26_C1()\
    \ [0x427f87]\\n??:? void tmpfz22y9ki.__modtest() [0x4281c8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4ff]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b392]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43061d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430acc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b369]\\n??:? runModuleUnitTests [0x42c2d5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428908]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42888f]\\n??:? _d_run_main [0x4287fa]\\n??:? main [0x4281db]\\\
    n??:? __libc_start_main [0xccdc1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    for (int i = 0; i < n; i++)\n    {\n        result[i] = n\
    \ + 2 * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    for (int i = 0; i < n; i++)\n    {\n        result[i] = n\
    \ + 2 * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n\
    \        else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp28_g8o1c.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmp28_g8o1c.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmp28_g8o1c.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x34cbe554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n\
    \        else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpfvitkhak.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpfvitkhak.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmpfvitkhak.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x31467554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpyczeb9e0.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ad]\\n??:? void tmpyczeb9e0.__unittest_L27_C1()\
    \ [0x427f76]\\n??:? void tmpyczeb9e0.__modtest() [0x428230]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c567]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430685]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430611]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3d1]\\n??:? runModuleUnitTests [0x42c33d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428970]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288f7]\\n??:? _d_run_main [0x428862]\\n??:? main [0x428243]\\\
    n??:? __libc_start_main [0x74d7f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n\
    \ + 2 * i + (n % 2);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L)\
    \ == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n\
    \    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L)\
    \ == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6vuaazan.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42843d]\\n??:? void tmp6vuaazan.__unittest_L26_C1()\
    \ [0x427f02]\\n??:? void tmp6vuaazan.__modtest() [0x4281bc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4f7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b38a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430615]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305a1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b361]\\n??:? runModuleUnitTests [0x42c2cd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428900]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428887]\\n??:? _d_run_main [0x4287f2]\\n??:? main [0x4281cf]\\\
    n??:? __libc_start_main [0xf94e7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n\
    \        else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp9xqlsn14.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmp9xqlsn14.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmp9xqlsn14.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x68850554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxa8ma11d.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ad]\\n??:? void tmpxa8ma11d.__unittest_L27_C1()\
    \ [0x427f76]\\n??:? void tmpxa8ma11d.__modtest() [0x428230]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c567]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430685]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430611]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3d1]\\n??:? runModuleUnitTests [0x42c33d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428970]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288f7]\\n??:? _d_run_main [0x428862]\\n??:? main [0x428243]\\\
    n??:? __libc_start_main [0xf939f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n\
    \ + 2 * i + (n % 2 == 0 ? 1 : 0);\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n\
    \    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) ==\
    \ [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L,\
    \ 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp761i5cpu.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428445]\\n??:? void tmp761i5cpu.__unittest_L26_C1()\
    \ [0x427f87]\\n??:? void tmp761i5cpu.__modtest() [0x4281c8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4ff]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b392]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43061d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430acc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b369]\\n??:? runModuleUnitTests [0x42c2d5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428908]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42888f]\\n??:? _d_run_main [0x4287fa]\\n??:? main [0x4281db]\\\
    n??:? __libc_start_main [0x5090e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n\
    \ + 2 * i + (n % 2);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L)\
    \ == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n\
    \    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L)\
    \ == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp07vxrqpw.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42843d]\\n??:? void tmp07vxrqpw.__unittest_L26_C1()\
    \ [0x427f02]\\n??:? void tmp07vxrqpw.__modtest() [0x4281bc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4f7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b38a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430615]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305a1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b361]\\n??:? runModuleUnitTests [0x42c2cd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428900]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428887]\\n??:? _d_run_main [0x4287f2]\\n??:? main [0x4281cf]\\\
    n??:? __libc_start_main [0x19c60554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    for (int i = 0; i < n; i++)\n    {\n        result[i] = n\
    \ + 2 * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n\
    \        else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpyyh4bjg8.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpyyh4bjg8.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmpyyh4bjg8.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0xb00e4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n\
    \ + 2 * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    long current = n;\n    for (int i = 0; i < n; i++)\n    {\n\
    \        result[i] = current;\n        current = current % 2 == 0 ? current +\
    \ 2 : current + 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L)\
    \ == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n\
    \    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L)\
    \ == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpu_p65xh_.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428455]\\n??:? void tmpu_p65xh_.__unittest_L28_C1()\
    \ [0x427f1a]\\n??:? void tmpu_p65xh_.__modtest() [0x4281d4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c50f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3a2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43062d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430adc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305b9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b379]\\n??:? runModuleUnitTests [0x42c2e5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428918]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42889f]\\n??:? _d_run_main [0x42880a]\\n??:? main [0x4281e7]\\\
    n??:? __libc_start_main [0x185fe554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    for (int i = 0; i < n; i++)\n    {\n        result[i] = n\
    \ + 2 * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n\
    \        else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqpsqyh18.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpqpsqyh18.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmpqpsqyh18.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0xb8316554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       if (n % 2 == 0)\n        {\n            result[i] = result[i-1] + 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + 1;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpq8t3un8d.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpq8t3un8d.__unittest_L34_C1()\
    \ [0x427f9e]\\n??:? void tmpq8t3un8d.__modtest() [0x428258]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c58f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b422]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306ad]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b5c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430639]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3f9]\\n??:? runModuleUnitTests [0x42c365]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x42826b]\\\
    n??:? __libc_start_main [0x9fd52554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n\
    \ + 2 * i + (n % 2 == 0 ? 1 : 0);\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n\
    \    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) ==\
    \ [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L,\
    \ 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpdco6xd9g.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428445]\\n??:? void tmpdco6xd9g.__unittest_L26_C1()\
    \ [0x427f87]\\n??:? void tmpdco6xd9g.__modtest() [0x4281c8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4ff]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b392]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43061d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430acc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b369]\\n??:? runModuleUnitTests [0x42c2d5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428908]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42888f]\\n??:? _d_run_main [0x4287fa]\\n??:? main [0x4281db]\\\
    n??:? __libc_start_main [0xe4f34554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n\
    \ + 2 * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n\
    \ + 2 * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] res = new\
    \ long[n];\n    res[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n       \
    \ if (res[i-1] % 2 == 0)\n            res[i] = res[i-1] + 2;\n        else\n \
    \           res[i] = res[i-1] + 1;\n    }\n    return res;\n}\nunittest\n{\n \
    \   alias candidate = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n\
    \    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) ==\
    \ [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L,\
    \ 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7mwg1u7n.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmp7mwg1u7n.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmp7mwg1u7n.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0xf0c4d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    for (int i = 0; i < n; i++)\n    {\n        result[i] = n\
    \ + 2 * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp51udbf0q.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ad]\\n??:? void tmp51udbf0q.__unittest_L27_C1()\
    \ [0x427f76]\\n??:? void tmp51udbf0q.__modtest() [0x428230]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c567]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430685]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430611]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3d1]\\n??:? runModuleUnitTests [0x42c33d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428970]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288f7]\\n??:? _d_run_main [0x428862]\\n??:? main [0x428243]\\\
    n??:? __libc_start_main [0x96712554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n\
    \ + 2 * i + (n % 2 == 0 ? 1 : 0);\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n\
    \    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) ==\
    \ [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L,\
    \ 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpcy4yo3hq.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428445]\\n??:? void tmpcy4yo3hq.__unittest_L26_C1()\
    \ [0x427f87]\\n??:? void tmpcy4yo3hq.__modtest() [0x4281c8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4ff]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b392]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43061d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430acc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b369]\\n??:? runModuleUnitTests [0x42c2d5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428908]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42888f]\\n??:? _d_run_main [0x4287fa]\\n??:? main [0x4281db]\\\
    n??:? __libc_start_main [0x791d2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n\
    \        else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_mdwm6tz.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmp_mdwm6tz.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmp_mdwm6tz.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0xdd86f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n\
    \        else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmppm01jok3.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmppm01jok3.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmppm01jok3.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0xf055f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n\
    \        if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n\
    \        else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp9i0j6npa.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmp9i0j6npa.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmp9i0j6npa.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x96361554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       if (n % 2 == 0)\n        {\n            result[i] = result[i-1] + 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + 1;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpbaz7tywg.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpbaz7tywg.__unittest_L34_C1()\
    \ [0x427f9e]\\n??:? void tmpbaz7tywg.__modtest() [0x428258]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c58f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b422]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306ad]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b5c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430639]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3f9]\\n??:? runModuleUnitTests [0x42c365]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x42826b]\\\
    n??:? __libc_start_main [0x9ef1e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n\
    \        else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3vc7gb2n.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmp3vc7gb2n.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmp3vc7gb2n.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x410ed554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n\
    \        else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpefrw8qb1.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpefrw8qb1.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmpefrw8qb1.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0xa048b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n\
    \        result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7hxyur8a.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284a5]\\n??:? void tmp7hxyur8a.__unittest_L27_C1()\
    \ [0x427f6e]\\n??:? void tmp7hxyur8a.__modtest() [0x428228]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c55f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3f2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43067d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b2c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430609]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3c9]\\n??:? runModuleUnitTests [0x42c335]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428968]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288ef]\\n??:? _d_run_main [0x42885a]\\n??:? main [0x42823b]\\\
    n??:? __libc_start_main [0xd80cc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n\
    \        result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7xdqnsu0.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284a5]\\n??:? void tmp7xdqnsu0.__unittest_L27_C1()\
    \ [0x427f6e]\\n??:? void tmp7xdqnsu0.__modtest() [0x428228]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c55f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3f2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43067d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b2c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430609]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3c9]\\n??:? runModuleUnitTests [0x42c335]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428968]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288ef]\\n??:? _d_run_main [0x42885a]\\n??:? main [0x42823b]\\\
    n??:? __libc_start_main [0x9952d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       if (n % 2 == 0)\n        {\n            result[i] = result[i-1] + 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + 1;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpn90zw0xl.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpn90zw0xl.__unittest_L34_C1()\
    \ [0x427f9e]\\n??:? void tmpn90zw0xl.__modtest() [0x428258]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c58f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b422]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306ad]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b5c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430639]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3f9]\\n??:? runModuleUnitTests [0x42c365]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x42826b]\\\
    n??:? __libc_start_main [0xafe20554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n\
    \        else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4utre9um.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmp4utre9um.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmp4utre9um.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x7c898554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n\
    \        result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp06l8nsv3.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284a5]\\n??:? void tmp06l8nsv3.__unittest_L27_C1()\
    \ [0x427f6e]\\n??:? void tmp06l8nsv3.__modtest() [0x428228]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c55f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3f2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43067d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b2c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430609]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3c9]\\n??:? runModuleUnitTests [0x42c335]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428968]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288ef]\\n??:? _d_run_main [0x42885a]\\n??:? main [0x42823b]\\\
    n??:? __libc_start_main [0xbc13d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n\
    \        if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n\
    \        else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmptlf29sxg.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmptlf29sxg.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmptlf29sxg.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0xe52da554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n\
    \        result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmppcsztb8o.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284a5]\\n??:? void tmppcsztb8o.__unittest_L27_C1()\
    \ [0x427f6e]\\n??:? void tmppcsztb8o.__modtest() [0x428228]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c55f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3f2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43067d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b2c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430609]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3c9]\\n??:? runModuleUnitTests [0x42c335]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428968]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288ef]\\n??:? _d_run_main [0x42885a]\\n??:? main [0x42823b]\\\
    n??:? __libc_start_main [0xa6d81554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    long stones = n;\n    for (int i = 0; i < n; i++)\n    {\n\
    \        result[i] = stones;\n        stones = stones % 2 == 0 ? stones + 2 :\
    \ stones + 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L)\
    \ == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n\
    \    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L)\
    \ == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpb4v1lbk3.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428455]\\n??:? void tmpb4v1lbk3.__unittest_L28_C1()\
    \ [0x427f1a]\\n??:? void tmpb4v1lbk3.__modtest() [0x4281d4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c50f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3a2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43062d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430adc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305b9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b379]\\n??:? runModuleUnitTests [0x42c2e5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428918]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42889f]\\n??:? _d_run_main [0x42880a]\\n??:? main [0x4281e7]\\\
    n??:? __libc_start_main [0x67714554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpaf6l0x5f.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ad]\\n??:? void tmpaf6l0x5f.__unittest_L27_C1()\
    \ [0x427f76]\\n??:? void tmpaf6l0x5f.__modtest() [0x428230]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c567]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430685]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430611]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3d1]\\n??:? runModuleUnitTests [0x42c33d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428970]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288f7]\\n??:? _d_run_main [0x428862]\\n??:? main [0x428243]\\\
    n??:? __libc_start_main [0xc238e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       if (n % 2 == 0)\n        {\n            result[i] = result[i-1] + 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + 1;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpa_3m74oh.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpa_3m74oh.__unittest_L34_C1()\
    \ [0x427f9e]\\n??:? void tmpa_3m74oh.__modtest() [0x428258]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c58f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b422]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306ad]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b5c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430639]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3f9]\\n??:? runModuleUnitTests [0x42c365]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x42826b]\\\
    n??:? __libc_start_main [0x142c6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n\
    \ + 2 * i + (n % 2 == 0 ? 1 : 0);\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n\
    \    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) ==\
    \ [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L,\
    \ 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3nbqnt0r.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428445]\\n??:? void tmp3nbqnt0r.__unittest_L26_C1()\
    \ [0x427f87]\\n??:? void tmp3nbqnt0r.__modtest() [0x4281c8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4ff]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b392]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43061d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430acc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b369]\\n??:? runModuleUnitTests [0x42c2d5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428908]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42888f]\\n??:? _d_run_main [0x4287fa]\\n??:? main [0x4281db]\\\
    n??:? __libc_start_main [0xc28d3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    for (int i = 0; i < n; i++)\n    {\n        result[i] = n\
    \ + 2 * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n\
    \ + 2 * i + (n % 2 == 0 ? 1 : 0);\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n\
    \    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) ==\
    \ [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L,\
    \ 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpp34umdv8.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428445]\\n??:? void tmpp34umdv8.__unittest_L26_C1()\
    \ [0x427f87]\\n??:? void tmpp34umdv8.__modtest() [0x4281c8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4ff]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b392]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43061d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430acc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b369]\\n??:? runModuleUnitTests [0x42c2d5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428908]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42888f]\\n??:? _d_run_main [0x4287fa]\\n??:? main [0x4281db]\\\
    n??:? __libc_start_main [0x3e3d8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n\
    \        result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmplz8eq0xx.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284a5]\\n??:? void tmplz8eq0xx.__unittest_L27_C1()\
    \ [0x427f6e]\\n??:? void tmplz8eq0xx.__modtest() [0x428228]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c55f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3f2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43067d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b2c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430609]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3c9]\\n??:? runModuleUnitTests [0x42c335]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428968]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288ef]\\n??:? _d_run_main [0x42885a]\\n??:? main [0x42823b]\\\
    n??:? __libc_start_main [0xb20c0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    for (int i = 0; i < n; i++)\n    {\n        result[i] = n\
    \ + (2 * i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L)\
    \ == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n\
    \    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L)\
    \ == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n\
    \        result[i] = result[i-1] + (i%2 == 0 ? 2 : 1);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpnj_ukkt_.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428495]\\n??:? void tmpnj_ukkt_.__unittest_L27_C1()\
    \ [0x427f5a]\\n??:? void tmpnj_ukkt_.__modtest() [0x428214]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c54f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3e2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43066d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b1c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305f9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3b9]\\n??:? runModuleUnitTests [0x42c325]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428958]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288df]\\n??:? _d_run_main [0x42884a]\\n??:? main [0x428227]\\\
    n??:? __libc_start_main [0xf5d1f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    for (int i = 0; i < n; i++)\n    {\n        result[i] = n\
    \ + 2 * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n\
    \        result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphxjozi40.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284a5]\\n??:? void tmphxjozi40.__unittest_L27_C1()\
    \ [0x427f6e]\\n??:? void tmphxjozi40.__modtest() [0x428228]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c55f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3f2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43067d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b2c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430609]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3c9]\\n??:? runModuleUnitTests [0x42c335]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428968]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288ef]\\n??:? _d_run_main [0x42885a]\\n??:? main [0x42823b]\\\
    n??:? __libc_start_main [0xbab86554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpgxmoijzz.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ad]\\n??:? void tmpgxmoijzz.__unittest_L27_C1()\
    \ [0x427f76]\\n??:? void tmpgxmoijzz.__modtest() [0x428230]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c567]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430685]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430611]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3d1]\\n??:? runModuleUnitTests [0x42c33d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428970]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288f7]\\n??:? _d_run_main [0x428862]\\n??:? main [0x428243]\\\
    n??:? __libc_start_main [0x989ef554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n\
    \        result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxjcczpgc.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284a5]\\n??:? void tmpxjcczpgc.__unittest_L27_C1()\
    \ [0x427f6e]\\n??:? void tmpxjcczpgc.__modtest() [0x428228]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c55f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3f2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43067d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b2c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430609]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3c9]\\n??:? runModuleUnitTests [0x42c335]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428968]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288ef]\\n??:? _d_run_main [0x42885a]\\n??:? main [0x42823b]\\\
    n??:? __libc_start_main [0xfa3ac554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n\
    \        if (n % 2 == 0)\n        {\n            result[i] = result[i-1] + 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + 1;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp08kqv9a6.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmp08kqv9a6.__unittest_L34_C1()\
    \ [0x427f9e]\\n??:? void tmp08kqv9a6.__modtest() [0x428258]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c58f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b422]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306ad]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b5c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430639]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3f9]\\n??:? runModuleUnitTests [0x42c365]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x42826b]\\\
    n??:? __libc_start_main [0x7be8c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    for (int i = 0; i < n; i++)\n    {\n        result[i] = n\
    \ + 2 * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n\
    \        else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmps9qkw_o_.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmps9qkw_o_.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmps9qkw_o_.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x452c7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    long i = 0;\n    while (i < n)\n    {\n        result[i] =\
    \ n;\n        if (n % 2 == 0)\n            n += 1;\n        else\n           \
    \ n += 2;\n        i += 1;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n   \
    \ assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L,\
    \ 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n\
    \    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpnjn8czvs.d(23): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4284f6]\\n??:? long[] tmpnjn8czvs.make_a_pile(long) [0x427e43]\\\
    n??:? void tmpnjn8czvs.__unittest_L32_C1() [0x427ea9]\\n??:? void tmpnjn8czvs.__modtest()\
    \ [0x4281c8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4ff]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b392]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43061d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430acc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b369]\\n??:? runModuleUnitTests [0x42c2d5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428908]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42888f]\\n??:? _d_run_main [0x4287fa]\\n??:? main [0x4281db]\\\
    n??:? __libc_start_main [0x9e421554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n\
    \ + 2 * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpb7bpxuhl.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ad]\\n??:? void tmpb7bpxuhl.__unittest_L27_C1()\
    \ [0x427f76]\\n??:? void tmpb7bpxuhl.__modtest() [0x428230]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c567]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430685]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430611]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3d1]\\n??:? runModuleUnitTests [0x42c33d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428970]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288f7]\\n??:? _d_run_main [0x428862]\\n??:? main [0x428243]\\\
    n??:? __libc_start_main [0xc05fa554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n\
    \        else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpko0jioj0.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpko0jioj0.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmpko0jioj0.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x772bf554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n\
    \        result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpz_9xyct9.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284a5]\\n??:? void tmpz_9xyct9.__unittest_L27_C1()\
    \ [0x427f6e]\\n??:? void tmpz_9xyct9.__modtest() [0x428228]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c55f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3f2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43067d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b2c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430609]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3c9]\\n??:? runModuleUnitTests [0x42c335]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428968]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288ef]\\n??:? _d_run_main [0x42885a]\\n??:? main [0x42823b]\\\
    n??:? __libc_start_main [0xfd9ae554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n\
    \        else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpf9pkodms.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpf9pkodms.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmpf9pkodms.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0xb995d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n\
    \ + 2*i + (n % 2 == 0 ? 1 : 0);\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n\
    \    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) ==\
    \ [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L,\
    \ 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpiq8gr731.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428445]\\n??:? void tmpiq8gr731.__unittest_L26_C1()\
    \ [0x427f87]\\n??:? void tmpiq8gr731.__modtest() [0x4281c8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4ff]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b392]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43061d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430acc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b369]\\n??:? runModuleUnitTests [0x42c2d5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428908]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42888f]\\n??:? _d_run_main [0x4287fa]\\n??:? main [0x4281db]\\\
    n??:? __libc_start_main [0xe9f53554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    long current = n;\n    for (int i = 0; i < n; i++)\n    {\n\
    \        result[i] = current;\n        current = current % 2 == 0 ? current +\
    \ 2 : current + 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L)\
    \ == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n\
    \    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L)\
    \ == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4_x8sx2r.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428455]\\n??:? void tmp4_x8sx2r.__unittest_L28_C1()\
    \ [0x427f1a]\\n??:? void tmp4_x8sx2r.__modtest() [0x4281d4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c50f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3a2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43062d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430adc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305b9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b379]\\n??:? runModuleUnitTests [0x42c2e5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428918]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42889f]\\n??:? _d_run_main [0x42880a]\\n??:? main [0x4281e7]\\\
    n??:? __libc_start_main [0x50299554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpli0w_bth.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ad]\\n??:? void tmpli0w_bth.__unittest_L27_C1()\
    \ [0x427f76]\\n??:? void tmpli0w_bth.__modtest() [0x428230]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c567]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430685]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430611]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3d1]\\n??:? runModuleUnitTests [0x42c33d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428970]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288f7]\\n??:? _d_run_main [0x428862]\\n??:? main [0x428243]\\\
    n??:? __libc_start_main [0x865dc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n\
    \        else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5e78t13g.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmp5e78t13g.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmp5e78t13g.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x9fe1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n\
    \ + 2 * i + (n % 2 == 0 ? 1 : 0);\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n\
    \    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) ==\
    \ [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L,\
    \ 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpga644dy7.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428445]\\n??:? void tmpga644dy7.__unittest_L26_C1()\
    \ [0x427f87]\\n??:? void tmpga644dy7.__modtest() [0x4281c8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4ff]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b392]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43061d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430acc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b369]\\n??:? runModuleUnitTests [0x42c2d5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428908]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42888f]\\n??:? _d_run_main [0x4287fa]\\n??:? main [0x4281db]\\\
    n??:? __libc_start_main [0x9597a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n\
    \        result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1h4rr9a9.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284a5]\\n??:? void tmp1h4rr9a9.__unittest_L27_C1()\
    \ [0x427f6e]\\n??:? void tmp1h4rr9a9.__modtest() [0x428228]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c55f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3f2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43067d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b2c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430609]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3c9]\\n??:? runModuleUnitTests [0x42c335]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428968]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288ef]\\n??:? _d_run_main [0x42885a]\\n??:? main [0x42823b]\\\
    n??:? __libc_start_main [0x53a68554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1dkcl2u0.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ad]\\n??:? void tmp1dkcl2u0.__unittest_L27_C1()\
    \ [0x427f76]\\n??:? void tmp1dkcl2u0.__modtest() [0x428230]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c567]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430685]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430611]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3d1]\\n??:? runModuleUnitTests [0x42c33d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428970]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288f7]\\n??:? _d_run_main [0x428862]\\n??:? main [0x428243]\\\
    n??:? __libc_start_main [0x1e3b2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n\
    \        result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3c8ok1vy.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284a5]\\n??:? void tmp3c8ok1vy.__unittest_L27_C1()\
    \ [0x427f6e]\\n??:? void tmp3c8ok1vy.__modtest() [0x428228]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c55f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3f2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43067d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b2c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430609]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3c9]\\n??:? runModuleUnitTests [0x42c335]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428968]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288ef]\\n??:? _d_run_main [0x42885a]\\n??:? main [0x42823b]\\\
    n??:? __libc_start_main [0x1c5e8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n\
    \        if (n % 2 == 0)\n        {\n            result[i] = result[i-1] + 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + 1;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp36s32w02.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmp36s32w02.__unittest_L34_C1()\
    \ [0x427f9e]\\n??:? void tmp36s32w02.__modtest() [0x428258]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c58f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b422]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306ad]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b5c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430639]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3f9]\\n??:? runModuleUnitTests [0x42c365]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x42826b]\\\
    n??:? __libc_start_main [0xf799f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    long num = n;\n    for (int i = 0; i < n; i++)\n    {\n  \
    \      result[i] = num;\n        if (num % 2 == 0)\n            num++;\n     \
    \   else\n            num += 2;\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n\
    \    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) ==\
    \ [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L,\
    \ 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpc3fa60kr.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428445]\\n??:? void tmpc3fa60kr.__unittest_L31_C1()\
    \ [0x427f87]\\n??:? void tmpc3fa60kr.__modtest() [0x4281c8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4ff]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b392]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43061d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430acc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b369]\\n??:? runModuleUnitTests [0x42c2d5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428908]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42888f]\\n??:? _d_run_main [0x4287fa]\\n??:? main [0x4281db]\\\
    n??:? __libc_start_main [0x82926554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    for (int i = 0; i < n; i++)\n    {\n        result[i] = n\
    \ + (i * 2);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L)\
    \ == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n\
    \    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L)\
    \ == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n\
    \        else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxtkikbn3.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpxtkikbn3.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmpxtkikbn3.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0xde3ac554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n\
    \        else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpn9kg9d2a.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpn9kg9d2a.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmpn9kg9d2a.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0xde065554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       if (n % 2 == 0)\n        {\n            result[i] = result[i-1] + 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + 1;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5xgm9glp.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmp5xgm9glp.__unittest_L34_C1()\
    \ [0x427f9e]\\n??:? void tmp5xgm9glp.__modtest() [0x428258]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c58f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b422]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306ad]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b5c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430639]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3f9]\\n??:? runModuleUnitTests [0x42c365]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x42826b]\\\
    n??:? __libc_start_main [0x20f01554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n\
    \ + 2*i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n\
    \ + 2 * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    for (int i = 0; i < n; i++)\n    {\n        result[i] = n\
    \ + (2 * i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L)\
    \ == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n\
    \    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L)\
    \ == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7n92bei5.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ad]\\n??:? void tmp7n92bei5.__unittest_L27_C1()\
    \ [0x427f76]\\n??:? void tmp7n92bei5.__modtest() [0x428230]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c567]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430685]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430611]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3d1]\\n??:? runModuleUnitTests [0x42c33d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428970]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288f7]\\n??:? _d_run_main [0x428862]\\n??:? main [0x428243]\\\
    n??:? __libc_start_main [0x9d7f8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    long stones = n;\n    for (int i = 0; i < n; i++)\n    {\n\
    \        result[i] = stones;\n        stones = (stones % 2 == 0) ? stones + 2\
    \ : stones + 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L)\
    \ == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n\
    \    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L)\
    \ == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp475yb16m.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428455]\\n??:? void tmp475yb16m.__unittest_L28_C1()\
    \ [0x427f1a]\\n??:? void tmp475yb16m.__modtest() [0x4281d4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c50f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3a2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43062d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430adc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305b9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b379]\\n??:? runModuleUnitTests [0x42c2e5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428918]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42889f]\\n??:? _d_run_main [0x42880a]\\n??:? main [0x4281e7]\\\
    n??:? __libc_start_main [0x7a60c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n\
    \        result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpl1ou4aiu.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284a5]\\n??:? void tmpl1ou4aiu.__unittest_L27_C1()\
    \ [0x427f6e]\\n??:? void tmpl1ou4aiu.__modtest() [0x428228]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c55f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3f2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43067d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b2c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430609]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3c9]\\n??:? runModuleUnitTests [0x42c335]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428968]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288ef]\\n??:? _d_run_main [0x42885a]\\n??:? main [0x42823b]\\\
    n??:? __libc_start_main [0xd7756554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n\
    \        if (n % 2 == 0)\n        {\n            result[i] = result[i-1] + 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + 1;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_awqeu6e.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmp_awqeu6e.__unittest_L34_C1()\
    \ [0x427f9e]\\n??:? void tmp_awqeu6e.__modtest() [0x428258]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c58f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b422]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306ad]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b5c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430639]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3f9]\\n??:? runModuleUnitTests [0x42c365]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x42826b]\\\
    n??:? __libc_start_main [0x6eeaa554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n\
    \        if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n\
    \        else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqfzp2b1e.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpqfzp2b1e.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmpqfzp2b1e.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0xa1934554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n\
    \ + 2 * i + (n % 2 == 0 ? 1 : 0);\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n\
    \    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) ==\
    \ [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L,\
    \ 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpdr16j5ti.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428445]\\n??:? void tmpdr16j5ti.__unittest_L26_C1()\
    \ [0x427f87]\\n??:? void tmpdr16j5ti.__modtest() [0x4281c8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4ff]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b392]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43061d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430acc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b369]\\n??:? runModuleUnitTests [0x42c2d5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428908]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42888f]\\n??:? _d_run_main [0x4287fa]\\n??:? main [0x4281db]\\\
    n??:? __libc_start_main [0xee719554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n\
    \        else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqhxd45yd.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpqhxd45yd.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmpqhxd45yd.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0xf4acd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n\
    \        else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp68fkhg9u.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmp68fkhg9u.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmp68fkhg9u.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0xb8757554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpvu4cidej.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ad]\\n??:? void tmpvu4cidej.__unittest_L27_C1()\
    \ [0x427f76]\\n??:? void tmpvu4cidej.__modtest() [0x428230]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c567]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430685]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430611]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3d1]\\n??:? runModuleUnitTests [0x42c33d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428970]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288f7]\\n??:? _d_run_main [0x428862]\\n??:? main [0x428243]\\\
    n??:? __libc_start_main [0xd12a2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpu7gvm7r8.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ad]\\n??:? void tmpu7gvm7r8.__unittest_L27_C1()\
    \ [0x427f76]\\n??:? void tmpu7gvm7r8.__modtest() [0x428230]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c567]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430685]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430611]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3d1]\\n??:? runModuleUnitTests [0x42c33d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428970]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288f7]\\n??:? _d_run_main [0x428862]\\n??:? main [0x428243]\\\
    n??:? __libc_start_main [0x798a8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n\
    \        else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpae6lg98d.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpae6lg98d.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmpae6lg98d.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0xfa2e4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[(int)n];\n    for (int i = 0; i < n; i++) {\n        result[i] = n\
    \ + 2 * i + (n % 2 == 0 ? 1 : 0);\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n\
    \    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) ==\
    \ [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L,\
    \ 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuach0293.d(19): Error: C style cast illegal, use `cast(int)n`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuach0293.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n\
    \        else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_jcdy_a1.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmp_jcdy_a1.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmp_jcdy_a1.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0xfa8b2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n\
    \        else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmptoolfq7k.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmptoolfq7k.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmptoolfq7k.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0xfc139554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n\
    \        if (n % 2 == 0)\n        {\n            result[i] = result[i-1] + 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + 1;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqqrjet02.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpqqrjet02.__unittest_L34_C1()\
    \ [0x427f9e]\\n??:? void tmpqqrjet02.__modtest() [0x428258]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c58f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b422]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306ad]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b5c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430639]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3f9]\\n??:? runModuleUnitTests [0x42c365]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x42826b]\\\
    n??:? __libc_start_main [0x656cd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    long i = 0;\n    while (i < n)\n    {\n        result[i] =\
    \ n;\n        n = (n % 2 == 0) ? n + 2 : n + 1;\n        i++;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpxkwi580m.d(23): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4284f6]\\n??:? long[] tmpxkwi580m.make_a_pile(long) [0x427e43]\\\
    n??:? void tmpxkwi580m.__unittest_L29_C1() [0x427ea5]\\n??:? void tmpxkwi580m.__modtest()\
    \ [0x4281c4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4ff]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b392]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43061d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430acc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b369]\\n??:? runModuleUnitTests [0x42c2d5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428908]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42888f]\\n??:? _d_run_main [0x4287fa]\\n??:? main [0x4281d7]\\\
    n??:? __libc_start_main [0x2188f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n\
    \        result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpkngrfv47.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284a5]\\n??:? void tmpkngrfv47.__unittest_L27_C1()\
    \ [0x427f6e]\\n??:? void tmpkngrfv47.__modtest() [0x428228]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c55f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3f2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43067d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b2c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430609]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3c9]\\n??:? runModuleUnitTests [0x42c335]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428968]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288ef]\\n??:? _d_run_main [0x42885a]\\n??:? main [0x42823b]\\\
    n??:? __libc_start_main [0x4b7f3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n\
    \        else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpq9qv0xun.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpq9qv0xun.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmpq9qv0xun.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x35ef9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpdqew4n4t.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ad]\\n??:? void tmpdqew4n4t.__unittest_L27_C1()\
    \ [0x427f76]\\n??:? void tmpdqew4n4t.__modtest() [0x428230]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c567]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430685]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430611]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3d1]\\n??:? runModuleUnitTests [0x42c33d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428970]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288f7]\\n??:? _d_run_main [0x428862]\\n??:? main [0x428243]\\\
    n??:? __libc_start_main [0xabfac554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp2omzgfiq.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ad]\\n??:? void tmp2omzgfiq.__unittest_L27_C1()\
    \ [0x427f76]\\n??:? void tmp2omzgfiq.__modtest() [0x428230]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c567]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430685]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430611]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3d1]\\n??:? runModuleUnitTests [0x42c33d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428970]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288f7]\\n??:? _d_run_main [0x428862]\\n??:? main [0x428243]\\\
    n??:? __libc_start_main [0x503b8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpkkrarw8i.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ad]\\n??:? void tmpkkrarw8i.__unittest_L27_C1()\
    \ [0x427f76]\\n??:? void tmpkkrarw8i.__modtest() [0x428230]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c567]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430685]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430611]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3d1]\\n??:? runModuleUnitTests [0x42c33d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428970]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288f7]\\n??:? _d_run_main [0x428862]\\n??:? main [0x428243]\\\
    n??:? __libc_start_main [0xf888a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpcc5apvuy.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ad]\\n??:? void tmpcc5apvuy.__unittest_L27_C1()\
    \ [0x427f76]\\n??:? void tmpcc5apvuy.__modtest() [0x428230]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c567]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430685]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430611]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3d1]\\n??:? runModuleUnitTests [0x42c33d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428970]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288f7]\\n??:? _d_run_main [0x428862]\\n??:? main [0x428243]\\\
    n??:? __libc_start_main [0xf75b7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n\
    \        else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpq8qze4ef.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpq8qze4ef.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmpq8qze4ef.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0xf9fb554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n\
    \ + (2 * i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L)\
    \ == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n\
    \    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L)\
    \ == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n\
    \        if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n\
    \        else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp26dm4cxb.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmp26dm4cxb.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmp26dm4cxb.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x31cad554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n\
    \        else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmps9ofsanq.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmps9ofsanq.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmps9ofsanq.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0xcd3d0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n\
    \        else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmph0xd1ezc.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmph0xd1ezc.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmph0xd1ezc.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x6a425554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    for (int i = 0; i < n; i++)\n    {\n        result[i] = n\
    \ + i * 2 + 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L)\
    \ == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n\
    \    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L)\
    \ == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp53mhrrzz.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42842d]\\n??:? void tmp53mhrrzz.__unittest_L26_C1()\
    \ [0x427ef2]\\n??:? void tmp53mhrrzz.__modtest() [0x4281ac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4e7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430605]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430591]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b351]\\n??:? runModuleUnitTests [0x42c2bd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288f0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428877]\\n??:? _d_run_main [0x4287e2]\\n??:? main [0x4281bf]\\\
    n??:? __libc_start_main [0xd7675554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    for (int i = 0; i < n; i++)\n    {\n        result[i] = n\
    \ + 2 * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n\
    \        if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n\
    \        else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0xoinovw.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmp0xoinovw.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmp0xoinovw.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x68c7f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n\
    \        else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpg1knh867.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpg1knh867.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmpg1knh867.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x7c5d2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n\
    \ + 2 * i + (n % 2);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L)\
    \ == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n\
    \    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L)\
    \ == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpngcg0ehf.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42843d]\\n??:? void tmpngcg0ehf.__unittest_L26_C1()\
    \ [0x427f02]\\n??:? void tmpngcg0ehf.__modtest() [0x4281bc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4f7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b38a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430615]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305a1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b361]\\n??:? runModuleUnitTests [0x42c2cd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428900]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428887]\\n??:? _d_run_main [0x4287f2]\\n??:? main [0x4281cf]\\\
    n??:? __libc_start_main [0xff19c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n\
    \ + 2 * i + (n % 2 == 0 ? 1 : 0);\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n\
    \    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) ==\
    \ [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L,\
    \ 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp2wo84c65.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428445]\\n??:? void tmp2wo84c65.__unittest_L26_C1()\
    \ [0x427f87]\\n??:? void tmp2wo84c65.__modtest() [0x4281c8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4ff]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b392]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43061d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430acc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b369]\\n??:? runModuleUnitTests [0x42c2d5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428908]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42888f]\\n??:? _d_run_main [0x4287fa]\\n??:? main [0x4281db]\\\
    n??:? __libc_start_main [0x8c006554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n\
    \        if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n\
    \        else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpwyen65_c.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpwyen65_c.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmpwyen65_c.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0xd7653554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpwl_5g_6r.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ad]\\n??:? void tmpwl_5g_6r.__unittest_L27_C1()\
    \ [0x427f76]\\n??:? void tmpwl_5g_6r.__modtest() [0x428230]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c567]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430685]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430611]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3d1]\\n??:? runModuleUnitTests [0x42c33d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428970]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288f7]\\n??:? _d_run_main [0x428862]\\n??:? main [0x428243]\\\
    n??:? __libc_start_main [0xbd297554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n\
    \        if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n\
    \        else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpvneg101j.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpvneg101j.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmpvneg101j.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x3504554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_hg0d9bc.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ad]\\n??:? void tmp_hg0d9bc.__unittest_L27_C1()\
    \ [0x427f76]\\n??:? void tmp_hg0d9bc.__modtest() [0x428230]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c567]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430685]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430611]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3d1]\\n??:? runModuleUnitTests [0x42c33d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428970]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288f7]\\n??:? _d_run_main [0x428862]\\n??:? main [0x428243]\\\
    n??:? __libc_start_main [0x6e8d6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n\
    \        if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n\
    \        else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpq9up5y2g.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpq9up5y2g.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmpq9up5y2g.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x664da554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    for (int i = 0; i < n; i++)\n    {\n        result[i] = n\
    \ + 2 * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n\
    \        else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3j4i_k3v.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmp3j4i_k3v.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmp3j4i_k3v.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x6b98e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n\
    \ + 2 * i + (n % 2 == 0 ? 1 : 0);\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n\
    \    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) ==\
    \ [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L,\
    \ 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpdlkdz2ph.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428445]\\n??:? void tmpdlkdz2ph.__unittest_L26_C1()\
    \ [0x427f87]\\n??:? void tmpdlkdz2ph.__modtest() [0x4281c8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4ff]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b392]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43061d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430acc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b369]\\n??:? runModuleUnitTests [0x42c2d5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428908]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42888f]\\n??:? _d_run_main [0x4287fa]\\n??:? main [0x4281db]\\\
    n??:? __libc_start_main [0x167bb554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n\
    \ + 2 * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    long stones = n;\n    for (long i = 0; i < n; i++) {\n   \
    \     result[i] = stones;\n        stones = (stones % 2 == 0) ? stones + 2 : stones\
    \ + 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmps8l5ltgz.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428455]\\n??:? void tmps8l5ltgz.__unittest_L27_C1()\
    \ [0x427f1a]\\n??:? void tmps8l5ltgz.__modtest() [0x4281d4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c50f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3a2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43062d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430adc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305b9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b379]\\n??:? runModuleUnitTests [0x42c2e5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428918]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42889f]\\n??:? _d_run_main [0x42880a]\\n??:? main [0x4281e7]\\\
    n??:? __libc_start_main [0xdcd03554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8h7zgn4l.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ad]\\n??:? void tmp8h7zgn4l.__unittest_L27_C1()\
    \ [0x427f76]\\n??:? void tmp8h7zgn4l.__modtest() [0x428230]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c567]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430685]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430611]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3d1]\\n??:? runModuleUnitTests [0x42c33d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428970]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288f7]\\n??:? _d_run_main [0x428862]\\n??:? main [0x428243]\\\
    n??:? __libc_start_main [0x868b4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    long next = n;\n    for (int i = 0; i < n; i++)\n    {\n \
    \       result[i] = next;\n        next += (next % 2 == 0) ? 2 : 1;\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n   \
    \ assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L,\
    \ 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpl5rcua_p.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428445]\\n??:? void tmpl5rcua_p.__unittest_L28_C1()\
    \ [0x427f0e]\\n??:? void tmpl5rcua_p.__modtest() [0x4281c8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4ff]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b392]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43061d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430acc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b369]\\n??:? runModuleUnitTests [0x42c2d5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428908]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42888f]\\n??:? _d_run_main [0x4287fa]\\n??:? main [0x4281db]\\\
    n??:? __libc_start_main [0xfd543554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    long stones = n;\n    for (int i = 0; i < n; i++)\n    {\n\
    \        result[i] = stones;\n        stones = (stones % 2 == 0) ? stones + 2\
    \ : stones + 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L)\
    \ == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n\
    \    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L)\
    \ == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp9mdjblqy.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428455]\\n??:? void tmp9mdjblqy.__unittest_L28_C1()\
    \ [0x427f1a]\\n??:? void tmp9mdjblqy.__modtest() [0x4281d4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c50f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3a2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43062d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430adc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305b9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b379]\\n??:? runModuleUnitTests [0x42c2e5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428918]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42889f]\\n??:? _d_run_main [0x42880a]\\n??:? main [0x4281e7]\\\
    n??:? __libc_start_main [0xe148e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    for (int i = 0; i < n; i++)\n    {\n        result[i] = n\
    \ + 2 * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    for (long i = 0; i < n; i++) {\n        result[i] = n + 2\
    \ * i + (n % 2 == 0 ? 1 : 0);\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n\
    \    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) ==\
    \ [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L,\
    \ 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpw8e_jsrn.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428445]\\n??:? void tmpw8e_jsrn.__unittest_L25_C1()\
    \ [0x427f87]\\n??:? void tmpw8e_jsrn.__modtest() [0x4281c8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4ff]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b392]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43061d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430acc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b369]\\n??:? runModuleUnitTests [0x42c2d5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428908]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42888f]\\n??:? _d_run_main [0x4287fa]\\n??:? main [0x4281db]\\\
    n??:? __libc_start_main [0xa21df554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    long stones = n;\n    for (int i = 0; i < n; i++)\n    {\n\
    \        result[i] = stones;\n        stones = (stones % 2 == 0) ? stones + 2\
    \ : stones + 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L)\
    \ == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n\
    \    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L)\
    \ == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpcuo2nzsx.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428455]\\n??:? void tmpcuo2nzsx.__unittest_L28_C1()\
    \ [0x427f1a]\\n??:? void tmpcuo2nzsx.__modtest() [0x4281d4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c50f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3a2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43062d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430adc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305b9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b379]\\n??:? runModuleUnitTests [0x42c2e5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428918]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42889f]\\n??:? _d_run_main [0x42880a]\\n??:? main [0x4281e7]\\\
    n??:? __libc_start_main [0x5d713554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    for (int i = 0; i < n; i++)\n    {\n        result[i] = n\
    \ + 2 * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = n\
    \ + (i + 1) * 2;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L)\
    \ == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n\
    \    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L)\
    \ == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpx_uas0qb.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42842d]\\n??:? void tmpx_uas0qb.__unittest_L26_C1()\
    \ [0x427ef2]\\n??:? void tmpx_uas0qb.__modtest() [0x4281ac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4e7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430605]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430591]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b351]\\n??:? runModuleUnitTests [0x42c2bd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288f0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428877]\\n??:? _d_run_main [0x4287e2]\\n??:? main [0x4281bf]\\\
    n??:? __libc_start_main [0x44528554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       if (n % 2 == 0)\n        {\n            result[i] = result[i-1] + 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + 1;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpu7mqe__f.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284d5]\\n??:? void tmpu7mqe__f.__unittest_L34_C1()\
    \ [0x427f9e]\\n??:? void tmpu7mqe__f.__modtest() [0x428258]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c58f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b422]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306ad]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b5c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430639]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3f9]\\n??:? runModuleUnitTests [0x42c365]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428998]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42891f]\\n??:? _d_run_main [0x42888a]\\n??:? main [0x42826b]\\\
    n??:? __libc_start_main [0xa5344554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    for (int i = 0; i < n; i++)\n    {\n        result[i] = n\
    \ + 2 * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] res = new\
    \ long[n];\n    res[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n       \
    \ if (res[i-1] % 2 == 0)\n            res[i] = res[i-1] + 2;\n        else\n \
    \           res[i] = res[i-1] + 1;\n    }\n    return res;\n}\nunittest\n{\n \
    \   alias candidate = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n\
    \    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) ==\
    \ [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L,\
    \ 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpz4ekug5s.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpz4ekug5s.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmpz4ekug5s.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x17984554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    long i = 0;\n    while (i < n)\n    {\n        result[i] =\
    \ n;\n        n = (n % 2 == 0) ? n + 2 : n + 1;\n        i++;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp27xa_ult.d(23): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4284f6]\\n??:? long[] tmp27xa_ult.make_a_pile(long) [0x427e43]\\\
    n??:? void tmp27xa_ult.__unittest_L29_C1() [0x427ea5]\\n??:? void tmp27xa_ult.__modtest()\
    \ [0x4281c4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4ff]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b392]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43061d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430acc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b369]\\n??:? runModuleUnitTests [0x42c2d5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428908]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42888f]\\n??:? _d_run_main [0x4287fa]\\n??:? main [0x4281d7]\\\
    n??:? __libc_start_main [0x48ad9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n\
    \        result[i] = result[i-1] + 2*(i%2) + 1;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L) ==\
    \ [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3e69knpd.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42848d]\\n??:? void tmp3e69knpd.__unittest_L27_C1()\
    \ [0x427f52]\\n??:? void tmp3e69knpd.__modtest() [0x42820c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c547]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430665]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3b1]\\n??:? runModuleUnitTests [0x42c31d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428950]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288d7]\\n??:? _d_run_main [0x428842]\\n??:? main [0x42821f]\\\
    n??:? __libc_start_main [0xa412c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    for (int i = 0; i < n; i++)\n    {\n        result[i] = n\
    \ + 2 * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    for (int i = 0; i < n; i++)\n    {\n        result[i] = n\
    \ + 2 * i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n\
    \        else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4a2grqdt.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmp4a2grqdt.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmp4a2grqdt.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x90f01554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n\
    \        else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4o_xqpet.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmp4o_xqpet.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmp4o_xqpet.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0xde016554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n \
    \       result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpamt_dbqc.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ad]\\n??:? void tmpamt_dbqc.__unittest_L27_C1()\
    \ [0x427f76]\\n??:? void tmpamt_dbqc.__modtest() [0x428230]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c567]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430685]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430611]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3d1]\\n??:? runModuleUnitTests [0x42c33d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428970]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288f7]\\n??:? _d_run_main [0x428862]\\n??:? main [0x428243]\\\
    n??:? __libc_start_main [0x39756554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
