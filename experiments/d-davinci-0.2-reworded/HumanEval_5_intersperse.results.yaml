name: HumanEval_5_intersperse
language: d
results:
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[(numbers.length * 2) - 1];\n    int i = 0;\n    foreach (number;\
    \ numbers) {\n        result[i] = number;\n        i += 2;\n    }\n    i = 1;\n\
    \    foreach (number; numbers) {\n        result[i] = delimeter;\n        i +=\
    \ 2;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da6b]\\n??:? _d_newarrayT\
    \ [0x4297f0]\\n??:? long[] tmpoagixpkd.intersperse(long[], long) [0x427e51]\\\
    n??:? void tmpoagixpkd.__unittest_L26_C1() [0x427f7c]\\n??:? void tmpoagixpkd.__modtest()\
    \ [0x4281cc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c52b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3be]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430649]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430af8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305d5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b395]\\n??:? runModuleUnitTests [0x42c301]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428910]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428897]\\n??:? _d_run_main [0x428802]\\n??:? main [0x4281df]\\\
    n??:? __libc_start_main [0x79d3d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers)\n\
    \    {\n        result[2 * i] = number;\n        if (i < numbers.length - 1)\n\
    \            result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmppr1ng_sp.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmppr1ng_sp.__unittest_L22_C1() [0x427f3c]\\n??:? void tmppr1ng_sp.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x4b329554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\
    \ \n    {\n        if (i != 0) \n        {\n            result[i * 2 - 1] = delimeter;\n\
    \        }\n        result[i * 2] = number;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmp1qt0_oxs.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmp1qt0_oxs.__unittest_L24_C1() [0x427f40]\\n??:? void tmp1qt0_oxs.__modtest()\
    \ [0x428190]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x4281a3]\\\
    n??:? __libc_start_main [0x3b1f5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers)\n\
    \    {\n        result[2 * i] = number;\n        if (i < numbers.length - 1)\n\
    \            result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpg14cu3ez.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpg14cu3ez.__unittest_L22_C1() [0x427f3c]\\n??:? void tmpg14cu3ez.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0xdc7ee554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n    {\n        return numbers;\n    }\n    else\n    {\n        long[]\
    \ result = new long[2 * numbers.length - 1];\n        result[0] = numbers[0];\n\
    \        foreach (i, number; numbers[1 .. $])\n        {\n            result[2\
    \ * i] = delimeter;\n            result[2 * i + 1] = number;\n        }\n    \
    \    return result;\n    }\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpprvzbvsq.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428455]\\n??:? void tmpprvzbvsq.__unittest_L29_C1()\
    \ [0x428091]\\n??:? void tmpprvzbvsq.__modtest() [0x4281d8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c533]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430651]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b00]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305dd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b39d]\\n??:? runModuleUnitTests [0x42c309]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428918]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42889f]\\n??:? _d_run_main [0x42880a]\\n??:? main [0x4281eb]\\\
    n??:? __libc_start_main [0xfe4c2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers)\
    \ \n    {\n        result[2 * i] = number;\n        if (i < numbers.length - 1)\
    \ \n        {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n  \
    \  assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpcy9h6ixo.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpcy9h6ixo.__unittest_L24_C1() [0x427f3c]\\n??:? void tmpcy9h6ixo.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x9f4f1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n    {\n        return numbers;\n    }\n    long[] result = new long[2\
    \ * numbers.length - 1];\n    foreach (i, number; numbers)\n    {\n        result[2\
    \ * i] = number;\n        if (i != numbers.length - 1)\n        {\n          \
    \  result[2 * i + 1] = delimeter;\n        }\n    }\n    return result;\n}\n/*\n\
    \    >>> intersperse([], 4.0)\n    []\n    >>> intersperse([1.0, 2.0, 3.0], 4.0)\n\
    \    [1.0, 4.0, 2.0, 4.0, 3.0]\n*/\ndouble[] intersperse(double[] numbers, double\
    \ delimeter) \n{\n    if (numbers.length == 0)\n    {\n        return numbers;\n\
    \    }\n    double[] result = new double[2 * numbers.length - 1];\n    foreach\
    \ (i, number; numbers)\n    {\n        result[2 * i] = number;\n        if (i\
    \ != numbers.length - 1)\n        {\n            result[2 * i + 1] = delimeter;\n\
    \        }\n    }\n    return result;\n}\n/*\n    >>> intersperse([], 4)\n   \
    \ []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n*/\nunittest\n{\n\
    \    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0) \n    {\n        return numbers;\n    }\n    else \n    {\n        long[]\
    \ result = new long[2 * numbers.length - 1];\n        result[0] = numbers[0];\n\
    \        foreach (i, number; numbers[1 .. $]) \n        {\n            result[2\
    \ * i] = delimeter;\n            result[2 * i + 1] = number;\n        }\n    \
    \    return result;\n    }\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpty3fqjkx.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428455]\\n??:? void tmpty3fqjkx.__unittest_L29_C1()\
    \ [0x428091]\\n??:? void tmpty3fqjkx.__modtest() [0x4281d8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c533]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430651]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b00]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305dd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b39d]\\n??:? runModuleUnitTests [0x42c309]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428918]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42889f]\\n??:? _d_run_main [0x42880a]\\n??:? main [0x4281eb]\\\
    n??:? __libc_start_main [0x6e0dc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[];\n    foreach(i, number; numbers)\n    {\n        result\
    \ ~= number;\n        if (i < numbers.length - 1)\n            result ~= delimeter;\n\
    \    }\n    return result;\n}\n/*\n    >>> is_prime(1L)\n    false\n    >>> is_prime(2L)\n\
    \    true\n    >>> is_prime(3L)\n    true\n    >>> is_prime(4L)\n    false\n \
    \   >>> is_prime(5L)\n    true\n    >>> is_prime(6L)\n    false\n    >>> is_prime(7L)\n\
    \    true\n    >>> is_prime(8L)\n    false\n    >>> is_prime(9L)\n    false\n\
    \    >>> is_prime(10L)\n    false\n    >>> is_prime(11L)\n    true\n    >>> is_prime(12L)\n\
    \    false\n    >>> is_prime(13L)\n    true\n    >>> is_prime(14L)\n    false\n\
    \    >>> is_prime(15L)\n    false\n    >>> is_prime(16L)\n    false\n    >>> is_prime(17L)\n\
    \    true\n    >>> is_prime(18L)\n    false\n    >>> is_prime(19L)\n    true\n\
    \    >>> is_prime(20L)\n    false\n    >>> is_prime(21L)\n    false\n    >>> is_prime(22L)\n\
    \    false\n    >>> is_prime(23L)\n    true\n    >>> is_prime(24L)\n    false\n\
    \    >>> is_prime(25L)\n    false\n    >>> is_prime(26L)\n    false\n    >>> is_prime(27L)\n\
    \    false\n    >>> is_prime(28L)\n    false\n    >>> is_prime(29L)\n    true\n\
    \    >>> is_prime(30L)\n    false\n    >>> is_prime(31L)\n    true\n    >>> is_prime(32L)\n\
    \    false\n    >>> is_prime(33L)\n    false\n    >>> is_prime(34L)\n    false\n\
    \    >>> is_\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3hszmtm6.d(22): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3hszmtm6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0) \n    {\n        return [];\n    }\n    else \n    {\n        long[] result\
    \ = new long[2 * numbers.length - 1];\n        result[0] = numbers[0];\n     \
    \   foreach (i, number; numbers[1 .. $]) \n        {\n            result[2 * i]\
    \ = delimeter;\n            result[2 * i + 1] = number;\n        }\n        return\
    \ result;\n    }\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_4xjyx3x.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428465]\\n??:? void tmp_4xjyx3x.__unittest_L29_C1()\
    \ [0x42809d]\\n??:? void tmp_4xjyx3x.__modtest() [0x4281e4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c543]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3d6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430661]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b10]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3ad]\\n??:? runModuleUnitTests [0x42c319]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428928]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288af]\\n??:? _d_run_main [0x42881a]\\n??:? main [0x4281f7]\\\
    n??:? __libc_start_main [0x13b07554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    foreach (i, e; numbers) \n \
    \   {\n        result[2 * i] = e;\n        if (i < numbers.length - 1) \n    \
    \    {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpbbq_vy05.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpbbq_vy05.__unittest_L24_C1() [0x427f3c]\\n??:? void tmpbbq_vy05.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0xc3b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers)\
    \ \n    {\n        result[2 * i] = number;\n        if (i < numbers.length - 1)\
    \ \n        {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n\
    \    return result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L,\
    \ 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers,\
    \ long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n\
    \    foreach (i, number; numbers) \n    {\n        result[2 * i] = number;\n \
    \       if (i < numbers.length - 1) \n        {\n            result[2 * i + 1]\
    \ = delimeter;\n        }\n    }\n    return result;\n}\n/*\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    */\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result\
    \ = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers) \n   \
    \ {\n        result[2 * i] = number;\n        if (i < numbers.length - 1) \n \
    \       {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n    return\
    \ result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L,\
    \ 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers,\
    \ long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n\
    \    foreach (i, number; numbers) \n    {\n\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5kx914yt.d(74): Error: found `unittest` instead of statement\\\
    n/tmp/tmp5kx914yt.d(82): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5kx914yt.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return numbers;\n    else\n    {\n        long[] result = new\
    \ long[2 * numbers.length - 1];\n        result[0] = numbers[0];\n        foreach\
    \ (i, number; numbers[1 .. $])\n        {\n            result[2 * i] = delimeter;\n\
    \            result[2 * i + 1] = number;\n        }\n        return result;\n\
    \    }\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1glsgou2.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428455]\\n??:? void tmp1glsgou2.__unittest_L27_C1()\
    \ [0x428091]\\n??:? void tmp1glsgou2.__modtest() [0x4281d8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c533]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430651]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b00]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305dd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b39d]\\n??:? runModuleUnitTests [0x42c309]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428918]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42889f]\\n??:? _d_run_main [0x42880a]\\n??:? main [0x4281eb]\\\
    n??:? __libc_start_main [0xd1a3f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\
    \ \n    {\n        if (i != 0) \n        {\n            result[i * 2 - 1] = delimeter;\n\
    \        }\n        result[i * 2] = number;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpcfdhhigd.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpcfdhhigd.__unittest_L24_C1() [0x427f40]\\n??:? void tmpcfdhhigd.__modtest()\
    \ [0x428190]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x4281a3]\\\
    n??:? __libc_start_main [0x9faa4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    foreach (n;\
    \ numbers) {\n        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n   \
    \ foreach (n; numbers) {\n        result[i] = delimeter;\n        i += 2;\n  \
    \  }\n    return result[0 .. result.length - 1];\n}\n/*\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    */\nlong[] intersperse2(long[] numbers, long delimeter) \n{\n    long[] result\
    \ = new long[numbers.length * 2 - 1];\n    int i = 0;\n    foreach (n; numbers)\
    \ {\n        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n    foreach (n;\
    \ numbers) {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return\
    \ result[0 .. result.length - 1];\n}\n/*\n    >>> intersperse([], 4L)\n    []\n\
    \    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse3(long[]\
    \ numbers, long delimeter) \n{\n    long[] result = new long[numbers.length *\
    \ 2 - 1];\n    int i = 0;\n    foreach (n; numbers) {\n        result[i] = n;\n\
    \        i += 2;\n    }\n    i = 1;\n    foreach (n; numbers) {\n        result[i]\
    \ = delimeter;\n        i += 2;\n    }\n    return result[0 .. result.length -\
    \ 1];\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L,\
    \ 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptf2kqzy7.d(68): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptf2kqzy7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return [];\n    long[] result = new long[2 * numbers.length -\
    \ 1];\n    result[0] = numbers[0];\n    foreach (i, number; numbers[1 .. $])\n\
    \    {\n        result[2 * i - 1] = delimeter;\n        result[2 * i] = number;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpc9l1h265.d(19): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428516]\\n??:? long[] tmpc9l1h265.intersperse(long[],\
    \ long) [0x427f26]\\n??:? void tmpc9l1h265.__unittest_L24_C1() [0x42801e]\\n??:?\
    \ void tmpc9l1h265.__modtest() [0x4281e4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c543]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3d6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430661]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b10]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3ad]\\n??:? runModuleUnitTests [0x42c319]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428928]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288af]\\n??:? _d_run_main [0x42881a]\\n??:? main [0x4281f7]\\\
    n??:? __libc_start_main [0xa42a9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\
    \ \n    {\n        result[i * 2] = number;\n        if (i != numbers.length -\
    \ 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n  \
    \  assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpy943_bn6.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpy943_bn6.__unittest_L24_C1() [0x427f3c]\\n??:? void tmpy943_bn6.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0xccacc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return [];\n    long[] result = new long[2 * numbers.length -\
    \ 1];\n    result[0] = numbers[0];\n    foreach (i, number; numbers[1 .. $])\n\
    \    {\n        result[2 * i - 1] = delimeter;\n        result[2 * i] = number;\n\
    \    }\n    return result;\n}\n/*\n    >>> intersperse([], 4.0)\n    []\n    >>>\
    \ intersperse([1.0, 2.0, 3.0], 4.0)\n    [1.0, 4.0, 2.0, 4.0, 3.0]\n*/\ndouble[]\
    \ intersperse(double[] numbers, double delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return [];\n    double[] result = new double[2 * numbers.length\
    \ - 1];\n    result[0] = numbers[0];\n    foreach (i, number; numbers[1 .. $])\n\
    \    {\n        result[2 * i - 1] = delimeter;\n        result[2 * i] = number;\n\
    \    }\n    return result;\n}\n/*\n    >>> intersperse([], \"a\")\n    []\n  \
    \  >>> intersperse([\"a\", \"b\", \"c\"], \"d\")\n    [\"a\", \"d\", \"b\", \"\
    d\", \"c\"]\n*/\nstring[] intersperse(string[] strings, string delimeter) \n{\n\
    \    if (strings.length == 0)\n        return [];\n    string[] result = new string[2\
    \ * strings.length - 1];\n    result[0] = strings[0];\n    foreach (i, str; strings[1\
    \ .. $])\n    {\n        result[2 * i - 1] = delimeter;\n        result[2 * i]\
    \ = str;\n    }\n    return result;\n}\n/*\n    >>> intersperse([], true)\n  \
    \  []\n    >>> intersperse([true, false, true], false)\n    [true, false, false,\
    \ false, true]\n*/\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmprmjjzvjn.d(19): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x429cc2]\\n??:? long[] tmprmjjzvjn.intersperse(long[],\
    \ long) [0x428826]\\n??:? void tmprmjjzvjn.__unittest_L68_C1() [0x428c36]\\n??:?\
    \ void tmprmjjzvjn.__modtest() [0x428dfc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ebc3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x4298ee]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b661]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b6f0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b5ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x4298c5]\\n??:? runModuleUnitTests [0x42e999]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a0d4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a05b]\\n??:? _d_run_main [0x429fc6]\\n??:? main [0x428e0f]\\\
    n??:? __libc_start_main [0x8793b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    size_t i = 0;\n    foreach (n;\
    \ numbers)\n    {\n        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n\
    \    foreach (n; numbers[1 .. $])\n    {\n        result[i] = delimeter;\n   \
    \     i += 2;\n    }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n\
    \    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[2 * numbers.length - 1];\n    size_t i = 0;\n    foreach (n; numbers)\n\
    \    {\n        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n    foreach\
    \ (n; numbers[1 .. $])\n    {\n        result[i] = delimeter;\n        i += 2;\n\
    \    }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>>\
    \ intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[]\
    \ numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length\
    \ - 1];\n    size_t i = 0;\n    foreach (n; numbers)\n    {\n        result[i]\
    \ = n;\n        i += 2;\n    }\n    i = 1;\n    foreach (n; numbers[1 .. $])\n\
    \    {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return result;\n\
    }\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L],\
    \ 4L)\n    [1L, 4L, 2L, 4L, 3L\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplhotb8am.d(74): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplhotb8am.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers)\
    \ \n    {\n        result[2 * i] = number;\n        if (i < numbers.length - 1)\
    \ \n        {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n  \
    \  assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmp41hrmfdm.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmp41hrmfdm.__unittest_L24_C1() [0x427f3c]\\n??:? void tmp41hrmfdm.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x82178554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    foreach (number;\
    \ numbers) {\n        result[i] = number;\n        i += 2;\n    }\n    i = 1;\n\
    \    foreach (number; numbers) {\n        result[i] = delimeter;\n        i +=\
    \ 2;\n    }\n    return result[0 .. result.length - 1];\n}\nunittest\n{\n    alias\
    \ candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da8b]\\n??:? _d_newarrayT\
    \ [0x429810]\\n??:? long[] tmp60terbid.intersperse(long[], long) [0x427e51]\\\
    n??:? void tmp60terbid.__unittest_L26_C1() [0x427f9c]\\n??:? void tmp60terbid.__modtest()\
    \ [0x4281ec]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c54b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3de]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430669]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b18]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305f5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3b5]\\n??:? runModuleUnitTests [0x42c321]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428930]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288b7]\\n??:? _d_run_main [0x428822]\\n??:? main [0x4281ff]\\\
    n??:? __libc_start_main [0x4b774554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers)\
    \ \n    {\n        result[2 * i] = number;\n        if (i < numbers.length - 1)\
    \ \n        {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n  \
    \  assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmp4cunq3n4.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmp4cunq3n4.__unittest_L24_C1() [0x427f3c]\\n??:? void tmp4cunq3n4.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x7c1aa554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\
    \ \n    {\n        result[i * 2] = number;\n        if (i != numbers.length -\
    \ 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n    }\n\
    \    return result;\n}\n/*\n    >>> is_prime(1L)\n    false\n    >>> is_prime(2L)\n\
    \    true\n    >>> is_prime(3L)\n    true\n    >>> is_prime(4L)\n    false\n \
    \   >>> is_prime(5L)\n    true\n    >>> is_prime(6L)\n    false\n    >>> is_prime(7L)\n\
    \    true\n    >>> is_prime(8L)\n    false\n    >>> is_prime(9L)\n    false\n\
    \    >>> is_prime(10L)\n    false\n    >>> is_prime(11L)\n    true\n    >>> is_prime(12L)\n\
    \    false\n    >>> is_prime(13L)\n    true\n    >>> is_prime(14L)\n    false\n\
    \    >>> is_prime(15L)\n    false\n    >>> is_prime(16L)\n    false\n    >>> is_prime(17L)\n\
    \    true\n    >>> is_prime(18L)\n    false\n    >>> is_prime(19L)\n    true\n\
    \    >>> is_prime(20L)\n    false\n    >>> is_prime(21L)\n    false\n    >>> is_prime(22L)\n\
    \    false\n    >>> is_prime(23L)\n    true\n    >>> is_prime(24L)\n    false\n\
    \    >>> is_prime(25L)\n    false\n    >>> is_prime(26L)\n    false\n    >>> is_prime(27L)\n\
    \    false\n    >>> is_prime(28L)\n    false\n    >>> is_prime(29L)\n    true\n\
    \    >>> is_prime(30L)\n    false\n    >>> is_prime(31L)\n    true\n    >>> is_prime(32L)\n\
    \    false\n    >>> is_\nunittest\n{\n    alias candidate = intersperse;\n\n \
    \   assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkcspfz8e.d(24): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkcspfz8e.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    for (size_t i = 0; i < numbers.length;\
    \ i++) \n    {\n        result[2 * i] = numbers[i];\n        if (i < numbers.length\
    \ - 1) \n        {\n            result[2 * i + 1] = delimeter;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da33]\\n??:? _d_newarrayT\
    \ [0x4297b8]\\n??:? long[] tmpo5ud69v7.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpo5ud69v7.__unittest_L24_C1() [0x427f44]\\n??:? void tmpo5ud69v7.__modtest()\
    \ [0x428194]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4f3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b386]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430611]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43059d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b35d]\\n??:? runModuleUnitTests [0x42c2c9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42885f]\\n??:? _d_run_main [0x4287ca]\\n??:? main [0x4281a7]\\\
    n??:? __libc_start_main [0x83cf2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers)\
    \ \n    {\n        result[2 * i] = number;\n        if (i != numbers.length -\
    \ 1) \n        {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n  \
    \  assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpw48m9axo.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpw48m9axo.__unittest_L24_C1() [0x427f3c]\\n??:? void tmpw48m9axo.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x7efbd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    for (size_t i = 0; i < numbers.length;\
    \ i++) \n    {\n        result[i * 2] = numbers[i];\n        if (i < numbers.length\
    \ - 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n  \
    \  }\n    return result;\n}\n/*\n    >>> split_by_delimeter([], 4L)\n    []\n\
    \    >>> split_by_delimeter([1L, 2L, 3L], 4L)\n    [[1L, 2L, 3L]]\n    >>> split_by_delimeter([1L,\
    \ 2L, 4L, 3L], 4L)\n    [[1L, 2L], [3L]]\n    >>> split_by_delimeter([1L, 2L,\
    \ 4L, 3L, 4L], 4L)\n    [[1L, 2L], [3L], []]\n*/\nlong[][] split_by_delimeter(long[]\
    \ numbers, long delimeter) \n{\n    long[][] result = new long[][]();\n    long[]\
    \ current_subarray = new long[]();\n    foreach (number; numbers) \n    {\n  \
    \      if (number == delimeter) \n        {\n            result ~= current_subarray;\n\
    \            current_subarray = new long[]();\n        } \n        else \n   \
    \     {\n            current_subarray ~= number;\n        }\n    }\n    result\
    \ ~= current_subarray;\n    return result;\n}\n/*\n    >>> split_by_delimeter([],\
    \ 4L)\n    []\n    >>> split_by_delimeter([1L, 2L, 3L], 4L)\n    [[1L, 2L, 3L]]\n\
    \    >>> split_by_delimeter([1L, 2L, 4L, 3L], 4L)\n    [[1L, 2L], [3L]]\n    >>>\
    \ split_by_delimeter([1L, 2L, 4L, 3L, 4L], 4L)\n    [[1L, 2L], [3L], []]\n*/\n\
    unittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L)\
    \ == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L,\
    \ 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1hqarxg1.d(36): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[][]`\\'s\\n/tmp/tmp1hqarxg1.d(37): Error: new can\
    \ only create structs, dynamic arrays or class objects, not `long[]`\\'s\\n/tmp/tmp1hqarxg1.d(43):\
    \ Error: new can only create structs, dynamic arrays or class objects, not `long[]`\\\
    's\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1hqarxg1.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[(numbers.length * 2) - 1];\n    for (long i = 0; i < numbers.length;\
    \ i++) \n    {\n        result[i * 2] = numbers[i];\n        if (i < numbers.length\
    \ - 1) \n        {\n            result[(i * 2) + 1] = delimeter;\n        }\n\
    \    }\n    return result;\n}\n/*\n    >>> is_prime(1L)\n    false\n    >>> is_prime(2L)\n\
    \    true\n    >>> is_prime(3L)\n    true\n    >>> is_prime(4L)\n    false\n \
    \   >>> is_prime(5L)\n    true\n    >>> is_prime(6L)\n    false\n    >>> is_prime(7L)\n\
    \    true\n    >>> is_prime(8L)\n    false\n    >>> is_prime(9L)\n    false\n\
    \    >>> is_prime(10L)\n    false\n    >>> is_prime(11L)\n    true\n    >>> is_prime(12L)\n\
    \    false\n    >>> is_prime(13L)\n    true\n    >>> is_prime(14L)\n    false\n\
    \    >>> is_prime(15L)\n    false\n    >>> is_prime(16L)\n    false\n    >>> is_prime(17L)\n\
    \    true\n    >>> is_prime(18L)\n    false\n    >>> is_prime(19L)\n    true\n\
    \    >>> is_prime(20L)\n    false\n    >>> is_prime(21L)\n    false\n    >>> is_prime(22L)\n\
    \    false\n    >>> is_prime(23L)\n    true\n    >>> is_prime(24L)\n    false\n\
    \    >>> is_prime(25L)\n    false\n    >>> is_prime(26L)\n    false\n    >>> is_prime(27L)\n\
    \    false\n    >>> is_prime(28L)\n    false\n    >>> is_prime(29L)\n    true\n\
    \    >>> is_prime(30L)\n    false\n    >>> is_prime(31L)\n    true\n    >>> is_prime\n\
    unittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L)\
    \ == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L,\
    \ 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpptj6cozz.d(24): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpptj6cozz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    for (size_t i = 0; i < numbers.length;\
    \ i++) \n    {\n        result[2 * i] = numbers[i];\n        if (i != numbers.length\
    \ - 1) \n        {\n            result[2 * i + 1] = delimeter;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da33]\\n??:? _d_newarrayT\
    \ [0x4297b8]\\n??:? long[] tmpiwxspyk2.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpiwxspyk2.__unittest_L24_C1() [0x427f44]\\n??:? void tmpiwxspyk2.__modtest()\
    \ [0x428194]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4f3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b386]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430611]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43059d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b35d]\\n??:? runModuleUnitTests [0x42c2c9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42885f]\\n??:? _d_run_main [0x4287ca]\\n??:? main [0x4281a7]\\\
    n??:? __libc_start_main [0x4e925554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0) \n    {\n        return numbers;\n    }\n    long[] result = new long[2\
    \ * numbers.length - 1];\n    foreach (i, number; numbers) \n    {\n        result[2\
    \ * i] = number;\n        if (i < numbers.length - 1) \n        {\n          \
    \  result[2 * i + 1] = delimeter;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\
    \ \n    {\n        result[i * 2] = number;\n        if (i != numbers.length -\
    \ 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n  \
    \  assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpr_pbow57.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpr_pbow57.__unittest_L24_C1() [0x427f3c]\\n??:? void tmpr_pbow57.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x57a38554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    foreach (i, e; numbers)\n  \
    \  {\n        result[2 * i] = e;\n        if (i < numbers.length - 1)\n      \
    \      result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\n/*\n    >>>\
    \ split([], 4L)\n    []\n    >>> split([1L, 2L, 3L], 4L)\n    [[1L, 2L, 3L]]\n\
    \    >>> split([1L, 2L, 4L, 3L], 4L)\n    [[1L, 2L], [3L]]\n    >>> split([1L,\
    \ 2L, 4L, 4L, 3L], 4L)\n    [[1L, 2L], [], [3L]]\n    >>> split([1L, 2L, 4L, 4L,\
    \ 4L, 3L], 4L)\n    [[1L, 2L], [], [], [3L]]\n*/\nlong[][] split(long[] numbers,\
    \ long delimeter) \n{\n    long[][] result = new long[][];\n    long[] current\
    \ = new long[];\n    foreach (e; numbers)\n    {\n        if (e == delimeter)\n\
    \        {\n            result ~= current;\n            current = new long[];\n\
    \        }\n        else\n        {\n            current ~= e;\n        }\n  \
    \  }\n    result ~= current;\n    return result;\n}\n/*\n    >>> split([], 4L)\n\
    \    []\n    >>> split([1L, 2L, 3L], 4L)\n    [[1L, 2L, 3L]]\n    >>> split([1L,\
    \ 2L, 4L, 3L], 4L)\n    [[1L, 2L], [3L]]\n    >>> split([1L, 2L, 4L, 4L, 3L],\
    \ 4L)\n    [[1L, 2L], [], [3L]]\n    >>> split([1L, 2L, 4L, 4L, 4L, 3L], 4L)\n\
    \    [[1L, 2L], [], [], [3L]]\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbbajvx24.d(53): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbbajvx24.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return [];\n    long[] result = new long[2 * numbers.length -\
    \ 1];\n    result[0] = numbers[0];\n    foreach (i, n; numbers[1 .. $]) {\n  \
    \      result[2 * i] = delimeter;\n        result[2 * i + 1] = n;\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpv10yg5tt.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428465]\\n??:? void tmpv10yg5tt.__unittest_L23_C1()\
    \ [0x42809d]\\n??:? void tmpv10yg5tt.__modtest() [0x4281e4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c543]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3d6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430661]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b10]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3ad]\\n??:? runModuleUnitTests [0x42c319]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428928]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288af]\\n??:? _d_run_main [0x42881a]\\n??:? main [0x4281f7]\\\
    n??:? __libc_start_main [0x42694554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    for (long i = 0; i < numbers.length;\
    \ i++)\n    {\n        result[i * 2] = numbers[i];\n        if (i < numbers.length\
    \ - 1)\n            result[i * 2 + 1] = delimeter;\n    }\n    return result;\n\
    }\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L],\
    \ 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse2(long[] numbers, long\
    \ delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    foreach\
    \ (i, ref x; numbers)\n    {\n        result[i * 2] = x;\n        if (i < numbers.length\
    \ - 1)\n            result[i * 2 + 1] = delimeter;\n    }\n    return result;\n\
    }\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L],\
    \ 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse3(long[] numbers, long\
    \ delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    foreach\
    \ (i, ref x; numbers)\n    {\n        result[i * 2] = x;\n        if (i < numbers.length\
    \ - 1)\n            result[i * 2 + 1] = delimeter;\n    }\n    return result;\n\
    }\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L],\
    \ 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse4(long[] numbers, long\
    \ delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    foreach\
    \ (i, ref x; numbers)\n    {\n        result[i * 2]\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvjt2gdlo.d(68): Error: found `unittest` when expecting `;` following\
    \ statement\\n/tmp/tmpvjt2gdlo.d(76): Error: found `End of File` when expecting\
    \ `}` following compound statement\\n/tmp/tmpvjt2gdlo.d(76): Error: found `End\
    \ of File` when expecting `}` following compound statement\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvjt2gdlo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0) \n    {\n        return numbers;\n    }\n    else \n    {\n        long[]\
    \ result = new long[2 * numbers.length - 1];\n        result[0] = numbers[0];\n\
    \        foreach (i, number; numbers[1 .. $]) \n        {\n            result[2\
    \ * i] = delimeter;\n            result[2 * i + 1] = number;\n        }\n    \
    \    return result;\n    }\n}\n/*\n    >>> is_prime(0L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    >>> is_prime(2L)\n    true\n    >>> is_prime(3L)\n    true\n \
    \   >>> is_prime(4L)\n    false\n    >>> is_prime(5L)\n    true\n    >>> is_prime(6L)\n\
    \    false\n    >>> is_prime(7L)\n    true\n    >>> is_prime(8L)\n    false\n\
    \    >>> is_prime(9L)\n    false\n    >>> is_prime(10L)\n    false\n    >>> is_prime(11L)\n\
    \    true\n    >>> is_prime(12L)\n    false\n    >>> is_prime(13L)\n    true\n\
    \    >>> is_prime(14L)\n    false\n    >>> is_prime(15L)\n    false\n    >>> is_prime(16L)\n\
    \    false\n    >>> is_prime(17L)\n    true\n    >>> is_prime(18L)\n    false\n\
    \    >>> is_prime(19L)\n    true\n    >>> is_prime(20L)\n    false\n    >>> is_prime(21L)\n\
    \    false\n    >>> is_prime(22L)\n    false\n    >>> is_prime(23L)\n    true\n\
    \    >>> is_prime(24L)\n    false\n    >>> is_prime(25L)\n    false\n    >>> is_prime(26L)\n\
    \    false\n    >>> is_prime(27L)\n    false\n    >>> is_prime(28L)\n    false\n\
    \    >>> is_prime(29L)\n    true\n    >>>\nunittest\n{\n    alias candidate =\
    \ intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5xhe3l0l.d(29): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5xhe3l0l.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    foreach (n;\
    \ numbers) {\n        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n   \
    \ foreach (n; numbers) {\n        result[i] = delimeter;\n        i += 2;\n  \
    \  }\n    return result[0 .. $ - 1];\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da8b]\\n??:? _d_newarrayT\
    \ [0x429810]\\n??:? long[] tmptepd3mk5.intersperse(long[], long) [0x427e51]\\\
    n??:? void tmptepd3mk5.__unittest_L26_C1() [0x427f9c]\\n??:? void tmptepd3mk5.__modtest()\
    \ [0x4281ec]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c54b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3de]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430669]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b18]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305f5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3b5]\\n??:? runModuleUnitTests [0x42c321]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428930]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288b7]\\n??:? _d_run_main [0x428822]\\n??:? main [0x4281ff]\\\
    n??:? __libc_start_main [0x8658f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n\tlong[] result\
    \ = new long[2 * numbers.length - 1];\n\tfor (int i = 0; i < numbers.length; i++)\
    \ \n\t{\n\t\tresult[2 * i] = numbers[i];\n\t\tif (i < numbers.length - 1) \n\t\
    \t{\n\t\t\tresult[2 * i + 1] = delimeter;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da33]\\n??:? _d_newarrayT\
    \ [0x4297b8]\\n??:? long[] tmpa0xkzbpe.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpa0xkzbpe.__unittest_L24_C1() [0x427f44]\\n??:? void tmpa0xkzbpe.__modtest()\
    \ [0x428194]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4f3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b386]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430611]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43059d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b35d]\\n??:? runModuleUnitTests [0x42c2c9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42885f]\\n??:? _d_run_main [0x4287ca]\\n??:? main [0x4281a7]\\\
    n??:? __libc_start_main [0x9943554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers)\n\
    \    {\n        result[2 * i] = number;\n        if (i < numbers.length - 1)\n\
    \            result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpp6fxkhz4.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpp6fxkhz4.__unittest_L22_C1() [0x427f3c]\\n??:? void tmpp6fxkhz4.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x1f622554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\
    \ \n    {\n        if (i != 0) \n        {\n            result[i * 2 - 1] = delimeter;\n\
    \        }\n        result[i * 2] = number;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmplj3yrzyw.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmplj3yrzyw.__unittest_L24_C1() [0x427f40]\\n??:? void tmplj3yrzyw.__modtest()\
    \ [0x428190]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x4281a3]\\\
    n??:? __libc_start_main [0x80255554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers)\n\
    \    {\n        result[2 * i] = number;\n        if (i < numbers.length - 1)\n\
    \            result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\n/*\n\
    \    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n\
    \    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter)\
    \ \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i,\
    \ number; numbers)\n    {\n        result[2 * i] = number;\n        if (i < numbers.length\
    \ - 1)\n            result[2 * i + 1] = delimeter;\n    }\n    return result;\n\
    }\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L],\
    \ 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter)\
    \ \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i,\
    \ number; numbers)\n    {\n        result[2 * i] = number;\n        if (i < numbers.length\
    \ - 1)\n            result[2 * i + 1] = delimeter;\n    }\n    return result;\n\
    }\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L],\
    \ 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter)\
    \ \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i,\
    \ number; numbers)\n    {\n        result[2 * i] = number;\n        if (i < numbers.length\
    \ - 1)\n            result\nunittest\n{\n    alias candidate = intersperse;\n\n\
    \    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoq2tmm0b.d(70): Error: found `unittest` when expecting `;` following\
    \ statement\\n/tmp/tmpoq2tmm0b.d(78): Error: found `End of File` when expecting\
    \ `}` following compound statement\\n/tmp/tmpoq2tmm0b.d(78): Error: found `End\
    \ of File` when expecting `}` following compound statement\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoq2tmm0b.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return [];\n    long[] result = new long[2 * numbers.length -\
    \ 1];\n    result[0] = numbers[0];\n    foreach (i, number; numbers[1 .. $]) {\n\
    \        result[2 * i - 1] = delimeter;\n        result[2 * i] = number;\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n\
    \    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp4nsr9fbq.d(18): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428516]\\n??:? long[] tmp4nsr9fbq.intersperse(long[],\
    \ long) [0x427f26]\\n??:? void tmp4nsr9fbq.__unittest_L23_C1() [0x42801e]\\n??:?\
    \ void tmp4nsr9fbq.__modtest() [0x4281e4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c543]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3d6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430661]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b10]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3ad]\\n??:? runModuleUnitTests [0x42c319]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428928]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288af]\\n??:? _d_run_main [0x42881a]\\n??:? main [0x4281f7]\\\
    n??:? __libc_start_main [0xda857554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[(numbers.length * 2) - 1];\n    int i = 0;\n    foreach (n;\
    \ numbers) {\n        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n   \
    \ foreach (n; numbers) {\n        result[i] = delimeter;\n        i += 2;\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da6b]\\n??:? _d_newarrayT\
    \ [0x4297f0]\\n??:? long[] tmpju2ee7mm.intersperse(long[], long) [0x427e51]\\\
    n??:? void tmpju2ee7mm.__unittest_L26_C1() [0x427f7c]\\n??:? void tmpju2ee7mm.__modtest()\
    \ [0x4281cc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c52b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3be]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430649]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430af8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305d5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b395]\\n??:? runModuleUnitTests [0x42c301]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428910]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428897]\\n??:? _d_run_main [0x428802]\\n??:? main [0x4281df]\\\
    n??:? __libc_start_main [0xf80b9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[(numbers.length * 2) - 1];\n    foreach (i, number; numbers)\
    \ \n    {\n        result[i * 2] = number;\n        if (i != numbers.length -\
    \ 1) \n        {\n            result[(i * 2) + 1] = delimeter;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmp465w62qh.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmp465w62qh.__unittest_L24_C1() [0x427f3c]\\n??:? void tmp465w62qh.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x60ca5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\n\
    \    {\n        result[i * 2] = number;\n        if (i != numbers.length - 1)\n\
    \            result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpedjzz6ei.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpedjzz6ei.__unittest_L22_C1() [0x427f3c]\\n??:? void tmpedjzz6ei.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0xe5fdc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\
    \ \n    {\n        result[i * 2] = number;\n        if (i != numbers.length -\
    \ 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n  \
    \  assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpf8jq67g3.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpf8jq67g3.__unittest_L24_C1() [0x427f3c]\\n??:? void tmpf8jq67g3.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0xaa4e2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    size_t i = 0;\n    foreach (number;\
    \ numbers) \n    {\n        result[i] = number;\n        i += 2;\n    }\n    i\
    \ = 1;\n    foreach (number; numbers) \n    {\n        result[i] = delimeter;\n\
    \        i += 2;\n    }\n    return result[0 .. result.length - 1];\n}\n/*\n \
    \   >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n \
    \   [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter)\
    \ \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    size_t i = 0;\n\
    \    foreach (number; numbers) \n    {\n        result[i] = number;\n        i\
    \ += 2;\n    }\n    i = 1;\n    foreach (number; numbers) \n    {\n        result[i]\
    \ = delimeter;\n        i += 2;\n    }\n    return result[0 .. result.length -\
    \ 1];\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L,\
    \ 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long\
    \ delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    size_t\
    \ i = 0;\n    foreach (number; numbers) \n    {\n        result[i] = number;\n\
    \        i += 2;\n    }\n    i = 1;\n    foreach (number; numbers) \n    {\n \
    \       result[i] = delimeter;\n        i += 2;\n    }\n    return result[0 ..\
    \ result.length - 1];\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L,\
    \ 2L, 3L\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj1ff0j6j.d(74): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj1ff0j6j.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\n\
    \    {\n        result[i * 2] = number;\n        if (i != numbers.length - 1)\n\
    \            result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpfmnfvnoi.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpfmnfvnoi.__unittest_L22_C1() [0x427f3c]\\n??:? void tmpfmnfvnoi.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0xc5b71554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n    {\n        return numbers;\n    }\n    else\n    {\n        long[]\
    \ result = new long[2 * numbers.length - 1];\n        result[0] = numbers[0];\n\
    \        foreach (i, number; numbers[1 .. $])\n        {\n            result[2\
    \ * i] = delimeter;\n            result[2 * i + 1] = number;\n        }\n    \
    \    return result;\n    }\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpe4u8uimu.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428455]\\n??:? void tmpe4u8uimu.__unittest_L29_C1()\
    \ [0x428091]\\n??:? void tmpe4u8uimu.__modtest() [0x4281d8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c533]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430651]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b00]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305dd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b39d]\\n??:? runModuleUnitTests [0x42c309]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428918]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42889f]\\n??:? _d_run_main [0x42880a]\\n??:? main [0x4281eb]\\\
    n??:? __libc_start_main [0x65be9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\n\
    \    {\n        result[i * 2] = number;\n        if (i < numbers.length - 1)\n\
    \            result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpfrq9am4s.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpfrq9am4s.__unittest_L22_C1() [0x427f3c]\\n??:? void tmpfrq9am4s.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0xac3f4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n    {\n        return numbers;\n    }\n    else\n    {\n        long[]\
    \ result = new long[2 * numbers.length - 1];\n        result[0] = numbers[0];\n\
    \        foreach (i, number; numbers[1 .. $])\n        {\n            result[2\
    \ * i] = delimeter;\n            result[2 * i + 1] = number;\n        }\n    \
    \    return result;\n    }\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp2wkomf29.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428455]\\n??:? void tmp2wkomf29.__unittest_L29_C1()\
    \ [0x428091]\\n??:? void tmp2wkomf29.__modtest() [0x4281d8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c533]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430651]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b00]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305dd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b39d]\\n??:? runModuleUnitTests [0x42c309]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428918]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42889f]\\n??:? _d_run_main [0x42880a]\\n??:? main [0x4281eb]\\\
    n??:? __libc_start_main [0xe42fb554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\
    \ \n    {\n        result[2 * i] = number;\n        if (i != numbers.length -\
    \ 1) \n        {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n  \
    \  assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmp5gr_nyon.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmp5gr_nyon.__unittest_L24_C1() [0x427f3c]\\n??:? void tmp5gr_nyon.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x5aabe554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers)\n\
    \    {\n        result[2 * i] = number;\n        if (i != numbers.length - 1)\n\
    \            result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmprjom3spm.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmprjom3spm.__unittest_L22_C1() [0x427f3c]\\n??:? void tmprjom3spm.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x6062e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[(numbers.length * 2) - 1];\n    int i = 0;\n    foreach (n;\
    \ numbers) {\n        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n   \
    \ foreach (n; numbers) {\n        result[i] = delimeter;\n        i += 2;\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da6b]\\n??:? _d_newarrayT\
    \ [0x4297f0]\\n??:? long[] tmpv4uy42_f.intersperse(long[], long) [0x427e51]\\\
    n??:? void tmpv4uy42_f.__unittest_L26_C1() [0x427f7c]\\n??:? void tmpv4uy42_f.__modtest()\
    \ [0x4281cc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c52b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3be]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430649]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430af8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305d5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b395]\\n??:? runModuleUnitTests [0x42c301]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428910]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428897]\\n??:? _d_run_main [0x428802]\\n??:? main [0x4281df]\\\
    n??:? __libc_start_main [0xdaf3d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return [];\n    if (numbers.length == 1)\n        return numbers;\n\
    \    long[] result = new long[2 * numbers.length - 1];\n    result[0] = numbers[0];\n\
    \    foreach (i, n; numbers[1 .. $])\n    {\n        result[2 * i - 1] = delimeter;\n\
    \        result[2 * i] = n;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpvx06bmef.d(21): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42852e]\\n??:? long[] tmpvx06bmef.intersperse(long[],\
    \ long) [0x427f3b]\\n??:? void tmpvx06bmef.__unittest_L26_C1() [0x428036]\\n??:?\
    \ void tmpvx06bmef.__modtest() [0x4281fc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c55b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3ee]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430679]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b28]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430605]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3c5]\\n??:? runModuleUnitTests [0x42c331]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428940]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288c7]\\n??:? _d_run_main [0x428832]\\n??:? main [0x42820f]\\\
    n??:? __libc_start_main [0xf7972554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    foreach (i, e; numbers)\n  \
    \  {\n        result[i * 2] = e;\n        if (i != numbers.length - 1)\n     \
    \       result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpt1_y2gfz.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpt1_y2gfz.__unittest_L22_C1() [0x427f3c]\\n??:? void tmpt1_y2gfz.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x63789554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    int i = 0;\n    foreach (n;\
    \ numbers) {\n        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n   \
    \ foreach (n; numbers[1 .. $]) {\n        result[i] = delimeter;\n        i +=\
    \ 2;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da8b]\\n??:? _d_newarrayT\
    \ [0x429810]\\n??:? long[] tmpzr05at4h.intersperse(long[], long) [0x427e51]\\\
    n??:? void tmpzr05at4h.__unittest_L26_C1() [0x427fa0]\\n??:? void tmpzr05at4h.__modtest()\
    \ [0x4281f0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c54b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3de]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430669]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b18]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305f5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3b5]\\n??:? runModuleUnitTests [0x42c321]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428930]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288b7]\\n??:? _d_run_main [0x428822]\\n??:? main [0x428203]\\\
    n??:? __libc_start_main [0x97016554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n    {\n        return numbers;\n    }\n    long[] result = new long[2\
    \ * numbers.length - 1];\n    result[0] = numbers[0];\n    foreach (i, number;\
    \ numbers[1 .. $])\n    {\n        result[2 * i] = delimeter;\n        result[2\
    \ * i + 1] = number;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5i5r86rb.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428455]\\n??:? void tmp5i5r86rb.__unittest_L26_C1()\
    \ [0x428091]\\n??:? void tmp5i5r86rb.__modtest() [0x4281d8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c533]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430651]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b00]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305dd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b39d]\\n??:? runModuleUnitTests [0x42c309]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428918]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42889f]\\n??:? _d_run_main [0x42880a]\\n??:? main [0x4281eb]\\\
    n??:? __libc_start_main [0x27da9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n    {\n        return numbers;\n    }\n    else\n    {\n        long[]\
    \ result = new long[2 * numbers.length - 1];\n        result[0] = numbers[0];\n\
    \        for (int i = 1; i < numbers.length; i++)\n        {\n            result[2\
    \ * i - 1] = delimeter;\n            result[2 * i] = numbers[i];\n        }\n\
    \        return result;\n    }\n}\n/*\n    >>> intersperse([], 4.0)\n    []\n\
    \    >>> intersperse([1.0, 2.0, 3.0], 4.0)\n    [1.0, 4.0, 2.0, 4.0, 3.0]\n*/\n\
    double[] intersperse(double[] numbers, double delimeter) \n{\n    if (numbers.length\
    \ == 0)\n    {\n        return numbers;\n    }\n    else\n    {\n        double[]\
    \ result = new double[2 * numbers.length - 1];\n        result[0] = numbers[0];\n\
    \        for (int i = 1; i < numbers.length; i++)\n        {\n            result[2\
    \ * i - 1] = delimeter;\n            result[2 * i] = numbers[i];\n        }\n\
    \        return result;\n    }\n}\n/*\n    >>> intersperse([], \"a\")\n    []\n\
    \    >>> intersperse([\"a\", \"b\", \"c\"], \"d\")\n    [\"a\", \"d\", \"b\",\
    \ \"d\", \"c\"]\n*/\nstring[] intersperse(string[] strings, string delimeter)\
    \ \n{\n    if (strings.length == 0)\n    {\n        return strings;\n    }\n \
    \   else\n    {\n        string[] result = new string[2 * strings.length - 1];\n\
    \        result[0] = strings[0];\n        for (int i = 1; i < strings.length;\
    \ i++)\n        {\n            result[2 * i - 1] = delimeter;\n            result[2\
    \ * i] = strings[i];\n        }\n        return result;\n    }\n}\n/*\n    >>>\
    \ intersperse\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp615mqpct.d(77): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp615mqpct.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    for (long i = 0; i < numbers.length;\
    \ i++)\n    {\n        result[i * 2] = numbers[i];\n        if (i < numbers.length\
    \ - 1)\n            result[i * 2 + 1] = delimeter;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da33]\\n??:? _d_newarrayT\
    \ [0x4297b8]\\n??:? long[] tmp4g948ljf.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmp4g948ljf.__unittest_L22_C1() [0x427f44]\\n??:? void tmp4g948ljf.__modtest()\
    \ [0x428194]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4f3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b386]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430611]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43059d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b35d]\\n??:? runModuleUnitTests [0x42c2c9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42885f]\\n??:? _d_run_main [0x4287ca]\\n??:? main [0x4281a7]\\\
    n??:? __libc_start_main [0x4ebdf554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        result[2 * i] = numbers[i];\n        if (i != numbers.length\
    \ - 1) \n        {\n            result[2 * i + 1] = delimeter;\n        }\n  \
    \  }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>>\
    \ intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse2(long[]\
    \ numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length\
    \ - 1];\n    int i = 0;\n    foreach (n; numbers) \n    {\n        result[2 *\
    \ i] = n;\n        if (i != numbers.length - 1) \n        {\n            result[2\
    \ * i + 1] = delimeter;\n        }\n        i++;\n    }\n    return result;\n\
    }\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L],\
    \ 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse3(long[] numbers, long\
    \ delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n    int\
    \ i = 0;\n    foreach (n; numbers) \n    {\n        result[2 * i] = n;\n     \
    \   if (i != numbers.length - 1) \n        {\n            result[2 * i + 1] =\
    \ delimeter;\n        }\n        i++;\n    }\n    return result;\n}\n/*\n    >>>\
    \ intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L,\
    \ 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse4(long[] numbers, long delimeter) \n\
    {\n    long[]\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7c4ogrpu.d(75): Error: no identifier for declarator `long[]`\\\
    n/tmp/tmp7c4ogrpu.d(75): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7c4ogrpu.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return [];\n    long[] result = new long[2 * numbers.length -\
    \ 1];\n    result[0] = numbers[0];\n    foreach (i, n; numbers[1 .. $]) {\n  \
    \      result[2 * i] = delimeter;\n        result[2 * i + 1] = n;\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp2z3xwg5n.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428465]\\n??:? void tmp2z3xwg5n.__unittest_L23_C1()\
    \ [0x42809d]\\n??:? void tmp2z3xwg5n.__modtest() [0x4281e4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c543]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3d6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430661]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b10]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3ad]\\n??:? runModuleUnitTests [0x42c319]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428928]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288af]\\n??:? _d_run_main [0x42881a]\\n??:? main [0x4281f7]\\\
    n??:? __libc_start_main [0xfc3d2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return [];\n    else\n    {\n        long[] result = new long[2\
    \ * numbers.length - 1];\n        result[0] = numbers[0];\n        foreach (i,\
    \ x; numbers[1 .. $])\n        {\n            result[2 * i - 1] = delimeter;\n\
    \            result[2 * i] = x;\n        }\n        return result;\n    }\n}\n\
    unittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L)\
    \ == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L,\
    \ 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp4cdnd752.d(21): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428516]\\n??:? long[] tmp4cdnd752.intersperse(long[],\
    \ long) [0x427f26]\\n??:? void tmp4cdnd752.__unittest_L27_C1() [0x42801e]\\n??:?\
    \ void tmp4cdnd752.__modtest() [0x4281e4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c543]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3d6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430661]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b10]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3ad]\\n??:? runModuleUnitTests [0x42c319]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428928]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288af]\\n??:? _d_run_main [0x42881a]\\n??:? main [0x4281f7]\\\
    n??:? __libc_start_main [0x11350554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    foreach (n;\
    \ numbers) {\n        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n   \
    \ foreach (n; numbers) {\n        result[i] = delimeter;\n        i += 2;\n  \
    \  }\n    return result[0 .. result.length - 1];\n}\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da8b]\\n??:? _d_newarrayT\
    \ [0x429810]\\n??:? long[] tmpb2to_saj.intersperse(long[], long) [0x427e51]\\\
    n??:? void tmpb2to_saj.__unittest_L26_C1() [0x427f9c]\\n??:? void tmpb2to_saj.__modtest()\
    \ [0x4281ec]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c54b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3de]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430669]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b18]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305f5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3b5]\\n??:? runModuleUnitTests [0x42c321]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428930]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288b7]\\n??:? _d_run_main [0x428822]\\n??:? main [0x4281ff]\\\
    n??:? __libc_start_main [0x6daea554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\n\
    \    {\n        result[i * 2] = number;\n        if (i < numbers.length - 1)\n\
    \            result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmphye1p3kv.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmphye1p3kv.__unittest_L22_C1() [0x427f3c]\\n??:? void tmphye1p3kv.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x7f882554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return numbers;\n    long[] result = new long[numbers.length\
    \ * 2 - 1];\n    result[0] = numbers[0];\n    foreach (i, number; numbers[1 ..\
    \ $])\n    {\n        result[i * 2] = delimeter;\n        result[i * 2 + 1] =\
    \ number;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpd9den15n.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428455]\\n??:? void tmpd9den15n.__unittest_L24_C1()\
    \ [0x428091]\\n??:? void tmpd9den15n.__modtest() [0x4281d8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c533]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430651]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b00]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305dd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b39d]\\n??:? runModuleUnitTests [0x42c309]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428918]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42889f]\\n??:? _d_run_main [0x42880a]\\n??:? main [0x4281eb]\\\
    n??:? __libc_start_main [0xa6f9d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        result[i * 2] = numbers[i];\n        if (i != numbers.length\
    \ - 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n  \
    \  }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>>\
    \ intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[]\
    \ numbers, long delimeter) \n{\n    long[] result = new long[numbers.length *\
    \ 2 - 1];\n    for (int i = 0; i < numbers.length; i++) \n    {\n        result[i\
    \ * 2] = numbers[i];\n        if (i != numbers.length - 1) \n        {\n     \
    \       result[i * 2 + 1] = delimeter;\n        }\n    }\n    return result;\n\
    }\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L],\
    \ 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter)\
    \ \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    for (int i =\
    \ 0; i < numbers.length; i++) \n    {\n        result[i * 2] = numbers[i];\n \
    \       if (i != numbers.length - 1) \n        {\n            result[i * 2 + 1]\
    \ = delimeter;\n        }\n    }\n    return result;\n}\n/*\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    */\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result\
    \ =\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkdgcx282.d(71): Error: expression expected, not `unittest`\\\
    n/tmp/tmpkdgcx282.d(72): Error: semicolon expected, not `{`\\n/tmp/tmpkdgcx282.d(79):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkdgcx282.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        result[i * 2] = numbers[i];\n        if (i != numbers.length\
    \ - 1)\n            result[i * 2 + 1] = delimeter;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da33]\\n??:? _d_newarrayT\
    \ [0x4297b8]\\n??:? long[] tmpnj2526wx.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpnj2526wx.__unittest_L22_C1() [0x427f44]\\n??:? void tmpnj2526wx.__modtest()\
    \ [0x428194]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4f3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b386]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430611]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43059d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b35d]\\n??:? runModuleUnitTests [0x42c2c9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42885f]\\n??:? _d_run_main [0x4287ca]\\n??:? main [0x4281a7]\\\
    n??:? __libc_start_main [0x66c2a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return [];\n    long[] result = new long[2 * numbers.length -\
    \ 1];\n    result[0] = numbers[0];\n    foreach (i, e; numbers[1 .. $])\n    {\n\
    \        result[2 * i] = delimeter;\n        result[2 * i + 1] = e;\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n   \
    \ assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp9ppvsut4.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428465]\\n??:? void tmp9ppvsut4.__unittest_L24_C1()\
    \ [0x42809d]\\n??:? void tmp9ppvsut4.__modtest() [0x4281e4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c543]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3d6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430661]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b10]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3ad]\\n??:? runModuleUnitTests [0x42c319]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428928]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288af]\\n??:? _d_run_main [0x42881a]\\n??:? main [0x4281f7]\\\
    n??:? __libc_start_main [0x2159e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\n\
    \    {\n        result[i * 2] = number;\n        if (i < numbers.length - 1)\n\
    \            result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmps1fc187_.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmps1fc187_.__unittest_L22_C1() [0x427f3c]\\n??:? void tmps1fc187_.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x34993554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return numbers;\n    long[] result = new long[2 * numbers.length\
    \ - 1];\n    result[0] = numbers[0];\n    foreach (i, number; numbers[1 .. $])\
    \ {\n        result[2 * i] = delimeter;\n        result[2 * i + 1] = number;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpong79lqv.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428455]\\n??:? void tmpong79lqv.__unittest_L23_C1()\
    \ [0x428091]\\n??:? void tmpong79lqv.__modtest() [0x4281d8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c533]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430651]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b00]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305dd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b39d]\\n??:? runModuleUnitTests [0x42c309]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428918]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42889f]\\n??:? _d_run_main [0x42880a]\\n??:? main [0x4281eb]\\\
    n??:? __libc_start_main [0xb97fe554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return numbers;\n    long[] result = new long[2 * numbers.length\
    \ - 1];\n    result[0] = numbers[0];\n    foreach (i, number; numbers[1 .. $])\n\
    \    {\n        result[2 * i] = delimeter;\n        result[2 * i + 1] = number;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpzlpzetzy.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428455]\\n??:? void tmpzlpzetzy.__unittest_L24_C1()\
    \ [0x428091]\\n??:? void tmpzlpzetzy.__modtest() [0x4281d8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c533]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430651]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b00]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305dd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b39d]\\n??:? runModuleUnitTests [0x42c309]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428918]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42889f]\\n??:? _d_run_main [0x42880a]\\n??:? main [0x4281eb]\\\
    n??:? __libc_start_main [0x141c0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers)\
    \ \n    {\n        result[2 * i] = number;\n        if (i != numbers.length -\
    \ 1) \n        {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n  \
    \  assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmp_qgip2_5.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmp_qgip2_5.__unittest_L24_C1() [0x427f3c]\\n??:? void tmp_qgip2_5.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x820b2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return [];\n    long[] result = new long[2 * numbers.length -\
    \ 1];\n    result[0] = numbers[0];\n    foreach (i, number; numbers[1 .. $]) {\n\
    \        result[2 * i - 1] = delimeter;\n        result[2 * i] = number;\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n\
    \    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpsw9p1d19.d(18): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428516]\\n??:? long[] tmpsw9p1d19.intersperse(long[],\
    \ long) [0x427f26]\\n??:? void tmpsw9p1d19.__unittest_L23_C1() [0x42801e]\\n??:?\
    \ void tmpsw9p1d19.__modtest() [0x4281e4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c543]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3d6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430661]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b10]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3ad]\\n??:? runModuleUnitTests [0x42c319]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428928]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288af]\\n??:? _d_run_main [0x42881a]\\n??:? main [0x4281f7]\\\
    n??:? __libc_start_main [0xf969554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n    {\n        return numbers;\n    }\n    else\n    {\n        long[]\
    \ result = new long[2 * numbers.length - 1];\n        result[0] = numbers[0];\n\
    \        foreach (i, number; numbers[1 .. $])\n        {\n            result[2\
    \ * i] = delimeter;\n            result[2 * i + 1] = number;\n        }\n    \
    \    return result;\n    }\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_prr_qd0.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428455]\\n??:? void tmp_prr_qd0.__unittest_L29_C1()\
    \ [0x428091]\\n??:? void tmp_prr_qd0.__modtest() [0x4281d8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c533]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430651]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b00]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305dd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b39d]\\n??:? runModuleUnitTests [0x42c309]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428918]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42889f]\\n??:? _d_run_main [0x42880a]\\n??:? main [0x4281eb]\\\
    n??:? __libc_start_main [0x8ce65554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[(numbers.length * 2) - 1];\n    int i = 0;\n    foreach (n;\
    \ numbers)\n    {\n        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n\
    \    foreach (n; numbers)\n    {\n        result[i] = delimeter;\n        i +=\
    \ 2;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da6b]\\n??:? _d_newarrayT\
    \ [0x4297f0]\\n??:? long[] tmpw953udft.intersperse(long[], long) [0x427e51]\\\
    n??:? void tmpw953udft.__unittest_L28_C1() [0x427f7c]\\n??:? void tmpw953udft.__modtest()\
    \ [0x4281cc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c52b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3be]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430649]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430af8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305d5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b395]\\n??:? runModuleUnitTests [0x42c301]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428910]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428897]\\n??:? _d_run_main [0x428802]\\n??:? main [0x4281df]\\\
    n??:? __libc_start_main [0x8f308554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    auto result\
    \ = new long[];\n    foreach (i, n; numbers) \n    {\n        if (i > 0) \n  \
    \      {\n            result ~= delimeter;\n        }\n        result ~= n;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpztp4xxjt.d(13): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `long[]`\\'s\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpztp4xxjt.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\
    \ \n    {\n        result[i * 2] = number;\n        if (i < numbers.length - 1)\
    \ \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n  \
    \  assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpizwzvefi.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpizwzvefi.__unittest_L24_C1() [0x427f3c]\\n??:? void tmpizwzvefi.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x8e8bc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0) \n    {\n        return [];\n    }\n    else \n    {\n        long[] result\
    \ = new long[2 * numbers.length - 1];\n        result[0] = numbers[0];\n     \
    \   foreach (i, number; numbers[1 .. $]) \n        {\n            result[2 * i]\
    \ = delimeter;\n            result[2 * i + 1] = number;\n        }\n        return\
    \ result;\n    }\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphkzj965v.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428465]\\n??:? void tmphkzj965v.__unittest_L29_C1()\
    \ [0x42809d]\\n??:? void tmphkzj965v.__modtest() [0x4281e4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c543]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3d6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430661]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b10]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3ad]\\n??:? runModuleUnitTests [0x42c319]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428928]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288af]\\n??:? _d_run_main [0x42881a]\\n??:? main [0x4281f7]\\\
    n??:? __libc_start_main [0x620d6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[(numbers.length * 2) - 1];\n    long i = 0;\n    foreach (number;\
    \ numbers) \n    {\n        result[i] = number;\n        i += 2;\n    }\n    i\
    \ = 1;\n    foreach (number; numbers) \n    {\n        result[i] = delimeter;\n\
    \        i += 2;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da6b]\\n??:? _d_newarrayT\
    \ [0x4297f0]\\n??:? long[] tmpy21c4dkx.intersperse(long[], long) [0x427e51]\\\
    n??:? void tmpy21c4dkx.__unittest_L28_C1() [0x427f80]\\n??:? void tmpy21c4dkx.__modtest()\
    \ [0x4281d0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c52b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3be]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430649]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430af8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305d5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b395]\\n??:? runModuleUnitTests [0x42c301]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428910]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428897]\\n??:? _d_run_main [0x428802]\\n??:? main [0x4281e3]\\\
    n??:? __libc_start_main [0x716d0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\
    \ \n    {\n        result[i * 2] = number;\n        if (i != numbers.length -\
    \ 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n  \
    \  assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpydxbbk36.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpydxbbk36.__unittest_L24_C1() [0x427f3c]\\n??:? void tmpydxbbk36.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x3f340554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\
    \ \n    {\n        result[i * 2] = number;\n        if (i < numbers.length - 1)\
    \ \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n  \
    \  assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmputk71zt_.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmputk71zt_.__unittest_L24_C1() [0x427f3c]\\n??:? void tmputk71zt_.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x2e494554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[(numbers.length * 2) - 1];\n    foreach (i, number; numbers)\
    \ \n    {\n        if (i != 0) \n        {\n            result[(i * 2) - 1] =\
    \ delimeter;\n        }\n        result[i * 2] = number;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpqejzx2du.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpqejzx2du.__unittest_L24_C1() [0x427f40]\\n??:? void tmpqejzx2du.__modtest()\
    \ [0x428190]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x4281a3]\\\
    n??:? __libc_start_main [0x6c4d7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    foreach (i, n; numbers) \n \
    \   {\n        result[2 * i] = n;\n        if (i < numbers.length - 1)\n     \
    \       result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpwx4ebz3l.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpwx4ebz3l.__unittest_L22_C1() [0x427f3c]\\n??:? void tmpwx4ebz3l.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0xae821554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return numbers;\n    long[] result = new long[numbers.length\
    \ * 2 - 1];\n    result[0] = numbers[0];\n    foreach (i, number; numbers[1 ..\
    \ $])\n    {\n        result[i * 2] = delimeter;\n        result[i * 2 + 1] =\
    \ number;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmptf8mj_j6.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428455]\\n??:? void tmptf8mj_j6.__unittest_L24_C1()\
    \ [0x428091]\\n??:? void tmptf8mj_j6.__modtest() [0x4281d8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c533]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430651]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b00]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305dd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b39d]\\n??:? runModuleUnitTests [0x42c309]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428918]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42889f]\\n??:? _d_run_main [0x42880a]\\n??:? main [0x4281eb]\\\
    n??:? __libc_start_main [0x1e36a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ < 2)\n        return numbers;\n    long[] result = new long[numbers.length *\
    \ 2 - 1];\n    size_t i = 0;\n    foreach (n; numbers)\n    {\n        result[i]\
    \ = n;\n        i += 2;\n    }\n    i = 1;\n    foreach (n; numbers[1 .. $])\n\
    \    {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    foreach (i, n; numbers) \n \
    \   {\n        result[2 * i] = n;\n        if (i < numbers.length - 1) \n    \
    \    {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n    return\
    \ result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L,\
    \ 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers,\
    \ long delimeter) \n{\n    return numbers.map!((n, i) => i % 2 == 0 ? n : delimeter).array;\n\
    }\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L],\
    \ 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter)\
    \ \n{\n    return numbers.map!((n, i) => i % 2 == 0 ? n : delimeter).array;\n\
    }\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L],\
    \ 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter)\
    \ \n{\n    return numbers.map!((n, i) => i % 2 == 0 ? n : delimeter).array;\n\
    }\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L],\
    \ 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter)\
    \ \n{\n    return numbers.map!((n, i) => i % 2 == 0 ? n : delimeter).array;\n\
    }\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> inter\nunittest\n{\n    alias\
    \ candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnm4s97s2.d(64): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnm4s97s2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers)\
    \ \n    {\n        result[2 * i] = number;\n        if (i != numbers.length -\
    \ 1) \n        {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n  \
    \  assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpilkiyuji.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpilkiyuji.__unittest_L24_C1() [0x427f3c]\\n??:? void tmpilkiyuji.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x959f8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    foreach (i, e; numbers) \n \
    \   {\n        result[2 * i] = e;\n        if (i != numbers.length - 1) \n   \
    \     {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n    return\
    \ result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L,\
    \ 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers,\
    \ long delimeter) \n{\n    long[] result = new long[2 * numbers.length - 1];\n\
    \    foreach (i, e; numbers) \n    {\n        result[2 * i] = e;\n        if (i\
    \ != numbers.length - 1) \n        {\n            result[2 * i + 1] = delimeter;\n\
    \        }\n    }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n  \
    \  []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[]\
    \ intersperse(long[] numbers, long delimeter) \n{\n    long[] result = new long[2\
    \ * numbers.length - 1];\n    foreach (i, e; numbers) \n    {\n        result[2\
    \ * i] = e;\n        if (i != numbers.length - 1) \n        {\n            result[2\
    \ * i + 1] = delimeter;\n        }\n    }\n    return result;\n}\n/*\n    >>>\
    \ intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L,\
    \ 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n\
    \    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, e; numbers)\
    \ \n    {\n\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpiqk7k5t3.d(74): Error: found `unittest` instead of statement\\\
    n/tmp/tmpiqk7k5t3.d(82): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiqk7k5t3.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\n\
    \    {\n        result[i * 2] = number;\n        if (i != numbers.length - 1)\n\
    \            result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpbl0jvh92.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpbl0jvh92.__unittest_L22_C1() [0x427f3c]\\n??:? void tmpbl0jvh92.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0xbb4af554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\n\
    \    {\n        result[i * 2] = number;\n        if (i < numbers.length - 1)\n\
    \            result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmprr84ncqt.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmprr84ncqt.__unittest_L22_C1() [0x427f3c]\\n??:? void tmprr84ncqt.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x26115554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers)\
    \ \n    {\n        result[2 * i] = number;\n        if (i != numbers.length -\
    \ 1) \n        {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n  \
    \  assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpjeqb217m.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpjeqb217m.__unittest_L24_C1() [0x427f3c]\\n??:? void tmpjeqb217m.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x5c056554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\
    \ \n    {\n        result[i * 2] = number;\n        if (i != numbers.length -\
    \ 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n  \
    \  assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmp2nfs9dty.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmp2nfs9dty.__unittest_L24_C1() [0x427f3c]\\n??:? void tmp2nfs9dty.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0xe4165554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    for (size_t i = 0; i < numbers.length;\
    \ i++)\n    {\n        result[i * 2] = numbers[i];\n        if (i < numbers.length\
    \ - 1)\n            result[i * 2 + 1] = delimeter;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da33]\\n??:? _d_newarrayT\
    \ [0x4297b8]\\n??:? long[] tmpoyloqw40.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpoyloqw40.__unittest_L22_C1() [0x427f44]\\n??:? void tmpoyloqw40.__modtest()\
    \ [0x428194]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4f3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b386]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430611]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43059d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b35d]\\n??:? runModuleUnitTests [0x42c2c9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42885f]\\n??:? _d_run_main [0x4287ca]\\n??:? main [0x4281a7]\\\
    n??:? __libc_start_main [0xcf389554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers)\n\
    \    {\n        result[2 * i] = number;\n        if (i < numbers.length - 1)\n\
    \            result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\n/*\n\
    \    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n\
    \    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter)\
    \ \n{\n    return numbers.map!(n => [n, delimeter]).flatten[0 .. $ - 1];\n}\n\
    /*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n\
    \    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter)\
    \ \n{\n    return numbers.reduce!((a, b) => a ~ [delimeter, b])([]);\n}\n/*\n\
    \    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n\
    \    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter)\
    \ \n{\n    return numbers.reduce!((a, b) => a ~ [delimeter, b])([]);\n}\n/*\n\
    \    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n\
    \    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter)\
    \ \n{\n    return numbers.reduce!((a, b) => a ~ [delimeter, b])([]);\n}\n/*\n\
    \    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L],\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgltrkcv7.d(62): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgltrkcv7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0) \n    {\n        return [];\n    }\n    long[] result = new long[2 * numbers.length\
    \ - 1];\n    result[0] = numbers[0];\n    foreach (i, number; numbers[1 .. $])\
    \ \n    {\n        result[2 * i] = delimeter;\n        result[2 * i + 1] = number;\n\
    \    }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>>\
    \ intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[]\
    \ numbers, long delimeter) \n{\n    if (numbers.length == 0) \n    {\n       \
    \ return [];\n    }\n    long[] result = new long[2 * numbers.length - 1];\n \
    \   result[0] = numbers[0];\n    foreach (i, number; numbers[1 .. $]) \n    {\n\
    \        result[2 * i] = delimeter;\n        result[2 * i + 1] = number;\n   \
    \ }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L,\
    \ 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers,\
    \ long delimeter) \n{\n    if (numbers.length == 0) \n    {\n        return [];\n\
    \    }\n    long[] result = new long[2 * numbers.length - 1];\n    result[0] =\
    \ numbers[0];\n    foreach (i, number; numbers[1 .. $]) \n    {\n        result[2\
    \ * i] = delimeter;\n        result[2 * i + 1] = number;\n    }\n    return result;\n\
    }\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L],\
    \ 4L)\n    [1L, 4L, 2L, 4L, 3L\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv6oqdjy0.d(68): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv6oqdjy0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[(numbers.length * 2) - 1];\n    foreach (i, number; numbers)\n\
    \    {\n        result[i * 2] = number;\n        if (i != numbers.length - 1)\n\
    \            result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmp7bahwyx2.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmp7bahwyx2.__unittest_L22_C1() [0x427f3c]\\n??:? void tmp7bahwyx2.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0xbd7ff554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0) return [];\n    long[] result = new long[2 * numbers.length - 1];\n  \
    \  result[0] = numbers[0];\n    foreach (i, number; numbers[1 .. $]) \n    {\n\
    \        result[2 * i - 1] = delimeter;\n        result[2 * i] = number;\n   \
    \ }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L,\
    \ 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers,\
    \ long delimeter) \n{\n    if (numbers.length == 0) return [];\n    long[] result\
    \ = new long[2 * numbers.length - 1];\n    result[0] = numbers[0];\n    foreach\
    \ (i, number; numbers[1 .. $]) \n    {\n        result[2 * i - 1] = delimeter;\n\
    \        result[2 * i] = number;\n    }\n    return result;\n}\n/*\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    */\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0) return [];\n    long[] result = new long[2 * numbers.length - 1];\n  \
    \  result[0] = numbers[0];\n    foreach (i, number; numbers[1 .. $]) \n    {\n\
    \        result[2 * i - 1] = delimeter;\n        result[2 * i] = number;\n   \
    \ }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L,\
    \ 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers,\
    \ long delimeter) \n{\n    if (numbers\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxllcn5g9.d(68): Error: found `unittest` when expecting `)`\\\
    n/tmp/tmpxllcn5g9.d(76): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxllcn5g9.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers)\
    \ \n    {\n        result[2 * i] = number;\n        if (i < numbers.length - 1)\
    \ \n        {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n\
    \    return result;\n}\n/*\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([])\n\
    \    0L\n*/\nlong sum(long[] numbers) \n{\n    long result = 0L;\n    foreach\
    \ (number; numbers) \n    {\n        result += number;\n    }\n    return result;\n\
    }\n/*\n    >>> product([1L, 2L, 3L])\n    6L\n    >>> product([])\n    1L\n*/\n\
    long product(long[] numbers) \n{\n    long result = 1L;\n    foreach (number;\
    \ numbers) \n    {\n        result *= number;\n    }\n    return result;\n}\n\
    /*\n    >>> factorial(0L)\n    1L\n    >>> factorial(1L)\n    1L\n    >>> factorial(2L)\n\
    \    2L\n    >>> factorial(3L)\n    6L\n    >>> factorial(4L)\n    24L\n    >>>\
    \ factorial(5L)\n    120L\n*/\nlong factorial(long n) \n{\n    return product(iota(1L,\
    \ n + 1L));\n}\n/*\n    >>> fibonacci(0L)\n    0L\n    >>> fibonacci(1L)\n   \
    \ 1L\n    >>> fibonacci(2L)\n    1L\n    >>> fibonacci(3L)\n    2L\n    >>> fibonacci(4L)\n\
    \    3L\n    >>> fibonacci(5L)\n    5L\n    >>> fibonacci(6L)\n    8L\n    >>>\
    \ fibonacci(7L)\n    13L\n    >>> fibonacci(8L)\n    21L\n    >>> fibonacci(9L)\n\
    \    34L\n    >>> fibonacci(10L)\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3zj1ket9.d(72): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3zj1ket9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers)\n\
    \    {\n        result[2 * i] = number;\n        if (i < numbers.length - 1)\n\
    \            result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpsjdljd_1.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpsjdljd_1.__unittest_L22_C1() [0x427f3c]\\n??:? void tmpsjdljd_1.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0xc146554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    int i = 0;\n    foreach (number;\
    \ numbers) {\n        result[i] = number;\n        i += 2;\n    }\n    i = 1;\n\
    \    foreach (number; numbers) {\n        result[i] = delimeter;\n        i +=\
    \ 2;\n    }\n    return result[0 .. result.length - 1];\n}\n/*\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    */\nlong[] intersperse2(long[] numbers, long delimeter) \n{\n    long[] result\
    \ = new long[2 * numbers.length - 1];\n    int i = 0;\n    foreach (number; numbers)\
    \ {\n        result[i] = number;\n        i += 2;\n    }\n    i = 1;\n    foreach\
    \ (number; numbers) {\n        result[i] = delimeter;\n        i += 2;\n    }\n\
    \    return result[0 .. result.length - 1];\n}\n/*\n    >>> intersperse([], 4L)\n\
    \    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\n\
    long[] intersperse3(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[2 * numbers.length - 1];\n    int i = 0;\n    foreach (number; numbers)\
    \ {\n        result[i] = number;\n        i += 2;\n    }\n    i = 1;\n    foreach\
    \ (number; numbers) {\n        result[i] = delimeter;\n        i += 2;\n    }\n\
    \    return result[0 .. result.length - 1];\n}\n/*\n    >>> intersperse([], 4L)\n\
    \    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\n\
    \nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42ddb3]\\n??:? _d_newarrayT\
    \ [0x429b38]\\n??:? long[] tmpiomgfy_a.intersperse(long[], long) [0x427ed1]\\\
    n??:? void tmpiomgfy_a.__unittest_L75_C1() [0x4282c4]\\n??:? void tmpiomgfy_a.__modtest()\
    \ [0x428514]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c873]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b706]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430991]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430e40]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43091d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6dd]\\n??:? runModuleUnitTests [0x42c649]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428c58]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428bdf]\\n??:? _d_run_main [0x428b4a]\\n??:? main [0x428527]\\\
    n??:? __libc_start_main [0xda530554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    foreach (number;\
    \ numbers) \n    {\n        result[i] = number;\n        i += 2;\n    }\n    i\
    \ = 1;\n    foreach (number; numbers) \n    {\n        result[i] = delimeter;\n\
    \        i += 2;\n    }\n    return result[0 .. result.length - 1];\n}\n/*\n \
    \   >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n \
    \   [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse2(long[] numbers, long delimeter)\
    \ \n{\n    long[] result = new long[numbers.length * 2 - 1];\n    int i = 0;\n\
    \    foreach (number; numbers) \n    {\n        result[i] = number;\n        i\
    \ += 2;\n    }\n    i = 1;\n    foreach (number; numbers) \n    {\n        result[i]\
    \ = delimeter;\n        i += 2;\n    }\n    return result[0 .. result.length -\
    \ 1];\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L,\
    \ 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse3(long[] numbers,\
    \ long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n\
    \    int i = 0;\n    foreach (number; numbers) \n    {\n        result[i] = number;\n\
    \        i += 2;\n    }\n    i = 1;\n    foreach (number; numbers) \n    {\n \
    \       result[i] = delimeter;\n        i += 2;\n    }\n    return result[0 ..\
    \ result.length - 1];\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L,\
    \ 2L, 3L], 4L)\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprf5uuioo.d(74): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprf5uuioo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    foreach (i, e; numbers)\n  \
    \  {\n        result[2 * i] = e;\n        if (i < numbers.length - 1)\n      \
    \      result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmp01h8wqbw.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmp01h8wqbw.__unittest_L22_C1() [0x427f3c]\\n??:? void tmp01h8wqbw.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x3b427554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        result[i * 2] = numbers[i];\n        if (i < numbers.length\
    \ - 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n  \
    \  }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>>\
    \ intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse2(long[]\
    \ numbers, long delimeter) \n{\n    long[] result = new long[numbers.length *\
    \ 2 - 1];\n    int j = 0;\n    for (int i = 0; i < numbers.length; i++) \n   \
    \ {\n        result[j++] = numbers[i];\n        if (i < numbers.length - 1) \n\
    \        {\n            result[j++] = delimeter;\n        }\n    }\n    return\
    \ result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L,\
    \ 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse3(long[] numbers,\
    \ long delimeter) \n{\n    long[] result = new long[numbers.length * 2 - 1];\n\
    \    int j = 0;\n    foreach (i, number; numbers) \n    {\n        result[j++]\
    \ = number;\n        if (i < numbers.length - 1) \n        {\n            result[j++]\
    \ = delimeter;\n        }\n    }\n    return result;\n}\n/*\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    */\nlong[] intersperse4(long[] numbers, long delimeter) \n{\n    long[] result\n\
    unittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L)\
    \ == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L,\
    \ 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp72f_5wdd.d(73): Error: semicolon expected, not `unittest`\\n/tmp/tmp72f_5wdd.d(73):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp72f_5wdd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        result[i * 2] = numbers[i];\n        if (i != numbers.length\
    \ - 1)\n            result[i * 2 + 1] = delimeter;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da33]\\n??:? _d_newarrayT\
    \ [0x4297b8]\\n??:? long[] tmpxkwk611f.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpxkwk611f.__unittest_L22_C1() [0x427f44]\\n??:? void tmpxkwk611f.__modtest()\
    \ [0x428194]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4f3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b386]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430611]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43059d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b35d]\\n??:? runModuleUnitTests [0x42c2c9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42885f]\\n??:? _d_run_main [0x4287ca]\\n??:? main [0x4281a7]\\\
    n??:? __libc_start_main [0x681a3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return numbers;\n    long[] result = new long[2 * numbers.length\
    \ - 1];\n    result[0] = numbers[0];\n    foreach (i, number; numbers[1 .. $])\
    \ {\n        result[2 * i] = delimeter;\n        result[2 * i + 1] = number;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmps6uipzj9.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428455]\\n??:? void tmps6uipzj9.__unittest_L23_C1()\
    \ [0x428091]\\n??:? void tmps6uipzj9.__modtest() [0x4281d8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c533]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430651]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b00]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305dd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b39d]\\n??:? runModuleUnitTests [0x42c309]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428918]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42889f]\\n??:? _d_run_main [0x42880a]\\n??:? main [0x4281eb]\\\
    n??:? __libc_start_main [0x63450554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    foreach (number;\
    \ numbers) {\n        result[i] = number;\n        i += 2;\n    }\n    i = 1;\n\
    \    foreach (number; numbers) {\n        result[i] = delimeter;\n        i +=\
    \ 2;\n    }\n    return result[0 .. $ - 1];\n}\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da8b]\\n??:? _d_newarrayT\
    \ [0x429810]\\n??:? long[] tmphxf3xel2.intersperse(long[], long) [0x427e51]\\\
    n??:? void tmphxf3xel2.__unittest_L26_C1() [0x427f9c]\\n??:? void tmphxf3xel2.__modtest()\
    \ [0x4281ec]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c54b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3de]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430669]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b18]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305f5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3b5]\\n??:? runModuleUnitTests [0x42c321]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428930]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288b7]\\n??:? _d_run_main [0x428822]\\n??:? main [0x4281ff]\\\
    n??:? __libc_start_main [0xe0b3c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    foreach (number;\
    \ numbers) {\n        result[i] = number;\n        i += 2;\n    }\n    i = 1;\n\
    \    foreach (number; numbers) {\n        result[i] = delimeter;\n        i +=\
    \ 2;\n    }\n    return result[0 .. result.length - 1];\n}\n/*\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    */\nlong[] intersperse2(long[] numbers, long delimeter) \n{\n    long[] result\
    \ = new long[numbers.length * 2 - 1];\n    int i = 0;\n    foreach (number; numbers)\
    \ {\n        result[i] = number;\n        i += 2;\n    }\n    i = 1;\n    foreach\
    \ (number; numbers) {\n        result[i] = delimeter;\n        i += 2;\n    }\n\
    \    return result[0 .. result.length - 1];\n}\n/*\n    >>> intersperse([], 4L)\n\
    \    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\n\
    long[] intersperse3(long[] numbers, long delimeter) \n{\n    long[] result = new\
    \ long[numbers.length * 2 - 1];\n    int i = 0;\n    foreach (number; numbers)\
    \ {\n        result[i] = number;\n        i += 2;\n    }\n    i = 1;\n    foreach\
    \ (number; numbers) {\n        result[i] = delimeter;\n        i += 2;\n    }\n\
    \    return result[0 .. result.length - 1];\n}\n/*\n    >>> intersperse([], 4L)\n\
    \    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuxmzt_v6.d(68): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuxmzt_v6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    foreach (i, e; numbers)\n  \
    \  {\n        result[2 * i] = e;\n        if (i < numbers.length - 1)\n      \
    \      result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpgm13aq65.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpgm13aq65.__unittest_L22_C1() [0x427f3c]\\n??:? void tmpgm13aq65.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0xa4daa554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\
    \ \n    {\n        result[i * 2] = number;\n        if (i != numbers.length -\
    \ 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n  \
    \  assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpvs69428g.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpvs69428g.__unittest_L24_C1() [0x427f3c]\\n??:? void tmpvs69428g.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0xb7a9c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[(numbers.length * 2) - 1];\n    int i = 0;\n    foreach (num;\
    \ numbers) {\n        result[i] = num;\n        i += 2;\n    }\n    i = 1;\n \
    \   foreach (num; numbers) {\n        result[i] = delimeter;\n        i += 2;\n\
    \    }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>>\
    \ intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse2(long[]\
    \ numbers, long delimeter) \n{\n    long[] result = new long[(numbers.length *\
    \ 2) - 1];\n    int i = 0;\n    foreach (num; numbers) {\n        result[i] =\
    \ num;\n        i += 2;\n    }\n    i = 1;\n    foreach (num; numbers) {\n   \
    \     result[i] = delimeter;\n        i += 2;\n    }\n    return result;\n}\n\
    /*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n\
    \    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse3(long[] numbers, long delimeter)\
    \ \n{\n    long[] result = new long[(numbers.length * 2) - 1];\n    int i = 0;\n\
    \    foreach (num; numbers) {\n        result[i] = num;\n        i += 2;\n   \
    \ }\n    i = 1;\n    foreach (num; numbers) {\n        result[i] = delimeter;\n\
    \        i += 2;\n    }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n\
    \    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\n\
    long[] intersperse4(long[] numbers, long delimeter)\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6zrf70oe.d(75): Error: semicolon expected following function\
    \ declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6zrf70oe.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\
    \ \n    {\n        result[i * 2] = number;\n        if (i != numbers.length -\
    \ 1)\n            result[i * 2 + 1] = delimeter;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpsvp1wjd3.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpsvp1wjd3.__unittest_L22_C1() [0x427f3c]\\n??:? void tmpsvp1wjd3.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x913b4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    foreach (number;\
    \ numbers) {\n        result[i] = number;\n        i += 2;\n    }\n    i = 1;\n\
    \    foreach (number; numbers) {\n        result[i] = delimeter;\n        i +=\
    \ 2;\n    }\n    return result[0 .. result.length - 1];\n}\nunittest\n{\n    alias\
    \ candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da8b]\\n??:? _d_newarrayT\
    \ [0x429810]\\n??:? long[] tmpa5_8g9md.intersperse(long[], long) [0x427e51]\\\
    n??:? void tmpa5_8g9md.__unittest_L26_C1() [0x427f9c]\\n??:? void tmpa5_8g9md.__modtest()\
    \ [0x4281ec]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c54b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3de]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430669]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b18]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305f5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3b5]\\n??:? runModuleUnitTests [0x42c321]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428930]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288b7]\\n??:? _d_run_main [0x428822]\\n??:? main [0x4281ff]\\\
    n??:? __libc_start_main [0xde943554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    foreach (i, n; numbers)\n  \
    \  {\n        result[2 * i] = n;\n        if (i < numbers.length - 1)\n      \
    \      result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\n/*\n    >>>\
    \ intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L,\
    \ 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n\
    \    long[] result = new long[2 * numbers.length - 1];\n    foreach (i, n; numbers)\n\
    \    {\n        result[2 * i] = n;\n        if (i < numbers.length - 1)\n    \
    \        result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\n/*\n  \
    \  >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n  \
    \  [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter)\
    \ \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i,\
    \ n; numbers)\n    {\n        result[2 * i] = n;\n        if (i < numbers.length\
    \ - 1)\n            result[2 * i + 1] = delimeter;\n    }\n    return result;\n\
    }\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L],\
    \ 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter)\
    \ \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i,\
    \ n; numbers)\n    {\n        result[2 * i] = n;\n        if (i < numbers.length\
    \ - 1)\n            result\nunittest\n{\n    alias candidate = intersperse;\n\n\
    \    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_comt3nd.d(70): Error: found `unittest` when expecting `;` following\
    \ statement\\n/tmp/tmp_comt3nd.d(78): Error: found `End of File` when expecting\
    \ `}` following compound statement\\n/tmp/tmp_comt3nd.d(78): Error: found `End\
    \ of File` when expecting `}` following compound statement\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_comt3nd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return numbers;\n    long[] result = new long[2 * numbers.length\
    \ - 1];\n    result[0] = numbers[0];\n    foreach (i, number; numbers[1 .. $])\
    \ {\n        result[2 * i] = delimeter;\n        result[2 * i + 1] = number;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpnb5fa0w6.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428455]\\n??:? void tmpnb5fa0w6.__unittest_L23_C1()\
    \ [0x428091]\\n??:? void tmpnb5fa0w6.__modtest() [0x4281d8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c533]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430651]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b00]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305dd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b39d]\\n??:? runModuleUnitTests [0x42c309]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428918]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42889f]\\n??:? _d_run_main [0x42880a]\\n??:? main [0x4281eb]\\\
    n??:? __libc_start_main [0x36983554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[(numbers.length * 2) - 1];\n    for (size_t i = 0; i < numbers.length;\
    \ i++) \n    {\n        result[i * 2] = numbers[i];\n        if (i != numbers.length\
    \ - 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da33]\\n??:? _d_newarrayT\
    \ [0x4297b8]\\n??:? long[] tmp3vzinmv_.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmp3vzinmv_.__unittest_L24_C1() [0x427f44]\\n??:? void tmp3vzinmv_.__modtest()\
    \ [0x428194]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4f3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b386]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430611]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43059d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b35d]\\n??:? runModuleUnitTests [0x42c2c9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42885f]\\n??:? _d_run_main [0x4287ca]\\n??:? main [0x4281a7]\\\
    n??:? __libc_start_main [0x21e93554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return [];\n    long[] result = new long[(numbers.length - 1)\
    \ * 2];\n    size_t j = 0;\n    for (size_t i = 0; i < numbers.length; i++) {\n\
    \        result[j] = numbers[i];\n        j++;\n        if (i != numbers.length\
    \ - 1) {\n            result[j] = delimeter;\n            j++;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpv392dzxw.d(18): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4284ee]\\n??:? long[] tmpv392dzxw.intersperse(long[],\
    \ long) [0x427ea8]\\n??:? void tmpv392dzxw.__unittest_L27_C1() [0x427ff6]\\n??:?\
    \ void tmpv392dzxw.__modtest() [0x4281bc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c51b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3ae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430639]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ae8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305c5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b385]\\n??:? runModuleUnitTests [0x42c2f1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428900]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428887]\\n??:? _d_run_main [0x4287f2]\\n??:? main [0x4281cf]\\\
    n??:? __libc_start_main [0x71cf0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\
    \ \n    {\n        result[i * 2] = number;\n        if (i != numbers.length -\
    \ 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n    }\n\
    \    return result;\n}\n/*\n    >>> is_prime(2L)\n    true\n    >>> is_prime(3L)\n\
    \    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(5L)\n    true\n \
    \   >>> is_prime(6L)\n    false\n    >>> is_prime(7L)\n    true\n    >>> is_prime(8L)\n\
    \    false\n    >>> is_prime(9L)\n    false\n    >>> is_prime(10L)\n    false\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(12L)\n    false\n    >>> is_prime(13L)\n\
    \    true\n    >>> is_prime(14L)\n    false\n    >>> is_prime(15L)\n    false\n\
    \    >>> is_prime(16L)\n    false\n    >>> is_prime(17L)\n    true\n    >>> is_prime(18L)\n\
    \    false\n    >>> is_prime(19L)\n    true\n    >>> is_prime(20L)\n    false\n\
    \    >>> is_prime(21L)\n    false\n    >>> is_prime(22L)\n    false\n    >>> is_prime(23L)\n\
    \    true\n    >>> is_prime(24L)\n    false\n    >>> is_prime(25L)\n    false\n\
    \    >>> is_prime(26L)\n    false\n    >>> is_prime(27L)\n    false\n    >>> is_prime(28L)\n\
    \    false\n    >>> is_prime(29L)\n    true\n    >>> is_prime(30L)\n    false\n\
    \    >>> is_prime(31L)\n    true\n    >>> is_prime(32L)\n    false\n    >>> is_prime(33L)\n\
    \    false\n    >>> is_\nunittest\n{\n    alias candidate = intersperse;\n\n \
    \   assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyhkke7h8.d(24): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyhkke7h8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[0L];\n    foreach (i, number; numbers) \n    {\n        if\
    \ (i != 0L) \n        {\n            result ~= delimeter;\n        }\n       \
    \ result ~= number;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return [];\n    long[] result = new long[(numbers.length - 1)\
    \ * 2];\n    size_t i = 0;\n    foreach (n; numbers)\n    {\n        result[i]\
    \ = n;\n        i += 2;\n    }\n    i = 1;\n    foreach (n; numbers[1 .. $])\n\
    \    {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return result;\n\
    }\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L],\
    \ 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter)\
    \ \n{\n    if (numbers.length == 0)\n        return [];\n    long[] result = new\
    \ long[(numbers.length - 1) * 2];\n    size_t i = 0;\n    foreach (n; numbers)\n\
    \    {\n        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n    foreach\
    \ (n; numbers[1 .. $])\n    {\n        result[i] = delimeter;\n        i += 2;\n\
    \    }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>>\
    \ intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[]\
    \ numbers, long delimeter) \n{\n    if (numbers.length == 0)\n        return [];\n\
    \    long[] result = new long[(numbers.length - 1) * 2];\n    size_t i = 0;\n\
    \    foreach (n; numbers)\n    {\n        result[i] = n;\n        i += 2;\n  \
    \  }\n    i = 1;\n    foreach (n; numbers[1 .. $])\n    {\n        result[i] =\
    \ delimeter;\n        i += 2;\n    }\n    return result;\nunittest\n{\n    alias\
    \ candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp4iq9vo8.d(79): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp4iq9vo8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return [];\n    long[] result = new long[numbers.length * 2 -\
    \ 1];\n    result[0] = numbers[0];\n    foreach (i, number; numbers[1 .. $])\n\
    \    {\n        result[i * 2] = delimeter;\n        result[i * 2 + 1] = number;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmptv_63b0q.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428465]\\n??:? void tmptv_63b0q.__unittest_L24_C1()\
    \ [0x42809d]\\n??:? void tmptv_63b0q.__modtest() [0x4281e4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c543]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3d6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430661]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b10]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3ad]\\n??:? runModuleUnitTests [0x42c319]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428928]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288af]\\n??:? _d_run_main [0x42881a]\\n??:? main [0x4281f7]\\\
    n??:? __libc_start_main [0x1c27d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\n\
    \    {\n        result[i * 2] = number;\n        if (i < numbers.length - 1)\n\
    \            result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpzt_wz7xq.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpzt_wz7xq.__unittest_L22_C1() [0x427f3c]\\n??:? void tmpzt_wz7xq.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x1b722554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers)\
    \ \n    {\n        result[2 * i] = number;\n        if (i < numbers.length - 1)\
    \ \n        {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n  \
    \  assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpbjvwaowf.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpbjvwaowf.__unittest_L24_C1() [0x427f3c]\\n??:? void tmpbjvwaowf.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x9fbf9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return [];\n    long[] result = new long[numbers.length * 2 -\
    \ 1];\n    foreach (i, e; numbers)\n    {\n        result[i * 2] = e;\n      \
    \  if (i != numbers.length - 1)\n            result[i * 2 + 1] = delimeter;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\
    \ \n    {\n        if (i != 0) \n        {\n            result[i * 2 - 1] = delimeter;\n\
    \        }\n        result[i * 2] = number;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmptcg_cgke.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmptcg_cgke.__unittest_L24_C1() [0x427f40]\\n??:? void tmptcg_cgke.__modtest()\
    \ [0x428190]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x4281a3]\\\
    n??:? __libc_start_main [0x5dcaa554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return [];\n    long[] result = new long[2 * numbers.length -\
    \ 1];\n    result[0] = numbers[0];\n    foreach (i, number; numbers[1 .. $])\n\
    \    {\n        result[2 * i - 1] = delimeter;\n        result[2 * i] = number;\n\
    \    }\n    return result;\n}\n/*\n Insert a number 'delimeter' between every\
    \ two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n\
    \    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n   \
    \ \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return [];\n    long[] result = new long[2 * numbers.length -\
    \ 1];\n    result[0] = numbers[0];\n    foreach (i, number; numbers[1 .. $])\n\
    \    {\n        result[2 * i - 1] = delimeter;\n        result[2 * i] = number;\n\
    \    }\n    return result;\n}\n/*\n Insert a number 'delimeter' between every\
    \ two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n\
    \    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n   \
    \ \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return [];\n    long[] result = new long[2 * numbers.length -\
    \ 1];\n    result[0] = numbers[0];\n    foreach (i, number; numbers[1 .. $])\n\
    \    {\n        result[2 * i - 1] = delimeter;\n        result[2 * i] = number;\n\
    \    }\n    return result;\n}\n/*\n Insert a number 'delimeter' between every\
    \ two consecutive elements of input array `numbers'\n    >>> intersperse([], 4L\n\
    unittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L)\
    \ == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L,\
    \ 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe2vpx4mj.d(66): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe2vpx4mj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\n\
    \    {\n        result[i * 2] = number;\n        if (i < numbers.length - 1)\n\
    \            result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmp2554m_nv.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmp2554m_nv.__unittest_L22_C1() [0x427f3c]\\n??:? void tmp2554m_nv.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x46739554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    foreach (i, n; numbers)\n  \
    \  {\n        result[2 * i] = n;\n        if (i < numbers.length - 1)\n      \
    \      result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpu424mwb2.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpu424mwb2.__unittest_L22_C1() [0x427f3c]\\n??:? void tmpu424mwb2.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0xf7d94554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\
    \ \n    {\n        result[i * 2] = number;\n        if (i != numbers.length -\
    \ 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n  \
    \  assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpi5o19w4j.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpi5o19w4j.__unittest_L24_C1() [0x427f3c]\\n??:? void tmpi5o19w4j.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0xaba7e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return numbers;\n    long[] result = new long[(numbers.length\
    \ - 1) * 2];\n    foreach (i, e; numbers) {\n        result[i * 2] = e;\n    \
    \    if (i != numbers.length - 1)\n            result[i * 2 + 1] = delimeter;\n\
    \    }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>>\
    \ intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[]\
    \ numbers, long delimeter) \n{\n    if (numbers.length == 0)\n        return numbers;\n\
    \    long[] result = new long[(numbers.length - 1) * 2];\n    foreach (i, e; numbers)\
    \ {\n        result[i * 2] = e;\n        if (i != numbers.length - 1)\n      \
    \      result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}\n/*\n    >>>\
    \ intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L,\
    \ 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n\
    \    if (numbers.length == 0)\n        return numbers;\n    long[] result = new\
    \ long[(numbers.length - 1) * 2];\n    foreach (i, e; numbers) {\n        result[i\
    \ * 2] = e;\n        if (i != numbers.length - 1)\n            result[i * 2 +\
    \ 1] = delimeter;\n    }\n    return result;\n}\n/*\n    >>> intersperse([], 4L)\n\
    \    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\n\
    long[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfz0acvh4.d(68): Error: found `unittest` when expecting `)`\\\
    n/tmp/tmpfz0acvh4.d(76): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfz0acvh4.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return numbers;\n    long[] result = new long[2 * numbers.length\
    \ - 1];\n    result[0] = numbers[0];\n    foreach (i, number; numbers[1 .. $])\n\
    \    {\n        result[2 * i] = delimeter;\n        result[2 * i + 1] = number;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8cby7g0s.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428455]\\n??:? void tmp8cby7g0s.__unittest_L24_C1()\
    \ [0x428091]\\n??:? void tmp8cby7g0s.__modtest() [0x4281d8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c533]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430651]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b00]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305dd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b39d]\\n??:? runModuleUnitTests [0x42c309]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428918]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42889f]\\n??:? _d_run_main [0x42880a]\\n??:? main [0x4281eb]\\\
    n??:? __libc_start_main [0xe666e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\
    \ \n    {\n        result[i * 2] = number;\n        if (i != numbers.length -\
    \ 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n  \
    \  assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpmnyqukod.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpmnyqukod.__unittest_L24_C1() [0x427f3c]\\n??:? void tmpmnyqukod.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0xb00fa554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return [];\n    long[] result = new long[2 * numbers.length -\
    \ 1];\n    result[0] = numbers[0];\n    foreach (i, number; numbers[1 .. $])\n\
    \    {\n        result[2 * i - 1] = delimeter;\n        result[2 * i] = number;\n\
    \    }\n    return result;\n}\n/*\n    >>> is_prime(0L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    >>> is_prime(2L)\n    true\n    >>> is_prime(3L)\n    true\n \
    \   >>> is_prime(4L)\n    false\n    >>> is_prime(5L)\n    true\n    >>> is_prime(6L)\n\
    \    false\n    >>> is_prime(7L)\n    true\n    >>> is_prime(8L)\n    false\n\
    \    >>> is_prime(9L)\n    false\n    >>> is_prime(10L)\n    false\n    >>> is_prime(11L)\n\
    \    true\n    >>> is_prime(12L)\n    false\n    >>> is_prime(13L)\n    true\n\
    \    >>> is_prime(14L)\n    false\n    >>> is_prime(15L)\n    false\n    >>> is_prime(16L)\n\
    \    false\n    >>> is_prime(17L)\n    true\n    >>> is_prime(18L)\n    false\n\
    \    >>> is_prime(19L)\n    true\n    >>> is_prime(20L)\n    false\n    >>> is_prime(21L)\n\
    \    false\n    >>> is_prime(22L)\n    false\n    >>> is_prime(23L)\n    true\n\
    \    >>> is_prime(24L)\n    false\n    >>> is_prime(25L)\n    false\n    >>> is_prime(26L)\n\
    \    false\n    >>> is_prime(27L)\n    false\n    >>> is_prime(28L)\n    false\n\
    \    >>> is_prime(29L)\n    true\n    >>> is_prime(30L)\n    false\n    >>> is_prime(31L\n\
    unittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L)\
    \ == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L,\
    \ 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2d8vzaxy.d(24): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2d8vzaxy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    foreach (i, x; numbers) \n \
    \   {\n        result[2 * i] = x;\n        if (i < numbers.length - 1) \n    \
    \    {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmppdu5f63s.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmppdu5f63s.__unittest_L24_C1() [0x427f3c]\\n??:? void tmppdu5f63s.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x3df45554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return numbers;\n    long[] result = new long[2 * numbers.length\
    \ - 1];\n    result[0] = numbers[0];\n    foreach (i, number; numbers[1 .. $])\n\
    \    {\n        result[2 * i] = delimeter;\n        result[2 * i + 1] = number;\n\
    \    }\n    return result;\n}\n/*\n    >>> is_prime(2L)\n    true\n    >>> is_prime(3L)\n\
    \    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(5L)\n    true\n \
    \   >>> is_prime(6L)\n    false\n    >>> is_prime(7L)\n    true\n    >>> is_prime(8L)\n\
    \    false\n    >>> is_prime(9L)\n    false\n    >>> is_prime(10L)\n    false\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(12L)\n    false\n    >>> is_prime(13L)\n\
    \    true\n    >>> is_prime(14L)\n    false\n    >>> is_prime(15L)\n    false\n\
    \    >>> is_prime(16L)\n    false\n    >>> is_prime(17L)\n    true\n    >>> is_prime(18L)\n\
    \    false\n    >>> is_prime(19L)\n    true\n    >>> is_prime(20L)\n    false\n\
    \    >>> is_prime(21L)\n    false\n    >>> is_prime(22L)\n    false\n    >>> is_prime(23L)\n\
    \    true\n    >>> is_prime(24L)\n    false\n    >>> is_prime(25L)\n    false\n\
    \    >>> is_prime(26L)\n    false\n    >>> is_prime(27L)\n    false\n    >>> is_prime(28L)\n\
    \    false\n    >>> is_prime(29L)\n    true\n    >>> is_prime(30L)\n    false\n\
    \    >>> is_prime(31L)\n    true\n    >>> is_prime(32L)\n    false\n    >>> is_prime(33\n\
    unittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L)\
    \ == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L,\
    \ 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp451m9cgt.d(24): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp451m9cgt.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers)\n\
    \    {\n        result[2 * i] = number;\n        if (i < numbers.length - 1)\n\
    \            result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpe7e3s4ds.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpe7e3s4ds.__unittest_L22_C1() [0x427f3c]\\n??:? void tmpe7e3s4ds.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0xea7ac554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\
    \ \n    {\n        if (i != 0) \n        {\n            result[i * 2 - 1] = delimeter;\n\
    \        }\n        result[i * 2] = number;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmp2n93z_f9.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmp2n93z_f9.__unittest_L24_C1() [0x427f40]\\n??:? void tmp2n93z_f9.__modtest()\
    \ [0x428190]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x4281a3]\\\
    n??:? __libc_start_main [0x6426c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    foreach (i, n; numbers) \n \
    \   {\n        result[2 * i] = n;\n        if (i < numbers.length - 1) \n    \
    \    {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpfixv2mek.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpfixv2mek.__unittest_L24_C1() [0x427f3c]\\n??:? void tmpfixv2mek.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x5607b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    for (size_t i = 0; i < numbers.length;\
    \ i++) \n    {\n        result[2 * i] = numbers[i];\n        if (i < numbers.length\
    \ - 1) \n        {\n            result[2 * i + 1] = delimeter;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da33]\\n??:? _d_newarrayT\
    \ [0x4297b8]\\n??:? long[] tmpqkuvfbym.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpqkuvfbym.__unittest_L24_C1() [0x427f44]\\n??:? void tmpqkuvfbym.__modtest()\
    \ [0x428194]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4f3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b386]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430611]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43059d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b35d]\\n??:? runModuleUnitTests [0x42c2c9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42885f]\\n??:? _d_run_main [0x4287ca]\\n??:? main [0x4281a7]\\\
    n??:? __libc_start_main [0xfb86554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return [];\n    long[] result = new long[2 * numbers.length -\
    \ 1];\n    foreach (i, number; numbers)\n    {\n        result[2 * i] = number;\n\
    \        if (i < numbers.length - 1)\n            result[2 * i + 1] = delimeter;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    foreach (n;\
    \ numbers) {\n        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n   \
    \ foreach (n; numbers) {\n        result[i] = delimeter;\n        i += 2;\n  \
    \  }\n    return result[0 .. result.length - 1];\n}\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da8b]\\n??:? _d_newarrayT\
    \ [0x429810]\\n??:? long[] tmp5trpypq4.intersperse(long[], long) [0x427e51]\\\
    n??:? void tmp5trpypq4.__unittest_L26_C1() [0x427f9c]\\n??:? void tmp5trpypq4.__modtest()\
    \ [0x4281ec]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c54b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3de]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430669]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b18]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305f5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3b5]\\n??:? runModuleUnitTests [0x42c321]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428930]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288b7]\\n??:? _d_run_main [0x428822]\\n??:? main [0x4281ff]\\\
    n??:? __libc_start_main [0x72211554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return [];\n    long[] result = new long[2 * numbers.length -\
    \ 1];\n    foreach (i, number; numbers)\n    {\n        result[2 * i] = number;\n\
    \        if (i != numbers.length - 1)\n            result[2 * i + 1] = delimeter;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    foreach (i, e; numbers)\n  \
    \  {\n        result[i * 2] = e;\n        if (i < numbers.length - 1)\n      \
    \      result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmp57srz_e2.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmp57srz_e2.__unittest_L22_C1() [0x427f3c]\\n??:? void tmp57srz_e2.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x71a1a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[(numbers.length * 2) - 1];\n    foreach (i, e; numbers)\n\
    \    {\n        result[i * 2] = e;\n        if (i != numbers.length - 1)\n   \
    \         result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpthu64q5a.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpthu64q5a.__unittest_L22_C1() [0x427f3c]\\n??:? void tmpthu64q5a.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0xb5224554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return numbers;\n    long[] result = new long[2 * numbers.length\
    \ - 1];\n    result[0] = numbers[0];\n    foreach (i, number; numbers[1 .. $])\n\
    \    {\n        result[2 * i] = delimeter;\n        result[2 * i + 1] = number;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpk9zqja74.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428455]\\n??:? void tmpk9zqja74.__unittest_L24_C1()\
    \ [0x428091]\\n??:? void tmpk9zqja74.__modtest() [0x4281d8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c533]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430651]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b00]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305dd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b39d]\\n??:? runModuleUnitTests [0x42c309]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428918]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42889f]\\n??:? _d_run_main [0x42880a]\\n??:? main [0x4281eb]\\\
    n??:? __libc_start_main [0x3af73554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\
    \ \n    {\n        result[i * 2] = number;\n        if (i < numbers.length - 1)\
    \ \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n  \
    \  assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpd8tztf1l.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpd8tztf1l.__unittest_L24_C1() [0x427f3c]\\n??:? void tmpd8tztf1l.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x1e417554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return [];\n    long[] result = new long[2 * numbers.length -\
    \ 1];\n    result[0] = numbers[0];\n    foreach (i, number; numbers[1 .. $]) {\n\
    \        result[2 * i - 1] = delimeter;\n        result[2 * i] = number;\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n\
    \    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp0q5g80rq.d(18): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428516]\\n??:? long[] tmp0q5g80rq.intersperse(long[],\
    \ long) [0x427f26]\\n??:? void tmp0q5g80rq.__unittest_L23_C1() [0x42801e]\\n??:?\
    \ void tmp0q5g80rq.__modtest() [0x4281e4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c543]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3d6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430661]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b10]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3ad]\\n??:? runModuleUnitTests [0x42c319]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428928]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288af]\\n??:? _d_run_main [0x42881a]\\n??:? main [0x4281f7]\\\
    n??:? __libc_start_main [0xf907e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    foreach (i, e; numbers)\n  \
    \  {\n        result[2 * i] = e;\n        if (i != numbers.length - 1)\n     \
    \       result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpp9ci589u.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpp9ci589u.__unittest_L22_C1() [0x427f3c]\\n??:? void tmpp9ci589u.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x2ee5f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    for (long i = 0; i < numbers.length;\
    \ i++) \n    {\n        result[i * 2] = numbers[i];\n        if (i != numbers.length\
    \ - 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da33]\\n??:? _d_newarrayT\
    \ [0x4297b8]\\n??:? long[] tmptr417are.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmptr417are.__unittest_L24_C1() [0x427f44]\\n??:? void tmptr417are.__modtest()\
    \ [0x428194]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4f3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b386]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430611]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43059d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b35d]\\n??:? runModuleUnitTests [0x42c2c9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42885f]\\n??:? _d_run_main [0x4287ca]\\n??:? main [0x4281a7]\\\
    n??:? __libc_start_main [0xbfc67554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    int j = 0;\n    for (int i =\
    \ 0; i < numbers.length; i++) \n    {\n        result[j] = numbers[i];\n     \
    \   j++;\n        if (i != numbers.length - 1) \n        {\n            result[j]\
    \ = delimeter;\n            j++;\n        }\n    }\n    return result;\n}\n/*\n\
    \    >>> is_prime(1L)\n    false\n    >>> is_prime(2L)\n    true\n    >>> is_prime(3L)\n\
    \    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(5L)\n    true\n \
    \   >>> is_prime(6L)\n    false\n    >>> is_prime(7L)\n    true\n    >>> is_prime(8L)\n\
    \    false\n    >>> is_prime(9L)\n    false\n    >>> is_prime(10L)\n    false\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(12L)\n    false\n    >>> is_prime(13L)\n\
    \    true\n    >>> is_prime(14L)\n    false\n    >>> is_prime(15L)\n    false\n\
    \    >>> is_prime(16L)\n    false\n    >>> is_prime(17L)\n    true\n    >>> is_prime(18L)\n\
    \    false\n    >>> is_prime(19L)\n    true\n    >>> is_prime(20L)\n    false\n\
    \    >>> is_prime(21L)\n    false\n    >>> is_prime(22L)\n    false\n    >>> is_prime(23L)\n\
    \    true\n    >>> is_prime(24L)\n    false\n    >>> is_prime(25L)\n    false\n\
    \    >>> is_prime(26L)\n    false\n    >>> is_prime(27L)\n    false\n    >>> is_prime(28L)\n\
    \    false\n    >>> is_prime(29L)\n    true\n    >>> is_prime(30L)\n    false\n\
    \    >>> is_prime(31L)\n    true\n   \nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb15jlw5s.d(27): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb15jlw5s.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    foreach (i, n; numbers)\n  \
    \  {\n        result[2 * i] = n;\n        if (i < numbers.length - 1)\n      \
    \      result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\n/*\n    >>>\
    \ split([1L, 2L, 3L, 4L, 5L], 2L)\n    [[1L, 2L], [3L, 4L], [5L]]\n    >>> split([1L,\
    \ 2L, 3L, 4L, 5L], 1L)\n    [[1L], [2L], [3L], [4L], [5L]]\n    >>> split([1L,\
    \ 2L, 3L, 4L, 5L], 0L)\n    [[1L, 2L, 3L, 4L, 5L]]\n    >>> split([1L, 2L, 3L,\
    \ 4L, 5L], 6L)\n    [[1L, 2L, 3L, 4L, 5L]]\n    >>> split([1L, 2L, 3L, 4L, 5L],\
    \ -1L)\n    [[1L, 2L, 3L, 4L, 5L]]\n    >>> split([1L, 2L, 3L, 4L, 5L], -2L)\n\
    \    [[1L, 2L, 3L, 4L, 5L]]\n    >>> split([1L, 2L, 3L, 4L, 5L], -3L)\n    [[1L,\
    \ 2L, 3L, 4L, 5L]]\n    >>> split([1L, 2L, 3L, 4L, 5L], -4L)\n    [[1L, 2L, 3L,\
    \ 4L, 5L]]\n    >>> split([1L, 2L, 3L, 4L, 5L], -5L)\n    [[1L, 2L, 3L, 4L, 5L]]\n\
    \    >>> split([1L, 2L, 3L, 4L, 5L], -6L)\n    [[1L, 2L, 3L, 4L, 5L]]\n    >>>\
    \ split([1L,\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpad4igd6k.d(22): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpad4igd6k.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    foreach (i, n; numbers)\n  \
    \  {\n        result[2 * i] = n;\n        if (i < numbers.length - 1)\n      \
    \      result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpoa_0_cfv.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpoa_0_cfv.__unittest_L22_C1() [0x427f3c]\\n??:? void tmpoa_0_cfv.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0xb215c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0) \n    {\n        return numbers;\n    }\n    else \n    {\n        long[]\
    \ result = new long[2 * numbers.length - 1];\n        result[0] = numbers[0];\n\
    \        foreach (i, number; numbers[1 .. $]) \n        {\n            result[2\
    \ * i] = delimeter;\n            result[2 * i + 1] = number;\n        }\n    \
    \    return result;\n    }\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>>\
    \ intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[]\
    \ numbers, long delimeter) \n{\n    if (numbers.length == 0) \n    {\n       \
    \ return numbers;\n    }\n    else \n    {\n        long[] result = new long[2\
    \ * numbers.length - 1];\n        result[0] = numbers[0];\n        foreach (i,\
    \ number; numbers[1 .. $]) \n        {\n            result[2 * i] = delimeter;\n\
    \            result[2 * i + 1] = number;\n        }\n        return result;\n\
    \    }\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L,\
    \ 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long\
    \ delimeter) \n{\n    if (numbers.length == 0) \n    {\n        return numbers;\n\
    \    }\n    else \n    {\n        long[] result = new long[2 * numbers.length\
    \ - 1];\n        result[0] = numbers[0];\n        foreach (i, number; numbers[1\
    \ .. $]) \n        {\n            result[2 * i] = delimeter;\n            result[2\
    \ * i + 1] = number;\n        }\n        return result;\n    }\n}\n/*\n    >>>\
    \ intersperse([], 4L)\n    []\n    >>>\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd8995uo1.d(77): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd8995uo1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    foreach (number;\
    \ numbers) {\n        result[i] = number;\n        i += 2;\n    }\n    i = 1;\n\
    \    foreach (number; numbers) {\n        result[i] = delimeter;\n        i +=\
    \ 2;\n    }\n    return result[0 .. result.length - 1];\n}\nunittest\n{\n    alias\
    \ candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da8b]\\n??:? _d_newarrayT\
    \ [0x429810]\\n??:? long[] tmp5t8ro8ck.intersperse(long[], long) [0x427e51]\\\
    n??:? void tmp5t8ro8ck.__unittest_L26_C1() [0x427f9c]\\n??:? void tmp5t8ro8ck.__modtest()\
    \ [0x4281ec]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c54b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3de]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430669]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b18]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305f5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3b5]\\n??:? runModuleUnitTests [0x42c321]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428930]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288b7]\\n??:? _d_run_main [0x428822]\\n??:? main [0x4281ff]\\\
    n??:? __libc_start_main [0xff294554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    foreach (n;\
    \ numbers) {\n        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n   \
    \ foreach (n; numbers) {\n        result[i] = delimeter;\n        i += 2;\n  \
    \  }\n    return result[0 .. result.length - 1];\n}\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da8b]\\n??:? _d_newarrayT\
    \ [0x429810]\\n??:? long[] tmp8_qcb7p4.intersperse(long[], long) [0x427e51]\\\
    n??:? void tmp8_qcb7p4.__unittest_L26_C1() [0x427f9c]\\n??:? void tmp8_qcb7p4.__modtest()\
    \ [0x4281ec]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c54b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3de]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430669]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b18]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305f5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3b5]\\n??:? runModuleUnitTests [0x42c321]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428930]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288b7]\\n??:? _d_run_main [0x428822]\\n??:? main [0x4281ff]\\\
    n??:? __libc_start_main [0x5d909554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0) \n    {\n        return [];\n    }\n    auto result = new long[2 * numbers.length\
    \ - 1];\n    result[0] = numbers[0];\n    foreach (i, number; numbers[1 .. $])\
    \ \n    {\n        result[2 * i] = delimeter;\n        result[2 * i + 1] = number;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpzkggh_xr.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428465]\\n??:? void tmpzkggh_xr.__unittest_L26_C1()\
    \ [0x42809d]\\n??:? void tmpzkggh_xr.__modtest() [0x4281e4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c543]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3d6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430661]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b10]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3ad]\\n??:? runModuleUnitTests [0x42c319]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428928]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288af]\\n??:? _d_run_main [0x42881a]\\n??:? main [0x4281f7]\\\
    n??:? __libc_start_main [0xf3a91554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\n\
    \    {\n        result[i * 2] = number;\n        if (i != numbers.length - 1)\n\
    \            result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpuialt4pr.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpuialt4pr.__unittest_L22_C1() [0x427f3c]\\n??:? void tmpuialt4pr.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0xf5cfb554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    for (size_t i = 0; i < numbers.length;\
    \ i++) \n    {\n        result[i * 2] = numbers[i];\n        if (i != numbers.length\
    \ - 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da33]\\n??:? _d_newarrayT\
    \ [0x4297b8]\\n??:? long[] tmpjnijtkia.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpjnijtkia.__unittest_L24_C1() [0x427f44]\\n??:? void tmpjnijtkia.__modtest()\
    \ [0x428194]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4f3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b386]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430611]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43059d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b35d]\\n??:? runModuleUnitTests [0x42c2c9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42885f]\\n??:? _d_run_main [0x4287ca]\\n??:? main [0x4281a7]\\\
    n??:? __libc_start_main [0x1945e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\n\
    \    {\n        result[i * 2] = number;\n        if (i != numbers.length - 1)\n\
    \            result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpdwn7ayt_.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpdwn7ayt_.__unittest_L22_C1() [0x427f3c]\\n??:? void tmpdwn7ayt_.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0xbeff5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    for (size_t i = 0; i < numbers.length;\
    \ i++) \n    {\n        result[i * 2] = numbers[i];\n        if (i < numbers.length\
    \ - 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n  \
    \  }\n    return result;\n}\n/*\n    >>> is_prime(1L)\n    false\n    >>> is_prime(2L)\n\
    \    true\n    >>> is_prime(3L)\n    true\n    >>> is_prime(4L)\n    false\n \
    \   >>> is_prime(5L)\n    true\n    >>> is_prime(6L)\n    false\n    >>> is_prime(7L)\n\
    \    true\n    >>> is_prime(8L)\n    false\n    >>> is_prime(9L)\n    false\n\
    \    >>> is_prime(10L)\n    false\n    >>> is_prime(11L)\n    true\n    >>> is_prime(12L)\n\
    \    false\n    >>> is_prime(13L)\n    true\n    >>> is_prime(14L)\n    false\n\
    \    >>> is_prime(15L)\n    false\n    >>> is_prime(16L)\n    false\n    >>> is_prime(17L)\n\
    \    true\n    >>> is_prime(18L)\n    false\n    >>> is_prime(19L)\n    true\n\
    \    >>> is_prime(20L)\n    false\n    >>> is_prime(21L)\n    false\n    >>> is_prime(22L)\n\
    \    false\n    >>> is_prime(23L)\n    true\n    >>> is_prime(24L)\n    false\n\
    \    >>> is_prime(25L)\n    false\n    >>> is_prime(26L)\n    false\n    >>> is_prime(27L)\n\
    \    false\n    >>> is_prime(28L)\n    false\n    >>> is_prime(29L)\n    true\n\
    \    >>> is_prime(30L)\n    false\n    >>> is_prime(31L)\n    true\n    >>> is_prime(32\n\
    unittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L)\
    \ == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L,\
    \ 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmeyx3e5q.d(24): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmeyx3e5q.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return [];\n    long[] result = new long[2 * numbers.length -\
    \ 1];\n    result[0] = numbers[0];\n    foreach (i, number; numbers[1 .. $])\n\
    \    {\n        result[2 * i - 1] = delimeter;\n        result[2 * i] = number;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpzlqa31pg.d(19): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428516]\\n??:? long[] tmpzlqa31pg.intersperse(long[],\
    \ long) [0x427f26]\\n??:? void tmpzlqa31pg.__unittest_L24_C1() [0x42801e]\\n??:?\
    \ void tmpzlqa31pg.__modtest() [0x4281e4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c543]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3d6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430661]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b10]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3ad]\\n??:? runModuleUnitTests [0x42c319]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428928]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288af]\\n??:? _d_run_main [0x42881a]\\n??:? main [0x4281f7]\\\
    n??:? __libc_start_main [0x5fd3b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    foreach (i, e; numbers)\n  \
    \  {\n        result[2 * i] = e;\n        if (i < numbers.length - 1)\n      \
    \      result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpp1qr22z2.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpp1qr22z2.__unittest_L22_C1() [0x427f3c]\\n??:? void tmpp1qr22z2.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x6f15c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    for (size_t i = 0; i < numbers.length;\
    \ i++)\n    {\n        result[2 * i] = numbers[i];\n        if (i != numbers.length\
    \ - 1)\n            result[2 * i + 1] = delimeter;\n    }\n    return result;\n\
    }\n/*\n    >>> is_sorted([])\n    true\n    >>> is_sorted([1L, 2L, 3L])\n    true\n\
    \    >>> is_sorted([1L, 3L, 2L])\n    false\n*/\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da33]\\n??:? _d_newarrayT\
    \ [0x4297b8]\\n??:? long[] tmpephdmtc3.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpephdmtc3.__unittest_L30_C1() [0x427f44]\\n??:? void tmpephdmtc3.__modtest()\
    \ [0x428194]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4f3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b386]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430611]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43059d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b35d]\\n??:? runModuleUnitTests [0x42c2c9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42885f]\\n??:? _d_run_main [0x4287ca]\\n??:? main [0x4281a7]\\\
    n??:? __libc_start_main [0xeece2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\
    \ \n    {\n        result[i * 2] = number;\n        if (i != numbers.length -\
    \ 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n    }\n\
    \    return result;\n}\n/*\n    >>> is_prime(1L)\n    false\n    >>> is_prime(2L)\n\
    \    true\n    >>> is_prime(3L)\n    true\n    >>> is_prime(4L)\n    false\n \
    \   >>> is_prime(5L)\n    true\n    >>> is_prime(6L)\n    false\n    >>> is_prime(7L)\n\
    \    true\n    >>> is_prime(8L)\n    false\n    >>> is_prime(9L)\n    false\n\
    \    >>> is_prime(10L)\n    false\n    >>> is_prime(11L)\n    true\n    >>> is_prime(12L)\n\
    \    false\n    >>> is_prime(13L)\n    true\n    >>> is_prime(14L)\n    false\n\
    \    >>> is_prime(15L)\n    false\n    >>> is_prime(16L)\n    false\n    >>> is_prime(17L)\n\
    \    true\n    >>> is_prime(18L)\n    false\n    >>> is_prime(19L)\n    true\n\
    \    >>> is_prime(20L)\n    false\n    >>> is_prime(21L)\n    false\n    >>> is_prime(22L)\n\
    \    false\n    >>> is_prime(23L)\n    true\n    >>> is_prime(24L)\n    false\n\
    \    >>> is_prime(25L)\n    false\n    >>> is_prime(26L)\n    false\n    >>> is_prime(27L)\n\
    \    false\n    >>> is_prime(28L)\n    false\n    >>> is_prime(29L)\n    true\n\
    \    >>> is_prime(30L)\n    false\n    >>> is_prime(31L)\n    true\n    >>> is_prime(32L)\n\
    \    false\n    >>> is_\nunittest\n{\n    alias candidate = intersperse;\n\n \
    \   assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnvkd2d3v.d(24): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnvkd2d3v.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return [];\n    long[] result = new long[2 * numbers.length -\
    \ 1];\n    result[0] = numbers[0];\n    foreach (i, number; numbers[1 .. $])\n\
    \    {\n        result[2 * i - 1] = delimeter;\n        result[2 * i] = number;\n\
    \    }\n    return result;\n}\n/*\n    >>> intersperse([], 4.0)\n    []\n    >>>\
    \ intersperse([1.0, 2.0, 3.0], 4.0)\n    [1.0, 4.0, 2.0, 4.0, 3.0]\n*/\ndouble[]\
    \ intersperse(double[] numbers, double delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return [];\n    double[] result = new double[2 * numbers.length\
    \ - 1];\n    result[0] = numbers[0];\n    foreach (i, number; numbers[1 .. $])\n\
    \    {\n        result[2 * i - 1] = delimeter;\n        result[2 * i] = number;\n\
    \    }\n    return result;\n}\n/*\n    >>> intersperse([], \"a\")\n    []\n  \
    \  >>> intersperse([\"a\", \"b\", \"c\"], \"d\")\n    [\"a\", \"d\", \"b\", \"\
    d\", \"c\"]\n*/\nstring[] intersperse(string[] strings, string delimeter) \n{\n\
    \    if (strings.length == 0)\n        return [];\n    string[] result = new string[2\
    \ * strings.length - 1];\n    result[0] = strings[0];\n    foreach (i, str; strings[1\
    \ .. $])\n    {\n        result[2 * i - 1] = delimeter;\n        result[2 * i]\
    \ = str;\n    }\n    return result;\n}\n/*\n    >>> intersperse([], [1L, 2L])\n\
    \    []\n    >>> intersperse([[1L, 2L], [3L, 4L], [5L, 6L]], [7L, 8L])\n    [[1L,\
    \ 2L], [7L\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxaar9u91.d(62): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxaar9u91.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[(numbers.length * 2) - 1];\n    foreach (i, number; numbers)\n\
    \    {\n        result[i * 2] = number;\n        if (i != numbers.length - 1)\n\
    \            result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpdeoklkr9.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpdeoklkr9.__unittest_L22_C1() [0x427f3c]\\n??:? void tmpdeoklkr9.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x5206554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[(numbers.length * 2) - 1];\n    int i = 0;\n    foreach (n;\
    \ numbers)\n    {\n        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n\
    \    foreach (n; numbers)\n    {\n        result[i] = delimeter;\n        i +=\
    \ 2;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da6b]\\n??:? _d_newarrayT\
    \ [0x4297f0]\\n??:? long[] tmp5yjbox67.intersperse(long[], long) [0x427e51]\\\
    n??:? void tmp5yjbox67.__unittest_L28_C1() [0x427f7c]\\n??:? void tmp5yjbox67.__modtest()\
    \ [0x4281cc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c52b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3be]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430649]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430af8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305d5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b395]\\n??:? runModuleUnitTests [0x42c301]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428910]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428897]\\n??:? _d_run_main [0x428802]\\n??:? main [0x4281df]\\\
    n??:? __libc_start_main [0x6e209554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers)\
    \ \n    {\n        result[2 * i] = number;\n        if (i < numbers.length - 1)\
    \ \n        {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n  \
    \  assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpq5fl52yd.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpq5fl52yd.__unittest_L24_C1() [0x427f3c]\\n??:? void tmpq5fl52yd.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x6d74a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers)\
    \ \n    {\n        result[2 * i] = number;\n        if (i < numbers.length - 1)\
    \ \n        {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n  \
    \  assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmp84c1o1hh.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmp84c1o1hh.__unittest_L24_C1() [0x427f3c]\\n??:? void tmp84c1o1hh.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x69cdb554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    return\
    \ numbers.map!((x) => x ~ delimeter).joiner.array;\n}\nunittest\n{\n    alias\
    \ candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp58395yn0.d(13): Error: no property `map` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp58395yn0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\n\
    \    {\n        result[i * 2] = number;\n        if (i < numbers.length - 1)\n\
    \            result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpr4uos4qz.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpr4uos4qz.__unittest_L22_C1() [0x427f3c]\\n??:? void tmpr4uos4qz.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0xf381554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    foreach (n;\
    \ numbers) {\n        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n   \
    \ foreach (n; numbers) {\n        result[i] = delimeter;\n        i += 2;\n  \
    \  }\n    return result[0 .. result.length - 1];\n}\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da8b]\\n??:? _d_newarrayT\
    \ [0x429810]\\n??:? long[] tmpuuylkd77.intersperse(long[], long) [0x427e51]\\\
    n??:? void tmpuuylkd77.__unittest_L26_C1() [0x427f9c]\\n??:? void tmpuuylkd77.__modtest()\
    \ [0x4281ec]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c54b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3de]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430669]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b18]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305f5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3b5]\\n??:? runModuleUnitTests [0x42c321]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428930]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288b7]\\n??:? _d_run_main [0x428822]\\n??:? main [0x4281ff]\\\
    n??:? __libc_start_main [0x2e672554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\n\
    \    {\n        result[i * 2] = number;\n        if (i != numbers.length - 1)\n\
    \            result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}\n/*\n\
    \    >>> is_prime(2L)\n    true\n    >>> is_prime(3L)\n    true\n    >>> is_prime(4L)\n\
    \    false\n    >>> is_prime(5L)\n    true\n    >>> is_prime(6L)\n    false\n\
    \    >>> is_prime(7L)\n    true\n    >>> is_prime(8L)\n    false\n    >>> is_prime(9L)\n\
    \    false\n    >>> is_prime(10L)\n    false\n    >>> is_prime(11L)\n    true\n\
    \    >>> is_prime(12L)\n    false\n    >>> is_prime(13L)\n    true\n    >>> is_prime(14L)\n\
    \    false\n    >>> is_prime(15L)\n    false\n    >>> is_prime(16L)\n    false\n\
    \    >>> is_prime(17L)\n    true\n    >>> is_prime(18L)\n    false\n    >>> is_prime(19L)\n\
    \    true\n    >>> is_prime(20L)\n    false\n    >>> is_prime(21L)\n    false\n\
    \    >>> is_prime(22L)\n    false\n    >>> is_prime(23L)\n    true\n    >>> is_prime(24L)\n\
    \    false\n    >>> is_prime(25L)\n    false\n    >>> is_prime(26L)\n    false\n\
    \    >>> is_prime(27L)\n    false\n    >>> is_prime(28L)\n    false\n    >>> is_prime(29L)\n\
    \    true\n    >>> is_prime(30L)\n    false\n    >>> is_prime(31L)\n    true\n\
    \    >>> is_prime(32L)\n    false\n    >>> is_prime(33L)\n    false\n    >>> is_prime(34L)\n\
    \    false\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8vkv9gkv.d(22): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8vkv9gkv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers)\
    \ \n    {\n        result[2 * i] = number;\n        if (i != numbers.length -\
    \ 1) \n        {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n  \
    \  assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpc6jil20y.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpc6jil20y.__unittest_L24_C1() [0x427f3c]\\n??:? void tmpc6jil20y.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x70150554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return [];\n    long[] result = new long[2 * numbers.length -\
    \ 1];\n    result[0] = numbers[0];\n    foreach (i, number; numbers[1 .. $])\n\
    \    {\n        result[2 * i - 1] = delimeter;\n        result[2 * i] = number;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpgnfip1lq.d(19): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428516]\\n??:? long[] tmpgnfip1lq.intersperse(long[],\
    \ long) [0x427f26]\\n??:? void tmpgnfip1lq.__unittest_L24_C1() [0x42801e]\\n??:?\
    \ void tmpgnfip1lq.__modtest() [0x4281e4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c543]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3d6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430661]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b10]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3ad]\\n??:? runModuleUnitTests [0x42c319]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428928]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288af]\\n??:? _d_run_main [0x42881a]\\n??:? main [0x4281f7]\\\
    n??:? __libc_start_main [0xbf3ba554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers)\n\
    \    {\n        result[2 * i] = number;\n        if (i < numbers.length - 1)\n\
    \            result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpvoknr4zi.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpvoknr4zi.__unittest_L22_C1() [0x427f3c]\\n??:? void tmpvoknr4zi.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x60f0e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers)\
    \ \n    {\n        result[2 * i] = number;\n        if (i < numbers.length - 1)\
    \ \n        {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n  \
    \  assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpo2s6fcrg.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpo2s6fcrg.__unittest_L24_C1() [0x427f3c]\\n??:? void tmpo2s6fcrg.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x7decc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    foreach (i, e; numbers)\n  \
    \  {\n        result[i * 2] = e;\n        if (i != numbers.length - 1)\n     \
    \       result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmp_8vosbs9.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmp_8vosbs9.__unittest_L22_C1() [0x427f3c]\\n??:? void tmp_8vosbs9.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x40b56554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers)\n\
    \    {\n        if (i != 0)\n            result[2 * i - 1] = delimeter;\n    \
    \    result[2 * i] = number;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpfovxuqkn.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpfovxuqkn.__unittest_L22_C1() [0x427f40]\\n??:? void tmpfovxuqkn.__modtest()\
    \ [0x428190]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x4281a3]\\\
    n??:? __libc_start_main [0xa01f2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers)\
    \ \n    {\n        result[2 * i] = number;\n        if (i < numbers.length - 1)\
    \ \n        {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n\
    \    return result;\n}\n/*\n    >>> is_prime(2L)\n    true\n    >>> is_prime(3L)\n\
    \    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(5L)\n    true\n \
    \   >>> is_prime(6L)\n    false\n    >>> is_prime(7L)\n    true\n    >>> is_prime(8L)\n\
    \    false\n    >>> is_prime(9L)\n    false\n    >>> is_prime(10L)\n    false\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(12L)\n    false\n    >>> is_prime(13L)\n\
    \    true\n    >>> is_prime(14L)\n    false\n    >>> is_prime(15L)\n    false\n\
    \    >>> is_prime(16L)\n    false\n    >>> is_prime(17L)\n    true\n    >>> is_prime(18L)\n\
    \    false\n    >>> is_prime(19L)\n    true\n    >>> is_prime(20L)\n    false\n\
    \    >>> is_prime(21L)\n    false\n    >>> is_prime(22L)\n    false\n    >>> is_prime(23L)\n\
    \    true\n    >>> is_prime(24L)\n    false\n    >>> is_prime(25L)\n    false\n\
    \    >>> is_prime(26L)\n    false\n    >>> is_prime(27L)\n    false\n    >>> is_prime(28L)\n\
    \    false\n    >>> is_prime(29L)\n    true\n    >>> is_prime(30L)\n    false\n\
    \    >>> is_prime(31L)\n    true\n    >>> is_prime(32L)\n    false\n    >>> is_prime(33L)\n\
    \    false\n    >>> is_prime\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpda192u8q.d(24): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpda192u8q.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    for (size_t i = 0; i < numbers.length;\
    \ i++)\n    {\n        result[i * 2] = numbers[i];\n        if (i < numbers.length\
    \ - 1)\n            result[i * 2 + 1] = delimeter;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da33]\\n??:? _d_newarrayT\
    \ [0x4297b8]\\n??:? long[] tmpdjfofvna.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpdjfofvna.__unittest_L22_C1() [0x427f44]\\n??:? void tmpdjfofvna.__modtest()\
    \ [0x428194]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4f3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b386]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430611]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43059d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b35d]\\n??:? runModuleUnitTests [0x42c2c9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42885f]\\n??:? _d_run_main [0x4287ca]\\n??:? main [0x4281a7]\\\
    n??:? __libc_start_main [0x6b80f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\
    \ \n    {\n        result[i * 2] = number;\n        if (i != numbers.length -\
    \ 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n  \
    \  assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpp0cyx2in.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpp0cyx2in.__unittest_L24_C1() [0x427f3c]\\n??:? void tmpp0cyx2in.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x99315554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\n\
    \    {\n        result[i * 2] = number;\n        if (i != numbers.length - 1)\n\
    \            result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpj476_rgi.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpj476_rgi.__unittest_L22_C1() [0x427f3c]\\n??:? void tmpj476_rgi.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0xfd2cf554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\n\
    \    {\n        result[i * 2] = number;\n        if (i < numbers.length - 1)\n\
    \            result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpt72xcuvm.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpt72xcuvm.__unittest_L22_C1() [0x427f3c]\\n??:? void tmpt72xcuvm.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0xbf213554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[0L];\n    foreach (i, number; numbers)\n    {\n        result\
    \ ~= number;\n        if (i < numbers.length - 1L)\n        {\n            result\
    \ ~= delimeter;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    for (size_t i = 0; i < numbers.length;\
    \ i++) \n    {\n        result[i * 2] = numbers[i];\n        if (i != numbers.length\
    \ - 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da33]\\n??:? _d_newarrayT\
    \ [0x4297b8]\\n??:? long[] tmpgly4b4oq.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpgly4b4oq.__unittest_L24_C1() [0x427f44]\\n??:? void tmpgly4b4oq.__modtest()\
    \ [0x428194]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4f3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b386]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430611]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43059d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b35d]\\n??:? runModuleUnitTests [0x42c2c9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42885f]\\n??:? _d_run_main [0x4287ca]\\n??:? main [0x4281a7]\\\
    n??:? __libc_start_main [0xc7f94554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\
    \ \n    {\n        result[i * 2] = number;\n        if (i != numbers.length -\
    \ 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n  \
    \  assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpykd_9zbq.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpykd_9zbq.__unittest_L24_C1() [0x427f3c]\\n??:? void tmpykd_9zbq.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x369ee554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\n\
    \    {\n        result[i * 2] = number;\n        if (i != numbers.length - 1)\n\
    \            result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpza9pw9s1.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpza9pw9s1.__unittest_L22_C1() [0x427f3c]\\n??:? void tmpza9pw9s1.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0xc0daf554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\
    \ \n    {\n        if (i != 0) \n        {\n            result[i * 2 - 1] = delimeter;\n\
    \        }\n        result[i * 2] = number;\n    }\n    return result;\n}\n/*\n\
    \    >>> random_permutation(0L)\n    []\n    >>> random_permutation(1L)\n    [0L]\n\
    \    >>> random_permutation(2L)\n    [1L, 0L]\n    >>> random_permutation(3L)\n\
    \    [2L, 0L, 1L]\n    >>> random_permutation(4L)\n    [1L, 3L, 0L, 2L]\n    >>>\
    \ random_permutation(5L)\n    [4L, 0L, 2L, 1L, 3L]\n*/\nlong[] random_permutation(long\
    \ n) \n{\n    long[] result = new long[n];\n    foreach (i, _; result) \n    {\n\
    \        result[i] = i;\n    }\n    foreach (i, _; result) \n    {\n        long\
    \ j = uniform(0L, i + 1L);\n        long tmp = result[i];\n        result[i] =\
    \ result[j];\n        result[j] = tmp;\n    }\n    return result;\n}\n/*\n   \
    \ >>> random_subset(0L, 0L)\n    []\n    >>> random_subset(1L, 0L)\n    []\n \
    \   >>> random_subset(1L, 1L)\n    [0L]\n    >>> random_subset(2L, 0L)\n    []\n\
    \    >>> random_subset(2L, 1L)\n    [0L]\n    >>> random_subset(2L, 2L)\n    [1L,\
    \ 0L]\n    >>> random_subset(3L, 0L)\n    []\n    >>> random_subset(3L, 1L)\n\
    \    [0L]\n    >>> random_subset(3L, 2L)\n    [1L,\nunittest\n{\n    alias candidate\
    \ = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpltx4kgcc.d(54): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpltx4kgcc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    foreach (number;\
    \ numbers) {\n        result[i] = number;\n        i += 2;\n    }\n    i = 1;\n\
    \    foreach (number; numbers) {\n        result[i] = delimeter;\n        i +=\
    \ 2;\n    }\n    return result[0 .. result.length - 1];\n}\nunittest\n{\n    alias\
    \ candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da8b]\\n??:? _d_newarrayT\
    \ [0x429810]\\n??:? long[] tmpoqborttg.intersperse(long[], long) [0x427e51]\\\
    n??:? void tmpoqborttg.__unittest_L26_C1() [0x427f9c]\\n??:? void tmpoqborttg.__modtest()\
    \ [0x4281ec]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c54b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3de]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430669]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b18]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305f5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3b5]\\n??:? runModuleUnitTests [0x42c321]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428930]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288b7]\\n??:? _d_run_main [0x428822]\\n??:? main [0x4281ff]\\\
    n??:? __libc_start_main [0xb1b67554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    int i = 0;\n    foreach (n;\
    \ numbers) {\n        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n   \
    \ foreach (n; numbers) {\n        result[i] = delimeter;\n        i += 2;\n  \
    \  }\n    return result[0 .. result.length - 1];\n}\n/*\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    */\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[] result\
    \ = new long[numbers.length * 2 - 1];\n    int i = 0;\n    foreach (n; numbers)\
    \ {\n        result[i] = n;\n        i += 2;\n    }\n    i = 1;\n    foreach (n;\
    \ numbers) {\n        result[i] = delimeter;\n        i += 2;\n    }\n    return\
    \ result[0 .. result.length - 1];\n}\n/*\n    >>> intersperse([], 4L)\n    []\n\
    \    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[]\
    \ numbers, long delimeter) \n{\n    long[] result = new long[numbers.length *\
    \ 2 - 1];\n    int i = 0;\n    foreach (n; numbers) {\n        result[i] = n;\n\
    \        i += 2;\n    }\n    i = 1;\n    foreach (n; numbers) {\n        result[i]\
    \ = delimeter;\n        i += 2;\n    }\n    return result[0 .. result.length -\
    \ 1];\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L,\
    \ 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzwd2o2dq.d(78): Error: `tmpzwd2o2dq.intersperse` called with\
    \ argument types `(void[], long)` matches both:\\n/tmp/tmpzwd2o2dq.d(11):    \
    \ `tmpzwd2o2dq.intersperse(long[] numbers, long delimeter)`\\nand:\\n/tmp/tmpzwd2o2dq.d(53):\
    \     `tmpzwd2o2dq.intersperse(long[] numbers, long delimeter)`\\n/tmp/tmpzwd2o2dq.d(79):\
    \ Error: `tmpzwd2o2dq.intersperse` called with argument types `(long[], long)`\
    \ matches both:\\n/tmp/tmpzwd2o2dq.d(11):     `tmpzwd2o2dq.intersperse(long[]\
    \ numbers, long delimeter)`\\nand:\\n/tmp/tmpzwd2o2dq.d(53):     `tmpzwd2o2dq.intersperse(long[]\
    \ numbers, long delimeter)`\\n/tmp/tmpzwd2o2dq.d(80): Error: `tmpzwd2o2dq.intersperse`\
    \ called with argument types `(long[], long)` matches both:\\n/tmp/tmpzwd2o2dq.d(11):\
    \     `tmpzwd2o2dq.intersperse(long[] numbers, long delimeter)`\\nand:\\n/tmp/tmpzwd2o2dq.d(53):\
    \     `tmpzwd2o2dq.intersperse(long[] numbers, long delimeter)`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzwd2o2dq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\n\
    \    {\n        if (i != 0)\n            result[i * 2 - 1] = delimeter;\n    \
    \    result[i * 2] = number;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpn0rrxy0x.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpn0rrxy0x.__unittest_L22_C1() [0x427f40]\\n??:? void tmpn0rrxy0x.__modtest()\
    \ [0x428190]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x4281a3]\\\
    n??:? __libc_start_main [0x740ce554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return [];\n    long[] result = new long[2 * numbers.length -\
    \ 1];\n    result[0] = numbers[0];\n    foreach (i, n; numbers[1 .. $]) {\n  \
    \      result[2 * i] = delimeter;\n        result[2 * i + 1] = n;\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpj_4oglo8.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428465]\\n??:? void tmpj_4oglo8.__unittest_L23_C1()\
    \ [0x42809d]\\n??:? void tmpj_4oglo8.__modtest() [0x4281e4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c543]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3d6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430661]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b10]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3ad]\\n??:? runModuleUnitTests [0x42c319]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428928]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288af]\\n??:? _d_run_main [0x42881a]\\n??:? main [0x4281f7]\\\
    n??:? __libc_start_main [0x83dd0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\
    \ \n    {\n        result[i * 2] = number;\n        if (i != numbers.length -\
    \ 1) \n        {\n            result[i * 2 + 1] = delimeter;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n  \
    \  assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpaak4hj0h.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpaak4hj0h.__unittest_L24_C1() [0x427f3c]\\n??:? void tmpaak4hj0h.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x54ea2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return numbers;\n    else\n    {\n        long[] result = new\
    \ long[2 * numbers.length - 1];\n        result[0] = numbers[0];\n        foreach\
    \ (i, number; numbers[1 .. $])\n        {\n            result[2 * i - 1] = delimeter;\n\
    \            result[2 * i] = number;\n        }\n        return result;\n    }\n\
    }\nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp7pzf_ovp.d(21): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42850e]\\n??:? long[] tmp7pzf_ovp.intersperse(long[],\
    \ long) [0x427f1b]\\n??:? void tmp7pzf_ovp.__unittest_L27_C1() [0x428016]\\n??:?\
    \ void tmp7pzf_ovp.__modtest() [0x4281dc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c53b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430659]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b08]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305e5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3a5]\\n??:? runModuleUnitTests [0x42c311]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428920]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288a7]\\n??:? _d_run_main [0x428812]\\n??:? main [0x4281ef]\\\
    n??:? __libc_start_main [0x81b6f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return [];\n    long[] result = new long[2 * numbers.length -\
    \ 1];\n    result[0] = numbers[0];\n    foreach (i, n; numbers[1 .. $])\n    {\n\
    \        result[2 * i] = delimeter;\n        result[2 * i + 1] = n;\n    }\n \
    \   return result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L,\
    \ 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers,\
    \ long delimeter) \n{\n    if (numbers.length == 0)\n        return [];\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    result[0] = numbers[0];\n  \
    \  foreach (i, n; numbers[1 .. $])\n    {\n        result[2 * i] = delimeter;\n\
    \        result[2 * i + 1] = n;\n    }\n    return result;\n}\n/*\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    */\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0)\n        return [];\n    long[] result = new long[2 * numbers.length -\
    \ 1];\n    result[0] = numbers[0];\n    foreach (i, n; numbers[1 .. $])\n    {\n\
    \        result[2 * i] = delimeter;\n        result[2 * i + 1] = n;\n    }\n \
    \   return result;\n}\n/*\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L,\
    \ 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers,\
    \ long delimeter) \n{\n    if\nunittest\n{\n    alias candidate = intersperse;\n\
    \n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L],\
    \ 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L)\
    \ == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpekd7hi1u.d(71): Error: found `unittest` when expecting `(`\\\
    n/tmp/tmpekd7hi1u.d(79): Error: found `void` when expecting `)`\\n/tmp/tmpekd7hi1u.d(79):\
    \ Error: found `{` when expecting `;` following statement\\nFailed: [\"dmd\",\
    \ \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpekd7hi1u.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    foreach (i, e; numbers) \n \
    \   {\n        result[2 * i] = e;\n        if (i != numbers.length - 1) \n   \
    \     {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n    return\
    \ result;\n}\n/*\n Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L,\
    \ 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[]\
    \ numbers, long delimeter) \n{\n    long[] result = new long[2 * numbers.length\
    \ - 1];\n    foreach (i, e; numbers) \n    {\n        result[2 * i] = e;\n   \
    \     if (i != numbers.length - 1) \n        {\n            result[2 * i + 1]\
    \ = delimeter;\n        }\n    }\n    return result;\n}\n/*\n Insert a number\
    \ 'delimeter' between every two consecutive elements of input array `numbers'\n\
    \    >>> intersperse([], 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n\
    \    [1L, 4L, 2L, 4L, 3L]\n    \n*/\nlong[] intersperse(long[] numbers, long delimeter)\
    \ \n{\n    long[] result = new long[2 * numbers.length - 1];\n    foreach (i,\
    \ e; numbers) \n    {\n        result[2 * i] = e;\n        if (i != numbers.length\
    \ - 1) \n        {\n            result[2 * i + 1] = delimeter;\n        }\n  \
    \  }\n    return result;\n}\n/*\n Insert a number 'delimeter' between every two\
    \ consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n\
    \    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4\nunittest\n{\n    alias\
    \ candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L,\
    \ 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L,\
    \ 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw9ccuh8c.d(66): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw9ccuh8c.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    foreach (i, e; numbers)\n  \
    \  {\n        result[2 * i] = e;\n        if (i != numbers.length - 1)\n     \
    \       result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpapxgw472.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpapxgw472.__unittest_L22_C1() [0x427f3c]\\n??:? void tmpapxgw472.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0xb43b0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0) return [];\n    long[] result = new long[2 * numbers.length - 1];\n  \
    \  result[0] = numbers[0];\n    foreach (i, number; numbers[1 .. $]) \n    {\n\
    \        result[2 * i - 1] = delimeter;\n        result[2 * i] = number;\n   \
    \ }\n    return result;\n}\n/*\n Insert a number 'delimeter' between every two\
    \ consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n\
    \    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n   \
    \ \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0) return [];\n    long[] result = new long[2 * numbers.length - 1];\n  \
    \  result[0] = numbers[0];\n    foreach (i, number; numbers[1 .. $]) \n    {\n\
    \        result[2 * i - 1] = delimeter;\n        result[2 * i] = number;\n   \
    \ }\n    return result;\n}\n/*\n Insert a number 'delimeter' between every two\
    \ consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n\
    \    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n   \
    \ \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    if (numbers.length\
    \ == 0) return [];\n    long[] result = new long[2 * numbers.length - 1];\n  \
    \  result[0] = numbers[0];\n    foreach (i, number; numbers[1 .. $]) \n    {\n\
    \        result[2 * i - 1] = delimeter;\n        result[2 * i] = number;\n   \
    \ }\n    return result;\n}\n/*\n Insert a number 'delimeter' between every two\
    \ consecutive elements of input array `numbers'\n    >>> intersperse([], 4L)\n\
    \   \nunittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([],\
    \ 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L,\
    \ 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpebzagyll.d(63): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebzagyll.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[numbers.length * 2 - 1];\n    foreach (i, number; numbers)\n\
    \    {\n        result[i * 2] = number;\n        if (i != numbers.length - 1)\n\
    \            result[i * 2 + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmpr6i6x9u7.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmpr6i6x9u7.__unittest_L22_C1() [0x427f3c]\\n??:? void tmpr6i6x9u7.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0xbe081554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers)\n\
    \    {\n        result[2 * i] = number;\n        if (i < numbers.length - 1)\n\
    \            result[2 * i + 1] = delimeter;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n\
    \    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n\
    \    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmp3xi89c_a.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmp3xi89c_a.__unittest_L22_C1() [0x427f3c]\\n??:? void tmp3xi89c_a.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x54066554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n Insert a number 'delimeter'\
    \ between every two consecutive elements of input array `numbers'\n    >>> intersperse([],\
    \ 4L)\n    []\n    >>> intersperse([1L, 2L, 3L], 4L)\n    [1L, 4L, 2L, 4L, 3L]\n\
    \    \n*/\nlong[] intersperse(long[] numbers, long delimeter) \n{\n    long[]\
    \ result = new long[2 * numbers.length - 1];\n    foreach (i, number; numbers)\
    \ \n    {\n        result[2 * i] = number;\n        if (i < numbers.length - 1)\
    \ \n        {\n            result[2 * i + 1] = delimeter;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = intersperse;\n\n  \
    \  assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L)\
    \ == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) ==\
    \ [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.OutOfMemoryError@src/core/exception.d(700): Memory allocation\
    \ failed\\n----------------\\n??:? _d_newarrayU [0x42da2b]\\n??:? _d_newarrayT\
    \ [0x4297b0]\\n??:? long[] tmp7gi1ymlm.intersperse(long[], long) [0x427e4b]\\\
    n??:? void tmp7gi1ymlm.__unittest_L24_C1() [0x427f3c]\\n??:? void tmp7gi1ymlm.__modtest()\
    \ [0x42818c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4eb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b37e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430609]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430595]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b355]\\n??:? runModuleUnitTests [0x42c2c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428857]\\n??:? _d_run_main [0x4287c2]\\n??:? main [0x42819f]\\\
    n??:? __libc_start_main [0x127e9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
