name: HumanEval_128_prod_signs
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
  \ arr of integers and you need to return\n    sum of magnitudes of integers multiplied\
  \ by product of all signs\n    of each number in the array, represented by 1, -1\
  \ or 0.\n    Note: return null for empty arr.\n\n    Example:\n    >>> prod_signs([1L,\
  \ 2L, 2L, -4L])\n    9L\n    >>> prod_signs([0L, 1L])\n    0L\n    >>> prod_signs([])\n\
  \    None\n    \n*/\nNullable!(long) prod_signs(long[] arr) \n"
tests: "unittest\n{\n    alias candidate = prod_signs;\n\n{\n        auto result =\
  \ candidate([1L, 2L, 2L, -4L]);\n        assert(!result.isNull && result.get ==\
  \ -9L);\n}\n\n{\n        auto result = candidate([0L, 1L]);\n        assert(!result.isNull\
  \ && result.get == 0L);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 2L,\
  \ 3L, -1L, 1L]);\n        assert(!result.isNull && result.get == -10L);\n}\n\n{\n\
  \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
  \        auto result = candidate([2L, 4L, 1L, 2L, -1L, -1L, 9L]);\n        assert(!result.isNull\
  \ && result.get == 20L);\n}\n\n{\n        auto result = candidate([-1L, 1L, -1L,\
  \ 1L]);\n        assert(!result.isNull && result.get == 4L);\n}\n\n{\n        auto\
  \ result = candidate([-1L, 1L, 1L, 1L]);\n        assert(!result.isNull && result.get\
  \ == -4L);\n}\n\n{\n        auto result = candidate([-1L, 1L, 1L, 0L]);\n      \
  \  assert(!result.isNull && result.get == 0L);\n}\n\n}\nvoid main(){}"
completions: ["{\n    if (arr.length == 0)\n        return null;\n    long prod =\
    \ 1L;\n    long sum = 0L;\n    foreach (i; arr) \n    {\n        if (i > 0)\n\
    \            prod *= 1L;\n        else if (i < 0)\n            prod *= -1L;\n\
    \        else\n            prod *= 0L;\n        sum += abs(i);\n    }\n    return\
    \ sum * prod;\n}", "{\n    if (arr.length == 0)\n        return null;\n    long\
    \ prod = 1L;\n    long sum = 0L;\n    foreach (num; arr)\n    {\n        if (num\
    \ > 0)\n            prod *= 1L;\n        else if (num < 0)\n            prod *=\
    \ -1L;\n        else\n            prod *= 0L;\n        sum += abs(num);\n    }\n\
    \    return make!Nullable(sum * prod);\n}", "{\n    if (arr.length == 0)\n   \
    \     return null;\n    long prod = 1;\n    long sum = 0;\n    foreach (i; arr)\n\
    \    {\n        if (i > 0)\n            prod *= 1;\n        else if (i < 0)\n\
    \            prod *= -1;\n        else\n            prod *= 0;\n        sum +=\
    \ abs(i);\n    }\n    return sum * prod;\n}", "{\n    if (arr.length == 0) return\
    \ null;\n    long prod = 1;\n    long sum = 0;\n    foreach (i; arr) \n    {\n\
    \        if (i > 0) \n        {\n            prod *= 1;\n            sum += i;\n\
    \        }\n        else if (i < 0) \n        {\n            prod *= -1;\n   \
    \         sum += abs(i);\n        }\n        else \n        {\n            prod\
    \ *= 0;\n        }\n    }\n    return prod * sum;\n}", "{\n    if (arr.length\
    \ == 0) \n    {\n        return null;\n    }\n    long prod = 1L;\n    long sum\
    \ = 0L;\n    foreach (i; arr) \n    {\n        if (i < 0) \n        {\n      \
    \      prod *= -1L;\n        }\n        else if (i == 0) \n        {\n       \
    \     return 0L;\n        }\n        sum += abs(i);\n    }\n    return prod *\
    \ sum;\n}", "{\n    if (arr.length == 0)\n        return null;\n    long prod\
    \ = 1;\n    long sum = 0;\n    foreach (i; arr)\n    {\n        if (i > 0)\n \
    \           prod *= 1;\n        else if (i < 0)\n            prod *= -1;\n   \
    \     else\n            prod *= 0;\n        sum += abs(i);\n    }\n    return\
    \ sum * prod;\n}", "{\n    if (arr.length == 0)\n        return null;\n    long\
    \ prod = 1L;\n    long sum = 0L;\n    foreach (i; arr) \n    {\n        if (i\
    \ == 0)\n            continue;\n        prod *= sign(i);\n        sum += abs(i);\n\
    \    }\n    return prod * sum;\n}", "{\n    if (arr.length == 0)\n        return\
    \ null;\n    long prod = 1L;\n    long sum = 0L;\n    foreach (i; arr)\n    {\n\
    \        if (i > 0)\n            prod *= 1L;\n        else if (i < 0)\n      \
    \      prod *= -1L;\n        else\n            prod *= 0L;\n        sum += abs(i);\n\
    \    }\n    return sum * prod;\n}", "{\n    if (arr.length == 0)\n        return\
    \ null;\n    long sum = 0;\n    long prod = 1;\n    foreach (i; arr) \n    {\n\
    \        sum += abs(i);\n        prod *= sign(i);\n    }\n    return sum * prod;\n\
    }", "{\n    if (arr.length == 0)\n        return null;\n    long prod = 1L;\n\
    \    long sum = 0L;\n    foreach (i; arr)\n    {\n        if (i > 0)\n       \
    \     prod *= 1L;\n        else if (i < 0)\n            prod *= -1L;\n       \
    \ else\n            prod *= 0L;\n        sum += abs(i);\n    }\n    return sum\
    \ * prod;\n}", "{\n    if (arr.length == 0) \n    {\n        return null;\n  \
    \  }\n    long prod = 1L;\n    long sum = 0L;\n    foreach (i; arr) \n    {\n\
    \        if (i > 0) \n        {\n            prod *= 1L;\n        } \n       \
    \ else if (i < 0) \n        {\n            prod *= -1L;\n        } \n        else\
    \ \n        {\n            prod *= 0L;\n        }\n        sum += abs(i);\n  \
    \  }\n    return sum * prod;\n}", "{\n    if (arr.length == 0)\n        return\
    \ null;\n    long prod = 1;\n    long sum = 0;\n    foreach (i; arr)\n    {\n\
    \        if (i > 0)\n            prod *= 1;\n        else if (i < 0)\n       \
    \     prod *= -1;\n        else\n            prod *= 0;\n        sum += abs(i);\n\
    \    }\n    return sum * prod;\n}", "{\n    if (arr.length == 0)\n        return\
    \ null;\n    long prod = 1L;\n    long sum = 0L;\n    foreach (i; arr)\n    {\n\
    \        if (i > 0)\n            prod *= 1L;\n        else if (i < 0)\n      \
    \      prod *= -1L;\n        else\n            prod *= 0L;\n        sum += abs(i);\n\
    \    }\n    return make!(Nullable!(long))(sum * prod);\n}", "{\n    if (arr.length\
    \ == 0)\n        return null;\n    long prod = 1L;\n    long sum = 0L;\n    foreach\
    \ (i; arr) \n    {\n        if (i > 0)\n            prod *= 1L;\n        else\
    \ if (i < 0)\n            prod *= -1L;\n        else\n            prod *= 0L;\n\
    \        sum += abs(i);\n    }\n    return sum * prod;\n}", "{\n    if (arr.length\
    \ == 0) \n    {\n        return null;\n    }\n    long prod = 1L;\n    long sum\
    \ = 0L;\n    foreach (i; arr) \n    {\n        if (i > 0) \n        {\n      \
    \      prod *= 1L;\n        }\n        else if (i < 0) \n        {\n         \
    \   prod *= -1L;\n        }\n        else \n        {\n            prod *= 0L;\n\
    \        }\n        sum += abs(i);\n    }\n    return sum * prod;\n}", "{\n  \
    \  if (arr.length == 0) \n    {\n        return null;\n    }\n    long prod =\
    \ 1L;\n    long sum = 0L;\n    foreach (i; arr) \n    {\n        if (i < 0) \n\
    \        {\n            prod *= -1L;\n        }\n        else if (i == 0) \n \
    \       {\n            return 0L;\n        }\n        sum += abs(i);\n    }\n\
    \    return sum * prod;\n}", "{\n    if (arr.length == 0) \n    {\n        return\
    \ null;\n    }\n    long prod = 1L;\n    long sum = 0L;\n    foreach (i; arr)\
    \ \n    {\n        if (i == 0) \n        {\n            continue;\n        }\n\
    \        if (i < 0) \n        {\n            prod *= -1;\n        }\n        sum\
    \ += abs(i);\n    }\n    return prod * sum;\n}", "{\n    if (arr.length == 0)\n\
    \        return null;\n    long sum = 0;\n    long prod = 1;\n    foreach (i;\
    \ arr)\n    {\n        sum += abs(i);\n        prod *= sign(i);\n    }\n    return\
    \ sum * prod;\n}", "{\n    if (arr.length == 0)\n        return null;\n    long\
    \ sum = 0;\n    long prod = 1;\n    foreach (i; arr)\n    {\n        sum += abs(i);\n\
    \        prod *= sign(i);\n    }\n    return sum * prod;\n}", "{\n    if (arr.length\
    \ == 0)\n        return null;\n    long prod = 1L;\n    long sum = 0L;\n    foreach\
    \ (i; arr) \n    {\n        if (i > 0)\n            prod *= 1L;\n        else\
    \ if (i < 0)\n            prod *= -1L;\n        else\n            prod *= 0L;\n\
    \        sum += abs(i);\n    }\n    return sum * prod;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
