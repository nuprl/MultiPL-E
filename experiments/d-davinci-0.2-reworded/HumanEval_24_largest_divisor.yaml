name: HumanEval_24_largest_divisor
language: d
prompt: "import std.math;\n/*\n For a given number n, find the largest number that\
  \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n    \n\
  */\nlong largest_divisor(long n) \n"
tests: "unittest\n{\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L)\
  \ == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n\
  \    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid\
  \ main(){}"
completions: ["{\n    long largest = 1;\n    for (long i = 2; i < n; i++)\n    {\n\
    \        if (n % i == 0)\n        {\n            largest = i;\n        }\n   \
    \ }\n    return largest;\n}", "{\n    long largest = 0L;\n    long i = 2L;\n \
    \   while (i < n) \n    {\n        if (n % i == 0L) \n        {\n            largest\
    \ = i;\n        }\n        i += 1L;\n    }\n    return largest;\n}", "{\n    long\
    \ i = n;\n    while (i > 0) {\n        if (n % i == 0) {\n            return i;\n\
    \        }\n        i -= 1;\n    }\n    return 0;\n}", "{\n    long i = 2L;\n\
    \    while (i < n) {\n        if (n % i == 0L) {\n            return n / i;\n\
    \        }\n        i += 1L;\n    }\n    return 1L;\n}", "{\n    long i = n -\
    \ 1;\n    while (i > 0) {\n        if (n % i == 0) {\n            return i;\n\
    \        }\n        i -= 1;\n    }\n    return 0;\n}", "{\n    long i = n;\n \
    \   while (i > 1) {\n        if (n % i == 0) {\n            return i;\n      \
    \  }\n        i -= 1;\n    }\n    return 1;\n}", "{\n    long i = n;\n    while\
    \ (i > 1) {\n        if (n % i == 0) {\n            return i;\n        }\n   \
    \     i--;\n    }\n    return 1;\n}", "{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++) \n    {\n        if (n % i == 0L) \n        {\n        \
    \    largest = i;\n        }\n    }\n    return largest;\n}", "{\n    long largest\
    \ = 0L;\n    foreach (i; 1L .. n) {\n        if (n % i == 0L) {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}", "{\n    long largest = 1;\n\
    \    for (long i = 2; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n\
    \            largest = i;\n        }\n    }\n    return largest;\n}", "{\n   \
    \ long largest = 1;\n    for (long i = 2; i < n; i++) \n    {\n        if (n %\
    \ i == 0) \n        {\n            largest = i;\n        }\n    }\n    return\
    \ largest;\n}", "{\n    long largest = 0L;\n    for (long i = 1L; i < n; i++)\
    \ \n    {\n        if (n % i == 0L) \n        {\n            largest = i;\n  \
    \      }\n    }\n    return largest;\n}", "{\n    long largest = 0L;\n    for\
    \ (long i = 1L; i < n; i++) \n    {\n        if (n % i == 0L) \n        {\n  \
    \          largest = i;\n        }\n    }\n    return largest;\n}", "{\n    long\
    \ largest = 1;\n    for (long i = 2; i < n; i++) \n    {\n        if (n % i ==\
    \ 0) \n        {\n            largest = i;\n        }\n    }\n    return largest;\n\
    }", "{\n    long largest = 0L;\n    for (long i = 1L; i < n; i++)\n    {\n   \
    \     if (n % i == 0L)\n        {\n            largest = i;\n        }\n    }\n\
    \    return largest;\n}", "{\n    long largest_divisor = 1L;\n    for (long i\
    \ = 2L; i < n; i++) {\n        if (n % i == 0) {\n            largest_divisor\
    \ = i;\n        }\n    }\n    return largest_divisor;\n}", "{\n    long largest\
    \ = 0L;\n    for (long i = 1L; i < n; i++) \n    {\n        if (n % i == 0L) \n\
    \        {\n            largest = i;\n        }\n    }\n    return largest;\n}",
  "{\n    long largest = 0L;\n    for (long i = 1L; i < n; i++) \n    {\n        if\
    \ (n % i == 0L) \n        {\n            largest = i;\n        }\n    }\n    return\
    \ largest;\n}", "{\n    long i;\n    for (i = n - 1; i > 0; i--) \n    {\n   \
    \     if (n % i == 0) \n        {\n            return i;\n        }\n    }\n \
    \   return 0;\n}", "{\n    long i = n - 1;\n    while (i > 0) \n    {\n      \
    \  if (n % i == 0) \n        {\n            return i;\n        }\n        i--;\n\
    \    }\n    return 0;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
