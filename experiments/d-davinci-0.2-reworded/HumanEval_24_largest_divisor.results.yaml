language: d
name: HumanEval_24_largest_divisor
results:
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long\
    \ i = 2; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    long i =\
    \ 2L;\n    while (i < n) \n    {\n        if (n % i == 0L) \n        {\n     \
    \       largest = i;\n        }\n        i += 1L;\n    }\n    return largest;\n\
    }\nunittest\n{\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L)\
    \ == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n\
    \    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpa8rk_334.d(26): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d8d]\n??:? void tmpa8rk_334.__unittest_L22_C1() [0x427a74]\n??:?
    void tmpa8rk_334.__modtest() [0x427b0c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a946]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff88]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa65]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a91d]\n??:? runModuleUnitTests [0x42b889]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281dc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428163]\n??:? _d_run_main [0x4280ce]\n??:? main [0x427b1f]\n??:?
    __libc_start_main [0xae1c2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i = n;\n    while (i > 0) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n        i -= 1;\n\
    \    }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp9olih06m.d(23): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d75]\n??:? void tmp9olih06m.__unittest_L19_C1() [0x427a60]\n??:?
    void tmp9olih06m.__modtest() [0x427af8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a92e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff70]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a905]\n??:? runModuleUnitTests [0x42b871]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42814b]\n??:? _d_run_main [0x4280b6]\n??:? main [0x427b0b]\n??:?
    __libc_start_main [0x706b554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i = 2L;\n    while (i < n)\
    \ {\n        if (n % i == 0L) {\n            return n / i;\n        }\n      \
    \  i += 1L;\n    }\n    return 1L;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i = n - 1;\n    while (i >\
    \ 0) {\n        if (n % i == 0) {\n            return i;\n        }\n        i\
    \ -= 1;\n    }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i = n;\n    while (i > 1) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n        i -= 1;\n\
    \    }\n    return 1;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpm2gs7508.d(23): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d7d]\n??:? void tmpm2gs7508.__unittest_L19_C1() [0x427a64]\n??:?
    void tmpm2gs7508.__modtest() [0x427afc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baa3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a936]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff78]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa55]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a90d]\n??:? runModuleUnitTests [0x42b879]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281cc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428153]\n??:? _d_run_main [0x4280be]\n??:? main [0x427b0f]\n??:?
    __libc_start_main [0x956d6554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i = n;\n    while (i > 1) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n        i--;\n \
    \   }\n    return 1;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvd3dvuwc.d(23): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d7d]\n??:? void tmpvd3dvuwc.__unittest_L19_C1() [0x427a64]\n??:?
    void tmpvd3dvuwc.__modtest() [0x427afc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baa3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a936]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff78]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa55]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a90d]\n??:? runModuleUnitTests [0x42b879]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281cc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428153]\n??:? _d_run_main [0x4280be]\n??:? main [0x427b0f]\n??:?
    __libc_start_main [0x65b43554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++) \n    {\n        if (n % i == 0L) \n        {\n        \
    \    largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n   \
    \ alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n   \
    \ assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    foreach\
    \ (i; 1L .. n) {\n        if (n % i == 0L) {\n            largest = i;\n     \
    \   }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long\
    \ i = 2; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long\
    \ i = 2; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n          \
    \  largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++) \n    {\n        if (n % i == 0L) \n        {\n        \
    \    largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n   \
    \ alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n   \
    \ assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++) \n    {\n        if (n % i == 0L) \n        {\n        \
    \    largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n   \
    \ alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n   \
    \ assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long\
    \ i = 2; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n          \
    \  largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++)\n    {\n        if (n % i == 0L)\n        {\n          \
    \  largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest_divisor = 1L;\n   \
    \ for (long i = 2L; i < n; i++) {\n        if (n % i == 0) {\n            largest_divisor\
    \ = i;\n        }\n    }\n    return largest_divisor;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++) \n    {\n        if (n % i == 0L) \n        {\n        \
    \    largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n   \
    \ alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n   \
    \ assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++) \n    {\n        if (n % i == 0L) \n        {\n        \
    \    largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n   \
    \ alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n   \
    \ assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i;\n    for (i = n - 1; i >\
    \ 0; i--) \n    {\n        if (n % i == 0) \n        {\n            return i;\n\
    \        }\n    }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i = n - 1;\n    while (i >\
    \ 0) \n    {\n        if (n % i == 0) \n        {\n            return i;\n   \
    \     }\n        i--;\n    }\n    return 0;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long\
    \ i = 2; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n          \
    \  largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i;\n    for (i = n - 1; i >\
    \ 0; i--)\n    {\n        if (n % i == 0)\n        {\n            return i;\n\
    \        }\n    }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++) \n    {\n        if (n % i == 0L) \n        {\n        \
    \    largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n   \
    \ alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n   \
    \ assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++) \n    {\n        if (n % i == 0L) \n        {\n        \
    \    largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n   \
    \ alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n   \
    \ assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++) \n    {\n        if (n % i == 0L) \n        {\n        \
    \    largest = i;\n        }\n    }\n    return largest;\n}\n/*\n For a given\
    \ number n, find the smallest number that is evenly divisible by all numbers from\
    \ 1 to n\n    >>> smallest_multiple(10L)\n    2520L\n*/\nlong smallest_multiple(long\
    \ n) \n{\n    long smallest = n;\n    while (true) \n    {\n        bool is_divisible\
    \ = true;\n        for (long i = 1L; i <= n; i++) \n        {\n            if\
    \ (smallest % i != 0L) \n            {\n                is_divisible = false;\n\
    \                break;\n            }\n        }\n        if (is_divisible) \n\
    \        {\n            return smallest;\n        }\n        smallest += n;\n\
    \    }\n}\n/*\n For a given number n, find the sum of all the multiples of 3 or\
    \ 5 below n\n    >>> sum_of_multiples(10L)\n    23L\n*/\nlong sum_of_multiples(long\
    \ n) \n{\n    long sum = 0L;\n    for (long i = 0L; i < n; i++) \n    {\n    \
    \    if (i % 3 == 0L || i % 5 == 0L) \n        {\n            sum += i;\n    \
    \    }\n    }\n    return sum;\n}\n/*\n For a given number n, find the sum of\
    \ the squares of all the natural numbers smaller than n\n    >>> sum_of_squares(10L)\n\
    \    385L\n*/\nlong sum_of_squares(long n) \n{\n    long sum = 0L;\n    for (long\
    \ i = 0L; i < n; i++) \n    {\n        sum += i * i;\n    }\n    return sum;\n\
    }\n/*\n For a given number n, find the square of the sum of all the natural numbers\
    \ smaller than n\n    >>> square_of_sum(10L)\n    3025L\n*/\nlong square_of_sum(long\n\
    unittest\n{\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L)\
    \ == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n\
    \    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp18buh2_f.d(83): Error: found `unittest` when expecting `)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp18buh2_f.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    foreach (i;\
    \ 2 .. n) \n    {\n        if (n % i == 0) \n        {\n            largest =\
    \ i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n         \
    \   largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long\
    \ i = 2; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n          \
    \  largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++) \n    {\n        if (n % i == 0L) \n        {\n        \
    \    largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n   \
    \ alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n   \
    \ assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i = n;\n    while (i > 1) \n\
    \    {\n        if (n % i == 0) \n        {\n            return i;\n        }\n\
    \        i -= 1;\n    }\n    return 1;\n}\nunittest\n{\n    alias candidate =\
    \ largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpjhpm4li1.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d7d]\n??:? void tmpjhpm4li1.__unittest_L21_C1() [0x427a64]\n??:?
    void tmpjhpm4li1.__modtest() [0x427afc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baa3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a936]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff78]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa55]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a90d]\n??:? runModuleUnitTests [0x42b879]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281cc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428153]\n??:? _d_run_main [0x4280be]\n??:? main [0x427b0f]\n??:?
    __libc_start_main [0x3c1d4554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long\
    \ i = 2; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n          \
    \  largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n         \
    \   largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i;\n    for (i = n - 1; i >\
    \ 0; i--) \n    {\n        if (n % i == 0) \n        {\n            return i;\n\
    \        }\n    }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++) \n    {\n        if (n % i == 0L) \n        {\n        \
    \    largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n   \
    \ alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n   \
    \ assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++) \n    {\n        if (n % i == 0L) \n        {\n        \
    \    largest = i;\n        }\n    }\n    return largest;\n}\n/*\n For a given\
    \ number n, find the smallest number that is evenly divisible by all numbers from\
    \ 1 to n\n    >>> smallest_multiple(10L)\n    2520L\n*/\nlong smallest_multiple(long\
    \ n) \n{\n    long smallest = 0L;\n    for (long i = n; i < factorial(n); i++)\
    \ \n    {\n        if (is_multiple(i, n)) \n        {\n            smallest =\
    \ i;\n            break;\n        }\n    }\n    return smallest;\n}\n/*\n For\
    \ a given number n, find the sum of all the multiples of 3 or 5 below n\n    >>>\
    \ sum_of_multiples(10L)\n    23L\n*/\nlong sum_of_multiples(long n) \n{\n    long\
    \ sum = 0L;\n    for (long i = 0L; i < n; i++) \n    {\n        if (i % 3L ==\
    \ 0L || i % 5L == 0L) \n        {\n            sum += i;\n        }\n    }\n \
    \   return sum;\n}\n/*\n For a given number n, find the sum of the squares of\
    \ all the natural numbers smaller than n\n    >>> sum_of_squares(10L)\n    385L\n\
    */\nlong sum_of_squares(long n) \n{\n    long sum = 0L;\n    for (long i = 0L;\
    \ i < n; i++) \n    {\n        sum += i * i;\n    }\n    return sum;\n}\n/*\n\
    \ For a given number n, find the square of the sum of all the natural numbers\
    \ smaller than n\n    >>> square_of_sum(10L)\n    3025L\n*/\nlong square_of_sum(long\
    \ n) \n{\n    long sum = 0L;\n    for (long i = 0L; i < n; i++) \n    {\n    \
    \    sum += i;\n    }\n\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzuspc28g.d(82): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzuspc28g.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++)\n    {\n        if (n % i == 0L)\n        {\n          \
    \  largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++) \n    {\n        if (n % i == 0L) \n        {\n        \
    \    largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n   \
    \ alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n   \
    \ assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i;\n    for (i = n-1; i > 0;\
    \ i--)\n    {\n        if (n % i == 0)\n        {\n            return i;\n   \
    \     }\n    }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i = n;\n    while (i > 1) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n        i -= 1;\n\
    \    }\n    return 1;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpm2gs7508.d(23): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d7d]\n??:? void tmpm2gs7508.__unittest_L19_C1() [0x427a64]\n??:?
    void tmpm2gs7508.__modtest() [0x427afc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baa3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a936]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff78]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa55]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a90d]\n??:? runModuleUnitTests [0x42b879]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281cc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428153]\n??:? _d_run_main [0x4280be]\n??:? main [0x427b0f]\n??:?
    __libc_start_main [0x956d6554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i <= n; i++)\n    {\n        if (n % i == 0L)\n        {\n         \
    \   largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpm1vvw34r.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d8d]\n??:? void tmpm1vvw34r.__unittest_L20_C1() [0x427a74]\n??:?
    void tmpm1vvw34r.__modtest() [0x427b0c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a946]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff88]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa65]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a91d]\n??:? runModuleUnitTests [0x42b889]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281dc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428163]\n??:? _d_run_main [0x4280ce]\n??:? main [0x427b1f]\n??:?
    __libc_start_main [0x911e1554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i = 2L;\n    while (i < n)\
    \ {\n        if (n % i == 0L) {\n            return n / i;\n        }\n      \
    \  i += 1L;\n    }\n    return 1L;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n           \
    \ largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long\
    \ i = 2; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n          \
    \  largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++) \n    {\n        if (n % i == 0L) \n        {\n        \
    \    largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n   \
    \ alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n   \
    \ assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long\
    \ i = 2; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n          \
    \  largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    foreach (i;\
    \ 2 .. n)\n    {\n        if (n % i == 0)\n            largest = i;\n    }\n \
    \   return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n\
    \    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n           \
    \ largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long\
    \ i = 2; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n          \
    \  largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i = n - 1;\n    while (i >\
    \ 0) \n    {\n        if (n % i == 0) \n        {\n            return i;\n   \
    \     }\n        i--;\n    }\n    return 0;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    foreach (i;\
    \ 2 .. n) {\n        if (n % i == 0) {\n            largest = i;\n        }\n\
    \    }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++) \n    {\n        if (n % i == 0L) \n        {\n        \
    \    largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n   \
    \ alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n   \
    \ assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i = n;\n    while (i > 0) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n        i--;\n \
    \   }\n    return 0;\n}\n/*\n For a given number n, find the smallest number that\
    \ is evenly divisible by all numbers from 1 to n\n    >>> smallest_multiple(10L)\n\
    \    2520L\n*/\nlong smallest_multiple(long n) \n{\n    long i = n;\n    while\
    \ (i > 0) {\n        if (n % i == 0) {\n            return i;\n        }\n   \
    \     i--;\n    }\n    return 0;\n}\n/*\n For a given number n, find the sum of\
    \ all the multiples of 3 or 5 below n\n    >>> sum_of_multiples(10L)\n    23L\n\
    */\nlong sum_of_multiples(long n) \n{\n    long i = n;\n    long sum = 0;\n  \
    \  while (i > 0) {\n        if (n % i == 0) {\n            sum += i;\n       \
    \ }\n        i--;\n    }\n    return sum;\n}\n/*\n For a given number n, find\
    \ the sum of all the even-valued Fibonacci numbers below n\n    >>> sum_of_even_fibonacci(10L)\n\
    \    10L\n*/\nlong sum_of_even_fibonacci(long n) \n{\n    long i = n;\n    long\
    \ sum = 0;\n    while (i > 0) {\n        if (n % i == 0) {\n            sum +=\
    \ i;\n        }\n        i--;\n    }\n    return sum;\n}\n/*\n For a given number\
    \ n, find the largest prime factor of n\n    >>> largest_prime_factor(10L)\n \
    \   5L\n*/\nlong largest_prime_factor(long n) \n{\n    long i = n;\n    while\
    \ (i > 0) {\n        if (n % i == 0) {\n            return i;\n        }\n   \
    \     i--;\n    }\n    return 0;\n}\n/*\n For a given number n, find the largest\
    \ palindrome made from the product\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbhkee6vk.d(85): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpbhkee6vk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++) \n    {\n        if (n % i == 0L) \n        {\n        \
    \    largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n   \
    \ alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n   \
    \ assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long max = 0L;\n    for (long i\
    \ = 1L; i < n; i++) \n    {\n        if (n % i == 0L) \n        {\n          \
    \  max = i;\n        }\n    }\n    return max;\n}\n/*\n For a given number n,\
    \ find the smallest number that is evenly divisible by all numbers from 1 to n\n\
    \    >>> smallest_multiple(10L)\n    2520L\n*/\nlong smallest_multiple(long n)\
    \ \n{\n    long max = 0L;\n    for (long i = 1L; i < n; i++) \n    {\n       \
    \ if (n % i == 0L) \n        {\n            max = i;\n        }\n    }\n    return\
    \ max;\n}\n/*\n For a given number n, find the sum of all the multiples of 3 or\
    \ 5 below n\n    >>> sum_of_multiples(10L)\n    23L\n*/\nlong sum_of_multiples(long\
    \ n) \n{\n    long sum = 0L;\n    for (long i = 1L; i < n; i++) \n    {\n    \
    \    if (i % 3 == 0L || i % 5 == 0L) \n        {\n            sum += i;\n    \
    \    }\n    }\n    return sum;\n}\n/*\n For a given number n, find the sum of\
    \ the squares of all numbers from 1 to n\n    >>> sum_of_squares(10L)\n    385L\n\
    */\nlong sum_of_squares(long n) \n{\n    long sum = 0L;\n    for (long i = 1L;\
    \ i <= n; i++) \n    {\n        sum += i * i;\n    }\n    return sum;\n}\n/*\n\
    \ For a given number n, find the square of the sum of all numbers from 1 to n\n\
    \    >>> square_of_sum(10L)\n    3025L\n*/\nlong square_of_sum(long n) \n{\n \
    \   long sum = 0L;\n    for (long i = 1L; i <= n; i++) \n    {\n        sum +=\
    \ i;\n    }\n    return sum * sum;\n}\n/*\n\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps1w0wtpy.d(82): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmps1w0wtpy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long\
    \ i = 2; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n          \
    \  largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i = n;\n    while (i > 1) \n\
    \    {\n        if (n % i == 0) \n        {\n            return i;\n        }\n\
    \        i -= 1;\n    }\n    return 1;\n}\nunittest\n{\n    alias candidate =\
    \ largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpjhpm4li1.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d7d]\n??:? void tmpjhpm4li1.__unittest_L21_C1() [0x427a64]\n??:?
    void tmpjhpm4li1.__modtest() [0x427afc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baa3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a936]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff78]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa55]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a90d]\n??:? runModuleUnitTests [0x42b879]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281cc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428153]\n??:? _d_run_main [0x4280be]\n??:? main [0x427b0f]\n??:?
    __libc_start_main [0x3c1d4554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long\
    \ i = 2; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n          \
    \  largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++)\n    {\n        if (n % i == 0L)\n        {\n          \
    \  largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++) \n    {\n        if (n % i == 0L) \n        {\n        \
    \    largest = i;\n        }\n    }\n    return largest;\n}\n/*\n For a given\
    \ number n, find the smallest number that is evenly divisible by all numbers from\
    \ 1 to n\n    >>> smallest_multiple(10L)\n    2520L\n*/\nlong smallest_multiple(long\
    \ n) \n{\n    long smallest = 1L;\n    for (long i = 1L; i <= n; i++) \n    {\n\
    \        smallest = lcm(smallest, i);\n    }\n    return smallest;\n}\n/*\n For\
    \ a given number n, find the sum of all the multiples of 3 or 5 below n\n    >>>\
    \ sum_of_multiples(10L)\n    23L\n*/\nlong sum_of_multiples(long n) \n{\n    long\
    \ sum = 0L;\n    for (long i = 1L; i < n; i++) \n    {\n        if (i % 3 == 0L\
    \ || i % 5 == 0L) \n        {\n            sum += i;\n        }\n    }\n    return\
    \ sum;\n}\n/*\n For a given number n, find the sum of the squares of all the numbers\
    \ from 1 to n\n    >>> sum_of_squares(10L)\n    385L\n*/\nlong sum_of_squares(long\
    \ n) \n{\n    long sum = 0L;\n    for (long i = 1L; i <= n; i++) \n    {\n   \
    \     sum += i * i;\n    }\n    return sum;\n}\n/*\n For a given number n, find\
    \ the square of the sum of all the numbers from 1 to n\n    >>> square_of_sum(10L)\n\
    \    3025L\n*/\nlong square_of_sum(long n) \n{\n    long sum = 0L;\n    for (long\
    \ i = 1L; i <= n; i++) \n    {\n        sum += i;\n    }\n    return sum * sum;\n\
    }\n/*\n For a given number n, find the difference between\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmsood_16.d(79): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpmsood_16.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i = 2L;\n    while (i < n)\
    \ {\n        if (n % i == 0L) {\n            n = n / i;\n        } else {\n  \
    \          i = i + 1L;\n        }\n    }\n    return n;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpbji1byqj.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d8d]\n??:? void tmpbji1byqj.__unittest_L20_C1() [0x427a78]\n??:?
    void tmpbji1byqj.__modtest() [0x427b10]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a946]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff88]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa65]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a91d]\n??:? runModuleUnitTests [0x42b889]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281dc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428163]\n??:? _d_run_main [0x4280ce]\n??:? main [0x427b23]\n??:?
    __libc_start_main [0x8b8ff554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i = n;\n    while (i > 1) \n\
    \    {\n        if (n % i == 0) \n        {\n            return i;\n        }\n\
    \        i--;\n    }\n    return 1;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpj2ndvgbl.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d7d]\n??:? void tmpj2ndvgbl.__unittest_L21_C1() [0x427a64]\n??:?
    void tmpj2ndvgbl.__modtest() [0x427afc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baa3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a936]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff78]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa55]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a90d]\n??:? runModuleUnitTests [0x42b879]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281cc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428153]\n??:? _d_run_main [0x4280be]\n??:? main [0x427b0f]\n??:?
    __libc_start_main [0x7f62d554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i = n;\n    while (i > 0) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n        i--;\n \
    \   }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpxu81z2kz.d(23): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d75]\n??:? void tmpxu81z2kz.__unittest_L19_C1() [0x427a60]\n??:?
    void tmpxu81z2kz.__modtest() [0x427af8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a92e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff70]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a905]\n??:? runModuleUnitTests [0x42b871]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42814b]\n??:? _d_run_main [0x4280b6]\n??:? main [0x427b0b]\n??:?
    __libc_start_main [0x1d317554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long\
    \ i = 2; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n          \
    \  largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i <= n; i++)\n    {\n        if (n % i == 0L)\n        {\n         \
    \   largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpm1vvw34r.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d8d]\n??:? void tmpm1vvw34r.__unittest_L20_C1() [0x427a74]\n??:?
    void tmpm1vvw34r.__modtest() [0x427b0c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a946]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff88]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa65]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a91d]\n??:? runModuleUnitTests [0x42b889]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281dc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428163]\n??:? _d_run_main [0x4280ce]\n??:? main [0x427b1f]\n??:?
    __libc_start_main [0x911e1554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest_divisor = 1L;\n   \
    \ for (long i = 2L; i <= n; i++) \n    {\n        if (n % i == 0L) \n        {\n\
    \            largest_divisor = i;\n        }\n    }\n    return largest_divisor;\n\
    }\nunittest\n{\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L)\
    \ == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n\
    \    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp0fstq72r.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d8d]\n??:? void tmp0fstq72r.__unittest_L20_C1() [0x427a74]\n??:?
    void tmp0fstq72r.__modtest() [0x427b0c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a946]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff88]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa65]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a91d]\n??:? runModuleUnitTests [0x42b889]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281dc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428163]\n??:? _d_run_main [0x4280ce]\n??:? main [0x427b1f]\n??:?
    __libc_start_main [0xd8160554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i = n;\n    while (i > 0) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n        i -= 1;\n\
    \    }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp9olih06m.d(23): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d75]\n??:? void tmp9olih06m.__unittest_L19_C1() [0x427a60]\n??:?
    void tmp9olih06m.__modtest() [0x427af8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a92e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff70]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a905]\n??:? runModuleUnitTests [0x42b871]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42814b]\n??:? _d_run_main [0x4280b6]\n??:? main [0x427b0b]\n??:?
    __libc_start_main [0x706b554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++) \n    {\n        if (n % i == 0L) \n        {\n        \
    \    largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n   \
    \ alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n   \
    \ assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++)\n    {\n        if (n % i == 0L)\n        {\n          \
    \  largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i = 2L;\n    while (i < n)\
    \ \n    {\n        if (n % i == 0L) \n        {\n            return n / i;\n \
    \       }\n        i += 1L;\n    }\n    return 1L;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long\
    \ i = 2; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++) \n    {\n        if (n % i == 0L) \n        {\n        \
    \    largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n   \
    \ alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n   \
    \ assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++) \n    {\n        if (n % i == 0L) \n        {\n        \
    \    largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n   \
    \ alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n   \
    \ assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long\
    \ i = 2; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n          \
    \  largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n         \
    \   largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n           \
    \ largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i = n;\n    while (i > 1) \n\
    \    {\n        if (n % i == 0) \n        {\n            return i;\n        }\n\
    \        i -= 1;\n    }\n    return 1;\n}\nunittest\n{\n    alias candidate =\
    \ largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpjhpm4li1.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d7d]\n??:? void tmpjhpm4li1.__unittest_L21_C1() [0x427a64]\n??:?
    void tmpjhpm4li1.__modtest() [0x427afc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baa3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a936]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff78]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa55]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a90d]\n??:? runModuleUnitTests [0x42b879]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281cc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428153]\n??:? _d_run_main [0x4280be]\n??:? main [0x427b0f]\n??:?
    __libc_start_main [0x3c1d4554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long\
    \ i = 2; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n          \
    \  largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long\
    \ i = 2; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n          \
    \  largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i = n;\n    while(i > 1) \n\
    \    {\n        if(n % i == 0) \n        {\n            return i;\n        }\n\
    \        i--;\n    }\n    return 1;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpemteh6so.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d7d]\n??:? void tmpemteh6so.__unittest_L21_C1() [0x427a64]\n??:?
    void tmpemteh6so.__modtest() [0x427afc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baa3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a936]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff78]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa55]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a90d]\n??:? runModuleUnitTests [0x42b879]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281cc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428153]\n??:? _d_run_main [0x4280be]\n??:? main [0x427b0f]\n??:?
    __libc_start_main [0x75147554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i = n;\n    while(i > 0) \n\
    \    {\n        if(n % i == 0) \n        {\n            return i;\n        }\n\
    \        i--;\n    }\n    return 1;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpi86yqndx.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d7d]\n??:? void tmpi86yqndx.__unittest_L21_C1() [0x427a64]\n??:?
    void tmpi86yqndx.__modtest() [0x427afc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baa3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a936]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff78]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa55]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a90d]\n??:? runModuleUnitTests [0x42b879]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281cc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428153]\n??:? _d_run_main [0x4280be]\n??:? main [0x427b0f]\n??:?
    __libc_start_main [0x2d176554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i = n - 1;\n    while (i >\
    \ 0) {\n        if (n % i == 0) {\n            return i;\n        }\n        i\
    \ -= 1;\n    }\n    return 1;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i = n - 1;\n    while (i >\
    \ 0) {\n        if (n % i == 0) {\n            return i;\n        }\n        i\
    \ -= 1;\n    }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++) \n    {\n        if (n % i == 0L) \n        {\n        \
    \    largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n   \
    \ alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n   \
    \ assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i = n;\n    while (i > 1) \n\
    \    {\n        if (n % i == 0) \n        {\n            return i;\n        }\n\
    \        i--;\n    }\n    return 1;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpj2ndvgbl.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d7d]\n??:? void tmpj2ndvgbl.__unittest_L21_C1() [0x427a64]\n??:?
    void tmpj2ndvgbl.__modtest() [0x427afc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baa3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a936]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff78]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa55]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a90d]\n??:? runModuleUnitTests [0x42b879]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281cc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428153]\n??:? _d_run_main [0x4280be]\n??:? main [0x427b0f]\n??:?
    __libc_start_main [0x7f62d554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i = 2L;\n    while (i < n)\
    \ \n    {\n        if (n % i == 0L) \n        {\n            return n / i;\n \
    \       }\n        i += 1L;\n    }\n    return 1L;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i = n;\n    while (i > 0) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n        i--;\n \
    \   }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpxu81z2kz.d(23): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d75]\n??:? void tmpxu81z2kz.__unittest_L19_C1() [0x427a60]\n??:?
    void tmpxu81z2kz.__modtest() [0x427af8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a92e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff70]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a905]\n??:? runModuleUnitTests [0x42b871]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42814b]\n??:? _d_run_main [0x4280b6]\n??:? main [0x427b0b]\n??:?
    __libc_start_main [0x1d317554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n           \
    \ largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i = n;\n    while (i > 1) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n        i--;\n \
    \   }\n    return i;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvyqfw7va.d(23): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d75]\n??:? void tmpvyqfw7va.__unittest_L19_C1() [0x427a60]\n??:?
    void tmpvyqfw7va.__modtest() [0x427af8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a92e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff70]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a905]\n??:? runModuleUnitTests [0x42b871]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42814b]\n??:? _d_run_main [0x4280b6]\n??:? main [0x427b0b]\n??:?
    __libc_start_main [0x4decf554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i;\n    for (i = n - 1; i >\
    \ 0; i--) \n    {\n        if (n % i == 0) \n        {\n            return i;\n\
    \        }\n    }\n    return 1;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++) \n    {\n        if (n % i == 0L) \n        {\n        \
    \    largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n   \
    \ alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n   \
    \ assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++)\n    {\n        if (n % i == 0L)\n        {\n          \
    \  largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long\
    \ i = 2; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n          \
    \  largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n           \
    \ largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++) \n    {\n        if (n % i == 0L) \n        {\n        \
    \    largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n   \
    \ alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n   \
    \ assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n         \
    \   largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++) \n    {\n        if (n % i == 0L) \n        {\n        \
    \    largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n   \
    \ alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n   \
    \ assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++) \n    {\n        if (n % i == 0L) \n        {\n        \
    \    largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n   \
    \ alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n   \
    \ assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    foreach (i;\
    \ 2 .. n) {\n        if (n % i == 0) {\n            largest = i;\n        }\n\
    \    }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++) \n    {\n        if (n % i == 0L) \n        {\n        \
    \    largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n   \
    \ alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n   \
    \ assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i = n - 1;\n    while (i >\
    \ 0) {\n        if (n % i == 0) {\n            return i;\n        }\n        i--;\n\
    \    }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n           \
    \ largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i = n;\n    while (i > 1) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n        i--;\n \
    \   }\n    return 1;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvd3dvuwc.d(23): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d7d]\n??:? void tmpvd3dvuwc.__unittest_L19_C1() [0x427a64]\n??:?
    void tmpvd3dvuwc.__modtest() [0x427afc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baa3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a936]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff78]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa55]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a90d]\n??:? runModuleUnitTests [0x42b879]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281cc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428153]\n??:? _d_run_main [0x4280be]\n??:? main [0x427b0f]\n??:?
    __libc_start_main [0x65b43554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i;\n    for (i = n - 1; i >\
    \ 0; i--) \n    {\n        if (n % i == 0) \n        {\n            return i;\n\
    \        }\n    }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long\
    \ i = 2; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n          \
    \  largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i = n;\n    while (i > 1) \n\
    \    {\n        if (n % i == 0) \n        {\n            return i;\n        }\n\
    \        i -= 1;\n    }\n    return 1;\n}\nunittest\n{\n    alias candidate =\
    \ largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpjhpm4li1.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d7d]\n??:? void tmpjhpm4li1.__unittest_L21_C1() [0x427a64]\n??:?
    void tmpjhpm4li1.__modtest() [0x427afc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baa3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a936]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff78]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa55]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a90d]\n??:? runModuleUnitTests [0x42b879]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281cc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428153]\n??:? _d_run_main [0x4280be]\n??:? main [0x427b0f]\n??:?
    __libc_start_main [0x3c1d4554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i;\n    for (i = n - 1; i >\
    \ 0; i--) \n    {\n        if (n % i == 0) \n        {\n            return i;\n\
    \        }\n    }\n    return 1;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i = n;\n    while(i > 0)\n\
    \    {\n        if(n % i == 0)\n            return i;\n        i--;\n    }\n \
    \   return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L)\
    \ == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n\
    \    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp_h8pegwr.d(23): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d75]\n??:? void tmp_h8pegwr.__unittest_L19_C1() [0x427a60]\n??:?
    void tmp_h8pegwr.__modtest() [0x427af8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a92e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff70]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a905]\n??:? runModuleUnitTests [0x42b871]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42814b]\n??:? _d_run_main [0x4280b6]\n??:? main [0x427b0b]\n??:?
    __libc_start_main [0x7528e554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++) \n    {\n        if (n % i == 0L) \n        {\n        \
    \    largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n   \
    \ alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n   \
    \ assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i;\n    for (i = n - 1; i >\
    \ 0; i--) \n    {\n        if (n % i == 0) \n        {\n            return i;\n\
    \        }\n    }\n    return 1;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++) \n    {\n        if (n % i == 0L) \n        {\n        \
    \    largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n   \
    \ alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n   \
    \ assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i = n;\n    while (i > 1) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n        i--;\n \
    \   }\n    return 1;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvd3dvuwc.d(23): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d7d]\n??:? void tmpvd3dvuwc.__unittest_L19_C1() [0x427a64]\n??:?
    void tmpvd3dvuwc.__modtest() [0x427afc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baa3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a936]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff78]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa55]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a90d]\n??:? runModuleUnitTests [0x42b879]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281cc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428153]\n??:? _d_run_main [0x4280be]\n??:? main [0x427b0f]\n??:?
    __libc_start_main [0x65b43554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long\
    \ i = 2; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n          \
    \  largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long\
    \ i = 2; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n          \
    \  largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i;\n    for (i = n - 1; i >\
    \ 0; i--)\n    {\n        if (n % i == 0)\n        {\n            return i;\n\
    \        }\n    }\n    return 1;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++) \n    {\n        if (n % i == 0L) \n        {\n        \
    \    largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n   \
    \ alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n   \
    \ assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i = n - 1;\n    while (i >\
    \ 0) {\n        if (n % i == 0) {\n            return i;\n        }\n        i\
    \ -= 1;\n    }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++) \n    {\n        if (n % i == 0L) \n        {\n        \
    \    largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n   \
    \ alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n   \
    \ assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    foreach\
    \ (i; 1L .. n) {\n        if (n % i == 0L) {\n            largest = i;\n     \
    \   }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i = 2L;\n    while (i < n)\
    \ {\n        if (n % i == 0L) {\n            return n / i;\n        }\n      \
    \  i += 1L;\n    }\n    return 1L;\n}\n/*\n For a given number n, find the largest\
    \ number that divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n\
    \    5L\n    \n*/\nlong largest_divisor_sqrt(long n) \n{\n    long i = 2L;\n \
    \   while (i < sqrt(n)) {\n        if (n % i == 0L) {\n            return n /\
    \ i;\n        }\n        i += 1L;\n    }\n    return 1L;\n}\n/*\n For a given\
    \ number n, find the largest number that divides n evenly, smaller than n\n  \
    \  >>> largest_divisor(15L)\n    5L\n    \n*/\nlong largest_divisor_sqrt_2(long\
    \ n) \n{\n    long i = 2L;\n    while (i < sqrt(n)) {\n        if (n % i == 0L)\
    \ {\n            return n / i;\n        }\n        i += 2L;\n    }\n    return\
    \ 1L;\n}\n/*\n For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15L)\n    5L\n    \n*/\nlong largest_divisor_sqrt_3(long\
    \ n) \n{\n    long i = 3L;\n    while (i < sqrt(n)) {\n        if (n % i == 0L)\
    \ {\n            return n / i;\n        }\n        i += 2L;\n    }\n    return\
    \ 1L;\n}\n/*\n For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15L)\n    5L\n    \n*/\nlong largest_divisor_sqrt_4(long\
    \ n) \n{\n    long i = 3L;\n    while (i < sqrt(n)) {\n        if (n % i == 0L)\
    \ {\n            return\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2z7700n3.d(82): Error: expression expected, not `unittest`\n/tmp/tmp2z7700n3.d(83):
    Error: found `{` when expecting `;` following `return` statement\n/tmp/tmp2z7700n3.d(92):
    Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp2z7700n3.d(92):
    Error: found `End of File` when expecting `}` following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2z7700n3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    foreach\
    \ (i; 1L .. n) {\n        if (n % i == 0L) {\n            largest = i;\n     \
    \   }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i = 2L;\n    while (i < n)\
    \ \n    {\n        if (n % i == 0L) \n        {\n            return n / i;\n \
    \       }\n        i += 1L;\n    }\n    return 1L;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i = n;\n    while (i > 0) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n        i -= 1;\n\
    \    }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp9olih06m.d(23): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d75]\n??:? void tmp9olih06m.__unittest_L19_C1() [0x427a60]\n??:?
    void tmp9olih06m.__modtest() [0x427af8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a92e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff70]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a905]\n??:? runModuleUnitTests [0x42b871]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42814b]\n??:? _d_run_main [0x4280b6]\n??:? main [0x427b0b]\n??:?
    __libc_start_main [0x706b554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    foreach\
    \ (i; 1L .. n) {\n        if (n % i == 0L) {\n            largest = i;\n     \
    \   }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i <= n; i++) \n    {\n        if (n % i == 0L) \n        {\n       \
    \     largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n  \
    \  alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n  \
    \  assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpquj8mff9.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d8d]\n??:? void tmpquj8mff9.__unittest_L20_C1() [0x427a74]\n??:?
    void tmpquj8mff9.__modtest() [0x427b0c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a946]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff88]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa65]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a91d]\n??:? runModuleUnitTests [0x42b889]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281dc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428163]\n??:? _d_run_main [0x4280ce]\n??:? main [0x427b1f]\n??:?
    __libc_start_main [0x3d1eb554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i = n;\n    while (i > 1) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n        i--;\n \
    \   }\n    return i;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvyqfw7va.d(23): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d75]\n??:? void tmpvyqfw7va.__unittest_L19_C1() [0x427a60]\n??:?
    void tmpvyqfw7va.__modtest() [0x427af8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a92e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff70]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a905]\n??:? runModuleUnitTests [0x42b871]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42814b]\n??:? _d_run_main [0x4280b6]\n??:? main [0x427b0b]\n??:?
    __libc_start_main [0x4decf554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i = n;\n    while (i > 1) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n        i--;\n \
    \   }\n    return 1;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvd3dvuwc.d(23): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d7d]\n??:? void tmpvd3dvuwc.__unittest_L19_C1() [0x427a64]\n??:?
    void tmpvd3dvuwc.__modtest() [0x427afc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baa3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a936]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff78]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa55]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a90d]\n??:? runModuleUnitTests [0x42b879]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281cc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428153]\n??:? _d_run_main [0x4280be]\n??:? main [0x427b0f]\n??:?
    __libc_start_main [0x65b43554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long\
    \ i = 2; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n          \
    \  largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    foreach (i;\
    \ 2 .. n) \n    {\n        if (n % i == 0) \n        {\n            largest =\
    \ i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i = n;\n    while (i > 0) \n\
    \    {\n        if (n % i == 0) \n        {\n            return i;\n        }\n\
    \        i--;\n    }\n    return i;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpkhs8ksli.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d75]\n??:? void tmpkhs8ksli.__unittest_L21_C1() [0x427a60]\n??:?
    void tmpkhs8ksli.__modtest() [0x427af8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a92e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff70]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a905]\n??:? runModuleUnitTests [0x42b871]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42814b]\n??:? _d_run_main [0x4280b6]\n??:? main [0x427b0b]\n??:?
    __libc_start_main [0x5f283554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++) \n    {\n        if (n % i == 0L) \n        {\n        \
    \    largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n   \
    \ alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n   \
    \ assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    foreach (i;\
    \ 2..n)\n    {\n        if (n % i == 0)\n            largest = i;\n    }\n   \
    \ return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n\
    \    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long\
    \ i = 2; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i = n;\n    while (i > 0) \n\
    \    {\n        if (n % i == 0) \n        {\n            return i;\n        }\n\
    \        i--;\n    }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpiofilip_.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d75]\n??:? void tmpiofilip_.__unittest_L21_C1() [0x427a60]\n??:?
    void tmpiofilip_.__modtest() [0x427af8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a92e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff70]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a905]\n??:? runModuleUnitTests [0x42b871]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42814b]\n??:? _d_run_main [0x4280b6]\n??:? main [0x427b0b]\n??:?
    __libc_start_main [0x19203554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++) \n    {\n        if (n % i == 0L) \n        {\n        \
    \    largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n   \
    \ alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n   \
    \ assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++) \n    {\n        if (n % i == 0L) \n        {\n        \
    \    largest = i;\n        }\n    }\n    return largest;\n}\n/*\n For a given\
    \ number n, find the largest prime number that divides n evenly, smaller than\
    \ n\n    >>> largest_prime_divisor(15L)\n    5L\n    >>> largest_prime_divisor(16L)\n\
    \    2L\n    >>> largest_prime_divisor(17L)\n    17L\n*/\nlong largest_prime_divisor(long\
    \ n) \n{\n    long largest = 0L;\n    for (long i = 1L; i < n; i++) \n    {\n\
    \        if (n % i == 0L && is_prime(i)) \n        {\n            largest = i;\n\
    \        }\n    }\n    return largest;\n}\n/*\n For a given number n, find the\
    \ largest prime number that divides n evenly, smaller than n\n    >>> largest_prime_divisor(15L)\n\
    \    5L\n    >>> largest_prime_divisor(16L)\n    2L\n    >>> largest_prime_divisor(17L)\n\
    \    17L\n*/\nlong largest_prime_divisor(long n) \n{\n    long largest = 0L;\n\
    \    for (long i = 1L; i < n; i++) \n    {\n        if (n % i == 0L && is_prime(i))\
    \ \n        {\n            largest = i;\n        }\n    }\n    return largest;\n\
    }\n/*\n For a given number n, find the largest prime number that divides n evenly,\
    \ smaller than n\n    >>> largest_prime_divisor(15L)\n    5L\n    >>> largest_prime_divisor(16L)\n\
    \    2L\n    >>> largest_prime_divisor(17L)\n    17L\n*/\nlong largest_prime_divisor(long\
    \ n) \n{\n    long largest = 0L;\n    for (long i = 1L; i < n; i++) \n    {\n\
    \       \nunittest\n{\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L)\
    \ == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n\
    \    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvpsgxoe4.d(77): Error: found `unittest` instead of statement\n/tmp/tmpvpsgxoe4.d(87):
    Error: found `End of File` when expecting `}` following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvpsgxoe4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i;\n    for (i = n - 1; i >\
    \ 0; i--) \n    {\n        if (n % i == 0) \n        {\n            return i;\n\
    \        }\n    }\n    return 1;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++) \n    {\n        if (n % i == 0L) \n        {\n        \
    \    largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n   \
    \ alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n   \
    \ assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long\
    \ i = 2; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n          \
    \  largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long\
    \ i = 2; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n          \
    \  largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long max = 0L;\n    for (long i\
    \ = 1L; i < n; i++) \n    {\n        if (n % i == 0L) \n        {\n          \
    \  max = i;\n        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long\
    \ i = 2; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n          \
    \  largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i = n;\n    while (i > 0) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n        i--;\n \
    \   }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpxu81z2kz.d(23): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d75]\n??:? void tmpxu81z2kz.__unittest_L19_C1() [0x427a60]\n??:?
    void tmpxu81z2kz.__modtest() [0x427af8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a92e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff70]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a905]\n??:? runModuleUnitTests [0x42b871]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42814b]\n??:? _d_run_main [0x4280b6]\n??:? main [0x427b0b]\n??:?
    __libc_start_main [0x1d317554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long d = n - 1;\n    while (n %\
    \ d != 0)\n        d--;\n    return d;\n}\nunittest\n{\n    alias candidate =\
    \ largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    foreach (i;\
    \ 2 .. n) \n    {\n        if (n % i == 0) \n        {\n            largest =\
    \ i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest_divisor = 0L;\n   \
    \ for (long i = 1L; i < n; i++) \n    {\n        if (n % i == 0L) \n        {\n\
    \            largest_divisor = i;\n        }\n    }\n    return largest_divisor;\n\
    }\nunittest\n{\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L)\
    \ == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n\
    \    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++) \n    {\n        if (n % i == 0L) \n        {\n        \
    \    largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n   \
    \ alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n   \
    \ assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n           \
    \ largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i;\n    for (i = n - 1; i >\
    \ 0; i--)\n    {\n        if (n % i == 0)\n        {\n            return i;\n\
    \        }\n    }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++) \n    {\n        if (n % i == 0L) \n        {\n        \
    \    largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n   \
    \ alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n   \
    \ assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i = n - 1;\n    while (i >\
    \ 0) {\n        if (n % i == 0) {\n            return i;\n        }\n        i--;\n\
    \    }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long\
    \ i = 2; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n          \
    \  largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++) \n    {\n        if (n % i == 0L) \n        {\n        \
    \    largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n   \
    \ alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n   \
    \ assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long\
    \ i = 2; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n          \
    \  largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++) \n    {\n        if (n % i == 0L) \n        {\n        \
    \    largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n   \
    \ alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n   \
    \ assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    foreach (i;\
    \ 2 .. n)\n        if (n % i == 0)\n            largest = i;\n    return largest;\n\
    }\nunittest\n{\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L)\
    \ == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n\
    \    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n           \
    \ largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++) \n    {\n        if (n % i == 0L) \n        {\n        \
    \    largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n   \
    \ alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n   \
    \ assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n         \
    \   largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i = n;\n    while (i > 0) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n        i -= 1;\n\
    \    }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp9olih06m.d(23): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d75]\n??:? void tmp9olih06m.__unittest_L19_C1() [0x427a60]\n??:?
    void tmp9olih06m.__modtest() [0x427af8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a92e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff70]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a905]\n??:? runModuleUnitTests [0x42b871]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42814b]\n??:? _d_run_main [0x4280b6]\n??:? main [0x427b0b]\n??:?
    __libc_start_main [0x706b554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n         \
    \   largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i = n;\n    while (i > 1) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n        i -= 1;\n\
    \    }\n    return 1;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpm2gs7508.d(23): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d7d]\n??:? void tmpm2gs7508.__unittest_L19_C1() [0x427a64]\n??:?
    void tmpm2gs7508.__modtest() [0x427afc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baa3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a936]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff78]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa55]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a90d]\n??:? runModuleUnitTests [0x42b879]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281cc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428153]\n??:? _d_run_main [0x4280be]\n??:? main [0x427b0f]\n??:?
    __libc_start_main [0x956d6554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i = n;\n    while (i > 0) \n\
    \    {\n        if (n % i == 0) \n        {\n            return i;\n        }\n\
    \        i--;\n    }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpiofilip_.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d75]\n??:? void tmpiofilip_.__unittest_L21_C1() [0x427a60]\n??:?
    void tmpiofilip_.__modtest() [0x427af8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a92e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff70]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a905]\n??:? runModuleUnitTests [0x42b871]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42814b]\n??:? _d_run_main [0x4280b6]\n??:? main [0x427b0b]\n??:?
    __libc_start_main [0x19203554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i = n - 1;\n    while (i >\
    \ 0) {\n        if (n % i == 0) {\n            return i;\n        }\n        i--;\n\
    \    }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++) \n    {\n        if (n % i == 0L) \n        {\n        \
    \    largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n   \
    \ alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n   \
    \ assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long\
    \ i = 2; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n          \
    \  largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++) \n    {\n        if (n % i == 0L) \n        {\n        \
    \    largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n   \
    \ alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n   \
    \ assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++) \n    {\n        if (n % i == 0L) \n        {\n        \
    \    largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n   \
    \ alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n   \
    \ assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i = n;\n    while (i > 1) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n        i--;\n \
    \   }\n    return 1;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvd3dvuwc.d(23): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d7d]\n??:? void tmpvd3dvuwc.__unittest_L19_C1() [0x427a64]\n??:?
    void tmpvd3dvuwc.__modtest() [0x427afc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baa3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a936]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff78]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa55]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a90d]\n??:? runModuleUnitTests [0x42b879]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281cc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428153]\n??:? _d_run_main [0x4280be]\n??:? main [0x427b0f]\n??:?
    __libc_start_main [0x65b43554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i = n;\n    while (i > 0) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n        i--;\n \
    \   }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpxu81z2kz.d(23): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d75]\n??:? void tmpxu81z2kz.__unittest_L19_C1() [0x427a60]\n??:?
    void tmpxu81z2kz.__modtest() [0x427af8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a92e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff70]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a905]\n??:? runModuleUnitTests [0x42b871]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42814b]\n??:? _d_run_main [0x4280b6]\n??:? main [0x427b0b]\n??:?
    __libc_start_main [0x1d317554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++) \n    {\n        if (n % i == 0L) \n        {\n        \
    \    largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n   \
    \ alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n   \
    \ assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i = n;\n    while (i > 1) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n        i--;\n \
    \   }\n    return 1;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvd3dvuwc.d(23): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d7d]\n??:? void tmpvd3dvuwc.__unittest_L19_C1() [0x427a64]\n??:?
    void tmpvd3dvuwc.__modtest() [0x427afc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baa3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a936]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff78]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa55]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a90d]\n??:? runModuleUnitTests [0x42b879]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281cc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428153]\n??:? _d_run_main [0x4280be]\n??:? main [0x427b0f]\n??:?
    __libc_start_main [0x65b43554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    foreach (i;\
    \ 2 .. n)\n    {\n        if (n % i == 0)\n            largest = i;\n    }\n \
    \   return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n\
    \    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long\
    \ i = 2; i <= n / 2; i++) \n    {\n        if (n % i == 0) \n        {\n     \
    \       largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n\
    \    alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n\
    \    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    foreach\
    \ (i; 1L .. n)\n    {\n        if (n % i == 0L)\n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i;\n    for (i = n/2; i > 1;\
    \ i--) \n    {\n        if (n % i == 0) \n        {\n            return i;\n \
    \       }\n    }\n    return 1;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long\
    \ i = 2; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    foreach (i;\
    \ 2 .. n)\n    {\n        if (n % i == 0)\n            largest = i;\n    }\n \
    \   return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\n\
    \    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++) \n    {\n        if (n % i == 0L) \n        {\n        \
    \    largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n   \
    \ alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n   \
    \ assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    foreach\
    \ (i; 1L .. n) {\n        if (n % i == 0L) {\n            largest = i;\n     \
    \   }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++) \n    {\n        if (n % i == 0L) \n        {\n        \
    \    largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n   \
    \ alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n   \
    \ assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i = n;\n    while (i > 0) \n\
    \    {\n        if (n % i == 0) \n        {\n            return i;\n        }\n\
    \        i--;\n    }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpiofilip_.d(25): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d75]\n??:? void tmpiofilip_.__unittest_L21_C1() [0x427a60]\n??:?
    void tmpiofilip_.__modtest() [0x427af8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a92e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff70]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a905]\n??:? runModuleUnitTests [0x42b871]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42814b]\n??:? _d_run_main [0x4280b6]\n??:? main [0x427b0b]\n??:?
    __libc_start_main [0x19203554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i <= n; i++) \n    {\n        if (n % i == 0L) \n        {\n       \
    \     largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n  \
    \  alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n  \
    \  assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpquj8mff9.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d8d]\n??:? void tmpquj8mff9.__unittest_L20_C1() [0x427a74]\n??:?
    void tmpquj8mff9.__modtest() [0x427b0c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a946]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff88]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa65]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a91d]\n??:? runModuleUnitTests [0x42b889]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281dc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428163]\n??:? _d_run_main [0x4280ce]\n??:? main [0x427b1f]\n??:?
    __libc_start_main [0x3d1eb554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++) \n    {\n        if (n % i == 0L) \n        {\n        \
    \    largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n   \
    \ alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n   \
    \ assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++) \n    {\n        if (n % i == 0L) \n        {\n        \
    \    largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n   \
    \ alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n   \
    \ assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++) \n    {\n        if (n % i == 0L) \n        {\n        \
    \    largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n   \
    \ alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n   \
    \ assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++)\n    {\n        if (n % i == 0)\n        {\n           \
    \ largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i = n;\n    while (i > 1) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n        i--;\n \
    \   }\n    return 1;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvd3dvuwc.d(23): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d7d]\n??:? void tmpvd3dvuwc.__unittest_L19_C1() [0x427a64]\n??:?
    void tmpvd3dvuwc.__modtest() [0x427afc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baa3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a936]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff78]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa55]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a90d]\n??:? runModuleUnitTests [0x42b879]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281cc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428153]\n??:? _d_run_main [0x4280be]\n??:? main [0x427b0f]\n??:?
    __libc_start_main [0x65b43554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++) \n    {\n        if (n % i == 0L) \n        {\n        \
    \    largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n   \
    \ alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n   \
    \ assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++) \n    {\n        if (n % i == 0L) \n        {\n        \
    \    largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n   \
    \ alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n   \
    \ assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long\
    \ i = 2; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n          \
    \  largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i = n;\n    while (i > 1) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n        i--;\n \
    \   }\n    return 1;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvd3dvuwc.d(23): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d7d]\n??:? void tmpvd3dvuwc.__unittest_L19_C1() [0x427a64]\n??:?
    void tmpvd3dvuwc.__modtest() [0x427afc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baa3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a936]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff78]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa55]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a90d]\n??:? runModuleUnitTests [0x42b879]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281cc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428153]\n??:? _d_run_main [0x4280be]\n??:? main [0x427b0f]\n??:?
    __libc_start_main [0x65b43554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++)\n    {\n        if (n % i == 0L)\n        {\n          \
    \  largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 1;\n    for (long\
    \ i = 2; i < n; i++) \n    {\n        if (n % i == 0) \n        {\n          \
    \  largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i = n;\n    while (i > 0) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n        i--;\n \
    \   }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpxu81z2kz.d(23): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d75]\n??:? void tmpxu81z2kz.__unittest_L19_C1() [0x427a60]\n??:?
    void tmpxu81z2kz.__modtest() [0x427af8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a92e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff70]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a905]\n??:? runModuleUnitTests [0x42b871]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42814b]\n??:? _d_run_main [0x4280b6]\n??:? main [0x427b0b]\n??:?
    __libc_start_main [0x1d317554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++)\n    {\n        if (n % i == 0L)\n        {\n          \
    \  largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias\
    \ candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i = 2L;\n    while (i < n)\
    \ {\n        if (n % i == 0L) {\n            return n / i;\n        }\n      \
    \  i += 1L;\n    }\n    return 1L;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i = n - 1;\n    while (i >\
    \ 0) \n    {\n        if (n % i == 0) \n        {\n            return i;\n   \
    \     }\n        i--;\n    }\n    return 0;\n}\nunittest\n{\n    alias candidate\
    \ = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L)\
    \ == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n\
    \    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long largest = 0L;\n    for (long\
    \ i = 1L; i < n; i++) \n    {\n        if (n % i == 0L) \n        {\n        \
    \    largest = i;\n        }\n    }\n    return largest;\n}\nunittest\n{\n   \
    \ alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n   \
    \ assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L)\
    \ == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i = 2L;\n    while (i < n)\
    \ {\n        if (n % i == 0L) {\n            return n / i;\n        }\n      \
    \  i = i + 1L;\n    }\n    return 1L;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n    >>> largest_divisor(15L)\n    5L\n   \
    \ \n*/\nlong largest_divisor(long n) \n{\n    long i = n;\n    while (i > 0) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n        i--;\n \
    \   }\n    return 0;\n}\nunittest\n{\n    alias candidate = largest_divisor;\n\
    \n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L)\
    \ == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpxu81z2kz.d(23): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d75]\n??:? void tmpxu81z2kz.__unittest_L19_C1() [0x427a60]\n??:?
    void tmpxu81z2kz.__modtest() [0x427af8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a92e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff70]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a905]\n??:? runModuleUnitTests [0x42b871]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42814b]\n??:? _d_run_main [0x4280b6]\n??:? main [0x427b0b]\n??:?
    __libc_start_main [0x1d317554]\n1/1 unittests FAILED\n'''
  stdout: b''
