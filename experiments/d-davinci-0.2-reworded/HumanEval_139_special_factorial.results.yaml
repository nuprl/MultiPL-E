language: d
name: HumanEval_139_special_factorial
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n+1)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpppaestsi.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpppaestsi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long factorial = 1;\n    for (int i = 1; i <= n; i++)\n    {\n        factorial\
    \ *= i;\n    }\n    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmptsqe9im5.d(29): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d6d]\n??:? void tmptsqe9im5.__unittest_L25_C1() [0x427a66]\n??:?
    void tmptsqe9im5.__modtest() [0x427aec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff68]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa45]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a8fd]\n??:? runModuleUnitTests [0x42b869]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428143]\n??:? _d_run_main [0x4280ae]\n??:? main [0x427aff]\n??:?
    __libc_start_main [0x101f4554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= i;\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp5ke8eat8.d(29): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d65]\n??:? void tmp5ke8eat8.__unittest_L25_C1() [0x427a62]\n??:?
    void tmp5ke8eat8.__modtest() [0x427ae8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa3d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a8f5]\n??:? runModuleUnitTests [0x42b861]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42813b]\n??:? _d_run_main [0x4280a6]\n??:? main [0x427afb]\n??:?
    __libc_start_main [0x1692f554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo31rawt5.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo31rawt5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    for (long i = n; i > 0; i--)\n    {\n        result\
    \ *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L)\
    \ == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L)\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjunfuatp.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjunfuatp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1 .. n + 1)\n    {\n        result *= i;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpluqxm1q_.d(29): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d6d]\n??:? void tmpluqxm1q_.__unittest_L25_C1() [0x427a66]\n??:?
    void tmpluqxm1q_.__modtest() [0x427aec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff68]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa45]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a8fd]\n??:? runModuleUnitTests [0x42b869]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428143]\n??:? _d_run_main [0x4280ae]\n??:? main [0x427aff]\n??:?
    __libc_start_main [0x716a2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo2x40oh2.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo2x40oh2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr2_jzqw1.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr2_jzqw1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    for (int i = n; i > 0; i--)\n    {\n        result\
    \ *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L)\
    \ == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L)\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpck8zcpss.d(19): Error: cannot implicitly convert expression
    `n` of type `long` to `int`\n/tmp/tmpck8zcpss.d(21): Error: undefined identifier
    `factorial`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpck8zcpss.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdsugibhc.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdsugibhc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n+1)\n    {\n        result *= i;\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpywv1i9ix.d(29): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d6d]\n??:? void tmpywv1i9ix.__unittest_L25_C1() [0x427a66]\n??:?
    void tmpywv1i9ix.__modtest() [0x427aec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff68]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa45]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a8fd]\n??:? runModuleUnitTests [0x42b869]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428143]\n??:? _d_run_main [0x4280ae]\n??:? main [0x427aff]\n??:?
    __libc_start_main [0xc45b5554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1 .. n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpiscc8yeb.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiscc8yeb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    for (long i = n; i > 0; i--)\n    {\n        result\
    \ *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L)\
    \ == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L)\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp8w__9up.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp8w__9up.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9ctevokw.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9ctevokw.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    for (long i = n; i > 0; i--)\n    {\n        result\
    \ *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L)\
    \ == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L)\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgu0otvjq.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgu0otvjq.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    for (long i = n; i > 0; i--)\n    {\n        result\
    \ *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L)\
    \ == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L)\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0m9soar2.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0m9soar2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1 .. n + 1)\n    {\n        result *= i;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpxy95szn7.d(29): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d6d]\n??:? void tmpxy95szn7.__unittest_L25_C1() [0x427a66]\n??:?
    void tmpxy95szn7.__modtest() [0x427aec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff68]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa45]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a8fd]\n??:? runModuleUnitTests [0x42b869]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428143]\n??:? _d_run_main [0x4280ae]\n??:? main [0x427aff]\n??:?
    __libc_start_main [0x63ffb554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1 .. n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprpbb9qbk.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprpbb9qbk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= i;\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpsrwv4xea.d(29): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d65]\n??:? void tmpsrwv4xea.__unittest_L25_C1() [0x427a62]\n??:?
    void tmpsrwv4xea.__modtest() [0x427ae8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa3d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a8f5]\n??:? runModuleUnitTests [0x42b861]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42813b]\n??:? _d_run_main [0x4280a6]\n??:? main [0x427afb]\n??:?
    __libc_start_main [0x37fa8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n+1)\n    {\n        result *= i;\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpywv1i9ix.d(29): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d6d]\n??:? void tmpywv1i9ix.__unittest_L25_C1() [0x427a66]\n??:?
    void tmpywv1i9ix.__modtest() [0x427aec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff68]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa45]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a8fd]\n??:? runModuleUnitTests [0x42b869]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428143]\n??:? _d_run_main [0x4280ae]\n??:? main [0x427aff]\n??:?
    __libc_start_main [0xc45b5554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    return n == 0 ? 1 : n * special_factorial(n - 1);\n}\nunittest\n{\n    alias\
    \ candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L)\
    \ == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L)\
    \ == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpb344o8qc.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d65]\n??:? void tmpb344o8qc.__unittest_L20_C1() [0x427a62]\n??:?
    void tmpb344o8qc.__modtest() [0x427ae8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa3d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a8f5]\n??:? runModuleUnitTests [0x42b861]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42813b]\n??:? _d_run_main [0x4280a6]\n??:? main [0x427afb]\n??:?
    __libc_start_main [0x7506d554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    for (long i = n; i > 0; i--)\n    {\n        result\
    \ *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L)\
    \ == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L)\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0m9soar2.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0m9soar2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1 .. n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprpbb9qbk.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprpbb9qbk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    for (long i = n; i > 0; i--)\n    {\n        result\
    \ *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L)\
    \ == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L)\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0m9soar2.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0m9soar2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= i;\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpsrwv4xea.d(29): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d65]\n??:? void tmpsrwv4xea.__unittest_L25_C1() [0x427a62]\n??:?
    void tmpsrwv4xea.__modtest() [0x427ae8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa3d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a8f5]\n??:? runModuleUnitTests [0x42b861]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42813b]\n??:? _d_run_main [0x4280a6]\n??:? main [0x427afb]\n??:?
    __libc_start_main [0x37fa8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1 .. n)\n    {\n        result *= i;\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpbfxmn9vg.d(29): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d65]\n??:? void tmpbfxmn9vg.__unittest_L25_C1() [0x427a62]\n??:?
    void tmpbfxmn9vg.__modtest() [0x427ae8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa3d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a8f5]\n??:? runModuleUnitTests [0x42b861]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42813b]\n??:? _d_run_main [0x4280a6]\n??:? main [0x427afb]\n??:?
    __libc_start_main [0x7cc00554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    for (long i = n; i > 0; i--)\n    {\n        result\
    \ *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L)\
    \ == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L)\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0m9soar2.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0m9soar2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1 .. n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprpbb9qbk.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprpbb9qbk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1 .. n + 1)\n    {\n        result *= i;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpxy95szn7.d(29): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d6d]\n??:? void tmpxy95szn7.__unittest_L25_C1() [0x427a66]\n??:?
    void tmpxy95szn7.__modtest() [0x427aec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff68]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa45]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a8fd]\n??:? runModuleUnitTests [0x42b869]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428143]\n??:? _d_run_main [0x4280ae]\n??:? main [0x427aff]\n??:?
    __libc_start_main [0x63ffb554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n+1)\n    {\n        result *= i;\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpywv1i9ix.d(29): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d6d]\n??:? void tmpywv1i9ix.__unittest_L25_C1() [0x427a66]\n??:?
    void tmpywv1i9ix.__modtest() [0x427aec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff68]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa45]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a8fd]\n??:? runModuleUnitTests [0x42b869]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428143]\n??:? _d_run_main [0x4280ae]\n??:? main [0x427aff]\n??:?
    __libc_start_main [0xc45b5554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1 .. n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprpbb9qbk.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprpbb9qbk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    for (long i = n; i > 0; i--) \n    {\n        result\
    \ *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L)\
    \ == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L)\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp32d3eqdn.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp32d3eqdn.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1 .. n + 1)\n    {\n        result *= i;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpxy95szn7.d(29): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d6d]\n??:? void tmpxy95szn7.__unittest_L25_C1() [0x427a66]\n??:?
    void tmpxy95szn7.__modtest() [0x427aec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff68]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa45]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a8fd]\n??:? runModuleUnitTests [0x42b869]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428143]\n??:? _d_run_main [0x4280ae]\n??:? main [0x427aff]\n??:?
    __libc_start_main [0x63ffb554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1 .. n) \n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0hjyd0c5.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0hjyd0c5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1 .. n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprpbb9qbk.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprpbb9qbk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n+1)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpppaestsi.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpppaestsi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    for (long i = n; i > 0; i--)\n    {\n        result\
    \ *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L)\
    \ == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L)\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0m9soar2.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0m9soar2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 0 .. n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq0askcru.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq0askcru.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    for (int i = n; i > 0; i--)\n    {\n        result\
    \ *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L)\
    \ == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L)\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpck8zcpss.d(19): Error: cannot implicitly convert expression
    `n` of type `long` to `int`\n/tmp/tmpck8zcpss.d(21): Error: undefined identifier
    `factorial`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpck8zcpss.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long res = 1;\n    for (long i = n; i > 0; i--)\n    {\n        res *= factorial(i);\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf1s6r_gl.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf1s6r_gl.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    return n == 0 ? 1 : n * special_factorial(n - 1);\n}\nunittest\n{\n    alias\
    \ candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L)\
    \ == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L)\
    \ == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpb344o8qc.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d65]\n??:? void tmpb344o8qc.__unittest_L20_C1() [0x427a62]\n??:?
    void tmpb344o8qc.__modtest() [0x427ae8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa3d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a8f5]\n??:? runModuleUnitTests [0x42b861]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42813b]\n??:? _d_run_main [0x4280a6]\n??:? main [0x427afb]\n??:?
    __libc_start_main [0x7506d554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1 .. n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprpbb9qbk.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprpbb9qbk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1 .. n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprpbb9qbk.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprpbb9qbk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1 .. n)\n    {\n        result *= i;\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpbfxmn9vg.d(29): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d65]\n??:? void tmpbfxmn9vg.__unittest_L25_C1() [0x427a62]\n??:?
    void tmpbfxmn9vg.__modtest() [0x427ae8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa3d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a8f5]\n??:? runModuleUnitTests [0x42b861]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42813b]\n??:? _d_run_main [0x4280a6]\n??:? main [0x427afb]\n??:?
    __libc_start_main [0x7cc00554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1 .. n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprpbb9qbk.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprpbb9qbk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1 .. n + 1)\n    {\n        result *= i;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpxy95szn7.d(29): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d6d]\n??:? void tmpxy95szn7.__unittest_L25_C1() [0x427a66]\n??:?
    void tmpxy95szn7.__modtest() [0x427aec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff68]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa45]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a8fd]\n??:? runModuleUnitTests [0x42b869]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428143]\n??:? _d_run_main [0x4280ae]\n??:? main [0x427aff]\n??:?
    __libc_start_main [0x63ffb554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    return n > 0 ? n * special_factorial(n - 1) : 1;\n}\nunittest\n{\n    alias\
    \ candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L)\
    \ == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L)\
    \ == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpmd9x5vo1.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d5d]\n??:? void tmpmd9x5vo1.__unittest_L20_C1() [0x427a5a]\n??:?
    void tmpmd9x5vo1.__modtest() [0x427ae0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a916]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faa9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff58]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa35]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a8ed]\n??:? runModuleUnitTests [0x42b859]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ac]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428133]\n??:? _d_run_main [0x42809e]\n??:? main [0x427af3]\n??:?
    __libc_start_main [0xb80fd554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    for (int i = n; i > 0; i--)\n    {\n        result\
    \ *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L)\
    \ == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L)\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpck8zcpss.d(19): Error: cannot implicitly convert expression
    `n` of type `long` to `int`\n/tmp/tmpck8zcpss.d(21): Error: undefined identifier
    `factorial`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpck8zcpss.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    for (int i = n; i > 0; i--)\n    {\n        result\
    \ *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L)\
    \ == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L)\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpck8zcpss.d(19): Error: cannot implicitly convert expression
    `n` of type `long` to `int`\n/tmp/tmpck8zcpss.d(21): Error: undefined identifier
    `factorial`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpck8zcpss.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    for (long i = n; i > 0; i--)\n    {\n        result\
    \ *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L)\
    \ == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L)\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0m9soar2.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0m9soar2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1 .. n + 1)\n    {\n        result *= i;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpxy95szn7.d(29): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d6d]\n??:? void tmpxy95szn7.__unittest_L25_C1() [0x427a66]\n??:?
    void tmpxy95szn7.__modtest() [0x427aec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff68]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa45]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a8fd]\n??:? runModuleUnitTests [0x42b869]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428143]\n??:? _d_run_main [0x4280ae]\n??:? main [0x427aff]\n??:?
    __libc_start_main [0x63ffb554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1 .. n + 1)\n    {\n        result *= i;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpxy95szn7.d(29): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d6d]\n??:? void tmpxy95szn7.__unittest_L25_C1() [0x427a66]\n??:?
    void tmpxy95szn7.__modtest() [0x427aec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff68]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa45]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a8fd]\n??:? runModuleUnitTests [0x42b869]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428143]\n??:? _d_run_main [0x4280ae]\n??:? main [0x427aff]\n??:?
    __libc_start_main [0x63ffb554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1 .. n + 1)\n    {\n        result *= i;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpxy95szn7.d(29): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d6d]\n??:? void tmpxy95szn7.__unittest_L25_C1() [0x427a66]\n??:?
    void tmpxy95szn7.__modtest() [0x427aec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff68]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa45]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a8fd]\n??:? runModuleUnitTests [0x42b869]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428143]\n??:? _d_run_main [0x4280ae]\n??:? main [0x427aff]\n??:?
    __libc_start_main [0x63ffb554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    for (long i = n; i > 0; i--)\n    {\n        result\
    \ *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L)\
    \ == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L)\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0m9soar2.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0m9soar2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1 .. n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprpbb9qbk.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprpbb9qbk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    for (long i = n; i > 0; i--)\n    {\n        result\
    \ *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L)\
    \ == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L)\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0m9soar2.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0m9soar2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= i;\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpsrwv4xea.d(29): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d65]\n??:? void tmpsrwv4xea.__unittest_L25_C1() [0x427a62]\n??:?
    void tmpsrwv4xea.__modtest() [0x427ae8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa3d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a8f5]\n??:? runModuleUnitTests [0x42b861]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42813b]\n??:? _d_run_main [0x4280a6]\n??:? main [0x427afb]\n??:?
    __libc_start_main [0x37fa8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    for (int i = n; i > 0; i--)\n    {\n        result\
    \ *= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp863bzxe9.d(19): Error: cannot implicitly convert expression
    `n` of type `long` to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp863bzxe9.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= i;\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpsrwv4xea.d(29): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d65]\n??:? void tmpsrwv4xea.__unittest_L25_C1() [0x427a62]\n??:?
    void tmpsrwv4xea.__modtest() [0x427ae8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa3d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a8f5]\n??:? runModuleUnitTests [0x42b861]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42813b]\n??:? _d_run_main [0x4280a6]\n??:? main [0x427afb]\n??:?
    __libc_start_main [0x37fa8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n+1)\n    {\n        result *= i;\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpywv1i9ix.d(29): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d6d]\n??:? void tmpywv1i9ix.__unittest_L25_C1() [0x427a66]\n??:?
    void tmpywv1i9ix.__modtest() [0x427aec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff68]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa45]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a8fd]\n??:? runModuleUnitTests [0x42b869]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428143]\n??:? _d_run_main [0x4280ae]\n??:? main [0x427aff]\n??:?
    __libc_start_main [0xc45b5554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    if (n <= 0)\n        return 1;\n    return n * special_factorial(n - 1);\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpqzd9fivy.d(26): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d5d]\n??:? void tmpqzd9fivy.__unittest_L22_C1() [0x427a5a]\n??:?
    void tmpqzd9fivy.__modtest() [0x427ae0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a916]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faa9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff58]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa35]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a8ed]\n??:? runModuleUnitTests [0x42b859]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ac]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428133]\n??:? _d_run_main [0x42809e]\n??:? main [0x427af3]\n??:?
    __libc_start_main [0x816a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1 .. n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprpbb9qbk.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprpbb9qbk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1 .. n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprpbb9qbk.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprpbb9qbk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    for (int i = n; i > 0; i--)\n    {\n        result\
    \ *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L)\
    \ == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L)\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpck8zcpss.d(19): Error: cannot implicitly convert expression
    `n` of type `long` to `int`\n/tmp/tmpck8zcpss.d(21): Error: undefined identifier
    `factorial`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpck8zcpss.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    return n == 0 ? 1 : n * special_factorial(n - 1);\n}\nunittest\n{\n    alias\
    \ candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L)\
    \ == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L)\
    \ == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpb344o8qc.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d65]\n??:? void tmpb344o8qc.__unittest_L20_C1() [0x427a62]\n??:?
    void tmpb344o8qc.__modtest() [0x427ae8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa3d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a8f5]\n??:? runModuleUnitTests [0x42b861]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42813b]\n??:? _d_run_main [0x4280a6]\n??:? main [0x427afb]\n??:?
    __libc_start_main [0x7506d554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    for (long i = n; i > 0; i--)\n    {\n        result\
    \ *= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp9ryif4ez.d(29): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d5d]\n??:? void tmp9ryif4ez.__unittest_L25_C1() [0x427a5a]\n??:?
    void tmp9ryif4ez.__modtest() [0x427ae0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a916]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faa9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff58]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa35]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a8ed]\n??:? runModuleUnitTests [0x42b859]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ac]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428133]\n??:? _d_run_main [0x42809e]\n??:? main [0x427af3]\n??:?
    __libc_start_main [0x5213554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    for (long i = n; i > 0; i--)\n    {\n        result\
    \ *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L)\
    \ == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L)\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0m9soar2.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0m9soar2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    for (long i = n; i > 0; i--)\n    {\n        result\
    \ *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L)\
    \ == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L)\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0m9soar2.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0m9soar2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1 .. n + 1)\n    {\n        result *= i;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpxy95szn7.d(29): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d6d]\n??:? void tmpxy95szn7.__unittest_L25_C1() [0x427a66]\n??:?
    void tmpxy95szn7.__modtest() [0x427aec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff68]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa45]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a8fd]\n??:? runModuleUnitTests [0x42b869]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428143]\n??:? _d_run_main [0x4280ae]\n??:? main [0x427aff]\n??:?
    __libc_start_main [0x63ffb554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    for (long i = n; i > 0; i--)\n    {\n        result\
    \ *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L)\
    \ == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L)\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0m9soar2.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0m9soar2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1 .. n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprpbb9qbk.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprpbb9qbk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1 .. n + 1)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdvv04kts.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdvv04kts.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    for (long i = n; i > 0; i--)\n    {\n        result\
    \ *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L)\
    \ == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L)\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0m9soar2.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0m9soar2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1 .. n + 1)\n    {\n        result *= i;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpxy95szn7.d(29): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d6d]\n??:? void tmpxy95szn7.__unittest_L25_C1() [0x427a66]\n??:?
    void tmpxy95szn7.__modtest() [0x427aec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff68]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa45]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a8fd]\n??:? runModuleUnitTests [0x42b869]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428143]\n??:? _d_run_main [0x4280ae]\n??:? main [0x427aff]\n??:?
    __libc_start_main [0x63ffb554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    return n > 0 ? n * special_factorial(n - 1) : 1;\n}\nunittest\n{\n    alias\
    \ candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L)\
    \ == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L)\
    \ == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpmd9x5vo1.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d5d]\n??:? void tmpmd9x5vo1.__unittest_L20_C1() [0x427a5a]\n??:?
    void tmpmd9x5vo1.__modtest() [0x427ae0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a916]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faa9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff58]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa35]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a8ed]\n??:? runModuleUnitTests [0x42b859]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ac]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428133]\n??:? _d_run_main [0x42809e]\n??:? main [0x427af3]\n??:?
    __libc_start_main [0xb80fd554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1 .. n + 1)\n    {\n        result *= i;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpxy95szn7.d(29): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d6d]\n??:? void tmpxy95szn7.__unittest_L25_C1() [0x427a66]\n??:?
    void tmpxy95szn7.__modtest() [0x427aec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff68]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa45]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a8fd]\n??:? runModuleUnitTests [0x42b869]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428143]\n??:? _d_run_main [0x4280ae]\n??:? main [0x427aff]\n??:?
    __libc_start_main [0x63ffb554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= i;\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpsrwv4xea.d(29): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d65]\n??:? void tmpsrwv4xea.__unittest_L25_C1() [0x427a62]\n??:?
    void tmpsrwv4xea.__modtest() [0x427ae8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa3d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a8f5]\n??:? runModuleUnitTests [0x42b861]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42813b]\n??:? _d_run_main [0x4280a6]\n??:? main [0x427afb]\n??:?
    __libc_start_main [0x37fa8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    if (n <= 0)\n        return 0;\n    long result = 1;\n    foreach (i; 1 ..\
    \ n + 1)\n        result *= i;\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L)\
    \ == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L)\
    \ == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpbcsimpnj.d(29): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d7d]\n??:? void tmpbcsimpnj.__unittest_L25_C1() [0x427a7a]\n??:?
    void tmpbcsimpnj.__modtest() [0x427b00]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baa3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a936]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff78]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa55]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a90d]\n??:? runModuleUnitTests [0x42b879]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281cc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428153]\n??:? _d_run_main [0x4280be]\n??:? main [0x427b13]\n??:?
    __libc_start_main [0xab027554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    for (int i = n; i > 0; i--)\n    {\n        result\
    \ *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L)\
    \ == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L)\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpck8zcpss.d(19): Error: cannot implicitly convert expression
    `n` of type `long` to `int`\n/tmp/tmpck8zcpss.d(21): Error: undefined identifier
    `factorial`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpck8zcpss.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    for (long i = n; i > 0; i--)\n    {\n        result\
    \ *= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp9ryif4ez.d(29): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d5d]\n??:? void tmp9ryif4ez.__unittest_L25_C1() [0x427a5a]\n??:?
    void tmp9ryif4ez.__modtest() [0x427ae0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a916]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faa9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff58]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa35]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a8ed]\n??:? runModuleUnitTests [0x42b859]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ac]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428133]\n??:? _d_run_main [0x42809e]\n??:? main [0x427af3]\n??:?
    __libc_start_main [0x5213554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1 .. n + 1)\n    {\n        result *= i;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpxy95szn7.d(29): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d6d]\n??:? void tmpxy95szn7.__unittest_L25_C1() [0x427a66]\n??:?
    void tmpxy95szn7.__modtest() [0x427aec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff68]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa45]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a8fd]\n??:? runModuleUnitTests [0x42b869]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428143]\n??:? _d_run_main [0x4280ae]\n??:? main [0x427aff]\n??:?
    __libc_start_main [0x63ffb554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1 .. n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprpbb9qbk.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprpbb9qbk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n+1)\n    {\n        result *= i;\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpywv1i9ix.d(29): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d6d]\n??:? void tmpywv1i9ix.__unittest_L25_C1() [0x427a66]\n??:?
    void tmpywv1i9ix.__modtest() [0x427aec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff68]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa45]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a8fd]\n??:? runModuleUnitTests [0x42b869]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428143]\n??:? _d_run_main [0x4280ae]\n??:? main [0x427aff]\n??:?
    __libc_start_main [0xc45b5554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    return n < 2 ? 1 : n * special_factorial(n - 1);\n}\nunittest\n{\n    alias\
    \ candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L)\
    \ == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L)\
    \ == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpbnc71a3k.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d5d]\n??:? void tmpbnc71a3k.__unittest_L20_C1() [0x427a5a]\n??:?
    void tmpbnc71a3k.__modtest() [0x427ae0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a916]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faa9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff58]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa35]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a8ed]\n??:? runModuleUnitTests [0x42b859]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ac]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428133]\n??:? _d_run_main [0x42809e]\n??:? main [0x427af3]\n??:?
    __libc_start_main [0x47285554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n+1)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpppaestsi.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpppaestsi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1 .. n + 1)\n    {\n        result *= i;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpxy95szn7.d(29): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d6d]\n??:? void tmpxy95szn7.__unittest_L25_C1() [0x427a66]\n??:?
    void tmpxy95szn7.__modtest() [0x427aec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff68]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa45]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a8fd]\n??:? runModuleUnitTests [0x42b869]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428143]\n??:? _d_run_main [0x4280ae]\n??:? main [0x427aff]\n??:?
    __libc_start_main [0x63ffb554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    long i = n;\n    while (i > 0)\n    {\n        result\
    \ *= factorial(i);\n        i--;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n\
    \    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n\
    \    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxu6btf0u.d(22): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxu6btf0u.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1 .. n + 1)\n    {\n        result *= i;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpxy95szn7.d(29): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d6d]\n??:? void tmpxy95szn7.__unittest_L25_C1() [0x427a66]\n??:?
    void tmpxy95szn7.__modtest() [0x427aec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff68]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa45]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a8fd]\n??:? runModuleUnitTests [0x42b869]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428143]\n??:? _d_run_main [0x4280ae]\n??:? main [0x427aff]\n??:?
    __libc_start_main [0x63ffb554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long res = 1;\n    for (long i = n; i > 0; i--)\n    {\n        res *= factorial(i);\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf1s6r_gl.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf1s6r_gl.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    for (long i = n; i > 0; i--)\n    {\n        result\
    \ *= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp9ryif4ez.d(29): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d5d]\n??:? void tmp9ryif4ez.__unittest_L25_C1() [0x427a5a]\n??:?
    void tmp9ryif4ez.__modtest() [0x427ae0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a916]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faa9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff58]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa35]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a8ed]\n??:? runModuleUnitTests [0x42b859]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ac]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428133]\n??:? _d_run_main [0x42809e]\n??:? main [0x427af3]\n??:?
    __libc_start_main [0x5213554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    for (int i = 1; i <= n; i++)\n    {\n        result\
    \ *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L)\
    \ == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L)\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuix4syr_.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuix4syr_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n+1)\n    {\n        result *= i;\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpywv1i9ix.d(29): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d6d]\n??:? void tmpywv1i9ix.__unittest_L25_C1() [0x427a66]\n??:?
    void tmpywv1i9ix.__modtest() [0x427aec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff68]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa45]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a8fd]\n??:? runModuleUnitTests [0x42b869]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428143]\n??:? _d_run_main [0x4280ae]\n??:? main [0x427aff]\n??:?
    __libc_start_main [0xc45b5554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\n/*\nThe Brazilian factorial is defined as:\n  \
    \  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7qdkoj4b.d(25): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp7qdkoj4b.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1 .. n)\n    {\n        result *= i;\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpbfxmn9vg.d(29): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d65]\n??:? void tmpbfxmn9vg.__unittest_L25_C1() [0x427a62]\n??:?
    void tmpbfxmn9vg.__modtest() [0x427ae8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa3d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a8f5]\n??:? runModuleUnitTests [0x42b861]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42813b]\n??:? _d_run_main [0x4280a6]\n??:? main [0x427afb]\n??:?
    __libc_start_main [0x7cc00554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1 .. n + 1)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdvv04kts.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdvv04kts.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    if (n <= 0)\n        return 1;\n    else\n        return n * special_factorial(n\
    \ - 1);\n}\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\nunittest\n{\n    alias candidate\
    \ = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L)\
    \ == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L)\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf7ikr7fh.d(23): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpf7ikr7fh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    for (long i = n; i > 0; i--)\n    {\n        result\
    \ *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L)\
    \ == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L)\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0m9soar2.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0m9soar2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1 .. n)\n    {\n        result *= i;\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpbfxmn9vg.d(29): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d65]\n??:? void tmpbfxmn9vg.__unittest_L25_C1() [0x427a62]\n??:?
    void tmpbfxmn9vg.__modtest() [0x427ae8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa3d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a8f5]\n??:? runModuleUnitTests [0x42b861]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42813b]\n??:? _d_run_main [0x4280a6]\n??:? main [0x427afb]\n??:?
    __libc_start_main [0x7cc00554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1 .. n)\n    {\n        result *= i;\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpbfxmn9vg.d(29): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d65]\n??:? void tmpbfxmn9vg.__unittest_L25_C1() [0x427a62]\n??:?
    void tmpbfxmn9vg.__modtest() [0x427ae8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa3d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a8f5]\n??:? runModuleUnitTests [0x42b861]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42813b]\n??:? _d_run_main [0x4280a6]\n??:? main [0x427afb]\n??:?
    __libc_start_main [0x7cc00554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    if (n < 0)\n        return 0;\n    if (n == 0)\n        return 1;\n    long\
    \ result = 1;\n    foreach (i; 1..n)\n        result *= i;\n    return result;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpcigw8bn5.d(31): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d95]\n??:? void tmpcigw8bn5.__unittest_L27_C1() [0x427a92]\n??:?
    void tmpcigw8bn5.__modtest() [0x427b18]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42babb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a94e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fae1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff90]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa6d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a925]\n??:? runModuleUnitTests [0x42b891]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42816b]\n??:? _d_run_main [0x4280d6]\n??:? main [0x427b2b]\n??:?
    __libc_start_main [0x1878a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 2..n+1)\n    {\n        result *= i;\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp42y3r9m2.d(29): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d6d]\n??:? void tmp42y3r9m2.__unittest_L25_C1() [0x427a6a]\n??:?
    void tmp42y3r9m2.__modtest() [0x427af0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff68]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa45]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a8fd]\n??:? runModuleUnitTests [0x42b869]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428143]\n??:? _d_run_main [0x4280ae]\n??:? main [0x427b03]\n??:?
    __libc_start_main [0x7a5d554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1 .. n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprpbb9qbk.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprpbb9qbk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    for (long i = n; i > 0; i--)\n    {\n        result\
    \ *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L)\
    \ == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L)\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0m9soar2.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0m9soar2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long ret = 1;\n    for (long i = n; i > 0; i--)\n    {\n        ret *= i;\n\
    \    }\n    return ret;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp0i8stssr.d(29): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d5d]\n??:? void tmp0i8stssr.__unittest_L25_C1() [0x427a5a]\n??:?
    void tmp0i8stssr.__modtest() [0x427ae0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a916]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faa9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff58]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa35]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a8ed]\n??:? runModuleUnitTests [0x42b859]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ac]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428133]\n??:? _d_run_main [0x42809e]\n??:? main [0x427af3]\n??:?
    __libc_start_main [0x8b5eb554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    if (n <= 0)\n        return 0;\n    long result = 1;\n    foreach (i; 1 ..\
    \ n + 1)\n        result *= i;\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L)\
    \ == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L)\
    \ == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpbcsimpnj.d(29): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d7d]\n??:? void tmpbcsimpnj.__unittest_L25_C1() [0x427a7a]\n??:?
    void tmpbcsimpnj.__modtest() [0x427b00]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baa3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a936]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff78]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa55]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a90d]\n??:? runModuleUnitTests [0x42b879]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281cc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428153]\n??:? _d_run_main [0x4280be]\n??:? main [0x427b13]\n??:?
    __libc_start_main [0xab027554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1 .. n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprpbb9qbk.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprpbb9qbk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n+1)\n    {\n        result *= i;\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpywv1i9ix.d(29): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d6d]\n??:? void tmpywv1i9ix.__unittest_L25_C1() [0x427a66]\n??:?
    void tmpywv1i9ix.__modtest() [0x427aec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff68]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa45]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a8fd]\n??:? runModuleUnitTests [0x42b869]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428143]\n??:? _d_run_main [0x4280ae]\n??:? main [0x427aff]\n??:?
    __libc_start_main [0xc45b5554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1 .. n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprpbb9qbk.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprpbb9qbk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1 .. n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprpbb9qbk.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprpbb9qbk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    for (long i = n; i > 0; i--)\n    {\n        result\
    \ *= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp9ryif4ez.d(29): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d5d]\n??:? void tmp9ryif4ez.__unittest_L25_C1() [0x427a5a]\n??:?
    void tmp9ryif4ez.__modtest() [0x427ae0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a916]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faa9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff58]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa35]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a8ed]\n??:? runModuleUnitTests [0x42b859]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ac]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428133]\n??:? _d_run_main [0x42809e]\n??:? main [0x427af3]\n??:?
    __libc_start_main [0x5213554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1 .. n)\n    {\n        result *= i;\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpbfxmn9vg.d(29): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d65]\n??:? void tmpbfxmn9vg.__unittest_L25_C1() [0x427a62]\n??:?
    void tmpbfxmn9vg.__modtest() [0x427ae8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa3d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a8f5]\n??:? runModuleUnitTests [0x42b861]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42813b]\n??:? _d_run_main [0x4280a6]\n??:? main [0x427afb]\n??:?
    __libc_start_main [0x7cc00554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    for (long i = n; i > 0; i--)\n    {\n        result\
    \ *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L)\
    \ == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L)\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0m9soar2.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0m9soar2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1 .. n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprpbb9qbk.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprpbb9qbk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    for (int i = n; i > 0; i--)\n    {\n        result\
    \ *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L)\
    \ == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L)\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpck8zcpss.d(19): Error: cannot implicitly convert expression
    `n` of type `long` to `int`\n/tmp/tmpck8zcpss.d(21): Error: undefined identifier
    `factorial`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpck8zcpss.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1 .. n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprpbb9qbk.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprpbb9qbk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1 .. n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprpbb9qbk.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprpbb9qbk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1 .. n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprpbb9qbk.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprpbb9qbk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    for (long i = n; i > 0; i--)\n    {\n        result\
    \ *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L)\
    \ == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L)\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0m9soar2.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0m9soar2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    for (int i = n; i > 0; i--)\n    {\n        result\
    \ *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L)\
    \ == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L)\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpck8zcpss.d(19): Error: cannot implicitly convert expression
    `n` of type `long` to `int`\n/tmp/tmpck8zcpss.d(21): Error: undefined identifier
    `factorial`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpck8zcpss.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    for (int i = n; i > 0; i--)\n    {\n        result\
    \ *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L)\
    \ == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L)\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpck8zcpss.d(19): Error: cannot implicitly convert expression
    `n` of type `long` to `int`\n/tmp/tmpck8zcpss.d(21): Error: undefined identifier
    `factorial`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpck8zcpss.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1 .. n + 1)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdvv04kts.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdvv04kts.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    for (int i = n; i > 0; i--)\n    {\n        result\
    \ *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L)\
    \ == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L)\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpck8zcpss.d(19): Error: cannot implicitly convert expression
    `n` of type `long` to `int`\n/tmp/tmpck8zcpss.d(21): Error: undefined identifier
    `factorial`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpck8zcpss.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    for (int i = n; i > 0; i--)\n    {\n        result\
    \ *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L)\
    \ == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L)\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpck8zcpss.d(19): Error: cannot implicitly convert expression
    `n` of type `long` to `int`\n/tmp/tmpck8zcpss.d(21): Error: undefined identifier
    `factorial`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpck8zcpss.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    for (long i = n; i > 0; i--)\n    {\n        result\
    \ *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L)\
    \ == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L)\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0m9soar2.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0m9soar2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= i;\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpsrwv4xea.d(29): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d65]\n??:? void tmpsrwv4xea.__unittest_L25_C1() [0x427a62]\n??:?
    void tmpsrwv4xea.__modtest() [0x427ae8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa3d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a8f5]\n??:? runModuleUnitTests [0x42b861]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42813b]\n??:? _d_run_main [0x4280a6]\n??:? main [0x427afb]\n??:?
    __libc_start_main [0x37fa8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= i;\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpsrwv4xea.d(29): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d65]\n??:? void tmpsrwv4xea.__unittest_L25_C1() [0x427a62]\n??:?
    void tmpsrwv4xea.__modtest() [0x427ae8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa3d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a8f5]\n??:? runModuleUnitTests [0x42b861]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42813b]\n??:? _d_run_main [0x4280a6]\n??:? main [0x427afb]\n??:?
    __libc_start_main [0x37fa8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1 .. n)\n    {\n        result *= i;\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpbfxmn9vg.d(29): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d65]\n??:? void tmpbfxmn9vg.__unittest_L25_C1() [0x427a62]\n??:?
    void tmpbfxmn9vg.__modtest() [0x427ae8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa3d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a8f5]\n??:? runModuleUnitTests [0x42b861]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42813b]\n??:? _d_run_main [0x4280a6]\n??:? main [0x427afb]\n??:?
    __libc_start_main [0x7cc00554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1 .. n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprpbb9qbk.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprpbb9qbk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1 .. n + 1)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdvv04kts.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdvv04kts.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1 .. n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprpbb9qbk.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprpbb9qbk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n+1)\n    {\n        result *= i;\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpywv1i9ix.d(29): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d6d]\n??:? void tmpywv1i9ix.__unittest_L25_C1() [0x427a66]\n??:?
    void tmpywv1i9ix.__modtest() [0x427aec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff68]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa45]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a8fd]\n??:? runModuleUnitTests [0x42b869]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428143]\n??:? _d_run_main [0x4280ae]\n??:? main [0x427aff]\n??:?
    __libc_start_main [0xc45b5554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    for (long i = n; i > 0; i--)\n    {\n        result\
    \ *= factorial(i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L)\
    \ == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L)\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0m9soar2.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0m9soar2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long res = 1;\n    foreach(i; 1..n)\n    {\n        res *= i;\n    }\n  \
    \  return res;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n \
    \   assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n   \
    \ assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp6z7gmb3f.d(29): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d65]\n??:? void tmp6z7gmb3f.__unittest_L25_C1() [0x427a62]\n??:?
    void tmp6z7gmb3f.__modtest() [0x427ae8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa3d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a8f5]\n??:? runModuleUnitTests [0x42b861]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42813b]\n??:? _d_run_main [0x4280a6]\n??:? main [0x427afb]\n??:?
    __libc_start_main [0x3e2ef554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptguiv8qd.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptguiv8qd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\
    \n    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \n*/\nlong special_factorial(long n) \n{\n\
    \    long result = 1;\n    foreach(i; 1 .. n)\n    {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprpbb9qbk.d(21): Error: undefined identifier `factorial`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprpbb9qbk.d", "-I/tmp"]\n'''
  stdout: b''
