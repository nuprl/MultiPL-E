name: HumanEval_20_find_closest_elements
language: d
results:
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min_diff = float.infinity;\n    float min_a = 0.0;\n    float\
    \ min_b = 0.0;\n    for (int i = 0; i < numbers.length; i++)\n    {\n        for\
    \ (int j = i + 1; j < numbers.length; j++)\n        {\n            float diff\
    \ = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\n        \
    \    {\n                min_diff = diff;\n                min_a = numbers[i];\n\
    \                min_b = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(min_a, min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjf46_hf2.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429e2d]\\n??:? void tmpjf46_hf2.__unittest_L32_C1()\
    \ [0x428e99]\\n??:? void tmpjf46_hf2.__modtest() [0x429894]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eb3f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42da4e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432375]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432824]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432301]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42da25]\\n??:? runModuleUnitTests [0x42e915]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a2f0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a277]\\n??:? _d_run_main [0x42a1e2]\\n??:? main [0x4298a7]\\\
    n??:? __libc_start_main [0x401f8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    for (int i = 1; i < numbers.length; i++)\n \
    \   {\n        float diff = numbers[i] - numbers[i-1];\n        if (diff < min_diff)\n\
    \        {\n            min_diff = diff;\n            min = numbers[i-1];\n  \
    \          max = numbers[i];\n        }\n    }\n    return tuple(min, max);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjtgbj7fq.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429ded]\\n??:? void tmpjtgbj7fq.__unittest_L29_C1()\
    \ [0x428e69]\\n??:? void tmpjtgbj7fq.__modtest() [0x429858]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eadb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42d9ea]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432311]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4327c0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43229d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42d9c1]\\n??:? runModuleUnitTests [0x42e8b1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a2b0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a237]\\n??:? _d_run_main [0x42a1a2]\\n??:? main [0x42986b]\\\
    n??:? __libc_start_main [0x72ee2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length > 1);\n    float min_diff = numbers[1] - numbers[0];\n\
    \    float min_first = numbers[0];\n    float min_second = numbers[1];\n    for\
    \ (size_t i = 0; i < numbers.length; i++) \n    {\n        for (size_t j = i +\
    \ 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                min_first = numbers[i];\n          \
    \      min_second = numbers[j];\n            }\n        }\n    }\n    return tuple(min_first,\
    \ min_second);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpt_5_9csz.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429fa1]\\n??:? void tmpt_5_9csz.__unittest_L33_C1()\
    \ [0x428f59]\\n??:? void tmpt_5_9csz.__modtest() [0x429954]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ecb3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dbc2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4324e9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432998]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432475]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42db99]\\n??:? runModuleUnitTests [0x42ea89]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a464]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a3eb]\\n??:? _d_run_main [0x42a356]\\n??:? main [0x429967]\\\
    n??:? __libc_start_main [0x3a603554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    float max_diff = numbers[1] - numbers[0];\n\
    \    for (int i = 1; i < numbers.length; i++) \n    {\n        float diff = numbers[i]\
    \ - numbers[i - 1];\n        if (diff < min_diff) \n        {\n            min_diff\
    \ = diff;\n            min = numbers[i - 1];\n            max = numbers[i];\n\
    \        }\n        if (diff > max_diff) \n        {\n            max_diff = diff;\n\
    \            min = numbers[i - 1];\n            max = numbers[i];\n        }\n\
    \    }\n    return tuple(min, max);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3db4qt1y.d(40): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429ead]\\n??:? void tmp3db4qt1y.__unittest_L36_C1()\
    \ [0x428f25]\\n??:? void tmp3db4qt1y.__modtest() [0x429914]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eb9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42daaa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4323d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432880]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43235d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42da81]\\n??:? runModuleUnitTests [0x42e971]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a370]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a2f7]\\n??:? _d_run_main [0x42a262]\\n??:? main [0x429927]\\\
    n??:? __libc_start_main [0x354b9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = numbers[1] - numbers[0];\n\
    \    float min_num1 = numbers[0];\n    float min_num2 = numbers[1];\n    for (int\
    \ i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                min_num1 = numbers[i];\n                min_num2 = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(min_num1, min_num2);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1_3jnuk_.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429f91]\\n??:? void tmp1_3jnuk_.__unittest_L33_C1()\
    \ [0x428f49]\\n??:? void tmp1_3jnuk_.__modtest() [0x429944]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eca3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dbb2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4324d9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432988]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432465]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42db89]\\n??:? runModuleUnitTests [0x42ea79]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a454]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a3db]\\n??:? _d_run_main [0x42a346]\\n??:? main [0x429957]\\\
    n??:? __libc_start_main [0x2eabe554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min = abs(numbers[0] - numbers[1]);\n\
    \    float a = numbers[0];\n    float b = numbers[1];\n    for (int i = 0; i <\
    \ numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if (diff < min)\n            {\n                min = diff;\n     \
    \           a = numbers[i];\n                b = numbers[j];\n            }\n\
    \        }\n    }\n    return tuple(a, b);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_yfzjsmp.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429fa9]\\n??:? void tmp_yfzjsmp.__unittest_L33_C1()\
    \ [0x428f65]\\n??:? void tmp_yfzjsmp.__modtest() [0x429960]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ecbb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dbca]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4324f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4329a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43247d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42dba1]\\n??:? runModuleUnitTests [0x42ea91]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a46c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a3f3]\\n??:? _d_run_main [0x42a35e]\\n??:? main [0x429973]\\\
    n??:? __libc_start_main [0x6d38b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float a = numbers[0];\n    float b = numbers[1];\n    for\
    \ (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i + 1; j\
    \ < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                a = numbers[i];\n                b =\
    \ numbers[j];\n            }\n        }\n    }\n    return tuple(a, b);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpx_rt1azx.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429fa9]\\n??:? void tmpx_rt1azx.__unittest_L33_C1()\
    \ [0x428f65]\\n??:? void tmpx_rt1azx.__modtest() [0x429960]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ecbb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dbca]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4324f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4329a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43247d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42dba1]\\n??:? runModuleUnitTests [0x42ea91]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a46c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a3f3]\\n??:? _d_run_main [0x42a35e]\\n??:? main [0x429973]\\\
    n??:? __libc_start_main [0x33de0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    foreach(i, v; numbers)\n    {\n        if(i\
    \ == 0) continue;\n        float diff = abs(v - numbers[i-1]);\n        if(diff\
    \ < min_diff)\n        {\n            min_diff = diff;\n            min = min(v,\
    \ numbers[i-1]);\n            max = max(v, numbers[i-1]);\n        }\n    }\n\
    \    return tuple(min, max);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl8hb9w2a.d(24): Error: function expected before `()`, not `min`\
    \ of type `float`\\n/tmp/tmpl8hb9w2a.d(25): Error: function expected before `()`,\
    \ not `max` of type `float`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpl8hb9w2a.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    float max_diff = numbers[1] - numbers[0];\n\
    \    for (int i = 1; i < numbers.length; i++)\n    {\n        float diff = numbers[i]\
    \ - numbers[i-1];\n        if (diff < min_diff)\n        {\n            min_diff\
    \ = diff;\n            min = numbers[i-1];\n            max = numbers[i];\n  \
    \      }\n        if (diff > max_diff)\n        {\n            max_diff = diff;\n\
    \        }\n    }\n    return tuple(min, max);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmm4goups.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429e55]\\n??:? void tmpmm4goups.__unittest_L34_C1()\
    \ [0x428ecd]\\n??:? void tmpmm4goups.__modtest() [0x4298bc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eb43]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42da52]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432379]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432828]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432305]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42da29]\\n??:? runModuleUnitTests [0x42e919]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a318]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a29f]\\n??:? _d_run_main [0x42a20a]\\n??:? main [0x4298cf]\\\
    n??:? __libc_start_main [0xb2935554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    Tuple!(float, float) result = tuple(numbers[0], numbers[1]);\n\
    \    for (size_t i = 0; i < numbers.length; i++) \n    {\n        for (size_t\
    \ j = i + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                result = tuple(numbers[i], numbers[j]);\n\
    \            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpcwmqm42i.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42a161]\\n??:? void tmpcwmqm42i.__unittest_L31_C1()\
    \ [0x429051]\\n??:? void tmpcwmqm42i.__modtest() [0x429b14]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42f15f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42e06e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432995]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432e44]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432921]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42e045]\\n??:? runModuleUnitTests [0x42ef35]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a6b0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a637]\\n??:? _d_run_main [0x42a5a2]\\n??:? main [0x429b27]\\\
    n??:? __libc_start_main [0xcc748554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min = numbers[0] - numbers[1];\n\
    \    float min1 = numbers[0];\n    float min2 = numbers[1];\n    for (int i =\
    \ 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if (diff < min)\n            {\n                min = diff;\n     \
    \           min1 = numbers[i];\n                min2 = numbers[j];\n         \
    \   }\n        }\n    }\n    return tuple(min1, min2);\n}\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpykb3psb9.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429f91]\\n??:? void tmpykb3psb9.__unittest_L33_C1()\
    \ [0x428f49]\\n??:? void tmpykb3psb9.__modtest() [0x429944]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eca3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dbb2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4324d9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432988]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432465]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42db89]\\n??:? runModuleUnitTests [0x42ea79]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a454]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a3db]\\n??:? _d_run_main [0x42a346]\\n??:? main [0x429957]\\\
    n??:? __libc_start_main [0xf3991554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    float diff = numbers[1] - numbers[0];\n    for (int i\
    \ = 1; i < numbers.length; i++) \n    {\n        if (numbers[i] < min) \n    \
    \    {\n            min = numbers[i];\n        }\n        if (numbers[i] > max)\
    \ \n        {\n            max = numbers[i];\n        }\n        if (abs(numbers[i]\
    \ - numbers[i - 1]) < diff) \n        {\n            diff = abs(numbers[i] - numbers[i\
    \ - 1]);\n        }\n    }\n    return tuple(min, max);\n}\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpcknyxnxm.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42a029]\\n??:? void tmpcknyxnxm.__unittest_L35_C1()\
    \ [0x428fe1]\\n??:? void tmpcknyxnxm.__modtest() [0x4299dc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ed3b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dc4a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432571]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432a20]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4324fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42dc21]\\n??:? runModuleUnitTests [0x42eb11]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a4ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a473]\\n??:? _d_run_main [0x42a3de]\\n??:? main [0x4299ef]\\\
    n??:? __libc_start_main [0x935e4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float min_a = numbers[0];\n    float min_b = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i\
    \ + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                min_a = numbers[i];\n              \
    \  min_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmptg_unwvz.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429fa9]\\n??:? void tmptg_unwvz.__unittest_L33_C1()\
    \ [0x428f65]\\n??:? void tmptg_unwvz.__modtest() [0x429960]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ecbb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dbca]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4324f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4329a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43247d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42dba1]\\n??:? runModuleUnitTests [0x42ea91]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a46c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a3f3]\\n??:? _d_run_main [0x42a35e]\\n??:? main [0x429973]\\\
    n??:? __libc_start_main [0x64b08554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min_diff = abs(numbers[0] - numbers[1]);\n    float min_num1\
    \ = numbers[0];\n    float min_num2 = numbers[1];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n\
    \            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min_diff)\n            {\n                min_diff = diff;\n             \
    \   min_num1 = numbers[i];\n                min_num2 = numbers[j];\n         \
    \   }\n        }\n    }\n    return tuple(min_num1, min_num2);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpftru0g5o.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429eb5]\\n??:? void tmpftru0g5o.__unittest_L32_C1()\
    \ [0x428f21]\\n??:? void tmpftru0g5o.__modtest() [0x42991c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ebc7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dad6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4323fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4328ac]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432389]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42daad]\\n??:? runModuleUnitTests [0x42e99d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a378]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a2ff]\\n??:? _d_run_main [0x42a26a]\\n??:? main [0x42992f]\\\
    n??:? __libc_start_main [0x2410c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    float max_diff = numbers[1] - numbers[0];\n\
    \    float diff;\n    foreach(i, number; numbers)\n    {\n        if(i == 0)\n\
    \            continue;\n        diff = number - numbers[i-1];\n        if(diff\
    \ < min_diff)\n        {\n            min_diff = diff;\n            min = numbers[i-1];\n\
    \            max = number;\n        }\n        if(diff > max_diff)\n        {\n\
    \            max_diff = diff;\n            min = numbers[i-1];\n            max\
    \ = number;\n        }\n    }\n    return tuple(min, max);\n}\nunittest\n{\n \
    \   alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3g99w5f2.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429e8d]\\n??:? void tmp3g99w5f2.__unittest_L39_C1()\
    \ [0x428f09]\\n??:? void tmp3g99w5f2.__modtest() [0x4298f8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eb7b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42da8a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4323b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432860]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43233d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42da61]\\n??:? runModuleUnitTests [0x42e951]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a350]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a2d7]\\n??:? _d_run_main [0x42a242]\\n??:? main [0x42990b]\\\
    n??:? __libc_start_main [0xd56b5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min = abs(numbers[0] - numbers[1]);\n\
    \    float a = numbers[0];\n    float b = numbers[1];\n    for (int i = 0; i <\
    \ numbers.length - 1; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if (diff < min)\n            {\n                min = diff;\n     \
    \           a = numbers[i];\n                b = numbers[j];\n            }\n\
    \        }\n    }\n    return tuple(a, b);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpund197gh.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429fb1]\\n??:? void tmpund197gh.__unittest_L33_C1()\
    \ [0x428f6d]\\n??:? void tmpund197gh.__modtest() [0x429968]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ecc3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dbd2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4324f9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4329a8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432485]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42dba9]\\n??:? runModuleUnitTests [0x42ea99]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a474]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a3fb]\\n??:? _d_run_main [0x42a366]\\n??:? main [0x42997b]\\\
    n??:? __libc_start_main [0x2e4c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    if (numbers.length < 2)\n        return tuple(0.0, 0.0);\n    float\
    \ min_diff = abs(numbers[0] - numbers[1]);\n    float min_num1 = numbers[0];\n\
    \    float min_num2 = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n\
    \    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n    \
    \        float diff = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\n\
    \            {\n                min_diff = diff;\n                min_num1 = numbers[i];\n\
    \                min_num2 = numbers[j];\n            }\n        }\n    }\n   \
    \ return tuple(min_num1, min_num2);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo_nfvr5l.d(15): Error: cannot implicitly convert expression `tuple(0.00000,\
    \ 0.00000)` of type `Tuple!(double, double)` to `Tuple!(float, float)`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo_nfvr5l.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    float min_diff = numbers[1] - numbers[0];\n    for (int\
    \ i = 1; i < numbers.length; i++)\n    {\n        float diff = abs(numbers[i]\
    \ - numbers[i-1]);\n        if (diff < min_diff)\n        {\n            min_diff\
    \ = diff;\n            min = min(numbers[i], numbers[i-1]);\n            max =\
    \ max(numbers[i], numbers[i-1]);\n        }\n    }\n    return tuple(min, max);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfecw8xoa.d(24): Error: function expected before `()`, not `min`\
    \ of type `float`\\n/tmp/tmpfecw8xoa.d(25): Error: function expected before `()`,\
    \ not `max` of type `float`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpfecw8xoa.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float min_a = numbers[0];\n    float min_b = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i\
    \ + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                min_a = numbers[i];\n              \
    \  min_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3hrk1yjj.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429fa9]\\n??:? void tmp3hrk1yjj.__unittest_L33_C1()\
    \ [0x428f65]\\n??:? void tmp3hrk1yjj.__modtest() [0x429960]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ecbb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dbca]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4324f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4329a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43247d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42dba1]\\n??:? runModuleUnitTests [0x42ea91]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a46c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a3f3]\\n??:? _d_run_main [0x42a35e]\\n??:? main [0x429973]\\\
    n??:? __libc_start_main [0x10648554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    Tuple!(float, float) closest_pair = tuple(numbers[0], numbers[1]);\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i\
    \ + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                closest_pair = tuple(numbers[i], numbers[j]);\n\
    \            }\n        }\n    }\n    return closest_pair;\n}\nunittest\n{\n \
    \   alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpo8vcm1av.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42a151]\\n??:? void tmpo8vcm1av.__unittest_L31_C1()\
    \ [0x429041]\\n??:? void tmpo8vcm1av.__modtest() [0x429b04]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42f14f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42e05e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432985]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432e34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432911]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42e035]\\n??:? runModuleUnitTests [0x42ef25]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a6a0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a627]\\n??:? _d_run_main [0x42a592]\\n??:? main [0x429b17]\\\
    n??:? __libc_start_main [0xdfb11554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    foreach(i, n; numbers)\n    {\n        if(n\
    \ < min)\n        {\n            min = n;\n        }\n        if(n > max)\n  \
    \      {\n            max = n;\n        }\n        if(i > 0)\n        {\n    \
    \        float diff = abs(numbers[i] - numbers[i-1]);\n            if(diff < min_diff)\n\
    \            {\n                min_diff = diff;\n            }\n        }\n \
    \   }\n    return tuple(min, max);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpj601gppr.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429e95]\\n??:? void tmpj601gppr.__unittest_L38_C1()\
    \ [0x428f01]\\n??:? void tmpj601gppr.__modtest() [0x4298fc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eba7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dab6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4323dd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43288c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432369]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42da8d]\\n??:? runModuleUnitTests [0x42e97d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a358]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a2df]\\n??:? _d_run_main [0x42a24a]\\n??:? main [0x42990f]\\\
    n??:? __libc_start_main [0x3631d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float minDiff = abs(numbers[0] - numbers[1]);\n    float minNum1 =\
    \ numbers[0];\n    float minNum2 = numbers[1];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n\
    \            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < minDiff)\n            {\n                minDiff = diff;\n               \
    \ minNum1 = numbers[i];\n                minNum2 = numbers[j];\n            }\n\
    \        }\n    }\n    return tuple(minNum1, minNum2);\n}\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpkzm1mljj.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429eb5]\\n??:? void tmpkzm1mljj.__unittest_L32_C1()\
    \ [0x428f21]\\n??:? void tmpkzm1mljj.__modtest() [0x42991c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ebc7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dad6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4323fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4328ac]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432389]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42daad]\\n??:? runModuleUnitTests [0x42e99d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a378]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a2ff]\\n??:? _d_run_main [0x42a26a]\\n??:? main [0x42992f]\\\
    n??:? __libc_start_main [0x243e2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = numbers[1] - numbers[0];\n\
    \    float min_num1 = numbers[0];\n    float min_num2 = numbers[1];\n    for (int\
    \ i = 0; i < numbers.length - 1; i++) \n    {\n        for (int j = i + 1; j <\
    \ numbers.length; j++) \n        {\n            float diff = abs(numbers[i] -\
    \ numbers[j]);\n            if (diff < min_diff) \n            {\n           \
    \     min_diff = diff;\n                min_num1 = numbers[i];\n             \
    \   min_num2 = numbers[j];\n            }\n        }\n    }\n    return tuple(min_num1,\
    \ min_num2);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmptjmq21eu.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429f91]\\n??:? void tmptjmq21eu.__unittest_L33_C1()\
    \ [0x428f4d]\\n??:? void tmptjmq21eu.__modtest() [0x429948]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eca3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dbb2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4324d9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432988]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432465]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42db89]\\n??:? runModuleUnitTests [0x42ea79]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a454]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a3db]\\n??:? _d_run_main [0x42a346]\\n??:? main [0x42995b]\\\
    n??:? __libc_start_main [0xdfb0c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = abs(numbers[0] - numbers[1]);\n    float a = numbers[0];\n\
    \    float b = numbers[1];\n    for (int i = 0; i < numbers.length; i++) \n  \
    \  {\n        for (int j = i + 1; j < numbers.length; j++) \n        {\n     \
    \       if (abs(numbers[i] - numbers[j]) < min) \n            {\n            \
    \    min = abs(numbers[i] - numbers[j]);\n                a = numbers[i];\n  \
    \              b = numbers[j];\n            }\n        }\n    }\n    return tuple(a,\
    \ b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpahgdq97r.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429f2d]\\n??:? void tmpahgdq97r.__unittest_L31_C1()\
    \ [0x428f99]\\n??:? void tmpahgdq97r.__modtest() [0x429994]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ec3f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42db4e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432475]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432924]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432401]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42db25]\\n??:? runModuleUnitTests [0x42ea15]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a3f0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a377]\\n??:? _d_run_main [0x42a2e2]\\n??:? main [0x4299a7]\\\
    n??:? __libc_start_main [0xdc640554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    float max_diff = numbers[1] - numbers[0];\n\
    \    for (int i = 1; i < numbers.length; i++)\n    {\n        if (numbers[i] <\
    \ min)\n        {\n            min = numbers[i];\n        }\n        if (numbers[i]\
    \ > max)\n        {\n            max = numbers[i];\n        }\n        if (i <\
    \ numbers.length - 1)\n        {\n            float diff = numbers[i+1] - numbers[i];\n\
    \            if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \            }\n            if (diff > max_diff)\n            {\n            \
    \    max_diff = diff;\n            }\n        }\n    }\n    return tuple(min,\
    \ max);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpfr6fuejc.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429ecd]\\n??:? void tmpfr6fuejc.__unittest_L43_C1()\
    \ [0x428f45]\\n??:? void tmpfr6fuejc.__modtest() [0x429934]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ebbb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42daca]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4323f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4328a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43237d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42daa1]\\n??:? runModuleUnitTests [0x42e991]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a390]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a317]\\n??:? _d_run_main [0x42a282]\\n??:? main [0x429947]\\\
    n??:? __libc_start_main [0xf97aa554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = abs(numbers[0] - numbers[1]);\n    float min1 = numbers[0];\n\
    \    float min2 = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n\
    \    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n    \
    \        if (abs(numbers[i] - numbers[j]) < min)\n            {\n            \
    \    min = abs(numbers[i] - numbers[j]);\n                min1 = numbers[i];\n\
    \                min2 = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(min1, min2);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpsx3t9wz3.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429f2d]\\n??:? void tmpsx3t9wz3.__unittest_L31_C1()\
    \ [0x428f99]\\n??:? void tmpsx3t9wz3.__modtest() [0x429994]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ec3f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42db4e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432475]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432924]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432401]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42db25]\\n??:? runModuleUnitTests [0x42ea15]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a3f0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a377]\\n??:? _d_run_main [0x42a2e2]\\n??:? main [0x4299a7]\\\
    n??:? __libc_start_main [0x46d75554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float a = 0.0;\n    float b = 0.0;\n  \
    \  foreach(float i; numbers)\n    {\n        foreach(float j; numbers)\n     \
    \   {\n            if(i != j)\n            {\n                float diff = abs(i\
    \ - j);\n                if(diff < min)\n                {\n                 \
    \   min = diff;\n                    a = i;\n                    b = j;\n    \
    \            }\n            }\n        }\n    }\n    return tuple(a, b);\n}\n\
    unittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphwv9micy.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429e15]\\n??:? void tmphwv9micy.__unittest_L35_C1()\
    \ [0x428e85]\\n??:? void tmphwv9micy.__modtest() [0x429880]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eab3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42d9c2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4322e9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432798]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432275]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42d999]\\n??:? runModuleUnitTests [0x42e889]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a264]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a1eb]\\n??:? _d_run_main [0x42a156]\\n??:? main [0x429893]\\\
    n??:? __libc_start_main [0xd5c55554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min_diff = numbers[1] - numbers[0];\n    float min_num1 = numbers[0];\n\
    \    float min_num2 = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n\
    \    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n    \
    \        float diff = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\n\
    \            {\n                min_diff = diff;\n                min_num1 = numbers[i];\n\
    \                min_num2 = numbers[j];\n            }\n        }\n    }\n   \
    \ return tuple(min_num1, min_num2);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3ntpy0sc.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429e95]\\n??:? void tmp3ntpy0sc.__unittest_L32_C1()\
    \ [0x428f01]\\n??:? void tmp3ntpy0sc.__modtest() [0x4298fc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eba7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dab6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4323dd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43288c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432369]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42da8d]\\n??:? runModuleUnitTests [0x42e97d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a358]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a2df]\\n??:? _d_run_main [0x42a24a]\\n??:? main [0x42990f]\\\
    n??:? __libc_start_main [0xda479554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    float max_diff = numbers[1] - numbers[0];\n\
    \    for (int i = 1; i < numbers.length; i++) \n    {\n        if (numbers[i]\
    \ < min) \n        {\n            min = numbers[i];\n        }\n        if (numbers[i]\
    \ > max) \n        {\n            max = numbers[i];\n        }\n        if (numbers[i]\
    \ - numbers[i - 1] < min_diff) \n        {\n            min_diff = numbers[i]\
    \ - numbers[i - 1];\n        }\n        if (numbers[i] - numbers[i - 1] > max_diff)\
    \ \n        {\n            max_diff = numbers[i] - numbers[i - 1];\n        }\n\
    \    }\n    return tuple(min, max);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmptx7lxt7p.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429f9d]\\n??:? void tmptx7lxt7p.__unittest_L39_C1()\
    \ [0x429015]\\n??:? void tmptx7lxt7p.__modtest() [0x429a04]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ec8b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42db9a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4324c1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432970]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43244d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42db71]\\n??:? runModuleUnitTests [0x42ea61]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a460]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a3e7]\\n??:? _d_run_main [0x42a352]\\n??:? main [0x429a17]\\\
    n??:? __libc_start_main [0x51f9b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    foreach(i, n; numbers)\n    {\n        if(n < min)\n\
    \            min = n;\n        if(n > max)\n            max = n;\n    }\n    return\
    \ tuple(min, max);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpcwmq4hc4.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429e31]\\n??:? void tmpcwmq4hc4.__unittest_L26_C1()\
    \ [0x428df5]\\n??:? void tmpcwmq4hc4.__modtest() [0x4297e4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eb1f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42da2e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432355]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432804]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4322e1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42da05]\\n??:? runModuleUnitTests [0x42e8f5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a2f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a27b]\\n??:? _d_run_main [0x42a1e6]\\n??:? main [0x4297f7]\\\
    n??:? __libc_start_main [0xfc051554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float min_first = numbers[0];\n    float min_second = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                min_first = numbers[i];\n           \
    \     min_second = numbers[j];\n            }\n        }\n    }\n    return tuple(min_first,\
    \ min_second);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphyy24ul9.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429fa9]\\n??:? void tmphyy24ul9.__unittest_L33_C1()\
    \ [0x428f65]\\n??:? void tmphyy24ul9.__modtest() [0x429960]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ecbb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dbca]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4324f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4329a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43247d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42dba1]\\n??:? runModuleUnitTests [0x42ea91]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a46c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a3f3]\\n??:? _d_run_main [0x42a35e]\\n??:? main [0x429973]\\\
    n??:? __libc_start_main [0x4e92554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    foreach(i, number; numbers)\n    {\n       \
    \ if(number < min)\n        {\n            min = number;\n        }\n        if(number\
    \ > max)\n        {\n            max = number;\n        }\n        if(i > 0)\n\
    \        {\n            float diff = abs(number - numbers[i-1]);\n           \
    \ if(diff < min_diff)\n            {\n                min_diff = diff;\n     \
    \       }\n        }\n    }\n    return tuple(min, max);\n}\nunittest\n{\n   \
    \ alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpzru8uiwz.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429e6d]\\n??:? void tmpzru8uiwz.__unittest_L38_C1()\
    \ [0x428edd]\\n??:? void tmpzru8uiwz.__modtest() [0x4298d8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eb7f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42da8e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4323b5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432864]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432341]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42da65]\\n??:? runModuleUnitTests [0x42e955]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a330]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a2b7]\\n??:? _d_run_main [0x42a222]\\n??:? main [0x4298eb]\\\
    n??:? __libc_start_main [0xcd891554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    Tuple!(float, float) closest_elements = tuple(numbers[0],\
    \ numbers[1]);\n    for (int i = 0; i < numbers.length - 1; i++) \n    {\n   \
    \     for (int j = i + 1; j < numbers.length; j++) \n        {\n            float\
    \ diff = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff) \n  \
    \          {\n                min_diff = diff;\n                closest_elements\
    \ = tuple(numbers[i], numbers[j]);\n            }\n        }\n    }\n    return\
    \ closest_elements;\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpvsm1urz7.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42a159]\\n??:? void tmpvsm1urz7.__unittest_L31_C1()\
    \ [0x429049]\\n??:? void tmpvsm1urz7.__modtest() [0x429b0c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42f157]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42e066]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43298d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432e3c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432919]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42e03d]\\n??:? runModuleUnitTests [0x42ef2d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a6a8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a62f]\\n??:? _d_run_main [0x42a59a]\\n??:? main [0x429b1f]\\\
    n??:? __libc_start_main [0xe15d4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = numbers[1] - numbers[0];\n\
    \    float min_diff_a = numbers[0];\n    float min_diff_b = numbers[1];\n    for\
    \ (int i = 0; i < numbers.length - 1; i++) \n    {\n        float diff = numbers[i\
    \ + 1] - numbers[i];\n        if (diff < min_diff) \n        {\n            min_diff\
    \ = diff;\n            min_diff_a = numbers[i];\n            min_diff_b = numbers[i\
    \ + 1];\n        }\n    }\n    return tuple(min_diff_a, min_diff_b);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1p8_3t1t.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429ee9]\\n??:? void tmp1p8_3t1t.__unittest_L30_C1()\
    \ [0x428eb1]\\n??:? void tmp1p8_3t1t.__modtest() [0x4298a0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ebd7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dae6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43240d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4328bc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432399]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42dabd]\\n??:? runModuleUnitTests [0x42e9ad]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a3ac]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a333]\\n??:? _d_run_main [0x42a29e]\\n??:? main [0x4298b3]\\\
    n??:? __libc_start_main [0x35fd8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float first = numbers[0];\n    float second = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                first = numbers[i];\n               \
    \ second = numbers[j];\n            }\n        }\n    }\n    return tuple(first,\
    \ second);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n \
    \   assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n  \
    \  assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpr6l685j2.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429fa9]\\n??:? void tmpr6l685j2.__unittest_L33_C1()\
    \ [0x428f65]\\n??:? void tmpr6l685j2.__modtest() [0x429960]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ecbb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dbca]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4324f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4329a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43247d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42dba1]\\n??:? runModuleUnitTests [0x42ea91]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a46c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a3f3]\\n??:? _d_run_main [0x42a35e]\\n??:? main [0x429973]\\\
    n??:? __libc_start_main [0xff213554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = abs(numbers[0] - numbers[1]);\n    for (int i = 0; i < numbers.length; i++)\
    \ \n    {\n        for (int j = i + 1; j < numbers.length; j++) \n        {\n\
    \            if (abs(numbers[i] - numbers[j]) < min_diff) \n            {\n  \
    \              min_diff = abs(numbers[i] - numbers[j]);\n                min =\
    \ numbers[i];\n                max = numbers[j];\n            }\n        }\n \
    \   }\n    return tuple(min, max);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3nfbmmt8.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429efd]\\n??:? void tmp3nfbmmt8.__unittest_L31_C1()\
    \ [0x428f6d]\\n??:? void tmp3nfbmmt8.__modtest() [0x429968]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ec0f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42db1e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432445]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4328f4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4323d1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42daf5]\\n??:? runModuleUnitTests [0x42e9e5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a3c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a347]\\n??:? _d_run_main [0x42a2b2]\\n??:? main [0x42997b]\\\
    n??:? __libc_start_main [0xa061d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = abs(numbers[0] - numbers[1]);\n    float a = numbers[0];\n\
    \    float b = numbers[1];\n    for (int i = 0; i < numbers.length; i++) \n  \
    \  {\n        for (int j = i + 1; j < numbers.length; j++) \n        {\n     \
    \       if (abs(numbers[i] - numbers[j]) < min) \n            {\n            \
    \    min = abs(numbers[i] - numbers[j]);\n                a = numbers[i];\n  \
    \              b = numbers[j];\n            }\n        }\n    }\n    return tuple(a,\
    \ b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpho9ceqkh.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429f2d]\\n??:? void tmpho9ceqkh.__unittest_L31_C1()\
    \ [0x428f99]\\n??:? void tmpho9ceqkh.__modtest() [0x429994]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ec3f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42db4e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432475]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432924]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432401]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42db25]\\n??:? runModuleUnitTests [0x42ea15]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a3f0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a377]\\n??:? _d_run_main [0x42a2e2]\\n??:? main [0x4299a7]\\\
    n??:? __libc_start_main [0x6b0be554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length > 1);\n    float min = abs(numbers[0] - numbers[1]);\n\
    \    float a = numbers[0];\n    float b = numbers[1];\n    for (int i = 0; i <\
    \ numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if (diff < min)\n            {\n                min = diff;\n     \
    \           a = numbers[i];\n                b = numbers[j];\n            }\n\
    \        }\n    }\n    return tuple(a, b);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpccjl7c3i.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429fb1]\\n??:? void tmpccjl7c3i.__unittest_L33_C1()\
    \ [0x428f69]\\n??:? void tmpccjl7c3i.__modtest() [0x429964]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ecc3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dbd2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4324f9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4329a8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432485]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42dba9]\\n??:? runModuleUnitTests [0x42ea99]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a474]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a3fb]\\n??:? _d_run_main [0x42a366]\\n??:? main [0x429977]\\\
    n??:? __libc_start_main [0xb6984554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min = abs(numbers[0] - numbers[1]);\n\
    \    int index = 0;\n    for (int i = 0; i < numbers.length - 1; i++)\n    {\n\
    \        float diff = abs(numbers[i] - numbers[i + 1]);\n        if (diff < min)\n\
    \        {\n            min = diff;\n            index = i;\n        }\n    }\n\
    \    return tuple(numbers[index], numbers[index + 1]);\n}\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpu0bim2e5.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429f31]\\n??:? void tmpu0bim2e5.__unittest_L28_C1()\
    \ [0x428ee9]\\n??:? void tmpu0bim2e5.__modtest() [0x4298e4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ec43]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42db52]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432479]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432928]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432405]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42db29]\\n??:? runModuleUnitTests [0x42ea19]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a3f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a37b]\\n??:? _d_run_main [0x42a2e6]\\n??:? main [0x4298f7]\\\
    n??:? __libc_start_main [0x20603554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = abs(numbers[0] - numbers[1]);\n    float a = numbers[0];\n\
    \    float b = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n   \
    \ {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n       \
    \     if (abs(numbers[i] - numbers[j]) < min)\n            {\n               \
    \ min = abs(numbers[i] - numbers[j]);\n                a = numbers[i];\n     \
    \           b = numbers[j];\n            }\n        }\n    }\n    return tuple(a,\
    \ b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpgpb10508.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429f2d]\\n??:? void tmpgpb10508.__unittest_L31_C1()\
    \ [0x428f99]\\n??:? void tmpgpb10508.__modtest() [0x429994]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ec3f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42db4e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432475]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432924]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432401]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42db25]\\n??:? runModuleUnitTests [0x42ea15]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a3f0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a377]\\n??:? _d_run_main [0x42a2e2]\\n??:? main [0x4299a7]\\\
    n??:? __libc_start_main [0x41170554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float min_a = 0;\n    float min_b = 0;\n\
    \    foreach(i, a; numbers)\n    {\n        foreach(j, b; numbers)\n        {\n\
    \            if(i != j)\n            {\n                float diff = abs(a - b);\n\
    \                if(diff < min)\n                {\n                    min =\
    \ diff;\n                    min_a = a;\n                    min_b = b;\n    \
    \            }\n            }\n        }\n    }\n    return tuple(min_a, min_b);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp37lu53bb.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429e0d]\\n??:? void tmp37lu53bb.__unittest_L35_C1()\
    \ [0x428e7d]\\n??:? void tmp37lu53bb.__modtest() [0x429878]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eaab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42d9ba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4322e1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432790]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43226d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42d991]\\n??:? runModuleUnitTests [0x42e881]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a25c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a1e3]\\n??:? _d_run_main [0x42a14e]\\n??:? main [0x42988b]\\\
    n??:? __libc_start_main [0x83e6e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = abs(numbers[0] - numbers[1]);\n    float a = numbers[0];\n\
    \    float b = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n   \
    \ {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n       \
    \     if (abs(numbers[i] - numbers[j]) < min)\n            {\n               \
    \ min = abs(numbers[i] - numbers[j]);\n                a = numbers[i];\n     \
    \           b = numbers[j];\n            }\n        }\n    }\n    return tuple(a,\
    \ b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpy3bznoqz.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429f2d]\\n??:? void tmpy3bznoqz.__unittest_L31_C1()\
    \ [0x428f99]\\n??:? void tmpy3bznoqz.__modtest() [0x429994]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ec3f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42db4e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432475]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432924]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432401]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42db25]\\n??:? runModuleUnitTests [0x42ea15]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a3f0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a377]\\n??:? _d_run_main [0x42a2e2]\\n??:? main [0x4299a7]\\\
    n??:? __libc_start_main [0x3a457554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    float max_diff = numbers[1] - numbers[0];\n\
    \    foreach(i, number; numbers)\n    {\n        if(i == 0)\n            continue;\n\
    \        float diff = abs(number - numbers[i-1]);\n        if(diff < min_diff)\n\
    \        {\n            min_diff = diff;\n            min = number;\n        }\n\
    \        if(diff > max_diff)\n        {\n            max_diff = diff;\n      \
    \      max = number;\n        }\n    }\n    return tuple(min, max);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjsn2gglz.d(40): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429ead]\\n??:? void tmpjsn2gglz.__unittest_L36_C1()\
    \ [0x428f1d]\\n??:? void tmpjsn2gglz.__modtest() [0x429918]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ebbf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dace]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4323f5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4328a4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432381]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42daa5]\\n??:? runModuleUnitTests [0x42e995]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a370]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a2f7]\\n??:? _d_run_main [0x42a262]\\n??:? main [0x42992b]\\\
    n??:? __libc_start_main [0x5e626554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    float max_diff = numbers[1] - numbers[0];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        if (numbers[i] <\
    \ min)\n        {\n            min = numbers[i];\n        }\n        if (numbers[i]\
    \ > max)\n        {\n            max = numbers[i];\n        }\n        if (i >\
    \ 0)\n        {\n            float diff = numbers[i] - numbers[i-1];\n       \
    \     if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \            }\n            if (diff > max_diff)\n            {\n            \
    \    max_diff = diff;\n            }\n        }\n    }\n    return tuple(min,\
    \ max);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpb_k37xi3.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429ebd]\\n??:? void tmpb_k37xi3.__unittest_L43_C1()\
    \ [0x428f35]\\n??:? void tmpb_k37xi3.__modtest() [0x429924]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ebab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42daba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4323e1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432890]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43236d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42da91]\\n??:? runModuleUnitTests [0x42e981]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a380]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a307]\\n??:? _d_run_main [0x42a272]\\n??:? main [0x429937]\\\
    n??:? __libc_start_main [0xe971a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min = abs(numbers[0] - numbers[1]);\n\
    \    float a = numbers[0];\n    float b = numbers[1];\n    for (int i = 0; i <\
    \ numbers.length; i++) \n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++) \n        {\n            float diff = abs(numbers[i] - numbers[j]);\n \
    \           if (diff < min) \n            {\n                min = diff;\n   \
    \             a = numbers[i];\n                b = numbers[j];\n            }\n\
    \        }\n    }\n    return tuple(a, b);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpw3fsn3tm.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429fa9]\\n??:? void tmpw3fsn3tm.__unittest_L33_C1()\
    \ [0x428f65]\\n??:? void tmpw3fsn3tm.__modtest() [0x429960]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ecbb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dbca]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4324f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4329a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43247d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42dba1]\\n??:? runModuleUnitTests [0x42ea91]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a46c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a3f3]\\n??:? _d_run_main [0x42a35e]\\n??:? main [0x429973]\\\
    n??:? __libc_start_main [0xb1ce7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = abs(numbers[0] - numbers[1]);\n    float a = numbers[0];\n\
    \    float b = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n   \
    \ {\n        for (int j = 0; j < numbers.length; j++)\n        {\n           \
    \ if (i != j)\n            {\n                float diff = abs(numbers[i] - numbers[j]);\n\
    \                if (diff < min)\n                {\n                    min =\
    \ diff;\n                    a = numbers[i];\n                    b = numbers[j];\n\
    \                }\n            }\n        }\n    }\n    return tuple(a, b);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmplndphqxu.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429ebd]\\n??:? void tmplndphqxu.__unittest_L35_C1()\
    \ [0x428f2d]\\n??:? void tmplndphqxu.__modtest() [0x429928]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ebcf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432405]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4328b4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432391]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42dab5]\\n??:? runModuleUnitTests [0x42e9a5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a380]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a307]\\n??:? _d_run_main [0x42a272]\\n??:? main [0x42993b]\\\
    n??:? __libc_start_main [0xb5384554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float[] result = new float[2];\n    foreach(i,\
    \ n; numbers)\n    {\n        foreach(j, m; numbers)\n        {\n            if(i\
    \ != j)\n            {\n                float diff = abs(n - m);\n           \
    \     if(diff < min)\n                {\n                    min = diff;\n   \
    \                 result[0] = n;\n                    result[1] = m;\n       \
    \         }\n            }\n        }\n    }\n    return tuple(result[0], result[1]);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpoccfuxh_.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429f15]\\n??:? void tmpoccfuxh_.__unittest_L34_C1()\
    \ [0x428f81]\\n??:? void tmpoccfuxh_.__modtest() [0x42997c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ee1f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dd2e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43274d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432bfc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4326d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42dd05]\\n??:? runModuleUnitTests [0x42ebf5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a3d8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a35f]\\n??:? _d_run_main [0x42a2ca]\\n??:? main [0x42998f]\\\
    n??:? __libc_start_main [0xcdf1d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min = abs(numbers[0] - numbers[1]);\n\
    \    float a = numbers[0];\n    float b = numbers[1];\n    for (int i = 0; i <\
    \ numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if (diff < min)\n            {\n                min = diff;\n     \
    \           a = numbers[i];\n                b = numbers[j];\n            }\n\
    \        }\n    }\n    return tuple(a, b);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7vcfuecf.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429fa9]\\n??:? void tmp7vcfuecf.__unittest_L33_C1()\
    \ [0x428f65]\\n??:? void tmp7vcfuecf.__modtest() [0x429960]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ecbb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dbca]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4324f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4329a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43247d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42dba1]\\n??:? runModuleUnitTests [0x42ea91]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a46c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a3f3]\\n??:? _d_run_main [0x42a35e]\\n??:? main [0x429973]\\\
    n??:? __libc_start_main [0x945c4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    float max_diff = numbers[1] - numbers[0];\n\
    \    for (int i = 1; i < numbers.length; i++)\n    {\n        if (numbers[i] <\
    \ min)\n        {\n            min = numbers[i];\n        }\n        if (numbers[i]\
    \ > max)\n        {\n            max = numbers[i];\n        }\n        if (i <\
    \ numbers.length - 1)\n        {\n            float diff = numbers[i + 1] - numbers[i];\n\
    \            if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \            }\n            if (diff > max_diff)\n            {\n            \
    \    max_diff = diff;\n            }\n        }\n    }\n    return tuple(min,\
    \ max);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpq2k4o0rj.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429ecd]\\n??:? void tmpq2k4o0rj.__unittest_L43_C1()\
    \ [0x428f45]\\n??:? void tmpq2k4o0rj.__modtest() [0x429934]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ebbb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42daca]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4323f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4328a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43237d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42daa1]\\n??:? runModuleUnitTests [0x42e991]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a390]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a317]\\n??:? _d_run_main [0x42a282]\\n??:? main [0x429947]\\\
    n??:? __libc_start_main [0xb2c0a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float min_a = numbers[0];\n    float min_b = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                min_a = numbers[i];\n               \
    \ min_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4yg1v7v0.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429fa9]\\n??:? void tmp4yg1v7v0.__unittest_L33_C1()\
    \ [0x428f65]\\n??:? void tmp4yg1v7v0.__modtest() [0x429960]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ecbb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dbca]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4324f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4329a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43247d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42dba1]\\n??:? runModuleUnitTests [0x42ea91]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a46c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a3f3]\\n??:? _d_run_main [0x42a35e]\\n??:? main [0x429973]\\\
    n??:? __libc_start_main [0xc608e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min_diff = float.max;\n    float min_diff_a = 0;\n    float min_diff_b\
    \ = 0;\n    foreach(i, a; numbers)\n    {\n        foreach(j, b; numbers)\n  \
    \      {\n            if(i != j)\n            {\n                float diff =\
    \ abs(a - b);\n                if(diff < min_diff)\n                {\n      \
    \              min_diff = diff;\n                    min_diff_a = a;\n       \
    \             min_diff_b = b;\n                }\n            }\n        }\n \
    \   }\n    return tuple(min_diff_a, min_diff_b);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_8ahncx5.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429e0d]\\n??:? void tmp_8ahncx5.__unittest_L35_C1()\
    \ [0x428e7d]\\n??:? void tmp_8ahncx5.__modtest() [0x429878]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eaab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42d9ba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4322e1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432790]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43226d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42d991]\\n??:? runModuleUnitTests [0x42e881]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a25c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a1e3]\\n??:? _d_run_main [0x42a14e]\\n??:? main [0x42988b]\\\
    n??:? __libc_start_main [0x2066f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float min1 = 0.0;\n    float min2 = 0.0;\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min)\n            {\n               \
    \ min = diff;\n                min1 = numbers[i];\n                min2 = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(min1, min2);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp46qli0vg.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429e2d]\\n??:? void tmp46qli0vg.__unittest_L32_C1()\
    \ [0x428e99]\\n??:? void tmp46qli0vg.__modtest() [0x429894]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eb3f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42da4e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432375]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432824]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432301]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42da25]\\n??:? runModuleUnitTests [0x42e915]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a2f0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a277]\\n??:? _d_run_main [0x42a1e2]\\n??:? main [0x4298a7]\\\
    n??:? __libc_start_main [0x93eb3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = abs(numbers[0] - numbers[1]);\n    float a = numbers[0];\n\
    \    float b = numbers[1];\n    foreach(i, v; numbers)\n    {\n        foreach(j,\
    \ w; numbers)\n        {\n            if(i != j)\n            {\n            \
    \    float diff = abs(v - w);\n                if(diff < min)\n              \
    \  {\n                    min = diff;\n                    a = v;\n          \
    \          b = w;\n                }\n            }\n        }\n    }\n    return\
    \ tuple(a, b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpgpmq8qfj.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429e8d]\\n??:? void tmpgpmq8qfj.__unittest_L35_C1()\
    \ [0x428ef9]\\n??:? void tmpgpmq8qfj.__modtest() [0x4298f4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eb9f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42daae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4323d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432884]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432361]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42da85]\\n??:? runModuleUnitTests [0x42e975]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a350]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a2d7]\\n??:? _d_run_main [0x42a242]\\n??:? main [0x429907]\\\
    n??:? __libc_start_main [0xc048d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    for (int i = 1; i < numbers.length; i++)\n \
    \   {\n        float diff = numbers[i] - numbers[i - 1];\n        if (diff < min_diff)\n\
    \        {\n            min_diff = diff;\n            min = numbers[i - 1];\n\
    \            max = numbers[i];\n        }\n    }\n    return tuple(min, max);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7sgq6h56.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429ded]\\n??:? void tmp7sgq6h56.__unittest_L29_C1()\
    \ [0x428e69]\\n??:? void tmp7sgq6h56.__modtest() [0x429858]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eadb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42d9ea]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432311]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4327c0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43229d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42d9c1]\\n??:? runModuleUnitTests [0x42e8b1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a2b0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a237]\\n??:? _d_run_main [0x42a1a2]\\n??:? main [0x42986b]\\\
    n??:? __libc_start_main [0xcc884554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    Tuple!(float, float) min_pair = tuple(numbers[0], numbers[1]);\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i\
    \ + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                min_pair = tuple(numbers[i], numbers[j]);\n\
    \            }\n        }\n    }\n    return min_pair;\n}\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpn_ei66kd.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42a151]\\n??:? void tmpn_ei66kd.__unittest_L31_C1()\
    \ [0x429041]\\n??:? void tmpn_ei66kd.__modtest() [0x429b04]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42f14f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42e05e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432985]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432e34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432911]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42e035]\\n??:? runModuleUnitTests [0x42ef25]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a6a0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a627]\\n??:? _d_run_main [0x42a592]\\n??:? main [0x429b17]\\\
    n??:? __libc_start_main [0x1ba2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float first = numbers[0];\n    float second = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                first = numbers[i];\n               \
    \ second = numbers[j];\n            }\n        }\n    }\n    return tuple(first,\
    \ second);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n \
    \   assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n  \
    \  assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpksks1uy4.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429fa9]\\n??:? void tmpksks1uy4.__unittest_L33_C1()\
    \ [0x428f65]\\n??:? void tmpksks1uy4.__modtest() [0x429960]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ecbb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dbca]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4324f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4329a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43247d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42dba1]\\n??:? runModuleUnitTests [0x42ea91]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a46c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a3f3]\\n??:? _d_run_main [0x42a35e]\\n??:? main [0x429973]\\\
    n??:? __libc_start_main [0x5c95b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min_diff = abs(numbers[0] - numbers[1]);\n    float min_num1\
    \ = numbers[0];\n    float min_num2 = numbers[1];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n\
    \            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min_diff)\n            {\n                min_diff = diff;\n             \
    \   min_num1 = numbers[i];\n                min_num2 = numbers[j];\n         \
    \   }\n        }\n    }\n    return tuple(min_num1, min_num2);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpy1pj39oc.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429eb5]\\n??:? void tmpy1pj39oc.__unittest_L32_C1()\
    \ [0x428f21]\\n??:? void tmpy1pj39oc.__modtest() [0x42991c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ebc7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dad6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4323fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4328ac]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432389]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42daad]\\n??:? runModuleUnitTests [0x42e99d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a378]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a2ff]\\n??:? _d_run_main [0x42a26a]\\n??:? main [0x42992f]\\\
    n??:? __libc_start_main [0x2e720554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min_diff = abs(numbers[0] - numbers[1]);\n    Tuple!(float, float)\
    \ result = tuple(numbers[0], numbers[1]);\n    foreach(i, number; numbers)\n \
    \   {\n        foreach(j, other; numbers[i+1..$])\n        {\n            float\
    \ diff = abs(number - other);\n            if (diff < min_diff)\n            {\n\
    \                min_diff = diff;\n                result = tuple(number, other);\n\
    \            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3infyy2g.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42a055]\\n??:? void tmp3infyy2g.__unittest_L30_C1()\
    \ [0x428ff9]\\n??:? void tmp3infyy2g.__modtest() [0x429abc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42f053]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42df62]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432889]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432d38]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432815]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42df39]\\n??:? runModuleUnitTests [0x42ee29]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a5a4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a52b]\\n??:? _d_run_main [0x42a496]\\n??:? main [0x429acf]\\\
    n??:? __libc_start_main [0x37c75554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float first = numbers[0];\n    float second = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                first = numbers[i];\n               \
    \ second = numbers[j];\n            }\n        }\n    }\n    return tuple(first,\
    \ second);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n \
    \   assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n  \
    \  assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpk1yq6e_0.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429fa9]\\n??:? void tmpk1yq6e_0.__unittest_L33_C1()\
    \ [0x428f65]\\n??:? void tmpk1yq6e_0.__modtest() [0x429960]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ecbb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dbca]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4324f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4329a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43247d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42dba1]\\n??:? runModuleUnitTests [0x42ea91]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a46c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a3f3]\\n??:? _d_run_main [0x42a35e]\\n??:? main [0x429973]\\\
    n??:? __libc_start_main [0x6c275554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float min_a = numbers[0];\n    float min_b = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                min_a = numbers[i];\n               \
    \ min_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpcqr5v6ko.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429fa9]\\n??:? void tmpcqr5v6ko.__unittest_L33_C1()\
    \ [0x428f65]\\n??:? void tmpcqr5v6ko.__modtest() [0x429960]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ecbb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dbca]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4324f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4329a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43247d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42dba1]\\n??:? runModuleUnitTests [0x42ea91]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a46c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a3f3]\\n??:? _d_run_main [0x42a35e]\\n??:? main [0x429973]\\\
    n??:? __libc_start_main [0x4d2ab554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    float diff = numbers[1] - numbers[0];\n    for (int i\
    \ = 1; i < numbers.length; i++) \n    {\n        if (numbers[i] < min) \n    \
    \    {\n            min = numbers[i];\n        }\n        if (numbers[i] > max)\
    \ \n        {\n            max = numbers[i];\n        }\n        if (abs(numbers[i]\
    \ - numbers[i - 1]) < diff) \n        {\n            diff = abs(numbers[i] - numbers[i\
    \ - 1]);\n        }\n    }\n    return tuple(min, max);\n}\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpcn8eoun5.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42a029]\\n??:? void tmpcn8eoun5.__unittest_L35_C1()\
    \ [0x428fe1]\\n??:? void tmpcn8eoun5.__modtest() [0x4299dc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ed3b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dc4a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432571]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432a20]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4324fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42dc21]\\n??:? runModuleUnitTests [0x42eb11]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a4ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a473]\\n??:? _d_run_main [0x42a3de]\\n??:? main [0x4299ef]\\\
    n??:? __libc_start_main [0x91af7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float[] closest = new float[2];\n    for\
    \ (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i + 1; j\
    \ < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min) \n            {\n              \
    \  min = diff;\n                closest[0] = numbers[i];\n                closest[1]\
    \ = numbers[j];\n            }\n        }\n    }\n    return tuple(closest[0],\
    \ closest[1]);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprrmhvt22.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429f35]\\n??:? void tmprrmhvt22.__unittest_L31_C1()\
    \ [0x428fa1]\\n??:? void tmprrmhvt22.__modtest() [0x42999c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ee3f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dd4e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43276d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432c1c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4326f9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42dd25]\\n??:? runModuleUnitTests [0x42ec15]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a3f8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a37f]\\n??:? _d_run_main [0x42a2ea]\\n??:? main [0x4299af]\\\
    n??:? __libc_start_main [0x6e541554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    for (int i = 1; i < numbers.length; i++)\n \
    \   {\n        float diff = numbers[i] - numbers[i - 1];\n        if (diff < min_diff)\n\
    \        {\n            min_diff = diff;\n            min = numbers[i - 1];\n\
    \            max = numbers[i];\n        }\n    }\n    return tuple(min, max);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxcoszl6u.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429ded]\\n??:? void tmpxcoszl6u.__unittest_L29_C1()\
    \ [0x428e69]\\n??:? void tmpxcoszl6u.__modtest() [0x429858]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eadb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42d9ea]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432311]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4327c0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43229d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42d9c1]\\n??:? runModuleUnitTests [0x42e8b1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a2b0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a237]\\n??:? _d_run_main [0x42a1a2]\\n??:? main [0x42986b]\\\
    n??:? __libc_start_main [0xcc9b9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float a = 0.0;\n    float b = 0.0;\n  \
    \  foreach(i, n; numbers)\n    {\n        foreach(j, m; numbers)\n        {\n\
    \            if(i != j)\n            {\n                float diff = abs(n - m);\n\
    \                if(diff < min)\n                {\n                    min =\
    \ diff;\n                    a = n;\n                    b = m;\n            \
    \    }\n            }\n        }\n    }\n    return tuple(a, b);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmplr5thak6.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429e0d]\\n??:? void tmplr5thak6.__unittest_L35_C1()\
    \ [0x428e7d]\\n??:? void tmplr5thak6.__modtest() [0x429878]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eaab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42d9ba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4322e1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432790]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43226d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42d991]\\n??:? runModuleUnitTests [0x42e881]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a25c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a1e3]\\n??:? _d_run_main [0x42a14e]\\n??:? main [0x42988b]\\\
    n??:? __libc_start_main [0xa8e7d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    float max_diff = numbers[1] - numbers[0];\n\
    \    for (int i = 1; i < numbers.length; i++)\n    {\n        if (numbers[i] <\
    \ min)\n        {\n            min = numbers[i];\n        }\n        if (numbers[i]\
    \ > max)\n        {\n            max = numbers[i];\n        }\n        if (numbers[i]\
    \ - numbers[i-1] < min_diff)\n        {\n            min_diff = numbers[i] - numbers[i-1];\n\
    \        }\n        if (numbers[i] - numbers[i-1] > max_diff)\n        {\n   \
    \         max_diff = numbers[i] - numbers[i-1];\n        }\n    }\n    return\
    \ tuple(min, max);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8mfenshp.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429f9d]\\n??:? void tmp8mfenshp.__unittest_L39_C1()\
    \ [0x429015]\\n??:? void tmp8mfenshp.__modtest() [0x429a04]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ec8b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42db9a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4324c1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432970]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43244d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42db71]\\n??:? runModuleUnitTests [0x42ea61]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a460]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a3e7]\\n??:? _d_run_main [0x42a352]\\n??:? main [0x429a17]\\\
    n??:? __libc_start_main [0x61224554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float min_1 = numbers[0];\n    float min_2 = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                min_1 = numbers[i];\n               \
    \ min_2 = numbers[j];\n            }\n        }\n    }\n    return tuple(min_1,\
    \ min_2);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpl5kb2gjl.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429fa9]\\n??:? void tmpl5kb2gjl.__unittest_L33_C1()\
    \ [0x428f65]\\n??:? void tmpl5kb2gjl.__modtest() [0x429960]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ecbb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dbca]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4324f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4329a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43247d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42dba1]\\n??:? runModuleUnitTests [0x42ea91]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a46c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a3f3]\\n??:? _d_run_main [0x42a35e]\\n??:? main [0x429973]\\\
    n??:? __libc_start_main [0x9eebb554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = abs(numbers[0] - numbers[1]);\n    for (int i = 0; i < numbers.length; i++)\
    \ \n    {\n        for (int j = i + 1; j < numbers.length; j++) \n        {\n\
    \            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min_diff) \n            {\n                min_diff = diff;\n            \
    \    min = min(numbers[i], numbers[j]);\n                max = max(numbers[i],\
    \ numbers[j]);\n            }\n        }\n    }\n    return tuple(min, max);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6ep1n_03.d(25): Error: function expected before `()`, not `min`\
    \ of type `float`\\n/tmp/tmp6ep1n_03.d(26): Error: function expected before `()`,\
    \ not `max` of type `float`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp6ep1n_03.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min_diff = abs(numbers[0] - numbers[1]);\n    float min_a = numbers[0];\n\
    \    float min_b = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n\
    \    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n    \
    \        float diff = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\n\
    \            {\n                min_diff = diff;\n                min_a = numbers[i];\n\
    \                min_b = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(min_a, min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_o98jkfh.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429eb5]\\n??:? void tmp_o98jkfh.__unittest_L32_C1()\
    \ [0x428f21]\\n??:? void tmp_o98jkfh.__modtest() [0x42991c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ebc7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dad6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4323fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4328ac]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432389]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42daad]\\n??:? runModuleUnitTests [0x42e99d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a378]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a2ff]\\n??:? _d_run_main [0x42a26a]\\n??:? main [0x42992f]\\\
    n??:? __libc_start_main [0x1bb01554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float a = 0.0;\n    float b = 0.0;\n  \
    \  for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1;\
    \ j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min)\n            {\n               \
    \ min = diff;\n                a = numbers[i];\n                b = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(a, b);\n}\nunittest\n{\n  \
    \  alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6tbtk4_f.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429e2d]\\n??:? void tmp6tbtk4_f.__unittest_L32_C1()\
    \ [0x428e99]\\n??:? void tmp6tbtk4_f.__modtest() [0x429894]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eb3f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42da4e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432375]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432824]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432301]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42da25]\\n??:? runModuleUnitTests [0x42e915]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a2f0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a277]\\n??:? _d_run_main [0x42a1e2]\\n??:? main [0x4298a7]\\\
    n??:? __libc_start_main [0xe5a8f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float[] result = new float[2];\n    foreach(i,\
    \ number; numbers)\n    {\n        foreach(j, number2; numbers)\n        {\n \
    \           if(i != j)\n            {\n                float diff = abs(number\
    \ - number2);\n                if(diff < min)\n                {\n           \
    \         min = diff;\n                    result[0] = number;\n             \
    \       result[1] = number2;\n                }\n            }\n        }\n  \
    \  }\n    return tuple(result[0], result[1]);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5guska5v.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429f15]\\n??:? void tmp5guska5v.__unittest_L34_C1()\
    \ [0x428f81]\\n??:? void tmp5guska5v.__modtest() [0x42997c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ee1f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dd2e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43274d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432bfc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4326d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42dd05]\\n??:? runModuleUnitTests [0x42ebf5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a3d8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a35f]\\n??:? _d_run_main [0x42a2ca]\\n??:? main [0x42998f]\\\
    n??:? __libc_start_main [0x21788554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min = numbers[0] - numbers[1];\n\
    \    float a = numbers[0];\n    float b = numbers[1];\n    foreach(i, n; numbers)\n\
    \    {\n        foreach(j, m; numbers)\n        {\n            if(i != j)\n  \
    \          {\n                float diff = abs(n - m);\n                if(diff\
    \ < min)\n                {\n                    min = diff;\n               \
    \     a = n;\n                    b = m;\n                }\n            }\n \
    \       }\n    }\n    return tuple(a, b);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprvo0aetg.d(40): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429f69]\\n??:? void tmprvo0aetg.__unittest_L36_C1()\
    \ [0x428f21]\\n??:? void tmprvo0aetg.__modtest() [0x42991c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ec7b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42db8a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4324b1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432960]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43243d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42db61]\\n??:? runModuleUnitTests [0x42ea51]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a42c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a3b3]\\n??:? _d_run_main [0x42a31e]\\n??:? main [0x42992f]\\\
    n??:? __libc_start_main [0x42c4b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    float max_diff = numbers[1] - numbers[0];\n\
    \    for (int i = 1; i < numbers.length; i++) \n    {\n        float diff = numbers[i]\
    \ - numbers[i - 1];\n        if (diff < min_diff) \n        {\n            min_diff\
    \ = diff;\n            min = numbers[i - 1];\n            max = numbers[i];\n\
    \        }\n        if (diff > max_diff) \n        {\n            max_diff = diff;\n\
    \            min = numbers[i - 1];\n            max = numbers[i];\n        }\n\
    \    }\n    return tuple(min, max);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmptvolyaoy.d(40): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429ead]\\n??:? void tmptvolyaoy.__unittest_L36_C1()\
    \ [0x428f25]\\n??:? void tmptvolyaoy.__modtest() [0x429914]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eb9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42daaa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4323d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432880]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43235d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42da81]\\n??:? runModuleUnitTests [0x42e971]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a370]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a2f7]\\n??:? _d_run_main [0x42a262]\\n??:? main [0x429927]\\\
    n??:? __libc_start_main [0x59eae554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float a = 0;\n    float b = 0;\n    for\
    \ (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j <\
    \ numbers.length; j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n\
    \            if (diff < min)\n            {\n                min = diff;\n   \
    \             a = numbers[i];\n                b = numbers[j];\n            }\n\
    \        }\n    }\n    return tuple(a, b);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5izcr_vb.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429e2d]\\n??:? void tmp5izcr_vb.__unittest_L32_C1()\
    \ [0x428e99]\\n??:? void tmp5izcr_vb.__modtest() [0x429894]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eb3f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42da4e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432375]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432824]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432301]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42da25]\\n??:? runModuleUnitTests [0x42e915]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a2f0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a277]\\n??:? _d_run_main [0x42a1e2]\\n??:? main [0x4298a7]\\\
    n??:? __libc_start_main [0x66abd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float a = 0.0;\n    float b = 0.0;\n  \
    \  for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1;\
    \ j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min)\n            {\n               \
    \ min = diff;\n                a = numbers[i];\n                b = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(a, b);\n}\nunittest\n{\n  \
    \  alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpze905t50.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429e2d]\\n??:? void tmpze905t50.__unittest_L32_C1()\
    \ [0x428e99]\\n??:? void tmpze905t50.__modtest() [0x429894]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eb3f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42da4e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432375]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432824]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432301]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42da25]\\n??:? runModuleUnitTests [0x42e915]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a2f0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a277]\\n??:? _d_run_main [0x42a1e2]\\n??:? main [0x4298a7]\\\
    n??:? __libc_start_main [0x7f183554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = abs(numbers[0] - numbers[1]);\n    for (int i = 0; i < numbers.length; i++)\n\
    \    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n    \
    \        float diff = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\n\
    \            {\n                min_diff = diff;\n                min = min(numbers[i],\
    \ numbers[j]);\n                max = max(numbers[i], numbers[j]);\n         \
    \   }\n        }\n    }\n    return tuple(min, max);\n}\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkm4km2qn.d(25): Error: function expected before `()`, not `min`\
    \ of type `float`\\n/tmp/tmpkm4km2qn.d(26): Error: function expected before `()`,\
    \ not `max` of type `float`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpkm4km2qn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = abs(numbers[0] - numbers[1]);\n    Tuple!(float, float)\
    \ result = tuple(numbers[0], numbers[1]);\n    foreach(i, number; numbers)\n \
    \   {\n        foreach(j, other; numbers[i+1..$])\n        {\n            float\
    \ diff = abs(number - other);\n            if(diff < min)\n            {\n   \
    \             min = diff;\n                result = tuple(number, other);\n  \
    \          }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpu1dvt2i5.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42a055]\\n??:? void tmpu1dvt2i5.__unittest_L30_C1()\
    \ [0x428ff9]\\n??:? void tmpu1dvt2i5.__modtest() [0x429abc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42f053]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42df62]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432889]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432d38]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432815]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42df39]\\n??:? runModuleUnitTests [0x42ee29]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a5a4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a52b]\\n??:? _d_run_main [0x42a496]\\n??:? main [0x429acf]\\\
    n??:? __libc_start_main [0x18fea554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min_diff = abs(numbers[0] - numbers[1]);\n    float min_a = numbers[0];\n\
    \    float min_b = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n\
    \    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n    \
    \        float diff = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\n\
    \            {\n                min_diff = diff;\n                min_a = numbers[i];\n\
    \                min_b = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(min_a, min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7yny_04g.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429eb5]\\n??:? void tmp7yny_04g.__unittest_L32_C1()\
    \ [0x428f21]\\n??:? void tmp7yny_04g.__modtest() [0x42991c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ebc7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dad6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4323fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4328ac]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432389]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42daad]\\n??:? runModuleUnitTests [0x42e99d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a378]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a2ff]\\n??:? _d_run_main [0x42a26a]\\n??:? main [0x42992f]\\\
    n??:? __libc_start_main [0x1f54554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = abs(numbers[0] - numbers[1]);\n    float min1 = numbers[0];\n\
    \    float min2 = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n\
    \    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n    \
    \        if (abs(numbers[i] - numbers[j]) < min)\n            {\n            \
    \    min = abs(numbers[i] - numbers[j]);\n                min1 = numbers[i];\n\
    \                min2 = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(min1, min2);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjd0i3x1u.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429f2d]\\n??:? void tmpjd0i3x1u.__unittest_L31_C1()\
    \ [0x428f99]\\n??:? void tmpjd0i3x1u.__modtest() [0x429994]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ec3f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42db4e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432475]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432924]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432401]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42db25]\\n??:? runModuleUnitTests [0x42ea15]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a3f0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a377]\\n??:? _d_run_main [0x42a2e2]\\n??:? main [0x4299a7]\\\
    n??:? __libc_start_main [0x9bfd9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min_diff = abs(numbers[0] - numbers[1]);\n    float min_num1\
    \ = numbers[0];\n    float min_num2 = numbers[1];\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        for (int j = i + 1; j < numbers.length; j++) \n      \
    \  {\n            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min_diff) \n            {\n                min_diff = diff;\n            \
    \    min_num1 = numbers[i];\n                min_num2 = numbers[j];\n        \
    \    }\n        }\n    }\n    return tuple(min_num1, min_num2);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpgdeneyno.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429eb5]\\n??:? void tmpgdeneyno.__unittest_L32_C1()\
    \ [0x428f21]\\n??:? void tmpgdeneyno.__modtest() [0x42991c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ebc7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dad6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4323fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4328ac]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432389]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42daad]\\n??:? runModuleUnitTests [0x42e99d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a378]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a2ff]\\n??:? _d_run_main [0x42a26a]\\n??:? main [0x42992f]\\\
    n??:? __libc_start_main [0x9c45b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = numbers[1] - numbers[0];\n\
    \    float min_a = numbers[0];\n    float min_b = numbers[1];\n    for (int i\
    \ = 0; i < numbers.length; i++) \n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++) \n        {\n            float diff = abs(numbers[i] - numbers[j]);\n \
    \           if (diff < min_diff) \n            {\n                min_diff = diff;\n\
    \                min_a = numbers[i];\n                min_b = numbers[j];\n  \
    \          }\n        }\n    }\n    return tuple(min_a, min_b);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpbpjdm404.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429f91]\\n??:? void tmpbpjdm404.__unittest_L33_C1()\
    \ [0x428f49]\\n??:? void tmpbpjdm404.__modtest() [0x429944]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eca3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dbb2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4324d9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432988]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432465]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42db89]\\n??:? runModuleUnitTests [0x42ea79]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a454]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a3db]\\n??:? _d_run_main [0x42a346]\\n??:? main [0x429957]\\\
    n??:? __libc_start_main [0xe4c8e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for (int i = 1; i < numbers.length; i++) \n    {\n  \
    \      if (numbers[i] < min) \n        {\n            min = numbers[i];\n    \
    \    }\n        if (numbers[i] > max) \n        {\n            max = numbers[i];\n\
    \        }\n    }\n    return tuple(min, max);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpphg6u90w.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429e91]\\n??:? void tmpphg6u90w.__unittest_L30_C1()\
    \ [0x428e59]\\n??:? void tmpphg6u90w.__modtest() [0x429848]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eb7f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42da8e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4323b5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432864]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432341]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42da65]\\n??:? runModuleUnitTests [0x42e955]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a354]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a2db]\\n??:? _d_run_main [0x42a246]\\n??:? main [0x42985b]\\\
    n??:? __libc_start_main [0x183c5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min_diff = abs(numbers[0] - numbers[1]);\n    Tuple!(float, float)\
    \ closest_pair = tuple(numbers[0], numbers[1]);\n    for (int i = 0; i < numbers.length\
    \ - 1; i++)\n    {\n        for (int j = i + 1; j < numbers.length; j++)\n   \
    \     {\n            float diff = abs(numbers[i] - numbers[j]);\n            if\
    \ (diff < min_diff)\n            {\n                min_diff = diff;\n       \
    \         closest_pair = tuple(numbers[i], numbers[j]);\n            }\n     \
    \   }\n    }\n    return closest_pair;\n}\nunittest\n{\n    alias candidate =\
    \ find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpb6x1vp16.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42a06d]\\n??:? void tmpb6x1vp16.__unittest_L30_C1()\
    \ [0x429015]\\n??:? void tmpb6x1vp16.__modtest() [0x429ad8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42f06b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42df7a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4328a1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432d50]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43282d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42df51]\\n??:? runModuleUnitTests [0x42ee41]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a5bc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a543]\\n??:? _d_run_main [0x42a4ae]\\n??:? main [0x429aeb]\\\
    n??:? __libc_start_main [0xc822b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.infinity;\n    float min1 = 0.0;\n    float min2\
    \ = 0.0;\n    foreach(i, v; numbers)\n    {\n        foreach(j, w; numbers)\n\
    \        {\n            if(i != j)\n            {\n                float diff\
    \ = abs(v - w);\n                if(diff < min)\n                {\n         \
    \           min = diff;\n                    min1 = v;\n                    min2\
    \ = w;\n                }\n            }\n        }\n    }\n    return tuple(min1,\
    \ min2);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n   \
    \ assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpp9aj2iue.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429e0d]\\n??:? void tmpp9aj2iue.__unittest_L35_C1()\
    \ [0x428e7d]\\n??:? void tmpp9aj2iue.__modtest() [0x429878]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eaab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42d9ba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4322e1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432790]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43226d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42d991]\\n??:? runModuleUnitTests [0x42e881]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a25c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a1e3]\\n??:? _d_run_main [0x42a14e]\\n??:? main [0x42988b]\\\
    n??:? __libc_start_main [0xc0575554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = abs(numbers[0] - numbers[1]);\n    for (int i = 0; i < numbers.length; i++)\
    \ \n    {\n        for (int j = i + 1; j < numbers.length; j++) \n        {\n\
    \            if (abs(numbers[i] - numbers[j]) < min_diff) \n            {\n  \
    \              min_diff = abs(numbers[i] - numbers[j]);\n                min =\
    \ min(numbers[i], numbers[j]);\n                max = max(numbers[i], numbers[j]);\n\
    \            }\n        }\n    }\n    return tuple(min, max);\n}\nunittest\n{\n\
    \    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd1m6kh8s.d(24): Error: function expected before `()`, not `min`\
    \ of type `float`\\n/tmp/tmpd1m6kh8s.d(25): Error: function expected before `()`,\
    \ not `max` of type `float`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpd1m6kh8s.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min = abs(numbers[0] - numbers[1]);\n\
    \    float a = numbers[0];\n    float b = numbers[1];\n    for (int i = 0; i <\
    \ numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if (diff < min)\n            {\n                min = diff;\n     \
    \           a = numbers[i];\n                b = numbers[j];\n            }\n\
    \        }\n    }\n    return tuple(a, b);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpn6d4vs4x.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429fa9]\\n??:? void tmpn6d4vs4x.__unittest_L33_C1()\
    \ [0x428f65]\\n??:? void tmpn6d4vs4x.__modtest() [0x429960]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ecbb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dbca]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4324f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4329a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43247d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42dba1]\\n??:? runModuleUnitTests [0x42ea91]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a46c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a3f3]\\n??:? _d_run_main [0x42a35e]\\n??:? main [0x429973]\\\
    n??:? __libc_start_main [0x8ffc9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min_diff = abs(numbers[0] - numbers[1]);\n    float min_num1\
    \ = numbers[0];\n    float min_num2 = numbers[1];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n\
    \            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min_diff)\n            {\n                min_diff = diff;\n             \
    \   min_num1 = numbers[i];\n                min_num2 = numbers[j];\n         \
    \   }\n        }\n    }\n    return tuple(min_num1, min_num2);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqqefnzx8.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429eb5]\\n??:? void tmpqqefnzx8.__unittest_L32_C1()\
    \ [0x428f21]\\n??:? void tmpqqefnzx8.__modtest() [0x42991c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ebc7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dad6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4323fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4328ac]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432389]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42daad]\\n??:? runModuleUnitTests [0x42e99d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a378]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a2ff]\\n??:? _d_run_main [0x42a26a]\\n??:? main [0x42992f]\\\
    n??:? __libc_start_main [0xf7f85554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float diff\
    \ = numbers[1] - numbers[0];\n    for (int i = 0; i < numbers.length; i++)\n \
    \   {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n     \
    \       if (abs(numbers[i] - numbers[j]) < diff)\n            {\n            \
    \    min = min(numbers[i], numbers[j]);\n                max = max(numbers[i],\
    \ numbers[j]);\n                diff = abs(numbers[i] - numbers[j]);\n       \
    \     }\n        }\n    }\n    return tuple(min, max);\n}\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu55c9dwe.d(23): Error: function expected before `()`, not `min`\
    \ of type `float`\\n/tmp/tmpu55c9dwe.d(24): Error: function expected before `()`,\
    \ not `max` of type `float`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpu55c9dwe.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float min1 = 0.0;\n    float min2 = 0.0;\n\
    \    for (int i = 0; i < numbers.length - 1; i++)\n    {\n        for (int j =\
    \ i + 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min)\n            {\n               \
    \ min = diff;\n                min1 = numbers[i];\n                min2 = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(min1, min2);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpc0t4w33q.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429e2d]\\n??:? void tmpc0t4w33q.__unittest_L32_C1()\
    \ [0x428e9d]\\n??:? void tmpc0t4w33q.__modtest() [0x429898]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eb3f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42da4e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432375]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432824]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432301]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42da25]\\n??:? runModuleUnitTests [0x42e915]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a2f0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a277]\\n??:? _d_run_main [0x42a1e2]\\n??:? main [0x4298ab]\\\
    n??:? __libc_start_main [0xc338f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    float max_diff = numbers[1] - numbers[0];\n\
    \    for (int i = 1; i < numbers.length; i++) \n    {\n        float diff = numbers[i]\
    \ - numbers[i - 1];\n        if (diff < min_diff) \n        {\n            min_diff\
    \ = diff;\n            min = numbers[i - 1];\n            max = numbers[i];\n\
    \        }\n        if (diff > max_diff) \n        {\n            max_diff = diff;\n\
    \            min = numbers[i - 1];\n            max = numbers[i];\n        }\n\
    \    }\n    return tuple(min, max);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpwhy_6nut.d(40): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429ead]\\n??:? void tmpwhy_6nut.__unittest_L36_C1()\
    \ [0x428f25]\\n??:? void tmpwhy_6nut.__modtest() [0x429914]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eb9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42daaa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4323d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432880]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43235d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42da81]\\n??:? runModuleUnitTests [0x42e971]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a370]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a2f7]\\n??:? _d_run_main [0x42a262]\\n??:? main [0x429927]\\\
    n??:? __libc_start_main [0x964b0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = abs(numbers[0] - numbers[1]);\n    for (int i = 0; i < numbers.length; i++)\n\
    \    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n    \
    \        float diff = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\n\
    \            {\n                min_diff = diff;\n                min = min(numbers[i],\
    \ numbers[j]);\n                max = max(numbers[i], numbers[j]);\n         \
    \   }\n        }\n    }\n    return tuple(min, max);\n}\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8_chqx0s.d(25): Error: function expected before `()`, not `min`\
    \ of type `float`\\n/tmp/tmp8_chqx0s.d(26): Error: function expected before `()`,\
    \ not `max` of type `float`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp8_chqx0s.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = numbers[1] - numbers[0];\n\
    \    float min_a = numbers[0];\n    float min_b = numbers[1];\n    for (int i\
    \ = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                min_a = numbers[i];\n                min_b = numbers[j];\n  \
    \          }\n        }\n    }\n    return tuple(min_a, min_b);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0cker1i4.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429f91]\\n??:? void tmp0cker1i4.__unittest_L33_C1()\
    \ [0x428f49]\\n??:? void tmp0cker1i4.__modtest() [0x429944]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eca3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dbb2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4324d9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432988]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432465]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42db89]\\n??:? runModuleUnitTests [0x42ea79]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a454]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a3db]\\n??:? _d_run_main [0x42a346]\\n??:? main [0x429957]\\\
    n??:? __libc_start_main [0xb1fea554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float a = 0.0;\n    float b = 0.0;\n  \
    \  foreach(i, n; numbers)\n    {\n        foreach(j, m; numbers)\n        {\n\
    \            if(i != j)\n            {\n                float diff = abs(n - m);\n\
    \                if(diff < min)\n                {\n                    min =\
    \ diff;\n                    a = n;\n                    b = m;\n            \
    \    }\n            }\n        }\n    }\n    return tuple(a, b);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpw70otm52.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429e0d]\\n??:? void tmpw70otm52.__unittest_L35_C1()\
    \ [0x428e7d]\\n??:? void tmpw70otm52.__modtest() [0x429878]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eaab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42d9ba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4322e1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432790]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43226d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42d991]\\n??:? runModuleUnitTests [0x42e881]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a25c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a1e3]\\n??:? _d_run_main [0x42a14e]\\n??:? main [0x42988b]\\\
    n??:? __libc_start_main [0x6a10f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    float max_diff = numbers[1] - numbers[0];\n\
    \    for (int i = 1; i < numbers.length; i++)\n    {\n        float diff = numbers[i]\
    \ - numbers[i-1];\n        if (diff < min_diff)\n        {\n            min_diff\
    \ = diff;\n            min = numbers[i-1];\n            max = numbers[i];\n  \
    \      }\n        if (diff > max_diff)\n        {\n            max_diff = diff;\n\
    \        }\n    }\n    return tuple(min, max);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp9p200yem.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429e55]\\n??:? void tmp9p200yem.__unittest_L34_C1()\
    \ [0x428ecd]\\n??:? void tmp9p200yem.__modtest() [0x4298bc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eb43]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42da52]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432379]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432828]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432305]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42da29]\\n??:? runModuleUnitTests [0x42e919]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a318]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a29f]\\n??:? _d_run_main [0x42a20a]\\n??:? main [0x4298cf]\\\
    n??:? __libc_start_main [0x2baa5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float minDiff = abs(numbers[0] -\
    \ numbers[1]);\n    float min1 = numbers[0];\n    float min2 = numbers[1];\n \
    \   for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < minDiff)\n            {\n           \
    \     minDiff = diff;\n                min1 = numbers[i];\n                min2\
    \ = numbers[j];\n            }\n        }\n    }\n    return tuple(min1, min2);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpkqndvj6w.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429fa9]\\n??:? void tmpkqndvj6w.__unittest_L33_C1()\
    \ [0x428f65]\\n??:? void tmpkqndvj6w.__modtest() [0x429960]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ecbb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dbca]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4324f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4329a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43247d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42dba1]\\n??:? runModuleUnitTests [0x42ea91]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a46c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a3f3]\\n??:? _d_run_main [0x42a35e]\\n??:? main [0x429973]\\\
    n??:? __libc_start_main [0x5393b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    float min_diff = numbers[1] - numbers[0];\n    foreach(i,\
    \ n; numbers)\n    {\n        if(n < min)\n        {\n            min = n;\n \
    \       }\n        if(n > max)\n        {\n            max = n;\n        }\n \
    \       if(i > 0)\n        {\n            float diff = abs(numbers[i] - numbers[i-1]);\n\
    \            if(diff < min_diff)\n            {\n                min_diff = diff;\n\
    \            }\n        }\n    }\n    return tuple(min, max);\n}\nunittest\n{\n\
    \    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3bst3hz0.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429f89]\\n??:? void tmp3bst3hz0.__unittest_L39_C1()\
    \ [0x428f41]\\n??:? void tmp3bst3hz0.__modtest() [0x42993c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ec9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dbaa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4324d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432980]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43245d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42db81]\\n??:? runModuleUnitTests [0x42ea71]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a44c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a3d3]\\n??:? _d_run_main [0x42a33e]\\n??:? main [0x42994f]\\\
    n??:? __libc_start_main [0x858eb554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float diff\
    \ = numbers[1] - numbers[0];\n    for (int i = 0; i < numbers.length; i++) \n\
    \    {\n        if (numbers[i] < min) \n        {\n            min = numbers[i];\n\
    \        }\n        if (numbers[i] > max) \n        {\n            max = numbers[i];\n\
    \        }\n        for (int j = i + 1; j < numbers.length; j++) \n        {\n\
    \            if (abs(numbers[i] - numbers[j]) < diff) \n            {\n      \
    \          diff = abs(numbers[i] - numbers[j]);\n                min = numbers[i];\n\
    \                max = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(min, max);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpk7s5q87r.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429fbd]\\n??:? void tmpk7s5q87r.__unittest_L39_C1()\
    \ [0x429029]\\n??:? void tmpk7s5q87r.__modtest() [0x429a24]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eccf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dbde]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432505]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4329b4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432491]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42dbb5]\\n??:? runModuleUnitTests [0x42eaa5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a480]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a407]\\n??:? _d_run_main [0x42a372]\\n??:? main [0x429a37]\\\
    n??:? __libc_start_main [0x55c72554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min_diff = float.max;\n    float min_a = 0.0;\n    float min_b\
    \ = 0.0;\n    foreach(i, a; numbers)\n    {\n        foreach(j, b; numbers)\n\
    \        {\n            if (i != j)\n            {\n                float diff\
    \ = abs(a - b);\n                if (diff < min_diff)\n                {\n   \
    \                 min_diff = diff;\n                    min_a = a;\n         \
    \           min_b = b;\n                }\n            }\n        }\n    }\n \
    \   return tuple(min_a, min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpi0j9b90l.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429e0d]\\n??:? void tmpi0j9b90l.__unittest_L35_C1()\
    \ [0x428e7d]\\n??:? void tmpi0j9b90l.__modtest() [0x429878]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eaab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42d9ba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4322e1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432790]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43226d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42d991]\\n??:? runModuleUnitTests [0x42e881]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a25c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a1e3]\\n??:? _d_run_main [0x42a14e]\\n??:? main [0x42988b]\\\
    n??:? __libc_start_main [0x8faf4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = abs(numbers[0] - numbers[1]);\n    float a = numbers[0];\n\
    \    float b = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n   \
    \ {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n       \
    \     if (abs(numbers[i] - numbers[j]) < min)\n            {\n               \
    \ min = abs(numbers[i] - numbers[j]);\n                a = numbers[i];\n     \
    \           b = numbers[j];\n            }\n        }\n    }\n    return tuple(a,\
    \ b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpbptpaoal.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429f2d]\\n??:? void tmpbptpaoal.__unittest_L31_C1()\
    \ [0x428f99]\\n??:? void tmpbptpaoal.__modtest() [0x429994]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ec3f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42db4e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432475]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432924]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432401]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42db25]\\n??:? runModuleUnitTests [0x42ea15]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a3f0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a377]\\n??:? _d_run_main [0x42a2e2]\\n??:? main [0x4299a7]\\\
    n??:? __libc_start_main [0x4c1f0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float min1 = 0.0;\n    float min2 = 0.0;\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min)\n            {\n               \
    \ min = diff;\n                min1 = numbers[i];\n                min2 = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(min1, min2);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp9_jdcee3.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429e2d]\\n??:? void tmp9_jdcee3.__unittest_L32_C1()\
    \ [0x428e99]\\n??:? void tmp9_jdcee3.__modtest() [0x429894]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eb3f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42da4e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432375]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432824]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432301]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42da25]\\n??:? runModuleUnitTests [0x42e915]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a2f0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a277]\\n??:? _d_run_main [0x42a1e2]\\n??:? main [0x4298a7]\\\
    n??:? __libc_start_main [0x50f96554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float a = 0.0;\n    float b = 0.0;\n  \
    \  for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1;\
    \ j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min)\n            {\n               \
    \ min = diff;\n                a = numbers[i];\n                b = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(a, b);\n}\nunittest\n{\n  \
    \  alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpphsks49n.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429e2d]\\n??:? void tmpphsks49n.__unittest_L32_C1()\
    \ [0x428e99]\\n??:? void tmpphsks49n.__modtest() [0x429894]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eb3f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42da4e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432375]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432824]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432301]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42da25]\\n??:? runModuleUnitTests [0x42e915]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a2f0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a277]\\n??:? _d_run_main [0x42a1e2]\\n??:? main [0x4298a7]\\\
    n??:? __libc_start_main [0x79a52554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float min_diff_a = numbers[0];\n    float min_diff_b = numbers[1];\n\
    \    for (size_t i = 0; i < numbers.length; i++) \n    {\n        for (size_t\
    \ j = i + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                min_diff_a = numbers[i];\n         \
    \       min_diff_b = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(min_diff_a, min_diff_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3lbx8yl9.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429fb9]\\n??:? void tmp3lbx8yl9.__unittest_L33_C1()\
    \ [0x428f75]\\n??:? void tmp3lbx8yl9.__modtest() [0x429970]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eccb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dbda]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432501]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4329b0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43248d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42dbb1]\\n??:? runModuleUnitTests [0x42eaa1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a47c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a403]\\n??:? _d_run_main [0x42a36e]\\n??:? main [0x429983]\\\
    n??:? __libc_start_main [0x8c0f8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min_diff = float.max;\n    float min_a = 0.0;\n    float min_b\
    \ = 0.0;\n    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int\
    \ j = i + 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                min_a = numbers[i];\n               \
    \ min_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpkzs0atag.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429e2d]\\n??:? void tmpkzs0atag.__unittest_L32_C1()\
    \ [0x428e99]\\n??:? void tmpkzs0atag.__modtest() [0x429894]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eb3f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42da4e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432375]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432824]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432301]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42da25]\\n??:? runModuleUnitTests [0x42e915]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a2f0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a277]\\n??:? _d_run_main [0x42a1e2]\\n??:? main [0x4298a7]\\\
    n??:? __libc_start_main [0x1a76e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float a, b;\n    foreach(i, x; numbers)\n\
    \    {\n        foreach(j, y; numbers)\n        {\n            if(i != j)\n  \
    \          {\n                float diff = abs(x - y);\n                if(diff\
    \ < min)\n                {\n                    min = diff;\n               \
    \     a = x;\n                    b = y;\n                }\n            }\n \
    \       }\n    }\n    return tuple(a, b);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpny2g1v11.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429e05]\\n??:? void tmpny2g1v11.__unittest_L34_C1()\
    \ [0x428e75]\\n??:? void tmpny2g1v11.__modtest() [0x429870]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eaa3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42d9b2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4322d9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432788]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432265]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42d989]\\n??:? runModuleUnitTests [0x42e879]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a254]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a1db]\\n??:? _d_run_main [0x42a146]\\n??:? main [0x429883]\\\
    n??:? __libc_start_main [0xd4342554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float a = 0.0;\n    float b = 0.0;\n  \
    \  foreach(i, x; numbers)\n    {\n        foreach(j, y; numbers)\n        {\n\
    \            if(i != j)\n            {\n                float diff = abs(x - y);\n\
    \                if(diff < min)\n                {\n                    min =\
    \ diff;\n                    a = x;\n                    b = y;\n            \
    \    }\n            }\n        }\n    }\n    return tuple(a, b);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphq98r1pd.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429e0d]\\n??:? void tmphq98r1pd.__unittest_L35_C1()\
    \ [0x428e7d]\\n??:? void tmphq98r1pd.__modtest() [0x429878]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eaab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42d9ba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4322e1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432790]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43226d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42d991]\\n??:? runModuleUnitTests [0x42e881]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a25c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a1e3]\\n??:? _d_run_main [0x42a14e]\\n??:? main [0x42988b]\\\
    n??:? __libc_start_main [0xf3dde554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min_diff = float.infinity;\n    float min_a = 0.0;\n    float\
    \ min_b = 0.0;\n    for (size_t i = 0; i < numbers.length; i++)\n    {\n     \
    \   for (size_t j = i + 1; j < numbers.length; j++)\n        {\n            float\
    \ diff = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\n   \
    \         {\n                min_diff = diff;\n                min_a = numbers[i];\n\
    \                min_b = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(min_a, min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpe42ipqgn.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429e35]\\n??:? void tmpe42ipqgn.__unittest_L32_C1()\
    \ [0x428ea5]\\n??:? void tmpe42ipqgn.__modtest() [0x4298a0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eb47]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42da56]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43237d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43282c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432309]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42da2d]\\n??:? runModuleUnitTests [0x42e91d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a2f8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a27f]\\n??:? _d_run_main [0x42a1ea]\\n??:? main [0x4298b3]\\\
    n??:? __libc_start_main [0xab327554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float a = 0.0;\n    float b = 0.0;\n  \
    \  foreach(i, number; numbers)\n    {\n        foreach(j, other; numbers[i+1..$])\n\
    \        {\n            float diff = abs(number - other);\n            if(diff\
    \ < min)\n            {\n                min = diff;\n                a = number;\n\
    \                b = other;\n            }\n        }\n    }\n    return tuple(a,\
    \ b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmptvujq21f.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429e25]\\n??:? void tmptvujq21f.__unittest_L32_C1()\
    \ [0x428e91]\\n??:? void tmptvujq21f.__modtest() [0x42988c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eb37]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42da46]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43236d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43281c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4322f9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42da1d]\\n??:? runModuleUnitTests [0x42e90d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a2e8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a26f]\\n??:? _d_run_main [0x42a1da]\\n??:? main [0x42989f]\\\
    n??:? __libc_start_main [0xa70db554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min_diff = numbers[1] - numbers[0];\n    float min_num1 = numbers[0];\n\
    \    float min_num2 = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n\
    \    {\n        for (int j = i+1; j < numbers.length; j++)\n        {\n      \
    \      float diff = numbers[j] - numbers[i];\n            if (diff < min_diff)\n\
    \            {\n                min_diff = diff;\n                min_num1 = numbers[i];\n\
    \                min_num2 = numbers[j];\n            }\n        }\n    }\n   \
    \ return tuple(min_num1, min_num2);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpbbosctgn.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429e05]\\n??:? void tmpbbosctgn.__unittest_L32_C1()\
    \ [0x428e7d]\\n??:? void tmpbbosctgn.__modtest() [0x42986c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eaf3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42da02]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432329]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4327d8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4322b5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42d9d9]\\n??:? runModuleUnitTests [0x42e8c9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a2c8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a24f]\\n??:? _d_run_main [0x42a1ba]\\n??:? main [0x42987f]\\\
    n??:? __libc_start_main [0x6621f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float min_num1 = numbers[0];\n    float min_num2 = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                min_num1 = numbers[i];\n            \
    \    min_num2 = numbers[j];\n            }\n        }\n    }\n    return tuple(min_num1,\
    \ min_num2);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpkmyhp3hd.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429fa9]\\n??:? void tmpkmyhp3hd.__unittest_L33_C1()\
    \ [0x428f65]\\n??:? void tmpkmyhp3hd.__modtest() [0x429960]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ecbb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dbca]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4324f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4329a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43247d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42dba1]\\n??:? runModuleUnitTests [0x42ea91]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a46c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a3f3]\\n??:? _d_run_main [0x42a35e]\\n??:? main [0x429973]\\\
    n??:? __libc_start_main [0xa7c1f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = abs(numbers[0] - numbers[1]);\n    float a = numbers[0];\n\
    \    float b = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n   \
    \ {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n       \
    \     if (abs(numbers[i] - numbers[j]) < min)\n            {\n               \
    \ min = abs(numbers[i] - numbers[j]);\n                a = numbers[i];\n     \
    \           b = numbers[j];\n            }\n        }\n    }\n    return tuple(a,\
    \ b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpy6fbyoc2.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429f2d]\\n??:? void tmpy6fbyoc2.__unittest_L31_C1()\
    \ [0x428f99]\\n??:? void tmpy6fbyoc2.__modtest() [0x429994]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ec3f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42db4e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432475]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432924]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432401]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42db25]\\n??:? runModuleUnitTests [0x42ea15]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a3f0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a377]\\n??:? _d_run_main [0x42a2e2]\\n??:? main [0x4299a7]\\\
    n??:? __libc_start_main [0x4b95d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = abs(numbers[0] - numbers[1]);\n    Tuple!(float, float)\
    \ result = tuple(numbers[0], numbers[1]);\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        for (int j = i + 1; j < numbers.length; j++) \n      \
    \  {\n            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min) \n            {\n                min = diff;\n                result\
    \ = tuple(numbers[i], numbers[j]);\n            }\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmps2cgg748.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42a065]\\n??:? void tmps2cgg748.__unittest_L30_C1()\
    \ [0x42900d]\\n??:? void tmps2cgg748.__modtest() [0x429ad0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42f063]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42df72]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432899]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432d48]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432825]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42df49]\\n??:? runModuleUnitTests [0x42ee39]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a5b4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a53b]\\n??:? _d_run_main [0x42a4a6]\\n??:? main [0x429ae3]\\\
    n??:? __libc_start_main [0x9e38a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    float min_diff = numbers[1] - numbers[0];\n    float\
    \ max_diff = numbers[1] - numbers[0];\n    for (int i = 1; i < numbers.length;\
    \ i++) \n    {\n        float diff = numbers[i] - numbers[i - 1];\n        if\
    \ (diff < min_diff) \n        {\n            min_diff = diff;\n            min\
    \ = numbers[i - 1];\n            max = numbers[i];\n        }\n        if (diff\
    \ > max_diff) \n        {\n            max_diff = diff;\n            min = numbers[i\
    \ - 1];\n            max = numbers[i];\n        }\n    }\n    return tuple(min,\
    \ max);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpwvwb4qzo.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429fa1]\\n??:? void tmpwvwb4qzo.__unittest_L37_C1()\
    \ [0x428f65]\\n??:? void tmpwvwb4qzo.__modtest() [0x429954]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ec8f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42db9e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4324c5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432974]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432451]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42db75]\\n??:? runModuleUnitTests [0x42ea65]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a464]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a3eb]\\n??:? _d_run_main [0x42a356]\\n??:? main [0x429967]\\\
    n??:? __libc_start_main [0xc964a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min_diff = abs(numbers[0] - numbers[1]);\n    float min_num1\
    \ = numbers[0];\n    float min_num2 = numbers[1];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n\
    \            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min_diff)\n            {\n                min_diff = diff;\n             \
    \   min_num1 = numbers[i];\n                min_num2 = numbers[j];\n         \
    \   }\n        }\n    }\n    return tuple(min_num1, min_num2);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3zu9itfl.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429eb5]\\n??:? void tmp3zu9itfl.__unittest_L32_C1()\
    \ [0x428f21]\\n??:? void tmp3zu9itfl.__modtest() [0x42991c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ebc7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dad6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4323fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4328ac]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432389]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42daad]\\n??:? runModuleUnitTests [0x42e99d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a378]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a2ff]\\n??:? _d_run_main [0x42a26a]\\n??:? main [0x42992f]\\\
    n??:? __libc_start_main [0xda07e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float a = 0;\n    float b = 0;\n    for\
    \ (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j <\
    \ numbers.length; j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n\
    \            if (diff < min)\n            {\n                min = diff;\n   \
    \             a = numbers[i];\n                b = numbers[j];\n            }\n\
    \        }\n    }\n    return tuple(a, b);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1plyb_9v.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429e2d]\\n??:? void tmp1plyb_9v.__unittest_L32_C1()\
    \ [0x428e99]\\n??:? void tmp1plyb_9v.__modtest() [0x429894]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eb3f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42da4e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432375]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432824]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432301]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42da25]\\n??:? runModuleUnitTests [0x42e915]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a2f0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a277]\\n??:? _d_run_main [0x42a1e2]\\n??:? main [0x4298a7]\\\
    n??:? __libc_start_main [0xc2e0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float min_a = 0.0;\n    float min_b = 0.0;\n\
    \    foreach(i, a; numbers)\n    {\n        foreach(j, b; numbers)\n        {\n\
    \            if(i == j)\n                continue;\n            float diff = abs(a\
    \ - b);\n            if(diff < min)\n            {\n                min = diff;\n\
    \                min_a = a;\n                min_b = b;\n            }\n     \
    \   }\n    }\n    return tuple(min_a, min_b);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmph3sbv45i.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429e0d]\\n??:? void tmph3sbv45i.__unittest_L34_C1()\
    \ [0x428e7d]\\n??:? void tmph3sbv45i.__modtest() [0x429878]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eaab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42d9ba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4322e1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432790]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43226d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42d991]\\n??:? runModuleUnitTests [0x42e881]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a25c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a1e3]\\n??:? _d_run_main [0x42a14e]\\n??:? main [0x42988b]\\\
    n??:? __libc_start_main [0xb0308554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float min_num1 = numbers[0];\n    float min_num2 = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i\
    \ + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                min_num1 = numbers[i];\n           \
    \     min_num2 = numbers[j];\n            }\n        }\n    }\n    return tuple(min_num1,\
    \ min_num2);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpn_s2iscb.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429fa9]\\n??:? void tmpn_s2iscb.__unittest_L33_C1()\
    \ [0x428f65]\\n??:? void tmpn_s2iscb.__modtest() [0x429960]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ecbb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dbca]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4324f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4329a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43247d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42dba1]\\n??:? runModuleUnitTests [0x42ea91]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a46c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a3f3]\\n??:? _d_run_main [0x42a35e]\\n??:? main [0x429973]\\\
    n??:? __libc_start_main [0xab85d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = abs(numbers[0] - numbers[1]);\n    float a = numbers[0];\n\
    \    float b = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n   \
    \ {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n       \
    \     if (abs(numbers[i] - numbers[j]) < min)\n            {\n               \
    \ min = abs(numbers[i] - numbers[j]);\n                a = numbers[i];\n     \
    \           b = numbers[j];\n            }\n        }\n    }\n    return tuple(a,\
    \ b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpzv3jfzn1.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429f2d]\\n??:? void tmpzv3jfzn1.__unittest_L31_C1()\
    \ [0x428f99]\\n??:? void tmpzv3jfzn1.__modtest() [0x429994]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ec3f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42db4e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432475]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432924]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432401]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42db25]\\n??:? runModuleUnitTests [0x42ea15]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a3f0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a377]\\n??:? _d_run_main [0x42a2e2]\\n??:? main [0x4299a7]\\\
    n??:? __libc_start_main [0x3b808554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float min_num1 = numbers[0];\n    float min_num2 = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                min_num1 = numbers[i];\n            \
    \    min_num2 = numbers[j];\n            }\n        }\n    }\n    return tuple(min_num1,\
    \ min_num2);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpq4b66x2s.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429fa9]\\n??:? void tmpq4b66x2s.__unittest_L33_C1()\
    \ [0x428f65]\\n??:? void tmpq4b66x2s.__modtest() [0x429960]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ecbb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dbca]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4324f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4329a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43247d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42dba1]\\n??:? runModuleUnitTests [0x42ea91]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a46c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a3f3]\\n??:? _d_run_main [0x42a35e]\\n??:? main [0x429973]\\\
    n??:? __libc_start_main [0x1a041554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = abs(numbers[0] - numbers[1]);\n    float a = numbers[0];\n\
    \    float b = numbers[1];\n    for (size_t i = 0; i < numbers.length; i++)\n\
    \    {\n        for (size_t j = i + 1; j < numbers.length; j++)\n        {\n \
    \           float diff = abs(numbers[i] - numbers[j]);\n            if (diff <\
    \ min)\n            {\n                min = diff;\n                a = numbers[i];\n\
    \                b = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(a, b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjdvu5mwg.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429ec5]\\n??:? void tmpjdvu5mwg.__unittest_L32_C1()\
    \ [0x428f31]\\n??:? void tmpjdvu5mwg.__modtest() [0x42992c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ebd7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dae6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43240d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4328bc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432399]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42dabd]\\n??:? runModuleUnitTests [0x42e9ad]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a388]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a30f]\\n??:? _d_run_main [0x42a27a]\\n??:? main [0x42993f]\\\
    n??:? __libc_start_main [0xad981554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    foreach(n;\
    \ numbers)\n    {\n        if(n < min)\n            min = n;\n        if(n > max)\n\
    \            max = n;\n    }\n    float min_diff = max - min;\n    float min_a\
    \ = min;\n    float min_b = max;\n    for(int i = 0; i < numbers.length; i++)\n\
    \    {\n        for(int j = i + 1; j < numbers.length; j++)\n        {\n     \
    \       float diff = abs(numbers[i] - numbers[j]);\n            if(diff < min_diff)\n\
    \            {\n                min_diff = diff;\n                min_a = numbers[i];\n\
    \                min_b = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(min_a, min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpy50m7jzz.d(45): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429ee5]\\n??:? void tmpy50m7jzz.__unittest_L41_C1()\
    \ [0x428f55]\\n??:? void tmpy50m7jzz.__modtest() [0x429950]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ebf7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42db06]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43242d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4328dc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4323b9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42dadd]\\n??:? runModuleUnitTests [0x42e9cd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a3a8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a32f]\\n??:? _d_run_main [0x42a29a]\\n??:? main [0x429963]\\\
    n??:? __libc_start_main [0x27051554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float min_a = numbers[0];\n    float min_b = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                min_a = numbers[i];\n               \
    \ min_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_nhtaii2.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429fa9]\\n??:? void tmp_nhtaii2.__unittest_L33_C1()\
    \ [0x428f65]\\n??:? void tmp_nhtaii2.__modtest() [0x429960]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ecbb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dbca]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4324f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4329a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43247d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42dba1]\\n??:? runModuleUnitTests [0x42ea91]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a46c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a3f3]\\n??:? _d_run_main [0x42a35e]\\n??:? main [0x429973]\\\
    n??:? __libc_start_main [0x4bd60554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min = abs(numbers[0] - numbers[1]);\n\
    \    int index = 0;\n    for (int i = 0; i < numbers.length - 1; i++) \n    {\n\
    \        float temp = abs(numbers[i] - numbers[i + 1]);\n        if (temp < min)\
    \ \n        {\n            min = temp;\n            index = i;\n        }\n  \
    \  }\n    return tuple(numbers[index], numbers[index + 1]);\n}\nunittest\n{\n\
    \    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpniynsk8f.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429f31]\\n??:? void tmpniynsk8f.__unittest_L28_C1()\
    \ [0x428ee9]\\n??:? void tmpniynsk8f.__modtest() [0x4298e4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ec43]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42db52]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432479]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432928]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432405]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42db29]\\n??:? runModuleUnitTests [0x42ea19]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a3f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a37b]\\n??:? _d_run_main [0x42a2e6]\\n??:? main [0x4298f7]\\\
    n??:? __libc_start_main [0x31b45554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float a = 0;\n    float b = 0;\n    foreach(i,\
    \ number; numbers)\n    {\n        foreach(j, number2; numbers)\n        {\n \
    \           if(i != j)\n            {\n                float diff = abs(number\
    \ - number2);\n                if(diff < min)\n                {\n           \
    \         min = diff;\n                    a = number;\n                    b\
    \ = number2;\n                }\n            }\n        }\n    }\n    return tuple(a,\
    \ b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmppnuddaz6.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429e0d]\\n??:? void tmppnuddaz6.__unittest_L35_C1()\
    \ [0x428e7d]\\n??:? void tmppnuddaz6.__modtest() [0x429878]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eaab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42d9ba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4322e1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432790]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43226d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42d991]\\n??:? runModuleUnitTests [0x42e881]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a25c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a1e3]\\n??:? _d_run_main [0x42a14e]\\n??:? main [0x42988b]\\\
    n??:? __libc_start_main [0xc0334554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.infinity;\n    float a = 0.0;\n    float b = 0.0;\n\
    \    foreach(i, x; numbers)\n    {\n        foreach(j, y; numbers)\n        {\n\
    \            if(i != j)\n            {\n                float diff = abs(x - y);\n\
    \                if(diff < min)\n                {\n                    min =\
    \ diff;\n                    a = x;\n                    b = y;\n            \
    \    }\n            }\n        }\n    }\n    return tuple(a, b);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpagy5v2ub.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429e0d]\\n??:? void tmpagy5v2ub.__unittest_L35_C1()\
    \ [0x428e7d]\\n??:? void tmpagy5v2ub.__modtest() [0x429878]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eaab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42d9ba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4322e1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432790]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43226d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42d991]\\n??:? runModuleUnitTests [0x42e881]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a25c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a1e3]\\n??:? _d_run_main [0x42a14e]\\n??:? main [0x42988b]\\\
    n??:? __libc_start_main [0xc7b9d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    Tuple!(float, float) result = tuple(numbers[0], numbers[1]);\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                result = tuple(numbers[i], numbers[j]);\n\
    \            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpfib2orgn.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42a151]\\n??:? void tmpfib2orgn.__unittest_L31_C1()\
    \ [0x429041]\\n??:? void tmpfib2orgn.__modtest() [0x429b04]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42f14f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42e05e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432985]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432e34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432911]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42e035]\\n??:? runModuleUnitTests [0x42ef25]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a6a0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a627]\\n??:? _d_run_main [0x42a592]\\n??:? main [0x429b17]\\\
    n??:? __libc_start_main [0xc1fda554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = numbers[1] - numbers[0];\n\
    \    float min_diff_a = numbers[0];\n    float min_diff_b = numbers[1];\n    for\
    \ (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j <\
    \ numbers.length; j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n\
    \            if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                min_diff_a = numbers[i];\n                min_diff_b = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(min_diff_a, min_diff_b);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpq7gl41av.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429f91]\\n??:? void tmpq7gl41av.__unittest_L33_C1()\
    \ [0x428f49]\\n??:? void tmpq7gl41av.__modtest() [0x429944]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eca3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dbb2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4324d9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432988]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432465]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42db89]\\n??:? runModuleUnitTests [0x42ea79]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a454]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a3db]\\n??:? _d_run_main [0x42a346]\\n??:? main [0x429957]\\\
    n??:? __libc_start_main [0xb4bcd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = 0.0;\n    float max = 0.0;\n    float diff = 0.0;\n   \
    \ float min_diff = 0.0;\n    float[] temp = numbers[0..$-1];\n    float[] temp2\
    \ = numbers[1..$];\n    foreach(i, j; zip(temp, temp2))\n    {\n        diff =\
    \ abs(i - j);\n        if(diff < min_diff)\n        {\n            min_diff =\
    \ diff;\n            min = i;\n            max = j;\n        }\n    }\n    return\
    \ tuple(min, max);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgcni9r86.d(20): Error: undefined identifier `zip`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgcni9r86.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    foreach(i, number; numbers)\n    {\n       \
    \ if(number < min)\n        {\n            min = number;\n        }\n        if(number\
    \ > max)\n        {\n            max = number;\n        }\n        if(i > 0)\n\
    \        {\n            float diff = abs(number - numbers[i-1]);\n           \
    \ if(diff < min_diff)\n            {\n                min_diff = diff;\n     \
    \       }\n        }\n    }\n    return tuple(min, max);\n}\nunittest\n{\n   \
    \ alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpm54633ep.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429e6d]\\n??:? void tmpm54633ep.__unittest_L38_C1()\
    \ [0x428edd]\\n??:? void tmpm54633ep.__modtest() [0x4298d8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eb7f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42da8e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4323b5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432864]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432341]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42da65]\\n??:? runModuleUnitTests [0x42e955]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a330]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a2b7]\\n??:? _d_run_main [0x42a222]\\n??:? main [0x4298eb]\\\
    n??:? __libc_start_main [0x9c411554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = abs(numbers[0] - numbers[1]);\n    float a = numbers[0];\n\
    \    float b = numbers[1];\n    for (int i = 0; i < numbers.length; i++) \n  \
    \  {\n        for (int j = 0; j < numbers.length; j++) \n        {\n         \
    \   if (i != j) \n            {\n                float diff = abs(numbers[i] -\
    \ numbers[j]);\n                if (diff < min) \n                {\n        \
    \            min = diff;\n                    a = numbers[i];\n              \
    \      b = numbers[j];\n                }\n            }\n        }\n    }\n \
    \   return tuple(a, b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpt7dfv801.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429ebd]\\n??:? void tmpt7dfv801.__unittest_L35_C1()\
    \ [0x428f2d]\\n??:? void tmpt7dfv801.__modtest() [0x429928]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ebcf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432405]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4328b4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432391]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42dab5]\\n??:? runModuleUnitTests [0x42e9a5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a380]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a307]\\n??:? _d_run_main [0x42a272]\\n??:? main [0x42993b]\\\
    n??:? __libc_start_main [0xdb775554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float min_diff_a = numbers[0];\n    float min_diff_b = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i\
    \ + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                min_diff_a = numbers[i];\n         \
    \       min_diff_b = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(min_diff_a, min_diff_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpbk16vx28.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429fa9]\\n??:? void tmpbk16vx28.__unittest_L33_C1()\
    \ [0x428f65]\\n??:? void tmpbk16vx28.__modtest() [0x429960]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ecbb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dbca]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4324f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4329a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43247d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42dba1]\\n??:? runModuleUnitTests [0x42ea91]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a46c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a3f3]\\n??:? _d_run_main [0x42a35e]\\n??:? main [0x429973]\\\
    n??:? __libc_start_main [0xb6fcb554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float minDiff = abs(numbers[0] -\
    \ numbers[1]);\n    float min1 = numbers[0];\n    float min2 = numbers[1];\n \
    \   for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < minDiff)\n            {\n           \
    \     minDiff = diff;\n                min1 = numbers[i];\n                min2\
    \ = numbers[j];\n            }\n        }\n    }\n    return tuple(min1, min2);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3bhqsdga.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429fa9]\\n??:? void tmp3bhqsdga.__unittest_L33_C1()\
    \ [0x428f65]\\n??:? void tmp3bhqsdga.__modtest() [0x429960]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ecbb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dbca]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4324f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4329a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43247d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42dba1]\\n??:? runModuleUnitTests [0x42ea91]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a46c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a3f3]\\n??:? _d_run_main [0x42a35e]\\n??:? main [0x429973]\\\
    n??:? __libc_start_main [0x93d5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float a = 0.0;\n    float b = 0.0;\n  \
    \  foreach(i, x; numbers)\n    {\n        foreach(j, y; numbers)\n        {\n\
    \            if(i != j)\n            {\n                float diff = abs(x - y);\n\
    \                if(diff < min)\n                {\n                    min =\
    \ diff;\n                    a = x;\n                    b = y;\n            \
    \    }\n            }\n        }\n    }\n    return tuple(a, b);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpkz3r6cct.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429e0d]\\n??:? void tmpkz3r6cct.__unittest_L35_C1()\
    \ [0x428e7d]\\n??:? void tmpkz3r6cct.__modtest() [0x429878]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eaab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42d9ba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4322e1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432790]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43226d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42d991]\\n??:? runModuleUnitTests [0x42e881]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a25c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a1e3]\\n??:? _d_run_main [0x42a14e]\\n??:? main [0x42988b]\\\
    n??:? __libc_start_main [0xff95f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float min_a = 0;\n    float min_b = 0;\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min)\n            {\n               \
    \ min = diff;\n                min_a = numbers[i];\n                min_b = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(min_a, min_b);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8fyhea51.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429e2d]\\n??:? void tmp8fyhea51.__unittest_L32_C1()\
    \ [0x428e99]\\n??:? void tmp8fyhea51.__modtest() [0x429894]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eb3f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42da4e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432375]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432824]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432301]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42da25]\\n??:? runModuleUnitTests [0x42e915]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a2f0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a277]\\n??:? _d_run_main [0x42a1e2]\\n??:? main [0x4298a7]\\\
    n??:? __libc_start_main [0xe274554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float[] result = new float[2];\n    foreach(i,\
    \ n; numbers)\n    {\n        foreach(j, m; numbers)\n        {\n            if(i\
    \ != j)\n            {\n                float diff = abs(n - m);\n           \
    \     if(diff < min)\n                {\n                    min = diff;\n   \
    \                 result[0] = n;\n                    result[1] = m;\n       \
    \         }\n            }\n        }\n    }\n    return tuple(result[0], result[1]);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8w0l4nha.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429f15]\\n??:? void tmp8w0l4nha.__unittest_L34_C1()\
    \ [0x428f81]\\n??:? void tmp8w0l4nha.__modtest() [0x42997c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ee1f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dd2e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43274d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432bfc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4326d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42dd05]\\n??:? runModuleUnitTests [0x42ebf5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a3d8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a35f]\\n??:? _d_run_main [0x42a2ca]\\n??:? main [0x42998f]\\\
    n??:? __libc_start_main [0x90287554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float min_a = numbers[0];\n    float min_b = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i\
    \ + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                min_a = numbers[i];\n              \
    \  min_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5yt0mbkw.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429fa9]\\n??:? void tmp5yt0mbkw.__unittest_L33_C1()\
    \ [0x428f65]\\n??:? void tmp5yt0mbkw.__modtest() [0x429960]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ecbb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dbca]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4324f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4329a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43247d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42dba1]\\n??:? runModuleUnitTests [0x42ea91]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a46c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a3f3]\\n??:? _d_run_main [0x42a35e]\\n??:? main [0x429973]\\\
    n??:? __libc_start_main [0x66198554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    float min_diff = numbers[1] - numbers[0];\n    foreach(i,\
    \ n; numbers) \n    {\n        if (n < min) \n        {\n            min = n;\n\
    \        }\n        if (n > max) \n        {\n            max = n;\n        }\n\
    \        if (i > 0) \n        {\n            float diff = abs(n - numbers[i -\
    \ 1]);\n            if (diff < min_diff) \n            {\n                min_diff\
    \ = diff;\n            }\n        }\n    }\n    return tuple(min, max);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpar3rami8.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429f61]\\n??:? void tmpar3rami8.__unittest_L39_C1()\
    \ [0x428f1d]\\n??:? void tmpar3rami8.__modtest() [0x429918]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ec73]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42db82]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4324a9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432958]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432435]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42db59]\\n??:? runModuleUnitTests [0x42ea49]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a424]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a3ab]\\n??:? _d_run_main [0x42a316]\\n??:? main [0x42992b]\\\
    n??:? __libc_start_main [0x5e692554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = abs(numbers[0] - numbers[1]);\n    float a = numbers[0];\n\
    \    float b = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n   \
    \ {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n       \
    \     if (abs(numbers[i] - numbers[j]) < min)\n            {\n               \
    \ min = abs(numbers[i] - numbers[j]);\n                a = numbers[i];\n     \
    \           b = numbers[j];\n            }\n        }\n    }\n    return tuple(a,\
    \ b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpv65k9ifr.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429f2d]\\n??:? void tmpv65k9ifr.__unittest_L31_C1()\
    \ [0x428f99]\\n??:? void tmpv65k9ifr.__modtest() [0x429994]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ec3f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42db4e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432475]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432924]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432401]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42db25]\\n??:? runModuleUnitTests [0x42ea15]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a3f0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a377]\\n??:? _d_run_main [0x42a2e2]\\n??:? main [0x4299a7]\\\
    n??:? __libc_start_main [0xdcbc0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length > 1);\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    float min_diff = numbers[1] - numbers[0];\n    for (int\
    \ i = 0; i < numbers.length; i++)\n    {\n        if (numbers[i] < min)\n    \
    \    {\n            min = numbers[i];\n        }\n        if (numbers[i] > max)\n\
    \        {\n            max = numbers[i];\n        }\n        if (i > 0)\n   \
    \     {\n            float diff = abs(numbers[i] - numbers[i-1]);\n          \
    \  if (diff < min_diff)\n            {\n                min_diff = diff;\n   \
    \         }\n        }\n    }\n    return tuple(min, max);\n}\nunittest\n{\n \
    \   alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpog6vei0r.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429fe9]\\n??:? void tmpog6vei0r.__unittest_L39_C1()\
    \ [0x428fa5]\\n??:? void tmpog6vei0r.__modtest() [0x4299a0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ecfb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dc0a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432531]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4329e0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4324bd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42dbe1]\\n??:? runModuleUnitTests [0x42ead1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a4ac]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a433]\\n??:? _d_run_main [0x42a39e]\\n??:? main [0x4299b3]\\\
    n??:? __libc_start_main [0x2ff30554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float first = 0.0;\n    float second =\
    \ 0.0;\n    foreach(i, x; numbers)\n    {\n        foreach(j, y; numbers)\n  \
    \      {\n            if(i != j)\n            {\n                float diff =\
    \ abs(x - y);\n                if(diff < min)\n                {\n           \
    \         min = diff;\n                    first = x;\n                    second\
    \ = y;\n                }\n            }\n        }\n    }\n    return tuple(first,\
    \ second);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n \
    \   assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n  \
    \  assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1qdjnbkt.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429e0d]\\n??:? void tmp1qdjnbkt.__unittest_L35_C1()\
    \ [0x428e7d]\\n??:? void tmp1qdjnbkt.__modtest() [0x429878]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eaab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42d9ba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4322e1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432790]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43226d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42d991]\\n??:? runModuleUnitTests [0x42e881]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a25c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a1e3]\\n??:? _d_run_main [0x42a14e]\\n??:? main [0x42988b]\\\
    n??:? __libc_start_main [0x68a58554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float[] result = new float[2];\n    for\
    \ (int i = 0; i < numbers.length - 1; i++) \n    {\n        for (int j = i + 1;\
    \ j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min) \n            {\n              \
    \  min = diff;\n                result[0] = numbers[i];\n                result[1]\
    \ = numbers[j];\n            }\n        }\n    }\n    return tuple(result[0],\
    \ result[1]);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpz8wbtfny.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429f3d]\\n??:? void tmpz8wbtfny.__unittest_L31_C1()\
    \ [0x428fa9]\\n??:? void tmpz8wbtfny.__modtest() [0x4299a4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ee47]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dd56]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432775]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432c24]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432701]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42dd2d]\\n??:? runModuleUnitTests [0x42ec1d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a400]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a387]\\n??:? _d_run_main [0x42a2f2]\\n??:? main [0x4299b7]\\\
    n??:? __libc_start_main [0xd888d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = abs(numbers[0] - numbers[1]);\n    float a = numbers[0];\n\
    \    float b = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n   \
    \ {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n       \
    \     if (abs(numbers[i] - numbers[j]) < min)\n            {\n               \
    \ min = abs(numbers[i] - numbers[j]);\n                a = numbers[i];\n     \
    \           b = numbers[j];\n            }\n        }\n    }\n    return tuple(a,\
    \ b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqzefs0z4.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429f2d]\\n??:? void tmpqzefs0z4.__unittest_L31_C1()\
    \ [0x428f99]\\n??:? void tmpqzefs0z4.__modtest() [0x429994]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ec3f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42db4e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432475]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432924]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432401]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42db25]\\n??:? runModuleUnitTests [0x42ea15]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a3f0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a377]\\n??:? _d_run_main [0x42a2e2]\\n??:? main [0x4299a7]\\\
    n??:? __libc_start_main [0x95254554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float min1 = float.max;\n    float min2\
    \ = float.max;\n    float min3 = float.max;\n    float min4 = float.max;\n   \
    \ float min5 = float.max;\n    float min6 = float.max;\n    float min7 = float.max;\n\
    \    float min8 = float.max;\n    float min9 = float.max;\n    float min10 = float.max;\n\
    \    float min11 = float.max;\n    float min12 = float.max;\n    float min13 =\
    \ float.max;\n    float min14 = float.max;\n    float min15 = float.max;\n   \
    \ float min16 = float.max;\n    float min17 = float.max;\n    float min18 = float.max;\n\
    \    float min19 = float.max;\n    float min20 = float.max;\n    float min21 =\
    \ float.max;\n    float min22 = float.max;\n    float min23 = float.max;\n   \
    \ float min24 = float.max;\n    float min25 = float.max;\n    float min26 = float.max;\n\
    \    float min27 = float.max;\n    float min28 = float.max;\n    float min29 =\
    \ float.max;\n    float min30 = float.max;\n    float min31 = float.max;\n   \
    \ float min32 = float.max;\n    float min33 = float.max;\n    float min34 = float.max;\n\
    \    float min35 = float.max;\n    float min36 = float.max;\n    float min37 =\
    \ float.max;\n    float min38 = float.max;\n    float min39 = float.max;\n   \
    \ float min40 = float.max;\n    float min41 = float.max;\n    float min42 = float.max;\n\
    \    float min43 = float.max;\n    float min44 = float.max;\n    float min45 =\
    \ float.max;\n    float min46 = float.max;\n    float min47 = float.max;\n   \
    \ float min48 = float.max;\n    float min49 = float.max;\n    float min50 = float.max;\n\
    \nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpust8gow9.d(66): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpust8gow9.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = numbers[1] - numbers[0];\n\
    \    float min_num1 = numbers[0];\n    float min_num2 = numbers[1];\n    for (int\
    \ i = 0; i < numbers.length; i++) \n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++) \n        {\n            float diff = abs(numbers[i] - numbers[j]);\n \
    \           if (diff < min_diff) \n            {\n                min_diff = diff;\n\
    \                min_num1 = numbers[i];\n                min_num2 = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(min_num1, min_num2);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0erze2mn.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429f91]\\n??:? void tmp0erze2mn.__unittest_L33_C1()\
    \ [0x428f49]\\n??:? void tmp0erze2mn.__modtest() [0x429944]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eca3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dbb2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4324d9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432988]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432465]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42db89]\\n??:? runModuleUnitTests [0x42ea79]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a454]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a3db]\\n??:? _d_run_main [0x42a346]\\n??:? main [0x429957]\\\
    n??:? __libc_start_main [0xf165e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float a = 0.0;\n    float b = 0.0;\n  \
    \  foreach(i, x; numbers)\n    {\n        foreach(j, y; numbers)\n        {\n\
    \            if(i != j)\n            {\n                float diff = abs(x - y);\n\
    \                if(diff < min)\n                {\n                    min =\
    \ diff;\n                    a = x;\n                    b = y;\n            \
    \    }\n            }\n        }\n    }\n    return tuple(a, b);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5p2d0_sk.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429e0d]\\n??:? void tmp5p2d0_sk.__unittest_L35_C1()\
    \ [0x428e7d]\\n??:? void tmp5p2d0_sk.__modtest() [0x429878]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eaab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42d9ba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4322e1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432790]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43226d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42d991]\\n??:? runModuleUnitTests [0x42e881]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a25c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a1e3]\\n??:? _d_run_main [0x42a14e]\\n??:? main [0x42988b]\\\
    n??:? __libc_start_main [0xcfc2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    float diff = numbers[1] - numbers[0];\n    for (int i\
    \ = 1; i < numbers.length; i++)\n    {\n        float temp = numbers[i] - numbers[i-1];\n\
    \        if (temp < diff)\n        {\n            diff = temp;\n            min\
    \ = numbers[i-1];\n            max = numbers[i];\n        }\n    }\n    return\
    \ tuple(min, max);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_enh8hhx.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429ee1]\\n??:? void tmp_enh8hhx.__unittest_L30_C1()\
    \ [0x428ea9]\\n??:? void tmp_enh8hhx.__modtest() [0x429898]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ebcf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432405]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4328b4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432391]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42dab5]\\n??:? runModuleUnitTests [0x42e9a5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a3a4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a32b]\\n??:? _d_run_main [0x42a296]\\n??:? main [0x4298ab]\\\
    n??:? __libc_start_main [0xac42b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min_diff = numbers[1] - numbers[0];\n    float min_num1 = numbers[0];\n\
    \    float min_num2 = numbers[1];\n    foreach(i, num1; numbers[0..$-1])\n   \
    \ {\n        foreach(j, num2; numbers[i+1..$])\n        {\n            float diff\
    \ = abs(num1 - num2);\n            if(diff < min_diff)\n            {\n      \
    \          min_diff = diff;\n                min_num1 = num1;\n              \
    \  min_num2 = num2;\n            }\n        }\n    }\n    return tuple(min_num1,\
    \ min_num2);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpeh0yjmid.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429e9d]\\n??:? void tmpeh0yjmid.__unittest_L32_C1()\
    \ [0x428f09]\\n??:? void tmpeh0yjmid.__modtest() [0x429904]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ebaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dabe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4323e5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432894]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432371]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42da95]\\n??:? runModuleUnitTests [0x42e985]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a360]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a2e7]\\n??:? _d_run_main [0x42a252]\\n??:? main [0x429917]\\\
    n??:? __libc_start_main [0xf56e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float[] result = new float[2];\n    for\
    \ (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i + 1; j\
    \ < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min) \n            {\n              \
    \  min = diff;\n                result[0] = numbers[i];\n                result[1]\
    \ = numbers[j];\n            }\n        }\n    }\n    return tuple(result[0],\
    \ result[1]);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmph156gozt.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429f35]\\n??:? void tmph156gozt.__unittest_L31_C1()\
    \ [0x428fa1]\\n??:? void tmph156gozt.__modtest() [0x42999c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ee3f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dd4e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43276d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432c1c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4326f9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42dd25]\\n??:? runModuleUnitTests [0x42ec15]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a3f8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a37f]\\n??:? _d_run_main [0x42a2ea]\\n??:? main [0x4299af]\\\
    n??:? __libc_start_main [0x8dfd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float min_num1 = numbers[0];\n    float min_num2 = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i\
    \ + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                min_num1 = numbers[i];\n           \
    \     min_num2 = numbers[j];\n            }\n        }\n    }\n    return tuple(min_num1,\
    \ min_num2);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_yjnsgkm.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429fa9]\\n??:? void tmp_yjnsgkm.__unittest_L33_C1()\
    \ [0x428f65]\\n??:? void tmp_yjnsgkm.__modtest() [0x429960]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ecbb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dbca]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4324f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4329a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43247d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42dba1]\\n??:? runModuleUnitTests [0x42ea91]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a46c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a3f3]\\n??:? _d_run_main [0x42a35e]\\n??:? main [0x429973]\\\
    n??:? __libc_start_main [0xf1052554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = abs(numbers[0] - numbers[1]);\n    float a = numbers[0];\n\
    \    float b = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n   \
    \ {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n       \
    \     if (abs(numbers[i] - numbers[j]) < min)\n            {\n               \
    \ min = abs(numbers[i] - numbers[j]);\n                a = numbers[i];\n     \
    \           b = numbers[j];\n            }\n        }\n    }\n    return tuple(a,\
    \ b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpeumnth18.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429f2d]\\n??:? void tmpeumnth18.__unittest_L31_C1()\
    \ [0x428f99]\\n??:? void tmpeumnth18.__modtest() [0x429994]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ec3f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42db4e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432475]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432924]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432401]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42db25]\\n??:? runModuleUnitTests [0x42ea15]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a3f0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a377]\\n??:? _d_run_main [0x42a2e2]\\n??:? main [0x4299a7]\\\
    n??:? __libc_start_main [0x34bfd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float first = numbers[0];\n    float second = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                first = numbers[i];\n               \
    \ second = numbers[j];\n            }\n        }\n    }\n    return tuple(first,\
    \ second);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n \
    \   assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n  \
    \  assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpierw6r4i.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429fa9]\\n??:? void tmpierw6r4i.__unittest_L33_C1()\
    \ [0x428f65]\\n??:? void tmpierw6r4i.__modtest() [0x429960]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ecbb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dbca]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4324f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4329a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43247d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42dba1]\\n??:? runModuleUnitTests [0x42ea91]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a46c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a3f3]\\n??:? _d_run_main [0x42a35e]\\n??:? main [0x429973]\\\
    n??:? __libc_start_main [0x7f037554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float minDiff = abs(numbers[0] -\
    \ numbers[1]);\n    float min1 = numbers[0];\n    float min2 = numbers[1];\n \
    \   for (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < minDiff) \n            {\n          \
    \      minDiff = diff;\n                min1 = numbers[i];\n                min2\
    \ = numbers[j];\n            }\n        }\n    }\n    return tuple(min1, min2);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp25y9k3i5.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429fa9]\\n??:? void tmp25y9k3i5.__unittest_L33_C1()\
    \ [0x428f65]\\n??:? void tmp25y9k3i5.__modtest() [0x429960]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ecbb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dbca]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4324f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4329a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43247d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42dba1]\\n??:? runModuleUnitTests [0x42ea91]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a46c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a3f3]\\n??:? _d_run_main [0x42a35e]\\n??:? main [0x429973]\\\
    n??:? __libc_start_main [0xdecb9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = numbers[1] - numbers[0];\n\
    \    float min_num1 = numbers[0];\n    float min_num2 = numbers[1];\n    for (int\
    \ i = 0; i < numbers.length - 1; i++)\n    {\n        float diff = numbers[i +\
    \ 1] - numbers[i];\n        if (diff < min_diff)\n        {\n            min_diff\
    \ = diff;\n            min_num1 = numbers[i];\n            min_num2 = numbers[i\
    \ + 1];\n        }\n    }\n    return tuple(min_num1, min_num2);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpama4_b_o.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429ee9]\\n??:? void tmpama4_b_o.__unittest_L30_C1()\
    \ [0x428eb1]\\n??:? void tmpama4_b_o.__modtest() [0x4298a0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ebd7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dae6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43240d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4328bc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432399]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42dabd]\\n??:? runModuleUnitTests [0x42e9ad]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a3ac]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a333]\\n??:? _d_run_main [0x42a29e]\\n??:? main [0x4298b3]\\\
    n??:? __libc_start_main [0xdb76b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    for (int i = 1; i < numbers.length; i++)\n \
    \   {\n        float diff = numbers[i] - numbers[i-1];\n        if (diff < min_diff)\n\
    \        {\n            min_diff = diff;\n            min = numbers[i-1];\n  \
    \          max = numbers[i];\n        }\n    }\n    return tuple(min, max);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1204p0_7.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429ded]\\n??:? void tmp1204p0_7.__unittest_L29_C1()\
    \ [0x428e69]\\n??:? void tmp1204p0_7.__modtest() [0x429858]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eadb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42d9ea]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432311]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4327c0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43229d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42d9c1]\\n??:? runModuleUnitTests [0x42e8b1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a2b0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a237]\\n??:? _d_run_main [0x42a1a2]\\n??:? main [0x42986b]\\\
    n??:? __libc_start_main [0x98f5e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min_diff = float.max;\n    float min_a = 0.0;\n    float min_b\
    \ = 0.0;\n    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int\
    \ j = i + 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                min_a = numbers[i];\n               \
    \ min_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8gr9s27j.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429e2d]\\n??:? void tmp8gr9s27j.__unittest_L32_C1()\
    \ [0x428e99]\\n??:? void tmp8gr9s27j.__modtest() [0x429894]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eb3f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42da4e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432375]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432824]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432301]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42da25]\\n??:? runModuleUnitTests [0x42e915]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a2f0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a277]\\n??:? _d_run_main [0x42a1e2]\\n??:? main [0x4298a7]\\\
    n??:? __libc_start_main [0x36c44554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float min_num1 = numbers[0];\n    float min_num2 = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i\
    \ + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                min_num1 = numbers[i];\n           \
    \     min_num2 = numbers[j];\n            }\n        }\n    }\n    return tuple(min_num1,\
    \ min_num2);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpnci8edxt.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429fa9]\\n??:? void tmpnci8edxt.__unittest_L33_C1()\
    \ [0x428f65]\\n??:? void tmpnci8edxt.__modtest() [0x429960]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ecbb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dbca]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4324f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4329a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43247d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42dba1]\\n??:? runModuleUnitTests [0x42ea91]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a46c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a3f3]\\n??:? _d_run_main [0x42a35e]\\n??:? main [0x429973]\\\
    n??:? __libc_start_main [0xfe854554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min_diff = numbers[1] - numbers[0];\n    float min_num1 = numbers[0];\n\
    \    float min_num2 = numbers[1];\n    foreach(i, num1; numbers[0..$-1])\n   \
    \ {\n        foreach(j, num2; numbers[i+1..$])\n        {\n            float diff\
    \ = abs(num1 - num2);\n            if(diff < min_diff)\n            {\n      \
    \          min_diff = diff;\n                min_num1 = num1;\n              \
    \  min_num2 = num2;\n            }\n        }\n    }\n    return tuple(min_num1,\
    \ min_num2);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp15q44sp7.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429e9d]\\n??:? void tmp15q44sp7.__unittest_L32_C1()\
    \ [0x428f09]\\n??:? void tmp15q44sp7.__modtest() [0x429904]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ebaf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dabe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4323e5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432894]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432371]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42da95]\\n??:? runModuleUnitTests [0x42e985]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a360]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a2e7]\\n??:? _d_run_main [0x42a252]\\n??:? main [0x429917]\\\
    n??:? __libc_start_main [0x15802554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float min_diff_a = numbers[0];\n    float min_diff_b = numbers[1];\n\
    \    for (size_t i = 0; i < numbers.length; i++)\n    {\n        for (size_t j\
    \ = i + 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                min_diff_a = numbers[i];\n          \
    \      min_diff_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_diff_a,\
    \ min_diff_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpgt7efqjo.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429fb9]\\n??:? void tmpgt7efqjo.__unittest_L33_C1()\
    \ [0x428f75]\\n??:? void tmpgt7efqjo.__modtest() [0x429970]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eccb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dbda]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432501]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4329b0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43248d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42dbb1]\\n??:? runModuleUnitTests [0x42eaa1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a47c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a403]\\n??:? _d_run_main [0x42a36e]\\n??:? main [0x429983]\\\
    n??:? __libc_start_main [0x786c9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    float max_diff = numbers[1] - numbers[0];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = numbers[j]\
    \ - numbers[i];\n            if (diff < min_diff)\n            {\n           \
    \     min_diff = diff;\n                min = numbers[i];\n                max\
    \ = numbers[j];\n            }\n            if (diff > max_diff)\n           \
    \ {\n                max_diff = diff;\n                min = numbers[i];\n   \
    \             max = numbers[j];\n            }\n        }\n    }\n    return tuple(min,\
    \ max);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpvth4118k.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429eb5]\\n??:? void tmpvth4118k.__unittest_L39_C1()\
    \ [0x428f31]\\n??:? void tmpvth4118k.__modtest() [0x429920]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eba3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dab2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4323d9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432888]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432365]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42da89]\\n??:? runModuleUnitTests [0x42e979]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a378]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a2ff]\\n??:? _d_run_main [0x42a26a]\\n??:? main [0x429933]\\\
    n??:? __libc_start_main [0x6cc13554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min_diff = 1e10;\n    float min_diff_a = 0;\n    float min_diff_b\
    \ = 0;\n    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int\
    \ j = i + 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                min_diff_a = numbers[i];\n          \
    \      min_diff_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_diff_a,\
    \ min_diff_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp9uexl64e.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429e2d]\\n??:? void tmp9uexl64e.__unittest_L32_C1()\
    \ [0x428e99]\\n??:? void tmp9uexl64e.__modtest() [0x429894]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eb3f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42da4e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432375]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432824]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432301]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42da25]\\n??:? runModuleUnitTests [0x42e915]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a2f0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a277]\\n??:? _d_run_main [0x42a1e2]\\n??:? main [0x4298a7]\\\
    n??:? __libc_start_main [0x2e020554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = abs(numbers[0] - numbers[1]);\n    float a = numbers[0];\n\
    \    float b = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n   \
    \ {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n       \
    \     if (abs(numbers[i] - numbers[j]) < min)\n            {\n               \
    \ min = abs(numbers[i] - numbers[j]);\n                a = numbers[i];\n     \
    \           b = numbers[j];\n            }\n        }\n    }\n    return tuple(a,\
    \ b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp2ii5_mg9.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429f2d]\\n??:? void tmp2ii5_mg9.__unittest_L31_C1()\
    \ [0x428f99]\\n??:? void tmp2ii5_mg9.__modtest() [0x429994]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ec3f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42db4e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432475]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432924]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432401]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42db25]\\n??:? runModuleUnitTests [0x42ea15]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a3f0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a377]\\n??:? _d_run_main [0x42a2e2]\\n??:? main [0x4299a7]\\\
    n??:? __libc_start_main [0xf37d2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float[] result = new float[2];\n    for\
    \ (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j <\
    \ numbers.length; j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n\
    \            if (diff < min)\n            {\n                min = diff;\n   \
    \             result[0] = numbers[i];\n                result[1] = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(result[0], result[1]);\n}\n\
    unittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8d4mbp89.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429f35]\\n??:? void tmp8d4mbp89.__unittest_L31_C1()\
    \ [0x428fa1]\\n??:? void tmp8d4mbp89.__modtest() [0x42999c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ee3f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dd4e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43276d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432c1c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4326f9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42dd25]\\n??:? runModuleUnitTests [0x42ec15]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a3f8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a37f]\\n??:? _d_run_main [0x42a2ea]\\n??:? main [0x4299af]\\\
    n??:? __libc_start_main [0xb3c4e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float minDiff = abs(numbers[0] -\
    \ numbers[1]);\n    float minNum1 = numbers[0];\n    float minNum2 = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < minDiff)\n            {\n           \
    \     minDiff = diff;\n                minNum1 = numbers[i];\n               \
    \ minNum2 = numbers[j];\n            }\n        }\n    }\n    return tuple(minNum1,\
    \ minNum2);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpgxv0pev7.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429fa9]\\n??:? void tmpgxv0pev7.__unittest_L33_C1()\
    \ [0x428f65]\\n??:? void tmpgxv0pev7.__modtest() [0x429960]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ecbb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dbca]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4324f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4329a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43247d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42dba1]\\n??:? runModuleUnitTests [0x42ea91]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a46c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a3f3]\\n??:? _d_run_main [0x42a35e]\\n??:? main [0x429973]\\\
    n??:? __libc_start_main [0x16a62554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    for (int i = 1; i < numbers.length; i++)\n \
    \   {\n        float diff = numbers[i] - numbers[i-1];\n        if (diff < min_diff)\n\
    \        {\n            min_diff = diff;\n            min = numbers[i-1];\n  \
    \          max = numbers[i];\n        }\n    }\n    return tuple(min, max);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpzgcb705h.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429ded]\\n??:? void tmpzgcb705h.__unittest_L29_C1()\
    \ [0x428e69]\\n??:? void tmpzgcb705h.__modtest() [0x429858]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eadb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42d9ea]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432311]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4327c0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43229d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42d9c1]\\n??:? runModuleUnitTests [0x42e8b1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a2b0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a237]\\n??:? _d_run_main [0x42a1a2]\\n??:? main [0x42986b]\\\
    n??:? __libc_start_main [0x8e99f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    for (int i = 1; i < numbers.length; i++)\n \
    \   {\n        float diff = numbers[i] - numbers[i-1];\n        if (diff < min_diff)\n\
    \        {\n            min_diff = diff;\n            min = numbers[i-1];\n  \
    \          max = numbers[i];\n        }\n    }\n    return tuple(min, max);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmptklx08lf.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429ded]\\n??:? void tmptklx08lf.__unittest_L29_C1()\
    \ [0x428e69]\\n??:? void tmptklx08lf.__modtest() [0x429858]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eadb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42d9ea]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432311]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4327c0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43229d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42d9c1]\\n??:? runModuleUnitTests [0x42e8b1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a2b0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a237]\\n??:? _d_run_main [0x42a1a2]\\n??:? main [0x42986b]\\\
    n??:? __libc_start_main [0xb29c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float[] sorted = numbers.dup;\n    sorted.sort;\n    float min = sorted[1]\
    \ - sorted[0];\n    float a = sorted[0];\n    float b = sorted[1];\n    for (int\
    \ i = 1; i < sorted.length - 1; i++) \n    {\n        float diff = sorted[i +\
    \ 1] - sorted[i];\n        if (diff < min) \n        {\n            min = diff;\n\
    \            a = sorted[i];\n            b = sorted[i + 1];\n        }\n    }\n\
    \    return tuple(a, b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2_zq7_85.d(15): Error: no property `sort` for type `float[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2_zq7_85.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float num1 = 0;\n    float num2 = 0;\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min)\n            {\n               \
    \ min = diff;\n                num1 = numbers[i];\n                num2 = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(num1, num2);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3t21wglv.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429e2d]\\n??:? void tmp3t21wglv.__unittest_L32_C1()\
    \ [0x428e99]\\n??:? void tmp3t21wglv.__modtest() [0x429894]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eb3f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42da4e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432375]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432824]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432301]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42da25]\\n??:? runModuleUnitTests [0x42e915]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a2f0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a277]\\n??:? _d_run_main [0x42a1e2]\\n??:? main [0x4298a7]\\\
    n??:? __libc_start_main [0xf68f4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min = numbers[0] - numbers[1];\n\
    \    float min_1 = numbers[0];\n    float min_2 = numbers[1];\n    for (int i\
    \ = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            if (abs(numbers[i] - numbers[j]) < min)\n     \
    \       {\n                min = abs(numbers[i] - numbers[j]);\n             \
    \   min_1 = numbers[i];\n                min_2 = numbers[j];\n            }\n\
    \        }\n    }\n    return tuple(min_1, min_2);\n}\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmfudtmr5.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429ff9]\\n??:? void tmpmfudtmr5.__unittest_L32_C1()\
    \ [0x428fb1]\\n??:? void tmpmfudtmr5.__modtest() [0x4299ac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ed0b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dc1a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432541]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4329f0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4324cd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42dbf1]\\n??:? runModuleUnitTests [0x42eae1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a4bc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a443]\\n??:? _d_run_main [0x42a3ae]\\n??:? main [0x4299bf]\\\
    n??:? __libc_start_main [0xa8ff554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float a = 0.0;\n    float b = 0.0;\n  \
    \  foreach(i, number; numbers)\n    {\n        foreach(j, number2; numbers)\n\
    \        {\n            if(i != j)\n            {\n                float diff\
    \ = abs(number - number2);\n                if(diff < min)\n                {\n\
    \                    min = diff;\n                    a = number;\n          \
    \          b = number2;\n                }\n            }\n        }\n    }\n\
    \    return tuple(a, b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp18mrahnd.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429e0d]\\n??:? void tmp18mrahnd.__unittest_L35_C1()\
    \ [0x428e7d]\\n??:? void tmp18mrahnd.__modtest() [0x429878]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eaab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42d9ba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4322e1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432790]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43226d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42d991]\\n??:? runModuleUnitTests [0x42e881]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a25c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a1e3]\\n??:? _d_run_main [0x42a14e]\\n??:? main [0x42988b]\\\
    n??:? __libc_start_main [0xacb91554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float a = 0.0;\n    float b = 0.0;\n  \
    \  foreach(i, number; numbers)\n    {\n        if(i == 0)\n            continue;\n\
    \        float diff = abs(number - numbers[i-1]);\n        if(diff < min)\n  \
    \      {\n            min = diff;\n            a = numbers[i-1];\n           \
    \ b = number;\n        }\n    }\n    return tuple(a, b);\n}\nunittest\n{\n   \
    \ alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpnzhy5t_0.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429e15]\\n??:? void tmpnzhy5t_0.__unittest_L31_C1()\
    \ [0x428e85]\\n??:? void tmpnzhy5t_0.__modtest() [0x429880]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eb27]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42da36]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43235d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43280c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4322e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42da0d]\\n??:? runModuleUnitTests [0x42e8fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a2d8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a25f]\\n??:? _d_run_main [0x42a1ca]\\n??:? main [0x429893]\\\
    n??:? __libc_start_main [0xc7a23554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = abs(numbers[0] - numbers[1]);\n    float a = numbers[0];\n\
    \    float b = numbers[1];\n    foreach(i, number; numbers)\n    {\n        foreach(j,\
    \ other; numbers)\n        {\n            if(i == j)\n                continue;\n\
    \            float diff = abs(number - other);\n            if(diff < min)\n \
    \           {\n                min = diff;\n                a = number;\n    \
    \            b = other;\n            }\n        }\n    }\n    return tuple(a,\
    \ b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1ch25c0y.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429e8d]\\n??:? void tmp1ch25c0y.__unittest_L34_C1()\
    \ [0x428ef9]\\n??:? void tmp1ch25c0y.__modtest() [0x4298f4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eb9f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42daae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4323d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432884]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432361]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42da85]\\n??:? runModuleUnitTests [0x42e975]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a350]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a2d7]\\n??:? _d_run_main [0x42a242]\\n??:? main [0x429907]\\\
    n??:? __libc_start_main [0x351e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    for (int i = 1; i < numbers.length; i++)\n \
    \   {\n        float diff = numbers[i] - numbers[i-1];\n        if (diff < min_diff)\n\
    \        {\n            min_diff = diff;\n            min = numbers[i-1];\n  \
    \          max = numbers[i];\n        }\n    }\n    return tuple(min, max);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp31p97n_8.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429ded]\\n??:? void tmp31p97n_8.__unittest_L29_C1()\
    \ [0x428e69]\\n??:? void tmp31p97n_8.__modtest() [0x429858]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eadb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42d9ea]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432311]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4327c0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43229d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42d9c1]\\n??:? runModuleUnitTests [0x42e8b1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a2b0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a237]\\n??:? _d_run_main [0x42a1a2]\\n??:? main [0x42986b]\\\
    n??:? __libc_start_main [0x823ac554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = numbers[1] - numbers[0];\n\
    \    int min_index = 0;\n    for (int i = 1; i < numbers.length - 1; i++) \n \
    \   {\n        float diff = numbers[i + 1] - numbers[i];\n        if (diff < min_diff)\
    \ \n        {\n            min_diff = diff;\n            min_index = i;\n    \
    \    }\n    }\n    return tuple(numbers[min_index], numbers[min_index + 1]);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpc1wd1ham.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429ea1]\\n??:? void tmpc1wd1ham.__unittest_L28_C1()\
    \ [0x428e65]\\n??:? void tmpc1wd1ham.__modtest() [0x429854]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eb8f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42da9e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4323c5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432874]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432351]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42da75]\\n??:? runModuleUnitTests [0x42e965]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a364]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a2eb]\\n??:? _d_run_main [0x42a256]\\n??:? main [0x429867]\\\
    n??:? __libc_start_main [0x66e74554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float a = numbers[0];\n    float b = numbers[1];\n    for\
    \ (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j <\
    \ numbers.length; j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n\
    \            if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                a = numbers[i];\n                b = numbers[j];\n          \
    \  }\n        }\n    }\n    return tuple(a, b);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_iggllow.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429fa9]\\n??:? void tmp_iggllow.__unittest_L33_C1()\
    \ [0x428f65]\\n??:? void tmp_iggllow.__modtest() [0x429960]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ecbb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dbca]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4324f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4329a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43247d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42dba1]\\n??:? runModuleUnitTests [0x42ea91]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a46c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a3f3]\\n??:? _d_run_main [0x42a35e]\\n??:? main [0x429973]\\\
    n??:? __libc_start_main [0xab55d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    float max_diff = numbers[1] - numbers[0];\n\
    \    foreach(i, number; numbers)\n    {\n        if(i == 0) continue;\n      \
    \  float diff = number - numbers[i-1];\n        if(diff < min_diff)\n        {\n\
    \            min_diff = diff;\n            min = numbers[i-1];\n            max\
    \ = number;\n        }\n        if(diff > max_diff)\n        {\n            max_diff\
    \ = diff;\n            min = numbers[i-1];\n            max = number;\n      \
    \  }\n    }\n    return tuple(min, max);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp13bql63c.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429e85]\\n??:? void tmp13bql63c.__unittest_L37_C1()\
    \ [0x428efd]\\n??:? void tmp13bql63c.__modtest() [0x4298ec]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eb73]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42da82]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4323a9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432858]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432335]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42da59]\\n??:? runModuleUnitTests [0x42e949]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a348]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a2cf]\\n??:? _d_run_main [0x42a23a]\\n??:? main [0x4298ff]\\\
    n??:? __libc_start_main [0x860dc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    for (int i = 1; i < numbers.length; i++)\n \
    \   {\n        float diff = numbers[i] - numbers[i-1];\n        if (diff < min_diff)\n\
    \        {\n            min_diff = diff;\n            min = numbers[i-1];\n  \
    \          max = numbers[i];\n        }\n    }\n    return tuple(min, max);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpas9_fqnu.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429ded]\\n??:? void tmpas9_fqnu.__unittest_L29_C1()\
    \ [0x428e69]\\n??:? void tmpas9_fqnu.__modtest() [0x429858]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eadb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42d9ea]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432311]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4327c0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43229d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42d9c1]\\n??:? runModuleUnitTests [0x42e8b1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a2b0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a237]\\n??:? _d_run_main [0x42a1a2]\\n??:? main [0x42986b]\\\
    n??:? __libc_start_main [0x24a4e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min_diff = float.infinity;\n    float min_a = 0.0;\n    float\
    \ min_b = 0.0;\n    foreach(i, a; numbers)\n    {\n        foreach(j, b; numbers)\n\
    \        {\n            if (i != j)\n            {\n                float diff\
    \ = abs(a - b);\n                if (diff < min_diff)\n                {\n   \
    \                 min_diff = diff;\n                    min_a = a;\n         \
    \           min_b = b;\n                }\n            }\n        }\n    }\n \
    \   return tuple(min_a, min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpvolz244o.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429e0d]\\n??:? void tmpvolz244o.__unittest_L35_C1()\
    \ [0x428e7d]\\n??:? void tmpvolz244o.__modtest() [0x429878]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eaab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42d9ba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4322e1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432790]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43226d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42d991]\\n??:? runModuleUnitTests [0x42e881]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a25c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a1e3]\\n??:? _d_run_main [0x42a14e]\\n??:? main [0x42988b]\\\
    n??:? __libc_start_main [0xc1edc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    for (int i = 1; i < numbers.length; i++) \n\
    \    {\n        float diff = numbers[i] - numbers[i - 1];\n        if (diff <\
    \ min_diff) \n        {\n            min_diff = diff;\n            min = numbers[i\
    \ - 1];\n            max = numbers[i];\n        }\n    }\n    return tuple(min,\
    \ max);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp9opr115p.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429ded]\\n??:? void tmp9opr115p.__unittest_L29_C1()\
    \ [0x428e69]\\n??:? void tmp9opr115p.__modtest() [0x429858]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eadb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42d9ea]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432311]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4327c0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43229d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42d9c1]\\n??:? runModuleUnitTests [0x42e8b1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a2b0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a237]\\n??:? _d_run_main [0x42a1a2]\\n??:? main [0x42986b]\\\
    n??:? __libc_start_main [0x9757b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    for (int i = 1; i < numbers.length; i++)\n \
    \   {\n        float diff = numbers[i] - numbers[i-1];\n        if (diff < min_diff)\n\
    \        {\n            min_diff = diff;\n            min = numbers[i-1];\n  \
    \          max = numbers[i];\n        }\n    }\n    return tuple(min, max);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprm__l_p0.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429ded]\\n??:? void tmprm__l_p0.__unittest_L29_C1()\
    \ [0x428e69]\\n??:? void tmprm__l_p0.__modtest() [0x429858]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eadb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42d9ea]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432311]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4327c0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43229d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42d9c1]\\n??:? runModuleUnitTests [0x42e8b1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a2b0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a237]\\n??:? _d_run_main [0x42a1a2]\\n??:? main [0x42986b]\\\
    n??:? __libc_start_main [0x98d88554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min_diff = numbers[1] - numbers[0];\n    float min_diff_a = numbers[0];\n\
    \    float min_diff_b = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\
    \ \n    {\n        for (int j = i + 1; j < numbers.length; j++) \n        {\n\
    \            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min_diff) \n            {\n                min_diff = diff;\n            \
    \    min_diff_a = numbers[i];\n                min_diff_b = numbers[j];\n    \
    \        }\n        }\n    }\n    return tuple(min_diff_a, min_diff_b);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_flznqnz.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429e95]\\n??:? void tmp_flznqnz.__unittest_L32_C1()\
    \ [0x428f01]\\n??:? void tmp_flznqnz.__modtest() [0x4298fc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eba7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dab6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4323dd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43288c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432369]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42da8d]\\n??:? runModuleUnitTests [0x42e97d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a358]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a2df]\\n??:? _d_run_main [0x42a24a]\\n??:? main [0x42990f]\\\
    n??:? __libc_start_main [0x8dc3a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float diff\
    \ = numbers[0] - numbers[1];\n    for (int i = 0; i < numbers.length; i++) \n\
    \    {\n        for (int j = i + 1; j < numbers.length; j++) \n        {\n   \
    \         float temp = numbers[i] - numbers[j];\n            if (temp < 0) \n\
    \            {\n                temp = -temp;\n            }\n            if (temp\
    \ < diff) \n            {\n                diff = temp;\n                min =\
    \ numbers[i];\n                max = numbers[j];\n            }\n        }\n \
    \   }\n    return tuple(min, max);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmppdaivcbb.d(40): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429e2d]\\n??:? void tmppdaivcbb.__unittest_L36_C1()\
    \ [0x428ea5]\\n??:? void tmppdaivcbb.__modtest() [0x429894]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eb1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42da2a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432351]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432800]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4322dd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42da01]\\n??:? runModuleUnitTests [0x42e8f1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a2f0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a277]\\n??:? _d_run_main [0x42a1e2]\\n??:? main [0x4298a7]\\\
    n??:? __libc_start_main [0x43939554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float smallest = numbers[0];\n    float largest = numbers[0];\n   \
    \ float smallest_diff = numbers[1] - numbers[0];\n    float largest_diff = numbers[1]\
    \ - numbers[0];\n    for (int i = 1; i < numbers.length; i++)\n    {\n       \
    \ if (numbers[i] < smallest)\n        {\n            smallest = numbers[i];\n\
    \        }\n        if (numbers[i] > largest)\n        {\n            largest\
    \ = numbers[i];\n        }\n        if (i > 1)\n        {\n            float diff\
    \ = numbers[i] - numbers[i-1];\n            if (diff < smallest_diff)\n      \
    \      {\n                smallest_diff = diff;\n            }\n            if\
    \ (diff > largest_diff)\n            {\n                largest_diff = diff;\n\
    \            }\n        }\n    }\n    return tuple(smallest, largest);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpcbiq3jak.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429ebd]\\n??:? void tmpcbiq3jak.__unittest_L43_C1()\
    \ [0x428f35]\\n??:? void tmpcbiq3jak.__modtest() [0x429924]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ebab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42daba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4323e1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432890]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43236d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42da91]\\n??:? runModuleUnitTests [0x42e981]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a380]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a307]\\n??:? _d_run_main [0x42a272]\\n??:? main [0x429937]\\\
    n??:? __libc_start_main [0xe765c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    float min_diff = abs(numbers[0] - numbers[1]);\n    for\
    \ (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j <\
    \ numbers.length; j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n\
    \            if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                min = min(numbers[i], numbers[j]);\n                max = max(numbers[i],\
    \ numbers[j]);\n            }\n        }\n    }\n    return tuple(min, max);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjkaozsc5.d(26): Error: function expected before `()`, not `min`\
    \ of type `float`\\n/tmp/tmpjkaozsc5.d(27): Error: function expected before `()`,\
    \ not `max` of type `float`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpjkaozsc5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min_diff = float.max;\n    float min_a = 0.0;\n    float min_b\
    \ = 0.0;\n    foreach(i, a; numbers)\n    {\n        foreach(j, b; numbers)\n\
    \        {\n            if (i != j)\n            {\n                float diff\
    \ = abs(a - b);\n                if (diff < min_diff)\n                {\n   \
    \                 min_diff = diff;\n                    min_a = a;\n         \
    \           min_b = b;\n                }\n            }\n        }\n    }\n \
    \   return tuple(min_a, min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpben0sxw7.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429e0d]\\n??:? void tmpben0sxw7.__unittest_L35_C1()\
    \ [0x428e7d]\\n??:? void tmpben0sxw7.__modtest() [0x429878]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eaab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42d9ba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4322e1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432790]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43226d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42d991]\\n??:? runModuleUnitTests [0x42e881]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a25c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a1e3]\\n??:? _d_run_main [0x42a14e]\\n??:? main [0x42988b]\\\
    n??:? __libc_start_main [0x344fe554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float min_a = numbers[0];\n    float min_b = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                min_a = numbers[i];\n               \
    \ min_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprplm_hia.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429fa9]\\n??:? void tmprplm_hia.__unittest_L33_C1()\
    \ [0x428f65]\\n??:? void tmprplm_hia.__modtest() [0x429960]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ecbb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dbca]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4324f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4329a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43247d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42dba1]\\n??:? runModuleUnitTests [0x42ea91]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a46c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a3f3]\\n??:? _d_run_main [0x42a35e]\\n??:? main [0x429973]\\\
    n??:? __libc_start_main [0x3e483554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    for (int i = 0; i < numbers.length; i++)\n \
    \   {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n     \
    \       float diff = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\n\
    \            {\n                min_diff = diff;\n                min = min(numbers[i],\
    \ numbers[j]);\n                max = max(numbers[i], numbers[j]);\n         \
    \   }\n        }\n    }\n    return tuple(min, max);\n}\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpohywpfbw.d(25): Error: function expected before `()`, not `min`\
    \ of type `float`\\n/tmp/tmpohywpfbw.d(26): Error: function expected before `()`,\
    \ not `max` of type `float`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpohywpfbw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    Tuple!(float, float) closest_elements = tuple(numbers[0], numbers[1]);\n\
    \    float closest_distance = abs(numbers[0] - numbers[1]);\n    for (int i =\
    \ 0; i < numbers.length; i++) \n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++) \n        {\n            float distance = abs(numbers[i] - numbers[j]);\n\
    \            if (distance < closest_distance) \n            {\n              \
    \  closest_distance = distance;\n                closest_elements = tuple(numbers[i],\
    \ numbers[j]);\n            }\n        }\n    }\n    return closest_elements;\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5mtk87rw.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42a065]\\n??:? void tmp5mtk87rw.__unittest_L30_C1()\
    \ [0x42900d]\\n??:? void tmp5mtk87rw.__modtest() [0x429ad0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42f063]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42df72]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432899]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432d48]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432825]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42df49]\\n??:? runModuleUnitTests [0x42ee39]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a5b4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a53b]\\n??:? _d_run_main [0x42a4a6]\\n??:? main [0x429ae3]\\\
    n??:? __libc_start_main [0x791a9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = numbers[1] - numbers[0];\n\
    \    Tuple!(float, float) closest_pair = tuple(numbers[0], numbers[1]);\n    for\
    \ (size_t i = 0; i < numbers.length; i++)\n    {\n        for (size_t j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                closest_pair = tuple(numbers[i], numbers[j]);\n\
    \            }\n        }\n    }\n    return closest_pair;\n}\nunittest\n{\n \
    \   alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpl5_nzq_0.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42a141]\\n??:? void tmpl5_nzq_0.__unittest_L31_C1()\
    \ [0x429031]\\n??:? void tmpl5_nzq_0.__modtest() [0x429af4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42f13f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42e04e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432975]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432e24]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432901]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42e025]\\n??:? runModuleUnitTests [0x42ef15]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a690]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a617]\\n??:? _d_run_main [0x42a582]\\n??:? main [0x429b07]\\\
    n??:? __libc_start_main [0x66e4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float min_diff_a = numbers[0];\n    float min_diff_b = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i\
    \ + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                min_diff_a = numbers[i];\n         \
    \       min_diff_b = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(min_diff_a, min_diff_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmppmkb6dvj.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429fa9]\\n??:? void tmppmkb6dvj.__unittest_L33_C1()\
    \ [0x428f65]\\n??:? void tmppmkb6dvj.__modtest() [0x429960]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ecbb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dbca]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4324f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4329a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43247d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42dba1]\\n??:? runModuleUnitTests [0x42ea91]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a46c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a3f3]\\n??:? _d_run_main [0x42a35e]\\n??:? main [0x429973]\\\
    n??:? __libc_start_main [0x79870554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    float max_diff = numbers[1] - numbers[0];\n\
    \    foreach(i, number; numbers)\n    {\n        if(i == 0) continue;\n      \
    \  float diff = number - numbers[i-1];\n        if(diff < min_diff)\n        {\n\
    \            min_diff = diff;\n            min = numbers[i-1];\n            max\
    \ = number;\n        }\n        if(diff > max_diff)\n        {\n            max_diff\
    \ = diff;\n            min = numbers[i-1];\n            max = number;\n      \
    \  }\n    }\n    return tuple(min, max);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8gkxj9ky.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429e85]\\n??:? void tmp8gkxj9ky.__unittest_L37_C1()\
    \ [0x428efd]\\n??:? void tmp8gkxj9ky.__modtest() [0x4298ec]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eb73]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42da82]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4323a9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432858]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432335]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42da59]\\n??:? runModuleUnitTests [0x42e949]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a348]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a2cf]\\n??:? _d_run_main [0x42a23a]\\n??:? main [0x4298ff]\\\
    n??:? __libc_start_main [0x7717a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float diff\
    \ = numbers[0] - numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n \
    \   {\n        if (numbers[i] < min)\n        {\n            min = numbers[i];\n\
    \        }\n        if (numbers[i] > max)\n        {\n            max = numbers[i];\n\
    \        }\n        if (abs(numbers[i] - numbers[i+1]) < diff)\n        {\n  \
    \          diff = abs(numbers[i] - numbers[i+1]);\n        }\n    }\n    return\
    \ tuple(min, max);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpkifw2xlv.d(27): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x429fde]\\n??:? std.typecons.Tuple!(float, float).Tuple\
    \ tmpkifw2xlv.find_closest_elements(float[]) [0x428e4b]\\n??:? void tmpkifw2xlv.__unittest_L34_C1()\
    \ [0x428f56]\\n??:? void tmpkifw2xlv.__modtest() [0x429994]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ec3f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42db4e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432475]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432924]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432401]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42db25]\\n??:? runModuleUnitTests [0x42ea15]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a3f0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a377]\\n??:? _d_run_main [0x42a2e2]\\n??:? main [0x4299a7]\\\
    n??:? __libc_start_main [0x9cdae554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = numbers[1] - numbers[0];\n\
    \    float min_num1 = numbers[0];\n    float min_num2 = numbers[1];\n    for (int\
    \ i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                min_num1 = numbers[i];\n                min_num2 = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(min_num1, min_num2);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp83exfpl7.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429f91]\\n??:? void tmp83exfpl7.__unittest_L33_C1()\
    \ [0x428f49]\\n??:? void tmp83exfpl7.__modtest() [0x429944]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eca3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dbb2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4324d9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432988]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432465]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42db89]\\n??:? runModuleUnitTests [0x42ea79]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a454]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a3db]\\n??:? _d_run_main [0x42a346]\\n??:? main [0x429957]\\\
    n??:? __libc_start_main [0x3b50554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = abs(numbers[0] - numbers[1]);\n    for (int i = 0; i < numbers.length; i++)\n\
    \    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n    \
    \        float diff = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\n\
    \            {\n                min_diff = diff;\n                min = min(numbers[i],\
    \ numbers[j]);\n                max = max(numbers[i], numbers[j]);\n         \
    \   }\n        }\n    }\n    return tuple(min, max);\n}\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphxnuzrmc.d(25): Error: function expected before `()`, not `min`\
    \ of type `float`\\n/tmp/tmphxnuzrmc.d(26): Error: function expected before `()`,\
    \ not `max` of type `float`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmphxnuzrmc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    float diff;\n    foreach(i, number; numbers)\n\
    \    {\n        if(number < min)\n        {\n            min = number;\n     \
    \   }\n        if(number > max)\n        {\n            max = number;\n      \
    \  }\n        if(i > 0)\n        {\n            diff = abs(number - numbers[i-1]);\n\
    \            if(diff < min_diff)\n            {\n                min_diff = diff;\n\
    \            }\n        }\n    }\n    return tuple(min, max);\n}\nunittest\n{\n\
    \    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpo7p8tuzj.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429e7d]\\n??:? void tmpo7p8tuzj.__unittest_L39_C1()\
    \ [0x428ee9]\\n??:? void tmpo7p8tuzj.__modtest() [0x4298e4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eb8f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42da9e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4323c5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432874]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432351]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42da75]\\n??:? runModuleUnitTests [0x42e965]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a340]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a2c7]\\n??:? _d_run_main [0x42a232]\\n??:? main [0x4298f7]\\\
    n??:? __libc_start_main [0x18164554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float minDiff = numbers[1] - numbers[0];\n\
    \    float min1 = numbers[0];\n    float min2 = numbers[1];\n    for (int i =\
    \ 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if (diff < minDiff)\n            {\n                minDiff = diff;\n\
    \                min1 = numbers[i];\n                min2 = numbers[j];\n    \
    \        }\n        }\n    }\n    return tuple(min1, min2);\n}\nunittest\n{\n\
    \    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprcz9qvbz.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429f91]\\n??:? void tmprcz9qvbz.__unittest_L33_C1()\
    \ [0x428f49]\\n??:? void tmprcz9qvbz.__modtest() [0x429944]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eca3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dbb2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4324d9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432988]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432465]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42db89]\\n??:? runModuleUnitTests [0x42ea79]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a454]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a3db]\\n??:? _d_run_main [0x42a346]\\n??:? main [0x429957]\\\
    n??:? __libc_start_main [0xdeb67554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    Tuple!(float, float) result = tuple(numbers[0], numbers[1]);\n\
    \    for (size_t i = 0; i < numbers.length; i++)\n    {\n        for (size_t j\
    \ = i + 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                result = tuple(numbers[i], numbers[j]);\n\
    \            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxmzjsj78.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42a161]\\n??:? void tmpxmzjsj78.__unittest_L31_C1()\
    \ [0x429051]\\n??:? void tmpxmzjsj78.__modtest() [0x429b14]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42f15f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42e06e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432995]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432e44]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432921]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42e045]\\n??:? runModuleUnitTests [0x42ef35]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a6b0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a637]\\n??:? _d_run_main [0x42a5a2]\\n??:? main [0x429b27]\\\
    n??:? __libc_start_main [0xe19fb554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    float max_diff = numbers[1] - numbers[0];\n\
    \    for (int i = 1; i < numbers.length; i++) \n    {\n        float diff = numbers[i]\
    \ - numbers[i - 1];\n        if (diff < min_diff) \n        {\n            min_diff\
    \ = diff;\n            min = numbers[i - 1];\n            max = numbers[i];\n\
    \        }\n        if (diff > max_diff) \n        {\n            max_diff = diff;\n\
    \            min = numbers[i - 1];\n            max = numbers[i];\n        }\n\
    \    }\n    return tuple(min, max);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7q4wjhbt.d(40): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429ead]\\n??:? void tmp7q4wjhbt.__unittest_L36_C1()\
    \ [0x428f25]\\n??:? void tmp7q4wjhbt.__modtest() [0x429914]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eb9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42daaa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4323d1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432880]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43235d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42da81]\\n??:? runModuleUnitTests [0x42e971]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a370]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a2f7]\\n??:? _d_run_main [0x42a262]\\n??:? main [0x429927]\\\
    n??:? __libc_start_main [0x4c4f6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = numbers[1] - numbers[0];\n\
    \    float min_num1 = numbers[0];\n    float min_num2 = numbers[1];\n    for (int\
    \ i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                min_num1 = numbers[i];\n                min_num2 = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(min_num1, min_num2);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8562tdgh.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429f91]\\n??:? void tmp8562tdgh.__unittest_L33_C1()\
    \ [0x428f49]\\n??:? void tmp8562tdgh.__modtest() [0x429944]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42eca3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dbb2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4324d9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432988]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432465]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42db89]\\n??:? runModuleUnitTests [0x42ea79]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a454]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a3db]\\n??:? _d_run_main [0x42a346]\\n??:? main [0x429957]\\\
    n??:? __libc_start_main [0xbd5f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    float min_diff = numbers[1] - numbers[0];\n    for (int\
    \ i = 1; i < numbers.length; i++)\n    {\n        float diff = numbers[i] - numbers[i-1];\n\
    \        if (diff < min_diff)\n        {\n            min_diff = diff;\n     \
    \       min = numbers[i-1];\n            max = numbers[i];\n        }\n    }\n\
    \    return tuple(min, max);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjik68atq.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429ee1]\\n??:? void tmpjik68atq.__unittest_L30_C1()\
    \ [0x428ea9]\\n??:? void tmpjik68atq.__modtest() [0x429898]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ebcf]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dade]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432405]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4328b4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432391]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42dab5]\\n??:? runModuleUnitTests [0x42e9a5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a3a4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a32b]\\n??:? _d_run_main [0x42a296]\\n??:? main [0x4298ab]\\\
    n??:? __libc_start_main [0x90750554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    foreach(i, number; numbers)\n    {\n       \
    \ if(i == 0)\n            continue;\n        float diff = number - numbers[i-1];\n\
    \        if(diff < min_diff)\n        {\n            min_diff = diff;\n      \
    \      min = numbers[i-1];\n            max = number;\n        }\n    }\n    return\
    \ tuple(min, max);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphsb8qn1f.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429de5]\\n??:? void tmphsb8qn1f.__unittest_L31_C1()\
    \ [0x428e61]\\n??:? void tmphsb8qn1f.__modtest() [0x429850]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ead3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42d9e2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x432309]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4327b8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x432295]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42d9b9]\\n??:? runModuleUnitTests [0x42e8a9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a2a8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a22f]\\n??:? _d_run_main [0x42a19a]\\n??:? main [0x429863]\\\
    n??:? __libc_start_main [0xf48c1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min = abs(numbers[0] - numbers[1]);\n\
    \    float a = numbers[0];\n    float b = numbers[1];\n    for (int i = 0; i <\
    \ numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if (diff < min)\n            {\n                min = diff;\n     \
    \           a = numbers[i];\n                b = numbers[j];\n            }\n\
    \        }\n    }\n    return tuple(a, b);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpy7lkw50c.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429fa9]\\n??:? void tmpy7lkw50c.__unittest_L33_C1()\
    \ [0x428f65]\\n??:? void tmpy7lkw50c.__modtest() [0x429960]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ecbb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dbca]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4324f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4329a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43247d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42dba1]\\n??:? runModuleUnitTests [0x42ea91]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a46c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a3f3]\\n??:? _d_run_main [0x42a35e]\\n??:? main [0x429973]\\\
    n??:? __libc_start_main [0x12580554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0,\
    \ 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float minDiff = abs(numbers[0] -\
    \ numbers[1]);\n    float first = numbers[0];\n    float second = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < minDiff)\n            {\n           \
    \     minDiff = diff;\n                first = numbers[i];\n                second\
    \ = numbers[j];\n            }\n        }\n    }\n    return tuple(first, second);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpv67q0_6b.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429fa9]\\n??:? void tmpv67q0_6b.__unittest_L33_C1()\
    \ [0x428f65]\\n??:? void tmpv67q0_6b.__modtest() [0x429960]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ecbb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42dbca]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4324f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4329a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43247d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42dba1]\\n??:? runModuleUnitTests [0x42ea91]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a46c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42a3f3]\\n??:? _d_run_main [0x42a35e]\\n??:? main [0x429973]\\\
    n??:? __libc_start_main [0x900aa554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
