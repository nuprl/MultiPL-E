name: HumanEval_144_simplify
language: d
prompt: "import std.math;\n/*\nYour task is to implement a function that will simplify\
  \ the expression\n    x * n. The function returns true if x * n evaluates to a whole\
  \ number and false\n    otherwise. Both x and n, are string representation of a\
  \ fraction, and have the following format,\n    <numerator>/<denominator> where\
  \ both numerator and denominator are positive whole numbers.\n\n    You can assume\
  \ that x, and n are valid fractions, and do not have zero as denominator.\n\n  \
  \  >>> simplify(\"1/5\", \"5/1\")\n    true\n    >>> simplify(\"1/6\", \"2/1\")\n\
  \    false\n    >>> simplify(\"7/10\", \"10/2\")\n    false\n    \n*/\nbool simplify(string\
  \ x, string n) \n"
tests: "unittest\n{\n    alias candidate = simplify;\n\n    assert(candidate(\"1/5\"\
  , \"5/1\") == true);\n    assert(candidate(\"1/6\", \"2/1\") == false);\n    assert(candidate(\"\
  5/1\", \"3/1\") == true);\n    assert(candidate(\"7/10\", \"10/2\") == false);\n\
  \    assert(candidate(\"2/10\", \"50/10\") == true);\n    assert(candidate(\"7/2\"\
  , \"4/2\") == true);\n    assert(candidate(\"11/6\", \"6/1\") == true);\n    assert(candidate(\"\
  2/3\", \"5/2\") == false);\n    assert(candidate(\"5/2\", \"3/5\") == false);\n\
  \    assert(candidate(\"2/4\", \"8/4\") == true);\n    assert(candidate(\"2/4\"\
  , \"4/2\") == true);\n    assert(candidate(\"1/5\", \"5/1\") == true);\n    assert(candidate(\"\
  1/5\", \"1/5\") == false);\n}\nvoid main(){}"
completions: ["{\n    auto x_n = split(x, \"/\");\n    auto n_n = split(n, \"/\");\n\
    \    return to!int(x_n[0]) * to!int(n_n[1]) % to!int(x_n[1]) == 0;\n}", "{\n \
    \   int x_numerator = to!int(split(x, \"/\")[0]);\n    int x_denominator = to!int(split(x,\
    \ \"/\")[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n    int n_denominator\
    \ = to!int(split(n, \"/\")[1]);\n    return (x_numerator * n_denominator) % (x_denominator\
    \ * n_numerator) == 0;\n}", "{\n    auto x_num = to!int(split(x, \"/\")[0]);\n\
    \    auto x_den = to!int(split(x, \"/\")[1]);\n    auto n_num = to!int(split(n,\
    \ \"/\")[0]);\n    auto n_den = to!int(split(n, \"/\")[1]);\n    auto num = x_num\
    \ * n_num;\n    auto den = x_den * n_den;\n    return num % den == 0;\n}", "{\n\
    \    auto x_n = split(x, \"/\");\n    auto n_n = split(n, \"/\");\n    return\
    \ (to!int(x_n[0]) * to!int(n_n[1])) % to!int(x_n[1]) == 0;\n}", "{\n    int x_numerator\
    \ = to!int(split(x, \"/\")[0]);\n    int x_denominator = to!int(split(x, \"/\"\
    )[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n    int n_denominator\
    \ = to!int(split(n, \"/\")[1]);\n    return (x_numerator * n_denominator) % (x_denominator\
    \ * n_numerator) == 0;\n}", "{\n    int x_numerator = stoi(x.substr(0, x.find(\"\
    /\")));\n    int x_denominator = stoi(x.substr(x.find(\"/\") + 1));\n    int n_numerator\
    \ = stoi(n.substr(0, n.find(\"/\")));\n    int n_denominator = stoi(n.substr(n.find(\"\
    /\") + 1));\n    return (x_numerator * n_denominator) % (x_denominator * n_numerator)\
    \ == 0;\n}", "{\n    auto x_num = to!int(split(x, \"/\")[0]);\n    auto x_den\
    \ = to!int(split(x, \"/\")[1]);\n    auto n_num = to!int(split(n, \"/\")[0]);\n\
    \    auto n_den = to!int(split(n, \"/\")[1]);\n    return (x_num * n_num) % (x_den\
    \ * n_den) == 0;\n}", "{\n    auto x_num = to!int(split(x, \"/\")[0]);\n    auto\
    \ x_den = to!int(split(x, \"/\")[1]);\n    auto n_num = to!int(split(n, \"/\"\
    )[0]);\n    auto n_den = to!int(split(n, \"/\")[1]);\n    return (x_num * n_num)\
    \ % (x_den * n_den) == 0;\n}", "{\n    auto x_ = x.split(\"/\");\n    auto n_\
    \ = n.split(\"/\");\n    auto x_num = to!int(x_[0]);\n    auto x_den = to!int(x_[1]);\n\
    \    auto n_num = to!int(n_[0]);\n    auto n_den = to!int(n_[1]);\n    auto num\
    \ = x_num * n_num;\n    auto den = x_den * n_den;\n    return num % den == 0;\n\
    }", "{\n    auto x_num = to!int(split(x, \"/\")[0]);\n    auto x_den = to!int(split(x,\
    \ \"/\")[1]);\n    auto n_num = to!int(split(n, \"/\")[0]);\n    auto n_den =\
    \ to!int(split(n, \"/\")[1]);\n    return (x_num * n_num) % (x_den * n_den) ==\
    \ 0;\n}", "{\n    auto x_n = split(x, \"/\");\n    auto n_n = split(n, \"/\");\n\
    \    auto x_num = to!int(x_n[0]);\n    auto x_den = to!int(x_n[1]);\n    auto\
    \ n_num = to!int(n_n[0]);\n    auto n_den = to!int(n_n[1]);\n    auto num = x_num\
    \ * n_num;\n    auto den = x_den * n_den;\n    return num % den == 0;\n}", "{\n\
    \    int x_numerator = std.stoi(x.split(\"/\")[0]);\n    int x_denominator = std.stoi(x.split(\"\
    /\")[1]);\n    int n_numerator = std.stoi(n.split(\"/\")[0]);\n    int n_denominator\
    \ = std.stoi(n.split(\"/\")[1]);\n    return (x_numerator * n_denominator) % (x_denominator\
    \ * n_numerator) == 0;\n}", "{\n    int x_numerator, x_denominator, n_numerator,\
    \ n_denominator;\n    int pos = x.find(\"/\");\n    x_numerator = stoi(x.substr(0,\
    \ pos));\n    x_denominator = stoi(x.substr(pos + 1));\n    pos = n.find(\"/\"\
    );\n    n_numerator = stoi(n.substr(0, pos));\n    n_denominator = stoi(n.substr(pos\
    \ + 1));\n    return (x_numerator * n_denominator) % (x_denominator * n_numerator)\
    \ == 0;\n}", "{\n    auto x_split = split(x, \"/\");\n    auto n_split = split(n,\
    \ \"/\");\n    auto x_num = to!int(x_split[0]);\n    auto x_den = to!int(x_split[1]);\n\
    \    auto n_num = to!int(n_split[0]);\n    auto n_den = to!int(n_split[1]);\n\
    \    return (x_num * n_den) % (x_den * n_num) == 0;\n}", "{\n    int x_numerator\
    \ = to!int(split(x, \"/\")[0]);\n    int x_denominator = to!int(split(x, \"/\"\
    )[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n    int n_denominator\
    \ = to!int(split(n, \"/\")[1]);\n    return (x_numerator * n_denominator) % (x_denominator\
    \ * n_numerator) == 0;\n}", "{\n    int x_numerator = to!int(split(x, \"/\")[0]);\n\
    \    int x_denominator = to!int(split(x, \"/\")[1]);\n    int n_numerator = to!int(split(n,\
    \ \"/\")[0]);\n    int n_denominator = to!int(split(n, \"/\")[1]);\n    return\
    \ (x_numerator * n_denominator) % (x_denominator * n_numerator) == 0;\n}", "{\n\
    \    auto x_n = split(x, \"/\");\n    auto n_n = split(n, \"/\");\n    auto x_num\
    \ = to!int(x_n[0]);\n    auto x_den = to!int(x_n[1]);\n    auto n_num = to!int(n_n[0]);\n\
    \    auto n_den = to!int(n_n[1]);\n    auto num = x_num * n_num;\n    auto den\
    \ = x_den * n_den;\n    return num % den == 0;\n}", "{\n    int x_numerator =\
    \ to!int(split(x, \"/\")[0]);\n    int x_denominator = to!int(split(x, \"/\")[1]);\n\
    \    int n_numerator = to!int(split(n, \"/\")[0]);\n    int n_denominator = to!int(split(n,\
    \ \"/\")[1]);\n    return (x_numerator * n_denominator) % (x_denominator * n_numerator)\
    \ == 0;\n}", "{\n    int x_numerator = to!int(x[0..x.find('/')]);\n    int x_denominator\
    \ = to!int(x[x.find('/')+1..$]);\n    int n_numerator = to!int(n[0..n.find('/')]);\n\
    \    int n_denominator = to!int(n[n.find('/')+1..$]);\n    return (x_numerator\
    \ * n_numerator) % (x_denominator * n_denominator) == 0;\n}", "{\n    // your\
    \ code here\n    int x_numerator = to!int(x[0..x.find(\"/\")]);\n    int x_denominator\
    \ = to!int(x[x.find(\"/\")+1..$]);\n    int n_numerator = to!int(n[0..n.find(\"\
    /\")]);\n    int n_denominator = to!int(n[n.find(\"/\")+1..$]);\n    return (x_numerator\
    \ * n_denominator) % (x_denominator * n_numerator) == 0;\n}", "{\n    auto x_numerator\
    \ = to!int(split(x, \"/\")[0]);\n    auto x_denominator = to!int(split(x, \"/\"\
    )[1]);\n    auto n_numerator = to!int(split(n, \"/\")[0]);\n    auto n_denominator\
    \ = to!int(split(n, \"/\")[1]);\n    auto result = x_numerator * n_numerator /\
    \ (x_denominator * n_denominator);\n    return result % 1 == 0;\n}", "{\n    auto\
    \ x_n = split(x, \"/\");\n    auto n_n = split(n, \"/\");\n    return (to!int(x_n[0])\
    \ * to!int(n_n[1])) % to!int(x_n[1]) == 0;\n}", "{\n    auto x_num = to!int(split(x,\
    \ \"/\")[0]);\n    auto x_den = to!int(split(x, \"/\")[1]);\n    auto n_num =\
    \ to!int(split(n, \"/\")[0]);\n    auto n_den = to!int(split(n, \"/\")[1]);\n\
    \    auto res = x_num * n_num;\n    auto den = x_den * n_den;\n    return res\
    \ % den == 0;\n}", "{\n    int x_numerator = to!int(split(x, \"/\")[0]);\n   \
    \ int x_denominator = to!int(split(x, \"/\")[1]);\n    int n_numerator = to!int(split(n,\
    \ \"/\")[0]);\n    int n_denominator = to!int(split(n, \"/\")[1]);\n    return\
    \ (x_numerator * n_denominator) % (x_denominator * n_numerator) == 0;\n}", "{\n\
    \    int x_numerator = stoi(x.substr(0, x.find(\"/\")));\n    int x_denominator\
    \ = stoi(x.substr(x.find(\"/\") + 1));\n    int n_numerator = stoi(n.substr(0,\
    \ n.find(\"/\")));\n    int n_denominator = stoi(n.substr(n.find(\"/\") + 1));\n\
    \    return (x_numerator * n_denominator) % (x_denominator * n_numerator) == 0;\n\
    }", "{\n    auto x_split = split(x, \"/\");\n    auto n_split = split(n, \"/\"\
    );\n    return (to!int(x_split[0]) * to!int(n_split[1])) % to!int(x_split[1])\
    \ == 0;\n}", "{\n    auto x_num = to!int(split(x, \"/\")[0]);\n    auto x_den\
    \ = to!int(split(x, \"/\")[1]);\n    auto n_num = to!int(split(n, \"/\")[0]);\n\
    \    auto n_den = to!int(split(n, \"/\")[1]);\n    return (x_num * n_num) % (x_den\
    \ * n_den) == 0;\n}", "{\n    int x_numerator, x_denominator, n_numerator, n_denominator;\n\
    \    auto slash = x.find('/');\n    x_numerator = to!int(x[0..slash]);\n    x_denominator\
    \ = to!int(x[slash+1..$]);\n    slash = n.find('/');\n    n_numerator = to!int(n[0..slash]);\n\
    \    n_denominator = to!int(n[slash+1..$]);\n    return (x_numerator * n_denominator)\
    \ % (x_denominator * n_numerator) == 0;\n}", "{\n    int x_numerator = to!int(split(x,\
    \ \"/\")[0]);\n    int x_denominator = to!int(split(x, \"/\")[1]);\n    int n_numerator\
    \ = to!int(split(n, \"/\")[0]);\n    int n_denominator = to!int(split(n, \"/\"\
    )[1]);\n    return (x_numerator * n_denominator) % (x_denominator * n_numerator)\
    \ == 0;\n}", "{\n    auto x_num = to!int(split(x, \"/\")[0]);\n    auto x_den\
    \ = to!int(split(x, \"/\")[1]);\n    auto n_num = to!int(split(n, \"/\")[0]);\n\
    \    auto n_den = to!int(split(n, \"/\")[1]);\n    auto res = x_num * n_num;\n\
    \    auto den = x_den * n_den;\n    return res % den == 0;\n}", "{\n    auto x_n\
    \ = split(x, \"/\");\n    auto n_n = split(n, \"/\");\n    auto x_num = to!int(x_n[0]);\n\
    \    auto x_den = to!int(x_n[1]);\n    auto n_num = to!int(n_n[0]);\n    auto\
    \ n_den = to!int(n_n[1]);\n    auto num = x_num * n_num;\n    auto den = x_den\
    \ * n_den;\n    return num % den == 0;\n}", "{\n    auto x_num = to!int(split(x,\
    \ \"/\")[0]);\n    auto x_den = to!int(split(x, \"/\")[1]);\n    auto n_num =\
    \ to!int(split(n, \"/\")[0]);\n    auto n_den = to!int(split(n, \"/\")[1]);\n\
    \    auto num = x_num * n_num;\n    auto den = x_den * n_den;\n    return num\
    \ % den == 0;\n}", "{\n    int x_numerator = to!int(split(x, \"/\")[0]);\n   \
    \ int x_denominator = to!int(split(x, \"/\")[1]);\n    int n_numerator = to!int(split(n,\
    \ \"/\")[0]);\n    int n_denominator = to!int(split(n, \"/\")[1]);\n    return\
    \ (x_numerator * n_denominator) % (x_denominator * n_numerator) == 0;\n}", "{\n\
    \    auto x_numerator = to!int(split(x, \"/\")[0]);\n    auto x_denominator =\
    \ to!int(split(x, \"/\")[1]);\n    auto n_numerator = to!int(split(n, \"/\")[0]);\n\
    \    auto n_denominator = to!int(split(n, \"/\")[1]);\n    auto result = x_numerator\
    \ * n_numerator / (x_denominator * n_denominator);\n    return result % 1 == 0;\n\
    }", "{\n    int x_numerator, x_denominator, n_numerator, n_denominator;\n    int\
    \ i = 0;\n    while (x[i] != '/')\n    {\n        x_numerator = x_numerator *\
    \ 10 + (x[i] - '0');\n        i++;\n    }\n    i++;\n    while (i < x.length())\n\
    \    {\n        x_denominator = x_denominator * 10 + (x[i] - '0');\n        i++;\n\
    \    }\n    i = 0;\n    while (n[i] != '/')\n    {\n        n_numerator = n_numerator\
    \ * 10 + (n[i] - '0');\n        i++;\n    }\n    i++;\n    while (i < n.length())\n\
    \    {\n        n_denominator = n_denominator * 10 + (n[i] - '0');\n        i++;\n\
    \    }\n    return (x_numerator * n_denominator) % (x_denominator * n_numerator)\
    \ == 0;\n}", "{\n    auto x_n = split(x, \"/\");\n    auto n_n = split(n, \"/\"\
    );\n    return to!int(x_n[0]) * to!int(n_n[1]) % to!int(x_n[1]) == 0;\n}", "{\n\
    \    auto x_num = to!int(split(x, \"/\")[0]);\n    auto x_den = to!int(split(x,\
    \ \"/\")[1]);\n    auto n_num = to!int(split(n, \"/\")[0]);\n    auto n_den =\
    \ to!int(split(n, \"/\")[1]);\n    return (x_num * n_num) % (x_den * n_den) ==\
    \ 0;\n}", "{\n    int x_numerator = to!int(split(x, \"/\")[0]);\n    int x_denominator\
    \ = to!int(split(x, \"/\")[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n\
    \    int n_denominator = to!int(split(n, \"/\")[1]);\n    int result_numerator\
    \ = x_numerator * n_numerator;\n    int result_denominator = x_denominator * n_denominator;\n\
    \    return (result_numerator % result_denominator == 0);\n}", "{\n    int x_numerator\
    \ = stoi(x.substr(0, x.find(\"/\")));\n    int x_denominator = stoi(x.substr(x.find(\"\
    /\") + 1));\n    int n_numerator = stoi(n.substr(0, n.find(\"/\")));\n    int\
    \ n_denominator = stoi(n.substr(n.find(\"/\") + 1));\n    return (x_numerator\
    \ * n_denominator) % (x_denominator * n_numerator) == 0;\n}", "{\n    int x_numerator\
    \ = to!int(x[0..x.find('/')]);\n    int x_denominator = to!int(x[x.find('/')+1..$]);\n\
    \    int n_numerator = to!int(n[0..n.find('/')]);\n    int n_denominator = to!int(n[n.find('/')+1..$]);\n\
    \    return (x_numerator * n_numerator) % (x_denominator * n_denominator) == 0;\n\
    }", "{\n    int x_numerator = to!int(split(x, \"/\")[0]);\n    int x_denominator\
    \ = to!int(split(x, \"/\")[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n\
    \    int n_denominator = to!int(split(n, \"/\")[1]);\n    return (x_numerator\
    \ * n_denominator) % (x_denominator * n_numerator) == 0;\n}", "{\n    int x_numerator\
    \ = to!int(split(x, \"/\")[0]);\n    int x_denominator = to!int(split(x, \"/\"\
    )[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n    int n_denominator\
    \ = to!int(split(n, \"/\")[1]);\n    return (x_numerator * n_denominator) % (x_denominator\
    \ * n_numerator) == 0;\n}", "{\n    auto x_numerator = to!int(split(x, \"/\")[0]);\n\
    \    auto x_denominator = to!int(split(x, \"/\")[1]);\n    auto n_numerator =\
    \ to!int(split(n, \"/\")[0]);\n    auto n_denominator = to!int(split(n, \"/\"\
    )[1]);\n    auto result = x_numerator * n_numerator;\n    auto result_denominator\
    \ = x_denominator * n_denominator;\n    return result % result_denominator ==\
    \ 0;\n}", "{\n    int x_numerator = to!int(split(x, \"/\")[0]);\n    int x_denominator\
    \ = to!int(split(x, \"/\")[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n\
    \    int n_denominator = to!int(split(n, \"/\")[1]);\n    int result_numerator\
    \ = x_numerator * n_numerator;\n    int result_denominator = x_denominator * n_denominator;\n\
    \    return result_numerator % result_denominator == 0;\n}", "{\n    auto x_num\
    \ = to!int(split(x, \"/\")[0]);\n    auto x_den = to!int(split(x, \"/\")[1]);\n\
    \    auto n_num = to!int(split(n, \"/\")[0]);\n    auto n_den = to!int(split(n,\
    \ \"/\")[1]);\n    auto x_num_n = x_num * n_num;\n    auto x_den_n = x_den * n_den;\n\
    \    return x_num_n % x_den_n == 0;\n}", "{\n    int x_numerator = to!int(x[0..x.find(\"\
    /\")]);\n    int x_denominator = to!int(x[x.find(\"/\")+1..$]);\n    int n_numerator\
    \ = to!int(n[0..n.find(\"/\")]);\n    int n_denominator = to!int(n[n.find(\"/\"\
    )+1..$]);\n    int result_numerator = x_numerator * n_numerator;\n    int result_denominator\
    \ = x_denominator * n_denominator;\n    return result_numerator % result_denominator\
    \ == 0;\n}", "{\n    auto a = split(x, \"/\");\n    auto b = split(n, \"/\");\n\
    \    return to!double(a[0]) * to!double(b[1]) % to!double(a[1]) == 0;\n}", "{\n\
    \    auto x_n = split(x, \"/\");\n    auto n_n = split(n, \"/\");\n    auto x_n_n\
    \ = to!int(x_n[0]);\n    auto x_d = to!int(x_n[1]);\n    auto n_n_n = to!int(n_n[0]);\n\
    \    auto n_d = to!int(n_n[1]);\n    auto x_n_n_n = x_n_n * n_d;\n    auto n_n_n_n\
    \ = n_n_n * x_d;\n    return x_n_n_n == n_n_n_n;\n}", "{\n    auto x_num = to!int(split(x,\
    \ \"/\")[0]);\n    auto x_den = to!int(split(x, \"/\")[1]);\n    auto n_num =\
    \ to!int(split(n, \"/\")[0]);\n    auto n_den = to!int(split(n, \"/\")[1]);\n\
    \    auto num = x_num * n_num;\n    auto den = x_den * n_den;\n    auto gcd =\
    \ gcd(num, den);\n    return den / gcd == 1;\n}", "{\n    int x_num = to!int(split(x,\
    \ \"/\")[0]);\n    int x_den = to!int(split(x, \"/\")[1]);\n    int n_num = to!int(split(n,\
    \ \"/\")[0]);\n    int n_den = to!int(split(n, \"/\")[1]);\n    return (x_num\
    \ * n_den) % (x_den * n_num) == 0;\n}", "{\n    int x_num = to!int(split(x, \"\
    /\")[0]);\n    int x_den = to!int(split(x, \"/\")[1]);\n    int n_num = to!int(split(n,\
    \ \"/\")[0]);\n    int n_den = to!int(split(n, \"/\")[1]);\n    return (x_num\
    \ * n_den) % (x_den * n_num) == 0;\n}", "{\n    auto x_n = split(x, \"/\");\n\
    \    auto n_n = split(n, \"/\");\n    auto x_num = to!int(x_n[0]);\n    auto x_den\
    \ = to!int(x_n[1]);\n    auto n_num = to!int(n_n[0]);\n    auto n_den = to!int(n_n[1]);\n\
    \    auto num = x_num * n_num;\n    auto den = x_den * n_den;\n    return num\
    \ % den == 0;\n}", "{\n    int x_numerator, x_denominator, n_numerator, n_denominator;\n\
    \    int i = 0;\n    string x_num, x_den, n_num, n_den;\n    while (x[i] != '/')\n\
    \    {\n        x_num += x[i];\n        i++;\n    }\n    i++;\n    while (i <\
    \ x.length())\n    {\n        x_den += x[i];\n        i++;\n    }\n    i = 0;\n\
    \    while (n[i] != '/')\n    {\n        n_num += n[i];\n        i++;\n    }\n\
    \    i++;\n    while (i < n.length())\n    {\n        n_den += n[i];\n       \
    \ i++;\n    }\n    x_numerator = stoi(x_num);\n    x_denominator = stoi(x_den);\n\
    \    n_numerator = stoi(n_num);\n    n_denominator = stoi(n_den);\n    if (x_numerator\
    \ * n_denominator % (x_denominator * n_numerator) == 0)\n        return true;\n\
    \    else\n        return false;\n}", "{\n    int x_numerator = 0;\n    int x_denominator\
    \ = 0;\n    int n_numerator = 0;\n    int n_denominator = 0;\n    int i = 0;\n\
    \    while (x[i] != '/')\n    {\n        x_numerator = x_numerator * 10 + (x[i]\
    \ - '0');\n        i++;\n    }\n    i++;\n    while (i < x.length())\n    {\n\
    \        x_denominator = x_denominator * 10 + (x[i] - '0');\n        i++;\n  \
    \  }\n    i = 0;\n    while (n[i] != '/')\n    {\n        n_numerator = n_numerator\
    \ * 10 + (n[i] - '0');\n        i++;\n    }\n    i++;\n    while (i < n.length())\n\
    \    {\n        n_denominator = n_denominator * 10 + (n[i] - '0');\n        i++;\n\
    \    }\n    return (x_numerator * n_denominator) % (x_denominator * n_numerator)\
    \ == 0;\n}", "{\n    auto x_num = to!int(split(x, \"/\")[0]);\n    auto x_den\
    \ = to!int(split(x, \"/\")[1]);\n    auto n_num = to!int(split(n, \"/\")[0]);\n\
    \    auto n_den = to!int(split(n, \"/\")[1]);\n    return (x_num * n_num) % (x_den\
    \ * n_den) == 0;\n}", "{\n    auto x_n = split(x, \"/\");\n    auto n_n = split(n,\
    \ \"/\");\n    auto x_n_n = to!int(x_n[0]);\n    auto x_d = to!int(x_n[1]);\n\
    \    auto n_n_n = to!int(n_n[0]);\n    auto n_d = to!int(n_n[1]);\n    auto x_n_n_n\
    \ = x_n_n * n_d;\n    auto n_n_n_n = n_n_n * x_d;\n    return x_n_n_n == n_n_n_n;\n\
    }", "{\n    int x_numerator = to!int(x[0..x.find('/')]);\n    int x_denominator\
    \ = to!int(x[x.find('/')+1..$]);\n    int n_numerator = to!int(n[0..n.find('/')]);\n\
    \    int n_denominator = to!int(n[n.find('/')+1..$]);\n    return (x_numerator\
    \ * n_numerator) % (x_denominator * n_denominator) == 0;\n}", "{\n    auto x_numerator\
    \ = to!int(split(x, \"/\")[0]);\n    auto x_denominator = to!int(split(x, \"/\"\
    )[1]);\n    auto n_numerator = to!int(split(n, \"/\")[0]);\n    auto n_denominator\
    \ = to!int(split(n, \"/\")[1]);\n    auto x_n = x_numerator * n_denominator;\n\
    \    auto n_n = n_numerator * x_denominator;\n    return x_n % n_n == 0;\n}",
  "{\n    int x_numerator = to!int(split(x, \"/\")[0]);\n    int x_denominator = to!int(split(x,\
    \ \"/\")[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n    int n_denominator\
    \ = to!int(split(n, \"/\")[1]);\n    return (x_numerator * n_denominator) % (x_denominator\
    \ * n_numerator) == 0;\n}", "{\n    auto x_num = to!int(split(x, \"/\")[0]);\n\
    \    auto x_den = to!int(split(x, \"/\")[1]);\n    auto n_num = to!int(split(n,\
    \ \"/\")[0]);\n    auto n_den = to!int(split(n, \"/\")[1]);\n    auto x_num_n\
    \ = x_num * n_num;\n    auto x_den_n = x_den * n_den;\n    return x_num_n % x_den_n\
    \ == 0;\n}", "{\n    auto x_numerator = to!int(split(x, \"/\")[0]);\n    auto\
    \ x_denominator = to!int(split(x, \"/\")[1]);\n    auto n_numerator = to!int(split(n,\
    \ \"/\")[0]);\n    auto n_denominator = to!int(split(n, \"/\")[1]);\n    auto\
    \ result = x_numerator * n_numerator;\n    auto result_denominator = x_denominator\
    \ * n_denominator;\n    return result % result_denominator == 0;\n}", "{\n   \
    \ auto x_n = split(x, \"/\");\n    auto n_n = split(n, \"/\");\n    auto x_num\
    \ = to!int(x_n[0]);\n    auto x_den = to!int(x_n[1]);\n    auto n_num = to!int(n_n[0]);\n\
    \    auto n_den = to!int(n_n[1]);\n    return (x_num * n_den) % (x_den * n_num)\
    \ == 0;\n}", "{\n    int x_numerator = to!int(split(x, \"/\")[0]);\n    int x_denominator\
    \ = to!int(split(x, \"/\")[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n\
    \    int n_denominator = to!int(split(n, \"/\")[1]);\n    return (x_numerator\
    \ * n_denominator) % (x_denominator * n_numerator) == 0;\n}", "{\n    auto x_num\
    \ = to!int(split(x, \"/\")[0]);\n    auto x_den = to!int(split(x, \"/\")[1]);\n\
    \    auto n_num = to!int(split(n, \"/\")[0]);\n    auto n_den = to!int(split(n,\
    \ \"/\")[1]);\n    auto x_num_n = x_num * n_num;\n    auto x_den_n = x_den * n_den;\n\
    \    return x_num_n % x_den_n == 0;\n}", "{\n    auto x_n = split(x, \"/\");\n\
    \    auto n_n = split(n, \"/\");\n    return (to!int(x_n[0]) * to!int(n_n[1]))\
    \ % to!int(x_n[1]) == 0;\n}", "{\n    auto [x_num, x_den] = split(x, '/');\n \
    \   auto [n_num, n_den] = split(n, '/');\n    return (to!int(x_num) * to!int(n_den))\
    \ % (to!int(x_den) * to!int(n_num)) == 0;\n}", "{\n    int x_numerator = to!int(x[0..x.find(\"\
    /\")]);\n    int x_denominator = to!int(x[x.find(\"/\")+1..$]);\n    int n_numerator\
    \ = to!int(n[0..n.find(\"/\")]);\n    int n_denominator = to!int(n[n.find(\"/\"\
    )+1..$]);\n    return (x_numerator * n_numerator) % (x_denominator * n_denominator)\
    \ == 0;\n}", "{\n    auto x_numerator = to!int(split(x, \"/\")[0]);\n    auto\
    \ x_denominator = to!int(split(x, \"/\")[1]);\n    auto n_numerator = to!int(split(n,\
    \ \"/\")[0]);\n    auto n_denominator = to!int(split(n, \"/\")[1]);\n    auto\
    \ result = x_numerator * n_numerator;\n    auto denominator = x_denominator *\
    \ n_denominator;\n    return denominator % result == 0;\n}", "{\n    int x_numerator\
    \ = stoi(x.substr(0, x.find('/')));\n    int x_denominator = stoi(x.substr(x.find('/')\
    \ + 1));\n    int n_numerator = stoi(n.substr(0, n.find('/')));\n    int n_denominator\
    \ = stoi(n.substr(n.find('/') + 1));\n    double result = (double)x_numerator\
    \ * n_numerator / (x_denominator * n_denominator);\n    return result == (int)result;\n\
    }", "{\n    auto x_numerator = to!int(split(x, \"/\")[0]);\n    auto x_denominator\
    \ = to!int(split(x, \"/\")[1]);\n    auto n_numerator = to!int(split(n, \"/\"\
    )[0]);\n    auto n_denominator = to!int(split(n, \"/\")[1]);\n    auto result\
    \ = (x_numerator * n_numerator) / (x_denominator * n_denominator);\n    return\
    \ (result % 1) == 0;\n}", "{\n    int x_numerator = to!int(x[0..x.find(\"/\")]);\n\
    \    int x_denominator = to!int(x[x.find(\"/\")+1..$]);\n    int n_numerator =\
    \ to!int(n[0..n.find(\"/\")]);\n    int n_denominator = to!int(n[n.find(\"/\"\
    )+1..$]);\n    return (x_numerator * n_numerator) % (x_denominator * n_denominator)\
    \ == 0;\n}", "{\n    auto x_num = to!int(split(x, \"/\")[0]);\n    auto x_den\
    \ = to!int(split(x, \"/\")[1]);\n    auto n_num = to!int(split(n, \"/\")[0]);\n\
    \    auto n_den = to!int(split(n, \"/\")[1]);\n    auto x_num_n = x_num * n_num;\n\
    \    auto x_den_n = x_den * n_den;\n    return x_num_n % x_den_n == 0;\n}", "{\n\
    \    auto x_num = to!int(split(x, \"/\")[0]);\n    auto x_den = to!int(split(x,\
    \ \"/\")[1]);\n    auto n_num = to!int(split(n, \"/\")[0]);\n    auto n_den =\
    \ to!int(split(n, \"/\")[1]);\n    return (x_num * n_num) % (x_den * n_den) ==\
    \ 0;\n}", "{\n    int x_numerator = to!int(split(x, \"/\")[0]);\n    int x_denominator\
    \ = to!int(split(x, \"/\")[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n\
    \    int n_denominator = to!int(split(n, \"/\")[1]);\n    return (x_numerator\
    \ * n_denominator) % (x_denominator * n_numerator) == 0;\n}", "{\n    int x_numerator,\
    \ x_denominator, n_numerator, n_denominator;\n    int i = 0;\n    string temp\
    \ = \"\";\n    while (x[i] != '/')\n    {\n        temp += x[i];\n        i++;\n\
    \    }\n    x_numerator = stoi(temp);\n    temp = \"\";\n    i++;\n    while (i\
    \ < x.length())\n    {\n        temp += x[i];\n        i++;\n    }\n    x_denominator\
    \ = stoi(temp);\n    temp = \"\";\n    i = 0;\n    while (n[i] != '/')\n    {\n\
    \        temp += n[i];\n        i++;\n    }\n    n_numerator = stoi(temp);\n \
    \   temp = \"\";\n    i++;\n    while (i < n.length())\n    {\n        temp +=\
    \ n[i];\n        i++;\n    }\n    n_denominator = stoi(temp);\n    int numerator\
    \ = x_numerator * n_numerator;\n    int denominator = x_denominator * n_denominator;\n\
    \    return numerator % denominator == 0;\n}", "{\n    int x_numerator = to!int(x[0..x.find('/')]);\n\
    \    int x_denominator = to!int(x[x.find('/')+1..$]);\n    int n_numerator = to!int(n[0..n.find('/')]);\n\
    \    int n_denominator = to!int(n[n.find('/')+1..$]);\n    return (x_numerator\
    \ * n_numerator) % (x_denominator * n_denominator) == 0;\n}", "{\n    auto x_num\
    \ = to!int(split(x, \"/\")[0]);\n    auto x_den = to!int(split(x, \"/\")[1]);\n\
    \    auto n_num = to!int(split(n, \"/\")[0]);\n    auto n_den = to!int(split(n,\
    \ \"/\")[1]);\n    auto x_num_n = x_num * n_num;\n    auto x_den_n = x_den * n_den;\n\
    \    return x_num_n % x_den_n == 0;\n}", "{\n    int x_numerator, x_denominator,\
    \ n_numerator, n_denominator;\n    int i = 0;\n    string x_num, x_den, n_num,\
    \ n_den;\n    while (x[i] != '/')\n    {\n        x_num += x[i];\n        i++;\n\
    \    }\n    i++;\n    while (i < x.length())\n    {\n        x_den += x[i];\n\
    \        i++;\n    }\n    i = 0;\n    while (n[i] != '/')\n    {\n        n_num\
    \ += n[i];\n        i++;\n    }\n    i++;\n    while (i < n.length())\n    {\n\
    \        n_den += n[i];\n        i++;\n    }\n    x_numerator = stoi(x_num);\n\
    \    x_denominator = stoi(x_den);\n    n_numerator = stoi(n_num);\n    n_denominator\
    \ = stoi(n_den);\n    if (x_numerator * n_denominator == x_denominator * n_numerator)\n\
    \        return true;\n    return false;\n}", "{\n    auto x_ = split(x, \"/\"\
    );\n    auto n_ = split(n, \"/\");\n    return to!int(x_[0]) * to!int(n_[1]) %\
    \ to!int(x_[1]) == 0;\n}", "{\n    auto [num1, den1] = split(x, '/');\n    auto\
    \ [num2, den2] = split(n, '/');\n    return to!int(num1) * to!int(den2) % to!int(den1)\
    \ == 0;\n}", "{\n    auto x_num = to!int(split(x, \"/\")[0]);\n    auto x_den\
    \ = to!int(split(x, \"/\")[1]);\n    auto n_num = to!int(split(n, \"/\")[0]);\n\
    \    auto n_den = to!int(split(n, \"/\")[1]);\n    return x_num * n_den * n_num\
    \ * x_den % (x_den * n_den) == 0;\n}", "{\n    int x_numerator = to!int(split(x,\
    \ \"/\")[0]);\n    int x_denominator = to!int(split(x, \"/\")[1]);\n    int n_numerator\
    \ = to!int(split(n, \"/\")[0]);\n    int n_denominator = to!int(split(n, \"/\"\
    )[1]);\n    return (x_numerator * n_denominator) % (x_denominator * n_numerator)\
    \ == 0;\n}", "{\n    int x_numerator = to!int(split(x, \"/\")[0]);\n    int x_denominator\
    \ = to!int(split(x, \"/\")[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n\
    \    int n_denominator = to!int(split(n, \"/\")[1]);\n    return (x_numerator\
    \ * n_denominator) % (x_denominator * n_numerator) == 0;\n}", "{\n    int x_numerator\
    \ = to!int(split(x, \"/\")[0]);\n    int x_denominator = to!int(split(x, \"/\"\
    )[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n    int n_denominator\
    \ = to!int(split(n, \"/\")[1]);\n    return (x_numerator * n_denominator) % (x_denominator\
    \ * n_numerator) == 0;\n}", "{\n    auto x_num = x.split(\"/\")[0].to!int;\n \
    \   auto x_den = x.split(\"/\")[1].to!int;\n    auto n_num = n.split(\"/\")[0].to!int;\n\
    \    auto n_den = n.split(\"/\")[1].to!int;\n    return (x_num * n_num) % (x_den\
    \ * n_den) == 0;\n}", "{\n    int x_num = to!int(split(x, \"/\")[0]);\n    int\
    \ x_den = to!int(split(x, \"/\")[1]);\n    int n_num = to!int(split(n, \"/\")[0]);\n\
    \    int n_den = to!int(split(n, \"/\")[1]);\n    return (x_num * n_den) % (x_den\
    \ * n_num) == 0;\n}", "{\n    // Your code here\n    int x_num = stoi(x.substr(0,\
    \ x.find(\"/\")));\n    int x_den = stoi(x.substr(x.find(\"/\") + 1));\n    int\
    \ n_num = stoi(n.substr(0, n.find(\"/\")));\n    int n_den = stoi(n.substr(n.find(\"\
    /\") + 1));\n    return (x_num * n_num) % (x_den * n_den) == 0;\n}", "{\n    auto\
    \ x_num = to!int(split(x, \"/\")[0]);\n    auto x_den = to!int(split(x, \"/\"\
    )[1]);\n    auto n_num = to!int(split(n, \"/\")[0]);\n    auto n_den = to!int(split(n,\
    \ \"/\")[1]);\n    auto x_num_n = x_num * n_num;\n    auto x_den_n = x_den * n_den;\n\
    \    return x_num_n % x_den_n == 0;\n}", "{\n    auto x_split = split(x, \"/\"\
    );\n    auto n_split = split(n, \"/\");\n    auto x_num = to!int(x_split[0]);\n\
    \    auto x_den = to!int(x_split[1]);\n    auto n_num = to!int(n_split[0]);\n\
    \    auto n_den = to!int(n_split[1]);\n    auto result = x_num * n_num;\n    auto\
    \ divisor = x_den * n_den;\n    return result % divisor == 0;\n}", "{\n    int\
    \ numerator1 = to!int(split(x, \"/\")[0]);\n    int denominator1 = to!int(split(x,\
    \ \"/\")[1]);\n    int numerator2 = to!int(split(n, \"/\")[0]);\n    int denominator2\
    \ = to!int(split(n, \"/\")[1]);\n    int numerator = numerator1 * denominator2;\n\
    \    int denominator = denominator1 * numerator2;\n    return (numerator % denominator\
    \ == 0);\n}", "{\n    int x_numerator = to!int(split(x, \"/\")[0]);\n    int x_denominator\
    \ = to!int(split(x, \"/\")[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n\
    \    int n_denominator = to!int(split(n, \"/\")[1]);\n    return (x_numerator\
    \ * n_denominator * n_numerator * x_denominator) % (x_denominator * n_denominator)\
    \ == 0;\n}", "{\n    int x_numerator = to!int(split(x, \"/\")[0]);\n    int x_denominator\
    \ = to!int(split(x, \"/\")[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n\
    \    int n_denominator = to!int(split(n, \"/\")[1]);\n    return (x_numerator\
    \ * n_denominator) % (x_denominator * n_numerator) == 0;\n}", "{\n    auto x_numerator\
    \ = to!int(split(x, \"/\")[0]);\n    auto x_denominator = to!int(split(x, \"/\"\
    )[1]);\n    auto n_numerator = to!int(split(n, \"/\")[0]);\n    auto n_denominator\
    \ = to!int(split(n, \"/\")[1]);\n    return x_numerator * n_denominator * n_numerator\
    \ * x_denominator % (x_denominator * n_denominator) == 0;\n}", "{\n    auto a\
    \ = split(x, \"/\");\n    auto b = split(n, \"/\");\n    return to!int(a[0]) *\
    \ to!int(b[1]) % to!int(a[1]) == 0;\n}", "{\n    int x_numerator = 0;\n    int\
    \ x_denominator = 0;\n    int n_numerator = 0;\n    int n_denominator = 0;\n \
    \   int i = 0;\n    while (x[i] != '/')\n    {\n        x_numerator = x_numerator\
    \ * 10 + (x[i] - '0');\n        i++;\n    }\n    i++;\n    while (i < x.length())\n\
    \    {\n        x_denominator = x_denominator * 10 + (x[i] - '0');\n        i++;\n\
    \    }\n    i = 0;\n    while (n[i] != '/')\n    {\n        n_numerator = n_numerator\
    \ * 10 + (n[i] - '0');\n        i++;\n    }\n    i++;\n    while (i < n.length())\n\
    \    {\n        n_denominator = n_denominator * 10 + (n[i] - '0');\n        i++;\n\
    \    }\n    return (x_numerator * n_denominator) % (x_denominator * n_numerator)\
    \ == 0;\n}", "{\n    auto x_num = to!int(split(x, \"/\")[0]);\n    auto x_den\
    \ = to!int(split(x, \"/\")[1]);\n    auto n_num = to!int(split(n, \"/\")[0]);\n\
    \    auto n_den = to!int(split(n, \"/\")[1]);\n    return (x_num * n_num) % (x_den\
    \ * n_den) == 0;\n}", "{\n    int x_num = to!int(split(x, \"/\")[0]);\n    int\
    \ x_den = to!int(split(x, \"/\")[1]);\n    int n_num = to!int(split(n, \"/\")[0]);\n\
    \    int n_den = to!int(split(n, \"/\")[1]);\n    return (x_num * n_den) % (x_den\
    \ * n_num) == 0;\n}", "{\n    int x_numerator = to!int(split(x, \"/\")[0]);\n\
    \    int x_denominator = to!int(split(x, \"/\")[1]);\n    int n_numerator = to!int(split(n,\
    \ \"/\")[0]);\n    int n_denominator = to!int(split(n, \"/\")[1]);\n    return\
    \ (x_numerator * n_denominator) % (x_denominator * n_numerator) == 0;\n}", "{\n\
    \    int x_num = stoi(x.substr(0, x.find(\"/\")));\n    int x_den = stoi(x.substr(x.find(\"\
    /\") + 1));\n    int n_num = stoi(n.substr(0, n.find(\"/\")));\n    int n_den\
    \ = stoi(n.substr(n.find(\"/\") + 1));\n    return (x_num * n_num) % (x_den *\
    \ n_den) == 0;\n}", "{\n    auto x_n = split(x, \"/\");\n    auto n_n = split(n,\
    \ \"/\");\n    return (to!int(x_n[0]) * to!int(n_n[1])) % to!int(x_n[1]) == 0;\n\
    }", "{\n    auto x_n = split(x, \"/\");\n    auto n_n = split(n, \"/\");\n   \
    \ return to!int(x_n[0]) * to!int(n_n[1]) % to!int(x_n[1]) == 0;\n}", "{\n    auto\
    \ x_num = to!int(split(x, \"/\")[0]);\n    auto x_den = to!int(split(x, \"/\"\
    )[1]);\n    auto n_num = to!int(split(n, \"/\")[0]);\n    auto n_den = to!int(split(n,\
    \ \"/\")[1]);\n    auto result = x_num * n_num;\n    return result % (x_den *\
    \ n_den) == 0;\n}", "{\n    int x_numerator = to!int(split(x, \"/\")[0]);\n  \
    \  int x_denominator = to!int(split(x, \"/\")[1]);\n    int n_numerator = to!int(split(n,\
    \ \"/\")[0]);\n    int n_denominator = to!int(split(n, \"/\")[1]);\n    return\
    \ (x_numerator * n_denominator) % (x_denominator * n_numerator) == 0;\n}", "{\n\
    \    auto x_n = split(x, \"/\");\n    auto n_n = split(n, \"/\");\n    return\
    \ (to!int(x_n[0]) * to!int(n_n[1])) % to!int(x_n[1]) == 0;\n}", "{\n    auto x_num\
    \ = to!int(split(x, \"/\")[0]);\n    auto x_den = to!int(split(x, \"/\")[1]);\n\
    \    auto n_num = to!int(split(n, \"/\")[0]);\n    auto n_den = to!int(split(n,\
    \ \"/\")[1]);\n    return (x_num * n_num) % (x_den * n_den) == 0;\n}", "{\n  \
    \  int xn = stoi(x.substr(0, x.find(\"/\")));\n    int xd = stoi(x.substr(x.find(\"\
    /\") + 1));\n    int nn = stoi(n.substr(0, n.find(\"/\")));\n    int nd = stoi(n.substr(n.find(\"\
    /\") + 1));\n    return (xn * nn) % (xd * nd) == 0;\n}", "{\n    int x_numerator\
    \ = to!int(x[0..x.find(\"/\")]);\n    int x_denominator = to!int(x[x.find(\"/\"\
    )+1..$]);\n    int n_numerator = to!int(n[0..n.find(\"/\")]);\n    int n_denominator\
    \ = to!int(n[n.find(\"/\")+1..$]);\n    int numerator = x_numerator * n_numerator;\n\
    \    int denominator = x_denominator * n_denominator;\n    return numerator %\
    \ denominator == 0;\n}", "{\n    int x_numerator = to!int(split(x, \"/\")[0]);\n\
    \    int x_denominator = to!int(split(x, \"/\")[1]);\n    int n_numerator = to!int(split(n,\
    \ \"/\")[0]);\n    int n_denominator = to!int(split(n, \"/\")[1]);\n    return\
    \ (x_numerator * n_denominator) % (x_denominator * n_numerator) == 0;\n}", "{\n\
    \    int x_num, x_den, n_num, n_den;\n    int i = 0;\n    while (x[i] != '/')\n\
    \    {\n        x_num = x_num * 10 + (x[i] - '0');\n        i++;\n    }\n    i++;\n\
    \    while (i < x.length())\n    {\n        x_den = x_den * 10 + (x[i] - '0');\n\
    \        i++;\n    }\n    i = 0;\n    while (n[i] != '/')\n    {\n        n_num\
    \ = n_num * 10 + (n[i] - '0');\n        i++;\n    }\n    i++;\n    while (i <\
    \ n.length())\n    {\n        n_den = n_den * 10 + (n[i] - '0');\n        i++;\n\
    \    }\n    if (x_num * n_den == x_den * n_num)\n        return true;\n    return\
    \ false;\n}", "{\n    auto x_ = split(x, \"/\");\n    auto n_ = split(n, \"/\"\
    );\n    return to!int(x_[0]) * to!int(n_[1]) % to!int(x_[1]) == 0;\n}", "{\n \
    \   auto x_num = to!int(split(x, \"/\")[0]);\n    auto x_den = to!int(split(x,\
    \ \"/\")[1]);\n    auto n_num = to!int(split(n, \"/\")[0]);\n    auto n_den =\
    \ to!int(split(n, \"/\")[1]);\n    auto x_n = x_num * n_num;\n    auto x_d = x_den\
    \ * n_den;\n    return x_n % x_d == 0;\n}", "{\n    auto x_nums = split(x, \"\
    /\");\n    auto n_nums = split(n, \"/\");\n    return to!int(x_nums[0]) * to!int(n_nums[1])\
    \ % to!int(x_nums[1]) == 0;\n}", "{\n    int x_numerator = to!int(x[0..x.find(\"\
    /\")]);\n    int x_denominator = to!int(x[x.find(\"/\")+1..$]);\n    int n_numerator\
    \ = to!int(n[0..n.find(\"/\")]);\n    int n_denominator = to!int(n[n.find(\"/\"\
    )+1..$]);\n    return (x_numerator * n_numerator) % (x_denominator * n_denominator)\
    \ == 0;\n}", "{\n    int x_numerator = to!int(split(x, \"/\")[0]);\n    int x_denominator\
    \ = to!int(split(x, \"/\")[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n\
    \    int n_denominator = to!int(split(n, \"/\")[1]);\n    return (x_numerator\
    \ * n_denominator) % (x_denominator * n_numerator) == 0;\n}", "{\n    int x_numerator,\
    \ x_denominator, n_numerator, n_denominator;\n    int i = 0;\n    while (x[i]\
    \ != '/')\n    {\n        x_numerator = x_numerator * 10 + (x[i] - '0');\n   \
    \     i++;\n    }\n    i++;\n    while (i < x.length())\n    {\n        x_denominator\
    \ = x_denominator * 10 + (x[i] - '0');\n        i++;\n    }\n    i = 0;\n    while\
    \ (n[i] != '/')\n    {\n        n_numerator = n_numerator * 10 + (n[i] - '0');\n\
    \        i++;\n    }\n    i++;\n    while (i < n.length())\n    {\n        n_denominator\
    \ = n_denominator * 10 + (n[i] - '0');\n        i++;\n    }\n    int numerator\
    \ = x_numerator * n_denominator;\n    int denominator = x_denominator * n_numerator;\n\
    \    if (numerator % denominator == 0)\n        return true;\n    else\n     \
    \   return false;\n}", "{\n    int x_num = to!int(split(x, \"/\")[0]);\n    int\
    \ x_den = to!int(split(x, \"/\")[1]);\n    int n_num = to!int(split(n, \"/\")[0]);\n\
    \    int n_den = to!int(split(n, \"/\")[1]);\n    return x_num * n_den % x_den\
    \ == 0 && n_num * x_den % n_den == 0;\n}", "{\n    auto x_numerator = to!int(split(x,\
    \ \"/\")[0]);\n    auto x_denominator = to!int(split(x, \"/\")[1]);\n    auto\
    \ n_numerator = to!int(split(n, \"/\")[0]);\n    auto n_denominator = to!int(split(n,\
    \ \"/\")[1]);\n    auto result = x_numerator * n_numerator;\n    auto result_denominator\
    \ = x_denominator * n_denominator;\n    return result % result_denominator ==\
    \ 0;\n}", "{\n    int x_numerator = stoi(x.substr(0, x.find(\"/\")));\n    int\
    \ x_denominator = stoi(x.substr(x.find(\"/\") + 1));\n    int n_numerator = stoi(n.substr(0,\
    \ n.find(\"/\")));\n    int n_denominator = stoi(n.substr(n.find(\"/\") + 1));\n\
    \    double x_value = x_numerator / (double)x_denominator;\n    double n_value\
    \ = n_numerator / (double)n_denominator;\n    double result = x_value * n_value;\n\
    \    return result - (int)result == 0;\n}", "{\n    int x_numerator = stoi(x.substr(0,\
    \ x.find(\"/\")));\n    int x_denominator = stoi(x.substr(x.find(\"/\") + 1));\n\
    \    int n_numerator = stoi(n.substr(0, n.find(\"/\")));\n    int n_denominator\
    \ = stoi(n.substr(n.find(\"/\") + 1));\n    return (x_numerator * n_denominator)\
    \ % (x_denominator * n_numerator) == 0;\n}", "{\n    auto x_num = to!int(split(x,\
    \ \"/\")[0]);\n    auto x_den = to!int(split(x, \"/\")[1]);\n    auto n_num =\
    \ to!int(split(n, \"/\")[0]);\n    auto n_den = to!int(split(n, \"/\")[1]);\n\
    \    return (x_num * n_num) % (x_den * n_den) == 0;\n}", "{\n    int x_numerator\
    \ = to!int(split(x, \"/\")[0]);\n    int x_denominator = to!int(split(x, \"/\"\
    )[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n    int n_denominator\
    \ = to!int(split(n, \"/\")[1]);\n    double x_result = x_numerator / cast(double)x_denominator;\n\
    \    double n_result = n_numerator / cast(double)n_denominator;\n    double result\
    \ = x_result * n_result;\n    return result == cast(int)result;\n}", "{\n    auto\
    \ x_numerator = to!int(split(x, \"/\")[0]);\n    auto x_denominator = to!int(split(x,\
    \ \"/\")[1]);\n    auto n_numerator = to!int(split(n, \"/\")[0]);\n    auto n_denominator\
    \ = to!int(split(n, \"/\")[1]);\n    return (x_numerator * n_denominator) % (x_denominator\
    \ * n_numerator) == 0;\n}", "{\n    auto x_n = split(x, \"/\");\n    auto n_n\
    \ = split(n, \"/\");\n    return to!int(x_n[0]) * to!int(n_n[1]) % to!int(x_n[1])\
    \ == 0;\n}", "{\n    auto x_num = to!int(split(x, \"/\")[0]);\n    auto x_den\
    \ = to!int(split(x, \"/\")[1]);\n    auto n_num = to!int(split(n, \"/\")[0]);\n\
    \    auto n_den = to!int(split(n, \"/\")[1]);\n    return (x_num * n_num) % (x_den\
    \ * n_den) == 0;\n}", "{\n    int x_numerator = stoi(x.substr(0, x.find(\"/\"\
    )));\n    int x_denominator = stoi(x.substr(x.find(\"/\") + 1));\n    int n_numerator\
    \ = stoi(n.substr(0, n.find(\"/\")));\n    int n_denominator = stoi(n.substr(n.find(\"\
    /\") + 1));\n    return (x_numerator * n_denominator) % (x_denominator * n_numerator)\
    \ == 0;\n}", "{\n    auto x_num = to!int(split(x, \"/\")[0]);\n    auto x_den\
    \ = to!int(split(x, \"/\")[1]);\n    auto n_num = to!int(split(n, \"/\")[0]);\n\
    \    auto n_den = to!int(split(n, \"/\")[1]);\n    auto x_n = x_num * n_num;\n\
    \    auto x_d = x_den * n_den;\n    return x_n % x_d == 0;\n}", "{\n    int x_numerator\
    \ = stoi(x.substr(0, x.find(\"/\")));\n    int x_denominator = stoi(x.substr(x.find(\"\
    /\") + 1));\n    int n_numerator = stoi(n.substr(0, n.find(\"/\")));\n    int\
    \ n_denominator = stoi(n.substr(n.find(\"/\") + 1));\n    return (x_numerator\
    \ * n_denominator) % (x_denominator * n_numerator) == 0;\n}", "{\n    int x_num,\
    \ x_den, n_num, n_den;\n    sscanf(x.c_str(), \"%d/%d\", &x_num, &x_den);\n  \
    \  sscanf(n.c_str(), \"%d/%d\", &n_num, &n_den);\n    return (x_num * n_den) %\
    \ (x_den * n_num) == 0;\n}", "{\n    auto x_n = split(x, \"/\");\n    auto n_n\
    \ = split(n, \"/\");\n    return (to!int(x_n[0]) * to!int(n_n[1])) % to!int(x_n[1])\
    \ == 0;\n}", "{\n    int x_numerator = to!int(split(x, \"/\")[0]);\n    int x_denominator\
    \ = to!int(split(x, \"/\")[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n\
    \    int n_denominator = to!int(split(n, \"/\")[1]);\n    return (x_numerator\
    \ * n_denominator * n_numerator * x_denominator) % (x_denominator * n_denominator)\
    \ == 0;\n}", "{\n    auto x_num = x.split(\"/\")[0].to!int;\n    auto x_den =\
    \ x.split(\"/\")[1].to!int;\n    auto n_num = n.split(\"/\")[0].to!int;\n    auto\
    \ n_den = n.split(\"/\")[1].to!int;\n    return (x_num * n_num) % (x_den * n_den)\
    \ == 0;\n}", "{\n    int x_numerator = stoi(x.substr(0, x.find('/')));\n    int\
    \ x_denominator = stoi(x.substr(x.find('/') + 1));\n    int n_numerator = stoi(n.substr(0,\
    \ n.find('/')));\n    int n_denominator = stoi(n.substr(n.find('/') + 1));\n \
    \   return (x_numerator * n_denominator) % (x_denominator * n_numerator) == 0;\n\
    }", "{\n    int x_numerator = stoi(x.substr(0, x.find(\"/\")));\n    int x_denominator\
    \ = stoi(x.substr(x.find(\"/\") + 1));\n    int n_numerator = stoi(n.substr(0,\
    \ n.find(\"/\")));\n    int n_denominator = stoi(n.substr(n.find(\"/\") + 1));\n\
    \    double result = (double)x_numerator * n_numerator / (x_denominator * n_denominator);\n\
    \    return floor(result) == result;\n}", "{\n    int a, b, c, d;\n    sscanf(x.c_str(),\
    \ \"%d/%d\", &a, &b);\n    sscanf(n.c_str(), \"%d/%d\", &c, &d);\n    return (a\
    \ * d) % (b * c) == 0;\n}", "{\n    auto x_num = to!int(split(x, \"/\")[0]);\n\
    \    auto x_den = to!int(split(x, \"/\")[1]);\n    auto n_num = to!int(split(n,\
    \ \"/\")[0]);\n    auto n_den = to!int(split(n, \"/\")[1]);\n    auto result =\
    \ x_num * n_num;\n    auto den = x_den * n_den;\n    return result % den == 0;\n\
    }", "{\n    int x_numerator = to!int(split(x, \"/\")[0]);\n    int x_denominator\
    \ = to!int(split(x, \"/\")[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n\
    \    int n_denominator = to!int(split(n, \"/\")[1]);\n    return (x_numerator\
    \ * n_denominator) % (x_denominator * n_numerator) == 0;\n}", "{\n    int x_numerator\
    \ = to!int(split(x, \"/\")[0]);\n    int x_denominator = to!int(split(x, \"/\"\
    )[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n    int n_denominator\
    \ = to!int(split(n, \"/\")[1]);\n    return (x_numerator * n_denominator) % (x_denominator\
    \ * n_numerator) == 0;\n}", "{\n    int x_numerator = to!int(x[0..x.find(\"/\"\
    )]);\n    int x_denominator = to!int(x[x.find(\"/\")+1..$]);\n    int n_numerator\
    \ = to!int(n[0..n.find(\"/\")]);\n    int n_denominator = to!int(n[n.find(\"/\"\
    )+1..$]);\n    return (x_numerator * n_numerator) % (x_denominator * n_denominator)\
    \ == 0;\n}", "{\n    auto x_num = to!int(split(x, \"/\")[0]);\n    auto x_den\
    \ = to!int(split(x, \"/\")[1]);\n    auto n_num = to!int(split(n, \"/\")[0]);\n\
    \    auto n_den = to!int(split(n, \"/\")[1]);\n    return (x_num * n_num) % (x_den\
    \ * n_den) == 0;\n}", "{\n    int x_numerator = stoi(x.substr(0, x.find(\"/\"\
    )));\n    int x_denominator = stoi(x.substr(x.find(\"/\") + 1));\n    int n_numerator\
    \ = stoi(n.substr(0, n.find(\"/\")));\n    int n_denominator = stoi(n.substr(n.find(\"\
    /\") + 1));\n    return (x_numerator * n_denominator) % (x_denominator * n_numerator)\
    \ == 0;\n}", "{\n    auto a = split(x, \"/\");\n    auto b = split(n, \"/\");\n\
    \    return (to!int(a[0]) * to!int(b[1])) % to!int(a[1]) == 0;\n}", "{\n    auto\
    \ [x_num, x_den] = split(x, '/');\n    auto [n_num, n_den] = split(n, '/');\n\
    \    return (to!int(x_num) * to!int(n_den)) % (to!int(x_den) * to!int(n_num))\
    \ == 0;\n}", "{\n    int x_numerator = to!int(split(x, \"/\")[0]);\n    int x_denominator\
    \ = to!int(split(x, \"/\")[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n\
    \    int n_denominator = to!int(split(n, \"/\")[1]);\n    return (x_numerator\
    \ * n_denominator) % (x_denominator * n_numerator) == 0;\n}", "{\n    int x_numerator\
    \ = to!int(x[0..x.find(\"/\")]);\n    int x_denominator = to!int(x[x.find(\"/\"\
    )+1..$]);\n    int n_numerator = to!int(n[0..n.find(\"/\")]);\n    int n_denominator\
    \ = to!int(n[n.find(\"/\")+1..$]);\n    int numerator = x_numerator * n_numerator;\n\
    \    int denominator = x_denominator * n_denominator;\n    return denominator\
    \ % numerator == 0;\n}", "{\n    int xn = to!int(split(x, \"/\")[0]);\n    int\
    \ xd = to!int(split(x, \"/\")[1]);\n    int nn = to!int(split(n, \"/\")[0]);\n\
    \    int nd = to!int(split(n, \"/\")[1]);\n    return (xn * nd) % (xd * nn) ==\
    \ 0;\n}", "{\n    int x_num = 0;\n    int x_den = 0;\n    int n_num = 0;\n   \
    \ int n_den = 0;\n    int i = 0;\n    while (x[i] != '/')\n    {\n        x_num\
    \ = x_num * 10 + x[i] - '0';\n        i++;\n    }\n    i++;\n    while (i < x.length())\n\
    \    {\n        x_den = x_den * 10 + x[i] - '0';\n        i++;\n    }\n    i =\
    \ 0;\n    while (n[i] != '/')\n    {\n        n_num = n_num * 10 + n[i] - '0';\n\
    \        i++;\n    }\n    i++;\n    while (i < n.length())\n    {\n        n_den\
    \ = n_den * 10 + n[i] - '0';\n        i++;\n    }\n    int res_num = x_num * n_num;\n\
    \    int res_den = x_den * n_den;\n    return res_num % res_den == 0;\n}", "{\n\
    \    int x_numerator, x_denominator, n_numerator, n_denominator;\n    auto slash_pos\
    \ = x.find('/');\n    x_numerator = to!int(x[0..slash_pos]);\n    x_denominator\
    \ = to!int(x[slash_pos+1..$]);\n    slash_pos = n.find('/');\n    n_numerator\
    \ = to!int(n[0..slash_pos]);\n    n_denominator = to!int(n[slash_pos+1..$]);\n\
    \    return (x_numerator * n_denominator) % (x_denominator * n_numerator) == 0;\n\
    }", "{\n    int x_num = to!int(split(x, \"/\")[0]);\n    int x_den = to!int(split(x,\
    \ \"/\")[1]);\n    int n_num = to!int(split(n, \"/\")[0]);\n    int n_den = to!int(split(n,\
    \ \"/\")[1]);\n    double result = (double)x_num * n_num / (x_den * n_den);\n\
    \    return result == floor(result);\n}", "{\n    int x_numerator = to!int(split(x,\
    \ \"/\")[0]);\n    int x_denominator = to!int(split(x, \"/\")[1]);\n    int n_numerator\
    \ = to!int(split(n, \"/\")[0]);\n    int n_denominator = to!int(split(n, \"/\"\
    )[1]);\n    int x_times_n_numerator = x_numerator * n_numerator;\n    int x_times_n_denominator\
    \ = x_denominator * n_denominator;\n    return x_times_n_numerator % x_times_n_denominator\
    \ == 0;\n}", "{\n    int x_num = to!int(split(x, \"/\")[0]);\n    int x_den =\
    \ to!int(split(x, \"/\")[1]);\n    int n_num = to!int(split(n, \"/\")[0]);\n \
    \   int n_den = to!int(split(n, \"/\")[1]);\n    return (x_num * n_num) % (x_den\
    \ * n_den) == 0;\n}", "{\n    auto x_num = to!int(split(x, \"/\")[0]);\n    auto\
    \ x_den = to!int(split(x, \"/\")[1]);\n    auto n_num = to!int(split(n, \"/\"\
    )[0]);\n    auto n_den = to!int(split(n, \"/\")[1]);\n    auto x_n = x_num * n_num;\n\
    \    auto x_d = x_den * n_den;\n    return x_n % x_d == 0;\n}", "{\n    int x_numerator\
    \ = stoi(x.substr(0, x.find(\"/\")));\n    int x_denominator = stoi(x.substr(x.find(\"\
    /\") + 1));\n    int n_numerator = stoi(n.substr(0, n.find(\"/\")));\n    int\
    \ n_denominator = stoi(n.substr(n.find(\"/\") + 1));\n    return (x_numerator\
    \ * n_denominator) % (x_denominator * n_numerator) == 0;\n}", "{\n    // your\
    \ code goes here\n    int a, b, c, d;\n    sscanf(x.c_str(), \"%d/%d\", &a, &b);\n\
    \    sscanf(n.c_str(), \"%d/%d\", &c, &d);\n    return (a * d) % (b * c) == 0;\n\
    }", "{\n    int x1 = to!int(split(x, \"/\")[0]);\n    int x2 = to!int(split(x,\
    \ \"/\")[1]);\n    int n1 = to!int(split(n, \"/\")[0]);\n    int n2 = to!int(split(n,\
    \ \"/\")[1]);\n    return (x1 * n2) % (x2 * n1) == 0;\n}", "{\n    int x_numerator\
    \ = to!int(split(x, \"/\")[0]);\n    int x_denominator = to!int(split(x, \"/\"\
    )[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n    int n_denominator\
    \ = to!int(split(n, \"/\")[1]);\n    return (x_numerator * n_denominator) % (x_denominator\
    \ * n_numerator) == 0;\n}", "{\n    int x_numerator = to!int(split(x, \"/\")[0]);\n\
    \    int x_denominator = to!int(split(x, \"/\")[1]);\n    int n_numerator = to!int(split(n,\
    \ \"/\")[0]);\n    int n_denominator = to!int(split(n, \"/\")[1]);\n    double\
    \ result = (x_numerator * n_numerator) / (x_denominator * n_denominator);\n  \
    \  return modf(result, 0) == 0;\n}", "{\n    int x_numerator = to!int(split(x,\
    \ \"/\")[0]);\n    int x_denominator = to!int(split(x, \"/\")[1]);\n    int n_numerator\
    \ = to!int(split(n, \"/\")[0]);\n    int n_denominator = to!int(split(n, \"/\"\
    )[1]);\n    double result = (x_numerator * n_numerator) / (x_denominator * n_denominator);\n\
    \    return (result % 1 == 0);\n}", "{\n    auto x_n = split(x, \"/\");\n    auto\
    \ n_n = split(n, \"/\");\n    auto x_num = to!int(x_n[0]);\n    auto x_den = to!int(x_n[1]);\n\
    \    auto n_num = to!int(n_n[0]);\n    auto n_den = to!int(n_n[1]);\n    auto\
    \ num = x_num * n_num;\n    auto den = x_den * n_den;\n    return num % den ==\
    \ 0;\n}", "{\n    int x_numerator, x_denominator, n_numerator, n_denominator;\n\
    \    int i = 0;\n    string temp = \"\";\n    while (x[i] != '/')\n    {\n   \
    \     temp += x[i];\n        i++;\n    }\n    x_numerator = to!int(temp);\n  \
    \  temp = \"\";\n    i++;\n    while (i < x.length)\n    {\n        temp += x[i];\n\
    \        i++;\n    }\n    x_denominator = to!int(temp);\n    i = 0;\n    temp\
    \ = \"\";\n    while (n[i] != '/')\n    {\n        temp += n[i];\n        i++;\n\
    \    }\n    n_numerator = to!int(temp);\n    temp = \"\";\n    i++;\n    while\
    \ (i < n.length)\n    {\n        temp += n[i];\n        i++;\n    }\n    n_denominator\
    \ = to!int(temp);\n    return (x_numerator * n_denominator) % (x_denominator *\
    \ n_numerator) == 0;\n}", "{\n    int x_num, x_den, n_num, n_den;\n    auto slash_pos\
    \ = x.find('/');\n    x_num = stoi(x.substr(0, slash_pos));\n    x_den = stoi(x.substr(slash_pos\
    \ + 1));\n    slash_pos = n.find('/');\n    n_num = stoi(n.substr(0, slash_pos));\n\
    \    n_den = stoi(n.substr(slash_pos + 1));\n    return (x_num * n_den) % (x_den\
    \ * n_num) == 0;\n}", "{\n    int x_numerator = to!int(split(x, \"/\")[0]);\n\
    \    int x_denominator = to!int(split(x, \"/\")[1]);\n    int n_numerator = to!int(split(n,\
    \ \"/\")[0]);\n    int n_denominator = to!int(split(n, \"/\")[1]);\n    return\
    \ x_numerator * n_denominator * n_numerator * x_denominator % (x_denominator *\
    \ n_denominator) == 0;\n}", "{\n    int x_numerator = to!int(x[0..x.find('/')]);\n\
    \    int x_denominator = to!int(x[x.find('/')+1..$]);\n    int n_numerator = to!int(n[0..n.find('/')]);\n\
    \    int n_denominator = to!int(n[n.find('/')+1..$]);\n    return (x_numerator\
    \ * n_numerator) % (x_denominator * n_denominator) == 0;\n}", "{\n    int x_numerator\
    \ = stoi(x.substr(0, x.find(\"/\")));\n    int x_denominator = stoi(x.substr(x.find(\"\
    /\") + 1));\n    int n_numerator = stoi(n.substr(0, n.find(\"/\")));\n    int\
    \ n_denominator = stoi(n.substr(n.find(\"/\") + 1));\n    double result = (double)x_numerator\
    \ * n_numerator / (x_denominator * n_denominator);\n    return result == floor(result);\n\
    }", "{\n    auto x_n = split(x, \"/\");\n    auto n_n = split(n, \"/\");\n   \
    \ return (to!int(x_n[0]) * to!int(n_n[1])) % to!int(x_n[1]) == 0;\n}", "{\n  \
    \  int x_numerator, x_denominator, n_numerator, n_denominator;\n    sscanf(x.c_str(),\
    \ \"%d/%d\", &x_numerator, &x_denominator);\n    sscanf(n.c_str(), \"%d/%d\",\
    \ &n_numerator, &n_denominator);\n    return (x_numerator * n_denominator) % (x_denominator\
    \ * n_numerator) == 0;\n}", "{\n    int x_numerator = to!int(split(x, \"/\")[0]);\n\
    \    int x_denominator = to!int(split(x, \"/\")[1]);\n    int n_numerator = to!int(split(n,\
    \ \"/\")[0]);\n    int n_denominator = to!int(split(n, \"/\")[1]);\n    return\
    \ (x_numerator * n_denominator) % (x_denominator * n_numerator) == 0;\n}", "{\n\
    \    auto x_num = to!int(split(x, \"/\")[0]);\n    auto x_den = to!int(split(x,\
    \ \"/\")[1]);\n    auto n_num = to!int(split(n, \"/\")[0]);\n    auto n_den =\
    \ to!int(split(n, \"/\")[1]);\n    auto num = x_num * n_num;\n    auto den = x_den\
    \ * n_den;\n    return num % den == 0;\n}", "{\n    auto x_ = x.split(\"/\");\n\
    \    auto n_ = n.split(\"/\");\n    auto x_num = to!int(x_[0]);\n    auto x_den\
    \ = to!int(x_[1]);\n    auto n_num = to!int(n_[0]);\n    auto n_den = to!int(n_[1]);\n\
    \    auto num = x_num * n_num;\n    auto den = x_den * n_den;\n    return num\
    \ % den == 0;\n}", "{\n    int x_numerator = std.stoi(x.split(\"/\")[0]);\n  \
    \  int x_denominator = std.stoi(x.split(\"/\")[1]);\n    int n_numerator = std.stoi(n.split(\"\
    /\")[0]);\n    int n_denominator = std.stoi(n.split(\"/\")[1]);\n    return (x_numerator\
    \ * n_denominator) % (x_denominator * n_numerator) == 0;\n}", "{\n    auto x_num\
    \ = to!int(split(x, \"/\")[0]);\n    auto x_den = to!int(split(x, \"/\")[1]);\n\
    \    auto n_num = to!int(split(n, \"/\")[0]);\n    auto n_den = to!int(split(n,\
    \ \"/\")[1]);\n    auto result = x_num * n_num;\n    auto divisor = x_den * n_den;\n\
    \    return result % divisor == 0;\n}", "{\n    int x_numerator = 0;\n    int\
    \ x_denominator = 0;\n    int n_numerator = 0;\n    int n_denominator = 0;\n \
    \   int i = 0;\n    while (x[i] != '/')\n    {\n        x_numerator = x_numerator\
    \ * 10 + (x[i] - '0');\n        i++;\n    }\n    i++;\n    while (i < x.length())\n\
    \    {\n        x_denominator = x_denominator * 10 + (x[i] - '0');\n        i++;\n\
    \    }\n    i = 0;\n    while (n[i] != '/')\n    {\n        n_numerator = n_numerator\
    \ * 10 + (n[i] - '0');\n        i++;\n    }\n    i++;\n    while (i < n.length())\n\
    \    {\n        n_denominator = n_denominator * 10 + (n[i] - '0');\n        i++;\n\
    \    }\n    if (x_numerator * n_denominator * n_numerator * x_denominator % (x_denominator\
    \ * n_denominator) == 0)\n        return true;\n    else\n        return false;\n\
    }", "{\n    auto x_n = split(x, \"/\");\n    auto n_n = split(n, \"/\");\n   \
    \ return (to!int(x_n[0]) * to!int(n_n[1])) % to!int(x_n[1]) == 0;\n}", "{\n  \
    \  auto x_n = split(x, \"/\");\n    auto n_n = split(n, \"/\");\n    auto x_numerator\
    \ = to!int(x_n[0]);\n    auto x_denominator = to!int(x_n[1]);\n    auto n_numerator\
    \ = to!int(n_n[0]);\n    auto n_denominator = to!int(n_n[1]);\n    auto result\
    \ = x_numerator * n_denominator * n_numerator * x_denominator;\n    return result\
    \ % (x_denominator * n_denominator) == 0;\n}", "{\n    int x_numerator;\n    int\
    \ x_denominator;\n    int n_numerator;\n    int n_denominator;\n    int product_numerator;\n\
    \    int product_denominator;\n    int i;\n    int j;\n    int k;\n    int l;\n\
    \    int m;\n    int n;\n    int o;\n    int p;\n    int q;\n    int r;\n    int\
    \ s;\n    int t;\n    int u;\n    int v;\n    int w;\n    int x;\n    int y;\n\
    \    int z;\n    int a;\n    int b;\n    int c;\n    int d;\n    int e;\n    int\
    \ f;\n    int g;\n    int h;\n    int i;\n    int j;\n    int k;\n    int l;\n\
    \    int m;\n    int n;\n    int o;\n    int p;\n    int q;\n    int r;\n    int\
    \ s;\n    int t;\n    int u;\n    int v;\n    int w;\n    int x;\n    int y;\n\
    \    int z;\n    int a;\n    int b;\n    int c;\n    int d;\n    int e;\n    int\
    \ f;\n    int g;\n    int h;\n    int i;\n    int j;\n    int k;\n    int l;\n\
    \    int m;\n    int n;\n    int o;\n    int p;\n    int q;\n    int r;\n    int\
    \ s;\n    int t;\n    int u;\n    int v;\n    int w;\n    int x;\n    int y;\n\
    \    int z;\n    int a;\n    int b;\n    int c;\n    int d;\n    int e;\n    int\
    \ f;\n    int g;\n    int h;\n    int i;\n    int j;\n    int k;\n    int l;\n\
    \    int m;\n    int n;\n    int o;\n    int p;\n    int q;\n    int r;\n    int\
    \ s;\n    int t;\n    int u;\n", "{\n    auto p = split(x, \"/\");\n    auto q\
    \ = split(n, \"/\");\n    return (to!int(p[0]) * to!int(q[1])) % (to!int(p[1])\
    \ * to!int(q[0])) == 0;\n}", "{\n    int x_numerator = to!int(split(x, \"/\")[0]);\n\
    \    int x_denominator = to!int(split(x, \"/\")[1]);\n    int n_numerator = to!int(split(n,\
    \ \"/\")[0]);\n    int n_denominator = to!int(split(n, \"/\")[1]);\n    return\
    \ (x_numerator * n_denominator) % (x_denominator * n_numerator) == 0;\n}", "{\n\
    \    int x_numerator = to!int(x[0..x.find('/')]);\n    int x_denominator = to!int(x[x.find('/')+1..$]);\n\
    \    int n_numerator = to!int(n[0..n.find('/')]);\n    int n_denominator = to!int(n[n.find('/')+1..$]);\n\
    \    return (x_numerator * n_numerator) % (x_denominator * n_denominator) == 0;\n\
    }", "{\n    auto x_n = split(x, \"/\");\n    auto n_n = split(n, \"/\");\n   \
    \ return to!int(x_n[0]) * to!int(n_n[1]) % to!int(x_n[1]) == 0;\n}", "{\n    auto\
    \ x_num = to!int(split(x, \"/\")[0]);\n    auto x_den = to!int(split(x, \"/\"\
    )[1]);\n    auto n_num = to!int(split(n, \"/\")[0]);\n    auto n_den = to!int(split(n,\
    \ \"/\")[1]);\n    auto result = x_num * n_num;\n    auto den = x_den * n_den;\n\
    \    return result % den == 0;\n}", "{\n    int x_numerator = to!int(split(x,\
    \ \"/\")[0]);\n    int x_denominator = to!int(split(x, \"/\")[1]);\n    int n_numerator\
    \ = to!int(split(n, \"/\")[0]);\n    int n_denominator = to!int(split(n, \"/\"\
    )[1]);\n    int result_numerator = x_numerator * n_numerator;\n    int result_denominator\
    \ = x_denominator * n_denominator;\n    return result_numerator % result_denominator\
    \ == 0;\n}", "{\n    int x_numerator = stoi(x.substr(0, x.find(\"/\")));\n   \
    \ int x_denominator = stoi(x.substr(x.find(\"/\") + 1));\n    int n_numerator\
    \ = stoi(n.substr(0, n.find(\"/\")));\n    int n_denominator = stoi(n.substr(n.find(\"\
    /\") + 1));\n    return (x_numerator * n_denominator) % (x_denominator * n_numerator)\
    \ == 0;\n}", "{\n    int x_numerator = to!int(split(x, \"/\")[0]);\n    int x_denominator\
    \ = to!int(split(x, \"/\")[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n\
    \    int n_denominator = to!int(split(n, \"/\")[1]);\n    return (x_numerator\
    \ * n_denominator) % (x_denominator * n_numerator) == 0;\n}", "{\n    int x_numerator\
    \ = to!int(split(x, \"/\")[0]);\n    int x_denominator = to!int(split(x, \"/\"\
    )[1]);\n    int n_numerator = to!int(split(n, \"/\")[0]);\n    int n_denominator\
    \ = to!int(split(n, \"/\")[1]);\n    return (x_numerator * n_denominator) % (x_denominator\
    \ * n_numerator) == 0;\n}", "{\n    int x_numerator = to!int(split(x, \"/\")[0]);\n\
    \    int x_denominator = to!int(split(x, \"/\")[1]);\n    int n_numerator = to!int(split(n,\
    \ \"/\")[0]);\n    int n_denominator = to!int(split(n, \"/\")[1]);\n    return\
    \ (x_numerator * n_denominator * n_numerator * x_denominator) % (x_denominator\
    \ * n_denominator) == 0;\n}", "{\n    auto x_n = split(x, \"/\");\n    auto n_n\
    \ = split(n, \"/\");\n    return (to!int(x_n[0]) * to!int(n_n[1])) % to!int(x_n[1])\
    \ == 0;\n}", "{\n    auto x_n = split(x, \"/\");\n    auto n_n = split(n, \"/\"\
    );\n    auto x_num = to!int(x_n[0]);\n    auto x_den = to!int(x_n[1]);\n    auto\
    \ n_num = to!int(n_n[0]);\n    auto n_den = to!int(n_n[1]);\n    auto res = x_num\
    \ * n_num;\n    auto den = x_den * n_den;\n    return res % den == 0;\n}", "{\n\
    \    int x_num = to!int(x[0..x.find('/')]);\n    int x_den = to!int(x[x.find('/')+1..$]);\n\
    \    int n_num = to!int(n[0..n.find('/')]);\n    int n_den = to!int(n[n.find('/')+1..$]);\n\
    \    return (x_num * n_num) % (x_den * n_den) == 0;\n}", "{\n    int x_numerator\
    \ = stoi(x.substr(0, x.find('/')));\n    int x_denominator = stoi(x.substr(x.find('/')\
    \ + 1));\n    int n_numerator = stoi(n.substr(0, n.find('/')));\n    int n_denominator\
    \ = stoi(n.substr(n.find('/') + 1));\n    return (x_numerator * n_denominator)\
    \ % (x_denominator * n_numerator) == 0;\n}", "{\n    int x_numerator = stoi(x.substr(0,\
    \ x.find(\"/\")));\n    int x_denominator = stoi(x.substr(x.find(\"/\") + 1));\n\
    \    int n_numerator = stoi(n.substr(0, n.find(\"/\")));\n    int n_denominator\
    \ = stoi(n.substr(n.find(\"/\") + 1));\n    return (x_numerator * n_denominator)\
    \ % (x_denominator * n_numerator) == 0;\n}", "{\n    int x_numerator = to!int(split(x,\
    \ \"/\")[0]);\n    int x_denominator = to!int(split(x, \"/\")[1]);\n    int n_numerator\
    \ = to!int(split(n, \"/\")[0]);\n    int n_denominator = to!int(split(n, \"/\"\
    )[1]);\n    float result = float(x_numerator) * float(n_numerator) / (float(x_denominator)\
    \ * float(n_denominator));\n    return result == int(result);\n}", "{\n    int\
    \ x_numerator = stoi(x.substr(0, x.find(\"/\")));\n    int x_denominator = stoi(x.substr(x.find(\"\
    /\") + 1));\n    int n_numerator = stoi(n.substr(0, n.find(\"/\")));\n    int\
    \ n_denominator = stoi(n.substr(n.find(\"/\") + 1));\n    return (x_numerator\
    \ * n_denominator) % (x_denominator * n_numerator) == 0;\n}", "{\n    auto x_n\
    \ = split(x, \"/\");\n    auto n_n = split(n, \"/\");\n    auto x_num = to!int(x_n[0]);\n\
    \    auto x_den = to!int(x_n[1]);\n    auto n_num = to!int(n_n[0]);\n    auto\
    \ n_den = to!int(n_n[1]);\n    auto res = x_num * n_num;\n    auto den = x_den\
    \ * n_den;\n    return res % den == 0;\n}", "{\n    int x_numerator = to!int(split(x,\
    \ \"/\")[0]);\n    int x_denominator = to!int(split(x, \"/\")[1]);\n    int n_numerator\
    \ = to!int(split(n, \"/\")[0]);\n    int n_denominator = to!int(split(n, \"/\"\
    )[1]);\n    return (x_numerator * n_denominator) % (x_denominator * n_numerator)\
    \ == 0;\n}", "{\n    int x_num = stoi(x.substr(0, x.find(\"/\")));\n    int x_den\
    \ = stoi(x.substr(x.find(\"/\") + 1));\n    int n_num = stoi(n.substr(0, n.find(\"\
    /\")));\n    int n_den = stoi(n.substr(n.find(\"/\") + 1));\n    return (x_num\
    \ * n_num) % (x_den * n_den) == 0;\n}", "{\n    auto x_split = split(x, \"/\"\
    );\n    auto n_split = split(n, \"/\");\n    auto x_num = to!int(x_split[0]);\n\
    \    auto x_den = to!int(x_split[1]);\n    auto n_num = to!int(n_split[0]);\n\
    \    auto n_den = to!int(n_split[1]);\n    auto x_num_n = x_num * n_den;\n   \
    \ auto x_den_n = x_den * n_num;\n    return x_num_n % x_den_n == 0;\n}", "{\n\
    \    auto x_num = to!int(split(x, \"/\")[0]);\n    auto x_den = to!int(split(x,\
    \ \"/\")[1]);\n    auto n_num = to!int(split(n, \"/\")[0]);\n    auto n_den =\
    \ to!int(split(n, \"/\")[1]);\n    auto result = x_num * n_num / (x_den * n_den);\n\
    \    return result % 1 == 0;\n}", "{\n    int x_numerator = to!int(x[0..x.find(\"\
    /\")]);\n    int x_denominator = to!int(x[x.find(\"/\")+1..$]);\n    int n_numerator\
    \ = to!int(n[0..n.find(\"/\")]);\n    int n_denominator = to!int(n[n.find(\"/\"\
    )+1..$]);\n    return (x_numerator * n_numerator) % (x_denominator * n_denominator)\
    \ == 0;\n}", "{\n    auto x_n = split(x, \"/\");\n    auto n_n = split(n, \"/\"\
    );\n    return (to!int(x_n[0]) * to!int(n_n[1])) % to!int(x_n[1]) == 0;\n}", "{\n\
    \    int a = to!int(split(x, \"/\")[0]);\n    int b = to!int(split(x, \"/\")[1]);\n\
    \    int c = to!int(split(n, \"/\")[0]);\n    int d = to!int(split(n, \"/\")[1]);\n\
    \    return (a * d) % (b * c) == 0;\n}", "{\n    auto x_num = to!int(split(x,\
    \ \"/\")[0]);\n    auto x_den = to!int(split(x, \"/\")[1]);\n    auto n_num =\
    \ to!int(split(n, \"/\")[0]);\n    auto n_den = to!int(split(n, \"/\")[1]);\n\
    \    auto result = x_num * n_num;\n    auto den = x_den * n_den;\n    return result\
    \ % den == 0;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
