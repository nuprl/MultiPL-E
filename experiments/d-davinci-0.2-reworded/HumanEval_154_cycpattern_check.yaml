name: HumanEval_154_cycpattern_check
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nYou are given 2 words. You need\
  \ to return true if the second word or any of its rotations is a substring in the\
  \ first word\n    >>> cycpattern_check(\"abcd\", \"abd\")\n    false\n    >>> cycpattern_check(\"\
  hello\", \"ell\")\n    true\n    >>> cycpattern_check(\"whassup\", \"psus\")\n \
  \   false\n    >>> cycpattern_check(\"abab\", \"baa\")\n    true\n    >>> cycpattern_check(\"\
  efef\", \"eeff\")\n    false\n    >>> cycpattern_check(\"himenss\", \"simen\")\n\
  \    true\n\n    \n*/\nbool cycpattern_check(string a, string b) \n"
tests: "unittest\n{\n    alias candidate = cycpattern_check;\n\n    assert(candidate(\"\
  xyzw\", \"xyw\") == false);\n    assert(candidate(\"yello\", \"ell\") == true);\n\
  \    assert(candidate(\"whattup\", \"ptut\") == false);\n    assert(candidate(\"\
  efef\", \"fee\") == true);\n    assert(candidate(\"abab\", \"aabb\") == false);\n\
  \    assert(candidate(\"winemtt\", \"tinem\") == true);\n}\nvoid main(){}"
completions: ["{\n    if (a.length < b.length)\n        return false;\n    if (a.length\
    \ == b.length)\n        return a == b;\n    string c = a ~ a;\n    return c.canFind(b);\n\
    }", "{\n    if (a.length < b.length)\n        return false;\n    string c = b\
    \ + b;\n    return c.find(a) != -1;\n}", "{\n    if (a.length < b.length) return\
    \ false;\n    if (a.length == b.length) return a == b;\n    string c = a ~ a;\n\
    \    return c.find(b) != -1;\n}", "{\n    if (a.length < b.length)\n        return\
    \ false;\n    if (a.length == b.length)\n        return a == b;\n    auto a_len\
    \ = a.length;\n    auto b_len = b.length;\n    auto a_hash = 0;\n    auto b_hash\
    \ = 0;\n    auto a_pow = 1;\n    auto b_pow = 1;\n    for (int i = 0; i < b_len;\
    \ i++)\n    {\n        a_hash = a_hash * 31 + a[i];\n        b_hash = b_hash *\
    \ 31 + b[i];\n        a_pow *= 31;\n    }\n    a_pow /= 31;\n    for (int i =\
    \ 0; i < a_len - b_len; i++)\n    {\n        if (a_hash == b_hash)\n        {\n\
    \            if (a[i..i + b_len] == b)\n                return true;\n       \
    \ }\n        a_hash = a_hash * 31 + a[i + b_len] - a[i] * a_pow;\n    }\n    if\
    \ (a_hash == b_hash)\n    {\n        if (a[a_len - b_len..a_len] == b)\n     \
    \       return true;\n    }\n    return false;\n}", "{\n    if (a.length < b.length)\n\
    \        return false;\n    int i = 0;\n    while (i < a.length)\n    {\n    \
    \    if (a[i] == b[0])\n        {\n            int j = 0;\n            while (j\
    \ < b.length)\n            {\n                if (a[(i + j) % a.length] != b[j])\n\
    \                    break;\n                j++;\n            }\n           \
    \ if (j == b.length)\n                return true;\n        }\n        i++;\n\
    \    }\n    return false;\n}", "{\n    if (a.length < b.length)\n        return\
    \ false;\n    int n = b.length;\n    int m = a.length;\n    int i = 0;\n    int\
    \ j = 0;\n    while (i < m)\n    {\n        if (a[i] == b[j])\n        {\n   \
    \         if (j == n - 1)\n                return true;\n            i++;\n  \
    \          j++;\n        }\n        else\n        {\n            if (j != 0)\n\
    \            {\n                i = i - j;\n                j = 0;\n         \
    \   }\n            else\n                i++;\n        }\n    }\n    return false;\n\
    }", "{\n    if (a.length < b.length) \n        return false;\n    if (a.length\
    \ == b.length) \n        return a == b;\n    if (a.length == b.length + 1) \n\
    \        return a.indexOf(b) != -1;\n    if (a.length > b.length + 1) \n    {\n\
    \        return a.indexOf(b) != -1 || cycpattern_check(a.substr(1), b);\n    }\n\
    \    return false;\n}", "{\n    if (a.length < b.length) return false;\n    if\
    \ (a.length == b.length) return a == b;\n    int n = a.length;\n    int m = b.length;\n\
    \    int i = 0;\n    int j = 0;\n    int k = 0;\n    int[] lps = new int[m];\n\
    \    while (i < m) \n    {\n        if (b[i] == b[j]) \n        {\n          \
    \  lps[i] = j + 1;\n            i++;\n            j++;\n        }\n        else\
    \ \n        {\n            if (j != 0) \n            {\n                j = lps[j\
    \ - 1];\n            }\n            else \n            {\n                lps[i]\
    \ = 0;\n                i++;\n            }\n        }\n    }\n    i = 0;\n  \
    \  j = 0;\n    while (i < n) \n    {\n        if (a[i] == b[j]) \n        {\n\
    \            i++;\n            j++;\n        }\n        if (j == m) \n       \
    \ {\n            return true;\n        }\n        else if (i < n && a[i] != b[j])\
    \ \n        {\n            if (j != 0) \n            {\n                j = lps[j\
    \ - 1];\n            }\n            else \n            {\n                i++;\n\
    \            }\n        }\n    }\n    return false;\n}", "{\n    if (a.length\
    \ < b.length)\n        return false;\n    if (a.length == b.length)\n        return\
    \ a == b;\n    if (a.length == 0 || b.length == 0)\n        return false;\n  \
    \  if (a.length == 1 && b.length == 1)\n        return a == b;\n    if (a.length\
    \ == 2 && b.length == 2)\n        return a == b;\n    if (a.length == 2 && b.length\
    \ == 1)\n        return a[0] == b[0] || a[1] == b[0];\n    if (a.length == 1 &&\
    \ b.length == 2)\n        return a[0] == b[0] || a[0] == b[1];\n    if (a.length\
    \ == 3 && b.length == 3)\n        return a == b;\n    if (a.length == 3 && b.length\
    \ == 2)\n        return a[0] == b[0] && a[1] == b[1] || a[0] == b[1] && a[1] ==\
    \ b[0] || a[1] == b[0] && a[2] == b[1] || a[1] == b[1] && a[2] == b[0];\n    if\
    \ (a.length == 2 && b.length == 3)\n        return a[0] == b[0] && a[1] == b[1]\
    \ || a[0] == b[1] && a[1] == b[2] || a[0] == b[2] && a[1] == b[0];\n    if (a.length\
    \ == 4 && b.length == 4)\n        return a == b;\n    if (a.length == 4 && b.length\
    \ == 3)\n        return a[0] == b[0] && a[1] == b[1] && a[2] == b[2] || a[0] ==\
    \ b[1] && a[1] == b[2] && a[2] == b[0] || a[0] == b[2] && a[1] == b[0] && a[2]\
    \ == b[1] ||", "{\n    // TODO: Implement this function\n    return false;\n}",
  "{\n    auto len = a.length;\n    auto len2 = b.length;\n    if (len < len2) return\
    \ false;\n    if (len == len2) return a == b;\n    auto aa = a ~ a;\n    return\
    \ aa.find(b) != -1;\n}", "{\n    if (a.length < b.length)\n        return false;\n\
    \    if (a.length == b.length)\n        return a == b;\n    string c = a ~ a;\n\
    \    return c.find(b) != -1;\n}", "{\n    if (a.length < b.length) return false;\n\
    \    if (a.length == b.length) return a == b;\n    string c = a ~ a;\n    return\
    \ c.find(b) != -1;\n}", "{\n    if (a.length < b.length)\n        return false;\n\
    \    if (a.length == b.length)\n        return a == b;\n    if (a.length == b.length\
    \ + 1)\n        return a.indexOf(b) != -1;\n    return cycpattern_check(a.substr(1)\
    \ ~ a[0], b);\n}", "{\n    if (a.length < b.length)\n        return false;\n \
    \   if (a.length == b.length)\n        return a == b;\n    auto a_len = a.length;\n\
    \    auto b_len = b.length;\n    auto b_hash = 0;\n    auto a_hash = 0;\n    auto\
    \ hash_base = 1;\n    auto hash_mod = 1000000007;\n    for (auto i = 0; i < b_len;\
    \ i++)\n    {\n        b_hash = (b_hash * hash_base + b[i]) % hash_mod;\n    \
    \    a_hash = (a_hash * hash_base + a[i]) % hash_mod;\n    }\n    for (auto i\
    \ = 0; i < a_len - b_len; i++)\n    {\n        if (a_hash == b_hash)\n       \
    \ {\n            if (a[i..i + b_len] == b)\n                return true;\n   \
    \     }\n        a_hash = (a_hash * hash_base + a[i + b_len] - a[i] * pow(hash_base,\
    \ b_len)) % hash_mod;\n    }\n    if (a_hash == b_hash)\n    {\n        if (a[a_len\
    \ - b_len..a_len] == b)\n            return true;\n    }\n    return false;\n}",
  "{\n    if (a.length < b.length) return false;\n    if (a.length == b.length) return\
    \ a == b;\n    if (a.length == b.length + 1) return a.indexOf(b) != -1;\n    if\
    \ (a.length == b.length + 2) return a.indexOf(b) != -1 || a.indexOf(b[0..$-1])\
    \ != -1;\n    if (a.length == b.length + 3) return a.indexOf(b) != -1 || a.indexOf(b[0..$-1])\
    \ != -1 || a.indexOf(b[0..$-2]) != -1;\n    if (a.length == b.length + 4) return\
    \ a.indexOf(b) != -1 || a.indexOf(b[0..$-1]) != -1 || a.indexOf(b[0..$-2]) !=\
    \ -1 || a.indexOf(b[0..$-3]) != -1;\n    if (a.length == b.length + 5) return\
    \ a.indexOf(b) != -1 || a.indexOf(b[0..$-1]) != -1 || a.indexOf(b[0..$-2]) !=\
    \ -1 || a.indexOf(b[0..$-3]) != -1 || a.indexOf(b[0..$-4]) != -1;\n    if (a.length\
    \ == b.length + 6) return a.indexOf(b) != -1 || a.indexOf(b[0..$-1]) != -1 ||\
    \ a.indexOf(b[0..$-2]) != -1 || a.indexOf(b[0..$-3]) != -1 || a.indexOf(b[0..$-4])\
    \ != -1 || a.indexOf(b[0..$-5]) != -1;\n    if (a.length == b.length + 7) return\
    \ a.indexOf(b) != -1 || a.indexOf(b[0..$-1]) != -1 || a.indexOf(b[0..$-2]) !=\
    \ -1 || a.indexOf(b[", "{\n    if (a.length < b.length)\n        return false;\n\
    \    if (a.length == b.length)\n        return a == b;\n    int i = 0;\n    int\
    \ j = 0;\n    while (i < a.length)\n    {\n        if (a[i] == b[j])\n       \
    \ {\n            i++;\n            j++;\n            if (j == b.length)\n    \
    \            return true;\n        }\n        else\n        {\n            i =\
    \ i - j + 1;\n            j = 0;\n        }\n    }\n    return false;\n}", "{\n\
    \    if (a.length < b.length) return false;\n    if (a.length == b.length) return\
    \ a == b;\n    if (a.length == b.length + 1) return a.startsWith(b) || a.endsWith(b);\n\
    \    if (a.length == b.length + 2) return a.startsWith(b) || a.endsWith(b) ||\
    \ a.startsWith(b[$-1..$]) || a.endsWith(b[0..1]);\n    if (a.length == b.length\
    \ + 3) return a.startsWith(b) || a.endsWith(b) || a.startsWith(b[$-1..$]) || a.endsWith(b[0..1])\
    \ || a.startsWith(b[$-2..$]) || a.endsWith(b[0..2]);\n    if (a.length == b.length\
    \ + 4) return a.startsWith(b) || a.endsWith(b) || a.startsWith(b[$-1..$]) || a.endsWith(b[0..1])\
    \ || a.startsWith(b[$-2..$]) || a.endsWith(b[0..2]) || a.startsWith(b[$-3..$])\
    \ || a.endsWith(b[0..3]);\n    if (a.length == b.length + 5) return a.startsWith(b)\
    \ || a.endsWith(b) || a.startsWith(b[$-1..$]) || a.endsWith(b[0..1]) || a.startsWith(b[$-2..$])\
    \ || a.endsWith(b[0..2]) || a.startsWith(b[$-3..$]) || a.endsWith(b[0..3]) ||\
    \ a.startsWith(b[$-4..$]) || a.endsWith(b[0..4]);\n    if (a.length == b.length\
    \ + 6) return a.startsWith(b) || a.endsWith(b) || a.startsWith(b[$-1..$]) || a.endsWith(b",
  "{\n    if (a.length < b.length) return false;\n    if (a.length == b.length) return\
    \ a == b;\n    if (a.length == b.length + 1) return a.indexOf(b) != -1;\n    auto\
    \ aa = a.dup;\n    aa ~= aa[0..b.length];\n    return aa.indexOf(b) != -1;\n}",
  "{\n    if (a.length < b.length) return false;\n    if (a.length == b.length) return\
    \ a == b;\n    if (a.length == 0 || b.length == 0) return false;\n    string c\
    \ = a ~ a;\n    return c.find(b) != -1;\n}", "{\n    auto len = b.length;\n  \
    \  foreach(i; 0 .. len)\n    {\n        if(a.canFind(b))\n            return true;\n\
    \        b = b[1 .. $] ~ b[0 .. 1];\n    }\n    return false;\n}", "{\n    if\
    \ (a.length < b.length) return false;\n    if (a.length == b.length) return a\
    \ == b;\n    if (a.length == 0 || b.length == 0) return false;\n    string c =\
    \ a ~ a;\n    return c.find(b) != -1;\n}", "{\n    if (a.length < b.length)\n\
    \        return false;\n    auto b_len = b.length;\n    auto a_len = a.length;\n\
    \    auto a_len_minus_b_len = a_len - b_len;\n    auto a_len_minus_b_len_plus_1\
    \ = a_len_minus_b_len + 1;\n    auto a_len_minus_b_len_plus_2 = a_len_minus_b_len\
    \ + 2;\n    auto a_len_minus_b_len_plus_3 = a_len_minus_b_len + 3;\n    auto a_len_minus_b_len_plus_4\
    \ = a_len_minus_b_len + 4;\n    auto a_len_minus_b_len_plus_5 = a_len_minus_b_len\
    \ + 5;\n    auto a_len_minus_b_len_plus_6 = a_len_minus_b_len + 6;\n    auto a_len_minus_b_len_plus_7\
    \ = a_len_minus_b_len + 7;\n    auto a_len_minus_b_len_plus_8 = a_len_minus_b_len\
    \ + 8;\n    auto a_len_minus_b_len_plus_9 = a_len_minus_b_len + 9;\n    auto a_len_minus_b_len_plus_10\
    \ = a_len_minus_b_len + 10;\n    auto a_len_minus_b_len_plus_11 = a_len_minus_b_len\
    \ + 11;\n    auto a_len_minus_b_len_plus_12 = a_len_minus_b_len + 12;\n    auto\
    \ a_len_minus_b_len_plus_13 = a_len_minus_b_len + 13;\n    auto a_len_minus_b_len_plus_14\
    \ = a_len_minus_b_len + 14;\n    auto a_len_minus_b_len_plus_15 = a_len_minus_b_len\
    \ + 15;\n    auto a_len_minus_b_len_plus_", "{\n    if (a.length < b.length) return\
    \ false;\n    if (a.length == b.length) return a == b;\n    string c = a ~ a;\n\
    \    return c.find(b) != -1;\n}", "{\n    if (a.length != b.length)\n        return\
    \ false;\n    else\n    {\n        string temp = b;\n        for (int i = 0; i\
    \ < a.length; i++)\n        {\n            if (a.find(temp) != -1)\n         \
    \       return true;\n            else\n            {\n                temp =\
    \ temp[temp.length - 1] ~ temp[0 .. temp.length - 2];\n            }\n       \
    \ }\n        return false;\n    }\n}", "{\n    if (a.length < b.length) \n   \
    \     return false;\n    if (a.length == b.length) \n        return a == b;\n\
    \    int[] z = z_function(b + a);\n    foreach (i; 0 .. b.length) \n    {\n  \
    \      if (z[i + b.length] == b.length) \n            return true;\n    }\n  \
    \  return false;\n}", "{\n    if (a.length < b.length)\n        return false;\n\
    \    if (a.length == b.length)\n        return a == b;\n    string c = a ~ a;\n\
    \    return c.find(b) != -1;\n}", "{\n    int n = a.length;\n    int m = b.length;\n\
    \    if (m > n)\n        return false;\n    int i = 0;\n    int j = 0;\n    while\
    \ (i < n)\n    {\n        if (a[i] == b[j])\n        {\n            i++;\n   \
    \         j++;\n        }\n        else\n        {\n            i = i - j + 1;\n\
    \            j = 0;\n        }\n        if (j == m)\n            return true;\n\
    \    }\n    return false;\n}", "{\n    int len_a = a.length;\n    int len_b =\
    \ b.length;\n    if (len_a < len_b)\n        return false;\n    if (len_a == len_b)\n\
    \        return a == b;\n    for (int i = 0; i < len_a; i++)\n    {\n        if\
    \ (a[i] == b[0])\n        {\n            int j = 0;\n            for (; j < len_b;\
    \ j++)\n            {\n                if (a[(i + j) % len_a] != b[j])\n     \
    \               break;\n            }\n            if (j == len_b)\n         \
    \       return true;\n        }\n    }\n    return false;\n}", "{\n    if (a.length\
    \ < b.length)\n        return false;\n    if (a.length == b.length)\n        return\
    \ a == b;\n    auto a_len = a.length;\n    auto b_len = b.length;\n    auto a_hash\
    \ = 0;\n    auto b_hash = 0;\n    auto a_hash_arr = new int[a_len];\n    auto\
    \ b_hash_arr = new int[b_len];\n    auto p = 31;\n    auto m = 1e9 + 9;\n    for\
    \ (int i = 0; i < a_len; i++)\n    {\n        a_hash = (a_hash + (a[i] - 'a' +\
    \ 1) * m.pow(i, p)) % p;\n        a_hash_arr[i] = a_hash;\n    }\n    for (int\
    \ i = 0; i < b_len; i++)\n    {\n        b_hash = (b_hash + (b[i] - 'a' + 1) *\
    \ m.pow(i, p)) % p;\n        b_hash_arr[i] = b_hash;\n    }\n    for (int i =\
    \ 0; i < a_len - b_len + 1; i++)\n    {\n        auto a_sub_hash = a_hash_arr[i\
    \ + b_len - 1];\n        if (i != 0)\n            a_sub_hash = (a_sub_hash - a_hash_arr[i\
    \ - 1] + p) % p;\n        if (a_sub_hash == b_hash_arr[b_len - 1])\n        {\n\
    \            if (a[i..i + b_len] == b)\n                return true;\n       \
    \ }\n    }\n    return false;\n}", "{\n    if (a.length > b.length)\n    {\n \
    \       return false;\n    }\n    else\n    {\n        int i = 0;\n        while\
    \ (i < b.length)\n        {\n            if (a[0] == b[i])\n            {\n  \
    \              int j = 0;\n                while (j < a.length)\n            \
    \    {\n                    if (a[j] != b[(i + j) % b.length])\n             \
    \       {\n                        break;\n                    }\n           \
    \         j++;\n                }\n                if (j == a.length)\n      \
    \          {\n                    return true;\n                }\n          \
    \  }\n            i++;\n        }\n        return false;\n    }\n}", "{\n    if\
    \ (a.length < b.length)\n        return false;\n    if (a.length == b.length)\n\
    \        return a == b;\n    string c = a ~ a;\n    return c.find(b) != -1;\n}",
  "{\n    if (a.length < b.length)\n        return false;\n    string temp = b + b;\n\
    \    return temp.find(a) != -1;\n}", "{\n    if (a.length < b.length)\n      \
    \  return false;\n    if (a.length == b.length)\n        return a == b;\n    if\
    \ (a.length == 0 || b.length == 0)\n        return false;\n    auto a_len = a.length;\n\
    \    auto b_len = b.length;\n    auto a_hash = 0;\n    auto b_hash = 0;\n    auto\
    \ a_hash_prev = 0;\n    auto b_hash_prev = 0;\n    auto a_hash_prev_prev = 0;\n\
    \    auto b_hash_prev_prev = 0;\n    auto a_hash_prev_prev_prev = 0;\n    auto\
    \ b_hash_prev_prev_prev = 0;\n    auto a_hash_prev_prev_prev_prev = 0;\n    auto\
    \ b_hash_prev_prev_prev_prev = 0;\n    auto a_hash_prev_prev_prev_prev_prev =\
    \ 0;\n    auto b_hash_prev_prev_prev_prev_prev = 0;\n    auto a_hash_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    auto b_hash_prev_prev_prev_prev_prev_prev = 0;\n    auto a_hash_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    auto b_hash_prev_prev_prev_prev_prev_prev_prev = 0;\n    auto a_hash_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    auto b_hash_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    auto\
    \ a_hash_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    auto b_hash_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    auto a_hash_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n\
    \    auto b_hash_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    auto\
    \ a_hash_prev_prev_prev_", "{\n    int a_len = a.length;\n    int b_len = b.length;\n\
    \    if (a_len < b_len)\n        return false;\n    if (a_len == b_len)\n    \
    \    return a == b;\n    for (int i = 0; i < a_len; i++)\n    {\n        if (a[i]\
    \ == b[0])\n        {\n            bool found = true;\n            for (int j\
    \ = 0; j < b_len; j++)\n            {\n                if (a[(i + j) % a_len]\
    \ != b[j])\n                {\n                    found = false;\n          \
    \          break;\n                }\n            }\n            if (found)\n\
    \                return true;\n        }\n    }\n    return false;\n}", "{\n \
    \   if (a.length < b.length) return false;\n    int n = a.length;\n    int m =\
    \ b.length;\n    int i = 0;\n    int j = 0;\n    while (i < n)\n    {\n      \
    \  if (a[i] == b[j])\n        {\n            i++;\n            j++;\n        }\n\
    \        else\n        {\n            i = i - j + 1;\n            j = 0;\n   \
    \     }\n        if (j == m) return true;\n    }\n    return false;\n}", "{\n\
    \    if (a.length < b.length)\n        return false;\n    if (a.length == b.length)\n\
    \        return a == b;\n    if (a.length == 0 || b.length == 0)\n        return\
    \ false;\n    if (a.length == 1)\n        return a[0] == b[0];\n    if (a.length\
    \ == 2)\n        return a[0] == b[0] && a[1] == b[1] || a[0] == b[1] && a[1] ==\
    \ b[0];\n    int m = a.length;\n    int n = b.length;\n    int i = 0;\n    int\
    \ j = 0;\n    int k = 0;\n    int[] lps = new int[n];\n    while (i < n)\n   \
    \ {\n        if (b[i] == b[k])\n        {\n            lps[i] = k + 1;\n     \
    \       i++;\n            k++;\n        }\n        else\n        {\n         \
    \   if (k != 0)\n                k = lps[k - 1];\n            else\n         \
    \   {\n                lps[i] = 0;\n                i++;\n            }\n    \
    \    }\n    }\n    i = 0;\n    while (i < m)\n    {\n        if (a[i] == b[j])\n\
    \        {\n            i++;\n            j++;\n        }\n        if (j == n)\n\
    \            return true;\n        else if (i < m && a[i] != b[j])\n        {\n\
    \            if (j != 0)\n                j = lps[j - 1];\n            else\n\
    \                i++;\n        }\n    }\n    return false;\n}", "{\n    if (a.length\
    \ < b.length) \n        return false;\n    if (a.length == b.length) \n      \
    \  return a == b;\n    auto a_len = a.length;\n    auto b_len = b.length;\n  \
    \  auto a_hash = 0;\n    auto b_hash = 0;\n    auto a_hash_prev = 0;\n    auto\
    \ b_hash_prev = 0;\n    auto a_hash_prev_prev = 0;\n    auto b_hash_prev_prev\
    \ = 0;\n    auto a_hash_prev_prev_prev = 0;\n    auto b_hash_prev_prev_prev =\
    \ 0;\n    auto a_hash_prev_prev_prev_prev = 0;\n    auto b_hash_prev_prev_prev_prev\
    \ = 0;\n    auto a_hash_prev_prev_prev_prev_prev = 0;\n    auto b_hash_prev_prev_prev_prev_prev\
    \ = 0;\n    auto a_hash_prev_prev_prev_prev_prev_prev = 0;\n    auto b_hash_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    auto a_hash_prev_prev_prev_prev_prev_prev_prev = 0;\n    auto b_hash_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    auto a_hash_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    auto\
    \ b_hash_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    auto a_hash_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    auto b_hash_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n  \
    \  auto a_hash_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    auto\
    \ b_hash_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    auto a_hash_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n", "{\n    auto n = a.length;\n    auto m = b.length;\n    if (n < m)\
    \ return false;\n    auto kmp = KMP(b);\n    auto kmp_res = kmp.search(a);\n \
    \   if (kmp_res.length) return true;\n    for (int i = 0; i < m; i++)\n    {\n\
    \        auto c = b[i];\n        auto idx = a.find(c);\n        if (idx == -1)\
    \ continue;\n        auto new_b = b[i..$] ~ b[0..i];\n        kmp_res = kmp.search(a);\n\
    \        if (kmp_res.length) return true;\n    }\n    return false;\n}", "{\n\
    \    if (a.length < b.length) return false;\n    if (a.length == b.length) return\
    \ a == b;\n    if (a.length == 0 || b.length == 0) return false;\n    if (a.length\
    \ == 1) return a[0] == b[0];\n    if (b.length == 1) return a.find(b[0]) != -1;\n\
    \    int n = a.length;\n    int m = b.length;\n    int i = 0;\n    int j = 0;\n\
    \    while (i < n) {\n        if (a[i] == b[j]) {\n            i++;\n        \
    \    j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n\
    \        }\n        if (j == m) return true;\n    }\n    return false;\n}", "{\n\
    \    if (a.length < b.length) return false;\n    if (a.length == b.length) return\
    \ a == b;\n    if (a.length == b.length + 1) return a.indexOf(b) != -1;\n    if\
    \ (a.length == b.length + 2) return a.indexOf(b) != -1 || a.indexOf(b[0..$-1])\
    \ != -1;\n    if (a.length == b.length + 3) return a.indexOf(b) != -1 || a.indexOf(b[0..$-1])\
    \ != -1 || a.indexOf(b[0..$-2]) != -1;\n    return false;\n}", "{\n    if (a.length\
    \ < b.length) return false;\n    if (a.length == b.length) return a == b;\n  \
    \  if (a.length == b.length + 1) return a.indexOf(b) != -1;\n    if (a.length\
    \ == b.length + 2) return a.indexOf(b) != -1 || a.indexOf(b[0..$-1]) != -1;\n\
    \    if (a.length == b.length + 3) return a.indexOf(b) != -1 || a.indexOf(b[0..$-1])\
    \ != -1 || a.indexOf(b[0..$-2]) != -1;\n    if (a.length == b.length + 4) return\
    \ a.indexOf(b) != -1 || a.indexOf(b[0..$-1]) != -1 || a.indexOf(b[0..$-2]) !=\
    \ -1 || a.indexOf(b[0..$-3]) != -1;\n    if (a.length == b.length + 5) return\
    \ a.indexOf(b) != -1 || a.indexOf(b[0..$-1]) != -1 || a.indexOf(b[0..$-2]) !=\
    \ -1 || a.indexOf(b[0..$-3]) != -1 || a.indexOf(b[0..$-4]) != -1;\n    if (a.length\
    \ == b.length + 6) return a.indexOf(b) != -1 || a.indexOf(b[0..$-1]) != -1 ||\
    \ a.indexOf(b[0..$-2]) != -1 || a.indexOf(b[0..$-3]) != -1 || a.indexOf(b[0..$-4])\
    \ != -1 || a.indexOf(b[0..$-5]) != -1;\n    if (a.length == b.length + 7) return\
    \ a.indexOf(b) != -1 || a.indexOf(b[0..$-1]) != -1 || a.indexOf(b[0..$-2]) !=\
    \ -1 || a.indexOf(b[", "{\n    if (a.length < b.length) return false;\n    if\
    \ (a.length == b.length) return a == b;\n    string c = b ~ b;\n    return c.find(a)\
    \ != -1;\n}", "{\n    if (a.length < b.length) \n        return false;\n    string\
    \ c = b ~ b;\n    return c.find(a) != -1;\n}", "{\n    // Write your code here\n\
    \    if(a.length < b.length) return false;\n    if(a.length == b.length) return\
    \ a == b;\n    int n = a.length;\n    int m = b.length;\n    int i = 0;\n    int\
    \ j = 0;\n    while(i < n)\n    {\n        if(a[i] == b[j])\n        {\n     \
    \       i++;\n            j++;\n        }\n        else\n        {\n         \
    \   i = i - j + 1;\n            j = 0;\n        }\n        if(j == m) return true;\n\
    \    }\n    return false;\n}", "{\n    if (a.length < b.length)\n        return\
    \ false;\n    if (a.length == b.length)\n        return a == b;\n    string c\
    \ = a ~ a;\n    return c.find(b) != -1;\n}", "{\n    if (a.length < b.length)\
    \ \n        return false;\n    if (a.length == b.length) \n        return a ==\
    \ b;\n    int i = 0;\n    while (i < a.length) \n    {\n        if (a[i] == b[0])\
    \ \n        {\n            int j = 0;\n            while (j < b.length) \n   \
    \         {\n                if (a[(i + j) % a.length] != b[j]) \n           \
    \         break;\n                j++;\n            }\n            if (j == b.length)\
    \ \n                return true;\n        }\n        i++;\n    }\n    return false;\n\
    }", "{\n    if (a.length < b.length)\n        return false;\n    else\n    {\n\
    \        string c = b ~ b;\n        if (c.find(a) != -1)\n            return true;\n\
    \        else\n            return false;\n    }\n}", "{\n    if (a.length < b.length)\
    \ \n        return false;\n    if (a.length == b.length) \n        return a ==\
    \ b;\n    auto i = 0;\n    while (i < a.length) \n    {\n        if (a[i] == b[0])\
    \ \n        {\n            auto j = 0;\n            while (j < b.length) \n  \
    \          {\n                if (a[(i + j) % a.length] != b[j]) \n          \
    \          break;\n                j++;\n            }\n            if (j == b.length)\
    \ \n                return true;\n        }\n        i++;\n    }\n    return false;\n\
    }", "{\n    if (a.length < b.length)\n        return false;\n    else if (a.length\
    \ == b.length)\n        return a == b;\n    else\n    {\n        int n = a.length;\n\
    \        int m = b.length;\n        int i = 0;\n        while (i < n)\n      \
    \  {\n            if (a[i] == b[0])\n            {\n                int j = 0;\n\
    \                while (j < m)\n                {\n                    if (a[(i\
    \ + j) % n] != b[j])\n                        break;\n                    j++;\n\
    \                }\n                if (j == m)\n                    return true;\n\
    \            }\n            i++;\n        }\n        return false;\n    }\n}",
  "{\n    if (a.length < b.length)\n        return false;\n    if (a.length == b.length)\n\
    \        return a == b;\n    int i = 0;\n    while (i < a.length)\n    {\n   \
    \     if (a[i] == b[0])\n        {\n            int j = 0;\n            while\
    \ (j < b.length)\n            {\n                if (a[(i + j) % a.length] !=\
    \ b[j])\n                    break;\n                j++;\n            }\n   \
    \         if (j == b.length)\n                return true;\n        }\n      \
    \  i++;\n    }\n    return false;\n}", "{\n    int n = a.length;\n    int m =\
    \ b.length;\n    if (m > n)\n        return false;\n    string s = a + a;\n  \
    \  return s.find(b) != string.npos;\n}", "{\n    // Write your code here\n   \
    \ if(a.length < b.length) return false;\n    if(a.length == b.length) return a\
    \ == b;\n    if(a.length == b.length + 1)\n    {\n        if(a.startsWith(b))\
    \ return true;\n        if(a.endsWith(b)) return true;\n        return false;\n\
    \    }\n    if(a.length == b.length + 2)\n    {\n        if(a.startsWith(b)) return\
    \ true;\n        if(a.endsWith(b)) return true;\n        if(a.startsWith(b[0..$-1]))\
    \ return true;\n        if(a.endsWith(b[1..$])) return true;\n        return false;\n\
    \    }\n    if(a.length == b.length + 3)\n    {\n        if(a.startsWith(b)) return\
    \ true;\n        if(a.endsWith(b)) return true;\n        if(a.startsWith(b[0..$-1]))\
    \ return true;\n        if(a.endsWith(b[1..$])) return true;\n        if(a.startsWith(b[0..$-2]))\
    \ return true;\n        if(a.endsWith(b[2..$])) return true;\n        return false;\n\
    \    }\n    if(a.length == b.length + 4)\n    {\n        if(a.startsWith(b)) return\
    \ true;\n        if(a.endsWith(b)) return true;\n        if(a.startsWith(b[0..$-1]))\
    \ return true;\n        if(a.endsWith(b[1..$])) return true;\n        if(a.startsWith(b[0..$-2]))\
    \ return true;\n        if(a.endsWith(b[2..$])) return true;\n        if(a.startsWith(b[0..$-3]))\
    \ return true;\n        if(a.endsWith(b[3..$])) return true;\n        return false;\n\
    \    }\n    if(a.length == b", "{\n    if (a.length < b.length)\n        return\
    \ false;\n    if (a.length == b.length)\n        return a == b;\n    auto a_len\
    \ = a.length;\n    auto b_len = b.length;\n    auto a_hash = 0;\n    auto b_hash\
    \ = 0;\n    auto a_hash_prev = 0;\n    auto b_hash_prev = 0;\n    auto a_hash_prev_prev\
    \ = 0;\n    auto b_hash_prev_prev = 0;\n    auto a_hash_prev_prev_prev = 0;\n\
    \    auto b_hash_prev_prev_prev = 0;\n    auto a_hash_prev_prev_prev_prev = 0;\n\
    \    auto b_hash_prev_prev_prev_prev = 0;\n    auto a_hash_prev_prev_prev_prev_prev\
    \ = 0;\n    auto b_hash_prev_prev_prev_prev_prev = 0;\n    auto a_hash_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    auto b_hash_prev_prev_prev_prev_prev_prev = 0;\n    auto a_hash_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    auto b_hash_prev_prev_prev_prev_prev_prev_prev = 0;\n    auto a_hash_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    auto b_hash_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    auto\
    \ a_hash_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    auto b_hash_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    auto a_hash_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n\
    \    auto b_hash_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    auto\
    \ a_hash_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    auto",
  "{\n    if (a.length < b.length)\n        return false;\n    if (a.length == b.length)\n\
    \        return a == b;\n    auto a_len = a.length;\n    auto b_len = b.length;\n\
    \    auto a_hash = 0;\n    auto b_hash = 0;\n    auto hash_base = 1;\n    for\
    \ (int i = 0; i < b_len; i++)\n    {\n        a_hash += a[i] * hash_base;\n  \
    \      b_hash += b[i] * hash_base;\n        hash_base *= 10;\n    }\n    if (a_hash\
    \ == b_hash)\n        return true;\n    for (int i = b_len; i < a_len; i++)\n\
    \    {\n        a_hash -= a[i - b_len] * hash_base / 10;\n        a_hash *= 10;\n\
    \        a_hash += a[i];\n        if (a_hash == b_hash)\n            return true;\n\
    \    }\n    return false;\n}", "{\n    // write your code here\n    if(a.length\
    \ < b.length)\n        return false;\n    if(a.length == b.length)\n        return\
    \ a == b;\n    string c = b + b;\n    return c.find(a) != -1;\n}", "{\n    if\
    \ (a.length < b.length)\n        return false;\n    string c = a ~ a;\n    return\
    \ c.find(b) != -1;\n}", "{\n    if (a.length < b.length)\n        return false;\n\
    \    string temp = b + b;\n    return temp.find(a) != -1;\n}", "{\n    string\
    \ c = a ~ a;\n    return c.find(b) != string.npos;\n}", "{\n    if (a.length <\
    \ b.length) return false;\n    if (a.length == b.length) return a == b;\n    if\
    \ (a.length == 0 || b.length == 0) return false;\n    auto a_len = a.length;\n\
    \    auto b_len = b.length;\n    auto a_arr = a.array;\n    auto b_arr = b.array;\n\
    \    auto a_hash = 0;\n    auto b_hash = 0;\n    auto a_hash_arr = new int[a_len];\n\
    \    auto b_hash_arr = new int[b_len];\n    auto base = 256;\n    auto mod = 1000000007;\n\
    \    auto p = 1;\n    for (auto i = 0; i < b_len - 1; i++)\n    {\n        p =\
    \ (p * base) % mod;\n    }\n    for (auto i = 0; i < a_len; i++)\n    {\n    \
    \    a_hash = (a_hash * base + a_arr[i]) % mod;\n        if (i < b_len - 1)\n\
    \        {\n            b_hash = (b_hash * base + b_arr[i]) % mod;\n        }\n\
    \    }\n    a_hash_arr[0] = a_hash;\n    b_hash_arr[0] = b_hash;\n    for (auto\
    \ i = 1; i < a_len - b_len + 1; i++)\n    {\n        a_hash = (a_hash - a_arr[i\
    \ - 1] * p) % mod;\n        if (a_hash < 0) a_hash += mod;\n        a_hash = (a_hash\
    \ * base + a_arr[i + b_len - 1]) % mod;\n        a_hash_arr[i] = a_hash;\n   \
    \ }\n    for (auto i = 1; i < b_len; i++)\n    {\n        b_hash = (b_hash - b_arr[i\
    \ - 1] * p) % mod;\n        if (b_hash < 0) b_hash += mod;\n        b_hash = (b_hash\
    \ * base + b_arr", "{\n    if (a.length < b.length)\n        return false;\n \
    \   if (a.length == b.length)\n        return a == b;\n    if (b.length == 1)\n\
    \        return a.canFind(b[0]);\n    auto c = a.length;\n    auto d = b.length;\n\
    \    auto e = a.length - b.length;\n    for (int i = 0; i < e; i++)\n    {\n \
    \       if (a[i] == b[0])\n        {\n            bool f = true;\n           \
    \ for (int j = 1; j < d; j++)\n            {\n                if (a[(i + j) %\
    \ c] != b[j])\n                {\n                    f = false;\n           \
    \         break;\n                }\n            }\n            if (f)\n     \
    \           return true;\n        }\n    }\n    return false;\n}", "{\n    int\
    \ n = a.length;\n    int m = b.length;\n    if (n < m)\n        return false;\n\
    \    string s = a + a;\n    for (int i = 0; i < n; i++)\n    {\n        if (s[i..i\
    \ + m] == b)\n            return true;\n    }\n    return false;\n}", "{\n   \
    \ auto a_len = a.length;\n    auto b_len = b.length;\n    if (a_len < b_len) return\
    \ false;\n    if (a_len == b_len) return a == b;\n    if (a_len == b_len + 1)\
    \ return a.startsWith(b) || a.endsWith(b);\n    if (a_len == b_len + 2) return\
    \ a.startsWith(b) || a.endsWith(b) || a[1..$-1].startsWith(b) || a[1..$-1].endsWith(b);\n\
    \    return false;\n}", "{\n    if (a.length < b.length) return false;\n    auto\
    \ b_len = b.length;\n    auto a_len = a.length;\n    auto a_len_minus_b_len =\
    \ a_len - b_len;\n    for (size_t i = 0; i < a_len_minus_b_len; i++)\n    {\n\
    \        if (a[i..i+b_len] == b) return true;\n    }\n    return false;\n}", "{\n\
    \    if (a.length < b.length)\n        return false;\n    if (a.length == b.length)\n\
    \        return a == b;\n    string c = b ~ b;\n    return c.find(a) != -1;\n}",
  "{\n    if (a.length < b.length)\n        return false;\n    if (a.length == b.length)\n\
    \        return a == b;\n    if (a.length == 0 || b.length == 0)\n        return\
    \ false;\n    auto a_len = a.length;\n    auto b_len = b.length;\n    auto a_hash\
    \ = a[0];\n    auto b_hash = b[0];\n    for (size_t i = 1; i < b_len; i++)\n \
    \   {\n        a_hash += a[i];\n        b_hash += b[i];\n    }\n    for (size_t\
    \ i = 0; i < a_len - b_len + 1; i++)\n    {\n        if (a_hash == b_hash)\n \
    \       {\n            if (a[i..i + b_len] == b)\n                return true;\n\
    \        }\n        if (i + b_len < a_len)\n            a_hash += a[i + b_len]\
    \ - a[i];\n    }\n    return false;\n}", "{\n    if (a.length < b.length) \n \
    \       return false;\n    if (a.length == b.length) \n        return a == b;\n\
    \    auto found = a.find(b);\n    if (found != string.npos) \n        return true;\n\
    \    for (int i = 0; i < b.length; i++) \n    {\n        b = b[$-1 .. $] ~ b[0\
    \ .. $-1];\n        found = a.find(b);\n        if (found != string.npos) \n \
    \           return true;\n    }\n    return false;\n}", "{\n    if (a.length <\
    \ b.length) return false;\n    if (a.length == b.length) return a == b;\n    if\
    \ (a.length == 0) return false;\n    if (b.length == 0) return true;\n    if (a.length\
    \ == 1) return a[0] == b[0];\n    if (b.length == 1) return a.find(b[0]) != -1;\n\
    \    int n = a.length;\n    int m = b.length;\n    int i = 0;\n    int j = 0;\n\
    \    while (i < n) {\n        if (a[i] == b[j]) {\n            j++;\n        \
    \    if (j == m) return true;\n        }\n        else {\n            j = 0;\n\
    \        }\n        i++;\n    }\n    return false;\n}", "{\n    if (a.length <\
    \ b.length) return false;\n    string c = b ~ b;\n    return c.find(a) != -1;\n\
    }", "{\n    bool result = false;\n    auto len = b.length;\n    auto len2 = a.length;\n\
    \    if (len2 < len)\n        return false;\n    auto b_rot = b;\n    for (int\
    \ i = 0; i < len; i++)\n    {\n        b_rot = b_rot[1..$] ~ b_rot[0..1];\n  \
    \      if (a.find(b_rot) != -1)\n        {\n            result = true;\n     \
    \       break;\n        }\n    }\n    return result;\n}", "{\n    if (a.length\
    \ < b.length)\n        return false;\n    if (a.length == b.length)\n        return\
    \ a == b;\n    auto c = a ~ a;\n    return c.find(b) != -1;\n}\n/*\nYou are given\
    \ a string and you need to find the number of occurrences of a substring in that\
    \ string.\n    >>> count_substring(\"ababababab\", \"ab\")\n    5\n    >>> count_substring(\"\
    ababababab\", \"ba\")\n    5\n    >>> count_substring(\"ababababab\", \"abab\"\
    )\n    3\n    >>> count_substring(\"ababababab\", \"ababab\")\n    2\n    >>>\
    \ count_substring(\"ababababab\", \"abababab\")\n    1\n    >>> count_substring(\"\
    ababababab\", \"ababababab\")\n    1\n    >>> count_substring(\"ababababab\",\
    \ \"abababababa\")\n    0\n    >>> count_substring(\"ababababab\", \"abababababab\"\
    )\n    0\n    >>> count_substring(\"ababababab\", \"\")\n    11\n    >>> count_substring(\"\
    ababababab\", \"a\")\n    5\n    >>> count_substring(\"ababababab\", \"b\")\n\
    \    5\n    >>> count_substring(\"ababababab\", \"c\")\n    0\n    >>> count_substring(\"\
    ababababab\", \"d\")\n    0\n    >>> count_substring(\"ababababab\", \"e\")\n\
    \    0\n    >>> count_substring(\"ababababab\", \"f\")\n    0\n    >>> count_substring(\"\
    ababababab\", \"g\")\n    0\n    >>> count_substring(\"ababababab\", \"h\")\n\
    \    0\n    >>> count_substring(\"ababababab\", \"i\")\n    0\n    >>> count_substring(\"\
    ababababab\", \"j\")\n    0\n    >>> count_substring(\"ababababab\", \"k\")\n\
    \    0\n    >>> count_substring", "{\n    int n = a.length;\n    int m = b.length;\n\
    \    if (m > n)\n        return false;\n    string c = a ~ a;\n    return c.find(b)\
    \ != -1;\n}", "{\n    int n = a.length;\n    int m = b.length;\n    if (m > n)\n\
    \        return false;\n    string s = a + a;\n    for (int i = 0; i < n; i++)\n\
    \    {\n        if (s[i..i + m] == b)\n            return true;\n    }\n    return\
    \ false;\n}", "{\n    if (a.length < b.length) return false;\n    if (a.length\
    \ == b.length) return a == b;\n    if (a.length == b.length + 1) return a.indexOf(b)\
    \ != -1;\n    if (a.length > b.length + 1) return cycpattern_check(a, b.slice(1)\
    \ ~ b[0]);\n}", "{\n    //TODO\n    return false;\n}", "{\n    if (a.length <\
    \ b.length)\n        return false;\n    if (a.length == b.length)\n        return\
    \ a == b;\n    if (a.length == b.length + 1)\n        return a.indexOf(b) != -1;\n\
    \    if (a.length > b.length + 1)\n    {\n        if (a.indexOf(b) != -1)\n  \
    \          return true;\n        for (int i = 0; i < b.length; i++)\n        {\n\
    \            if (a.indexOf(b[i..$]) != -1)\n                return true;\n   \
    \     }\n    }\n    return false;\n}", "{\n    if (a.length < b.length)\n    \
    \    return false;\n    string c = a ~ a;\n    return c.find(b) != -1;\n}", "{\n\
    \    if (a.length < b.length)\n        return false;\n    string c = a ~ a;\n\
    \    return c.find(b) != -1;\n}", "{\n    // Write your code here\n    if(a.length\
    \ < b.length)\n        return false;\n    else\n    {\n        string temp = b\
    \ + b;\n        if(temp.find(a) != -1)\n            return true;\n        else\n\
    \            return false;\n    }\n}", "{\n    if (a.length < b.length)\n    \
    \    return false;\n    if (a.length == b.length)\n        return a == b;\n  \
    \  if (a.length == b.length + 1)\n        return a[0..$-1] == b || a[1..$] ==\
    \ b;\n    return cycpattern_check(a[1..$], b);\n}", "{\n    if (a.length < b.length)\n\
    \        return false;\n    string c = b + b;\n    return c.find(a) != -1;\n}",
  "{\n    if (a.length < b.length)\n        return false;\n    if (a.length == b.length)\n\
    \        return a == b;\n    int i = 0;\n    while (i < a.length)\n    {\n   \
    \     if (a[i] == b[0])\n        {\n            int j = 0;\n            while\
    \ (j < b.length)\n            {\n                if (a[(i + j) % a.length] !=\
    \ b[j])\n                    break;\n                j++;\n            }\n   \
    \         if (j == b.length)\n                return true;\n        }\n      \
    \  i++;\n    }\n    return false;\n}", "{\n    if (a.length < b.length) return\
    \ false;\n    if (a.length == b.length) return a == b;\n    string c = a ~ a;\n\
    \    return c.find(b) != -1;\n}", "{\n    if (a.length < b.length)\n        return\
    \ false;\n    if (a.length == b.length)\n        return a == b;\n    string c\
    \ = a ~ a;\n    return c.find(b) != -1;\n}", "{\n    // your code goes here\n\
    \    string c = a + a;\n    return c.find(b) != string.npos;\n}", "{\n    if (a.length\
    \ < b.length)\n        return false;\n    if (a.length == b.length)\n        return\
    \ a == b;\n    string c = a ~ a;\n    return c.find(b) != -1;\n}", "{\n    if\
    \ (a.length < b.length) \n        return false;\n    if (a.length == b.length)\
    \ \n        return a == b;\n    string c = b ~ b;\n    return c.find(a) != -1;\n\
    }", "{\n    if (a.length < b.length)\n        return false;\n    if (a.length\
    \ == b.length)\n        return a == b;\n    for (int i = 0; i < a.length; i++)\n\
    \    {\n        if (a[i] == b[0])\n        {\n            bool found = true;\n\
    \            for (int j = 0; j < b.length; j++)\n            {\n             \
    \   if (a[(i + j) % a.length] != b[j])\n                {\n                  \
    \  found = false;\n                    break;\n                }\n           \
    \ }\n            if (found)\n                return true;\n        }\n    }\n\
    \    return false;\n}", "{\n    //TODO: Implement\n    return false;\n}", "{\n\
    \    if (a.length < b.length) \n        return false;\n    if (a.length == b.length)\
    \ \n        return a == b;\n    if (a.length == 0 || b.length == 0) \n       \
    \ return false;\n    if (a.length == 1 && b.length == 1) \n        return a ==\
    \ b;\n    if (a.length == 1 && b.length > 1) \n        return false;\n    if (a.length\
    \ > 1 && b.length == 1) \n        return a.find(b) != -1;\n    if (a.length >\
    \ 1 && b.length > 1) \n    {\n        if (a.find(b) != -1) \n            return\
    \ true;\n        else \n        {\n            string tmp = a[0..$-1];\n     \
    \       tmp ~= a[$-1];\n            return cycpattern_check(tmp, b);\n       \
    \ }\n    }\n    return false;\n}", "{\n    if (a.length < b.length)\n        return\
    \ false;\n    if (a.length == b.length)\n        return a == b;\n    auto c =\
    \ a ~ a;\n    return c.canFind(b);\n}", "{\n    if (a.length < b.length)\n   \
    \     return false;\n    if (a.length == b.length)\n        return a == b;\n \
    \   if (a.length == b.length + 1)\n        return a.indexOf(b) != -1;\n    return\
    \ cycpattern_check(a.dropRight(1), b) || cycpattern_check(a.dropFront(1), b);\n\
    }", "{\n    if (a.length < b.length) return false;\n    if (a.length == b.length)\
    \ return a == b;\n    if (a.length == 0 || b.length == 0) return false;\n    string\
    \ c = b + b;\n    return c.find(a) != -1;\n}", "{\n    if (a.length < b.length)\n\
    \        return false;\n    if (a.length == b.length)\n        return a == b;\n\
    \    int len = a.length;\n    int len2 = b.length;\n    int[] z = z_function(b\
    \ ~ a);\n    for (int i = len2; i < len + len2; i++)\n        if (z[i] == len2)\n\
    \            return true;\n    return false;\n}", "{\n    int n = a.length;\n\
    \    int m = b.length;\n    if (m > n)\n        return false;\n    string s =\
    \ a + a;\n    return s.find(b) != -1;\n}", "{\n    bool result = false;\n    if\
    \ (a.length < b.length)\n        return result;\n    else\n    {\n        int\
    \ i = 0;\n        while (i < a.length)\n        {\n            if (a[i] == b[0])\n\
    \            {\n                int j = 0;\n                while (j < b.length)\n\
    \                {\n                    if (a[(i + j) % a.length] != b[j])\n \
    \                       break;\n                    j++;\n                }\n\
    \                if (j == b.length)\n                {\n                    result\
    \ = true;\n                    break;\n                }\n            }\n    \
    \        i++;\n        }\n    }\n    return result;\n}", "{\n    if (a.length\
    \ < b.length) return false;\n    auto rotations = b.length;\n    while (rotations--)\n\
    \    {\n        if (a.find(b) != -1) return true;\n        b = b[1..$] ~ b[0..1];\n\
    \    }\n    return false;\n}", "{\n    if (a.length < b.length) return false;\n\
    \    if (a.length == b.length) return a == b;\n    auto c = a.length;\n    auto\
    \ d = b.length;\n    auto e = c - d;\n    auto f = a.length;\n    auto g = b.length;\n\
    \    auto h = f - g;\n    auto i = a.length;\n    auto j = b.length;\n    auto\
    \ k = i - j;\n    auto l = a.length;\n    auto m = b.length;\n    auto n = l -\
    \ m;\n    auto o = a.length;\n    auto p = b.length;\n    auto q = o - p;\n  \
    \  auto r = a.length;\n    auto s = b.length;\n    auto t = r - s;\n    auto u\
    \ = a.length;\n    auto v = b.length;\n    auto w = u - v;\n    auto x = a.length;\n\
    \    auto y = b.length;\n    auto z = x - y;\n    auto aa = a.length;\n    auto\
    \ ab = b.length;\n    auto ac = aa - ab;\n    auto ad = a.length;\n    auto ae\
    \ = b.length;\n    auto af = ad - ae;\n    auto ag = a.length;\n    auto ah =\
    \ b.length;\n    auto ai = ag - ah;\n    auto aj = a.length;\n    auto ak = b.length;\n\
    \    auto al = aj - ak;\n    auto am = a.length;\n    auto an = b.length;\n  \
    \  auto ao = am - an;\n    auto ap = a.length;\n    auto aq = b.length;\n    auto\
    \ ar = ap - aq;\n    auto as = a.length;\n    auto at = b.length;\n    auto au\
    \ = as - at;\n    auto av = a.length;\n    auto aw = b.length;\n    auto ax =\
    \ av - aw;\n    auto ay = a.length;\n    auto az = b.length;\n    auto ba = ay\
    \ - az;\n    auto bb = a.length", "{\n    int n = a.length;\n    int m = b.length;\n\
    \    if (n < m) return false;\n    int i = 0;\n    int j = 0;\n    while (i <\
    \ n && j < m) {\n        if (a[i] == b[j]) {\n            i++;\n            j++;\n\
    \        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n\
    \    }\n    if (j == m) return true;\n    i = 0;\n    j = 0;\n    while (i < n\
    \ && j < m) {\n        if (a[i] == b[j]) {\n            i++;\n            j++;\n\
    \        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n\
    \    }\n    if (j == m) return true;\n    return false;\n}", "{\n    if (a.length\
    \ < b.length) \n        return false;\n    if (a.length == b.length) \n      \
    \  return a == b;\n    auto a_len = a.length;\n    auto b_len = b.length;\n  \
    \  auto a_hash = 0;\n    auto b_hash = 0;\n    auto power = 1;\n    for (auto\
    \ i = 0; i < b_len; i++) {\n        power = (i > 0) ? power * 26 : 1;\n      \
    \  a_hash = a_hash * 26 + a[i];\n        b_hash = b_hash * 26 + b[i];\n    }\n\
    \    for (auto i = 0; i <= a_len - b_len; i++) {\n        if (a_hash == b_hash\
    \ && a[i..i + b_len] == b) \n            return true;\n        if (i < a_len -\
    \ b_len) \n            a_hash = a_hash - power * a[i] * 26 + a[i + b_len];\n \
    \   }\n    return false;\n}", "{\n    if (a.length < b.length)\n        return\
    \ false;\n    if (a.length == b.length)\n        return a == b;\n    string c\
    \ = a ~ a;\n    return c.find(b) != -1;\n}", "{\n    int a_len = a.length;\n \
    \   int b_len = b.length;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n  \
    \  int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n\
    \    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n\
    \    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n\
    \    int aa = 0;\n    int ab = 0;\n    int ac = 0;\n    int ad = 0;\n    int ae\
    \ = 0;\n    int af = 0;\n    int ag = 0;\n    int ah = 0;\n    int ai = 0;\n \
    \   int aj = 0;\n    int ak = 0;\n    int al = 0;\n    int am = 0;\n    int an\
    \ = 0;\n    int ao = 0;\n    int ap = 0;\n    int aq = 0;\n    int ar = 0;\n \
    \   int as = 0;\n    int at = 0;\n    int au = 0;\n    int av = 0;\n    int aw\
    \ = 0;\n    int ax = 0;\n    int ay = 0;\n    int az = 0;\n    int ba = 0;\n \
    \   int bb = 0;\n    int bc = 0;\n    int bd = 0;\n    int be = 0;\n    int bf\
    \ = 0;\n    int bg = 0;\n    int bh = 0;\n    int bi = 0;\n    int bj = 0;\n \
    \   int bk = 0;\n    int bl = 0;\n    int bm = 0;\n    int bn = 0;\n    int bo\
    \ = 0;\n    int bp = 0;\n    int bq = 0;\n    int br = 0;\n    int bs = 0;\n \
    \   int bt = 0;\n    int bu = 0;\n    int bv = 0;\n    int bw =", "{\n    if (a.length\
    \ < b.length)\n        return false;\n    string c = b ~ b;\n    return c.find(a)\
    \ != -1;\n}", "{\n    int n = a.length;\n    int m = b.length;\n    if (m > n)\
    \ return false;\n    int i = 0;\n    int j = 0;\n    while (i < n) {\n       \
    \ if (a[i] == b[j]) {\n            j++;\n            if (j == m) return true;\n\
    \        } else {\n            j = 0;\n        }\n        i++;\n    }\n    return\
    \ false;\n}", "{\n    if (a.length < b.length) return false;\n    if (a.length\
    \ == b.length) return a == b;\n    if (a.length == b.length + 1) return a.indexOf(b)\
    \ != -1;\n    if (a.length > b.length + 1)\n    {\n        string c = a.substr(0,\
    \ b.length);\n        if (c == b) return true;\n        return cycpattern_check(a.substr(1,\
    \ a.length), b);\n    }\n    return false;\n}", "{\n    if (a.length < b.length)\n\
    \        return false;\n    if (a.length == b.length)\n        return a == b;\n\
    \    auto len = b.length;\n    auto a_len = a.length;\n    auto b_len = b.length;\n\
    \    auto b_hash = 0;\n    auto a_hash = 0;\n    for (int i = 0; i < len; i++)\n\
    \    {\n        b_hash += b[i] * pow(10, i);\n        a_hash += a[i] * pow(10,\
    \ i);\n    }\n    for (int i = 0; i < a_len - b_len; i++)\n    {\n        if (a_hash\
    \ == b_hash)\n            return true;\n        a_hash -= a[i] * pow(10, len -\
    \ 1);\n        a_hash *= 10;\n        a_hash += a[i + len];\n    }\n    return\
    \ a_hash == b_hash;\n}", "{\n    if (a.length < b.length)\n        return false;\n\
    \    if (a.length == b.length)\n        return a == b;\n    if (a.length == b.length\
    \ + 1)\n        return a.indexOf(b) != -1;\n    if (a.length == b.length + 2)\n\
    \    {\n        if (a.indexOf(b) != -1)\n            return true;\n        return\
    \ a.indexOf(b[0..$-1]) != -1;\n    }\n    if (a.length == b.length + 3)\n    {\n\
    \        if (a.indexOf(b) != -1)\n            return true;\n        if (a.indexOf(b[0..$-1])\
    \ != -1)\n            return true;\n        return a.indexOf(b[0..$-2]) != -1;\n\
    \    }\n    if (a.length == b.length + 4)\n    {\n        if (a.indexOf(b) !=\
    \ -1)\n            return true;\n        if (a.indexOf(b[0..$-1]) != -1)\n   \
    \         return true;\n        if (a.indexOf(b[0..$-2]) != -1)\n            return\
    \ true;\n        return a.indexOf(b[0..$-3]) != -1;\n    }\n    if (a.length ==\
    \ b.length + 5)\n    {\n        if (a.indexOf(b) != -1)\n            return true;\n\
    \        if (a.indexOf(b[0..$-1]) != -1)\n            return true;\n        if\
    \ (a.indexOf(b[0..$-2]) != -1)\n            return true;\n        if (a.indexOf(b[0..$-3])\
    \ != -1)\n            return true;\n        return a.indexOf(b[0..$-4]) != -1;\n\
    \    }\n    if (a.length == b.length + 6)\n    {\n        if (a.indexOf(b) !=\
    \ -1)\n            return true;\n        if (a.indexOf(b[0..", "{\n    if (a.length\
    \ < b.length)\n        return false;\n    auto a_len = a.length;\n    auto b_len\
    \ = b.length;\n    auto a_arr = a.array;\n    auto b_arr = b.array;\n    auto\
    \ a_hash = 0;\n    auto b_hash = 0;\n    auto power = 1;\n    for (int i = 0;\
    \ i < b_len; i++)\n    {\n        power = (power * 31) % 1000000007;\n       \
    \ a_hash = (a_hash + (a_arr[i] - 'a' + 1) * power) % 1000000007;\n        b_hash\
    \ = (b_hash + (b_arr[i] - 'a' + 1) * power) % 1000000007;\n    }\n    if (a_hash\
    \ == b_hash && a.substr(0, b_len) == b)\n        return true;\n    for (int i\
    \ = b_len; i < a_len; i++)\n    {\n        a_hash = (a_hash - (a_arr[i - b_len]\
    \ - 'a' + 1)) % 1000000007;\n        if (a_hash < 0)\n            a_hash += 1000000007;\n\
    \        a_hash = (a_hash * 31) % 1000000007;\n        a_hash = (a_hash + (a_arr[i]\
    \ - 'a' + 1)) % 1000000007;\n        if (a_hash == b_hash && a.substr(i - b_len\
    \ + 1, b_len) == b)\n            return true;\n    }\n    return false;\n}", "{\n\
    \    if (a.length < b.length) return false;\n    if (a.length == b.length) return\
    \ a == b;\n    if (a.length == 0 || b.length == 0) return false;\n    int i =\
    \ 0;\n    int j = 0;\n    while (i < a.length)\n    {\n        if (a[i] == b[j])\n\
    \        {\n            j++;\n            if (j == b.length) return true;\n  \
    \      }\n        else\n        {\n            j = 0;\n        }\n        i++;\n\
    \    }\n    return false;\n}", "{\n    if (a.length < b.length)\n        return\
    \ false;\n    auto a_len = a.length;\n    auto b_len = b.length;\n    auto a_index\
    \ = 0;\n    auto b_index = 0;\n    while (a_index < a_len)\n    {\n        if\
    \ (a[a_index] == b[b_index])\n        {\n            a_index++;\n            b_index++;\n\
    \            if (b_index == b_len)\n                return true;\n        }\n\
    \        else\n        {\n            a_index = a_index - b_index + 1;\n     \
    \       b_index = 0;\n        }\n    }\n    return false;\n}", "{\n    if (a.length\
    \ < b.length) return false;\n    int n = a.length;\n    int m = b.length;\n  \
    \  int i = 0;\n    int j = 0;\n    while (i < n) {\n        if (a[i] == b[j])\
    \ {\n            i++;\n            j++;\n        } else {\n            i = i -\
    \ j + 1;\n            j = 0;\n        }\n        if (j == m) return true;\n  \
    \  }\n    return false;\n}", "{\n    if (a.length < b.length) return false;\n\
    \    if (a.length == b.length) return a == b;\n    if (a.length == 0 || b.length\
    \ == 0) return false;\n    if (a.length == 1) return a[0] == b[0];\n    if (b.length\
    \ == 1) return a.find(b[0]) != -1;\n    string c = a + a;\n    return c.find(b)\
    \ != -1;\n}", "{\n    if (a.length < b.length)\n        return false;\n    auto\
    \ rotations = b.length;\n    for (int i = 0; i < rotations; i++)\n    {\n    \
    \    if (a.find(b) != string.npos)\n            return true;\n        b = b[1..$]\
    \ ~ b[0..1];\n    }\n    return false;\n}", "{\n    if (a.length < b.length) return\
    \ false;\n    if (a.length == b.length) return a == b;\n    if (b.length == 1)\
    \ return a.indexOf(b[0]) != -1;\n    if (b.length == 2)\n    {\n        if (a.indexOf(b[0])\
    \ != -1 && a.indexOf(b[1]) != -1) return true;\n        if (a.indexOf(b[0]) !=\
    \ -1 && a.indexOf(b[1]) == -1) return false;\n        if (a.indexOf(b[0]) == -1\
    \ && a.indexOf(b[1]) != -1) return false;\n        if (a.indexOf(b[0]) == -1 &&\
    \ a.indexOf(b[1]) == -1) return false;\n    }\n    if (b.length > 2)\n    {\n\
    \        int i = 0;\n        while (i < a.length)\n        {\n            if (a[i]\
    \ == b[0])\n            {\n                int j = 0;\n                while (j\
    \ < b.length)\n                {\n                    if (a[(i + j) % a.length]\
    \ != b[j]) break;\n                    j++;\n                }\n             \
    \   if (j == b.length) return true;\n            }\n            i++;\n       \
    \ }\n    }\n    return false;\n}", "{\n    if (a.length < b.length) return false;\n\
    \    if (a.length == b.length) return a == b;\n    string c = b ~ b;\n    return\
    \ c.find(a) != -1;\n}", "{\n    // write your code here\n    if(a.length < b.length)\
    \ return false;\n    if(a.length == b.length) return a == b;\n    string c = b\
    \ + b;\n    return c.find(a) != string.npos;\n}", "{\n    int a_len = a.length;\n\
    \    int b_len = b.length;\n    if (a_len < b_len) return false;\n    string a_rot\
    \ = a;\n    for (int i = 0; i < a_len; i++) {\n        a_rot = a_rot[a_len-1..$]\
    \ ~ a_rot[0..a_len-2];\n        if (a_rot.find(b) != -1) return true;\n    }\n\
    \    return false;\n}", "{\n    if (a.length < b.length) return false;\n    if\
    \ (a.length == b.length) return a == b;\n    if (a.length == b.length + 1) return\
    \ a.indexOf(b) != -1;\n    if (a.length == b.length + 2) return a.indexOf(b) !=\
    \ -1 || a.indexOf(b[0..$-1]) != -1;\n    return false;\n}", "{\n    // check if\
    \ b is a substring of a\n    if (a.find(b) != string.npos)\n        return true;\n\
    \    \n    // check if any rotation of b is a substring of a\n    for (int i =\
    \ 0; i < b.length; i++)\n    {\n        b = b[1..$] ~ b[0..1];\n        if (a.find(b)\
    \ != string.npos)\n            return true;\n    }\n    return false;\n}", "{\n\
    \    if (a.length < b.length)\n        return false;\n    if (a.length == b.length)\n\
    \        return a == b;\n    auto a_ = a.length;\n    auto b_ = b.length;\n  \
    \  auto a_b_ = a_ - b_;\n    auto a_b_2 = a_b_ * 2;\n    auto a_2 = a_ * 2;\n\
    \    auto b_2 = b_ * 2;\n    auto a_2_b_ = a_2 - b_;\n    auto a_2_b_2 = a_2_b_\
    \ * 2;\n    auto a_2_b_2_ = a_2_b_2 - 1;\n    auto a_2_b_2_2 = a_2_b_2_ * 2;\n\
    \    auto a_2_b_2_2_ = a_2_b_2_2 - 1;\n    auto a_2_b_2_2_2 = a_2_b_2_2_ * 2;\n\
    \    auto a_2_b_2_2_2_ = a_2_b_2_2_2 - 1;\n    auto a_2_b_2_2_2_2 = a_2_b_2_2_2_\
    \ * 2;\n    auto a_2_b_2_2_2_2_ = a_2_b_2_2_2_2 - 1;\n    auto a_2_b_2_2_2_2_2\
    \ = a_2_b_2_2_2_2_ * 2;\n    auto a_2_b_2_2_2_2_2_ = a_2_b_2_2_2_2_2 - 1;\n  \
    \  auto a_2_b_2_2_2_2_2_2 = a_2_b_2_2_2_2_2_ * 2;\n    auto a_2_b_2_2_2_2_2_2_\
    \ = a_2_b_2_2_2_2_2_2 - 1;\n    auto a_2_b_2_", "{\n    if (a.length < b.length)\
    \ \n        return false;\n    int i = 0;\n    while (i < a.length) \n    {\n\
    \        if (a[i..$] ~ b) \n            return true;\n        a = a[1..$] ~ a[0..0];\n\
    \        i++;\n    }\n    return false;\n}", "{\n    if (a.length < b.length)\n\
    \        return false;\n    if (a.length == b.length)\n        return a == b;\n\
    \    if (a.length == b.length + 1)\n        return a.indexOf(b) != -1;\n    if\
    \ (a.length > b.length + 1)\n    {\n        if (a.indexOf(b) != -1)\n        \
    \    return true;\n        else\n        {\n            string c = a.dup;\n  \
    \          c.remove(0, 1);\n            c ~= a[0];\n            return cycpattern_check(c,\
    \ b);\n        }\n    }\n    return false;\n}", "{\n    //TODO: implement this\
    \ function\n    return false;\n}", "{\n    int n = a.length;\n    int m = b.length;\n\
    \    if (n < m)\n        return false;\n    if (n == m)\n        return a == b;\n\
    \    if (n == 0 || m == 0)\n        return false;\n    if (m == 1)\n        return\
    \ a.find(b[0]) != -1;\n    if (m == 2)\n    {\n        if (a.find(b[0]) == -1)\n\
    \            return false;\n        if (a.find(b[1]) == -1)\n            return\
    \ false;\n        return true;\n    }\n    int[] p = new int[m];\n    p[0] = 0;\n\
    \    int k = 0;\n    for (int i = 1; i < m; i++)\n    {\n        while (k > 0\
    \ && b[k] != b[i])\n            k = p[k - 1];\n        if (b[k] == b[i])\n   \
    \         k++;\n        p[i] = k;\n    }\n    int[] c = new int[n];\n    for (int\
    \ i = 0; i < n; i++)\n    {\n        while (k > 0 && b[k] != a[i])\n         \
    \   k = p[k - 1];\n        if (b[k] == a[i])\n            k++;\n        c[i] =\
    \ k;\n    }\n    for (int i = 0; i < n; i++)\n    {\n        if (c[i] == m)\n\
    \            return true;\n    }\n    return false;\n}", "{\n    if (a.length\
    \ < b.length)\n        return false;\n    int n = a.length;\n    int m = b.length;\n\
    \    int i = 0;\n    int j = 0;\n    while (i < n)\n    {\n        if (a[i] ==\
    \ b[j])\n        {\n            ++i;\n            ++j;\n        }\n        else\n\
    \        {\n            i = i - j + 1;\n            j = 0;\n        }\n      \
    \  if (j == m)\n            return true;\n    }\n    return false;\n}", "{\n \
    \   if (a.length < b.length) return false;\n    if (a.length == b.length) return\
    \ a == b;\n    if (a.length == b.length + 1) return a.indexOf(b) != -1;\n    if\
    \ (a.length == b.length + 2)\n    {\n        if (a.indexOf(b) != -1) return true;\n\
    \        if (a.indexOf(b[0..$-1]) != -1) return true;\n        if (a.indexOf(b[1..$])\
    \ != -1) return true;\n        return false;\n    }\n    if (a.length == b.length\
    \ + 3)\n    {\n        if (a.indexOf(b) != -1) return true;\n        if (a.indexOf(b[0..$-1])\
    \ != -1) return true;\n        if (a.indexOf(b[1..$]) != -1) return true;\n  \
    \      if (a.indexOf(b[0..$-2]) != -1) return true;\n        if (a.indexOf(b[2..$])\
    \ != -1) return true;\n        return false;\n    }\n    if (a.length == b.length\
    \ + 4)\n    {\n        if (a.indexOf(b) != -1) return true;\n        if (a.indexOf(b[0..$-1])\
    \ != -1) return true;\n        if (a.indexOf(b[1..$]) != -1) return true;\n  \
    \      if (a.indexOf(b[0..$-2]) != -1) return true;\n        if (a.indexOf(b[2..$])\
    \ != -1) return true;\n        if (a.indexOf(b[0..$-3]) != -1) return true;\n\
    \        if (a.indexOf(b[3..$]) != -1) return true;\n        return false;\n \
    \   }\n    if (a.length == b.length + 5)\n    {\n        if (a.indexOf(b) != -1)\
    \ return true;\n        if (a.indexOf(b[0", "{\n    int n = a.length;\n    int\
    \ m = b.length;\n    if (n < m) return false;\n    int j = 0;\n    for (int i\
    \ = 0; i < n; i++) {\n        if (a[i] == b[j]) {\n            j++;\n        \
    \    if (j == m) return true;\n        } else {\n            j = 0;\n        }\n\
    \    }\n    return false;\n}", "{\n    if (a.length < b.length)\n        return\
    \ false;\n    if (a.length == b.length)\n        return a == b;\n    if (a.length\
    \ == b.length + 1)\n        return a[0..$-1] == b || a[1..$] == b;\n    return\
    \ cycpattern_check(a[1..$], b);\n}", "{\n    // Write your code here\n    int\
    \ n = a.length;\n    int m = b.length;\n    if(m > n)\n        return false;\n\
    \    string s = a + a;\n    for(int i = 0; i < n; i++)\n    {\n        if(s[i]\
    \ == b[0])\n        {\n            int j = 0;\n            while(j < m && s[i\
    \ + j] == b[j])\n                j++;\n            if(j == m)\n              \
    \  return true;\n        }\n    }\n    return false;\n}", "{\n    if (a.length\
    \ < b.length)\n        return false;\n    auto b_rot = b;\n    for (size_t i =\
    \ 0; i < b.length; i++)\n    {\n        if (a.find(b_rot) != string.npos)\n  \
    \          return true;\n        b_rot = b_rot[1..$] ~ b_rot[0..1];\n    }\n \
    \   return false;\n}", "{\n    if (a.length < b.length)\n        return false;\n\
    \    else if (a.length == b.length)\n        return a == b;\n    else\n    {\n\
    \        string c = a ~ a;\n        return c.find(b) != -1;\n    }\n}", "{\n \
    \   int n = a.length;\n    int m = b.length;\n    if (m > n) return false;\n \
    \   string s = a + a;\n    return s.find(b) != string.npos;\n}", "{\n    if (a.length\
    \ < b.length) return false;\n    if (a.length == b.length) return a == b;\n  \
    \  if (a.length == b.length + 1) return a.indexOf(b) != -1;\n    if (a.length\
    \ > b.length + 1)\n    {\n        string c = a.substr(0, b.length);\n        if\
    \ (c == b) return true;\n        return cycpattern_check(a.substr(1, a.length),\
    \ b);\n    }\n    return false;\n}", "{\n    if (a.length < b.length)\n      \
    \  return false;\n    if (a.length == b.length)\n        return a == b;\n    if\
    \ (a.length == b.length + 1)\n        return a.indexOf(b) != -1;\n    if (a.length\
    \ == b.length + 2)\n    {\n        if (a.indexOf(b) != -1)\n            return\
    \ true;\n        if (a.indexOf(b[0..$-1]) != -1)\n            return true;\n \
    \       if (a.indexOf(b[1..$]) != -1)\n            return true;\n        return\
    \ false;\n    }\n    if (a.length == b.length + 3)\n    {\n        if (a.indexOf(b)\
    \ != -1)\n            return true;\n        if (a.indexOf(b[0..$-1]) != -1)\n\
    \            return true;\n        if (a.indexOf(b[1..$]) != -1)\n           \
    \ return true;\n        if (a.indexOf(b[0..$-2]) != -1)\n            return true;\n\
    \        if (a.indexOf(b[2..$]) != -1)\n            return true;\n        return\
    \ false;\n    }\n    if (a.length == b.length + 4)\n    {\n        if (a.indexOf(b)\
    \ != -1)\n            return true;\n        if (a.indexOf(b[0..$-1]) != -1)\n\
    \            return true;\n        if (a.indexOf(b[1..$]) != -1)\n           \
    \ return true;\n        if (a.indexOf(b[0..$-2]) != -1)\n            return true;\n\
    \        if (a.indexOf(b[2..$]) != -1)\n            return true;\n        if (a.indexOf(b[0..$-3])\
    \ != -1)\n            return true;\n        if (a.indexOf(b[3..$]) != -1)\n  \
    \          return true;\n        return false;\n    }\n    if (a.length == b.length",
  "{\n    string c = a ~ a;\n    return c.find(b) != -1;\n}", "{\n    int len_a =\
    \ a.length;\n    int len_b = b.length;\n    if (len_a < len_b) return false;\n\
    \    if (len_a == len_b) return a == b;\n    for (int i = 0; i < len_a; i++)\n\
    \    {\n        if (a[i] == b[0])\n        {\n            int j = 0;\n       \
    \     while (j < len_b && a[(i + j) % len_a] == b[j])\n            {\n       \
    \         j++;\n            }\n            if (j == len_b) return true;\n    \
    \    }\n    }\n    return false;\n}", "{\n    if (a.length < b.length)\n     \
    \   return false;\n    if (a.length == b.length)\n        return a == b;\n   \
    \ auto a_ = a ~ a;\n    return a_.find(b) != string.npos;\n}", "{\n    if (a.length\
    \ < b.length)\n        return false;\n    if (a.length == b.length)\n        return\
    \ a == b;\n    auto len = b.length;\n    foreach (i; 0 .. a.length - len + 1)\n\
    \    {\n        if (a[i .. i + len - 1] == b)\n            return true;\n    }\n\
    \    return false;\n}", "{\n    if (a.length < b.length)\n        return false;\n\
    \    auto b_len = b.length;\n    auto a_len = a.length;\n    auto a_len_half =\
    \ a_len / 2;\n    auto b_len_half = b_len / 2;\n    auto a_len_half_plus_1 = a_len_half\
    \ + 1;\n    auto b_len_half_plus_1 = b_len_half + 1;\n    auto a_len_half_minus_1\
    \ = a_len_half - 1;\n    auto b_len_half_minus_1 = b_len_half - 1;\n    auto a_len_minus_1\
    \ = a_len - 1;\n    auto b_len_minus_1 = b_len - 1;\n    auto a_len_minus_b_len\
    \ = a_len - b_len;\n    auto a_len_minus_b_len_plus_1 = a_len_minus_b_len + 1;\n\
    \    auto a_len_minus_b_len_minus_1 = a_len_minus_b_len - 1;\n    auto a_len_minus_b_len_half\
    \ = a_len_minus_b_len / 2;\n    auto a_len_minus_b_len_half_plus_1 = a_len_minus_b_len_half\
    \ + 1;\n    auto a_len_minus_b_len_half_minus_1 = a_len_minus_b_len_half - 1;\n\
    \    auto a_len_minus_b_len_half_plus_b_len_half = a_len_minus_b_len_half + b_len_half;\n\
    \    auto a_len_minus_b_len_half_plus_b_len_half_plus_1 = a_len_minus_b_len_half_plus_b_len_half\
    \ + 1;\n    auto a_len_minus_b_len_half_plus_b_len_half_minus_1 = a_len_minus_b_len_half_plus_b_len_half\
    \ - 1;\n    auto a_len_minus_b_len", "{\n    if (a.length < b.length)\n      \
    \  return false;\n    foreach (i; 0 .. a.length)\n    {\n        if (a[i] == b[0])\n\
    \        {\n            int j = 0;\n            while (j < b.length && a[(i +\
    \ j) % a.length] == b[j])\n                j++;\n            if (j == b.length)\n\
    \                return true;\n        }\n    }\n    return false;\n}", "{\n \
    \   if (a.length < b.length) return false;\n    if (a.length == b.length) return\
    \ a == b;\n    int n = a.length;\n    int m = b.length;\n    int i = 0;\n    int\
    \ j = 0;\n    while (i < n)\n    {\n        if (a[i] == b[j])\n        {\n   \
    \         i++;\n            j++;\n        }\n        else\n        {\n       \
    \     i = i - j + 1;\n            j = 0;\n        }\n        if (j == m) return\
    \ true;\n    }\n    return false;\n}", "{\n    int n = a.length;\n    int m =\
    \ b.length;\n    if (n < m)\n        return false;\n    string s = a + a;\n  \
    \  return s.find(b) != -1;\n}", "{\n    if (a.length < b.length) return false;\n\
    \    auto a_len = a.length;\n    auto b_len = b.length;\n    auto a_hash = 0;\n\
    \    auto b_hash = 0;\n    auto hash_pow = 1;\n    for (int i = 0; i < b_len;\
    \ i++) {\n        a_hash += a[i] * hash_pow;\n        b_hash += b[i] * hash_pow;\n\
    \        hash_pow *= 2;\n    }\n    hash_pow /= 2;\n    for (int i = 0; i < a_len\
    \ - b_len; i++) {\n        if (a_hash == b_hash) {\n            if (a[i..i+b_len]\
    \ == b) return true;\n        }\n        a_hash -= a[i] * hash_pow;\n        a_hash\
    \ *= 2;\n        a_hash += a[i+b_len];\n    }\n    if (a_hash == b_hash) {\n \
    \       if (a[a_len-b_len..a_len] == b) return true;\n    }\n    return false;\n\
    }", "{\n    if (a.length < b.length)\n        return false;\n    if (a.length\
    \ == b.length)\n        return a == b;\n    auto c = a ~ a;\n    return c.find(b)\
    \ != -1;\n}", "{\n    int n = a.length;\n    int m = b.length;\n    if (m > n)\
    \ return false;\n    string c = a ~ a;\n    return c.find(b) != -1;\n}", "{\n\
    \    if (a.length < b.length) \n        return false;\n    if (a.length == b.length)\
    \ \n        return a == b;\n    string c = a ~ a;\n    return c.find(b) != -1;\n\
    }", "{\n    if (a.length < b.length)\n        return false;\n    auto a_len =\
    \ a.length;\n    auto b_len = b.length;\n    for (int i = 0; i < a_len; i++)\n\
    \    {\n        if (a[i] == b[0])\n        {\n            if (a[(i + 1) % a_len]\
    \ == b[1])\n            {\n                if (a[(i + 2) % a_len] == b[2])\n \
    \               {\n                    if (a[(i + 3) % a_len] == b[3])\n     \
    \               {\n                        return true;\n                    }\n\
    \                }\n            }\n        }\n    }\n    return false;\n}", "{\n\
    \    if (a.length < b.length)\n        return false;\n    int n = a.length;\n\
    \    int m = b.length;\n    for (int i = 0; i < n; i++)\n    {\n        if (a[i]\
    \ == b[0])\n        {\n            int j = 0;\n            for (; j < m; j++)\n\
    \            {\n                if (a[(i + j) % n] != b[j])\n                \
    \    break;\n            }\n            if (j == m)\n                return true;\n\
    \        }\n    }\n    return false;\n}", "{\n    string c = b ~ b;\n    return\
    \ c.canFind(a);\n}", "{\n    if (a.length < b.length) return false;\n    if (a.length\
    \ == b.length) return a == b;\n    if (a.length == 0 || b.length == 0) return\
    \ false;\n    // a.length > b.length\n    string c = b ~ b;\n    return c.find(a)\
    \ != -1;\n}", "{\n    // Your code here\n    if(a.length < b.length)\n       \
    \ return false;\n    string temp = a + a;\n    return temp.find(b) != -1;\n}",
  "{\n    if (a.length < b.length) \n        return false;\n    if (a.length == b.length)\
    \ \n        return a == b;\n    auto a_len = a.length;\n    auto b_len = b.length;\n\
    \    auto a_hash = 0;\n    auto b_hash = 0;\n    auto pow = 1;\n    for (int i\
    \ = 0; i < b_len; i++) {\n        pow = (i > 0) ? pow * 31 : 1;\n        a_hash\
    \ = a_hash * 31 + a[i];\n        b_hash = b_hash * 31 + b[i];\n    }\n    for\
    \ (int i = 0; i <= a_len - b_len; i++) {\n        if (a_hash == b_hash && a[i..i\
    \ + b_len] == b) \n            return true;\n        if (i < a_len - b_len) \n\
    \            a_hash = a_hash * 31 - a[i] * pow + a[i + b_len];\n    }\n    return\
    \ false;\n}", "{\n    if (a.length < b.length) return false;\n    if (a.length\
    \ == b.length) return a == b;\n    if (a.length == b.length + 1) return a.indexOf(b)\
    \ != -1;\n    return cycpattern_check(a.drop(1) ~ a.take(1), b);\n}", "{\n   \
    \ if (a.length < b.length)\n        return false;\n    string c = b + b;\n   \
    \ return c.find(a) != -1;\n}", "{\n    if (a.length < b.length)\n        return\
    \ false;\n    if (a.length == b.length)\n        return a == b;\n    if (a.length\
    \ == b.length + 1)\n        return a.indexOf(b) != -1;\n    if (a.length == b.length\
    \ + 2)\n    {\n        if (a.indexOf(b) != -1)\n            return true;\n   \
    \     return a.indexOf(b[0..$-1]) != -1;\n    }\n    if (a.length == b.length\
    \ + 3)\n    {\n        if (a.indexOf(b) != -1)\n            return true;\n   \
    \     if (a.indexOf(b[0..$-1]) != -1)\n            return true;\n        return\
    \ a.indexOf(b[0..$-2]) != -1;\n    }\n    return false;\n}", "{\n    if (a.length\
    \ < b.length)\n        return false;\n    if (a.length == b.length)\n        return\
    \ a == b;\n    auto c = a ~ a;\n    return c.canFind(b);\n}", "{\n    if (a.length\
    \ < b.length)\n        return false;\n    if (a.length == b.length)\n        return\
    \ a == b;\n    if (a.length == b.length + 1)\n        return a.indexOf(b) != -1;\n\
    \    if (a.length > b.length + 1)\n    {\n        string c = a.substr(0, b.length);\n\
    \        if (c == b)\n            return true;\n        else\n            return\
    \ cycpattern_check(a.substr(1, a.length), b);\n    }\n}", "{\n    // write your\
    \ code here\n    if(a.length < b.length)\n        return false;\n    if(a.length\
    \ == b.length)\n        return a == b;\n    if(a.length == 0 || b.length == 0)\n\
    \        return false;\n    auto a_len = a.length;\n    auto b_len = b.length;\n\
    \    auto a_hash = 0;\n    auto b_hash = 0;\n    auto a_hash_prev = 0;\n    auto\
    \ b_hash_prev = 0;\n    auto a_hash_prev_prev = 0;\n    auto b_hash_prev_prev\
    \ = 0;\n    auto a_hash_prev_prev_prev = 0;\n    auto b_hash_prev_prev_prev =\
    \ 0;\n    auto a_hash_prev_prev_prev_prev = 0;\n    auto b_hash_prev_prev_prev_prev\
    \ = 0;\n    auto a_hash_prev_prev_prev_prev_prev = 0;\n    auto b_hash_prev_prev_prev_prev_prev\
    \ = 0;\n    auto a_hash_prev_prev_prev_prev_prev_prev = 0;\n    auto b_hash_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    auto a_hash_prev_prev_prev_prev_prev_prev_prev = 0;\n    auto b_hash_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    auto a_hash_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    auto\
    \ b_hash_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    auto a_hash_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    auto b_hash_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n  \
    \  auto a_hash_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    auto\
    \ b_hash_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    auto a_hash",
  "{\n    if (a.length < b.length) return false;\n    if (a.length == b.length) return\
    \ a == b;\n    if (a.length == 0 || b.length == 0) return false;\n    if (a.length\
    \ == 1 && b.length == 1) return a == b;\n    if (a.length == 1 && b.length > 1)\
    \ return false;\n    if (a.length > 1 && b.length == 1) return a.find(b) != -1;\n\
    \    if (a.length > 1 && b.length > 1) {\n        if (a.find(b) != -1) return\
    \ true;\n        else {\n            string c = a.dup;\n            c = c[1..$];\n\
    \            c ~= a[0..0];\n            return cycpattern_check(c, b);\n     \
    \   }\n    }\n    return false;\n}", "{\n    if (a.length < b.length)\n      \
    \  return false;\n    if (a.length == b.length)\n        return a == b;\n    if\
    \ (a.length == b.length + 1)\n        return a.indexOf(b) != -1;\n    if (a.length\
    \ == b.length + 2)\n    {\n        if (a.indexOf(b) != -1)\n            return\
    \ true;\n        if (a.indexOf(b[0..$-1]) != -1)\n            return true;\n \
    \       if (a.indexOf(b[1..$]) != -1)\n            return true;\n        return\
    \ false;\n    }\n    if (a.length == b.length + 3)\n    {\n        if (a.indexOf(b)\
    \ != -1)\n            return true;\n        if (a.indexOf(b[0..$-1]) != -1)\n\
    \            return true;\n        if (a.indexOf(b[1..$]) != -1)\n           \
    \ return true;\n        if (a.indexOf(b[0..$-2]) != -1)\n            return true;\n\
    \        if (a.indexOf(b[2..$]) != -1)\n            return true;\n        return\
    \ false;\n    }\n    if (a.length == b.length + 4)\n    {\n        if (a.indexOf(b)\
    \ != -1)\n            return true;\n        if (a.indexOf(b[0..$-1]) != -1)\n\
    \            return true;\n        if (a.indexOf(b[1..$]) != -1)\n           \
    \ return true;\n        if (a.indexOf(b[0..$-2]) != -1)\n            return true;\n\
    \        if (a.indexOf(b[2..$]) != -1)\n            return true;\n        if (a.indexOf(b[0..$-3])\
    \ != -1)\n            return true;\n        if (a.indexOf(b[3..$]) != -1)\n  \
    \          return true;\n        return false;\n    }\n    if (a.length == b.length",
  "{\n    if (a.length < b.length) return false;\n    if (a.length == b.length) return\
    \ a == b;\n    if (a.length == b.length + 1) return a.indexOf(b) != -1;\n    if\
    \ (a.length == b.length + 2) return a.indexOf(b) != -1 || a.indexOf(b[0..$-1])\
    \ != -1;\n    if (a.length == b.length + 3) return a.indexOf(b) != -1 || a.indexOf(b[0..$-1])\
    \ != -1 || a.indexOf(b[0..$-2]) != -1;\n    if (a.length == b.length + 4) return\
    \ a.indexOf(b) != -1 || a.indexOf(b[0..$-1]) != -1 || a.indexOf(b[0..$-2]) !=\
    \ -1 || a.indexOf(b[0..$-3]) != -1;\n    if (a.length == b.length + 5) return\
    \ a.indexOf(b) != -1 || a.indexOf(b[0..$-1]) != -1 || a.indexOf(b[0..$-2]) !=\
    \ -1 || a.indexOf(b[0..$-3]) != -1 || a.indexOf(b[0..$-4]) != -1;\n    if (a.length\
    \ == b.length + 6) return a.indexOf(b) != -1 || a.indexOf(b[0..$-1]) != -1 ||\
    \ a.indexOf(b[0..$-2]) != -1 || a.indexOf(b[0..$-3]) != -1 || a.indexOf(b[0..$-4])\
    \ != -1 || a.indexOf(b[0..$-5]) != -1;\n    if (a.length == b.length + 7) return\
    \ a.indexOf(b) != -1 || a.indexOf(b[0..$-1]) != -1 || a.indexOf(b[0..$-2]) !=\
    \ -1 || a.indexOf(b[", "{\n    if (a.length < b.length) return false;\n    if\
    \ (a.length == b.length) return a == b;\n    if (a.length == 0 || b.length ==\
    \ 0) return false;\n    auto a_len = a.length;\n    auto b_len = b.length;\n \
    \   auto a_hash = a[0..b_len].hash;\n    auto b_hash = b.hash;\n    for (size_t\
    \ i = 0; i < a_len - b_len; i++)\n    {\n        if (a_hash == b_hash)\n     \
    \   {\n            if (a[i..i+b_len] == b) return true;\n        }\n        a_hash\
    \ = a_hash * 31 + a[i+b_len] - a[i] * pow(31, b_len);\n    }\n    return false;\n\
    }", "{\n    string c = a ~ a;\n    return c.find(b) != -1;\n}", "{\n    if (a.length\
    \ < b.length) return false;\n    if (a.length == b.length) return a == b;\n  \
    \  if (a.length == b.length + 1) return a.indexOf(b) != -1;\n    return cycpattern_check(a.slice(1)\
    \ ~ a[0], b);\n}", "{\n    if (a.length < b.length)\n        return false;\n \
    \   if (a.length == b.length)\n        return a == b;\n    if (a.length == b.length\
    \ + 1)\n        return a.indexOf(b) != -1;\n    if (a.length == b.length + 2)\n\
    \    {\n        if (a.indexOf(b) != -1)\n            return true;\n        if\
    \ (a.indexOf(b[0..$-1]) != -1)\n            return true;\n        if (a.indexOf(b[1..$])\
    \ != -1)\n            return true;\n        return false;\n    }\n    return false;\n\
    }", "{\n    if (a.length < b.length)\n        return false;\n    if (a.length\
    \ == b.length)\n        return a == b;\n    if (a.length == 0 || b.length == 0)\n\
    \        return false;\n    string aa = a ~ a;\n    return aa.find(b) != -1;\n\
    }", "{\n    if (a.length < b.length) \n        return false;\n    if (a.length\
    \ == b.length) \n        return a == b;\n    auto a_len = a.length;\n    auto\
    \ b_len = b.length;\n    auto b_len_half = b_len / 2;\n    auto b_len_half_plus\
    \ = b_len_half + 1;\n    auto b_len_half_minus = b_len_half - 1;\n    auto b_len_half_plus_mod\
    \ = b_len_half_plus % b_len;\n    auto b_len_half_minus_mod = b_len_half_minus\
    \ % b_len;\n    auto b_len_half_mod = b_len_half % b_len;\n    auto b_len_mod\
    \ = b_len % b_len;\n    auto b_len_plus = b_len + 1;\n    auto b_len_plus_mod\
    \ = b_len_plus % b_len;\n    auto b_len_minus = b_len - 1;\n    auto b_len_minus_mod\
    \ = b_len_minus % b_len;\n    auto b_len_minus_half = b_len_minus / 2;\n    auto\
    \ b_len_minus_half_mod = b_len_minus_half % b_len;\n    auto b_len_minus_half_plus\
    \ = b_len_minus_half + 1;\n    auto b_len_minus_half_plus_mod = b_len_minus_half_plus\
    \ % b_len;\n    auto b_len_minus_half_minus = b_len_minus_half - 1;\n    auto\
    \ b_len_minus_half_minus_mod = b_len_minus_half_minus % b_len;\n    auto b_len_minus_half_plus_half\
    \ = b_len_minus_half_plus / 2;\n    auto b_len_minus_half_plus_half_mod = b_len_minus_half_plus_half\
    \ % b_len;\n    auto b_len_minus_half_minus_half = b_len_minus_half_minus / 2;\n\
    \   ", "{\n    if (a.length < b.length) \n        return false;\n    string c\
    \ = a ~ a;\n    return c.find(b) != -1;\n}", "{\n    int n = a.length;\n    int\
    \ m = b.length;\n    if (m > n)\n        return false;\n    string s = a + a;\n\
    \    for (int i = 0; i < n; i++) \n    {\n        if (s[i..i + m] == b)\n    \
    \        return true;\n    }\n    return false;\n}", "{\n    if (a.length < b.length)\
    \ return false;\n    if (a.length == b.length) return a == b;\n    if (a.length\
    \ == 0 || b.length == 0) return false;\n    int n = a.length;\n    int m = b.length;\n\
    \    int i = 0;\n    int j = 0;\n    while (i < n)\n    {\n        if (a[i] ==\
    \ b[j])\n        {\n            i++;\n            j++;\n        }\n        else\n\
    \        {\n            i = i - j + 1;\n            j = 0;\n        }\n      \
    \  if (j == m) return true;\n    }\n    return false;\n}", "{\n    // your code\
    \ here\n    if(a.length < b.length)\n        return false;\n    int n = a.length;\n\
    \    int m = b.length;\n    for(int i = 0; i < n; i++)\n    {\n        if(a[i]\
    \ == b[0])\n        {\n            int j = 0;\n            for(; j < m; j++)\n\
    \            {\n                if(a[(i+j)%n] != b[j])\n                    break;\n\
    \            }\n            if(j == m)\n                return true;\n       \
    \ }\n    }\n    return false;\n}", "{\n    // your code here\n    auto len = a.length;\n\
    \    if(len != b.length)\n        return false;\n    auto b_rot = b;\n    for(int\
    \ i = 0; i < len; i++)\n    {\n        if(a.find(b_rot) != -1)\n            return\
    \ true;\n        b_rot = b_rot[1..$] ~ b_rot[0..0];\n    }\n    return false;\n\
    }", "{\n    // write your code here\n    //return a.find(b) != -1 || a.find(b.rotateRight(1))\
    \ != -1 || a.find(b.rotateRight(2)) != -1 || a.find(b.rotateRight(3)) != -1;\n\
    \    return a.find(b) != -1 || a.find(b.rotateRight(1)) != -1 || a.find(b.rotateRight(2))\
    \ != -1 || a.find(b.rotateRight(3)) != -1;\n}", "{\n    int n = a.length;\n  \
    \  int m = b.length;\n    if (n < m) return false;\n    if (n == m) return a ==\
    \ b;\n    string tmp = a + a;\n    return tmp.find(b) != string.npos;\n}", "{\n\
    \    if (a.length < b.length)\n        return false;\n    else if (a.length ==\
    \ b.length)\n        return a == b;\n    else\n    {\n        for (size_t i =\
    \ 0; i < a.length; i++)\n        {\n            if (a[i] == b[0])\n          \
    \  {\n                size_t j = 1;\n                for (; j < b.length; j++)\n\
    \                {\n                    if (a[(i + j) % a.length] != b[j])\n \
    \                       break;\n                }\n                if (j == b.length)\n\
    \                    return true;\n            }\n        }\n        return false;\n\
    \    }\n}", "{\n    if (a.length < b.length)\n        return false;\n    if (a.length\
    \ == b.length)\n        return a == b;\n    string c = a ~ a;\n    return c.find(b)\
    \ != -1;\n}", "{\n    if (a.length < b.length) return false;\n    if (a.length\
    \ == b.length) return a == b;\n    int len = b.length;\n    string c = a.substr(0,\
    \ len);\n    string d = a.substr(len, len);\n    return c == b || d == b || cycpattern_check(d\
    \ + c, b);\n}", "{\n    if (a.length < b.length)\n        return false;\n    if\
    \ (a.length == b.length)\n        return a == b;\n    auto a_len = a.length;\n\
    \    auto b_len = b.length;\n    auto a_hash = 0;\n    auto b_hash = 0;\n    auto\
    \ p = 1;\n    for (int i = 0; i < b_len; i++)\n    {\n        a_hash += a[i] *\
    \ p;\n        b_hash += b[i] * p;\n        p *= 10;\n    }\n    p /= 10;\n   \
    \ for (int i = 0; i < a_len - b_len; i++)\n    {\n        if (a_hash == b_hash)\n\
    \        {\n            if (a[i..i + b_len] == b)\n                return true;\n\
    \        }\n        a_hash -= a[i] * p;\n        a_hash *= 10;\n        a_hash\
    \ += a[i + b_len];\n    }\n    return false;\n}", "{\n    if (a.length < b.length)\
    \ return false;\n    if (a.length == b.length) return a == b;\n    if (a.length\
    \ == 0 || b.length == 0) return false;\n    if (a.length == 1) return a[0] ==\
    \ b[0];\n    if (b.length == 1) return a.find(b[0]) != -1;\n    string c = a +\
    \ a;\n    return c.find(b) != -1;\n}", "{\n    if (a.length < b.length) return\
    \ false;\n    if (a.length == b.length) return a == b;\n    string c = b + b;\n\
    \    return c.find(a) != -1;\n}", "{\n    if (a.length < b.length) return false;\n\
    \    if (a.length == b.length) return a == b;\n    if (a.length == b.length +\
    \ 1) return a.indexOf(b) != -1;\n    if (a.length > b.length + 1) return cycpattern_check(a.substr(1),\
    \ b) || cycpattern_check(a.substr(0, a.length - 1), b);\n    return false;\n}",
  "{\n    if (a.length < b.length)\n        return false;\n    if (a.length == b.length)\n\
    \        return a == b;\n    if (a.length == 0 || b.length == 0)\n        return\
    \ false;\n    if (a.length == 1 && b.length == 1)\n        return a == b;\n  \
    \  if (a.length == 1 && b.length > 1)\n        return false;\n    if (a.length\
    \ > 1 && b.length == 1)\n        return a.find(b) != -1;\n    if (a.length > 1\
    \ && b.length > 1)\n    {\n        if (a.find(b) != -1)\n            return true;\n\
    \        else\n        {\n            string c = b[0..$-1];\n            string\
    \ d = b[$-1..$];\n            string e = d ~ c;\n            return cycpattern_check(a,\
    \ e);\n        }\n    }\n}", "{\n    if (a.length < b.length) return false;\n\
    \    if (a.length == b.length) return a == b;\n    if (a.length == 0 || b.length\
    \ == 0) return false;\n    if (a.length == 1) return a[0] == b[0];\n    if (b.length\
    \ == 1) return a.find(b[0]) != -1;\n    int n = a.length;\n    int m = b.length;\n\
    \    int i = 0;\n    int j = 0;\n    int k = 0;\n    int[] lps = new int[m];\n\
    \    while (i < m)\n    {\n        if (b[i] == b[k])\n        {\n            lps[i]\
    \ = k + 1;\n            i++;\n            k++;\n        }\n        else\n    \
    \    {\n            if (k != 0)\n            {\n                k = lps[k - 1];\n\
    \            }\n            else\n            {\n                lps[i] = 0;\n\
    \                i++;\n            }\n        }\n    }\n    i = 0;\n    while\
    \ (i < n)\n    {\n        if (a[i] == b[j])\n        {\n            i++;\n   \
    \         j++;\n        }\n        if (j == m)\n        {\n            return\
    \ true;\n        }\n        else if (i < n && a[i] != b[j])\n        {\n     \
    \       if (j != 0)\n            {\n                j = lps[j - 1];\n        \
    \    }\n            else\n            {\n                i++;\n            }\n\
    \        }\n    }\n    return false;\n}", "{\n    // your code here\n    int n\
    \ = a.length;\n    int m = b.length;\n    if(m > n) return false;\n    string\
    \ s = a + a;\n    return s.find(b) != -1;\n}", "{\n    if (a.length < b.length)\n\
    \        return false;\n    string c = a ~ a;\n    return c.find(b) != -1;\n}",
  "{\n    int len_a = a.length;\n    int len_b = b.length;\n    if (len_a < len_b)\n\
    \        return false;\n    if (len_a == len_b)\n        return a == b;\n    string\
    \ c = a ~ a;\n    return c.find(b) != -1;\n}", "{\n    int n = a.length;\n   \
    \ int m = b.length;\n    int i = 0;\n    int j = 0;\n    while(i < n)\n    {\n\
    \        if(a[i] == b[j])\n        {\n            j++;\n        }\n        else\n\
    \        {\n            j = 0;\n        }\n        if(j == m)\n        {\n   \
    \         return true;\n        }\n        i++;\n    }\n    return false;\n}",
  "{\n    if (a.length < b.length)\n        return false;\n    if (a.length == b.length)\n\
    \        return a == b;\n    auto a_len = a.length;\n    auto b_len = b.length;\n\
    \    auto a_hash = 0;\n    auto b_hash = 0;\n    auto a_hash_prev = 0;\n    auto\
    \ b_hash_prev = 0;\n    auto a_hash_prev_prev = 0;\n    auto b_hash_prev_prev\
    \ = 0;\n    auto a_hash_prev_prev_prev = 0;\n    auto b_hash_prev_prev_prev =\
    \ 0;\n    auto a_hash_prev_prev_prev_prev = 0;\n    auto b_hash_prev_prev_prev_prev\
    \ = 0;\n    auto a_hash_prev_prev_prev_prev_prev = 0;\n    auto b_hash_prev_prev_prev_prev_prev\
    \ = 0;\n    auto a_hash_prev_prev_prev_prev_prev_prev = 0;\n    auto b_hash_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    auto a_hash_prev_prev_prev_prev_prev_prev_prev = 0;\n    auto b_hash_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    auto a_hash_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    auto\
    \ b_hash_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    auto a_hash_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    auto b_hash_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n  \
    \  auto a_hash_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    auto\
    \ b_hash_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    auto a_hash_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    auto", "{\n    if (a.length < b.length)\n        return false;\n \
    \   if (a.length == b.length)\n        return a == b;\n    auto rotations = a.length\
    \ - b.length;\n    for (int i = 0; i < rotations; i++)\n    {\n        if (a[i..$]\
    \ ~ b)\n            return true;\n    }\n    return false;\n}", "{\n    if (a.length\
    \ < b.length) \n        return false;\n    if (a.length == b.length) \n      \
    \  return a == b;\n    string c = a ~ a;\n    return c.find(b) != -1;\n}", "{\n\
    \    if (a.length < b.length)\n        return false;\n    if (a.length == b.length)\n\
    \        return a == b;\n    if (a.length == 0)\n        return false;\n    if\
    \ (b.length == 0)\n        return true;\n    string c = a ~ a;\n    return c.find(b)\
    \ != -1;\n}", "{\n    if (a.length < b.length)\n        return false;\n    int\
    \ len = b.length;\n    int i = 0;\n    while (i < a.length)\n    {\n        if\
    \ (a[i] == b[0])\n        {\n            if (a[i..i+len] == b)\n             \
    \   return true;\n            else\n            {\n                string c =\
    \ a[i..i+len];\n                string d = c[1..$] ~ c[0..0];\n              \
    \  if (d == b)\n                    return true;\n            }\n        }\n \
    \       i++;\n    }\n    return false;\n}", "{\n    //return true if b is a substring\
    \ of a\n    //return false otherwise\n    //b is a substring of a if b is a rotation\
    \ of a\n    //b is a rotation of a if b is a substring of a+a\n    //b is a substring\
    \ of a+a if b is a substring of a\n    //b is a substring of a if b is a substring\
    \ of a\n    //b is a substring of a if b is a substring of a\n    //b is a substring\
    \ of a if b is a substring of a\n    //b is a substring of a if b is a substring\
    \ of a\n    //b is a substring of a if b is a substring of a\n    //b is a substring\
    \ of a if b is a substring of a\n    //b is a substring of a if b is a substring\
    \ of a\n    //b is a substring of a if b is a substring of a\n    //b is a substring\
    \ of a if b is a substring of a\n    //b is a substring of a if b is a substring\
    \ of a\n    //b is a substring of a if b is a substring of a\n    //b is a substring\
    \ of a if b is a substring of a\n    //b is a substring of a if b is a substring\
    \ of a\n    //b is a substring of a if b is a substring of a\n    //b is a substring\
    \ of a if b is a substring of a\n    //b is a substring of a if b is a substring\
    \ of a\n    //b is a substring of a if b is a substring of a\n    //b is a substring\
    \ of a if b is a substring of a\n    //b is a substring of a if b is a substring\
    \ of a\n    //b is a substring of a if b is a substring of a\n    //b is a substring\
    \ of a if b is a substring of a\n    //b is a substring of a if b is a substring\
    \ of a\n    //b is a substring of a if b is a substring of a\n    //b is a substring\
    \ of a if b is a substring of a\n    //", "{\n    if (a.length < b.length)\n \
    \       return false;\n    if (a.length == b.length)\n        return a == b;\n\
    \    auto len = b.length;\n    auto b_hash = hash(b);\n    auto a_hash = hash(a[0..len]);\n\
    \    if (a_hash == b_hash)\n        return true;\n    for (int i = len; i < a.length;\
    \ i++)\n    {\n        a_hash = hash(a[i - len + 1..i + 1]);\n        if (a_hash\
    \ == b_hash)\n            return true;\n    }\n    return false;\n}", "{\n   \
    \ if (a.length < b.length) \n        return false;\n    if (a.length == b.length)\
    \ \n        return a == b;\n    string c = a ~ a;\n    return c.canFind(b);\n}",
  "{\n    if (a.length < b.length)\n        return false;\n    if (a.length == b.length)\n\
    \        return a == b;\n    auto a_rot = a;\n    for (int i = 0; i < a.length;\
    \ i++)\n    {\n        a_rot = a_rot[1..$] ~ a_rot[0..1];\n        if (a_rot.find(b)\
    \ != -1)\n            return true;\n    }\n    return false;\n}", "{\n    auto\
    \ a_len = a.length;\n    auto b_len = b.length;\n    if (a_len < b_len)\n    \
    \    return false;\n    if (a_len == b_len)\n        return a == b;\n    auto\
    \ a_hash = 0;\n    auto b_hash = 0;\n    auto a_hash_pow = 1;\n    auto b_hash_pow\
    \ = 1;\n    auto base = 256;\n    auto mod = 1000000007;\n    for (auto i = 0;\
    \ i < b_len; i++)\n    {\n        a_hash = (a_hash * base + a[i]) % mod;\n   \
    \     b_hash = (b_hash * base + b[i]) % mod;\n        a_hash_pow = (a_hash_pow\
    \ * base) % mod;\n    }\n    for (auto i = 0; i < a_len - b_len; i++)\n    {\n\
    \        if (a_hash == b_hash)\n            return true;\n        a_hash = (a_hash\
    \ * base + a[i + b_len] - a[i] * a_hash_pow) % mod;\n        if (a_hash < 0)\n\
    \            a_hash += mod;\n    }\n    if (a_hash == b_hash)\n        return\
    \ true;\n    return false;\n}", "{\n    if (a.length < b.length)\n        return\
    \ false;\n    if (a.length == b.length)\n        return a == b;\n    if (a.length\
    \ == b.length + 1)\n        return a.indexOf(b) != -1;\n    return cycpattern_check(a.slice(1)\
    \ ~ a[0], b);\n}", "{\n    if (a.length < b.length) return false;\n    int len\
    \ = b.length;\n    string c = b ~ b;\n    return c.find(a) != -1;\n}", "{\n  \
    \  if (a.length < b.length) \n        return false;\n    if (a.length == b.length)\
    \ \n        return a == b;\n    auto rotations = a.length - b.length;\n    for\
    \ (int i = 0; i < rotations; i++) \n    {\n        string c = a[i..$];\n     \
    \   c ~= a[0..i];\n        if (c.find(b) != -1) \n            return true;\n \
    \   }\n    return false;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
