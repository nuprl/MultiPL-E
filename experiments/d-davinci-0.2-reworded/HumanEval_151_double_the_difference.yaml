name: HumanEval_151_double_the_difference
language: d
prompt: "import std.math;\n/*\n\n    Given an array of numbers, return the sum of\
  \ squares of the numbers\n    in the array that are odd. Ignore numbers that are\
  \ negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n\
  \    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L,\
  \ -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input\
  \ array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n"
tests: "unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
  \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
  \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
  \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
  \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
completions: ["{\n    long sum = 0L;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0L && is(typeof(x) == int))\n        {\n            if(x % 2L == 1L)\n   \
    \         {\n                sum += x * x;\n            }\n        }\n    }\n\
    \    return sum;\n}", "{\n    long sum = 0L;\n    foreach(float x; lst)\n    {\n\
    \        if(x > 0L && x == cast(long)x)\n        {\n            if(x % 2L != 0L)\n\
    \            {\n                sum += x * x;\n            }\n        }\n    }\n\
    \    return sum;\n}", "{\n    long sum = 0L;\n    foreach(float x; lst)\n    {\n\
    \        if(x > 0 && x == cast(long)x)\n        {\n            if(x % 2 == 1)\n\
    \            {\n                sum += x * x;\n            }\n        }\n    }\n\
    \    return sum;\n}", "{\n    long sum = 0L;\n    foreach(float i; lst)\n    {\n\
    \        if(i > 0L && i == cast(long)i)\n        {\n            if(i % 2L == 1L)\n\
    \            {\n                sum += i * i;\n            }\n        }\n    }\n\
    \    return sum;\n}", "{\n    long sum = 0L;\n    foreach(float x; lst)\n    {\n\
    \        if(is(typeof(x) == int) && x > 0)\n        {\n            sum += x *\
    \ x;\n        }\n    }\n    return sum;\n}", "{\n    long sum = 0L;\n    foreach(float\
    \ x; lst)\n    {\n        if(x > 0L && is(typeof(x) == long))\n        {\n   \
    \         if(x % 2L == 1L)\n            {\n                sum += x * x;\n   \
    \         }\n        }\n    }\n    return sum;\n}", "{\n    long sum = 0L;\n \
    \   foreach(float i; lst)\n    {\n        if(i > 0L && i == cast(long)i)\n   \
    \     {\n            if(i % 2L == 1L)\n            {\n                sum += i\
    \ * i;\n            }\n        }\n    }\n    return sum;\n}", "{\n    long sum\
    \ = 0L;\n    foreach(float i; lst)\n    {\n        if(i > 0L && is(typeof(i) ==\
    \ int))\n        {\n            if(i % 2 == 1)\n            {\n              \
    \  sum += i * i;\n            }\n        }\n    }\n    return sum;\n}", "{\n \
    \   long sum = 0L;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ cast(long)i)\n        {\n            if(i % 2 == 1)\n            {\n       \
    \         sum += i * i;\n            }\n        }\n    }\n    return sum;\n}",
  "{\n    long sum = 0L;\n    foreach(float f; lst)\n    {\n        if(is(typeof(f)\
    \ == int) && f > 0)\n        {\n            sum += f * f;\n        }\n    }\n\
    \    return sum;\n}", "{\n    long sum = 0L;\n    foreach(float i; lst)\n    {\n\
    \        if(i > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 ==\
    \ 1)\n            {\n                sum += i * i;\n            }\n        }\n\
    \    }\n    return sum;\n}", "{\n    long sum = 0L;\n    foreach(float i; lst)\n\
    \    {\n        if(i > 0L && is(typeof(i) == int))\n        {\n            if(i\
    \ % 2L != 0L)\n            {\n                sum += i * i;\n            }\n \
    \       }\n    }\n    return sum;\n}", "{\n    long sum = 0L;\n    foreach(float\
    \ i; lst)\n    {\n        if (i > 0 && is(typeof(i) == int))\n        {\n    \
    \        if (i % 2 == 1)\n            {\n                sum += i * i;\n     \
    \       }\n        }\n    }\n    return sum;\n}", "{\n    long sum = 0L;\n   \
    \ foreach(float i; lst)\n    {\n        if(i > 0 && is(typeof(i) == int))\n  \
    \      {\n            if(i % 2 == 1)\n            {\n                sum += i\
    \ * i;\n            }\n        }\n    }\n    return sum;\n}", "{\n    long sum\
    \ = 0L;\n    foreach(float i; lst)\n    {\n        if(i > 0 && is(typeof(i) ==\
    \ int))\n        {\n            if(i % 2 == 1)\n            {\n              \
    \  sum += i * i;\n            }\n        }\n    }\n    return sum;\n}", "{\n \
    \   long sum = 0L;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ cast(long)i)\n        {\n            if(i % 2 == 1)\n            {\n       \
    \         sum += i * i;\n            }\n        }\n    }\n    return sum;\n}",
  "{\n    long sum = 0L;\n    foreach(float i; lst) \n    {\n        if(i > 0 && i\
    \ == cast(long)i) \n        {\n            if(i % 2 == 1) \n            {\n  \
    \              sum += i * i;\n            }\n        }\n    }\n    return sum;\n\
    }", "{\n    long sum = 0L;\n    foreach(float i; lst)\n    {\n        if(i > 0L\
    \ && is(typeof(i) == long))\n        {\n            if(i % 2L == 1L)\n       \
    \     {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}", "{\n    long result = 0L;\n    foreach(float f; lst)\n    {\n    \
    \    if(is(typeof(f) == int) && f > 0)\n        {\n            result += f * f;\n\
    \        }\n    }\n    return result;\n}", "{\n    long sum = 0L;\n    foreach(float\
    \ i; lst)\n    {\n        if(i > 0 && i == cast(long)i)\n        {\n         \
    \   if(i % 2 == 1)\n            {\n                sum += i * i;\n           \
    \ }\n        }\n    }\n    return sum;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
