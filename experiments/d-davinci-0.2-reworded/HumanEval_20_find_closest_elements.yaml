name: HumanEval_20_find_closest_elements
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n From a supplied array of numbers\
  \ (of length at least two) select and return two that are the closest to each\n\
  \    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n    >>> find_closest_elements([1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0, 2.0)\n    \n*/\nTuple!(float, float)\
  \ find_closest_elements(float[] numbers) \n"
tests: "unittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
  \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
  \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
  \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
  \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) ==\
  \ tuple(2.2, 3.1));\n}\nvoid main(){}"
completions: ["{\n    float min_diff = float.infinity;\n    float min_a = 0.0;\n \
    \   float min_b = 0.0;\n    for (int i = 0; i < numbers.length; i++)\n    {\n\
    \        for (int j = i + 1; j < numbers.length; j++)\n        {\n           \
    \ float diff = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\n\
    \            {\n                min_diff = diff;\n                min_a = numbers[i];\n\
    \                min_b = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(min_a, min_b);\n}", "{\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    float min_diff = numbers[1] - numbers[0];\n    for (int i = 1; i < numbers.length;\
    \ i++)\n    {\n        float diff = numbers[i] - numbers[i-1];\n        if (diff\
    \ < min_diff)\n        {\n            min_diff = diff;\n            min = numbers[i-1];\n\
    \            max = numbers[i];\n        }\n    }\n    return tuple(min, max);\n\
    }", "{\n    assert(numbers.length > 1);\n    float min_diff = numbers[1] - numbers[0];\n\
    \    float min_first = numbers[0];\n    float min_second = numbers[1];\n    for\
    \ (size_t i = 0; i < numbers.length; i++) \n    {\n        for (size_t j = i +\
    \ 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                min_first = numbers[i];\n          \
    \      min_second = numbers[j];\n            }\n        }\n    }\n    return tuple(min_first,\
    \ min_second);\n}", "{\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    float min_diff = numbers[1] - numbers[0];\n    float max_diff = numbers[1]\
    \ - numbers[0];\n    for (int i = 1; i < numbers.length; i++) \n    {\n      \
    \  float diff = numbers[i] - numbers[i - 1];\n        if (diff < min_diff) \n\
    \        {\n            min_diff = diff;\n            min = numbers[i - 1];\n\
    \            max = numbers[i];\n        }\n        if (diff > max_diff) \n   \
    \     {\n            max_diff = diff;\n            min = numbers[i - 1];\n   \
    \         max = numbers[i];\n        }\n    }\n    return tuple(min, max);\n}",
  "{\n    assert(numbers.length >= 2);\n    float min_diff = numbers[1] - numbers[0];\n\
    \    float min_num1 = numbers[0];\n    float min_num2 = numbers[1];\n    for (int\
    \ i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                min_num1 = numbers[i];\n                min_num2 = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(min_num1, min_num2);\n}", "{\n\
    \    assert(numbers.length >= 2);\n    float min = abs(numbers[0] - numbers[1]);\n\
    \    float a = numbers[0];\n    float b = numbers[1];\n    for (int i = 0; i <\
    \ numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if (diff < min)\n            {\n                min = diff;\n     \
    \           a = numbers[i];\n                b = numbers[j];\n            }\n\
    \        }\n    }\n    return tuple(a, b);\n}", "{\n    assert(numbers.length\
    \ >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n    float a = numbers[0];\n\
    \    float b = numbers[1];\n    for (int i = 0; i < numbers.length; i++) \n  \
    \  {\n        for (int j = i + 1; j < numbers.length; j++) \n        {\n     \
    \       float diff = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\
    \ \n            {\n                min_diff = diff;\n                a = numbers[i];\n\
    \                b = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(a, b);\n}", "{\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    float min_diff = numbers[1] - numbers[0];\n    foreach(i, v; numbers)\n \
    \   {\n        if(i == 0) continue;\n        float diff = abs(v - numbers[i-1]);\n\
    \        if(diff < min_diff)\n        {\n            min_diff = diff;\n      \
    \      min = min(v, numbers[i-1]);\n            max = max(v, numbers[i-1]);\n\
    \        }\n    }\n    return tuple(min, max);\n}", "{\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    float min_diff = numbers[1] - numbers[0];\n\
    \    float max_diff = numbers[1] - numbers[0];\n    for (int i = 1; i < numbers.length;\
    \ i++)\n    {\n        float diff = numbers[i] - numbers[i-1];\n        if (diff\
    \ < min_diff)\n        {\n            min_diff = diff;\n            min = numbers[i-1];\n\
    \            max = numbers[i];\n        }\n        if (diff > max_diff)\n    \
    \    {\n            max_diff = diff;\n        }\n    }\n    return tuple(min,\
    \ max);\n}", "{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0]\
    \ - numbers[1]);\n    Tuple!(float, float) result = tuple(numbers[0], numbers[1]);\n\
    \    for (size_t i = 0; i < numbers.length; i++) \n    {\n        for (size_t\
    \ j = i + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                result = tuple(numbers[i], numbers[j]);\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    assert(numbers.length\
    \ >= 2);\n    float min = numbers[0] - numbers[1];\n    float min1 = numbers[0];\n\
    \    float min2 = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n\
    \    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n    \
    \        float diff = abs(numbers[i] - numbers[j]);\n            if (diff < min)\n\
    \            {\n                min = diff;\n                min1 = numbers[i];\n\
    \                min2 = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(min1, min2);\n}", "{\n    assert(numbers.length >= 2);\n    float min\
    \ = numbers[0];\n    float max = numbers[0];\n    float diff = numbers[1] - numbers[0];\n\
    \    for (int i = 1; i < numbers.length; i++) \n    {\n        if (numbers[i]\
    \ < min) \n        {\n            min = numbers[i];\n        }\n        if (numbers[i]\
    \ > max) \n        {\n            max = numbers[i];\n        }\n        if (abs(numbers[i]\
    \ - numbers[i - 1]) < diff) \n        {\n            diff = abs(numbers[i] - numbers[i\
    \ - 1]);\n        }\n    }\n    return tuple(min, max);\n}", "{\n    assert(numbers.length\
    \ >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n    float min_a\
    \ = numbers[0];\n    float min_b = numbers[1];\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        for (int j = i + 1; j < numbers.length; j++) \n      \
    \  {\n            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min_diff) \n            {\n                min_diff = diff;\n            \
    \    min_a = numbers[i];\n                min_b = numbers[j];\n            }\n\
    \        }\n    }\n    return tuple(min_a, min_b);\n}", "{\n    float min_diff\
    \ = abs(numbers[0] - numbers[1]);\n    float min_num1 = numbers[0];\n    float\
    \ min_num2 = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n    {\n\
    \        for (int j = i + 1; j < numbers.length; j++)\n        {\n           \
    \ float diff = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\n\
    \            {\n                min_diff = diff;\n                min_num1 = numbers[i];\n\
    \                min_num2 = numbers[j];\n            }\n        }\n    }\n   \
    \ return tuple(min_num1, min_num2);\n}", "{\n    float min = numbers[0];\n   \
    \ float max = numbers[0];\n    float min_diff = numbers[1] - numbers[0];\n   \
    \ float max_diff = numbers[1] - numbers[0];\n    float diff;\n    foreach(i, number;\
    \ numbers)\n    {\n        if(i == 0)\n            continue;\n        diff = number\
    \ - numbers[i-1];\n        if(diff < min_diff)\n        {\n            min_diff\
    \ = diff;\n            min = numbers[i-1];\n            max = number;\n      \
    \  }\n        if(diff > max_diff)\n        {\n            max_diff = diff;\n \
    \           min = numbers[i-1];\n            max = number;\n        }\n    }\n\
    \    return tuple(min, max);\n}", "{\n    assert(numbers.length >= 2);\n    float\
    \ min = abs(numbers[0] - numbers[1]);\n    float a = numbers[0];\n    float b\
    \ = numbers[1];\n    for (int i = 0; i < numbers.length - 1; i++)\n    {\n   \
    \     for (int j = i + 1; j < numbers.length; j++)\n        {\n            float\
    \ diff = abs(numbers[i] - numbers[j]);\n            if (diff < min)\n        \
    \    {\n                min = diff;\n                a = numbers[i];\n       \
    \         b = numbers[j];\n            }\n        }\n    }\n    return tuple(a,\
    \ b);\n}", "{\n    if (numbers.length < 2)\n        return tuple(0.0, 0.0);\n\
    \    float min_diff = abs(numbers[0] - numbers[1]);\n    float min_num1 = numbers[0];\n\
    \    float min_num2 = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n\
    \    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n    \
    \        float diff = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\n\
    \            {\n                min_diff = diff;\n                min_num1 = numbers[i];\n\
    \                min_num2 = numbers[j];\n            }\n        }\n    }\n   \
    \ return tuple(min_num1, min_num2);\n}", "{\n    assert(numbers.length >= 2);\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    for (int i = 1; i < numbers.length; i++)\n \
    \   {\n        float diff = abs(numbers[i] - numbers[i-1]);\n        if (diff\
    \ < min_diff)\n        {\n            min_diff = diff;\n            min = min(numbers[i],\
    \ numbers[i-1]);\n            max = max(numbers[i], numbers[i-1]);\n        }\n\
    \    }\n    return tuple(min, max);\n}", "{\n    assert(numbers.length >= 2);\n\
    \    float min_diff = abs(numbers[0] - numbers[1]);\n    float min_a = numbers[0];\n\
    \    float min_b = numbers[1];\n    for (int i = 0; i < numbers.length; i++) \n\
    \    {\n        for (int j = i + 1; j < numbers.length; j++) \n        {\n   \
    \         float diff = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\
    \ \n            {\n                min_diff = diff;\n                min_a = numbers[i];\n\
    \                min_b = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(min_a, min_b);\n}", "{\n    assert(numbers.length >= 2);\n    float min_diff\
    \ = abs(numbers[0] - numbers[1]);\n    Tuple!(float, float) closest_pair = tuple(numbers[0],\
    \ numbers[1]);\n    for (int i = 0; i < numbers.length; i++) \n    {\n       \
    \ for (int j = i + 1; j < numbers.length; j++) \n        {\n            float\
    \ diff = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff) \n  \
    \          {\n                min_diff = diff;\n                closest_pair =\
    \ tuple(numbers[i], numbers[j]);\n            }\n        }\n    }\n    return\
    \ closest_pair;\n}", "{\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    float min_diff = numbers[1] - numbers[0];\n    foreach(i, n; numbers)\n \
    \   {\n        if(n < min)\n        {\n            min = n;\n        }\n     \
    \   if(n > max)\n        {\n            max = n;\n        }\n        if(i > 0)\n\
    \        {\n            float diff = abs(numbers[i] - numbers[i-1]);\n       \
    \     if(diff < min_diff)\n            {\n                min_diff = diff;\n \
    \           }\n        }\n    }\n    return tuple(min, max);\n}", "{\n    float\
    \ minDiff = abs(numbers[0] - numbers[1]);\n    float minNum1 = numbers[0];\n \
    \   float minNum2 = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n\
    \    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n    \
    \        float diff = abs(numbers[i] - numbers[j]);\n            if (diff < minDiff)\n\
    \            {\n                minDiff = diff;\n                minNum1 = numbers[i];\n\
    \                minNum2 = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(minNum1, minNum2);\n}", "{\n    assert(numbers.length >= 2);\n    float\
    \ min_diff = numbers[1] - numbers[0];\n    float min_num1 = numbers[0];\n    float\
    \ min_num2 = numbers[1];\n    for (int i = 0; i < numbers.length - 1; i++) \n\
    \    {\n        for (int j = i + 1; j < numbers.length; j++) \n        {\n   \
    \         float diff = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\
    \ \n            {\n                min_diff = diff;\n                min_num1\
    \ = numbers[i];\n                min_num2 = numbers[j];\n            }\n     \
    \   }\n    }\n    return tuple(min_num1, min_num2);\n}", "{\n    float min = abs(numbers[0]\
    \ - numbers[1]);\n    float a = numbers[0];\n    float b = numbers[1];\n    for\
    \ (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i + 1; j\
    \ < numbers.length; j++) \n        {\n            if (abs(numbers[i] - numbers[j])\
    \ < min) \n            {\n                min = abs(numbers[i] - numbers[j]);\n\
    \                a = numbers[i];\n                b = numbers[j];\n          \
    \  }\n        }\n    }\n    return tuple(a, b);\n}", "{\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    float min_diff = numbers[1] - numbers[0];\n\
    \    float max_diff = numbers[1] - numbers[0];\n    for (int i = 1; i < numbers.length;\
    \ i++)\n    {\n        if (numbers[i] < min)\n        {\n            min = numbers[i];\n\
    \        }\n        if (numbers[i] > max)\n        {\n            max = numbers[i];\n\
    \        }\n        if (i < numbers.length - 1)\n        {\n            float\
    \ diff = numbers[i+1] - numbers[i];\n            if (diff < min_diff)\n      \
    \      {\n                min_diff = diff;\n            }\n            if (diff\
    \ > max_diff)\n            {\n                max_diff = diff;\n            }\n\
    \        }\n    }\n    return tuple(min, max);\n}", "{\n    float min = abs(numbers[0]\
    \ - numbers[1]);\n    float min1 = numbers[0];\n    float min2 = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            if (abs(numbers[i] - numbers[j])\
    \ < min)\n            {\n                min = abs(numbers[i] - numbers[j]);\n\
    \                min1 = numbers[i];\n                min2 = numbers[j];\n    \
    \        }\n        }\n    }\n    return tuple(min1, min2);\n}", "{\n    float\
    \ min = float.max;\n    float a = 0.0;\n    float b = 0.0;\n    foreach(float\
    \ i; numbers)\n    {\n        foreach(float j; numbers)\n        {\n         \
    \   if(i != j)\n            {\n                float diff = abs(i - j);\n    \
    \            if(diff < min)\n                {\n                    min = diff;\n\
    \                    a = i;\n                    b = j;\n                }\n \
    \           }\n        }\n    }\n    return tuple(a, b);\n}", "{\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    float min_num1 = numbers[0];\n    float min_num2\
    \ = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n    {\n       \
    \ for (int j = i + 1; j < numbers.length; j++)\n        {\n            float diff\
    \ = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\n        \
    \    {\n                min_diff = diff;\n                min_num1 = numbers[i];\n\
    \                min_num2 = numbers[j];\n            }\n        }\n    }\n   \
    \ return tuple(min_num1, min_num2);\n}", "{\n    float min = numbers[0];\n   \
    \ float max = numbers[0];\n    float min_diff = numbers[1] - numbers[0];\n   \
    \ float max_diff = numbers[1] - numbers[0];\n    for (int i = 1; i < numbers.length;\
    \ i++) \n    {\n        if (numbers[i] < min) \n        {\n            min = numbers[i];\n\
    \        }\n        if (numbers[i] > max) \n        {\n            max = numbers[i];\n\
    \        }\n        if (numbers[i] - numbers[i - 1] < min_diff) \n        {\n\
    \            min_diff = numbers[i] - numbers[i - 1];\n        }\n        if (numbers[i]\
    \ - numbers[i - 1] > max_diff) \n        {\n            max_diff = numbers[i]\
    \ - numbers[i - 1];\n        }\n    }\n    return tuple(min, max);\n}", "{\n \
    \   assert(numbers.length >= 2);\n    float min = numbers[0];\n    float max =\
    \ numbers[0];\n    foreach(i, n; numbers)\n    {\n        if(n < min)\n      \
    \      min = n;\n        if(n > max)\n            max = n;\n    }\n    return\
    \ tuple(min, max);\n}", "{\n    assert(numbers.length >= 2);\n    float min_diff\
    \ = abs(numbers[0] - numbers[1]);\n    float min_first = numbers[0];\n    float\
    \ min_second = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n   \
    \ {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n       \
    \     float diff = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\n\
    \            {\n                min_diff = diff;\n                min_first =\
    \ numbers[i];\n                min_second = numbers[j];\n            }\n     \
    \   }\n    }\n    return tuple(min_first, min_second);\n}", "{\n    float min\
    \ = numbers[0];\n    float max = numbers[0];\n    float min_diff = numbers[1]\
    \ - numbers[0];\n    foreach(i, number; numbers)\n    {\n        if(number < min)\n\
    \        {\n            min = number;\n        }\n        if(number > max)\n \
    \       {\n            max = number;\n        }\n        if(i > 0)\n        {\n\
    \            float diff = abs(number - numbers[i-1]);\n            if(diff < min_diff)\n\
    \            {\n                min_diff = diff;\n            }\n        }\n \
    \   }\n    return tuple(min, max);\n}", "{\n    assert(numbers.length >= 2);\n\
    \    float min_diff = abs(numbers[0] - numbers[1]);\n    Tuple!(float, float)\
    \ closest_elements = tuple(numbers[0], numbers[1]);\n    for (int i = 0; i < numbers.length\
    \ - 1; i++) \n    {\n        for (int j = i + 1; j < numbers.length; j++) \n \
    \       {\n            float diff = abs(numbers[i] - numbers[j]);\n          \
    \  if (diff < min_diff) \n            {\n                min_diff = diff;\n  \
    \              closest_elements = tuple(numbers[i], numbers[j]);\n           \
    \ }\n        }\n    }\n    return closest_elements;\n}", "{\n    assert(numbers.length\
    \ >= 2);\n    float min_diff = numbers[1] - numbers[0];\n    float min_diff_a\
    \ = numbers[0];\n    float min_diff_b = numbers[1];\n    for (int i = 0; i < numbers.length\
    \ - 1; i++) \n    {\n        float diff = numbers[i + 1] - numbers[i];\n     \
    \   if (diff < min_diff) \n        {\n            min_diff = diff;\n         \
    \   min_diff_a = numbers[i];\n            min_diff_b = numbers[i + 1];\n     \
    \   }\n    }\n    return tuple(min_diff_a, min_diff_b);\n}", "{\n    assert(numbers.length\
    \ >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n    float first\
    \ = numbers[0];\n    float second = numbers[1];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n\
    \            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min_diff)\n            {\n                min_diff = diff;\n             \
    \   first = numbers[i];\n                second = numbers[j];\n            }\n\
    \        }\n    }\n    return tuple(first, second);\n}", "{\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    float min_diff = abs(numbers[0] - numbers[1]);\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i\
    \ + 1; j < numbers.length; j++) \n        {\n            if (abs(numbers[i] -\
    \ numbers[j]) < min_diff) \n            {\n                min_diff = abs(numbers[i]\
    \ - numbers[j]);\n                min = numbers[i];\n                max = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(min, max);\n}", "{\n    float\
    \ min = abs(numbers[0] - numbers[1]);\n    float a = numbers[0];\n    float b\
    \ = numbers[1];\n    for (int i = 0; i < numbers.length; i++) \n    {\n      \
    \  for (int j = i + 1; j < numbers.length; j++) \n        {\n            if (abs(numbers[i]\
    \ - numbers[j]) < min) \n            {\n                min = abs(numbers[i] -\
    \ numbers[j]);\n                a = numbers[i];\n                b = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(a, b);\n}", "{\n    assert(numbers.length\
    \ > 1);\n    float min = abs(numbers[0] - numbers[1]);\n    float a = numbers[0];\n\
    \    float b = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n   \
    \ {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n       \
    \     float diff = abs(numbers[i] - numbers[j]);\n            if (diff < min)\n\
    \            {\n                min = diff;\n                a = numbers[i];\n\
    \                b = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(a, b);\n}", "{\n    assert(numbers.length >= 2);\n    float min = abs(numbers[0]\
    \ - numbers[1]);\n    int index = 0;\n    for (int i = 0; i < numbers.length -\
    \ 1; i++)\n    {\n        float diff = abs(numbers[i] - numbers[i + 1]);\n   \
    \     if (diff < min)\n        {\n            min = diff;\n            index =\
    \ i;\n        }\n    }\n    return tuple(numbers[index], numbers[index + 1]);\n\
    }", "{\n    float min = abs(numbers[0] - numbers[1]);\n    float a = numbers[0];\n\
    \    float b = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n   \
    \ {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n       \
    \     if (abs(numbers[i] - numbers[j]) < min)\n            {\n               \
    \ min = abs(numbers[i] - numbers[j]);\n                a = numbers[i];\n     \
    \           b = numbers[j];\n            }\n        }\n    }\n    return tuple(a,\
    \ b);\n}", "{\n    float min = float.max;\n    float min_a = 0;\n    float min_b\
    \ = 0;\n    foreach(i, a; numbers)\n    {\n        foreach(j, b; numbers)\n  \
    \      {\n            if(i != j)\n            {\n                float diff =\
    \ abs(a - b);\n                if(diff < min)\n                {\n           \
    \         min = diff;\n                    min_a = a;\n                    min_b\
    \ = b;\n                }\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}", "{\n    float min = abs(numbers[0] - numbers[1]);\n    float a\
    \ = numbers[0];\n    float b = numbers[1];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n\
    \            if (abs(numbers[i] - numbers[j]) < min)\n            {\n        \
    \        min = abs(numbers[i] - numbers[j]);\n                a = numbers[i];\n\
    \                b = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(a, b);\n}", "{\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    float min_diff = numbers[1] - numbers[0];\n    float max_diff = numbers[1]\
    \ - numbers[0];\n    foreach(i, number; numbers)\n    {\n        if(i == 0)\n\
    \            continue;\n        float diff = abs(number - numbers[i-1]);\n   \
    \     if(diff < min_diff)\n        {\n            min_diff = diff;\n         \
    \   min = number;\n        }\n        if(diff > max_diff)\n        {\n       \
    \     max_diff = diff;\n            max = number;\n        }\n    }\n    return\
    \ tuple(min, max);\n}", "{\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    float min_diff = numbers[1] - numbers[0];\n    float max_diff = numbers[1]\
    \ - numbers[0];\n    for (int i = 0; i < numbers.length; i++)\n    {\n       \
    \ if (numbers[i] < min)\n        {\n            min = numbers[i];\n        }\n\
    \        if (numbers[i] > max)\n        {\n            max = numbers[i];\n   \
    \     }\n        if (i > 0)\n        {\n            float diff = numbers[i] -\
    \ numbers[i-1];\n            if (diff < min_diff)\n            {\n           \
    \     min_diff = diff;\n            }\n            if (diff > max_diff)\n    \
    \        {\n                max_diff = diff;\n            }\n        }\n    }\n\
    \    return tuple(min, max);\n}", "{\n    assert(numbers.length >= 2);\n    float\
    \ min = abs(numbers[0] - numbers[1]);\n    float a = numbers[0];\n    float b\
    \ = numbers[1];\n    for (int i = 0; i < numbers.length; i++) \n    {\n      \
    \  for (int j = i + 1; j < numbers.length; j++) \n        {\n            float\
    \ diff = abs(numbers[i] - numbers[j]);\n            if (diff < min) \n       \
    \     {\n                min = diff;\n                a = numbers[i];\n      \
    \          b = numbers[j];\n            }\n        }\n    }\n    return tuple(a,\
    \ b);\n}", "{\n    float min = abs(numbers[0] - numbers[1]);\n    float a = numbers[0];\n\
    \    float b = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n   \
    \ {\n        for (int j = 0; j < numbers.length; j++)\n        {\n           \
    \ if (i != j)\n            {\n                float diff = abs(numbers[i] - numbers[j]);\n\
    \                if (diff < min)\n                {\n                    min =\
    \ diff;\n                    a = numbers[i];\n                    b = numbers[j];\n\
    \                }\n            }\n        }\n    }\n    return tuple(a, b);\n\
    }", "{\n    float min = float.max;\n    float[] result = new float[2];\n    foreach(i,\
    \ n; numbers)\n    {\n        foreach(j, m; numbers)\n        {\n            if(i\
    \ != j)\n            {\n                float diff = abs(n - m);\n           \
    \     if(diff < min)\n                {\n                    min = diff;\n   \
    \                 result[0] = n;\n                    result[1] = m;\n       \
    \         }\n            }\n        }\n    }\n    return tuple(result[0], result[1]);\n\
    }", "{\n    assert(numbers.length >= 2);\n    float min = abs(numbers[0] - numbers[1]);\n\
    \    float a = numbers[0];\n    float b = numbers[1];\n    for (int i = 0; i <\
    \ numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if (diff < min)\n            {\n                min = diff;\n     \
    \           a = numbers[i];\n                b = numbers[j];\n            }\n\
    \        }\n    }\n    return tuple(a, b);\n}", "{\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    float min_diff = numbers[1] - numbers[0];\n\
    \    float max_diff = numbers[1] - numbers[0];\n    for (int i = 1; i < numbers.length;\
    \ i++)\n    {\n        if (numbers[i] < min)\n        {\n            min = numbers[i];\n\
    \        }\n        if (numbers[i] > max)\n        {\n            max = numbers[i];\n\
    \        }\n        if (i < numbers.length - 1)\n        {\n            float\
    \ diff = numbers[i + 1] - numbers[i];\n            if (diff < min_diff)\n    \
    \        {\n                min_diff = diff;\n            }\n            if (diff\
    \ > max_diff)\n            {\n                max_diff = diff;\n            }\n\
    \        }\n    }\n    return tuple(min, max);\n}", "{\n    assert(numbers.length\
    \ >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n    float min_a\
    \ = numbers[0];\n    float min_b = numbers[1];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n\
    \            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min_diff)\n            {\n                min_diff = diff;\n             \
    \   min_a = numbers[i];\n                min_b = numbers[j];\n            }\n\
    \        }\n    }\n    return tuple(min_a, min_b);\n}", "{\n    float min_diff\
    \ = float.max;\n    float min_diff_a = 0;\n    float min_diff_b = 0;\n    foreach(i,\
    \ a; numbers)\n    {\n        foreach(j, b; numbers)\n        {\n            if(i\
    \ != j)\n            {\n                float diff = abs(a - b);\n           \
    \     if(diff < min_diff)\n                {\n                    min_diff = diff;\n\
    \                    min_diff_a = a;\n                    min_diff_b = b;\n  \
    \              }\n            }\n        }\n    }\n    return tuple(min_diff_a,\
    \ min_diff_b);\n}", "{\n    float min = float.max;\n    float min1 = 0.0;\n  \
    \  float min2 = 0.0;\n    for (int i = 0; i < numbers.length; i++)\n    {\n  \
    \      for (int j = i + 1; j < numbers.length; j++)\n        {\n            float\
    \ diff = abs(numbers[i] - numbers[j]);\n            if (diff < min)\n        \
    \    {\n                min = diff;\n                min1 = numbers[i];\n    \
    \            min2 = numbers[j];\n            }\n        }\n    }\n    return tuple(min1,\
    \ min2);\n}", "{\n    float min = abs(numbers[0] - numbers[1]);\n    float a =\
    \ numbers[0];\n    float b = numbers[1];\n    foreach(i, v; numbers)\n    {\n\
    \        foreach(j, w; numbers)\n        {\n            if(i != j)\n         \
    \   {\n                float diff = abs(v - w);\n                if(diff < min)\n\
    \                {\n                    min = diff;\n                    a = v;\n\
    \                    b = w;\n                }\n            }\n        }\n   \
    \ }\n    return tuple(a, b);\n}", "{\n    float min = numbers[0];\n    float max\
    \ = numbers[0];\n    float min_diff = numbers[1] - numbers[0];\n    for (int i\
    \ = 1; i < numbers.length; i++)\n    {\n        float diff = numbers[i] - numbers[i\
    \ - 1];\n        if (diff < min_diff)\n        {\n            min_diff = diff;\n\
    \            min = numbers[i - 1];\n            max = numbers[i];\n        }\n\
    \    }\n    return tuple(min, max);\n}", "{\n    assert(numbers.length >= 2);\n\
    \    float min_diff = abs(numbers[0] - numbers[1]);\n    Tuple!(float, float)\
    \ min_pair = tuple(numbers[0], numbers[1]);\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        for (int j = i + 1; j < numbers.length; j++) \n      \
    \  {\n            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min_diff) \n            {\n                min_diff = diff;\n            \
    \    min_pair = tuple(numbers[i], numbers[j]);\n            }\n        }\n   \
    \ }\n    return min_pair;\n}", "{\n    assert(numbers.length >= 2);\n    float\
    \ min_diff = abs(numbers[0] - numbers[1]);\n    float first = numbers[0];\n  \
    \  float second = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n\
    \    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n    \
    \        float diff = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\n\
    \            {\n                min_diff = diff;\n                first = numbers[i];\n\
    \                second = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(first, second);\n}", "{\n    float min_diff = abs(numbers[0] - numbers[1]);\n\
    \    float min_num1 = numbers[0];\n    float min_num2 = numbers[1];\n    for (int\
    \ i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                min_num1 = numbers[i];\n                min_num2 = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(min_num1, min_num2);\n}", "{\n\
    \    float min_diff = abs(numbers[0] - numbers[1]);\n    Tuple!(float, float)\
    \ result = tuple(numbers[0], numbers[1]);\n    foreach(i, number; numbers)\n \
    \   {\n        foreach(j, other; numbers[i+1..$])\n        {\n            float\
    \ diff = abs(number - other);\n            if (diff < min_diff)\n            {\n\
    \                min_diff = diff;\n                result = tuple(number, other);\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    assert(numbers.length\
    \ >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n    float first\
    \ = numbers[0];\n    float second = numbers[1];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n\
    \            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min_diff)\n            {\n                min_diff = diff;\n             \
    \   first = numbers[i];\n                second = numbers[j];\n            }\n\
    \        }\n    }\n    return tuple(first, second);\n}", "{\n    assert(numbers.length\
    \ >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n    float min_a\
    \ = numbers[0];\n    float min_b = numbers[1];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n\
    \            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min_diff)\n            {\n                min_diff = diff;\n             \
    \   min_a = numbers[i];\n                min_b = numbers[j];\n            }\n\
    \        }\n    }\n    return tuple(min_a, min_b);\n}", "{\n    assert(numbers.length\
    \ >= 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    float\
    \ diff = numbers[1] - numbers[0];\n    for (int i = 1; i < numbers.length; i++)\
    \ \n    {\n        if (numbers[i] < min) \n        {\n            min = numbers[i];\n\
    \        }\n        if (numbers[i] > max) \n        {\n            max = numbers[i];\n\
    \        }\n        if (abs(numbers[i] - numbers[i - 1]) < diff) \n        {\n\
    \            diff = abs(numbers[i] - numbers[i - 1]);\n        }\n    }\n    return\
    \ tuple(min, max);\n}", "{\n    float min = float.max;\n    float[] closest =\
    \ new float[2];\n    for (int i = 0; i < numbers.length; i++) \n    {\n      \
    \  for (int j = i + 1; j < numbers.length; j++) \n        {\n            float\
    \ diff = abs(numbers[i] - numbers[j]);\n            if (diff < min) \n       \
    \     {\n                min = diff;\n                closest[0] = numbers[i];\n\
    \                closest[1] = numbers[j];\n            }\n        }\n    }\n \
    \   return tuple(closest[0], closest[1]);\n}", "{\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    float min_diff = numbers[1] - numbers[0];\n\
    \    for (int i = 1; i < numbers.length; i++)\n    {\n        float diff = numbers[i]\
    \ - numbers[i - 1];\n        if (diff < min_diff)\n        {\n            min_diff\
    \ = diff;\n            min = numbers[i - 1];\n            max = numbers[i];\n\
    \        }\n    }\n    return tuple(min, max);\n}", "{\n    float min = float.max;\n\
    \    float a = 0.0;\n    float b = 0.0;\n    foreach(i, n; numbers)\n    {\n \
    \       foreach(j, m; numbers)\n        {\n            if(i != j)\n          \
    \  {\n                float diff = abs(n - m);\n                if(diff < min)\n\
    \                {\n                    min = diff;\n                    a = n;\n\
    \                    b = m;\n                }\n            }\n        }\n   \
    \ }\n    return tuple(a, b);\n}", "{\n    float min = numbers[0];\n    float max\
    \ = numbers[0];\n    float min_diff = numbers[1] - numbers[0];\n    float max_diff\
    \ = numbers[1] - numbers[0];\n    for (int i = 1; i < numbers.length; i++)\n \
    \   {\n        if (numbers[i] < min)\n        {\n            min = numbers[i];\n\
    \        }\n        if (numbers[i] > max)\n        {\n            max = numbers[i];\n\
    \        }\n        if (numbers[i] - numbers[i-1] < min_diff)\n        {\n   \
    \         min_diff = numbers[i] - numbers[i-1];\n        }\n        if (numbers[i]\
    \ - numbers[i-1] > max_diff)\n        {\n            max_diff = numbers[i] - numbers[i-1];\n\
    \        }\n    }\n    return tuple(min, max);\n}", "{\n    assert(numbers.length\
    \ >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n    float min_1\
    \ = numbers[0];\n    float min_2 = numbers[1];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n\
    \            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min_diff)\n            {\n                min_diff = diff;\n             \
    \   min_1 = numbers[i];\n                min_2 = numbers[j];\n            }\n\
    \        }\n    }\n    return tuple(min_1, min_2);\n}", "{\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    float min_diff = abs(numbers[0] - numbers[1]);\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i\
    \ + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                min = min(numbers[i], numbers[j]);\n\
    \                max = max(numbers[i], numbers[j]);\n            }\n        }\n\
    \    }\n    return tuple(min, max);\n}", "{\n    float min_diff = abs(numbers[0]\
    \ - numbers[1]);\n    float min_a = numbers[0];\n    float min_b = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                min_a = numbers[i];\n               \
    \ min_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}", "{\n    float min = float.max;\n    float a = 0.0;\n    float b\
    \ = 0.0;\n    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int\
    \ j = i + 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min)\n            {\n               \
    \ min = diff;\n                a = numbers[i];\n                b = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(a, b);\n}", "{\n    float min\
    \ = float.max;\n    float[] result = new float[2];\n    foreach(i, number; numbers)\n\
    \    {\n        foreach(j, number2; numbers)\n        {\n            if(i != j)\n\
    \            {\n                float diff = abs(number - number2);\n        \
    \        if(diff < min)\n                {\n                    min = diff;\n\
    \                    result[0] = number;\n                    result[1] = number2;\n\
    \                }\n            }\n        }\n    }\n    return tuple(result[0],\
    \ result[1]);\n}", "{\n    assert(numbers.length >= 2);\n    float min = numbers[0]\
    \ - numbers[1];\n    float a = numbers[0];\n    float b = numbers[1];\n    foreach(i,\
    \ n; numbers)\n    {\n        foreach(j, m; numbers)\n        {\n            if(i\
    \ != j)\n            {\n                float diff = abs(n - m);\n           \
    \     if(diff < min)\n                {\n                    min = diff;\n   \
    \                 a = n;\n                    b = m;\n                }\n    \
    \        }\n        }\n    }\n    return tuple(a, b);\n}", "{\n    float min =\
    \ numbers[0];\n    float max = numbers[0];\n    float min_diff = numbers[1] -\
    \ numbers[0];\n    float max_diff = numbers[1] - numbers[0];\n    for (int i =\
    \ 1; i < numbers.length; i++) \n    {\n        float diff = numbers[i] - numbers[i\
    \ - 1];\n        if (diff < min_diff) \n        {\n            min_diff = diff;\n\
    \            min = numbers[i - 1];\n            max = numbers[i];\n        }\n\
    \        if (diff > max_diff) \n        {\n            max_diff = diff;\n    \
    \        min = numbers[i - 1];\n            max = numbers[i];\n        }\n   \
    \ }\n    return tuple(min, max);\n}", "{\n    float min = float.max;\n    float\
    \ a = 0;\n    float b = 0;\n    for (int i = 0; i < numbers.length; i++)\n   \
    \ {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n       \
    \     float diff = abs(numbers[i] - numbers[j]);\n            if (diff < min)\n\
    \            {\n                min = diff;\n                a = numbers[i];\n\
    \                b = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(a, b);\n}", "{\n    float min = float.max;\n    float a = 0.0;\n    float\
    \ b = 0.0;\n    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int\
    \ j = i + 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min)\n            {\n               \
    \ min = diff;\n                a = numbers[i];\n                b = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(a, b);\n}", "{\n    float min\
    \ = numbers[0];\n    float max = numbers[0];\n    float min_diff = abs(numbers[0]\
    \ - numbers[1]);\n    for (int i = 0; i < numbers.length; i++)\n    {\n      \
    \  for (int j = i + 1; j < numbers.length; j++)\n        {\n            float\
    \ diff = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\n   \
    \         {\n                min_diff = diff;\n                min = min(numbers[i],\
    \ numbers[j]);\n                max = max(numbers[i], numbers[j]);\n         \
    \   }\n        }\n    }\n    return tuple(min, max);\n}", "{\n    float min =\
    \ abs(numbers[0] - numbers[1]);\n    Tuple!(float, float) result = tuple(numbers[0],\
    \ numbers[1]);\n    foreach(i, number; numbers)\n    {\n        foreach(j, other;\
    \ numbers[i+1..$])\n        {\n            float diff = abs(number - other);\n\
    \            if(diff < min)\n            {\n                min = diff;\n    \
    \            result = tuple(number, other);\n            }\n        }\n    }\n\
    \    return result;\n}", "{\n    float min_diff = abs(numbers[0] - numbers[1]);\n\
    \    float min_a = numbers[0];\n    float min_b = numbers[1];\n    for (int i\
    \ = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                min_a = numbers[i];\n                min_b = numbers[j];\n  \
    \          }\n        }\n    }\n    return tuple(min_a, min_b);\n}", "{\n    float\
    \ min = abs(numbers[0] - numbers[1]);\n    float min1 = numbers[0];\n    float\
    \ min2 = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n    {\n  \
    \      for (int j = i + 1; j < numbers.length; j++)\n        {\n            if\
    \ (abs(numbers[i] - numbers[j]) < min)\n            {\n                min = abs(numbers[i]\
    \ - numbers[j]);\n                min1 = numbers[i];\n                min2 = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(min1, min2);\n}", "{\n    float\
    \ min_diff = abs(numbers[0] - numbers[1]);\n    float min_num1 = numbers[0];\n\
    \    float min_num2 = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\
    \ \n    {\n        for (int j = i + 1; j < numbers.length; j++) \n        {\n\
    \            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min_diff) \n            {\n                min_diff = diff;\n            \
    \    min_num1 = numbers[i];\n                min_num2 = numbers[j];\n        \
    \    }\n        }\n    }\n    return tuple(min_num1, min_num2);\n}", "{\n    assert(numbers.length\
    \ >= 2);\n    float min_diff = numbers[1] - numbers[0];\n    float min_a = numbers[0];\n\
    \    float min_b = numbers[1];\n    for (int i = 0; i < numbers.length; i++) \n\
    \    {\n        for (int j = i + 1; j < numbers.length; j++) \n        {\n   \
    \         float diff = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\
    \ \n            {\n                min_diff = diff;\n                min_a = numbers[i];\n\
    \                min_b = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(min_a, min_b);\n}", "{\n    assert(numbers.length >= 2);\n    float min\
    \ = numbers[0];\n    float max = numbers[0];\n    for (int i = 1; i < numbers.length;\
    \ i++) \n    {\n        if (numbers[i] < min) \n        {\n            min = numbers[i];\n\
    \        }\n        if (numbers[i] > max) \n        {\n            max = numbers[i];\n\
    \        }\n    }\n    return tuple(min, max);\n}", "{\n    float min_diff = abs(numbers[0]\
    \ - numbers[1]);\n    Tuple!(float, float) closest_pair = tuple(numbers[0], numbers[1]);\n\
    \    for (int i = 0; i < numbers.length - 1; i++)\n    {\n        for (int j =\
    \ i + 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                closest_pair = tuple(numbers[i], numbers[j]);\n\
    \            }\n        }\n    }\n    return closest_pair;\n}", "{\n    float\
    \ min = float.infinity;\n    float min1 = 0.0;\n    float min2 = 0.0;\n    foreach(i,\
    \ v; numbers)\n    {\n        foreach(j, w; numbers)\n        {\n            if(i\
    \ != j)\n            {\n                float diff = abs(v - w);\n           \
    \     if(diff < min)\n                {\n                    min = diff;\n   \
    \                 min1 = v;\n                    min2 = w;\n                }\n\
    \            }\n        }\n    }\n    return tuple(min1, min2);\n}", "{\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    float min_diff = abs(numbers[0]\
    \ - numbers[1]);\n    for (int i = 0; i < numbers.length; i++) \n    {\n     \
    \   for (int j = i + 1; j < numbers.length; j++) \n        {\n            if (abs(numbers[i]\
    \ - numbers[j]) < min_diff) \n            {\n                min_diff = abs(numbers[i]\
    \ - numbers[j]);\n                min = min(numbers[i], numbers[j]);\n       \
    \         max = max(numbers[i], numbers[j]);\n            }\n        }\n    }\n\
    \    return tuple(min, max);\n}", "{\n    assert(numbers.length >= 2);\n    float\
    \ min = abs(numbers[0] - numbers[1]);\n    float a = numbers[0];\n    float b\
    \ = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n    {\n       \
    \ for (int j = i + 1; j < numbers.length; j++)\n        {\n            float diff\
    \ = abs(numbers[i] - numbers[j]);\n            if (diff < min)\n            {\n\
    \                min = diff;\n                a = numbers[i];\n              \
    \  b = numbers[j];\n            }\n        }\n    }\n    return tuple(a, b);\n\
    }", "{\n    float min_diff = abs(numbers[0] - numbers[1]);\n    float min_num1\
    \ = numbers[0];\n    float min_num2 = numbers[1];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n\
    \            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min_diff)\n            {\n                min_diff = diff;\n             \
    \   min_num1 = numbers[i];\n                min_num2 = numbers[j];\n         \
    \   }\n        }\n    }\n    return tuple(min_num1, min_num2);\n}", "{\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    float diff = numbers[1]\
    \ - numbers[0];\n    for (int i = 0; i < numbers.length; i++)\n    {\n       \
    \ for (int j = i + 1; j < numbers.length; j++)\n        {\n            if (abs(numbers[i]\
    \ - numbers[j]) < diff)\n            {\n                min = min(numbers[i],\
    \ numbers[j]);\n                max = max(numbers[i], numbers[j]);\n         \
    \       diff = abs(numbers[i] - numbers[j]);\n            }\n        }\n    }\n\
    \    return tuple(min, max);\n}", "{\n    float min = float.max;\n    float min1\
    \ = 0.0;\n    float min2 = 0.0;\n    for (int i = 0; i < numbers.length - 1; i++)\n\
    \    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n    \
    \        float diff = abs(numbers[i] - numbers[j]);\n            if (diff < min)\n\
    \            {\n                min = diff;\n                min1 = numbers[i];\n\
    \                min2 = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(min1, min2);\n}", "{\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    float min_diff = numbers[1] - numbers[0];\n    float max_diff = numbers[1]\
    \ - numbers[0];\n    for (int i = 1; i < numbers.length; i++) \n    {\n      \
    \  float diff = numbers[i] - numbers[i - 1];\n        if (diff < min_diff) \n\
    \        {\n            min_diff = diff;\n            min = numbers[i - 1];\n\
    \            max = numbers[i];\n        }\n        if (diff > max_diff) \n   \
    \     {\n            max_diff = diff;\n            min = numbers[i - 1];\n   \
    \         max = numbers[i];\n        }\n    }\n    return tuple(min, max);\n}",
  "{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = abs(numbers[0] - numbers[1]);\n    for (int i = 0; i < numbers.length; i++)\n\
    \    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n    \
    \        float diff = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\n\
    \            {\n                min_diff = diff;\n                min = min(numbers[i],\
    \ numbers[j]);\n                max = max(numbers[i], numbers[j]);\n         \
    \   }\n        }\n    }\n    return tuple(min, max);\n}", "{\n    assert(numbers.length\
    \ >= 2);\n    float min_diff = numbers[1] - numbers[0];\n    float min_a = numbers[0];\n\
    \    float min_b = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n\
    \    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n    \
    \        float diff = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\n\
    \            {\n                min_diff = diff;\n                min_a = numbers[i];\n\
    \                min_b = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(min_a, min_b);\n}", "{\n    float min = float.max;\n    float a = 0.0;\n\
    \    float b = 0.0;\n    foreach(i, n; numbers)\n    {\n        foreach(j, m;\
    \ numbers)\n        {\n            if(i != j)\n            {\n               \
    \ float diff = abs(n - m);\n                if(diff < min)\n                {\n\
    \                    min = diff;\n                    a = n;\n               \
    \     b = m;\n                }\n            }\n        }\n    }\n    return tuple(a,\
    \ b);\n}", "{\n    float min = numbers[0];\n    float max = numbers[0];\n    float\
    \ min_diff = numbers[1] - numbers[0];\n    float max_diff = numbers[1] - numbers[0];\n\
    \    for (int i = 1; i < numbers.length; i++)\n    {\n        float diff = numbers[i]\
    \ - numbers[i-1];\n        if (diff < min_diff)\n        {\n            min_diff\
    \ = diff;\n            min = numbers[i-1];\n            max = numbers[i];\n  \
    \      }\n        if (diff > max_diff)\n        {\n            max_diff = diff;\n\
    \        }\n    }\n    return tuple(min, max);\n}", "{\n    assert(numbers.length\
    \ >= 2);\n    float minDiff = abs(numbers[0] - numbers[1]);\n    float min1 =\
    \ numbers[0];\n    float min2 = numbers[1];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n\
    \            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < minDiff)\n            {\n                minDiff = diff;\n               \
    \ min1 = numbers[i];\n                min2 = numbers[j];\n            }\n    \
    \    }\n    }\n    return tuple(min1, min2);\n}", "{\n    assert(numbers.length\
    \ >= 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    float\
    \ min_diff = numbers[1] - numbers[0];\n    foreach(i, n; numbers)\n    {\n   \
    \     if(n < min)\n        {\n            min = n;\n        }\n        if(n >\
    \ max)\n        {\n            max = n;\n        }\n        if(i > 0)\n      \
    \  {\n            float diff = abs(numbers[i] - numbers[i-1]);\n            if(diff\
    \ < min_diff)\n            {\n                min_diff = diff;\n            }\n\
    \        }\n    }\n    return tuple(min, max);\n}", "{\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    float diff = numbers[1] - numbers[0];\n    for\
    \ (int i = 0; i < numbers.length; i++) \n    {\n        if (numbers[i] < min)\
    \ \n        {\n            min = numbers[i];\n        }\n        if (numbers[i]\
    \ > max) \n        {\n            max = numbers[i];\n        }\n        for (int\
    \ j = i + 1; j < numbers.length; j++) \n        {\n            if (abs(numbers[i]\
    \ - numbers[j]) < diff) \n            {\n                diff = abs(numbers[i]\
    \ - numbers[j]);\n                min = numbers[i];\n                max = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(min, max);\n}", "{\n    float\
    \ min_diff = float.max;\n    float min_a = 0.0;\n    float min_b = 0.0;\n    foreach(i,\
    \ a; numbers)\n    {\n        foreach(j, b; numbers)\n        {\n            if\
    \ (i != j)\n            {\n                float diff = abs(a - b);\n        \
    \        if (diff < min_diff)\n                {\n                    min_diff\
    \ = diff;\n                    min_a = a;\n                    min_b = b;\n  \
    \              }\n            }\n        }\n    }\n    return tuple(min_a, min_b);\n\
    }", "{\n    float min = abs(numbers[0] - numbers[1]);\n    float a = numbers[0];\n\
    \    float b = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n   \
    \ {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n       \
    \     if (abs(numbers[i] - numbers[j]) < min)\n            {\n               \
    \ min = abs(numbers[i] - numbers[j]);\n                a = numbers[i];\n     \
    \           b = numbers[j];\n            }\n        }\n    }\n    return tuple(a,\
    \ b);\n}", "{\n    float min = float.max;\n    float min1 = 0.0;\n    float min2\
    \ = 0.0;\n    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int\
    \ j = i + 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min)\n            {\n               \
    \ min = diff;\n                min1 = numbers[i];\n                min2 = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(min1, min2);\n}", "{\n    float\
    \ min = float.max;\n    float a = 0.0;\n    float b = 0.0;\n    for (int i = 0;\
    \ i < numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if (diff < min)\n            {\n                min = diff;\n     \
    \           a = numbers[i];\n                b = numbers[j];\n            }\n\
    \        }\n    }\n    return tuple(a, b);\n}", "{\n    assert(numbers.length\
    \ >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n    float min_diff_a\
    \ = numbers[0];\n    float min_diff_b = numbers[1];\n    for (size_t i = 0; i\
    \ < numbers.length; i++) \n    {\n        for (size_t j = i + 1; j < numbers.length;\
    \ j++) \n        {\n            float diff = abs(numbers[i] - numbers[j]);\n \
    \           if (diff < min_diff) \n            {\n                min_diff = diff;\n\
    \                min_diff_a = numbers[i];\n                min_diff_b = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(min_diff_a, min_diff_b);\n}",
  "{\n    float min_diff = float.max;\n    float min_a = 0.0;\n    float min_b = 0.0;\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                min_a = numbers[i];\n               \
    \ min_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}", "{\n    float min = float.max;\n    float a, b;\n    foreach(i,\
    \ x; numbers)\n    {\n        foreach(j, y; numbers)\n        {\n            if(i\
    \ != j)\n            {\n                float diff = abs(x - y);\n           \
    \     if(diff < min)\n                {\n                    min = diff;\n   \
    \                 a = x;\n                    b = y;\n                }\n    \
    \        }\n        }\n    }\n    return tuple(a, b);\n}", "{\n    float min =\
    \ float.max;\n    float a = 0.0;\n    float b = 0.0;\n    foreach(i, x; numbers)\n\
    \    {\n        foreach(j, y; numbers)\n        {\n            if(i != j)\n  \
    \          {\n                float diff = abs(x - y);\n                if(diff\
    \ < min)\n                {\n                    min = diff;\n               \
    \     a = x;\n                    b = y;\n                }\n            }\n \
    \       }\n    }\n    return tuple(a, b);\n}", "{\n    float min_diff = float.infinity;\n\
    \    float min_a = 0.0;\n    float min_b = 0.0;\n    for (size_t i = 0; i < numbers.length;\
    \ i++)\n    {\n        for (size_t j = i + 1; j < numbers.length; j++)\n     \
    \   {\n            float diff = abs(numbers[i] - numbers[j]);\n            if\
    \ (diff < min_diff)\n            {\n                min_diff = diff;\n       \
    \         min_a = numbers[i];\n                min_b = numbers[j];\n         \
    \   }\n        }\n    }\n    return tuple(min_a, min_b);\n}", "{\n    float min\
    \ = float.max;\n    float a = 0.0;\n    float b = 0.0;\n    foreach(i, number;\
    \ numbers)\n    {\n        foreach(j, other; numbers[i+1..$])\n        {\n   \
    \         float diff = abs(number - other);\n            if(diff < min)\n    \
    \        {\n                min = diff;\n                a = number;\n       \
    \         b = other;\n            }\n        }\n    }\n    return tuple(a, b);\n\
    }", "{\n    float min_diff = numbers[1] - numbers[0];\n    float min_num1 = numbers[0];\n\
    \    float min_num2 = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n\
    \    {\n        for (int j = i+1; j < numbers.length; j++)\n        {\n      \
    \      float diff = numbers[j] - numbers[i];\n            if (diff < min_diff)\n\
    \            {\n                min_diff = diff;\n                min_num1 = numbers[i];\n\
    \                min_num2 = numbers[j];\n            }\n        }\n    }\n   \
    \ return tuple(min_num1, min_num2);\n}", "{\n    assert(numbers.length >= 2);\n\
    \    float min_diff = abs(numbers[0] - numbers[1]);\n    float min_num1 = numbers[0];\n\
    \    float min_num2 = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n\
    \    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n    \
    \        float diff = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\n\
    \            {\n                min_diff = diff;\n                min_num1 = numbers[i];\n\
    \                min_num2 = numbers[j];\n            }\n        }\n    }\n   \
    \ return tuple(min_num1, min_num2);\n}", "{\n    float min = abs(numbers[0] -\
    \ numbers[1]);\n    float a = numbers[0];\n    float b = numbers[1];\n    for\
    \ (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j <\
    \ numbers.length; j++)\n        {\n            if (abs(numbers[i] - numbers[j])\
    \ < min)\n            {\n                min = abs(numbers[i] - numbers[j]);\n\
    \                a = numbers[i];\n                b = numbers[j];\n          \
    \  }\n        }\n    }\n    return tuple(a, b);\n}", "{\n    float min = abs(numbers[0]\
    \ - numbers[1]);\n    Tuple!(float, float) result = tuple(numbers[0], numbers[1]);\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i\
    \ + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min) \n            {\n              \
    \  min = diff;\n                result = tuple(numbers[i], numbers[j]);\n    \
    \        }\n        }\n    }\n    return result;\n}", "{\n    assert(numbers.length\
    \ >= 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    float\
    \ min_diff = numbers[1] - numbers[0];\n    float max_diff = numbers[1] - numbers[0];\n\
    \    for (int i = 1; i < numbers.length; i++) \n    {\n        float diff = numbers[i]\
    \ - numbers[i - 1];\n        if (diff < min_diff) \n        {\n            min_diff\
    \ = diff;\n            min = numbers[i - 1];\n            max = numbers[i];\n\
    \        }\n        if (diff > max_diff) \n        {\n            max_diff = diff;\n\
    \            min = numbers[i - 1];\n            max = numbers[i];\n        }\n\
    \    }\n    return tuple(min, max);\n}", "{\n    float min_diff = abs(numbers[0]\
    \ - numbers[1]);\n    float min_num1 = numbers[0];\n    float min_num2 = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                min_num1 = numbers[i];\n            \
    \    min_num2 = numbers[j];\n            }\n        }\n    }\n    return tuple(min_num1,\
    \ min_num2);\n}", "{\n    float min = float.max;\n    float a = 0;\n    float\
    \ b = 0;\n    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int\
    \ j = i + 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min)\n            {\n               \
    \ min = diff;\n                a = numbers[i];\n                b = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(a, b);\n}", "{\n    float min\
    \ = float.max;\n    float min_a = 0.0;\n    float min_b = 0.0;\n    foreach(i,\
    \ a; numbers)\n    {\n        foreach(j, b; numbers)\n        {\n            if(i\
    \ == j)\n                continue;\n            float diff = abs(a - b);\n   \
    \         if(diff < min)\n            {\n                min = diff;\n       \
    \         min_a = a;\n                min_b = b;\n            }\n        }\n \
    \   }\n    return tuple(min_a, min_b);\n}", "{\n    assert(numbers.length >= 2);\n\
    \    float min_diff = abs(numbers[0] - numbers[1]);\n    float min_num1 = numbers[0];\n\
    \    float min_num2 = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\
    \ \n    {\n        for (int j = i + 1; j < numbers.length; j++) \n        {\n\
    \            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min_diff) \n            {\n                min_diff = diff;\n            \
    \    min_num1 = numbers[i];\n                min_num2 = numbers[j];\n        \
    \    }\n        }\n    }\n    return tuple(min_num1, min_num2);\n}", "{\n    float\
    \ min = abs(numbers[0] - numbers[1]);\n    float a = numbers[0];\n    float b\
    \ = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n    {\n       \
    \ for (int j = i + 1; j < numbers.length; j++)\n        {\n            if (abs(numbers[i]\
    \ - numbers[j]) < min)\n            {\n                min = abs(numbers[i] -\
    \ numbers[j]);\n                a = numbers[i];\n                b = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(a, b);\n}", "{\n    assert(numbers.length\
    \ >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n    float min_num1\
    \ = numbers[0];\n    float min_num2 = numbers[1];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n\
    \            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min_diff)\n            {\n                min_diff = diff;\n             \
    \   min_num1 = numbers[i];\n                min_num2 = numbers[j];\n         \
    \   }\n        }\n    }\n    return tuple(min_num1, min_num2);\n}", "{\n    float\
    \ min = abs(numbers[0] - numbers[1]);\n    float a = numbers[0];\n    float b\
    \ = numbers[1];\n    for (size_t i = 0; i < numbers.length; i++)\n    {\n    \
    \    for (size_t j = i + 1; j < numbers.length; j++)\n        {\n            float\
    \ diff = abs(numbers[i] - numbers[j]);\n            if (diff < min)\n        \
    \    {\n                min = diff;\n                a = numbers[i];\n       \
    \         b = numbers[j];\n            }\n        }\n    }\n    return tuple(a,\
    \ b);\n}", "{\n    float min = numbers[0];\n    float max = numbers[0];\n    foreach(n;\
    \ numbers)\n    {\n        if(n < min)\n            min = n;\n        if(n > max)\n\
    \            max = n;\n    }\n    float min_diff = max - min;\n    float min_a\
    \ = min;\n    float min_b = max;\n    for(int i = 0; i < numbers.length; i++)\n\
    \    {\n        for(int j = i + 1; j < numbers.length; j++)\n        {\n     \
    \       float diff = abs(numbers[i] - numbers[j]);\n            if(diff < min_diff)\n\
    \            {\n                min_diff = diff;\n                min_a = numbers[i];\n\
    \                min_b = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(min_a, min_b);\n}", "{\n    assert(numbers.length >= 2);\n    float min_diff\
    \ = abs(numbers[0] - numbers[1]);\n    float min_a = numbers[0];\n    float min_b\
    \ = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n    {\n       \
    \ for (int j = i + 1; j < numbers.length; j++)\n        {\n            float diff\
    \ = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\n        \
    \    {\n                min_diff = diff;\n                min_a = numbers[i];\n\
    \                min_b = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(min_a, min_b);\n}", "{\n    assert(numbers.length >= 2);\n    float min\
    \ = abs(numbers[0] - numbers[1]);\n    int index = 0;\n    for (int i = 0; i <\
    \ numbers.length - 1; i++) \n    {\n        float temp = abs(numbers[i] - numbers[i\
    \ + 1]);\n        if (temp < min) \n        {\n            min = temp;\n     \
    \       index = i;\n        }\n    }\n    return tuple(numbers[index], numbers[index\
    \ + 1]);\n}", "{\n    float min = float.max;\n    float a = 0;\n    float b =\
    \ 0;\n    foreach(i, number; numbers)\n    {\n        foreach(j, number2; numbers)\n\
    \        {\n            if(i != j)\n            {\n                float diff\
    \ = abs(number - number2);\n                if(diff < min)\n                {\n\
    \                    min = diff;\n                    a = number;\n          \
    \          b = number2;\n                }\n            }\n        }\n    }\n\
    \    return tuple(a, b);\n}", "{\n    float min = float.infinity;\n    float a\
    \ = 0.0;\n    float b = 0.0;\n    foreach(i, x; numbers)\n    {\n        foreach(j,\
    \ y; numbers)\n        {\n            if(i != j)\n            {\n            \
    \    float diff = abs(x - y);\n                if(diff < min)\n              \
    \  {\n                    min = diff;\n                    a = x;\n          \
    \          b = y;\n                }\n            }\n        }\n    }\n    return\
    \ tuple(a, b);\n}", "{\n    assert(numbers.length >= 2);\n    float min_diff =\
    \ abs(numbers[0] - numbers[1]);\n    Tuple!(float, float) result = tuple(numbers[0],\
    \ numbers[1]);\n    for (int i = 0; i < numbers.length; i++)\n    {\n        for\
    \ (int j = i + 1; j < numbers.length; j++)\n        {\n            float diff\
    \ = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\n        \
    \    {\n                min_diff = diff;\n                result = tuple(numbers[i],\
    \ numbers[j]);\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = numbers[1] - numbers[0];\n\
    \    float min_diff_a = numbers[0];\n    float min_diff_b = numbers[1];\n    for\
    \ (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j <\
    \ numbers.length; j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n\
    \            if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                min_diff_a = numbers[i];\n                min_diff_b = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(min_diff_a, min_diff_b);\n}",
  "{\n    float min = 0.0;\n    float max = 0.0;\n    float diff = 0.0;\n    float\
    \ min_diff = 0.0;\n    float[] temp = numbers[0..$-1];\n    float[] temp2 = numbers[1..$];\n\
    \    foreach(i, j; zip(temp, temp2))\n    {\n        diff = abs(i - j);\n    \
    \    if(diff < min_diff)\n        {\n            min_diff = diff;\n          \
    \  min = i;\n            max = j;\n        }\n    }\n    return tuple(min, max);\n\
    }", "{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    foreach(i, number; numbers)\n    {\n       \
    \ if(number < min)\n        {\n            min = number;\n        }\n        if(number\
    \ > max)\n        {\n            max = number;\n        }\n        if(i > 0)\n\
    \        {\n            float diff = abs(number - numbers[i-1]);\n           \
    \ if(diff < min_diff)\n            {\n                min_diff = diff;\n     \
    \       }\n        }\n    }\n    return tuple(min, max);\n}", "{\n    float min\
    \ = abs(numbers[0] - numbers[1]);\n    float a = numbers[0];\n    float b = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = 0;\
    \ j < numbers.length; j++) \n        {\n            if (i != j) \n           \
    \ {\n                float diff = abs(numbers[i] - numbers[j]);\n            \
    \    if (diff < min) \n                {\n                    min = diff;\n  \
    \                  a = numbers[i];\n                    b = numbers[j];\n    \
    \            }\n            }\n        }\n    }\n    return tuple(a, b);\n}",
  "{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n\
    \    float min_diff_a = numbers[0];\n    float min_diff_b = numbers[1];\n    for\
    \ (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i + 1; j\
    \ < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                min_diff_a = numbers[i];\n         \
    \       min_diff_b = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(min_diff_a, min_diff_b);\n}", "{\n    assert(numbers.length >= 2);\n \
    \   float minDiff = abs(numbers[0] - numbers[1]);\n    float min1 = numbers[0];\n\
    \    float min2 = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n\
    \    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n    \
    \        float diff = abs(numbers[i] - numbers[j]);\n            if (diff < minDiff)\n\
    \            {\n                minDiff = diff;\n                min1 = numbers[i];\n\
    \                min2 = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(min1, min2);\n}", "{\n    float min = float.max;\n    float a = 0.0;\n\
    \    float b = 0.0;\n    foreach(i, x; numbers)\n    {\n        foreach(j, y;\
    \ numbers)\n        {\n            if(i != j)\n            {\n               \
    \ float diff = abs(x - y);\n                if(diff < min)\n                {\n\
    \                    min = diff;\n                    a = x;\n               \
    \     b = y;\n                }\n            }\n        }\n    }\n    return tuple(a,\
    \ b);\n}", "{\n    float min = float.max;\n    float min_a = 0;\n    float min_b\
    \ = 0;\n    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int\
    \ j = i + 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min)\n            {\n               \
    \ min = diff;\n                min_a = numbers[i];\n                min_b = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(min_a, min_b);\n}", "{\n  \
    \  float min = float.max;\n    float[] result = new float[2];\n    foreach(i,\
    \ n; numbers)\n    {\n        foreach(j, m; numbers)\n        {\n            if(i\
    \ != j)\n            {\n                float diff = abs(n - m);\n           \
    \     if(diff < min)\n                {\n                    min = diff;\n   \
    \                 result[0] = n;\n                    result[1] = m;\n       \
    \         }\n            }\n        }\n    }\n    return tuple(result[0], result[1]);\n\
    }", "{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0]\
    \ - numbers[1]);\n    float min_a = numbers[0];\n    float min_b = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i\
    \ + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                min_a = numbers[i];\n              \
    \  min_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}", "{\n    assert(numbers.length >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    float min_diff = numbers[1] - numbers[0];\n\
    \    foreach(i, n; numbers) \n    {\n        if (n < min) \n        {\n      \
    \      min = n;\n        }\n        if (n > max) \n        {\n            max\
    \ = n;\n        }\n        if (i > 0) \n        {\n            float diff = abs(n\
    \ - numbers[i - 1]);\n            if (diff < min_diff) \n            {\n     \
    \           min_diff = diff;\n            }\n        }\n    }\n    return tuple(min,\
    \ max);\n}", "{\n    float min = abs(numbers[0] - numbers[1]);\n    float a =\
    \ numbers[0];\n    float b = numbers[1];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n\
    \            if (abs(numbers[i] - numbers[j]) < min)\n            {\n        \
    \        min = abs(numbers[i] - numbers[j]);\n                a = numbers[i];\n\
    \                b = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(a, b);\n}", "{\n    assert(numbers.length > 1);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    float min_diff = numbers[1] - numbers[0];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        if (numbers[i] <\
    \ min)\n        {\n            min = numbers[i];\n        }\n        if (numbers[i]\
    \ > max)\n        {\n            max = numbers[i];\n        }\n        if (i >\
    \ 0)\n        {\n            float diff = abs(numbers[i] - numbers[i-1]);\n  \
    \          if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \            }\n        }\n    }\n    return tuple(min, max);\n}", "{\n    float\
    \ min = float.max;\n    float first = 0.0;\n    float second = 0.0;\n    foreach(i,\
    \ x; numbers)\n    {\n        foreach(j, y; numbers)\n        {\n            if(i\
    \ != j)\n            {\n                float diff = abs(x - y);\n           \
    \     if(diff < min)\n                {\n                    min = diff;\n   \
    \                 first = x;\n                    second = y;\n              \
    \  }\n            }\n        }\n    }\n    return tuple(first, second);\n}", "{\n\
    \    float min = float.max;\n    float[] result = new float[2];\n    for (int\
    \ i = 0; i < numbers.length - 1; i++) \n    {\n        for (int j = i + 1; j <\
    \ numbers.length; j++) \n        {\n            float diff = abs(numbers[i] -\
    \ numbers[j]);\n            if (diff < min) \n            {\n                min\
    \ = diff;\n                result[0] = numbers[i];\n                result[1]\
    \ = numbers[j];\n            }\n        }\n    }\n    return tuple(result[0],\
    \ result[1]);\n}", "{\n    float min = abs(numbers[0] - numbers[1]);\n    float\
    \ a = numbers[0];\n    float b = numbers[1];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n\
    \            if (abs(numbers[i] - numbers[j]) < min)\n            {\n        \
    \        min = abs(numbers[i] - numbers[j]);\n                a = numbers[i];\n\
    \                b = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(a, b);\n}", "{\n    float min = float.max;\n    float min1 = float.max;\n\
    \    float min2 = float.max;\n    float min3 = float.max;\n    float min4 = float.max;\n\
    \    float min5 = float.max;\n    float min6 = float.max;\n    float min7 = float.max;\n\
    \    float min8 = float.max;\n    float min9 = float.max;\n    float min10 = float.max;\n\
    \    float min11 = float.max;\n    float min12 = float.max;\n    float min13 =\
    \ float.max;\n    float min14 = float.max;\n    float min15 = float.max;\n   \
    \ float min16 = float.max;\n    float min17 = float.max;\n    float min18 = float.max;\n\
    \    float min19 = float.max;\n    float min20 = float.max;\n    float min21 =\
    \ float.max;\n    float min22 = float.max;\n    float min23 = float.max;\n   \
    \ float min24 = float.max;\n    float min25 = float.max;\n    float min26 = float.max;\n\
    \    float min27 = float.max;\n    float min28 = float.max;\n    float min29 =\
    \ float.max;\n    float min30 = float.max;\n    float min31 = float.max;\n   \
    \ float min32 = float.max;\n    float min33 = float.max;\n    float min34 = float.max;\n\
    \    float min35 = float.max;\n    float min36 = float.max;\n    float min37 =\
    \ float.max;\n    float min38 = float.max;\n    float min39 = float.max;\n   \
    \ float min40 = float.max;\n    float min41 = float.max;\n    float min42 = float.max;\n\
    \    float min43 = float.max;\n    float min44 = float.max;\n    float min45 =\
    \ float.max;\n    float min46 = float.max;\n    float min47 = float.max;\n   \
    \ float min48 = float.max;\n    float min49 = float.max;\n    float min50 = float.max;\n",
  "{\n    assert(numbers.length >= 2);\n    float min_diff = numbers[1] - numbers[0];\n\
    \    float min_num1 = numbers[0];\n    float min_num2 = numbers[1];\n    for (int\
    \ i = 0; i < numbers.length; i++) \n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++) \n        {\n            float diff = abs(numbers[i] - numbers[j]);\n \
    \           if (diff < min_diff) \n            {\n                min_diff = diff;\n\
    \                min_num1 = numbers[i];\n                min_num2 = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(min_num1, min_num2);\n}", "{\n\
    \    float min = float.max;\n    float a = 0.0;\n    float b = 0.0;\n    foreach(i,\
    \ x; numbers)\n    {\n        foreach(j, y; numbers)\n        {\n            if(i\
    \ != j)\n            {\n                float diff = abs(x - y);\n           \
    \     if(diff < min)\n                {\n                    min = diff;\n   \
    \                 a = x;\n                    b = y;\n                }\n    \
    \        }\n        }\n    }\n    return tuple(a, b);\n}", "{\n    assert(numbers.length\
    \ >= 2);\n    float min = numbers[0];\n    float max = numbers[0];\n    float\
    \ diff = numbers[1] - numbers[0];\n    for (int i = 1; i < numbers.length; i++)\n\
    \    {\n        float temp = numbers[i] - numbers[i-1];\n        if (temp < diff)\n\
    \        {\n            diff = temp;\n            min = numbers[i-1];\n      \
    \      max = numbers[i];\n        }\n    }\n    return tuple(min, max);\n}", "{\n\
    \    float min_diff = numbers[1] - numbers[0];\n    float min_num1 = numbers[0];\n\
    \    float min_num2 = numbers[1];\n    foreach(i, num1; numbers[0..$-1])\n   \
    \ {\n        foreach(j, num2; numbers[i+1..$])\n        {\n            float diff\
    \ = abs(num1 - num2);\n            if(diff < min_diff)\n            {\n      \
    \          min_diff = diff;\n                min_num1 = num1;\n              \
    \  min_num2 = num2;\n            }\n        }\n    }\n    return tuple(min_num1,\
    \ min_num2);\n}", "{\n    float min = float.max;\n    float[] result = new float[2];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i\
    \ + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min) \n            {\n              \
    \  min = diff;\n                result[0] = numbers[i];\n                result[1]\
    \ = numbers[j];\n            }\n        }\n    }\n    return tuple(result[0],\
    \ result[1]);\n}", "{\n    assert(numbers.length >= 2);\n    float min_diff =\
    \ abs(numbers[0] - numbers[1]);\n    float min_num1 = numbers[0];\n    float min_num2\
    \ = numbers[1];\n    for (int i = 0; i < numbers.length; i++) \n    {\n      \
    \  for (int j = i + 1; j < numbers.length; j++) \n        {\n            float\
    \ diff = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff) \n  \
    \          {\n                min_diff = diff;\n                min_num1 = numbers[i];\n\
    \                min_num2 = numbers[j];\n            }\n        }\n    }\n   \
    \ return tuple(min_num1, min_num2);\n}", "{\n    float min = abs(numbers[0] -\
    \ numbers[1]);\n    float a = numbers[0];\n    float b = numbers[1];\n    for\
    \ (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j <\
    \ numbers.length; j++)\n        {\n            if (abs(numbers[i] - numbers[j])\
    \ < min)\n            {\n                min = abs(numbers[i] - numbers[j]);\n\
    \                a = numbers[i];\n                b = numbers[j];\n          \
    \  }\n        }\n    }\n    return tuple(a, b);\n}", "{\n    assert(numbers.length\
    \ >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n    float first\
    \ = numbers[0];\n    float second = numbers[1];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n\
    \            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min_diff)\n            {\n                min_diff = diff;\n             \
    \   first = numbers[i];\n                second = numbers[j];\n            }\n\
    \        }\n    }\n    return tuple(first, second);\n}", "{\n    assert(numbers.length\
    \ >= 2);\n    float minDiff = abs(numbers[0] - numbers[1]);\n    float min1 =\
    \ numbers[0];\n    float min2 = numbers[1];\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        for (int j = i + 1; j < numbers.length; j++) \n      \
    \  {\n            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < minDiff) \n            {\n                minDiff = diff;\n              \
    \  min1 = numbers[i];\n                min2 = numbers[j];\n            }\n   \
    \     }\n    }\n    return tuple(min1, min2);\n}", "{\n    assert(numbers.length\
    \ >= 2);\n    float min_diff = numbers[1] - numbers[0];\n    float min_num1 =\
    \ numbers[0];\n    float min_num2 = numbers[1];\n    for (int i = 0; i < numbers.length\
    \ - 1; i++)\n    {\n        float diff = numbers[i + 1] - numbers[i];\n      \
    \  if (diff < min_diff)\n        {\n            min_diff = diff;\n           \
    \ min_num1 = numbers[i];\n            min_num2 = numbers[i + 1];\n        }\n\
    \    }\n    return tuple(min_num1, min_num2);\n}", "{\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    float min_diff = numbers[1] - numbers[0];\n\
    \    for (int i = 1; i < numbers.length; i++)\n    {\n        float diff = numbers[i]\
    \ - numbers[i-1];\n        if (diff < min_diff)\n        {\n            min_diff\
    \ = diff;\n            min = numbers[i-1];\n            max = numbers[i];\n  \
    \      }\n    }\n    return tuple(min, max);\n}", "{\n    float min_diff = float.max;\n\
    \    float min_a = 0.0;\n    float min_b = 0.0;\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n\
    \            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min_diff)\n            {\n                min_diff = diff;\n             \
    \   min_a = numbers[i];\n                min_b = numbers[j];\n            }\n\
    \        }\n    }\n    return tuple(min_a, min_b);\n}", "{\n    assert(numbers.length\
    \ >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n    float min_num1\
    \ = numbers[0];\n    float min_num2 = numbers[1];\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        for (int j = i + 1; j < numbers.length; j++) \n      \
    \  {\n            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min_diff) \n            {\n                min_diff = diff;\n            \
    \    min_num1 = numbers[i];\n                min_num2 = numbers[j];\n        \
    \    }\n        }\n    }\n    return tuple(min_num1, min_num2);\n}", "{\n    float\
    \ min_diff = numbers[1] - numbers[0];\n    float min_num1 = numbers[0];\n    float\
    \ min_num2 = numbers[1];\n    foreach(i, num1; numbers[0..$-1])\n    {\n     \
    \   foreach(j, num2; numbers[i+1..$])\n        {\n            float diff = abs(num1\
    \ - num2);\n            if(diff < min_diff)\n            {\n                min_diff\
    \ = diff;\n                min_num1 = num1;\n                min_num2 = num2;\n\
    \            }\n        }\n    }\n    return tuple(min_num1, min_num2);\n}", "{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n\
    \    float min_diff_a = numbers[0];\n    float min_diff_b = numbers[1];\n    for\
    \ (size_t i = 0; i < numbers.length; i++)\n    {\n        for (size_t j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                min_diff_a = numbers[i];\n          \
    \      min_diff_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_diff_a,\
    \ min_diff_b);\n}", "{\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    float min_diff = numbers[1] - numbers[0];\n    float max_diff = numbers[1]\
    \ - numbers[0];\n    for (int i = 0; i < numbers.length; i++)\n    {\n       \
    \ for (int j = i + 1; j < numbers.length; j++)\n        {\n            float diff\
    \ = numbers[j] - numbers[i];\n            if (diff < min_diff)\n            {\n\
    \                min_diff = diff;\n                min = numbers[i];\n       \
    \         max = numbers[j];\n            }\n            if (diff > max_diff)\n\
    \            {\n                max_diff = diff;\n                min = numbers[i];\n\
    \                max = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(min, max);\n}", "{\n    float min_diff = 1e10;\n    float min_diff_a =\
    \ 0;\n    float min_diff_b = 0;\n    for (int i = 0; i < numbers.length; i++)\n\
    \    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n    \
    \        float diff = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\n\
    \            {\n                min_diff = diff;\n                min_diff_a =\
    \ numbers[i];\n                min_diff_b = numbers[j];\n            }\n     \
    \   }\n    }\n    return tuple(min_diff_a, min_diff_b);\n}", "{\n    float min\
    \ = abs(numbers[0] - numbers[1]);\n    float a = numbers[0];\n    float b = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            if (abs(numbers[i] - numbers[j])\
    \ < min)\n            {\n                min = abs(numbers[i] - numbers[j]);\n\
    \                a = numbers[i];\n                b = numbers[j];\n          \
    \  }\n        }\n    }\n    return tuple(a, b);\n}", "{\n    float min = float.max;\n\
    \    float[] result = new float[2];\n    for (int i = 0; i < numbers.length; i++)\n\
    \    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n    \
    \        float diff = abs(numbers[i] - numbers[j]);\n            if (diff < min)\n\
    \            {\n                min = diff;\n                result[0] = numbers[i];\n\
    \                result[1] = numbers[j];\n            }\n        }\n    }\n  \
    \  return tuple(result[0], result[1]);\n}", "{\n    assert(numbers.length >= 2);\n\
    \    float minDiff = abs(numbers[0] - numbers[1]);\n    float minNum1 = numbers[0];\n\
    \    float minNum2 = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n\
    \    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n    \
    \        float diff = abs(numbers[i] - numbers[j]);\n            if (diff < minDiff)\n\
    \            {\n                minDiff = diff;\n                minNum1 = numbers[i];\n\
    \                minNum2 = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(minNum1, minNum2);\n}", "{\n    float min = numbers[0];\n    float max\
    \ = numbers[0];\n    float min_diff = numbers[1] - numbers[0];\n    for (int i\
    \ = 1; i < numbers.length; i++)\n    {\n        float diff = numbers[i] - numbers[i-1];\n\
    \        if (diff < min_diff)\n        {\n            min_diff = diff;\n     \
    \       min = numbers[i-1];\n            max = numbers[i];\n        }\n    }\n\
    \    return tuple(min, max);\n}", "{\n    float min = numbers[0];\n    float max\
    \ = numbers[0];\n    float min_diff = numbers[1] - numbers[0];\n    for (int i\
    \ = 1; i < numbers.length; i++)\n    {\n        float diff = numbers[i] - numbers[i-1];\n\
    \        if (diff < min_diff)\n        {\n            min_diff = diff;\n     \
    \       min = numbers[i-1];\n            max = numbers[i];\n        }\n    }\n\
    \    return tuple(min, max);\n}", "{\n    float[] sorted = numbers.dup;\n    sorted.sort;\n\
    \    float min = sorted[1] - sorted[0];\n    float a = sorted[0];\n    float b\
    \ = sorted[1];\n    for (int i = 1; i < sorted.length - 1; i++) \n    {\n    \
    \    float diff = sorted[i + 1] - sorted[i];\n        if (diff < min) \n     \
    \   {\n            min = diff;\n            a = sorted[i];\n            b = sorted[i\
    \ + 1];\n        }\n    }\n    return tuple(a, b);\n}", "{\n    float min = float.max;\n\
    \    float num1 = 0;\n    float num2 = 0;\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n\
    \            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min)\n            {\n                min = diff;\n                num1 = numbers[i];\n\
    \                num2 = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(num1, num2);\n}", "{\n    assert(numbers.length >= 2);\n    float min\
    \ = numbers[0] - numbers[1];\n    float min_1 = numbers[0];\n    float min_2 =\
    \ numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n    {\n        for\
    \ (int j = i + 1; j < numbers.length; j++)\n        {\n            if (abs(numbers[i]\
    \ - numbers[j]) < min)\n            {\n                min = abs(numbers[i] -\
    \ numbers[j]);\n                min_1 = numbers[i];\n                min_2 = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(min_1, min_2);\n}", "{\n  \
    \  float min = float.max;\n    float a = 0.0;\n    float b = 0.0;\n    foreach(i,\
    \ number; numbers)\n    {\n        foreach(j, number2; numbers)\n        {\n \
    \           if(i != j)\n            {\n                float diff = abs(number\
    \ - number2);\n                if(diff < min)\n                {\n           \
    \         min = diff;\n                    a = number;\n                    b\
    \ = number2;\n                }\n            }\n        }\n    }\n    return tuple(a,\
    \ b);\n}", "{\n    float min = float.max;\n    float a = 0.0;\n    float b = 0.0;\n\
    \    foreach(i, number; numbers)\n    {\n        if(i == 0)\n            continue;\n\
    \        float diff = abs(number - numbers[i-1]);\n        if(diff < min)\n  \
    \      {\n            min = diff;\n            a = numbers[i-1];\n           \
    \ b = number;\n        }\n    }\n    return tuple(a, b);\n}", "{\n    float min\
    \ = abs(numbers[0] - numbers[1]);\n    float a = numbers[0];\n    float b = numbers[1];\n\
    \    foreach(i, number; numbers)\n    {\n        foreach(j, other; numbers)\n\
    \        {\n            if(i == j)\n                continue;\n            float\
    \ diff = abs(number - other);\n            if(diff < min)\n            {\n   \
    \             min = diff;\n                a = number;\n                b = other;\n\
    \            }\n        }\n    }\n    return tuple(a, b);\n}", "{\n    float min\
    \ = numbers[0];\n    float max = numbers[0];\n    float min_diff = numbers[1]\
    \ - numbers[0];\n    for (int i = 1; i < numbers.length; i++)\n    {\n       \
    \ float diff = numbers[i] - numbers[i-1];\n        if (diff < min_diff)\n    \
    \    {\n            min_diff = diff;\n            min = numbers[i-1];\n      \
    \      max = numbers[i];\n        }\n    }\n    return tuple(min, max);\n}", "{\n\
    \    assert(numbers.length >= 2);\n    float min_diff = numbers[1] - numbers[0];\n\
    \    int min_index = 0;\n    for (int i = 1; i < numbers.length - 1; i++) \n \
    \   {\n        float diff = numbers[i + 1] - numbers[i];\n        if (diff < min_diff)\
    \ \n        {\n            min_diff = diff;\n            min_index = i;\n    \
    \    }\n    }\n    return tuple(numbers[min_index], numbers[min_index + 1]);\n\
    }", "{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0]\
    \ - numbers[1]);\n    float a = numbers[0];\n    float b = numbers[1];\n    for\
    \ (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j <\
    \ numbers.length; j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n\
    \            if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                a = numbers[i];\n                b = numbers[j];\n          \
    \  }\n        }\n    }\n    return tuple(a, b);\n}", "{\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    float min_diff = numbers[1] - numbers[0];\n\
    \    float max_diff = numbers[1] - numbers[0];\n    foreach(i, number; numbers)\n\
    \    {\n        if(i == 0) continue;\n        float diff = number - numbers[i-1];\n\
    \        if(diff < min_diff)\n        {\n            min_diff = diff;\n      \
    \      min = numbers[i-1];\n            max = number;\n        }\n        if(diff\
    \ > max_diff)\n        {\n            max_diff = diff;\n            min = numbers[i-1];\n\
    \            max = number;\n        }\n    }\n    return tuple(min, max);\n}",
  "{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    for (int i = 1; i < numbers.length; i++)\n \
    \   {\n        float diff = numbers[i] - numbers[i-1];\n        if (diff < min_diff)\n\
    \        {\n            min_diff = diff;\n            min = numbers[i-1];\n  \
    \          max = numbers[i];\n        }\n    }\n    return tuple(min, max);\n}",
  "{\n    float min_diff = float.infinity;\n    float min_a = 0.0;\n    float min_b\
    \ = 0.0;\n    foreach(i, a; numbers)\n    {\n        foreach(j, b; numbers)\n\
    \        {\n            if (i != j)\n            {\n                float diff\
    \ = abs(a - b);\n                if (diff < min_diff)\n                {\n   \
    \                 min_diff = diff;\n                    min_a = a;\n         \
    \           min_b = b;\n                }\n            }\n        }\n    }\n \
    \   return tuple(min_a, min_b);\n}", "{\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    float min_diff = numbers[1] - numbers[0];\n    for (int\
    \ i = 1; i < numbers.length; i++) \n    {\n        float diff = numbers[i] - numbers[i\
    \ - 1];\n        if (diff < min_diff) \n        {\n            min_diff = diff;\n\
    \            min = numbers[i - 1];\n            max = numbers[i];\n        }\n\
    \    }\n    return tuple(min, max);\n}", "{\n    float min = numbers[0];\n   \
    \ float max = numbers[0];\n    float min_diff = numbers[1] - numbers[0];\n   \
    \ for (int i = 1; i < numbers.length; i++)\n    {\n        float diff = numbers[i]\
    \ - numbers[i-1];\n        if (diff < min_diff)\n        {\n            min_diff\
    \ = diff;\n            min = numbers[i-1];\n            max = numbers[i];\n  \
    \      }\n    }\n    return tuple(min, max);\n}", "{\n    float min_diff = numbers[1]\
    \ - numbers[0];\n    float min_diff_a = numbers[0];\n    float min_diff_b = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i\
    \ + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                min_diff_a = numbers[i];\n         \
    \       min_diff_b = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(min_diff_a, min_diff_b);\n}", "{\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    float diff = numbers[0] - numbers[1];\n    for (int i\
    \ = 0; i < numbers.length; i++) \n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++) \n        {\n            float temp = numbers[i] - numbers[j];\n      \
    \      if (temp < 0) \n            {\n                temp = -temp;\n        \
    \    }\n            if (temp < diff) \n            {\n                diff = temp;\n\
    \                min = numbers[i];\n                max = numbers[j];\n      \
    \      }\n        }\n    }\n    return tuple(min, max);\n}", "{\n    float smallest\
    \ = numbers[0];\n    float largest = numbers[0];\n    float smallest_diff = numbers[1]\
    \ - numbers[0];\n    float largest_diff = numbers[1] - numbers[0];\n    for (int\
    \ i = 1; i < numbers.length; i++)\n    {\n        if (numbers[i] < smallest)\n\
    \        {\n            smallest = numbers[i];\n        }\n        if (numbers[i]\
    \ > largest)\n        {\n            largest = numbers[i];\n        }\n      \
    \  if (i > 1)\n        {\n            float diff = numbers[i] - numbers[i-1];\n\
    \            if (diff < smallest_diff)\n            {\n                smallest_diff\
    \ = diff;\n            }\n            if (diff > largest_diff)\n            {\n\
    \                largest_diff = diff;\n            }\n        }\n    }\n    return\
    \ tuple(smallest, largest);\n}", "{\n    assert(numbers.length >= 2);\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    float min_diff = abs(numbers[0]\
    \ - numbers[1]);\n    for (int i = 0; i < numbers.length; i++)\n    {\n      \
    \  for (int j = i + 1; j < numbers.length; j++)\n        {\n            float\
    \ diff = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\n   \
    \         {\n                min_diff = diff;\n                min = min(numbers[i],\
    \ numbers[j]);\n                max = max(numbers[i], numbers[j]);\n         \
    \   }\n        }\n    }\n    return tuple(min, max);\n}", "{\n    float min_diff\
    \ = float.max;\n    float min_a = 0.0;\n    float min_b = 0.0;\n    foreach(i,\
    \ a; numbers)\n    {\n        foreach(j, b; numbers)\n        {\n            if\
    \ (i != j)\n            {\n                float diff = abs(a - b);\n        \
    \        if (diff < min_diff)\n                {\n                    min_diff\
    \ = diff;\n                    min_a = a;\n                    min_b = b;\n  \
    \              }\n            }\n        }\n    }\n    return tuple(min_a, min_b);\n\
    }", "{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0]\
    \ - numbers[1]);\n    float min_a = numbers[0];\n    float min_b = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                min_a = numbers[i];\n               \
    \ min_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}", "{\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    float min_diff = numbers[1] - numbers[0];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n\
    \            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min_diff)\n            {\n                min_diff = diff;\n             \
    \   min = min(numbers[i], numbers[j]);\n                max = max(numbers[i],\
    \ numbers[j]);\n            }\n        }\n    }\n    return tuple(min, max);\n\
    }", "{\n    Tuple!(float, float) closest_elements = tuple(numbers[0], numbers[1]);\n\
    \    float closest_distance = abs(numbers[0] - numbers[1]);\n    for (int i =\
    \ 0; i < numbers.length; i++) \n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++) \n        {\n            float distance = abs(numbers[i] - numbers[j]);\n\
    \            if (distance < closest_distance) \n            {\n              \
    \  closest_distance = distance;\n                closest_elements = tuple(numbers[i],\
    \ numbers[j]);\n            }\n        }\n    }\n    return closest_elements;\n\
    }", "{\n    assert(numbers.length >= 2);\n    float min_diff = numbers[1] - numbers[0];\n\
    \    Tuple!(float, float) closest_pair = tuple(numbers[0], numbers[1]);\n    for\
    \ (size_t i = 0; i < numbers.length; i++)\n    {\n        for (size_t j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                closest_pair = tuple(numbers[i], numbers[j]);\n\
    \            }\n        }\n    }\n    return closest_pair;\n}", "{\n    assert(numbers.length\
    \ >= 2);\n    float min_diff = abs(numbers[0] - numbers[1]);\n    float min_diff_a\
    \ = numbers[0];\n    float min_diff_b = numbers[1];\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        for (int j = i + 1; j < numbers.length; j++) \n      \
    \  {\n            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min_diff) \n            {\n                min_diff = diff;\n            \
    \    min_diff_a = numbers[i];\n                min_diff_b = numbers[j];\n    \
    \        }\n        }\n    }\n    return tuple(min_diff_a, min_diff_b);\n}", "{\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    float max_diff = numbers[1] - numbers[0];\n\
    \    foreach(i, number; numbers)\n    {\n        if(i == 0) continue;\n      \
    \  float diff = number - numbers[i-1];\n        if(diff < min_diff)\n        {\n\
    \            min_diff = diff;\n            min = numbers[i-1];\n            max\
    \ = number;\n        }\n        if(diff > max_diff)\n        {\n            max_diff\
    \ = diff;\n            min = numbers[i-1];\n            max = number;\n      \
    \  }\n    }\n    return tuple(min, max);\n}", "{\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    float diff = numbers[0] - numbers[1];\n    for\
    \ (int i = 0; i < numbers.length; i++)\n    {\n        if (numbers[i] < min)\n\
    \        {\n            min = numbers[i];\n        }\n        if (numbers[i] >\
    \ max)\n        {\n            max = numbers[i];\n        }\n        if (abs(numbers[i]\
    \ - numbers[i+1]) < diff)\n        {\n            diff = abs(numbers[i] - numbers[i+1]);\n\
    \        }\n    }\n    return tuple(min, max);\n}", "{\n    assert(numbers.length\
    \ >= 2);\n    float min_diff = numbers[1] - numbers[0];\n    float min_num1 =\
    \ numbers[0];\n    float min_num2 = numbers[1];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n\
    \            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min_diff)\n            {\n                min_diff = diff;\n             \
    \   min_num1 = numbers[i];\n                min_num2 = numbers[j];\n         \
    \   }\n        }\n    }\n    return tuple(min_num1, min_num2);\n}", "{\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    float min_diff = abs(numbers[0]\
    \ - numbers[1]);\n    for (int i = 0; i < numbers.length; i++)\n    {\n      \
    \  for (int j = i + 1; j < numbers.length; j++)\n        {\n            float\
    \ diff = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\n   \
    \         {\n                min_diff = diff;\n                min = min(numbers[i],\
    \ numbers[j]);\n                max = max(numbers[i], numbers[j]);\n         \
    \   }\n        }\n    }\n    return tuple(min, max);\n}", "{\n    float min =\
    \ numbers[0];\n    float max = numbers[0];\n    float min_diff = numbers[1] -\
    \ numbers[0];\n    float diff;\n    foreach(i, number; numbers)\n    {\n     \
    \   if(number < min)\n        {\n            min = number;\n        }\n      \
    \  if(number > max)\n        {\n            max = number;\n        }\n       \
    \ if(i > 0)\n        {\n            diff = abs(number - numbers[i-1]);\n     \
    \       if(diff < min_diff)\n            {\n                min_diff = diff;\n\
    \            }\n        }\n    }\n    return tuple(min, max);\n}", "{\n    assert(numbers.length\
    \ >= 2);\n    float minDiff = numbers[1] - numbers[0];\n    float min1 = numbers[0];\n\
    \    float min2 = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n\
    \    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n    \
    \        float diff = abs(numbers[i] - numbers[j]);\n            if (diff < minDiff)\n\
    \            {\n                minDiff = diff;\n                min1 = numbers[i];\n\
    \                min2 = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(min1, min2);\n}", "{\n    assert(numbers.length >= 2);\n    float min_diff\
    \ = abs(numbers[0] - numbers[1]);\n    Tuple!(float, float) result = tuple(numbers[0],\
    \ numbers[1]);\n    for (size_t i = 0; i < numbers.length; i++)\n    {\n     \
    \   for (size_t j = i + 1; j < numbers.length; j++)\n        {\n            float\
    \ diff = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\n   \
    \         {\n                min_diff = diff;\n                result = tuple(numbers[i],\
    \ numbers[j]);\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    float max_diff = numbers[1] - numbers[0];\n\
    \    for (int i = 1; i < numbers.length; i++) \n    {\n        float diff = numbers[i]\
    \ - numbers[i - 1];\n        if (diff < min_diff) \n        {\n            min_diff\
    \ = diff;\n            min = numbers[i - 1];\n            max = numbers[i];\n\
    \        }\n        if (diff > max_diff) \n        {\n            max_diff = diff;\n\
    \            min = numbers[i - 1];\n            max = numbers[i];\n        }\n\
    \    }\n    return tuple(min, max);\n}", "{\n    assert(numbers.length >= 2);\n\
    \    float min_diff = numbers[1] - numbers[0];\n    float min_num1 = numbers[0];\n\
    \    float min_num2 = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n\
    \    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n    \
    \        float diff = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\n\
    \            {\n                min_diff = diff;\n                min_num1 = numbers[i];\n\
    \                min_num2 = numbers[j];\n            }\n        }\n    }\n   \
    \ return tuple(min_num1, min_num2);\n}", "{\n    assert(numbers.length >= 2);\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    for (int i = 1; i < numbers.length; i++)\n \
    \   {\n        float diff = numbers[i] - numbers[i-1];\n        if (diff < min_diff)\n\
    \        {\n            min_diff = diff;\n            min = numbers[i-1];\n  \
    \          max = numbers[i];\n        }\n    }\n    return tuple(min, max);\n}",
  "{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    foreach(i, number; numbers)\n    {\n       \
    \ if(i == 0)\n            continue;\n        float diff = number - numbers[i-1];\n\
    \        if(diff < min_diff)\n        {\n            min_diff = diff;\n      \
    \      min = numbers[i-1];\n            max = number;\n        }\n    }\n    return\
    \ tuple(min, max);\n}", "{\n    assert(numbers.length >= 2);\n    float min =\
    \ abs(numbers[0] - numbers[1]);\n    float a = numbers[0];\n    float b = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min)\n            {\n               \
    \ min = diff;\n                a = numbers[i];\n                b = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(a, b);\n}", "{\n    assert(numbers.length\
    \ >= 2);\n    float minDiff = abs(numbers[0] - numbers[1]);\n    float first =\
    \ numbers[0];\n    float second = numbers[1];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n\
    \            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < minDiff)\n            {\n                minDiff = diff;\n               \
    \ first = numbers[i];\n                second = numbers[j];\n            }\n \
    \       }\n    }\n    return tuple(first, second);\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
