language: d
name: HumanEval_143_words_in_sentence
results:
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n      \
    \  if(is_prime(word.length))\n        {\n            result ~= word ~ \" \";\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmfvkrqvk.d(25): Error: undefined identifier `split`\n/tmp/tmpmfvkrqvk.d(29):
    Error: undefined identifier `is_prime`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpmfvkrqvk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.trim();\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsndzbclc.d(25): Error: undefined identifier `split`\n/tmp/tmpsndzbclc.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpsndzbclc.d(34): Error: no property
    `trim` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsndzbclc.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n      \
    \  if(is_prime(word.length))\n        {\n            result ~= word ~ \" \";\n\
    \        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_du6vhj7.d(25): Error: undefined identifier `split`\n/tmp/tmp_du6vhj7.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmp_du6vhj7.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_du6vhj7.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpngk187gi.d(25): Error: undefined identifier `split`\n/tmp/tmpngk187gi.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpngk187gi.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpngk187gi.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.trim();\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2juu7zsx.d(25): Error: undefined identifier `split`\n/tmp/tmp2juu7zsx.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmp2juu7zsx.d(34): Error: no property
    `trim` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2juu7zsx.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight();\n}\nunittest\n{\n   \
    \ alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\"\
    ) == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n\
    \    assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppkix3f_l.d(25): Error: undefined identifier `split`\n/tmp/tmppkix3f_l.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmppkix3f_l.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppkix3f_l.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight();\n}\nunittest\n{\n   \
    \ alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\"\
    ) == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n\
    \    assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpketbxu09.d(25): Error: undefined identifier `split`\n/tmp/tmpketbxu09.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpketbxu09.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpketbxu09.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.trim();\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpraqx8k69.d(25): Error: undefined identifier `split`\n/tmp/tmpraqx8k69.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpraqx8k69.d(34): Error: no property
    `trim` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpraqx8k69.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n      \
    \  if(is_prime(word.length))\n        {\n            result ~= word ~ \" \";\n\
    \        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdec2rkd5.d(25): Error: undefined identifier `split`\n/tmp/tmpdec2rkd5.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpdec2rkd5.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdec2rkd5.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight();\n}\nunittest\n{\n   \
    \ alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\"\
    ) == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n\
    \    assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq3doxzq0.d(25): Error: undefined identifier `split`\n/tmp/tmpq3doxzq0.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpq3doxzq0.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq3doxzq0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n      \
    \  if(is_prime(word.length))\n        {\n            result ~= word ~ \" \";\n\
    \        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphi4a_x8m.d(25): Error: undefined identifier `split`\n/tmp/tmphi4a_x8m.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmphi4a_x8m.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphi4a_x8m.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight();\n}\nunittest\n{\n   \
    \ alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\"\
    ) == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n\
    \    assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppisf36bj.d(25): Error: undefined identifier `split`\n/tmp/tmppisf36bj.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmppisf36bj.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppisf36bj.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n      \
    \  if(is_prime(word.length))\n        {\n            result ~= word ~ \" \";\n\
    \        }\n    }\n    return result.trim();\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxngo_8sq.d(25): Error: undefined identifier `split`\n/tmp/tmpxngo_8sq.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpxngo_8sq.d(34): Error: no property
    `trim` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxngo_8sq.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpog72v1qp.d(25): Error: undefined identifier `split`\n/tmp/tmpog72v1qp.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpog72v1qp.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpog72v1qp.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string result = \"\";\n    string[]\
    \ words = split(sentence, \" \");\n    foreach(string word; words)\n    {\n  \
    \      if(isPrime(word.length))\n        {\n            result ~= word ~ \" \"\
    ;\n        }\n    }\n    return result.trim();\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpoxkg2ryg.d(26): Error: undefined identifier `split`\n/tmp/tmpoxkg2ryg.d(29):
    Error: undefined identifier `isPrime`\n/tmp/tmpoxkg2ryg.d(34): Error: no property
    `trim` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoxkg2ryg.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string result = \"\";\n    string[]\
    \ words = split(sentence, \" \");\n    foreach(string word; words)\n    {\n  \
    \      if(isPrime(word.length))\n        {\n            result ~= word ~ \" \"\
    ;\n        }\n    }\n    return result.trim();\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyasfrv9e.d(26): Error: undefined identifier `split`\n/tmp/tmpyasfrv9e.d(29):
    Error: undefined identifier `isPrime`\n/tmp/tmpyasfrv9e.d(34): Error: no property
    `trim` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyasfrv9e.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string result = \"\";\n    string[]\
    \ words = split(sentence, \" \");\n    foreach(string word; words)\n    {\n  \
    \      if(isPrime(word.length))\n        {\n            result ~= word ~ \" \"\
    ;\n        }\n    }\n    return result.trim();\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjtu922x3.d(26): Error: undefined identifier `split`\n/tmp/tmpjtu922x3.d(29):
    Error: undefined identifier `isPrime`\n/tmp/tmpjtu922x3.d(34): Error: no property
    `trim` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjtu922x3.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.trim();\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw6eigz81.d(25): Error: undefined identifier `split`\n/tmp/tmpw6eigz81.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpw6eigz81.d(34): Error: no property
    `trim` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw6eigz81.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight();\n}\nunittest\n{\n   \
    \ alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\"\
    ) == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n\
    \    assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqpy_pk9_.d(25): Error: undefined identifier `split`\n/tmp/tmpqpy_pk9_.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpqpy_pk9_.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqpy_pk9_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo4wrku8a.d(25): Error: undefined identifier `split`\n/tmp/tmpo4wrku8a.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpo4wrku8a.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo4wrku8a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight();\n}\nunittest\n{\n   \
    \ alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\"\
    ) == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n\
    \    assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqpy_pk9_.d(25): Error: undefined identifier `split`\n/tmp/tmpqpy_pk9_.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpqpy_pk9_.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqpy_pk9_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo4wrku8a.d(25): Error: undefined identifier `split`\n/tmp/tmpo4wrku8a.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpo4wrku8a.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo4wrku8a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw24ma9xy.d(25): Error: undefined identifier `split`\n/tmp/tmpw24ma9xy.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpw24ma9xy.d(34): Error: no property
    `trimRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw24ma9xy.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo4wrku8a.d(25): Error: undefined identifier `split`\n/tmp/tmpo4wrku8a.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpo4wrku8a.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo4wrku8a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo4wrku8a.d(25): Error: undefined identifier `split`\n/tmp/tmpo4wrku8a.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpo4wrku8a.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo4wrku8a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n      \
    \  if(is_prime(word.length))\n        {\n            result ~= word ~ \" \";\n\
    \        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphi4a_x8m.d(25): Error: undefined identifier `split`\n/tmp/tmphi4a_x8m.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmphi4a_x8m.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphi4a_x8m.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.trim();\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw6eigz81.d(25): Error: undefined identifier `split`\n/tmp/tmpw6eigz81.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpw6eigz81.d(34): Error: no property
    `trim` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw6eigz81.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo4wrku8a.d(25): Error: undefined identifier `split`\n/tmp/tmpo4wrku8a.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpo4wrku8a.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo4wrku8a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n      \
    \  if(is_prime(word.length))\n        {\n            result ~= word ~ \" \";\n\
    \        }\n    }\n    return result.stripRight();\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx06ibfm2.d(25): Error: undefined identifier `split`\n/tmp/tmpx06ibfm2.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpx06ibfm2.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx06ibfm2.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo4wrku8a.d(25): Error: undefined identifier `split`\n/tmp/tmpo4wrku8a.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpo4wrku8a.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo4wrku8a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo4wrku8a.d(25): Error: undefined identifier `split`\n/tmp/tmpo4wrku8a.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpo4wrku8a.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo4wrku8a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight();\n}\nunittest\n{\n   \
    \ alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\"\
    ) == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n\
    \    assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqpy_pk9_.d(25): Error: undefined identifier `split`\n/tmp/tmpqpy_pk9_.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpqpy_pk9_.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqpy_pk9_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo4wrku8a.d(25): Error: undefined identifier `split`\n/tmp/tmpo4wrku8a.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpo4wrku8a.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo4wrku8a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string result = \"\";\n    string[]\
    \ words = split(sentence, ' ');\n    foreach(string word; words)\n    {\n    \
    \    if(isPrime(word.length))\n        {\n            result ~= word ~ \" \";\n\
    \        }\n    }\n    return result.trim();\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_lnb_ybf.d(26): Error: undefined identifier `split`\n/tmp/tmp_lnb_ybf.d(29):
    Error: undefined identifier `isPrime`\n/tmp/tmp_lnb_ybf.d(34): Error: no property
    `trim` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_lnb_ybf.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.strip();\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp73j7r9h.d(25): Error: undefined identifier `split`\n/tmp/tmpp73j7r9h.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpp73j7r9h.d(34): Error: no property
    `strip` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp73j7r9h.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.trim();\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw6eigz81.d(25): Error: undefined identifier `split`\n/tmp/tmpw6eigz81.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpw6eigz81.d(34): Error: no property
    `trim` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw6eigz81.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpd49wadvf.d(25): Error: undefined identifier `split`\n/tmp/tmpd49wadvf.d(29):
    Error: undefined identifier `is_prime`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpd49wadvf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo4wrku8a.d(25): Error: undefined identifier `split`\n/tmp/tmpo4wrku8a.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpo4wrku8a.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo4wrku8a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight();\n}\nunittest\n{\n   \
    \ alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\"\
    ) == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n\
    \    assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqpy_pk9_.d(25): Error: undefined identifier `split`\n/tmp/tmpqpy_pk9_.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpqpy_pk9_.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqpy_pk9_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.trim();\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw6eigz81.d(25): Error: undefined identifier `split`\n/tmp/tmpw6eigz81.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpw6eigz81.d(34): Error: no property
    `trim` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw6eigz81.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n      \
    \  if(is_prime(word.length))\n        {\n            result ~= word ~ \" \";\n\
    \        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphi4a_x8m.d(25): Error: undefined identifier `split`\n/tmp/tmphi4a_x8m.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmphi4a_x8m.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphi4a_x8m.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.trim();\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw6eigz81.d(25): Error: undefined identifier `split`\n/tmp/tmpw6eigz81.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpw6eigz81.d(34): Error: no property
    `trim` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw6eigz81.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo4wrku8a.d(25): Error: undefined identifier `split`\n/tmp/tmpo4wrku8a.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpo4wrku8a.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo4wrku8a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.trim();\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw6eigz81.d(25): Error: undefined identifier `split`\n/tmp/tmpw6eigz81.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpw6eigz81.d(34): Error: no property
    `trim` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw6eigz81.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo4wrku8a.d(25): Error: undefined identifier `split`\n/tmp/tmpo4wrku8a.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpo4wrku8a.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo4wrku8a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo4wrku8a.d(25): Error: undefined identifier `split`\n/tmp/tmpo4wrku8a.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpo4wrku8a.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo4wrku8a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo4wrku8a.d(25): Error: undefined identifier `split`\n/tmp/tmpo4wrku8a.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpo4wrku8a.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo4wrku8a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.trim();\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw6eigz81.d(25): Error: undefined identifier `split`\n/tmp/tmpw6eigz81.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpw6eigz81.d(34): Error: no property
    `trim` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw6eigz81.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo4wrku8a.d(25): Error: undefined identifier `split`\n/tmp/tmpo4wrku8a.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpo4wrku8a.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo4wrku8a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n      \
    \  if(is_prime(word.length))\n        {\n            result ~= word ~ \" \";\n\
    \        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphi4a_x8m.d(25): Error: undefined identifier `split`\n/tmp/tmphi4a_x8m.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmphi4a_x8m.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphi4a_x8m.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.trim();\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw6eigz81.d(25): Error: undefined identifier `split`\n/tmp/tmpw6eigz81.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpw6eigz81.d(34): Error: no property
    `trim` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw6eigz81.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight();\n}\nunittest\n{\n   \
    \ alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\"\
    ) == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n\
    \    assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqpy_pk9_.d(25): Error: undefined identifier `split`\n/tmp/tmpqpy_pk9_.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpqpy_pk9_.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqpy_pk9_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n      \
    \  if(is_prime(word.length))\n        {\n            result ~= word ~ \" \";\n\
    \        }\n    }\n    return result.trim();\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxngo_8sq.d(25): Error: undefined identifier `split`\n/tmp/tmpxngo_8sq.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpxngo_8sq.d(34): Error: no property
    `trim` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxngo_8sq.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n      \
    \  if(is_prime(word.length))\n        {\n            result ~= word ~ \" \";\n\
    \        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphi4a_x8m.d(25): Error: undefined identifier `split`\n/tmp/tmphi4a_x8m.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmphi4a_x8m.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphi4a_x8m.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n      \
    \  if(is_prime(word.length))\n        {\n            result ~= word ~ \" \";\n\
    \        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphi4a_x8m.d(25): Error: undefined identifier `split`\n/tmp/tmphi4a_x8m.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmphi4a_x8m.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphi4a_x8m.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo4wrku8a.d(25): Error: undefined identifier `split`\n/tmp/tmpo4wrku8a.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpo4wrku8a.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo4wrku8a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n      \
    \  if(is_prime(word.length))\n        {\n            result ~= word ~ \" \";\n\
    \        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphi4a_x8m.d(25): Error: undefined identifier `split`\n/tmp/tmphi4a_x8m.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmphi4a_x8m.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphi4a_x8m.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n      \
    \  if(is_prime(word.length))\n        {\n            result ~= word ~ \" \";\n\
    \        }\n    }\n    return result.trimRight();\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi1vd60a3.d(25): Error: undefined identifier `split`\n/tmp/tmpi1vd60a3.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpi1vd60a3.d(34): Error: no property
    `trimRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi1vd60a3.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.trim();\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw6eigz81.d(25): Error: undefined identifier `split`\n/tmp/tmpw6eigz81.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpw6eigz81.d(34): Error: no property
    `trim` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw6eigz81.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo4wrku8a.d(25): Error: undefined identifier `split`\n/tmp/tmpo4wrku8a.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpo4wrku8a.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo4wrku8a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight();\n}\nunittest\n{\n   \
    \ alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\"\
    ) == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n\
    \    assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqpy_pk9_.d(25): Error: undefined identifier `split`\n/tmp/tmpqpy_pk9_.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpqpy_pk9_.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqpy_pk9_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight();\n}\nunittest\n{\n   \
    \ alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\"\
    ) == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n\
    \    assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqpy_pk9_.d(25): Error: undefined identifier `split`\n/tmp/tmpqpy_pk9_.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpqpy_pk9_.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqpy_pk9_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n      \
    \  if(is_prime(word.length))\n        {\n            result ~= word ~ \" \";\n\
    \        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphi4a_x8m.d(25): Error: undefined identifier `split`\n/tmp/tmphi4a_x8m.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmphi4a_x8m.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphi4a_x8m.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.trim();\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw6eigz81.d(25): Error: undefined identifier `split`\n/tmp/tmpw6eigz81.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpw6eigz81.d(34): Error: no property
    `trim` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw6eigz81.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo4wrku8a.d(25): Error: undefined identifier `split`\n/tmp/tmpo4wrku8a.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpo4wrku8a.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo4wrku8a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight();\n}\nunittest\n{\n   \
    \ alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\"\
    ) == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n\
    \    assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqpy_pk9_.d(25): Error: undefined identifier `split`\n/tmp/tmpqpy_pk9_.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpqpy_pk9_.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqpy_pk9_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight();\n}\nunittest\n{\n   \
    \ alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\"\
    ) == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n\
    \    assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqpy_pk9_.d(25): Error: undefined identifier `split`\n/tmp/tmpqpy_pk9_.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpqpy_pk9_.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqpy_pk9_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n      \
    \  if(is_prime(word.length))\n        {\n            result ~= word ~ \" \";\n\
    \        }\n    }\n    return result.stripRight();\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx06ibfm2.d(25): Error: undefined identifier `split`\n/tmp/tmpx06ibfm2.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpx06ibfm2.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx06ibfm2.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n      \
    \  if(is_prime(word.length))\n        {\n            result ~= word ~ \" \";\n\
    \        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphi4a_x8m.d(25): Error: undefined identifier `split`\n/tmp/tmphi4a_x8m.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmphi4a_x8m.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphi4a_x8m.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight();\n}\nunittest\n{\n   \
    \ alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\"\
    ) == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n\
    \    assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqpy_pk9_.d(25): Error: undefined identifier `split`\n/tmp/tmpqpy_pk9_.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpqpy_pk9_.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqpy_pk9_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.trim();\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw6eigz81.d(25): Error: undefined identifier `split`\n/tmp/tmpw6eigz81.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpw6eigz81.d(34): Error: no property
    `trim` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw6eigz81.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight();\n}\nunittest\n{\n   \
    \ alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\"\
    ) == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n\
    \    assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqpy_pk9_.d(25): Error: undefined identifier `split`\n/tmp/tmpqpy_pk9_.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpqpy_pk9_.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqpy_pk9_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.trim();\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw6eigz81.d(25): Error: undefined identifier `split`\n/tmp/tmpw6eigz81.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpw6eigz81.d(34): Error: no property
    `trim` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw6eigz81.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight();\n}\nunittest\n{\n   \
    \ alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\"\
    ) == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n\
    \    assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqpy_pk9_.d(25): Error: undefined identifier `split`\n/tmp/tmpqpy_pk9_.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpqpy_pk9_.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqpy_pk9_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight();\n}\nunittest\n{\n   \
    \ alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\"\
    ) == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n\
    \    assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqpy_pk9_.d(25): Error: undefined identifier `split`\n/tmp/tmpqpy_pk9_.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpqpy_pk9_.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqpy_pk9_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo4wrku8a.d(25): Error: undefined identifier `split`\n/tmp/tmpo4wrku8a.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpo4wrku8a.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo4wrku8a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ ' ');\n    string result = \"\";\n    foreach(word; words)\n    {\n        if(is_prime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.stripRight;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpac882uk2.d(25): Error: undefined identifier `split`\n/tmp/tmpac882uk2.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpac882uk2.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpac882uk2.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ ' ');\n    string result = \"\";\n    foreach(string word; words)\n    {\n \
    \       if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuvfx7vv0.d(25): Error: undefined identifier `split`\n/tmp/tmpuvfx7vv0.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpuvfx7vv0.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuvfx7vv0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string result = \"\";\n    string[]\
    \ words = split(sentence, ' ');\n    foreach(string word; words)\n    {\n    \
    \    if(isPrime(word.length))\n        {\n            result ~= word ~ \" \";\n\
    \        }\n    }\n    return result.trim();\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_lnb_ybf.d(26): Error: undefined identifier `split`\n/tmp/tmp_lnb_ybf.d(29):
    Error: undefined identifier `isPrime`\n/tmp/tmp_lnb_ybf.d(34): Error: no property
    `trim` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_lnb_ybf.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ ' ');\n    string result = \"\";\n    foreach(string word; words)\n    {\n \
    \       if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight();\n}\nunittest\n{\n   \
    \ alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\"\
    ) == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n\
    \    assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7qibuhhf.d(25): Error: undefined identifier `split`\n/tmp/tmp7qibuhhf.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmp7qibuhhf.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7qibuhhf.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ ' ');\n    string result = \"\";\n    foreach(string word; words)\n    {\n \
    \       if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.trim();\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkpwhi7hr.d(25): Error: undefined identifier `split`\n/tmp/tmpkpwhi7hr.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpkpwhi7hr.d(34): Error: no property
    `trim` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkpwhi7hr.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ ' ');\n    string result = \"\";\n    foreach(string word; words)\n    {\n \
    \       if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight();\n}\nunittest\n{\n   \
    \ alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\"\
    ) == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n\
    \    assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7qibuhhf.d(25): Error: undefined identifier `split`\n/tmp/tmp7qibuhhf.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmp7qibuhhf.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7qibuhhf.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ ' ');\n    string result = \"\";\n    foreach(word; words)\n    {\n        if(is_prime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.stripRight;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpac882uk2.d(25): Error: undefined identifier `split`\n/tmp/tmpac882uk2.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpac882uk2.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpac882uk2.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string output;\n    string[] words\
    \ = split(sentence, ' ');\n    foreach(string word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            output ~= word ~ \" \";\n        }\n    }\n    return\
    \ output;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkxkp2l6y.d(26): Error: undefined identifier `split`\n/tmp/tmpkxkp2l6y.d(29):
    Error: undefined identifier `isPrime`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpkxkp2l6y.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ ' ');\n    string result = \"\";\n    foreach(string word; words)\n    {\n \
    \       if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.trim();\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkpwhi7hr.d(25): Error: undefined identifier `split`\n/tmp/tmpkpwhi7hr.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpkpwhi7hr.d(34): Error: no property
    `trim` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkpwhi7hr.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ ' ');\n    string result = \"\";\n    foreach(word; words)\n    {\n        if(is_prime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trim();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n\
    \    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8htatn93.d(25): Error: undefined identifier `split`\n/tmp/tmp8htatn93.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmp8htatn93.d(34): Error: no property
    `trim` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8htatn93.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ ' ');\n    string result = \"\";\n    foreach(string word; words)\n    {\n \
    \       if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.trim();\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkpwhi7hr.d(25): Error: undefined identifier `split`\n/tmp/tmpkpwhi7hr.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpkpwhi7hr.d(34): Error: no property
    `trim` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkpwhi7hr.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ ' ');\n    string result = \"\";\n    foreach(string word; words)\n    {\n \
    \       if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight();\n}\nunittest\n{\n   \
    \ alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\"\
    ) == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n\
    \    assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7qibuhhf.d(25): Error: undefined identifier `split`\n/tmp/tmp7qibuhhf.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmp7qibuhhf.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7qibuhhf.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ ' ');\n    string result = \"\";\n    foreach(string word; words)\n    {\n \
    \       if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight();\n}\nunittest\n{\n   \
    \ alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\"\
    ) == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n\
    \    assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7qibuhhf.d(25): Error: undefined identifier `split`\n/tmp/tmp7qibuhhf.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmp7qibuhhf.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7qibuhhf.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ ' ');\n    string result = \"\";\n    foreach(word; words)\n    {\n        if(is_prime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trim();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n\
    \    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8htatn93.d(25): Error: undefined identifier `split`\n/tmp/tmp8htatn93.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmp8htatn93.d(34): Error: no property
    `trim` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8htatn93.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ ' ');\n    string result = \"\";\n    foreach(string word; words)\n    {\n \
    \       if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight();\n}\nunittest\n{\n   \
    \ alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\"\
    ) == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n\
    \    assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7qibuhhf.d(25): Error: undefined identifier `split`\n/tmp/tmp7qibuhhf.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmp7qibuhhf.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7qibuhhf.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ ' ');\n    string result = \"\";\n    foreach(string word; words)\n    {\n \
    \       if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.trim();\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkpwhi7hr.d(25): Error: undefined identifier `split`\n/tmp/tmpkpwhi7hr.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpkpwhi7hr.d(34): Error: no property
    `trim` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkpwhi7hr.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ ' ');\n    string result = \"\";\n    foreach(string word; words)\n    {\n \
    \       if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight();\n}\nunittest\n{\n   \
    \ alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\"\
    ) == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n\
    \    assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7qibuhhf.d(25): Error: undefined identifier `split`\n/tmp/tmp7qibuhhf.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmp7qibuhhf.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7qibuhhf.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ ' ');\n    string result = \"\";\n    foreach(string word; words)\n    {\n \
    \       if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.trim();\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkpwhi7hr.d(25): Error: undefined identifier `split`\n/tmp/tmpkpwhi7hr.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpkpwhi7hr.d(34): Error: no property
    `trim` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkpwhi7hr.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string result = \"\";\n    string[]\
    \ words = split(sentence, ' ');\n    foreach(string word; words)\n    {\n    \
    \    if(isPrime(word.length))\n        {\n            result ~= word ~ \" \";\n\
    \        }\n    }\n    return result.stripRight();\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppy9sigij.d(26): Error: undefined identifier `split`\n/tmp/tmppy9sigij.d(29):
    Error: undefined identifier `isPrime`\n/tmp/tmppy9sigij.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppy9sigij.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string result;\n    string[] words\
    \ = split(sentence, ' ');\n    foreach(string word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.stripRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjexsop9c.d(26): Error: undefined identifier `split`\n/tmp/tmpjexsop9c.d(29):
    Error: undefined identifier `isPrime`\n/tmp/tmpjexsop9c.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjexsop9c.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ ' ');\n    string result = \"\";\n    foreach(string word; words)\n    {\n \
    \       if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight();\n}\nunittest\n{\n   \
    \ alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\"\
    ) == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n\
    \    assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7qibuhhf.d(25): Error: undefined identifier `split`\n/tmp/tmp7qibuhhf.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmp7qibuhhf.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7qibuhhf.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ ' ');\n    string result = \"\";\n    foreach(word; words)\n    {\n        if(is_prime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trimRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmjin6b3s.d(25): Error: undefined identifier `split`\n/tmp/tmpmjin6b3s.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpmjin6b3s.d(34): Error: no property
    `trimRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmjin6b3s.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ ' ');\n    string result = \"\";\n    foreach(string word; words)\n    {\n \
    \       if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuvfx7vv0.d(25): Error: undefined identifier `split`\n/tmp/tmpuvfx7vv0.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpuvfx7vv0.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuvfx7vv0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string result = \"\";\n    string[]\
    \ words = split(sentence, ' ');\n    foreach(string word; words)\n    {\n    \
    \    if(isPrime(word.length))\n        {\n            result ~= word ~ \" \";\n\
    \        }\n    }\n    return result.trim();\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_lnb_ybf.d(26): Error: undefined identifier `split`\n/tmp/tmp_lnb_ybf.d(29):
    Error: undefined identifier `isPrime`\n/tmp/tmp_lnb_ybf.d(34): Error: no property
    `trim` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_lnb_ybf.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ ' ');\n    string result = \"\";\n    foreach(string word; words)\n    {\n \
    \       if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight();\n}\nunittest\n{\n   \
    \ alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\"\
    ) == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n\
    \    assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7qibuhhf.d(25): Error: undefined identifier `split`\n/tmp/tmp7qibuhhf.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmp7qibuhhf.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7qibuhhf.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string result = \"\";\n    string[]\
    \ words = split(sentence, ' ');\n    foreach(string word; words)\n    {\n    \
    \    if(isPrime(word.length))\n        {\n            result ~= word ~ \" \";\n\
    \        }\n    }\n    return result.trimRight();\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj1bouwof.d(26): Error: undefined identifier `split`\n/tmp/tmpj1bouwof.d(29):
    Error: undefined identifier `isPrime`\n/tmp/tmpj1bouwof.d(34): Error: no property
    `trimRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj1bouwof.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ ' ');\n    string result = \"\";\n    foreach(string word; words)\n    {\n \
    \       if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.trim();\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkpwhi7hr.d(25): Error: undefined identifier `split`\n/tmp/tmpkpwhi7hr.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpkpwhi7hr.d(34): Error: no property
    `trim` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkpwhi7hr.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ ' ');\n    string result = \"\";\n    foreach(word; words)\n    {\n        if(is_prime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.stripRight;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpac882uk2.d(25): Error: undefined identifier `split`\n/tmp/tmpac882uk2.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpac882uk2.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpac882uk2.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string result = \"\";\n    string[]\
    \ words = split(sentence, \" \");\n    foreach(string word; words)\n    {\n  \
    \      if(isPrime(word.length))\n        {\n            result ~= word ~ \" \"\
    ;\n        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpd5ip9ta1.d(26): Error: undefined identifier `split`\n/tmp/tmpd5ip9ta1.d(29):
    Error: undefined identifier `isPrime`\n/tmp/tmpd5ip9ta1.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd5ip9ta1.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight();\n}\nunittest\n{\n   \
    \ alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\"\
    ) == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n\
    \    assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqpy_pk9_.d(25): Error: undefined identifier `split`\n/tmp/tmpqpy_pk9_.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpqpy_pk9_.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqpy_pk9_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.trim();\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw6eigz81.d(25): Error: undefined identifier `split`\n/tmp/tmpw6eigz81.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpw6eigz81.d(34): Error: no property
    `trim` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw6eigz81.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string result;\n    string[] words\
    \ = split(sentence, \" \");\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trim();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n\
    \    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvh5v7cxt.d(26): Error: undefined identifier `split`\n/tmp/tmpvh5v7cxt.d(29):
    Error: undefined identifier `isPrime`\n/tmp/tmpvh5v7cxt.d(34): Error: no property
    `trim` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvh5v7cxt.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.trim();\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw6eigz81.d(25): Error: undefined identifier `split`\n/tmp/tmpw6eigz81.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpw6eigz81.d(34): Error: no property
    `trim` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw6eigz81.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight();\n}\nunittest\n{\n   \
    \ alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\"\
    ) == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n\
    \    assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqpy_pk9_.d(25): Error: undefined identifier `split`\n/tmp/tmpqpy_pk9_.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpqpy_pk9_.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqpy_pk9_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n      \
    \  if(is_prime(word.length))\n        {\n            result ~= word ~ \" \";\n\
    \        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphi4a_x8m.d(25): Error: undefined identifier `split`\n/tmp/tmphi4a_x8m.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmphi4a_x8m.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphi4a_x8m.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo4wrku8a.d(25): Error: undefined identifier `split`\n/tmp/tmpo4wrku8a.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpo4wrku8a.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo4wrku8a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.trim();\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw6eigz81.d(25): Error: undefined identifier `split`\n/tmp/tmpw6eigz81.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpw6eigz81.d(34): Error: no property
    `trim` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw6eigz81.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight();\n}\nunittest\n{\n   \
    \ alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\"\
    ) == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n\
    \    assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqpy_pk9_.d(25): Error: undefined identifier `split`\n/tmp/tmpqpy_pk9_.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpqpy_pk9_.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqpy_pk9_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpd49wadvf.d(25): Error: undefined identifier `split`\n/tmp/tmpd49wadvf.d(29):
    Error: undefined identifier `is_prime`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpd49wadvf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.trim();\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw6eigz81.d(25): Error: undefined identifier `split`\n/tmp/tmpw6eigz81.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpw6eigz81.d(34): Error: no property
    `trim` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw6eigz81.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n      \
    \  if(is_prime(word.length))\n        {\n            result ~= word ~ \" \";\n\
    \        }\n    }\n    return result.trimRight();\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi1vd60a3.d(25): Error: undefined identifier `split`\n/tmp/tmpi1vd60a3.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpi1vd60a3.d(34): Error: no property
    `trimRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi1vd60a3.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight();\n}\nunittest\n{\n   \
    \ alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\"\
    ) == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n\
    \    assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqpy_pk9_.d(25): Error: undefined identifier `split`\n/tmp/tmpqpy_pk9_.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpqpy_pk9_.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqpy_pk9_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n      \
    \  if(is_prime(word.length))\n        {\n            result ~= word ~ \" \";\n\
    \        }\n    }\n    return result.trim();\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxngo_8sq.d(25): Error: undefined identifier `split`\n/tmp/tmpxngo_8sq.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpxngo_8sq.d(34): Error: no property
    `trim` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxngo_8sq.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight();\n}\nunittest\n{\n   \
    \ alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\"\
    ) == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n\
    \    assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqpy_pk9_.d(25): Error: undefined identifier `split`\n/tmp/tmpqpy_pk9_.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpqpy_pk9_.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqpy_pk9_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight();\n}\nunittest\n{\n   \
    \ alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\"\
    ) == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n\
    \    assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqpy_pk9_.d(25): Error: undefined identifier `split`\n/tmp/tmpqpy_pk9_.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpqpy_pk9_.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqpy_pk9_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n      \
    \  if(is_prime(word.length))\n        {\n            result ~= word ~ \" \";\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmfvkrqvk.d(25): Error: undefined identifier `split`\n/tmp/tmpmfvkrqvk.d(29):
    Error: undefined identifier `is_prime`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpmfvkrqvk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight();\n}\nunittest\n{\n   \
    \ alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\"\
    ) == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n\
    \    assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqpy_pk9_.d(25): Error: undefined identifier `split`\n/tmp/tmpqpy_pk9_.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpqpy_pk9_.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqpy_pk9_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n      \
    \  if(is_prime(word.length))\n        {\n            result ~= word ~ \" \";\n\
    \        }\n    }\n    return result.trim();\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxngo_8sq.d(25): Error: undefined identifier `split`\n/tmp/tmpxngo_8sq.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpxngo_8sq.d(34): Error: no property
    `trim` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxngo_8sq.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n      \
    \  if(is_prime(word.length))\n        {\n            result ~= word ~ \" \";\n\
    \        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphi4a_x8m.d(25): Error: undefined identifier `split`\n/tmp/tmphi4a_x8m.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmphi4a_x8m.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphi4a_x8m.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.trim();\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw6eigz81.d(25): Error: undefined identifier `split`\n/tmp/tmpw6eigz81.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpw6eigz81.d(34): Error: no property
    `trim` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw6eigz81.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo4wrku8a.d(25): Error: undefined identifier `split`\n/tmp/tmpo4wrku8a.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpo4wrku8a.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo4wrku8a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n      \
    \  if(is_prime(word.length))\n        {\n            result ~= word ~ \" \";\n\
    \        }\n    }\n    return result.trimRight();\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi1vd60a3.d(25): Error: undefined identifier `split`\n/tmp/tmpi1vd60a3.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpi1vd60a3.d(34): Error: no property
    `trimRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi1vd60a3.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n      \
    \  if(is_prime(word.length))\n        {\n            result ~= word ~ \" \";\n\
    \        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphi4a_x8m.d(25): Error: undefined identifier `split`\n/tmp/tmphi4a_x8m.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmphi4a_x8m.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphi4a_x8m.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight();\n}\nunittest\n{\n   \
    \ alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\"\
    ) == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n\
    \    assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqpy_pk9_.d(25): Error: undefined identifier `split`\n/tmp/tmpqpy_pk9_.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpqpy_pk9_.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqpy_pk9_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo4wrku8a.d(25): Error: undefined identifier `split`\n/tmp/tmpo4wrku8a.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpo4wrku8a.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo4wrku8a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.trim();\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw6eigz81.d(25): Error: undefined identifier `split`\n/tmp/tmpw6eigz81.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpw6eigz81.d(34): Error: no property
    `trim` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw6eigz81.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo4wrku8a.d(25): Error: undefined identifier `split`\n/tmp/tmpo4wrku8a.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpo4wrku8a.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo4wrku8a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.trim();\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw6eigz81.d(25): Error: undefined identifier `split`\n/tmp/tmpw6eigz81.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpw6eigz81.d(34): Error: no property
    `trim` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw6eigz81.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpd49wadvf.d(25): Error: undefined identifier `split`\n/tmp/tmpd49wadvf.d(29):
    Error: undefined identifier `is_prime`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpd49wadvf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo4wrku8a.d(25): Error: undefined identifier `split`\n/tmp/tmpo4wrku8a.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpo4wrku8a.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo4wrku8a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo4wrku8a.d(25): Error: undefined identifier `split`\n/tmp/tmpo4wrku8a.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpo4wrku8a.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo4wrku8a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight();\n}\nunittest\n{\n   \
    \ alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\"\
    ) == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n\
    \    assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqpy_pk9_.d(25): Error: undefined identifier `split`\n/tmp/tmpqpy_pk9_.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpqpy_pk9_.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqpy_pk9_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n      \
    \  if(is_prime(word.length))\n        {\n            result ~= word ~ \" \";\n\
    \        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphi4a_x8m.d(25): Error: undefined identifier `split`\n/tmp/tmphi4a_x8m.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmphi4a_x8m.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphi4a_x8m.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo4wrku8a.d(25): Error: undefined identifier `split`\n/tmp/tmpo4wrku8a.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpo4wrku8a.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo4wrku8a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight();\n}\nunittest\n{\n   \
    \ alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\"\
    ) == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n\
    \    assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqpy_pk9_.d(25): Error: undefined identifier `split`\n/tmp/tmpqpy_pk9_.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpqpy_pk9_.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqpy_pk9_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n      \
    \  if(is_prime(word.length))\n        {\n            result ~= word ~ \" \";\n\
    \        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphi4a_x8m.d(25): Error: undefined identifier `split`\n/tmp/tmphi4a_x8m.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmphi4a_x8m.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphi4a_x8m.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n      \
    \  if(is_prime(word.length))\n        {\n            result ~= word ~ \" \";\n\
    \        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphi4a_x8m.d(25): Error: undefined identifier `split`\n/tmp/tmphi4a_x8m.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmphi4a_x8m.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphi4a_x8m.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n      \
    \  if(is_prime(word.length))\n        {\n            result ~= word ~ \" \";\n\
    \        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphi4a_x8m.d(25): Error: undefined identifier `split`\n/tmp/tmphi4a_x8m.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmphi4a_x8m.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphi4a_x8m.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n      \
    \  if(is_prime(word.length))\n        {\n            result ~= word ~ \" \";\n\
    \        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphi4a_x8m.d(25): Error: undefined identifier `split`\n/tmp/tmphi4a_x8m.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmphi4a_x8m.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphi4a_x8m.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n      \
    \  if(is_prime(word.length))\n        {\n            result ~= word ~ \" \";\n\
    \        }\n    }\n    return result.stripRight();\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx06ibfm2.d(25): Error: undefined identifier `split`\n/tmp/tmpx06ibfm2.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpx06ibfm2.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx06ibfm2.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo4wrku8a.d(25): Error: undefined identifier `split`\n/tmp/tmpo4wrku8a.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpo4wrku8a.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo4wrku8a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo4wrku8a.d(25): Error: undefined identifier `split`\n/tmp/tmpo4wrku8a.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpo4wrku8a.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo4wrku8a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo4wrku8a.d(25): Error: undefined identifier `split`\n/tmp/tmpo4wrku8a.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpo4wrku8a.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo4wrku8a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.trim();\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw6eigz81.d(25): Error: undefined identifier `split`\n/tmp/tmpw6eigz81.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpw6eigz81.d(34): Error: no property
    `trim` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw6eigz81.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string result = \"\";\n    string[]\
    \ words = split(sentence, \" \");\n    foreach(string word; words)\n    {\n  \
    \      if(isPrime(word.length))\n        {\n            result ~= word ~ \" \"\
    ;\n        }\n    }\n    return result.trim();\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjtu922x3.d(26): Error: undefined identifier `split`\n/tmp/tmpjtu922x3.d(29):
    Error: undefined identifier `isPrime`\n/tmp/tmpjtu922x3.d(34): Error: no property
    `trim` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjtu922x3.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo4wrku8a.d(25): Error: undefined identifier `split`\n/tmp/tmpo4wrku8a.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpo4wrku8a.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo4wrku8a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo4wrku8a.d(25): Error: undefined identifier `split`\n/tmp/tmpo4wrku8a.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpo4wrku8a.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo4wrku8a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n      \
    \  if(is_prime(word.length))\n        {\n            result ~= word ~ \" \";\n\
    \        }\n    }\n    return result.trim();\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxngo_8sq.d(25): Error: undefined identifier `split`\n/tmp/tmpxngo_8sq.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpxngo_8sq.d(34): Error: no property
    `trim` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxngo_8sq.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight();\n}\nunittest\n{\n   \
    \ alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\"\
    ) == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n\
    \    assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqpy_pk9_.d(25): Error: undefined identifier `split`\n/tmp/tmpqpy_pk9_.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpqpy_pk9_.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqpy_pk9_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo4wrku8a.d(25): Error: undefined identifier `split`\n/tmp/tmpo4wrku8a.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpo4wrku8a.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo4wrku8a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo4wrku8a.d(25): Error: undefined identifier `split`\n/tmp/tmpo4wrku8a.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpo4wrku8a.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo4wrku8a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.trim();\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw6eigz81.d(25): Error: undefined identifier `split`\n/tmp/tmpw6eigz81.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpw6eigz81.d(34): Error: no property
    `trim` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw6eigz81.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.trimRight();\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw24ma9xy.d(25): Error: undefined identifier `split`\n/tmp/tmpw24ma9xy.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpw24ma9xy.d(34): Error: no property
    `trimRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw24ma9xy.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n      \
    \  if(is_prime(word.length))\n        {\n            result ~= word ~ \" \";\n\
    \        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphi4a_x8m.d(25): Error: undefined identifier `split`\n/tmp/tmphi4a_x8m.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmphi4a_x8m.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphi4a_x8m.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo4wrku8a.d(25): Error: undefined identifier `split`\n/tmp/tmpo4wrku8a.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpo4wrku8a.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo4wrku8a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n      \
    \  if(is_prime(word.length))\n        {\n            result ~= word ~ \" \";\n\
    \        }\n    }\n    return result.trim();\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxngo_8sq.d(25): Error: undefined identifier `split`\n/tmp/tmpxngo_8sq.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpxngo_8sq.d(34): Error: no property
    `trim` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxngo_8sq.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.trim();\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw6eigz81.d(25): Error: undefined identifier `split`\n/tmp/tmpw6eigz81.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpw6eigz81.d(34): Error: no property
    `trim` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw6eigz81.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.trim();\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw6eigz81.d(25): Error: undefined identifier `split`\n/tmp/tmpw6eigz81.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpw6eigz81.d(34): Error: no property
    `trim` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw6eigz81.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo4wrku8a.d(25): Error: undefined identifier `split`\n/tmp/tmpo4wrku8a.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpo4wrku8a.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo4wrku8a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n      \
    \  if(is_prime(word.length))\n        {\n            result ~= word ~ \" \";\n\
    \        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphi4a_x8m.d(25): Error: undefined identifier `split`\n/tmp/tmphi4a_x8m.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmphi4a_x8m.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphi4a_x8m.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo4wrku8a.d(25): Error: undefined identifier `split`\n/tmp/tmpo4wrku8a.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpo4wrku8a.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo4wrku8a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n      \
    \  if(is_prime(word.length))\n        {\n            result ~= word ~ \" \";\n\
    \        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphi4a_x8m.d(25): Error: undefined identifier `split`\n/tmp/tmphi4a_x8m.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmphi4a_x8m.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphi4a_x8m.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.trim();\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw6eigz81.d(25): Error: undefined identifier `split`\n/tmp/tmpw6eigz81.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpw6eigz81.d(34): Error: no property
    `trim` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw6eigz81.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight();\n}\nunittest\n{\n   \
    \ alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\"\
    ) == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n\
    \    assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqpy_pk9_.d(25): Error: undefined identifier `split`\n/tmp/tmpqpy_pk9_.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpqpy_pk9_.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqpy_pk9_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight();\n}\nunittest\n{\n   \
    \ alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\"\
    ) == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n\
    \    assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqpy_pk9_.d(25): Error: undefined identifier `split`\n/tmp/tmpqpy_pk9_.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpqpy_pk9_.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqpy_pk9_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.trim();\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw6eigz81.d(25): Error: undefined identifier `split`\n/tmp/tmpw6eigz81.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpw6eigz81.d(34): Error: no property
    `trim` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw6eigz81.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo4wrku8a.d(25): Error: undefined identifier `split`\n/tmp/tmpo4wrku8a.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpo4wrku8a.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo4wrku8a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpd49wadvf.d(25): Error: undefined identifier `split`\n/tmp/tmpd49wadvf.d(29):
    Error: undefined identifier `is_prime`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpd49wadvf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo4wrku8a.d(25): Error: undefined identifier `split`\n/tmp/tmpo4wrku8a.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpo4wrku8a.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo4wrku8a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.trim();\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw6eigz81.d(25): Error: undefined identifier `split`\n/tmp/tmpw6eigz81.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpw6eigz81.d(34): Error: no property
    `trim` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw6eigz81.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo4wrku8a.d(25): Error: undefined identifier `split`\n/tmp/tmpo4wrku8a.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpo4wrku8a.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo4wrku8a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo4wrku8a.d(25): Error: undefined identifier `split`\n/tmp/tmpo4wrku8a.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpo4wrku8a.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo4wrku8a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.trim();\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw6eigz81.d(25): Error: undefined identifier `split`\n/tmp/tmpw6eigz81.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpw6eigz81.d(34): Error: no property
    `trim` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw6eigz81.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n      \
    \  if(is_prime(word.length))\n        {\n            result ~= word ~ \" \";\n\
    \        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphi4a_x8m.d(25): Error: undefined identifier `split`\n/tmp/tmphi4a_x8m.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmphi4a_x8m.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphi4a_x8m.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.trim();\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw6eigz81.d(25): Error: undefined identifier `split`\n/tmp/tmpw6eigz81.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpw6eigz81.d(34): Error: no property
    `trim` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw6eigz81.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string result = \"\";\n    string[]\
    \ words = split(sentence, \" \");\n    foreach(string word; words)\n    {\n  \
    \      if(isPrime(word.length))\n        {\n            result ~= word ~ \" \"\
    ;\n        }\n    }\n    return result.trim();\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjtu922x3.d(26): Error: undefined identifier `split`\n/tmp/tmpjtu922x3.d(29):
    Error: undefined identifier `isPrime`\n/tmp/tmpjtu922x3.d(34): Error: no property
    `trim` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjtu922x3.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo4wrku8a.d(25): Error: undefined identifier `split`\n/tmp/tmpo4wrku8a.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpo4wrku8a.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo4wrku8a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n      \
    \  if(is_prime(word.length))\n        {\n            result ~= word ~ \" \";\n\
    \        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphi4a_x8m.d(25): Error: undefined identifier `split`\n/tmp/tmphi4a_x8m.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmphi4a_x8m.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphi4a_x8m.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string result = \"\";\n    string[]\
    \ words = split(sentence, \" \");\n    foreach(string word; words)\n    {\n  \
    \      if(isPrime(word.length))\n        {\n            result ~= word ~ \" \"\
    ;\n        }\n    }\n    return result.trim();\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjtu922x3.d(26): Error: undefined identifier `split`\n/tmp/tmpjtu922x3.d(29):
    Error: undefined identifier `isPrime`\n/tmp/tmpjtu922x3.d(34): Error: no property
    `trim` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjtu922x3.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n      \
    \  if(is_prime(word.length))\n        {\n            result ~= word ~ \" \";\n\
    \        }\n    }\n    return result.trim();\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxngo_8sq.d(25): Error: undefined identifier `split`\n/tmp/tmpxngo_8sq.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpxngo_8sq.d(34): Error: no property
    `trim` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxngo_8sq.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo4wrku8a.d(25): Error: undefined identifier `split`\n/tmp/tmpo4wrku8a.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpo4wrku8a.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo4wrku8a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.trim();\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw6eigz81.d(25): Error: undefined identifier `split`\n/tmp/tmpw6eigz81.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpw6eigz81.d(34): Error: no property
    `trim` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw6eigz81.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo4wrku8a.d(25): Error: undefined identifier `split`\n/tmp/tmpo4wrku8a.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpo4wrku8a.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo4wrku8a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo4wrku8a.d(25): Error: undefined identifier `split`\n/tmp/tmpo4wrku8a.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpo4wrku8a.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo4wrku8a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n      \
    \  if(is_prime(word.length))\n        {\n            result ~= word ~ \" \";\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmfvkrqvk.d(25): Error: undefined identifier `split`\n/tmp/tmpmfvkrqvk.d(29):
    Error: undefined identifier `is_prime`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpmfvkrqvk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.trim();\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw6eigz81.d(25): Error: undefined identifier `split`\n/tmp/tmpw6eigz81.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpw6eigz81.d(34): Error: no property
    `trim` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw6eigz81.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n      \
    \  if(is_prime(word.length))\n        {\n            result ~= word ~ \" \";\n\
    \        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphi4a_x8m.d(25): Error: undefined identifier `split`\n/tmp/tmphi4a_x8m.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmphi4a_x8m.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphi4a_x8m.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n      \
    \  if(is_prime(word.length))\n        {\n            result ~= word ~ \" \";\n\
    \        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphi4a_x8m.d(25): Error: undefined identifier `split`\n/tmp/tmphi4a_x8m.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmphi4a_x8m.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphi4a_x8m.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo4wrku8a.d(25): Error: undefined identifier `split`\n/tmp/tmpo4wrku8a.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpo4wrku8a.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo4wrku8a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo4wrku8a.d(25): Error: undefined identifier `split`\n/tmp/tmpo4wrku8a.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpo4wrku8a.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo4wrku8a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo4wrku8a.d(25): Error: undefined identifier `split`\n/tmp/tmpo4wrku8a.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpo4wrku8a.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo4wrku8a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias\
    \ candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") ==\
    \ \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n \
    \   assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo4wrku8a.d(25): Error: undefined identifier `split`\n/tmp/tmpo4wrku8a.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpo4wrku8a.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo4wrku8a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n      \
    \  if(is_prime(word.length))\n        {\n            result ~= word ~ \" \";\n\
    \        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphi4a_x8m.d(25): Error: undefined identifier `split`\n/tmp/tmphi4a_x8m.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmphi4a_x8m.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphi4a_x8m.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    You are given a string representing a sentence,\n\
    \    the sentence contains some words separated by a space,\n    and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ whose lengths are prime numbers,\n    the order of the words in the new string\
    \ should be the same as the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"\
    This is a test\")\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"\
    lets go for swimming\")\n    \"go for\"\n    \n    Constraints:\n        * 1 <=\
    \ len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\nstring\
    \ words_in_sentence(string sentence) \n{\n    string[] words = split(sentence,\
    \ \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        if(is_prime(word.length))\n        {\n            result ~= word ~ \"\
    \ \";\n        }\n    }\n    return result.stripRight();\n}\nunittest\n{\n   \
    \ alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\"\
    ) == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n\
    \    assert(candidate(\"there is no place available here\") == \"there is no place\"\
    );\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"\
    go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n  \
    \  assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqpy_pk9_.d(25): Error: undefined identifier `split`\n/tmp/tmpqpy_pk9_.d(29):
    Error: undefined identifier `is_prime`\n/tmp/tmpqpy_pk9_.d(34): Error: no property
    `stripRight` for type `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqpy_pk9_.d",
    "-I/tmp"]\n'''
  stdout: b''
