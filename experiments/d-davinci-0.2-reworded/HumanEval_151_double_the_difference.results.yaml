name: HumanEval_151_double_the_difference
language: d
results:
- program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0L && is(typeof(x) == int))\n        {\n            if(x % 2L == 1L)\n   \
    \         {\n                sum += x * x;\n            }\n        }\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpgm0bg7wi.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428395]\\n??:? void tmpgm0bg7wi.__unittest_L34_C1()\
    \ [0x427ec9]\\n??:? void tmpgm0bg7wi.__modtest() [0x428114]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c34b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b1de]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430371]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b1b5]\\n??:? runModuleUnitTests [0x42c121]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4287e4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42876b]\\n??:? _d_run_main [0x4286d6]\\n??:? main [0x428127]\\\
    n??:? __libc_start_main [0x98d8f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0L && x == cast(long)x)\n        {\n            if(x % 2L != 0L)\n       \
    \     {\n                sum += x * x;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && x == cast(long)x)\n        {\n            if(x % 2 == 1)\n          \
    \  {\n                sum += x * x;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0L && i == cast(long)i)\n        {\n            if(i % 2L == 1L)\n       \
    \     {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float x; lst)\n    {\n        if(is(typeof(x)\
    \ == int) && x > 0)\n        {\n            sum += x * x;\n        }\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxyf378jf.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428395]\\n??:? void tmpxyf378jf.__unittest_L31_C1()\
    \ [0x427ec9]\\n??:? void tmpxyf378jf.__modtest() [0x428114]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c34b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b1de]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430371]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b1b5]\\n??:? runModuleUnitTests [0x42c121]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4287e4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42876b]\\n??:? _d_run_main [0x4286d6]\\n??:? main [0x428127]\\\
    n??:? __libc_start_main [0xcfc63554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0L && is(typeof(x) == long))\n        {\n            if(x % 2L == 1L)\n  \
    \          {\n                sum += x * x;\n            }\n        }\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpo3zwvjal.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428395]\\n??:? void tmpo3zwvjal.__unittest_L34_C1()\
    \ [0x427ec9]\\n??:? void tmpo3zwvjal.__modtest() [0x428114]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c34b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b1de]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430371]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b1b5]\\n??:? runModuleUnitTests [0x42c121]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4287e4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42876b]\\n??:? _d_run_main [0x4286d6]\\n??:? main [0x428127]\\\
    n??:? __libc_start_main [0x81624554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0L && i == cast(long)i)\n        {\n            if(i % 2L == 1L)\n       \
    \     {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0L && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n     \
    \       {\n                sum += i * i;\n            }\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpc_fv4586.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428395]\\n??:? void tmpc_fv4586.__unittest_L34_C1()\
    \ [0x427ec9]\\n??:? void tmpc_fv4586.__modtest() [0x428114]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c34b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b1de]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430371]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b1b5]\\n??:? runModuleUnitTests [0x42c121]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4287e4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42876b]\\n??:? _d_run_main [0x4286d6]\\n??:? main [0x428127]\\\
    n??:? __libc_start_main [0x94d76554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float f; lst)\n    {\n        if(is(typeof(f)\
    \ == int) && f > 0)\n        {\n            sum += f * f;\n        }\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpj2qtsdun.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428395]\\n??:? void tmpj2qtsdun.__unittest_L31_C1()\
    \ [0x427ec9]\\n??:? void tmpj2qtsdun.__modtest() [0x428114]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c34b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b1de]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430371]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b1b5]\\n??:? runModuleUnitTests [0x42c121]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4287e4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42876b]\\n??:? _d_run_main [0x4286d6]\\n??:? main [0x428127]\\\
    n??:? __libc_start_main [0xa021c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += i * i;\n            }\n        }\n    }\n   \
    \ return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n\
    \    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp02pz_dfy.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428395]\\n??:? void tmp02pz_dfy.__unittest_L34_C1()\
    \ [0x427ec9]\\n??:? void tmp02pz_dfy.__modtest() [0x428114]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c34b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b1de]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430371]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b1b5]\\n??:? runModuleUnitTests [0x42c121]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4287e4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42876b]\\n??:? _d_run_main [0x4286d6]\\n??:? main [0x428127]\\\
    n??:? __libc_start_main [0x1efa554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0L && is(typeof(i) == int))\n        {\n            if(i % 2L != 0L)\n   \
    \         {\n                sum += i * i;\n            }\n        }\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_xh6tgw0.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428395]\\n??:? void tmp_xh6tgw0.__unittest_L34_C1()\
    \ [0x427ec9]\\n??:? void tmp_xh6tgw0.__modtest() [0x428114]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c34b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b1de]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430371]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b1b5]\\n??:? runModuleUnitTests [0x42c121]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4287e4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42876b]\\n??:? _d_run_main [0x4286d6]\\n??:? main [0x428127]\\\
    n??:? __libc_start_main [0xe2be8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float i; lst)\n    {\n        if (i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if (i % 2 == 1)\n     \
    \       {\n                sum += i * i;\n            }\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmppapwd1qy.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428395]\\n??:? void tmppapwd1qy.__unittest_L34_C1()\
    \ [0x427ec9]\\n??:? void tmppapwd1qy.__modtest() [0x428114]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c34b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b1de]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430371]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b1b5]\\n??:? runModuleUnitTests [0x42c121]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4287e4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42876b]\\n??:? _d_run_main [0x4286d6]\\n??:? main [0x428127]\\\
    n??:? __libc_start_main [0xeb500554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += i * i;\n            }\n        }\n    }\n   \
    \ return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n\
    \    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpza3ydcdi.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428395]\\n??:? void tmpza3ydcdi.__unittest_L34_C1()\
    \ [0x427ec9]\\n??:? void tmpza3ydcdi.__modtest() [0x428114]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c34b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b1de]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430371]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b1b5]\\n??:? runModuleUnitTests [0x42c121]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4287e4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42876b]\\n??:? _d_run_main [0x4286d6]\\n??:? main [0x428127]\\\
    n??:? __libc_start_main [0x91eae554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += i * i;\n            }\n        }\n    }\n   \
    \ return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n\
    \    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp94_e_r67.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428395]\\n??:? void tmp94_e_r67.__unittest_L34_C1()\
    \ [0x427ec9]\\n??:? void tmp94_e_r67.__modtest() [0x428114]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c34b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b1de]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430371]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b1b5]\\n??:? runModuleUnitTests [0x42c121]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4287e4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42876b]\\n??:? _d_run_main [0x4286d6]\\n??:? main [0x428127]\\\
    n??:? __libc_start_main [0x90cf0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float i; lst) \n    {\n        if(i\
    \ > 0 && i == cast(long)i) \n        {\n            if(i % 2 == 1) \n        \
    \    {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0L && is(typeof(i) == long))\n        {\n            if(i % 2L == 1L)\n  \
    \          {\n                sum += i * i;\n            }\n        }\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpytl_fv8o.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428395]\\n??:? void tmpytl_fv8o.__unittest_L34_C1()\
    \ [0x427ec9]\\n??:? void tmpytl_fv8o.__modtest() [0x428114]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c34b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b1de]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430371]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b1b5]\\n??:? runModuleUnitTests [0x42c121]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4287e4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42876b]\\n??:? _d_run_main [0x4286d6]\\n??:? main [0x428127]\\\
    n??:? __libc_start_main [0x304e6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float f; lst)\n    {\n        if(is(typeof(f)\
    \ == int) && f > 0)\n        {\n            result += f * f;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1to98m_l.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428395]\\n??:? void tmp1to98m_l.__unittest_L31_C1()\
    \ [0x427ec9]\\n??:? void tmp1to98m_l.__modtest() [0x428114]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c34b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b1de]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430371]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b1b5]\\n??:? runModuleUnitTests [0x42c121]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4287e4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42876b]\\n??:? _d_run_main [0x4286d6]\\n??:? main [0x428127]\\\
    n??:? __libc_start_main [0xe8ea9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
