language: d
name: HumanEval_151_double_the_difference
results:
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0L && is(typeof(x) == int))\n        {\n            if(x % 2L == 1L)\n   \
    \         {\n                sum += x * x;\n            }\n        }\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpgm0bg7wi.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmpgm0bg7wi.__unittest_L34_C1() [0x427ec9]\n??:?
    void tmpgm0bg7wi.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0x98d8f554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0L && x == cast(long)x)\n        {\n            if(x % 2L != 0L)\n       \
    \     {\n                sum += x * x;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && x == cast(long)x)\n        {\n            if(x % 2 == 1)\n          \
    \  {\n                sum += x * x;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0L && i == cast(long)i)\n        {\n            if(i % 2L == 1L)\n       \
    \     {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float x; lst)\n    {\n        if(is(typeof(x)\
    \ == int) && x > 0)\n        {\n            sum += x * x;\n        }\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpxyf378jf.d(36): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmpxyf378jf.__unittest_L31_C1() [0x427ec9]\n??:?
    void tmpxyf378jf.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0xcfc63554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0L && is(typeof(x) == long))\n        {\n            if(x % 2L == 1L)\n  \
    \          {\n                sum += x * x;\n            }\n        }\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpo3zwvjal.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmpo3zwvjal.__unittest_L34_C1() [0x427ec9]\n??:?
    void tmpo3zwvjal.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0x81624554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0L && i == cast(long)i)\n        {\n            if(i % 2L == 1L)\n       \
    \     {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0L && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n     \
    \       {\n                sum += i * i;\n            }\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpc_fv4586.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmpc_fv4586.__unittest_L34_C1() [0x427ec9]\n??:?
    void tmpc_fv4586.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0x94d76554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float f; lst)\n    {\n        if(is(typeof(f)\
    \ == int) && f > 0)\n        {\n            sum += f * f;\n        }\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpj2qtsdun.d(36): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmpj2qtsdun.__unittest_L31_C1() [0x427ec9]\n??:?
    void tmpj2qtsdun.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0xa021c554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += i * i;\n            }\n        }\n    }\n   \
    \ return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n\
    \    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp02pz_dfy.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmp02pz_dfy.__unittest_L34_C1() [0x427ec9]\n??:?
    void tmp02pz_dfy.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0x1efa554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0L && is(typeof(i) == int))\n        {\n            if(i % 2L != 0L)\n   \
    \         {\n                sum += i * i;\n            }\n        }\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp_xh6tgw0.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmp_xh6tgw0.__unittest_L34_C1() [0x427ec9]\n??:?
    void tmp_xh6tgw0.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0xe2be8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float i; lst)\n    {\n        if (i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if (i % 2 == 1)\n     \
    \       {\n                sum += i * i;\n            }\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmppapwd1qy.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmppapwd1qy.__unittest_L34_C1() [0x427ec9]\n??:?
    void tmppapwd1qy.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0xeb500554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += i * i;\n            }\n        }\n    }\n   \
    \ return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n\
    \    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpza3ydcdi.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmpza3ydcdi.__unittest_L34_C1() [0x427ec9]\n??:?
    void tmpza3ydcdi.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0x91eae554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += i * i;\n            }\n        }\n    }\n   \
    \ return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n\
    \    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp94_e_r67.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmp94_e_r67.__unittest_L34_C1() [0x427ec9]\n??:?
    void tmp94_e_r67.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0x90cf0554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float i; lst) \n    {\n        if(i\
    \ > 0 && i == cast(long)i) \n        {\n            if(i % 2 == 1) \n        \
    \    {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0L && is(typeof(i) == long))\n        {\n            if(i % 2L == 1L)\n  \
    \          {\n                sum += i * i;\n            }\n        }\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpytl_fv8o.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmpytl_fv8o.__unittest_L34_C1() [0x427ec9]\n??:?
    void tmpytl_fv8o.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0x304e6554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float f; lst)\n    {\n        if(is(typeof(f)\
    \ == int) && f > 0)\n        {\n            result += f * f;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp1to98m_l.d(36): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmp1to98m_l.__unittest_L31_C1() [0x427ec9]\n??:?
    void tmp1to98m_l.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0xe8ea9554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ % 2 != 0 && i > 0)\n        {\n            sum += pow(i, 2);\n        }\n  \
    \  }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                result += i * i;\n            }\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpx4wxee03.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmpx4wxee03.__unittest_L34_C1() [0x427ec9]\n??:?
    void tmpx4wxee03.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0xbea87554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0L && i == cast(long)i)\n        {\n            if(i % 2L == 1L)\n       \
    \     {\n                result += i * i;\n            }\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i % 2 == 1)\n        {\n            sum += i * i;\n        }\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                result += i * i;\n            }\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpx4wxee03.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmpx4wxee03.__unittest_L34_C1() [0x427ec9]\n??:?
    void tmpx4wxee03.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0xbea87554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == trunc(i))\n        {\n            if(i % 2 == 1)\n            {\n\
    \                sum += i * i;\n            }\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float x; lst) \n    {\n       \
    \ if (x > 0L && is(typeof(x) == int))\n        {\n            result += x * x;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp8qp7p3cz.d(36): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmp8qp7p3cz.__unittest_L31_C1() [0x427ec9]\n??:?
    void tmp8qp7p3cz.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0xa489c554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += cast(long)pow(i, 2);\n            }\n        }\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i*i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += cast(long)i * cast(long)i;\n            }\n     \
    \   }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += i*i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpuxsbahtc.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmpuxsbahtc.__unittest_L34_C1() [0x427ec9]\n??:?
    void tmpuxsbahtc.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0xd428c554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += cast(long)pow(i, 2);\n            }\n        }\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float x; lst)\n    {\n        if\
    \ (isOdd(x) && isFinite(x))\n        {\n            result += x * x;\n       \
    \ }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjk909ssj.d(24): Error: undefined identifier `isOdd`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjk909ssj.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i*i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && is(typeof(x) == int))\n        {\n            if(x % 2 == 1)\n      \
    \      {\n                sum += x * x;\n            }\n        }\n    }\n   \
    \ return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n\
    \    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpnxdjw8o0.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmpnxdjw8o0.__unittest_L34_C1() [0x427ec9]\n??:?
    void tmpnxdjw8o0.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0x2569554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i*i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                result += i * i;\n            }\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n  \
    \  assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n \
    \   assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst) \n    {\n        if(i\
    \ > 0 && i == cast(long)i) \n        {\n            if(i % 2 == 1) \n        \
    \    {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += cast(long)pow(i, 2);\n            }\n        }\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float num; lst)\n    {\n        if(num\
    \ > 0 && num == cast(long)num)\n        {\n            if(num % 2 == 1)\n    \
    \        {\n                sum += num * num;\n            }\n        }\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        if(f\
    \ > 0 && is(typeof(f) == int))\n        {\n            if(f % 2 == 1)\n      \
    \      {\n                sum += f * f;\n            }\n        }\n    }\n   \
    \ return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n\
    \    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpcmllm2x0.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmpcmllm2x0.__unittest_L34_C1() [0x427ec9]\n??:?
    void tmpcmllm2x0.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0x45724554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += i * i;\n            }\n        }\n    }\n   \
    \ return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n\
    \    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpfx_gg_19.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmpfx_gg_19.__unittest_L34_C1() [0x427ec9]\n??:?
    void tmpfx_gg_19.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0x354af554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += i * i;\n            }\n        }\n    }\n   \
    \ return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n\
    \    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpfx_gg_19.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmpfx_gg_19.__unittest_L34_C1() [0x427ec9]\n??:?
    void tmpfx_gg_19.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0x354af554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == int(i))\n        {\n            if(i % 2 == 1)\n            {\n\
    \                sum += i * i;\n            }\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdhuxqn19.d(24): Error: cannot implicitly convert expression
    `i` of type `float` to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdhuxqn19.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 != 0)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ == int(i) && i > 0)\n        {\n            if(i % 2 == 1)\n            {\n\
    \                sum += i * i;\n            }\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6fkdlbd3.d(24): Error: cannot implicitly convert expression
    `i` of type `float` to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6fkdlbd3.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float f; lst)\n    {\n        if(f\
    \ > 0L && f == cast(long)f)\n        {\n            if(f % 2L == 1L)\n       \
    \     {\n                result += f * f;\n            }\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst) \n    {\n        if(i\
    \ > 0 && i == cast(long)i) \n        {\n            if(i % 2 == 1) \n        \
    \    {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        if(f\
    \ > 0 && f == cast(long)f)\n        {\n            if(f % 2 == 1)\n          \
    \  {\n                sum += f * f;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && is(typeof(x) == int))\n        {\n            if(x % 2 != 0)\n      \
    \      {\n                sum += x * x;\n            }\n        }\n    }\n   \
    \ return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n\
    \    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpk31p5ft4.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmpk31p5ft4.__unittest_L34_C1() [0x427ec9]\n??:?
    void tmpk31p5ft4.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0x5fd7f554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float num; lst)\n    {\n        if(num\
    \ > 0 && is(typeof(num) == int))\n        {\n            if(num % 2 == 1)\n  \
    \          {\n                sum += num * num;\n            }\n        }\n  \
    \  }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp2384pqh3.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmp2384pqh3.__unittest_L34_C1() [0x427ec9]\n??:?
    void tmp2384pqh3.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0x635ae554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += i * i;\n            }\n        }\n    }\n   \
    \ return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n\
    \    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpfx_gg_19.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmpfx_gg_19.__unittest_L34_C1() [0x427ec9]\n??:?
    void tmpfx_gg_19.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0x354af554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == int(i))\n        {\n            if(i % 2 == 1)\n            {\n\
    \                sum += i * i;\n            }\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdhuxqn19.d(24): Error: cannot implicitly convert expression
    `i` of type `float` to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdhuxqn19.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0L && i == cast(long)i)\n        {\n            if(i % 2L == 1L)\n       \
    \     {\n                result += i * i;\n            }\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float num; lst)\n    {\n        if(num\
    \ > 0 && num == cast(long)num)\n        {\n            if(num % 2 == 1)\n    \
    \        {\n                sum += num * num;\n            }\n        }\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += cast(long)pow(i, 2);\n            }\n        }\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i % 2 == 1)\n        {\n            sum += i * i;\n        }\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && is(typeof(x) == int))\n        {\n            if(x % 2 == 1)\n      \
    \      {\n                sum += x * x;\n            }\n        }\n    }\n   \
    \ return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n\
    \    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpnxdjw8o0.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmpnxdjw8o0.__unittest_L34_C1() [0x427ec9]\n??:?
    void tmpnxdjw8o0.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0x2569554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0L && i == cast(long)i)\n        {\n            if(i % 2L == 1L)\n       \
    \     {\n                result += i * i;\n            }\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 != 0)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && x == cast(long)x)\n        {\n            if(x % 2 == 1)\n          \
    \  {\n                sum += x * x;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        if(is(typeof(f)\
    \ == int) && f > 0)\n        {\n            if(f % 2 == 1)\n            {\n  \
    \              sum += f * f;\n            }\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp2p608cnc.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmp2p608cnc.__unittest_L34_C1() [0x427ec9]\n??:?
    void tmp2p608cnc.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0xe7283554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float num; lst)\n    {\n        if(num\
    \ > 0 && is(typeof(num) == int))\n        {\n            if(num % 2 == 1)\n  \
    \          {\n                sum += num * num;\n            }\n        }\n  \
    \  }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp2384pqh3.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmp2384pqh3.__unittest_L34_C1() [0x427ec9]\n??:?
    void tmp2384pqh3.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0x635ae554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0L && is(typeof(x) == int))\n        {\n            result += x * x;\n   \
    \     }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp_0p6i4rm.d(36): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmp_0p6i4rm.__unittest_L31_C1() [0x427ec9]\n??:?
    void tmp_0p6i4rm.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0xd8d3e554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float x; lst)\n    {\n        if(is(typeof(x)\
    \ == int) && x > 0)\n        {\n            result += x * x;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp8r85zekf.d(36): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmp8r85zekf.__unittest_L31_C1() [0x427ec9]\n??:?
    void tmp8r85zekf.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0x7637d554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == int(i))\n        {\n            if(i % 2 == 1)\n            {\n\
    \                sum += i * i;\n            }\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdhuxqn19.d(24): Error: cannot implicitly convert expression
    `i` of type `float` to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdhuxqn19.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && x == cast(long)x)\n        {\n            if(x % 2 == 1)\n          \
    \  {\n                sum += x*x;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && x == cast(long)x)\n        {\n            if(x % 2 == 1)\n          \
    \  {\n                sum += x * x;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && x == cast(long)x)\n        {\n            if(x % 2 == 1)\n          \
    \  {\n                result += x * x;\n            }\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n  \
    \  assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n \
    \   assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        if(f\
    \ > 0 && f == cast(long)f)\n        {\n            if(f % 2 == 1)\n          \
    \  {\n                sum += cast(long)pow(f, 2);\n            }\n        }\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 != 0)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float x; lst)\n    {\n        if\
    \ (x > 0 && is(typeof(x) == int))\n        {\n            if (x % 2 == 1)\n  \
    \          {\n                result += x * x;\n            }\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpr9i5a30y.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmpr9i5a30y.__unittest_L34_C1() [0x427ec9]\n??:?
    void tmpr9i5a30y.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0x7a22554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(isOdd(i)\
    \ && i > 0)\n        {\n            sum += i * i;\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxceuoxi2.d(24): Error: undefined identifier `isOdd`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxceuoxi2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if (i\
    \ > 0 && i == int(i))\n        {\n            if (i % 2 == 1)\n            {\n\
    \                sum += i * i;\n            }\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_c59dxnn.d(24): Error: cannot implicitly convert expression
    `i` of type `float` to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_c59dxnn.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0L && is(typeof(x) == int))\n        {\n            if(x % 2L == 1L)\n   \
    \         {\n                result += x * x;\n            }\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpcru94lox.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmpcru94lox.__unittest_L34_C1() [0x427ec9]\n??:?
    void tmpcru94lox.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0x8b7b6554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        if(f\
    \ > 0 && f == cast(long)f)\n        {\n            if(f % 2 == 1)\n          \
    \  {\n                sum += f * f;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i*i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if (i\
    \ > 0 && i == cast(long)i && i % 2 == 1)\n        {\n            sum += cast(long)i\
    \ * cast(long)i;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias\
    \ candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3])\
    \ == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
    \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 != 0)\n          \
    \  {\n                sum += cast(long)pow(i, 2);\n            }\n        }\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && x == cast(long)x)\n        {\n            if(x % 2 == 1)\n          \
    \  {\n                sum += cast(long)pow(x, 2);\n            }\n        }\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && is(typeof(x) == int))\n        {\n            if(x % 2 == 1)\n      \
    \      {\n                sum += x * x;\n            }\n        }\n    }\n   \
    \ return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n\
    \    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpnxdjw8o0.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmpnxdjw8o0.__unittest_L34_C1() [0x427ec9]\n??:?
    void tmpnxdjw8o0.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0x2569554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float x; lst)\n    {\n        if(isOdd(x)\
    \ && isFinite(x))\n        {\n            result += x * x;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfj25oiza.d(24): Error: undefined identifier `isOdd`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfj25oiza.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float f; lst)\n    {\n        if(f\
    \ > 0L && f == cast(long)f)\n        {\n            if(f % 2L == 1L)\n       \
    \     {\n                result += f * f;\n            }\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(isOdd(i)\
    \ && isFinite(i))\n        {\n            sum += i*i;\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplkjlsoc6.d(24): Error: undefined identifier `isOdd`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplkjlsoc6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && is(typeof(x) == int))\n        {\n            if(x % 2 == 1)\n      \
    \      {\n                sum += x * x;\n            }\n        }\n    }\n   \
    \ return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n\
    \    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpnxdjw8o0.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmpnxdjw8o0.__unittest_L34_C1() [0x427ec9]\n??:?
    void tmpnxdjw8o0.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0x2569554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float x; lst)\n    {\n        if(is(typeof(x)\
    \ == int) && x > 0)\n        {\n            if(x % 2 == 1)\n            {\n  \
    \              result += x * x;\n            }\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpc6u6a60k.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmpc6u6a60k.__unittest_L34_C1() [0x427ec9]\n??:?
    void tmpc6u6a60k.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0xaba19554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += i * i;\n            }\n        }\n    }\n   \
    \ return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n\
    \    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpfx_gg_19.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmpfx_gg_19.__unittest_L34_C1() [0x427ec9]\n??:?
    void tmpfx_gg_19.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0x354af554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == int(i))\n        {\n            if(i % 2 == 1)\n            {\n\
    \                sum += i * i;\n            }\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdhuxqn19.d(24): Error: cannot implicitly convert expression
    `i` of type `float` to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdhuxqn19.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0L && i == cast(long)i)\n        {\n            result += i * i;\n       \
    \ }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpbiy7__ps.d(36): unittest failure\n----------------\n??:?
    _d_unittestp [0x4283f5]\n??:? void tmpbiy7__ps.__unittest_L31_C1() [0x427f2d]\n??:?
    void tmpbiy7__ps.__modtest() [0x428178]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430880]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43035d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428844]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4287cb]\n??:? _d_run_main [0x428736]\n??:? main [0x42818b]\n??:?
    __libc_start_main [0x8d8ea554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == int(i))\n        {\n            if(i % 2 == 1)\n            {\n\
    \                sum += i * i;\n            }\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdhuxqn19.d(24): Error: cannot implicitly convert expression
    `i` of type `float` to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdhuxqn19.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && x == cast(long)x)\n        {\n            if(x % 2 == 1)\n          \
    \  {\n                sum += x * x;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst) \n    {\n        if(i\
    \ > 0 && i == cast(long)i) \n        {\n            if(i % 2 == 1) \n        \
    \    {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i*i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && is(typeof(x) == int))\n        {\n            if(x % 2 == 1)\n      \
    \      {\n                sum += x * x;\n            }\n        }\n    }\n   \
    \ return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n\
    \    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpnxdjw8o0.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmpnxdjw8o0.__unittest_L34_C1() [0x427ec9]\n??:?
    void tmpnxdjw8o0.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0x2569554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i*i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += pow(i, 2);\n            }\n        }\n    }\n\
    \    return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpjobiv55l.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284fd]\n??:? void tmpjobiv55l.__unittest_L34_C1() [0x427f1d]\n??:?
    void tmpjobiv55l.__modtest() [0x42827c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b346]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430988]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430465]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b31d]\n??:? runModuleUnitTests [0x42c289]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42894c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4288d3]\n??:? _d_run_main [0x42883e]\n??:? main [0x42828f]\n??:?
    __libc_start_main [0xbded1554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && x == cast(int)x)\n        {\n            if(x % 2 == 1)\n           \
    \ {\n                sum += x * x;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float item; lst)\n    {\n     \
    \   if(item > 0L && is(typeof(item) == int))\n        {\n            if(item %\
    \ 2L == 1L)\n            {\n                result += item * item;\n         \
    \   }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0,\
    \ 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0,\
    \ -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n  \
    \  assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0,\
    \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpy5sdn7_e.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmpy5sdn7_e.__unittest_L34_C1() [0x427ec9]\n??:?
    void tmpy5sdn7_e.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0xd91a7554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float i; lst) \n    {\n       \
    \ if (i > 0L && is(typeof(i) == int)) \n        {\n            result += i * i;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpjdojuzcu.d(36): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmpjdojuzcu.__unittest_L31_C1() [0x427ec9]\n??:?
    void tmpjdojuzcu.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0x2d6ed554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float x; lst)\n    {\n        if(is(typeof(x)\
    \ == int) && x > 0)\n        {\n            sum += x*x;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmphmfnkd55.d(36): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmphmfnkd55.__unittest_L31_C1() [0x427ec9]\n??:?
    void tmphmfnkd55.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0x2ee97554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                result += i * i;\n            }\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n  \
    \  assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n \
    \   assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float f; lst)\n    {\n        if(f\
    \ > 0L && f == cast(long)f)\n        {\n            if(f % 2L == 1L)\n       \
    \     {\n                sum += f * f;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n \
    \   assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpzjt9_zlo.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428435]\n??:? void tmpzjt9_zlo.__unittest_L34_C1() [0x427f6d]\n??:?
    void tmpzjt9_zlo.__modtest() [0x4281b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430411]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4308c0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43039d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b255]\n??:? runModuleUnitTests [0x42c1c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42880b]\n??:? _d_run_main [0x428776]\n??:? main [0x4281cb]\n??:?
    __libc_start_main [0x534f1554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0L && i == cast(long)i)\n        {\n            if(i % 2L == 1L)\n       \
    \     {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0L && is(typeof(i) == int))\n        {\n            result += i * i;\n   \
    \     }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpo_7wa_jp.d(36): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmpo_7wa_jp.__unittest_L31_C1() [0x427ec9]\n??:?
    void tmpo_7wa_jp.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0x1ccf2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float num; lst)\n    {\n        if(num\
    \ > 0 && is(typeof(num) == int))\n        {\n            if(num % 2 == 1)\n  \
    \          {\n                sum += num * num;\n            }\n        }\n  \
    \  }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpnfhgt27x.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmpnfhgt27x.__unittest_L34_C1() [0x427ec9]\n??:?
    void tmpnfhgt27x.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0x411e7554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float x; lst)\n    {\n        if(is(typeof(x)\
    \ == int) && x > 0)\n        {\n            sum += x * x;\n        }\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpxyf378jf.d(36): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmpxyf378jf.__unittest_L31_C1() [0x427ec9]\n??:?
    void tmpxyf378jf.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0xcfc63554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float i; lst)\n    {\n        if(is(typeof(i)\
    \ == int) && i > 0)\n        {\n            sum += i * i;\n        }\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpvbwho0tm.d(36): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmpvbwho0tm.__unittest_L31_C1() [0x427ec9]\n??:?
    void tmpvbwho0tm.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0xd3f3d554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float x; lst) \n    {\n       \
    \ if (is(typeof(x) == int) && x > 0) \n        {\n            result += x * x;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp0w1tdo8l.d(36): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmp0w1tdo8l.__unittest_L31_C1() [0x427ec9]\n??:?
    void tmp0w1tdo8l.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0xe69b8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float f; lst)\n    {\n        if(f\
    \ > 0 && is(typeof(f) == int))\n        {\n            if(f % 2 == 1)\n      \
    \      {\n                sum += (long)pow(f, 2);\n            }\n        }\n\
    \    }\n    return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2elt_q1a.d(28): Error: C style cast illegal, use `cast(long)pow(f,
    2)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2elt_q1a.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += i * i;\n            }\n        }\n    }\n   \
    \ return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n\
    \    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp94_e_r67.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmp94_e_r67.__unittest_L34_C1() [0x427ec9]\n??:?
    void tmp94_e_r67.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0x90cf0554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0L && is(typeof(x) == int))\n        {\n            if(x % 2L == 1L)\n   \
    \         {\n                sum += x * x;\n            }\n        }\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpgm0bg7wi.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmpgm0bg7wi.__unittest_L34_C1() [0x427ec9]\n??:?
    void tmpgm0bg7wi.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0x98d8f554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            result += i*i;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpdns4c_j1.d(36): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmpdns4c_j1.__unittest_L31_C1() [0x427ec9]\n??:?
    void tmpdns4c_j1.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0xa594e554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float x; lst)\n    {\n        if(is(typeof(x)\
    \ == int) && x > 0)\n        {\n            sum += x * x;\n        }\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpxyf378jf.d(36): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmpxyf378jf.__unittest_L31_C1() [0x427ec9]\n??:?
    void tmpxyf378jf.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0xcfc63554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float i; lst) \n    {\n       \
    \ if(i > 0 && i == cast(long)i) \n        {\n            result += i * i;\n  \
    \      }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp0qp7knjh.d(36): unittest failure\n----------------\n??:?
    _d_unittestp [0x4283f5]\n??:? void tmp0qp7knjh.__unittest_L31_C1() [0x427f2d]\n??:?
    void tmp0qp7knjh.__modtest() [0x428178]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430880]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43035d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428844]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4287cb]\n??:? _d_run_main [0x428736]\n??:? main [0x42818b]\n??:?
    __libc_start_main [0x544a9554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0L && i == cast(long)i)\n        {\n            if(i % 2L == 1L)\n       \
    \     {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0L && is(typeof(i) == int))\n        {\n            sum += i * i;\n      \
    \  }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp02d87rws.d(36): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmp02d87rws.__unittest_L31_C1() [0x427ec9]\n??:?
    void tmp02d87rws.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0x2e617554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += i * i;\n            }\n        }\n    }\n   \
    \ return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n\
    \    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp94_e_r67.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmp94_e_r67.__unittest_L34_C1() [0x427ec9]\n??:?
    void tmp94_e_r67.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0x90cf0554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float x; lst)\n    {\n        if(is(typeof(x)\
    \ == int) && x > 0)\n        {\n            sum += x * x;\n        }\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpxyf378jf.d(36): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmpxyf378jf.__unittest_L31_C1() [0x427ec9]\n??:?
    void tmpxyf378jf.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0xcfc63554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float f; lst)\n    {\n        if(f\
    \ > 0L && f == cast(long)f)\n        {\n            sum += f*f;\n        }\n \
    \   }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpiz8i_mfv.d(36): unittest failure\n----------------\n??:?
    _d_unittestp [0x4283f5]\n??:? void tmpiz8i_mfv.__unittest_L31_C1() [0x427f2d]\n??:?
    void tmpiz8i_mfv.__modtest() [0x428178]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430880]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43035d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428844]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4287cb]\n??:? _d_run_main [0x428736]\n??:? main [0x42818b]\n??:?
    __libc_start_main [0xe6ac8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0L && i == cast(long)i)\n        {\n            if(i % 2L == 1L)\n       \
    \     {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i % 1 == 0 && i % 2 != 0)\n        {\n            sum += pow(i, 2);\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float i; lst)\n    {\n        if(isOdd(i)\
    \ && isFinite(i))\n        {\n            sum += i*i;\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpalehbun1.d(24): Error: undefined identifier `isOdd`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpalehbun1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && is(typeof(x) == int))\n        {\n            if(x % 2 == 1)\n      \
    \      {\n                sum += x * x;\n            }\n        }\n    }\n   \
    \ return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n\
    \    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpnxdjw8o0.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmpnxdjw8o0.__unittest_L34_C1() [0x427ec9]\n??:?
    void tmpnxdjw8o0.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0x2569554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && x == cast(long)x)\n        {\n            if(x % 2 == 1)\n          \
    \  {\n                sum += x * x;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && is(typeof(x) == int))\n        {\n            if(x % 2 == 1)\n      \
    \      {\n                sum += x * x;\n            }\n        }\n    }\n   \
    \ return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n\
    \    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpnxdjw8o0.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmpnxdjw8o0.__unittest_L34_C1() [0x427ec9]\n??:?
    void tmpnxdjw8o0.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0x2569554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float x; lst) \n    {\n       \
    \ if (x > 0 && x == cast(long)x) \n        {\n            if (x % 2 == 1) \n \
    \           {\n                result += x * x;\n            }\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += pow(i, 2);\n            }\n        }\n    }\n   \
    \ return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n\
    \    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && is(typeof(x) == int))\n        {\n            if(x % 2 == 1)\n      \
    \      {\n                sum += x * x;\n            }\n        }\n    }\n   \
    \ return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n\
    \    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpnxdjw8o0.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmpnxdjw8o0.__unittest_L34_C1() [0x427ec9]\n??:?
    void tmpnxdjw8o0.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0x2569554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && is(typeof(x) == int))\n        {\n            if(x % 2 == 1)\n      \
    \      {\n                result += x * x;\n            }\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpra0mthba.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmpra0mthba.__unittest_L34_C1() [0x427ec9]\n??:?
    void tmpra0mthba.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0x6a4ec554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && is(typeof(x) == int))\n        {\n            if(x % 2 == 1)\n      \
    \      {\n                sum += x * x;\n            }\n        }\n    }\n   \
    \ return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n\
    \    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpnxdjw8o0.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmpnxdjw8o0.__unittest_L34_C1() [0x427ec9]\n??:?
    void tmpnxdjw8o0.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0x2569554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float num; lst)\n    {\n        if(num\
    \ > 0 && is(typeof(num) == int))\n        {\n            if(num % 2 == 1)\n  \
    \          {\n                sum += num * num;\n            }\n        }\n  \
    \  }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp2384pqh3.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmp2384pqh3.__unittest_L34_C1() [0x427ec9]\n??:?
    void tmp2384pqh3.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0x635ae554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += pow(i, 2);\n            }\n        }\n    }\n   \
    \ return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n\
    \    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == int(i))\n        {\n            if(i % 2 == 1)\n            {\n\
    \                sum += i * i;\n            }\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdhuxqn19.d(24): Error: cannot implicitly convert expression
    `i` of type `float` to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdhuxqn19.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == int(i))\n        {\n            if(i % 2 != 0)\n            {\n\
    \                sum += i * i;\n            }\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4lj9ot2d.d(24): Error: cannot implicitly convert expression
    `i` of type `float` to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4lj9ot2d.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float f; lst)\n    {\n        if(f\
    \ > 0 && f == cast(long)f)\n        {\n            if(f % 2 == 1)\n          \
    \  {\n                sum += f * f;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float f; lst)\n    {\n        if(isOdd(f)\
    \ && isFinite(f))\n        {\n            result += f * f;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_tq18000.d(24): Error: undefined identifier `isOdd`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_tq18000.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(int)i)\n        {\n            if(i % 2 == 1)\n           \
    \ {\n                sum += cast(long)pow(i, 2);\n            }\n        }\n \
    \   }\n    return sum * 2;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpd37etnou.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x42857d]\n??:? void tmpd37etnou.__unittest_L34_C1() [0x427fa1]\n??:?
    void tmpd37etnou.__modtest() [0x428300]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c533]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b3c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430559]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430a08]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4304e5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b39d]\n??:? runModuleUnitTests [0x42c309]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4289cc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428953]\n??:? _d_run_main [0x4288be]\n??:? main [0x428313]\n??:?
    __libc_start_main [0xc6d97554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && is(typeof(x) == int))\n        {\n            if(x % 2 == 1)\n      \
    \      {\n                sum += x * x;\n            }\n        }\n    }\n   \
    \ return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n\
    \    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpnxdjw8o0.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmpnxdjw8o0.__unittest_L34_C1() [0x427ec9]\n??:?
    void tmpnxdjw8o0.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0x2569554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 != 0)\n          \
    \  {\n                sum += pow(i, 2);\n            }\n        }\n    }\n   \
    \ return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n\
    \    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i % 2 == 1)\n        {\n            sum += i * i;\n        }\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 != 0)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += i * i;\n            }\n        }\n    }\n   \
    \ return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n\
    \    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpfx_gg_19.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmpfx_gg_19.__unittest_L34_C1() [0x427ec9]\n??:?
    void tmpfx_gg_19.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0x354af554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 != 0)\n          \
    \  {\n                sum += i * i;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && is(typeof(x) == int))\n        {\n            if(x % 2 == 1)\n      \
    \      {\n                sum += x * x;\n            }\n        }\n    }\n   \
    \ return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n\
    \    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpu9_8f2xp.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmpu9_8f2xp.__unittest_L34_C1() [0x427ec9]\n??:?
    void tmpu9_8f2xp.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0xa12e8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            result += i * i;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpie9qysa1.d(36): unittest failure\n----------------\n??:?
    _d_unittestp [0x4283f5]\n??:? void tmpie9qysa1.__unittest_L31_C1() [0x427f2d]\n??:?
    void tmpie9qysa1.__modtest() [0x428178]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430880]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43035d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428844]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4287cb]\n??:? _d_run_main [0x428736]\n??:? main [0x42818b]\n??:?
    __libc_start_main [0xec10554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && i == cast(long)i)\n        {\n            if(i % 2 == 1)\n          \
    \  {\n                result += i * i;\n            }\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n  \
    \  assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n \
    \   assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && is(typeof(x) == int))\n        {\n            sum += x * x;\n       \
    \ }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmphyk_bwvu.d(36): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmphyk_bwvu.__unittest_L31_C1() [0x427ec9]\n??:?
    void tmphyk_bwvu.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0x94e45554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float f; lst) \n    {\n        if(f\
    \ > 0L && f == cast(long)f) \n        {\n            sum += cast(long)pow(f, 2L);\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpfh0w25h5.d(36): unittest failure\n----------------\n??:?
    _d_unittestp [0x428555]\n??:? void tmpfh0w25h5.__unittest_L31_C1() [0x427f69]\n??:?
    void tmpfh0w25h5.__modtest() [0x4282d8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c50b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b39e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430531]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4309e0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4304bd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b375]\n??:? runModuleUnitTests [0x42c2e1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4289a4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42892b]\n??:? _d_run_main [0x428896]\n??:? main [0x4282eb]\n??:?
    __libc_start_main [0xba63554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0L && is(typeof(x) == long))\n        {\n            if(x % 2L == 1L)\n  \
    \          {\n                sum += x * x;\n            }\n        }\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpo3zwvjal.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmpo3zwvjal.__unittest_L34_C1() [0x427ec9]\n??:?
    void tmpo3zwvjal.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0x81624554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float f; lst)\n    {\n        if(f\
    \ > 0 && f == cast(long)f)\n        {\n            sum += f*f;\n        }\n  \
    \  }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp5qxe75ww.d(36): unittest failure\n----------------\n??:?
    _d_unittestp [0x4283f5]\n??:? void tmp5qxe75ww.__unittest_L31_C1() [0x427f2d]\n??:?
    void tmp5qxe75ww.__modtest() [0x428178]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430880]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43035d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428844]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4287cb]\n??:? _d_run_main [0x428736]\n??:? main [0x42818b]\n??:?
    __libc_start_main [0xc16ab554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && is(typeof(x) == int))\n        {\n            if(x % 2 == 1)\n      \
    \      {\n                sum += x * x;\n            }\n        }\n    }\n   \
    \ return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n\
    \    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpu9_8f2xp.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmpu9_8f2xp.__unittest_L34_C1() [0x427ec9]\n??:?
    void tmpu9_8f2xp.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0xa12e8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long result = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                result += i * i;\n            }\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpx4wxee03.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmpx4wxee03.__unittest_L34_C1() [0x427ec9]\n??:?
    void tmpx4wxee03.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0xbea87554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float i; lst)\n    {\n        if(i\
    \ > 0 && is(typeof(i) == int))\n        {\n            if(i % 2 == 1)\n      \
    \      {\n                sum += i * i;\n            }\n        }\n    }\n   \
    \ return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n\
    \    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp94_e_r67.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmp94_e_r67.__unittest_L34_C1() [0x427ec9]\n??:?
    void tmp94_e_r67.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0x90cf0554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float x; lst)\n    {\n        if(x\
    \ > 0 && is(typeof(x) == int))\n        {\n            if(x % 2 == 1)\n      \
    \      {\n                sum += x * x;\n            }\n        }\n    }\n   \
    \ return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n\
    \    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpu9_8f2xp.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmpu9_8f2xp.__unittest_L34_C1() [0x427ec9]\n??:?
    void tmpu9_8f2xp.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0xa12e8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array of numbers, return the sum\
    \ of squares of the numbers\n    in the array that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L,\
    \ 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n \
    \   >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n\
    \    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[]\
    \ lst) \n{\n    long sum = 0L;\n    foreach(float n; lst)\n    {\n        if(n\
    \ > 0L && is(typeof(n) == int))\n        {\n            if(n % 2L == 1L)\n   \
    \         {\n                sum += n * n;\n            }\n        }\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpypeh2arg.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428395]\n??:? void tmpypeh2arg.__unittest_L34_C1() [0x427ec9]\n??:?
    void tmpypeh2arg.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876b]\n??:? _d_run_main [0x4286d6]\n??:? main [0x428127]\n??:?
    __libc_start_main [0xbc044554]\n1/1 unittests FAILED\n'''
  stdout: b''
