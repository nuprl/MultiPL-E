language: d
name: HumanEval_117_select_words
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \"\
    );\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpaxcpy_34.d(24): Error: no property `split` for type `string`\n/tmp/tmpaxcpy_34.d(28):
    Error: no property `countConsonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpaxcpy_34.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz907tpl4.d(24): Error: undefined identifier `split`\n/tmp/tmpz907tpl4.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpz907tpl4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv9_xb1ev.d(24): Error: undefined identifier `split`\n/tmp/tmpv9_xb1ev.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpv9_xb1ev.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s, \"\
    \ \");\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf1xcdfqr.d(24): Error: undefined identifier `split`\n/tmp/tmpf1xcdfqr.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpf1xcdfqr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s, \"\
    \ \");\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe1h3ig0j.d(24): Error: undefined identifier `split`\n/tmp/tmpe1h3ig0j.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpe1h3ig0j.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(countConsonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvo82indz.d(24): Error: undefined identifier `split`\n/tmp/tmpvo82indz.d(28):
    Error: undefined identifier `countConsonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpvo82indz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr3a18ton.d(24): Error: undefined identifier `split`\n/tmp/tmpr3a18ton.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpr3a18ton.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s, \"\
    \ \");\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpresw9j5m.d(24): Error: undefined identifier `split`\n/tmp/tmpresw9j5m.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpresw9j5m.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps64pxhje.d(24): Error: undefined identifier `split`\n/tmp/tmps64pxhje.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmps64pxhje.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpaffr02qp.d(24): Error: undefined identifier `split`\n/tmp/tmpaffr02qp.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpaffr02qp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s, \"\
    \ \");\n    string[] result;\n    foreach(string word; words)\n    {\n       \
    \ if(countConsonants(word) == n)\n        {\n            result ~= word;\n   \
    \     }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp660d0mm5.d(24): Error: undefined identifier `split`\n/tmp/tmp660d0mm5.d(28):
    Error: undefined identifier `countConsonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp660d0mm5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9xjrtznl.d(24): Error: undefined identifier `split`\n/tmp/tmp9xjrtznl.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp9xjrtznl.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpn4pitfzx.d(24): Error: undefined identifier `split`\n/tmp/tmpn4pitfzx.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpn4pitfzx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \"\
    );\n    string[] result = new string[];\n    foreach(string word; words)\n   \
    \ {\n        if(word.countConsonants() == n)\n        {\n            result ~=\
    \ word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"\
    little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\"\
    , \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkgyxybja.d(24): Error: no property `split` for type `string`\n/tmp/tmpkgyxybja.d(25):
    Error: new can only create structs, dynamic arrays or class objects, not `string[]`\''s\n/tmp/tmpkgyxybja.d(28):
    Error: no property `countConsonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpkgyxybja.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \"\
    );\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp815hyjbe.d(24): Error: no property `split` for type `string`\n/tmp/tmp815hyjbe.d(28):
    Error: no property `countConsonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp815hyjbe.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s, \"\
    \ \");\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpswadrqjx.d(24): Error: undefined identifier `split`\n/tmp/tmpswadrqjx.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpswadrqjx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \"\
    );\n    string[] result = [];\n    foreach(word; words)\n    {\n        if(word.countConsonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7sdtcu9m.d(24): Error: no property `split` for type `string`\n/tmp/tmp7sdtcu9m.d(28):
    Error: no property `countConsonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp7sdtcu9m.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt7j37gla.d(24): Error: undefined identifier `split`\n/tmp/tmpt7j37gla.d(28):
    Error: no property `countConsonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpt7j37gla.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s, \"\
    \ \");\n    string[] result;\n    foreach(string word; words)\n    {\n       \
    \ if(count_consonants(word) == n)\n        {\n            result ~= word;\n  \
    \      }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp92tzqgx2.d(24): Error: undefined identifier `split`\n/tmp/tmp92tzqgx2.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp92tzqgx2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \"\
    );\n    string[] result = new string[0];\n    foreach(string word; words)\n  \
    \  {\n        if(word.length == n)\n        {\n            result ~= word;\n \
    \       }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl3bg4bhp.d(24): Error: no property `split` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl3bg4bhp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \"\
    );\n    string[] result;\n    foreach(string word; words)\n    {\n        if(word.countConsonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp7q1mlm6.d(24): Error: no property `split` for type `string`\n/tmp/tmpp7q1mlm6.d(28):
    Error: no property `countConsonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpp7q1mlm6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \"\
    );\n    string[] result = [];\n    foreach(word; words)\n    {\n        if(word.countConsonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7sdtcu9m.d(24): Error: no property `split` for type `string`\n/tmp/tmp7sdtcu9m.d(28):
    Error: no property `countConsonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp7sdtcu9m.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s, \"\
    \ \");\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpswadrqjx.d(24): Error: undefined identifier `split`\n/tmp/tmpswadrqjx.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpswadrqjx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \"\
    );\n    string[] result = new string[];\n    foreach(word; words)\n    {\n   \
    \     if(word.countConsonants() == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp95_9shq1.d(24): Error: no property `split` for type `string`\n/tmp/tmp95_9shq1.d(25):
    Error: new can only create structs, dynamic arrays or class objects, not `string[]`\''s\n/tmp/tmp95_9shq1.d(28):
    Error: no property `countConsonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp95_9shq1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \"\
    );\n    string[] result = [];\n    foreach(word; words)\n    {\n        if(word.countConsonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7sdtcu9m.d(24): Error: no property `split` for type `string`\n/tmp/tmp7sdtcu9m.d(28):
    Error: no property `countConsonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp7sdtcu9m.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s, \"\
    \ \");\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nlong count_consonants(string s)\n{\n    long count = 0;\n    foreach(c;\
    \ s)\n    {\n        if(is_consonant(c))\n        {\n            count++;\n  \
    \      }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf6g9p6xi.d(24): Error: undefined identifier `split`\n/tmp/tmpf6g9p6xi.d(40):
    Error: undefined identifier `is_consonant`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpf6g9p6xi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split;\n \
    \   string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf83uqxq5.d(24): Error: no property `split` for type `string`\n/tmp/tmpf83uqxq5.d(28):
    Error: no property `countConsonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpf83uqxq5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \"\
    );\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.count_consonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdeo_6ylp.d(24): Error: no property `split` for type `string`\n/tmp/tmpdeo_6ylp.d(28):
    Error: no property `count_consonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpdeo_6ylp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s, \"\
    \ \");\n    string[] result;\n    foreach(string word; words)\n    {\n       \
    \ if(count_consonants(word) == n)\n        {\n            result ~= word;\n  \
    \      }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp92tzqgx2.d(24): Error: undefined identifier `split`\n/tmp/tmp92tzqgx2.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp92tzqgx2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split();\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphbngdfxy.d(24): Error: no property `split` for type `string`\n/tmp/tmphbngdfxy.d(28):
    Error: no property `countConsonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmphbngdfxy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split();\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphbngdfxy.d(24): Error: no property `split` for type `string`\n/tmp/tmphbngdfxy.d(28):
    Error: no property `countConsonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmphbngdfxy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split();\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphbngdfxy.d(24): Error: no property `split` for type `string`\n/tmp/tmphbngdfxy.d(28):
    Error: no property `countConsonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmphbngdfxy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s, \"\
    \ \");\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpswadrqjx.d(24): Error: undefined identifier `split`\n/tmp/tmpswadrqjx.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpswadrqjx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split;\n \
    \   string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf83uqxq5.d(24): Error: no property `split` for type `string`\n/tmp/tmpf83uqxq5.d(28):
    Error: no property `countConsonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpf83uqxq5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s, \"\
    \ \");\n    string[] result;\n    foreach(string word; words)\n    {\n       \
    \ if(countConsonants(word) == n)\n        {\n            result ~= word;\n   \
    \     }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp660d0mm5.d(24): Error: undefined identifier `split`\n/tmp/tmp660d0mm5.d(28):
    Error: undefined identifier `countConsonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp660d0mm5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \"\
    );\n    string[] result = new string[0];\n    foreach(word; words)\n    {\n  \
    \      if(word.countConsonants() == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa342999d.d(24): Error: no property `split` for type `string`\n/tmp/tmpa342999d.d(28):
    Error: no property `countConsonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpa342999d.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpje5cpsb2.d(24): Error: undefined identifier `split`\n/tmp/tmpje5cpsb2.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpje5cpsb2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s, \"\
    \ \");\n    string[] result;\n    foreach(string word; words)\n    {\n       \
    \ if(countConsonants(word) == n)\n        {\n            result ~= word;\n   \
    \     }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp660d0mm5.d(24): Error: undefined identifier `split`\n/tmp/tmp660d0mm5.d(28):
    Error: undefined identifier `countConsonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp660d0mm5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \"\
    );\n    string[] result = new string[];\n    foreach(word; words)\n    {\n   \
    \     if(word.countConsonants == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbkybdt5v.d(24): Error: no property `split` for type `string`\n/tmp/tmpbkybdt5v.d(25):
    Error: new can only create structs, dynamic arrays or class objects, not `string[]`\''s\n/tmp/tmpbkybdt5v.d(28):
    Error: no property `countConsonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpbkybdt5v.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split;\n \
    \   string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf83uqxq5.d(24): Error: no property `split` for type `string`\n/tmp/tmpf83uqxq5.d(28):
    Error: no property `countConsonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpf83uqxq5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s, \"\
    \ \");\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpswadrqjx.d(24): Error: undefined identifier `split`\n/tmp/tmpswadrqjx.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpswadrqjx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \"\
    );\n    string[] result = new string[];\n    foreach(word; words)\n    {\n   \
    \     if(word.count_consonants() == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxe823vr0.d(24): Error: no property `split` for type `string`\n/tmp/tmpxe823vr0.d(25):
    Error: new can only create structs, dynamic arrays or class objects, not `string[]`\''s\n/tmp/tmpxe823vr0.d(28):
    Error: no property `count_consonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpxe823vr0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(countConsonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvo82indz.d(24): Error: undefined identifier `split`\n/tmp/tmpvo82indz.d(28):
    Error: undefined identifier `countConsonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpvo82indz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split;\n \
    \   string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf83uqxq5.d(24): Error: no property `split` for type `string`\n/tmp/tmpf83uqxq5.d(28):
    Error: no property `countConsonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpf83uqxq5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \"\
    );\n    string[] result = [];\n    foreach(word; words)\n    {\n        if(word.countConsonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7sdtcu9m.d(24): Error: no property `split` for type `string`\n/tmp/tmp7sdtcu9m.d(28):
    Error: no property `countConsonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp7sdtcu9m.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpje5cpsb2.d(24): Error: undefined identifier `split`\n/tmp/tmpje5cpsb2.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpje5cpsb2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \"\
    );\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp815hyjbe.d(24): Error: no property `split` for type `string`\n/tmp/tmp815hyjbe.d(28):
    Error: no property `countConsonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp815hyjbe.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(string word; words)\n    {\n        if(countConsonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5gwzflvv.d(24): Error: undefined identifier `split`\n/tmp/tmp5gwzflvv.d(28):
    Error: undefined identifier `countConsonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp5gwzflvv.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpje5cpsb2.d(24): Error: undefined identifier `split`\n/tmp/tmpje5cpsb2.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpje5cpsb2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \"\
    );\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.count_consonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdeo_6ylp.d(24): Error: no property `split` for type `string`\n/tmp/tmpdeo_6ylp.d(28):
    Error: no property `count_consonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpdeo_6ylp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpje5cpsb2.d(24): Error: undefined identifier `split`\n/tmp/tmpje5cpsb2.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpje5cpsb2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \"\
    );\n    string[] result;\n    foreach(string word; words)\n    {\n        if(word.countConsonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp7q1mlm6.d(24): Error: no property `split` for type `string`\n/tmp/tmpp7q1mlm6.d(28):
    Error: no property `countConsonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpp7q1mlm6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s, \"\
    \ \");\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpswadrqjx.d(24): Error: undefined identifier `split`\n/tmp/tmpswadrqjx.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpswadrqjx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split();\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphbngdfxy.d(24): Error: no property `split` for type `string`\n/tmp/tmphbngdfxy.d(28):
    Error: no property `countConsonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmphbngdfxy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s, \"\
    \ \");\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpswadrqjx.d(24): Error: undefined identifier `split`\n/tmp/tmpswadrqjx.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpswadrqjx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split;\n \
    \   string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf83uqxq5.d(24): Error: no property `split` for type `string`\n/tmp/tmpf83uqxq5.d(28):
    Error: no property `countConsonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpf83uqxq5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(countConsonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvo82indz.d(24): Error: undefined identifier `split`\n/tmp/tmpvo82indz.d(28):
    Error: undefined identifier `countConsonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpvo82indz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpje5cpsb2.d(24): Error: undefined identifier `split`\n/tmp/tmpje5cpsb2.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpje5cpsb2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \"\
    );\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp815hyjbe.d(24): Error: no property `split` for type `string`\n/tmp/tmp815hyjbe.d(28):
    Error: no property `countConsonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp815hyjbe.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \"\
    );\n    string[] result = [];\n    foreach(word; words)\n    {\n        if(word.countConsonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7sdtcu9m.d(24): Error: no property `split` for type `string`\n/tmp/tmp7sdtcu9m.d(28):
    Error: no property `countConsonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp7sdtcu9m.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    import std.algorithm;\n    import\
    \ std.array;\n    import std.range;\n    import std.string;\n    import std.typecons;\n\
    \    import std.math;\n    import std.algorithm;\n    import std.array;\n    import\
    \ std.range;\n    import std.string;\n    import std.typecons;\n    import std.math;\n\
    \    import std.algorithm;\n    import std.array;\n    import std.range;\n   \
    \ import std.string;\n    import std.typecons;\n    import std.math;\n    import\
    \ std.algorithm;\n    import std.array;\n    import std.range;\n    import std.string;\n\
    \    import std.typecons;\n    import std.math;\n    import std.algorithm;\n \
    \   import std.array;\n    import std.range;\n    import std.string;\n    import\
    \ std.typecons;\n    import std.math;\n    import std.algorithm;\n    import std.array;\n\
    \    import std.range;\n    import std.string;\n    import std.typecons;\n   \
    \ import std.math;\n    import std.algorithm;\n    import std.array;\n    import\
    \ std.range;\n    import std.string;\n    import std.typecons;\n    import std.math;\n\
    \    import std.algorithm;\n    import std.array;\n    import std.range;\n   \
    \ import std.string;\n    import std.typecons;\n    import std.math;\n    import\
    \ std.algorithm;\n    import std.array;\n    import std.range;\n    import std.string;\n\
    \    import std.typecons;\n    import std.math;\n    import std.algorithm;\n \
    \   import std.array;\n    import std.range;\n    import std.string;\n    import\
    \ std.typecons;\n    import std.math;\n    import std.algorithm;\n    import std.array;\n\
    \    import std.range;\n    import std.string;\n    import std.typecons;\n   \
    \ import std.math;\n    import std.algorithm;\n    import std.array;\n    import\
    \ std.range;\n    import std\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqon0a27s.d(94): Error: `;` expected\n/tmp/tmpqon0a27s.d(106):
    Error: found `End of File` when expecting `}` following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqon0a27s.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(string word; words)\n    {\n        if(countConsonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5gwzflvv.d(24): Error: undefined identifier `split`\n/tmp/tmp5gwzflvv.d(28):
    Error: undefined identifier `countConsonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp5gwzflvv.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpje5cpsb2.d(24): Error: undefined identifier `split`\n/tmp/tmpje5cpsb2.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpje5cpsb2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split();\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphbngdfxy.d(24): Error: no property `split` for type `string`\n/tmp/tmphbngdfxy.d(28):
    Error: no property `countConsonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmphbngdfxy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \"\
    );\n    string[] result = [];\n    foreach(word; words)\n    {\n        if(word.countConsonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7sdtcu9m.d(24): Error: no property `split` for type `string`\n/tmp/tmp7sdtcu9m.d(28):
    Error: no property `countConsonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp7sdtcu9m.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpje5cpsb2.d(24): Error: undefined identifier `split`\n/tmp/tmpje5cpsb2.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpje5cpsb2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s, \"\
    \ \");\n    string[] result;\n    foreach(word; words)\n    {\n        if(countConsonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8x53f40f.d(24): Error: undefined identifier `split`\n/tmp/tmp8x53f40f.d(28):
    Error: undefined identifier `countConsonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp8x53f40f.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(countConsonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvo82indz.d(24): Error: undefined identifier `split`\n/tmp/tmpvo82indz.d(28):
    Error: undefined identifier `countConsonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpvo82indz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpje5cpsb2.d(24): Error: undefined identifier `split`\n/tmp/tmpje5cpsb2.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpje5cpsb2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \"\
    );\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp815hyjbe.d(24): Error: no property `split` for type `string`\n/tmp/tmp815hyjbe.d(28):
    Error: no property `countConsonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp815hyjbe.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \"\
    );\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp815hyjbe.d(24): Error: no property `split` for type `string`\n/tmp/tmp815hyjbe.d(28):
    Error: no property `countConsonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp815hyjbe.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split;\n \
    \   string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf83uqxq5.d(24): Error: no property `split` for type `string`\n/tmp/tmpf83uqxq5.d(28):
    Error: no property `countConsonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpf83uqxq5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split();\n\
    \    string[] result;\n    foreach(string word; words)\n    {\n        if(word.countConsonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppkqz7ay9.d(24): Error: no property `split` for type `string`\n/tmp/tmppkqz7ay9.d(28):
    Error: no property `countConsonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmppkqz7ay9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(countConsonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvo82indz.d(24): Error: undefined identifier `split`\n/tmp/tmpvo82indz.d(28):
    Error: undefined identifier `countConsonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpvo82indz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \"\
    );\n    string[] result;\n    foreach(string word; words)\n    {\n        if(word.countConsonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp7q1mlm6.d(24): Error: no property `split` for type `string`\n/tmp/tmpp7q1mlm6.d(28):
    Error: no property `countConsonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpp7q1mlm6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split();\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphbngdfxy.d(24): Error: no property `split` for type `string`\n/tmp/tmphbngdfxy.d(28):
    Error: no property `countConsonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmphbngdfxy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(word.length\
    \ > 0)\n        {\n            long consonants = 0;\n            foreach(c; word)\n\
    \            {\n                if(c in ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k',\
    \ 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'])\n             \
    \   {\n                    consonants++;\n                }\n            }\n \
    \           if(consonants == n)\n            {\n                result ~= word;\n\
    \            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\"\
    , 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L)\
    \ == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L)\
    \ == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"\
    Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n  \
    \  assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph2cq2c1r.d(24): Error: undefined identifier `split`\n/tmp/tmph2cq2c1r.d(33):
    Error: incompatible types for `(c) in ([\''b\'', \''c\'', \''d\'', \''f\'', \''g\'',
    \''h\'', \''j\'', \''k\'', \''l\'', \''m\'', \''n\'', \''p\'', \''q\'', \''r\'',
    \''s\'', \''t\'', \''v\'', \''w\'', \''x\'', \''z\''])`: `immutable(char)` and
    `char[]`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph2cq2c1r.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpje5cpsb2.d(24): Error: undefined identifier `split`\n/tmp/tmpje5cpsb2.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpje5cpsb2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \"\
    );\n    string[] result = [];\n    foreach(word; words)\n    {\n        if(word.countConsonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7sdtcu9m.d(24): Error: no property `split` for type `string`\n/tmp/tmp7sdtcu9m.d(28):
    Error: no property `countConsonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp7sdtcu9m.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split;\n \
    \   string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf83uqxq5.d(24): Error: no property `split` for type `string`\n/tmp/tmpf83uqxq5.d(28):
    Error: no property `countConsonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpf83uqxq5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nlong count_consonants(string word)\n{\n    long count = 0;\n   \
    \ foreach(char c; word)\n    {\n        if(is_consonant(c))\n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\"\
    , 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L)\
    \ == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L)\
    \ == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"\
    Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n  \
    \  assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6_552rz9.d(24): Error: undefined identifier `split`\n/tmp/tmp6_552rz9.d(40):
    Error: undefined identifier `is_consonant`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp6_552rz9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(string word; words)\n    {\n        if(countConsonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5gwzflvv.d(24): Error: undefined identifier `split`\n/tmp/tmp5gwzflvv.d(28):
    Error: undefined identifier `countConsonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp5gwzflvv.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(string word; words)\n    {\n        if(countConsonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5gwzflvv.d(24): Error: undefined identifier `split`\n/tmp/tmp5gwzflvv.d(28):
    Error: undefined identifier `countConsonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp5gwzflvv.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpje5cpsb2.d(24): Error: undefined identifier `split`\n/tmp/tmpje5cpsb2.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpje5cpsb2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(string word; words)\n    {\n        if(countConsonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5gwzflvv.d(24): Error: undefined identifier `split`\n/tmp/tmp5gwzflvv.d(28):
    Error: undefined identifier `countConsonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp5gwzflvv.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split;\n \
    \   string[] result;\n    foreach(string word; words)\n    {\n        if(word.countConsonants\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_mea6pqs.d(24): Error: no property `split` for type `string`\n/tmp/tmp_mea6pqs.d(28):
    Error: no property `countConsonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp_mea6pqs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s, \"\
    \ \");\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nlong count_consonants(string s)\n{\n    long count = 0;\n    foreach(c;\
    \ s)\n    {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9k7wosh9.d(24): Error: undefined identifier `split`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9k7wosh9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split;\n \
    \   string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf83uqxq5.d(24): Error: no property `split` for type `string`\n/tmp/tmpf83uqxq5.d(28):
    Error: no property `countConsonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpf83uqxq5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpje5cpsb2.d(24): Error: undefined identifier `split`\n/tmp/tmpje5cpsb2.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpje5cpsb2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplg50luaq.d(24): Error: undefined identifier `split`\n/tmp/tmplg50luaq.d(28):
    Error: no property `countConsonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmplg50luaq.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split;\n \
    \   string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf83uqxq5.d(24): Error: no property `split` for type `string`\n/tmp/tmpf83uqxq5.d(28):
    Error: no property `countConsonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpf83uqxq5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \"\
    );\n    string[] result = new string[];\n    foreach(word; words)\n    {\n   \
    \     if(word.countConsonants() == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp95_9shq1.d(24): Error: no property `split` for type `string`\n/tmp/tmp95_9shq1.d(25):
    Error: new can only create structs, dynamic arrays or class objects, not `string[]`\''s\n/tmp/tmp95_9shq1.d(28):
    Error: no property `countConsonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp95_9shq1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpje5cpsb2.d(24): Error: undefined identifier `split`\n/tmp/tmpje5cpsb2.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpje5cpsb2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \"\
    );\n    string[] result = new string[];\n    foreach(word; words)\n    {\n   \
    \     if(word.countConsonants() == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp95_9shq1.d(24): Error: no property `split` for type `string`\n/tmp/tmp95_9shq1.d(25):
    Error: new can only create structs, dynamic arrays or class objects, not `string[]`\''s\n/tmp/tmp95_9shq1.d(28):
    Error: no property `countConsonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp95_9shq1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \"\
    );\n    string[] result = new string[];\n    foreach(word; words)\n    {\n   \
    \     if(word.countConsonants() == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp95_9shq1.d(24): Error: no property `split` for type `string`\n/tmp/tmp95_9shq1.d(25):
    Error: new can only create structs, dynamic arrays or class objects, not `string[]`\''s\n/tmp/tmp95_9shq1.d(28):
    Error: no property `countConsonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp95_9shq1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(countConsonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nlong countConsonants(string s)\n{\n    long count = 0;\n    foreach(c;\
    \ s)\n    {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt8ipgfnc.d(24): Error: undefined identifier `split`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt8ipgfnc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(string word; words)\n    {\n        if(countConsonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5gwzflvv.d(24): Error: undefined identifier `split`\n/tmp/tmp5gwzflvv.d(28):
    Error: undefined identifier `countConsonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp5gwzflvv.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpje5cpsb2.d(24): Error: undefined identifier `split`\n/tmp/tmpje5cpsb2.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpje5cpsb2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \"\
    );\n    string[] result = [];\n    foreach(word; words)\n    {\n        if(word.countConsonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7sdtcu9m.d(24): Error: no property `split` for type `string`\n/tmp/tmp7sdtcu9m.d(28):
    Error: no property `countConsonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp7sdtcu9m.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \"\
    );\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpiiyxb8iy.d(24): Error: no property `split` for type `string`\n/tmp/tmpiiyxb8iy.d(28):
    Error: no property `countConsonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpiiyxb8iy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \"\
    );\n    string[] result = [];\n    foreach(string word; words)\n    {\n      \
    \  if(word.countConsonants() == n)\n        {\n            result ~= word;\n \
    \       }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpoh8_w2u6.d(24): Error: no property `split` for type `string`\n/tmp/tmpoh8_w2u6.d(28):
    Error: no property `countConsonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpoh8_w2u6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpje5cpsb2.d(24): Error: undefined identifier `split`\n/tmp/tmpje5cpsb2.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpje5cpsb2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt7j37gla.d(24): Error: undefined identifier `split`\n/tmp/tmpt7j37gla.d(28):
    Error: no property `countConsonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpt7j37gla.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(string word; words)\n    {\n        if(countConsonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5gwzflvv.d(24): Error: undefined identifier `split`\n/tmp/tmp5gwzflvv.d(28):
    Error: undefined identifier `countConsonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp5gwzflvv.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \"\
    );\n    string[] result = [];\n    foreach(word; words)\n    {\n        if(word.countConsonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7sdtcu9m.d(24): Error: no property `split` for type `string`\n/tmp/tmp7sdtcu9m.d(28):
    Error: no property `countConsonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp7sdtcu9m.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s, \"\
    \ \");\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpswadrqjx.d(24): Error: undefined identifier `split`\n/tmp/tmpswadrqjx.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpswadrqjx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split();\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphbngdfxy.d(24): Error: no property `split` for type `string`\n/tmp/tmphbngdfxy.d(28):
    Error: no property `countConsonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmphbngdfxy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \"\
    );\n    string[] result = [];\n    foreach(word; words)\n    {\n        if(word.countConsonants\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfwqc4bgg.d(24): Error: no property `split` for type `string`\n/tmp/tmpfwqc4bgg.d(28):
    Error: no property `countConsonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpfwqc4bgg.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpje5cpsb2.d(24): Error: undefined identifier `split`\n/tmp/tmpje5cpsb2.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpje5cpsb2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s, \"\
    \ \");\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpswadrqjx.d(24): Error: undefined identifier `split`\n/tmp/tmpswadrqjx.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpswadrqjx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s, \"\
    \ \");\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpswadrqjx.d(24): Error: undefined identifier `split`\n/tmp/tmpswadrqjx.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpswadrqjx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(string word; words)\n    {\n        if(countConsonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5gwzflvv.d(24): Error: undefined identifier `split`\n/tmp/tmp5gwzflvv.d(28):
    Error: undefined identifier `countConsonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp5gwzflvv.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \"\
    );\n    string[] result = new string[];\n    foreach(word; words)\n    {\n   \
    \     if(word.count_consonants == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_35m79ni.d(24): Error: no property `split` for type `string`\n/tmp/tmp_35m79ni.d(25):
    Error: new can only create structs, dynamic arrays or class objects, not `string[]`\''s\n/tmp/tmp_35m79ni.d(28):
    Error: no property `count_consonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp_35m79ni.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split;\n \
    \   string[] result;\n    foreach(string word; words)\n    {\n        if(word.count_consonants\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpje8t7y1b.d(24): Error: no property `split` for type `string`\n/tmp/tmpje8t7y1b.d(28):
    Error: no property `count_consonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpje8t7y1b.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s, \"\
    \ \");\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpswadrqjx.d(24): Error: undefined identifier `split`\n/tmp/tmpswadrqjx.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpswadrqjx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \"\
    );\n    string[] result;\n    foreach(string word; words)\n    {\n        if(word.countConsonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp7q1mlm6.d(24): Error: no property `split` for type `string`\n/tmp/tmpp7q1mlm6.d(28):
    Error: no property `countConsonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpp7q1mlm6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpje5cpsb2.d(24): Error: undefined identifier `split`\n/tmp/tmpje5cpsb2.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpje5cpsb2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpje5cpsb2.d(24): Error: undefined identifier `split`\n/tmp/tmpje5cpsb2.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpje5cpsb2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s, \"\
    \ \");\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpswadrqjx.d(24): Error: undefined identifier `split`\n/tmp/tmpswadrqjx.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpswadrqjx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \"\
    );\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp815hyjbe.d(24): Error: no property `split` for type `string`\n/tmp/tmp815hyjbe.d(28):
    Error: no property `countConsonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp815hyjbe.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split;\n \
    \   string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf83uqxq5.d(24): Error: no property `split` for type `string`\n/tmp/tmpf83uqxq5.d(28):
    Error: no property `countConsonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpf83uqxq5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split;\n \
    \   string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf83uqxq5.d(24): Error: no property `split` for type `string`\n/tmp/tmpf83uqxq5.d(28):
    Error: no property `countConsonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpf83uqxq5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \"\
    );\n    string[] result = new string[];\n    foreach(word; words)\n    {\n   \
    \     if(word.countConsonants == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbkybdt5v.d(24): Error: no property `split` for type `string`\n/tmp/tmpbkybdt5v.d(25):
    Error: new can only create structs, dynamic arrays or class objects, not `string[]`\''s\n/tmp/tmpbkybdt5v.d(28):
    Error: no property `countConsonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpbkybdt5v.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split;\n \
    \   string[] result;\n    foreach(word; words)\n    {\n        long consonants\
    \ = 0;\n        foreach(letter; word)\n        {\n            if(letter.isLetter\
    \ && !letter.isVowel)\n            {\n                consonants++;\n        \
    \    }\n        }\n        if(consonants == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"\
    little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\"\
    , \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdtiw7b5c.d(24): Error: no property `split` for type `string`\n/tmp/tmpdtiw7b5c.d(31):
    Error: no property `isLetter` for type `immutable(char)`\n/tmp/tmpdtiw7b5c.d(31):
    Error: no property `isVowel` for type `immutable(char)`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpdtiw7b5c.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split();\n\
    \    string[] result;\n    foreach(string word; words)\n    {\n        if(word.countConsonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppkqz7ay9.d(24): Error: no property `split` for type `string`\n/tmp/tmppkqz7ay9.d(28):
    Error: no property `countConsonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmppkqz7ay9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split;\n \
    \   string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf83uqxq5.d(24): Error: no property `split` for type `string`\n/tmp/tmpf83uqxq5.d(28):
    Error: no property `countConsonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpf83uqxq5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(string word; words)\n    {\n        if(countConsonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5gwzflvv.d(24): Error: undefined identifier `split`\n/tmp/tmp5gwzflvv.d(28):
    Error: undefined identifier `countConsonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp5gwzflvv.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s, \"\
    \ \");\n    string[] result;\n    foreach(word; words)\n    {\n        if(countConsonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8x53f40f.d(24): Error: undefined identifier `split`\n/tmp/tmp8x53f40f.d(28):
    Error: undefined identifier `countConsonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp8x53f40f.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(countConsonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvo82indz.d(24): Error: undefined identifier `split`\n/tmp/tmpvo82indz.d(28):
    Error: undefined identifier `countConsonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpvo82indz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \"\
    );\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp815hyjbe.d(24): Error: no property `split` for type `string`\n/tmp/tmp815hyjbe.d(28):
    Error: no property `countConsonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp815hyjbe.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \"\
    );\n    string[] result;\n    foreach(string word; words)\n    {\n        if(word.countConsonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp7q1mlm6.d(24): Error: no property `split` for type `string`\n/tmp/tmpp7q1mlm6.d(28):
    Error: no property `countConsonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpp7q1mlm6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0y2fb4as.d(24): Error: undefined identifier `split`\n/tmp/tmp0y2fb4as.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0y2fb4as.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nlong count_consonants(string s)\n{\n    long count = 0;\n    foreach(c;\
    \ s)\n    {\n        if(is_consonant(c))\n        {\n            count++;\n  \
    \      }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps5q0327w.d(24): Error: undefined identifier `split`\n/tmp/tmps5q0327w.d(40):
    Error: undefined identifier `is_consonant`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmps5q0327w.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split(\" \"\
    );\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp815hyjbe.d(24): Error: no property `split` for type `string`\n/tmp/tmp815hyjbe.d(28):
    Error: no property `countConsonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp815hyjbe.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpje5cpsb2.d(24): Error: undefined identifier `split`\n/tmp/tmpje5cpsb2.d(28):
    Error: undefined identifier `count_consonants`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpje5cpsb2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = s.split;\n \
    \   string[] result;\n    foreach(string word; words)\n    {\n        if(word.countConsonants\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_mea6pqs.d(24): Error: no property `split` for type `string`\n/tmp/tmp_mea6pqs.d(28):
    Error: no property `countConsonants` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp_mea6pqs.d", "-I/tmp"]\n'''
  stdout: b''
