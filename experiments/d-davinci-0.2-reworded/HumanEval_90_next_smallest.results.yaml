name: HumanEval_90_next_smallest
language: d
results:
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long smallest = lst[0];\n  \
    \  long next_smallest = lst[1];\n    if (smallest > next_smallest)\n    {\n  \
    \      smallest = lst[1];\n        next_smallest = lst[0];\n    }\n    foreach\
    \ (i, e; lst[2..$])\n    {\n        if (e < smallest)\n        {\n           \
    \ next_smallest = smallest;\n            smallest = e;\n        }\n        else\
    \ if (e < next_smallest)\n        {\n            next_smallest = e;\n        }\n\
    \    }\n    return next_smallest;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjev0p0ky.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpjev0p0ky.d(41): Error: cannot\
    \ implicitly convert expression `next_smallest` of type `long` to `Nullable!long`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjev0p0ky.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length == 0)\n        return null;\n    if (lst.length == 1)\n    \
    \    return null;\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach\
    \ (i, e; lst)\n    {\n        if (e < min)\n        {\n            min2 = min;\n\
    \            min = e;\n        }\n        else if (e < min2)\n        {\n    \
    \        min2 = e;\n        }\n    }\n    if (min == min2)\n        return null;\n\
    \    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n\
    \        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp85685894.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmp85685894.d(23): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmp85685894.d(39): Error: cannot implicitly convert expression `null` of\
    \ type `typeof(null)` to `Nullable!long`\\n/tmp/tmp85685894.d(40): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp85685894.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min2 < min)\n    {\n        min = min2;\n        min2\
    \ = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e < min)\n\
    \        {\n            min2 = min;\n            min = e;\n        }\n       \
    \ else if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n   \
    \ return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n  \
    \      auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy8ypr693.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpy8ypr693.d(41): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy8ypr693.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ second = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n   \
    \     {\n            second = min;\n            min = e;\n        }\n        else\
    \ if (e < second)\n        {\n            second = e;\n        }\n    }\n    if\
    \ (min == second)\n        return null;\n    return second;\n}\nunittest\n{\n\
    \    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpojetcto9.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpojetcto9.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmpojetcto9.d(38): Error: cannot implicitly convert expression `second`\
    \ of type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpojetcto9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3pxn6eya.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmp3pxn6eya.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmp3pxn6eya.d(38): Error: cannot implicitly convert expression `min2` of\
    \ type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp3pxn6eya.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ second = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n   \
    \     {\n            second = min;\n            min = e;\n        }\n        else\
    \ if (e < second)\n        {\n            second = e;\n        }\n    }\n    if\
    \ (min == second)\n        return null;\n    return second;\n}\nunittest\n{\n\
    \    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp4apg9yb.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpp4apg9yb.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmpp4apg9yb.d(38): Error: cannot implicitly convert expression `second`\
    \ of type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpp4apg9yb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsvgd8fg2.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpsvgd8fg2.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmpsvgd8fg2.d(38): Error: cannot implicitly convert expression `min2` of\
    \ type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpsvgd8fg2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    long min = lst[0];\n\
    \    long next_min = lst[1];\n    foreach (i, e; lst) \n    {\n        if (e <\
    \ min) \n        {\n            next_min = min;\n            min = e;\n      \
    \  } \n        else if (e < next_min) \n        {\n            next_min = e;\n\
    \        }\n    }\n    return next_min;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb5ahhzr8.d(40): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb5ahhzr8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    return\
    \ min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto\
    \ result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull &&\
    \ result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L,\
    \ 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n       \
    \ auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n     \
    \   auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6xhr23w3.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmp6xhr23w3.d(36): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6xhr23w3.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    return\
    \ min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto\
    \ result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull &&\
    \ result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L,\
    \ 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n       \
    \ auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n     \
    \   auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt7_0me41.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpt7_0me41.d(36): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt7_0me41.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) return null;\n    long min = lst[0];\n    long min2 = lst[1];\n\
    \    foreach (i, e; lst) \n    {\n        if (e < min) \n        {\n         \
    \   min2 = min;\n            min = e;\n        }\n        else if (e < min2) \n\
    \        {\n            min2 = e;\n        }\n    }\n    return min2;\n}\nunittest\n\
    {\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvhayd4r5.d(20): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpvhayd4r5.d(35): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvhayd4r5.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) return null;\n    long min = lst[0];\n    long min2 = lst[1];\n\
    \    foreach (i, e; lst) \n    {\n        if (e < min) \n        {\n         \
    \   min2 = min;\n            min = e;\n        }\n        else if (e < min2) \n\
    \        {\n            min2 = e;\n        }\n    }\n    return min2;\n}\nunittest\n\
    {\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbin1utai.d(20): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpbin1utai.d(35): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbin1utai.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    long min = lst[0];\n\
    \    long min2 = lst[1];\n    foreach (i; lst) \n    {\n        if (i < min) \n\
    \        {\n            min2 = min;\n            min = i;\n        } \n      \
    \  else if (i < min2) \n        {\n            min2 = i;\n        }\n    }\n \
    \   return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n\
    \        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc2n4vvuj.d(22): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpc2n4vvuj.d(38): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc2n4vvuj.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    auto min = minElement(lst);\n\
    \    auto min2 = minElement(lst[1 .. $]);\n    if (min == min2) \n    {\n    \
    \    return null;\n    }\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzqyaj_46.d(24): Error: undefined identifier `minElement`\\n/tmp/tmpzqyaj_46.d(25):\
    \ Error: undefined identifier `minElement`\\n/tmp/tmpzqyaj_46.d(22): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmpzqyaj_46.d(28): Error: cannot implicitly convert expression `null` of\
    \ type `typeof(null)` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpzqyaj_46.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyn749h2p.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpyn749h2p.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmpyn749h2p.d(38): Error: cannot implicitly convert expression `min2` of\
    \ type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpyn749h2p.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    long min = lst[0];\n\
    \    long second_min = lst[1];\n    if (min > second_min) \n    {\n        swap(min,\
    \ second_min);\n    }\n    foreach (i, e; lst[2..$]) \n    {\n        if (e <\
    \ min) \n        {\n            second_min = min;\n            min = e;\n    \
    \    } \n        else if (e < second_min) \n        {\n            second_min\
    \ = e;\n        }\n    }\n    return second_min;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj1pgmw2r.d(28): Error: undefined identifier `swap`, did you mean\
    \ template `wrap(Targets...) if (Targets.length >= 1 && allSatisfy!(isMutable,\
    \ Targets))`?\\n/tmp/tmpj1pgmw2r.d(22): Error: cannot implicitly convert expression\
    \ `null` of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpj1pgmw2r.d(42): Error:\
    \ cannot implicitly convert expression `second_min` of type `long` to `Nullable!long`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj1pgmw2r.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, v; lst)\n    {\n        if (v < min)\n     \
    \   {\n            min2 = min;\n            min = v;\n        }\n        else\
    \ if (v < min2)\n        {\n            min2 = v;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppw5y4i4y.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmppw5y4i4y.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmppw5y4i4y.d(38): Error: cannot implicitly convert expression `min2` of\
    \ type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmppw5y4i4y.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    long min = lst[0];\n\
    \    long min2 = lst[1];\n    if (min > min2) \n    {\n        min = min2;\n \
    \       min2 = lst[0];\n    }\n    foreach (i, e; lst[2..$]) \n    {\n       \
    \ if (e < min) \n        {\n            min2 = min;\n            min = e;\n  \
    \      }\n        else if (e < min2) \n        {\n            min2 = e;\n    \
    \    }\n    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4339tr9k.d(22): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmp4339tr9k.d(43): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4339tr9k.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min2 < min)\n    {\n        min = min2;\n        min2\
    \ = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e < min)\n\
    \        {\n            min2 = min;\n            min = e;\n        }\n       \
    \ else if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n   \
    \ return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n  \
    \      auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4uhjeyz3.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmp4uhjeyz3.d(41): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4uhjeyz3.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3achno8u.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmp3achno8u.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmp3achno8u.d(38): Error: cannot implicitly convert expression `min2` of\
    \ type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp3achno8u.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min\
    \ == min2)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias\
    \ candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L,\
    \ 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6j76xaqk.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmp6j76xaqk.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmp6j76xaqk.d(38): Error: cannot implicitly convert expression `min2` of\
    \ type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp6j76xaqk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ second_min = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n\
    \        {\n            second_min = min;\n            min = e;\n        }\n \
    \       else if (e < second_min)\n        {\n            second_min = e;\n   \
    \     }\n    }\n    if (min == second_min)\n        return null;\n    return second_min;\n\
    }\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result\
    \ = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc1bjkdwv.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpc1bjkdwv.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmpc1bjkdwv.d(38): Error: cannot implicitly convert expression `second_min`\
    \ of type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpc1bjkdwv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzsdrecxf.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpzsdrecxf.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmpzsdrecxf.d(38): Error: cannot implicitly convert expression `min2` of\
    \ type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpzsdrecxf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    long min = lst[0];\n\
    \    long second_min = lst[1];\n    foreach (i; lst) \n    {\n        if (i <\
    \ min) \n        {\n            second_min = min;\n            min = i;\n    \
    \    } \n        else if (i < second_min) \n        {\n            second_min\
    \ = i;\n        }\n    }\n    if (min == second_min) \n    {\n        return null;\n\
    \    }\n    return second_min;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpph05iwaw.d(22): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpph05iwaw.d(40): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmpph05iwaw.d(42): Error: cannot implicitly convert expression `second_min`\
    \ of type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpph05iwaw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) return null;\n    long min1 = lst[0];\n    long min2 =\
    \ lst[1];\n    if (min1 > min2) swap(min1, min2);\n    foreach (i, e; lst[2..$])\
    \ \n    {\n        if (e < min1) \n        {\n            min2 = min1;\n     \
    \       min1 = e;\n        }\n        else if (e < min2) \n        {\n       \
    \     min2 = e;\n        }\n    }\n    return min2;\n}\nunittest\n{\n    alias\
    \ candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L,\
    \ 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptx43anbc.d(23): Error: undefined identifier `swap`, did you mean\
    \ template `wrap(Targets...) if (Targets.length >= 1 && allSatisfy!(isMutable,\
    \ Targets))`?\\n/tmp/tmptx43anbc.d(20): Error: cannot implicitly convert expression\
    \ `null` of type `typeof(null)` to `Nullable!long`\\n/tmp/tmptx43anbc.d(36): Error:\
    \ cannot implicitly convert expression `min2` of type `long` to `Nullable!long`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptx43anbc.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa0oruqbk.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpa0oruqbk.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmpa0oruqbk.d(38): Error: cannot implicitly convert expression `min2` of\
    \ type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpa0oruqbk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  long min = lst[0];\n    long min2 = lst[0];\n    foreach(i; lst)\n    {\n \
    \       if(i < min)\n        {\n            min2 = min;\n            min = i;\n\
    \        }\n        else if(i < min2)\n        {\n            min2 = i;\n    \
    \    }\n    }\n    if(min2 == min)\n    {\n        return null;\n    }\n    return\
    \ min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto\
    \ result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull &&\
    \ result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L,\
    \ 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n       \
    \ auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n     \
    \   auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuue5jjsg.d(36): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpuue5jjsg.d(38): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuue5jjsg.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ next_min = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n \
    \       {\n            next_min = min;\n            min = e;\n        }\n    \
    \    else if (e < next_min)\n        {\n            next_min = e;\n        }\n\
    \    }\n    return next_min;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0vd2ymoe.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmp0vd2ymoe.d(36): Error: cannot\
    \ implicitly convert expression `next_min` of type `long` to `Nullable!long`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0vd2ymoe.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    return\
    \ min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto\
    \ result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull &&\
    \ result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L,\
    \ 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n       \
    \ auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n     \
    \   auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmkprz912.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpmkprz912.d(36): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmkprz912.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    return\
    \ min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto\
    \ result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull &&\
    \ result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L,\
    \ 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n       \
    \ auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n     \
    \   auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6zx7ulq1.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmp6zx7ulq1.d(36): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6zx7ulq1.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpczwutrh6.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpczwutrh6.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmpczwutrh6.d(38): Error: cannot implicitly convert expression `min2` of\
    \ type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpczwutrh6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) return null;\n    long min = lst[0];\n    long min2 = lst[1];\n\
    \    foreach (i, e; lst) \n    {\n        if (e < min) \n        {\n         \
    \   min2 = min;\n            min = e;\n        } \n        else if (e < min2)\
    \ \n        {\n            min2 = e;\n        }\n    }\n    return min2;\n}\n\
    unittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result =\
    \ candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl538bd3j.d(20): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpl538bd3j.d(35): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl538bd3j.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst) \n    {\n        if (e < min) \n   \
    \     {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2) \n        {\n            min2 = e;\n        }\n    }\n    return\
    \ min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto\
    \ result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull &&\
    \ result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L,\
    \ 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n       \
    \ auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n     \
    \   auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkh_ynv4y.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpkh_ynv4y.d(36): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkh_ynv4y.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ second = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n   \
    \     {\n            second = min;\n            min = e;\n        }\n        else\
    \ if (e < second)\n        {\n            second = e;\n        }\n    }\n    if\
    \ (min == second)\n        return null;\n    return second;\n}\nunittest\n{\n\
    \    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcduz9o3j.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpcduz9o3j.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmpcduz9o3j.d(38): Error: cannot implicitly convert expression `second`\
    \ of type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpcduz9o3j.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph1eh1p81.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmph1eh1p81.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmph1eh1p81.d(38): Error: cannot implicitly convert expression `min2` of\
    \ type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmph1eh1p81.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7ih1mgil.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmp7ih1mgil.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmp7ih1mgil.d(38): Error: cannot implicitly convert expression `min2` of\
    \ type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp7ih1mgil.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ second_min = lst[1];\n    foreach (i, e; lst) \n    {\n        if (e < min)\
    \ \n        {\n            second_min = min;\n            min = e;\n        }\n\
    \        else if (e < second_min) \n        {\n            second_min = e;\n \
    \       }\n    }\n    if (min == second_min)\n        return null;\n    return\
    \ second_min;\n}\n/*\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n\
    \        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjdi4crg5.d(40): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjdi4crg5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long smallest = lst[0];\n  \
    \  long next_smallest = lst[1];\n    foreach (i, v; lst)\n    {\n        if (v\
    \ < smallest)\n        {\n            next_smallest = smallest;\n            smallest\
    \ = v;\n        }\n        else if (v < next_smallest)\n        {\n          \
    \  next_smallest = v;\n        }\n    }\n    if (smallest == next_smallest)\n\
    \        return null;\n    return next_smallest;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyetjgi1e.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpyetjgi1e.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmpyetjgi1e.d(38): Error: cannot implicitly convert expression `next_smallest`\
    \ of type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpyetjgi1e.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, v; lst)\n    {\n        if (v < min)\n     \
    \   {\n            min2 = min;\n            min = v;\n        }\n        else\
    \ if (v < min2)\n        {\n            min2 = v;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5fc65fq5.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmp5fc65fq5.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmp5fc65fq5.d(38): Error: cannot implicitly convert expression `min2` of\
    \ type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp5fc65fq5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    return\
    \ min2;\n}\n/*\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n     \
    \   auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwu551q7w.d(38): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwu551q7w.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ secondMin = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n\
    \        {\n            secondMin = min;\n            min = e;\n        }\n  \
    \      else if (e < secondMin)\n        {\n            secondMin = e;\n      \
    \  }\n    }\n    if (min == secondMin)\n        return null;\n    return secondMin;\n\
    }\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result\
    \ = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsly4tedp.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpsly4tedp.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmpsly4tedp.d(38): Error: cannot implicitly convert expression `secondMin`\
    \ of type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpsly4tedp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    long min = lst[0];\n\
    \    long second_min = lst[1];\n    foreach (i; lst) \n    {\n        if (i <\
    \ min) \n        {\n            second_min = min;\n            min = i;\n    \
    \    } \n        else if (i < second_min) \n        {\n            second_min\
    \ = i;\n        }\n    }\n    if (min == second_min) \n    {\n        return null;\n\
    \    }\n    return second_min;\n}\n/*\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4u6v4kup.d(44): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4u6v4kup.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst) \n    {\n        if (e < min) \n   \
    \     {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2) \n        {\n            min2 = e;\n        }\n    }\n    return\
    \ min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto\
    \ result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull &&\
    \ result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L,\
    \ 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n       \
    \ auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n     \
    \   auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi21y2ir2.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpi21y2ir2.d(36): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi21y2ir2.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    return\
    \ min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto\
    \ result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull &&\
    \ result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L,\
    \ 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n       \
    \ auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n     \
    \   auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi_lfxqem.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpi_lfxqem.d(36): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi_lfxqem.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    long min = lst[0];\n\
    \    long min2 = lst[1];\n    foreach (i; lst) \n    {\n        if (i < min) \n\
    \        {\n            min2 = min;\n            min = i;\n        } \n      \
    \  else if (i < min2) \n        {\n            min2 = i;\n        }\n    }\n \
    \   return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n\
    \        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphavd05ko.d(22): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmphavd05ko.d(38): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphavd05ko.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ next_min = lst[1];\n    foreach (i, e; lst) \n    {\n        if (e < min) \n\
    \        {\n            next_min = min;\n            min = e;\n        } \n  \
    \      else if (e < next_min) \n        {\n            next_min = e;\n       \
    \ }\n    }\n    return next_min;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfmqejw9s.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpfmqejw9s.d(36): Error: cannot\
    \ implicitly convert expression `next_min` of type `long` to `Nullable!long`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfmqejw9s.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) return null;\n    long min = lst[0];\n    long second_min\
    \ = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n        {\n\
    \            second_min = min;\n            min = e;\n        }\n        else\
    \ if (e < second_min)\n        {\n            second_min = e;\n        }\n   \
    \ }\n    if (min == second_min) return null;\n    return second_min;\n}\nunittest\n\
    {\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbbn36_y5.d(20): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpbbn36_y5.d(35): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmpbbn36_y5.d(36): Error: cannot implicitly convert expression `second_min`\
    \ of type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpbbn36_y5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    return\
    \ min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto\
    \ result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull &&\
    \ result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L,\
    \ 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n       \
    \ auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n     \
    \   auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpta31m7en.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpta31m7en.d(36): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpta31m7en.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) return null;\n    long min = lst[0];\n    long min2 = lst[1];\n\
    \    foreach (i, e; lst) \n    {\n        if (e < min) \n        {\n         \
    \   min2 = min;\n            min = e;\n        }\n        else if (e < min2) \n\
    \        {\n            min2 = e;\n        }\n    }\n    return min2;\n}\nunittest\n\
    {\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpteh9w6x5.d(20): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpteh9w6x5.d(35): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpteh9w6x5.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, v; lst)\n    {\n        if (v < min)\n     \
    \   {\n            min2 = min;\n            min = v;\n        }\n        else\
    \ if (v < min2)\n        {\n            min2 = v;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp45jh1z7k.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmp45jh1z7k.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmp45jh1z7k.d(38): Error: cannot implicitly convert expression `min2` of\
    \ type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp45jh1z7k.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long smallest = lst[0];\n  \
    \  long second_smallest = lst[1];\n    if (smallest > second_smallest)\n    {\n\
    \        smallest = lst[1];\n        second_smallest = lst[0];\n    }\n    foreach\
    \ (i, e; lst[2..$])\n    {\n        if (e < smallest)\n        {\n           \
    \ second_smallest = smallest;\n            smallest = e;\n        }\n        else\
    \ if (e < second_smallest)\n        {\n            second_smallest = e;\n    \
    \    }\n    }\n    return second_smallest;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr0hb01z0.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpr0hb01z0.d(41): Error: cannot\
    \ implicitly convert expression `second_smallest` of type `long` to `Nullable!long`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr0hb01z0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ second = lst[1];\n    if (min > second)\n    {\n        min = second;\n    \
    \    second = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if\
    \ (e < min)\n        {\n            second = min;\n            min = e;\n    \
    \    }\n        else if (e < second)\n        {\n            second = e;\n   \
    \     }\n    }\n    return second;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphijdmdqd.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmphijdmdqd.d(41): Error: cannot\
    \ implicitly convert expression `second` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphijdmdqd.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, v; lst)\n    {\n        if (v < min)\n     \
    \   {\n            min2 = min;\n            min = v;\n        }\n        else\
    \ if (v < min2)\n        {\n            min2 = v;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx61hauw0.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpx61hauw0.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmpx61hauw0.d(38): Error: cannot implicitly convert expression `min2` of\
    \ type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpx61hauw0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    long smallest\
    \ = lst[0];\n    long second_smallest = lst[1];\n    foreach (i, e; lst) \n  \
    \  {\n        if (e < smallest) \n        {\n            second_smallest = smallest;\n\
    \            smallest = e;\n        }\n        else if (e < second_smallest) \n\
    \        {\n            second_smallest = e;\n        }\n    }\n    if (smallest\
    \ == second_smallest) \n    {\n        return null;\n    }\n    return second_smallest;\n\
    }\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result\
    \ = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp49db44nn.d(22): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmp49db44nn.d(40): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmp49db44nn.d(42): Error: cannot implicitly convert expression `second_smallest`\
    \ of type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp49db44nn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    long min = lst[0];\n\
    \    long min2 = lst[1];\n    foreach (i; lst) \n    {\n        if (i < min) \n\
    \        {\n            min2 = min;\n            min = i;\n        } \n      \
    \  else if (i < min2) \n        {\n            min2 = i;\n        }\n    }\n \
    \   return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n\
    \        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgitg3bw1.d(22): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpgitg3bw1.d(38): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgitg3bw1.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = minElement(lst);\n\
    \    long min2 = min;\n    foreach (i; lst)\n    {\n        if (i < min2 && i\
    \ != min)\n            min2 = i;\n    }\n    if (min2 == min)\n        return\
    \ null;\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8q81d6nq.d(22): Error: undefined identifier `minElement`\\n/tmp/tmp8q81d6nq.d(21):\
    \ Error: cannot implicitly convert expression `null` of type `typeof(null)` to\
    \ `Nullable!long`\\n/tmp/tmp8q81d6nq.d(30): Error: cannot implicitly convert expression\
    \ `null` of type `typeof(null)` to `Nullable!long`\\n/tmp/tmp8q81d6nq.d(31): Error:\
    \ cannot implicitly convert expression `min2` of type `long` to `Nullable!long`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8q81d6nq.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) return null;\n    long min = lst[0];\n    long min2 = lst[1];\n\
    \    foreach (i, e; lst) \n    {\n        if (e < min) \n        {\n         \
    \   min2 = min;\n            min = e;\n        }\n        else if (e < min2) \n\
    \        {\n            min2 = e;\n        }\n    }\n    return min2;\n}\nunittest\n\
    {\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv5j7h8my.d(20): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpv5j7h8my.d(35): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv5j7h8my.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    long min = lst[0];\n\
    \    long second_min = lst[1];\n    foreach (i; lst) \n    {\n        if (i <\
    \ min) \n        {\n            second_min = min;\n            min = i;\n    \
    \    }\n        else if (i < second_min) \n        {\n            second_min =\
    \ i;\n        }\n    }\n    if (min == second_min) \n    {\n        return null;\n\
    \    }\n    return second_min;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzxbytafn.d(22): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpzxbytafn.d(40): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmpzxbytafn.d(42): Error: cannot implicitly convert expression `second_min`\
    \ of type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpzxbytafn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ second_min = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n\
    \        {\n            second_min = min;\n            min = e;\n        }\n \
    \       else if (e < second_min)\n        {\n            second_min = e;\n   \
    \     }\n    }\n    if (min == second_min)\n        return null;\n    return second_min;\n\
    }\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result\
    \ = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0nsrjt_w.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmp0nsrjt_w.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmp0nsrjt_w.d(38): Error: cannot implicitly convert expression `second_min`\
    \ of type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp0nsrjt_w.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    long min = lst[0];\n\
    \    long min2 = lst[1];\n    foreach (i; lst) \n    {\n        if (i < min) \n\
    \        {\n            min2 = min;\n            min = i;\n        } \n      \
    \  else if (i < min2) \n        {\n            min2 = i;\n        }\n    }\n \
    \   return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n\
    \        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn42zz2os.d(22): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpn42zz2os.d(38): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn42zz2os.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst) \n    {\n        if (e < min) \n   \
    \     {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2) \n        {\n            min2 = e;\n        }\n    }\n    return\
    \ min2;\n}\n/*\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n     \
    \   auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpupn1n44y.d(38): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpupn1n44y.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqmudzm21.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpqmudzm21.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmpqmudzm21.d(38): Error: cannot implicitly convert expression `min2` of\
    \ type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpqmudzm21.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    return\
    \ min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto\
    \ result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull &&\
    \ result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L,\
    \ 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n       \
    \ auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n     \
    \   auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvrspcure.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpvrspcure.d(36): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvrspcure.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    return\
    \ min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto\
    \ result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull &&\
    \ result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L,\
    \ 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n       \
    \ auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n     \
    \   auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaa6qi8ve.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpaa6qi8ve.d(36): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaa6qi8ve.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min > min2)\n    {\n        min = min2;\n        min2\
    \ = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e < min)\n\
    \        {\n            min2 = min;\n            min = e;\n        }\n       \
    \ else if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n   \
    \ return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n  \
    \      auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv28u9_t_.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpv28u9_t_.d(41): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv28u9_t_.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ second_min = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n\
    \        {\n            second_min = min;\n            min = e;\n        }\n \
    \       else if (e < second_min)\n        {\n            second_min = e;\n   \
    \     }\n    }\n    if (min == second_min)\n        return null;\n    return second_min;\n\
    }\n/*\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result\
    \ = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu03816n5.d(40): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu03816n5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min1 = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min1 > min2)\n    {\n        min1 = lst[1];\n      \
    \  min2 = lst[0];\n    }\n    foreach (i, x; lst[2..$])\n    {\n        if (x\
    \ < min1)\n        {\n            min2 = min1;\n            min1 = x;\n      \
    \  }\n        else if (x < min2)\n        {\n            min2 = x;\n        }\n\
    \    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7rah4qpq.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmp7rah4qpq.d(41): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7rah4qpq.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min1 = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min1 > min2)\n    {\n        min1 = lst[1];\n      \
    \  min2 = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e\
    \ < min1)\n        {\n            min2 = min1;\n            min1 = e;\n      \
    \  }\n        else if (e < min2)\n        {\n            min2 = e;\n        }\n\
    \    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd9xdq5gr.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpd9xdq5gr.d(41): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd9xdq5gr.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst) \n    {\n        if (e < min) \n   \
    \     {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2) \n        {\n            min2 = e;\n        }\n    }\n    return\
    \ min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto\
    \ result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull &&\
    \ result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L,\
    \ 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n       \
    \ auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n     \
    \   auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpka5p32rt.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpka5p32rt.d(36): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpka5p32rt.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ second = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n   \
    \     {\n            second = min;\n            min = e;\n        }\n        else\
    \ if (e < second)\n        {\n            second = e;\n        }\n    }\n    if\
    \ (min == second)\n        return null;\n    return second;\n}\nunittest\n{\n\
    \    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpaoq7xi_5.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpaoq7xi_5.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmpaoq7xi_5.d(38): Error: cannot implicitly convert expression `second`\
    \ of type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpaoq7xi_5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min\
    \ == min2)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias\
    \ candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L,\
    \ 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph312x4uu.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmph312x4uu.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmph312x4uu.d(38): Error: cannot implicitly convert expression `min2` of\
    \ type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmph312x4uu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    return\
    \ min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto\
    \ result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull &&\
    \ result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L,\
    \ 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n       \
    \ auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n     \
    \   auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw231xj_1.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpw231xj_1.d(36): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw231xj_1.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) return null;\n    long min = lst[0];\n    long min2 = lst[1];\n\
    \    foreach (i, e; lst) \n    {\n        if (e < min) \n        {\n         \
    \   min2 = min;\n            min = e;\n        }\n        else if (e < min2) \n\
    \        {\n            min2 = e;\n        }\n    }\n    return min2;\n}\nunittest\n\
    {\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnllh02x1.d(20): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpnllh02x1.d(35): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnllh02x1.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min1 = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min1 > min2)\n    {\n        min1 = lst[1];\n      \
    \  min2 = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e\
    \ < min1)\n        {\n            min2 = min1;\n            min1 = e;\n      \
    \  }\n        else if (e < min2)\n        {\n            min2 = e;\n        }\n\
    \    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp97eyz9yb.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmp97eyz9yb.d(41): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp97eyz9yb.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    long min = lst[0];\n\
    \    long next_min = lst[1];\n    foreach (i, e; lst) \n    {\n        if (e <\
    \ min) \n        {\n            next_min = min;\n            min = e;\n      \
    \  } \n        else if (e < next_min) \n        {\n            next_min = e;\n\
    \        }\n    }\n    return next_min;\n}\nunittest\n{\n    alias candidate =\
    \ next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpobie0ly0.d(22): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpobie0ly0.d(38): Error: cannot\
    \ implicitly convert expression `next_min` of type `long` to `Nullable!long`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpobie0ly0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    long min = lst[0];\n\
    \    long min2 = lst[1];\n    if (min2 < min) \n    {\n        min = min2;\n \
    \       min2 = lst[0];\n    }\n    foreach (i, e; lst[2..$]) \n    {\n       \
    \ if (e < min) \n        {\n            min2 = min;\n            min = e;\n  \
    \      } \n        else if (e < min2) \n        {\n            min2 = e;\n   \
    \     }\n    }\n    return min2;\n}\n/*\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb0bg7f23.d(45): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb0bg7f23.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) return null;\n    long min = lst[0];\n    long min2 = lst[1];\n\
    \    foreach (i, e; lst)\n    {\n        if (e < min)\n        {\n           \
    \ min2 = min;\n            min = e;\n        }\n        else if (e < min2)\n \
    \       {\n            min2 = e;\n        }\n    }\n    return min2;\n}\nunittest\n\
    {\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx81kjmyn.d(20): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpx81kjmyn.d(35): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx81kjmyn.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) return null;\n    long min = lst[0];\n    long min2 = lst[1];\n\
    \    foreach (i, e; lst) \n    {\n        if (e < min) \n        {\n         \
    \   min2 = min;\n            min = e;\n        }\n        else if (e < min2) \n\
    \        {\n            min2 = e;\n        }\n    }\n    return min2;\n}\nunittest\n\
    {\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph_fnpgaj.d(20): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmph_fnpgaj.d(35): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph_fnpgaj.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    return\
    \ min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto\
    \ result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull &&\
    \ result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L,\
    \ 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n       \
    \ auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n     \
    \   auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp559nyumq.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmp559nyumq.d(36): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp559nyumq.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min1 = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min1 > min2)\n    {\n        min1 = lst[1];\n      \
    \  min2 = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e\
    \ < min1)\n        {\n            min2 = min1;\n            min1 = e;\n      \
    \  }\n        else if (e < min2)\n        {\n            min2 = e;\n        }\n\
    \    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7kqxvph_.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmp7kqxvph_.d(41): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7kqxvph_.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ second = long.max;\n    foreach (i; lst)\n    {\n        if (i < min)\n    \
    \    {\n            second = min;\n            min = i;\n        }\n        else\
    \ if (i < second)\n        {\n            second = i;\n        }\n    }\n    if\
    \ (second == long.max)\n        return null;\n    return second;\n}\nunittest\n\
    {\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpci1i_cmz.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpci1i_cmz.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmpci1i_cmz.d(38): Error: cannot implicitly convert expression `second`\
    \ of type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpci1i_cmz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long smallest = lst[0];\n  \
    \  long second_smallest = lst[1];\n    foreach (i, e; lst)\n    {\n        if\
    \ (e < smallest)\n        {\n            second_smallest = smallest;\n       \
    \     smallest = e;\n        }\n        else if (e < second_smallest)\n      \
    \  {\n            second_smallest = e;\n        }\n    }\n    if (smallest ==\
    \ second_smallest)\n        return null;\n    return second_smallest;\n}\nunittest\n\
    {\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph28iqo_g.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmph28iqo_g.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmph28iqo_g.d(38): Error: cannot implicitly convert expression `second_smallest`\
    \ of type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmph28iqo_g.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    return\
    \ min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto\
    \ result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull &&\
    \ result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L,\
    \ 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n       \
    \ auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n     \
    \   auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnrgfnaz8.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpnrgfnaz8.d(36): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnrgfnaz8.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min1 = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min1 > min2)\n    {\n        min1 = lst[1];\n      \
    \  min2 = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e\
    \ < min1)\n        {\n            min2 = min1;\n            min1 = e;\n      \
    \  }\n        else if (e < min2)\n        {\n            min2 = e;\n        }\n\
    \    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp56q64t49.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmp56q64t49.d(41): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp56q64t49.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    long min1 = lst[0];\n\
    \    long min2 = lst[1];\n    if (min1 > min2) \n    {\n        min1 = lst[1];\n\
    \        min2 = lst[0];\n    }\n    foreach (i, elem; lst[2..$]) \n    {\n   \
    \     if (elem < min1) \n        {\n            min2 = min1;\n            min1\
    \ = elem;\n        } \n        else if (elem < min2) \n        {\n           \
    \ min2 = elem;\n        }\n    }\n    return min2;\n}\nunittest\n{\n    alias\
    \ candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L,\
    \ 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn6k04cho.d(22): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpn6k04cho.d(43): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn6k04cho.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    else \n    {\n\
    \        long min = lst[0];\n        long min2 = lst[1];\n        if (min > min2)\
    \ \n        {\n            min = min2;\n            min2 = lst[0];\n        }\n\
    \        foreach (i, e; lst[2..$]) \n        {\n            if (e < min) \n  \
    \          {\n                min2 = min;\n                min = e;\n        \
    \    }\n            else if (e < min2) \n            {\n                min2 =\
    \ e;\n            }\n        }\n        return min2;\n    }\n}\n/*\nunittest\n\
    {\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7wj3e2i6.d(48): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7wj3e2i6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ second_min = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n\
    \        {\n            second_min = min;\n            min = e;\n        }\n \
    \       else if (e < second_min)\n        {\n            second_min = e;\n   \
    \     }\n    }\n    if (min == second_min)\n        return null;\n    return second_min;\n\
    }\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result\
    \ = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppcm0ax9f.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmppcm0ax9f.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmppcm0ax9f.d(38): Error: cannot implicitly convert expression `second_min`\
    \ of type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmppcm0ax9f.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    long min = lst[0];\n\
    \    long min2 = lst[1];\n    foreach (i; lst) \n    {\n        if (i < min) \n\
    \        {\n            min2 = min;\n            min = i;\n        }\n       \
    \ else if (i < min2) \n        {\n            min2 = i;\n        }\n    }\n  \
    \  return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n \
    \       auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3tlzgnth.d(22): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmp3tlzgnth.d(38): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3tlzgnth.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) return null;\n    auto min = lst[0];\n    auto min2 = lst[1];\n\
    \    foreach (i, e; lst)\n    {\n        if (e < min)\n        {\n           \
    \ min2 = min;\n            min = e;\n        }\n        else if (e < min2)\n \
    \       {\n            min2 = e;\n        }\n    }\n    return min2;\n}\n/*\n\
    unittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result =\
    \ candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdmitbjpk.d(37): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdmitbjpk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min1 = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min1 > min2)\n    {\n        min1 = lst[1];\n      \
    \  min2 = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e\
    \ < min1)\n        {\n            min2 = min1;\n            min1 = e;\n      \
    \  }\n        else if (e < min2)\n        {\n            min2 = e;\n        }\n\
    \    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbn3nzegz.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpbn3nzegz.d(41): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbn3nzegz.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpck7pgyo_.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpck7pgyo_.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmpck7pgyo_.d(38): Error: cannot implicitly convert expression `min2` of\
    \ type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpck7pgyo_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ next_min = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n \
    \       {\n            next_min = min;\n            min = e;\n        }\n    \
    \    else if (e < next_min)\n        {\n            next_min = e;\n        }\n\
    \    }\n    return next_min;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvs1hy6w4.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpvs1hy6w4.d(36): Error: cannot\
    \ implicitly convert expression `next_min` of type `long` to `Nullable!long`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvs1hy6w4.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long smallest = lst[0];\n  \
    \  long next_smallest = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e\
    \ < smallest)\n        {\n            next_smallest = smallest;\n            smallest\
    \ = e;\n        }\n        else if (e < next_smallest)\n        {\n          \
    \  next_smallest = e;\n        }\n    }\n    if (smallest == next_smallest)\n\
    \        return null;\n    return next_smallest;\n}\n/*\nunittest\n{\n    alias\
    \ candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L,\
    \ 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9wx3afao.d(40): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9wx3afao.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min\
    \ == min2)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias\
    \ candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L,\
    \ 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphw1j54jf.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmphw1j54jf.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmphw1j54jf.d(38): Error: cannot implicitly convert expression `min2` of\
    \ type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmphw1j54jf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ second_min = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n\
    \        {\n            second_min = min;\n            min = e;\n        }\n \
    \       else if (e < second_min)\n        {\n            second_min = e;\n   \
    \     }\n    }\n    if (min == second_min)\n        return null;\n    return second_min;\n\
    }\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result\
    \ = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1wn275n0.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmp1wn275n0.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmp1wn275n0.d(38): Error: cannot implicitly convert expression `second_min`\
    \ of type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp1wn275n0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min\
    \ == min2)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias\
    \ candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L,\
    \ 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqhfpuwau.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpqhfpuwau.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmpqhfpuwau.d(38): Error: cannot implicitly convert expression `min2` of\
    \ type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpqhfpuwau.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    \n    long smallest = lst[0];\n\
    \    long second_smallest = lst[1];\n    \n    if (smallest > second_smallest)\n\
    \    {\n        smallest = lst[1];\n        second_smallest = lst[0];\n    }\n\
    \    \n    foreach (i, e; lst[2..$])\n    {\n        if (e < smallest)\n     \
    \   {\n            second_smallest = smallest;\n            smallest = e;\n  \
    \      }\n        else if (e < second_smallest)\n        {\n            second_smallest\
    \ = e;\n        }\n    }\n    \n    return second_smallest;\n}\nunittest\n{\n\
    \    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbwzq3klt.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpbwzq3klt.d(45): Error: cannot\
    \ implicitly convert expression `second_smallest` of type `long` to `Nullable!long`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbwzq3klt.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long smallest = lst[0];\n  \
    \  long next_smallest = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e\
    \ < smallest)\n        {\n            next_smallest = smallest;\n            smallest\
    \ = e;\n        }\n        else if (e < next_smallest)\n        {\n          \
    \  next_smallest = e;\n        }\n    }\n    if (smallest == next_smallest)\n\
    \        return null;\n    return next_smallest;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplvk243m2.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmplvk243m2.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmplvk243m2.d(38): Error: cannot implicitly convert expression `next_smallest`\
    \ of type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmplvk243m2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min1 = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min1 > min2)\n    {\n        min1 = lst[1];\n      \
    \  min2 = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e\
    \ < min1)\n        {\n            min2 = min1;\n            min1 = e;\n      \
    \  }\n        else if (e < min2)\n        {\n            min2 = e;\n        }\n\
    \    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_n7zg6nw.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmp_n7zg6nw.d(41): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_n7zg6nw.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min > min2)\n    {\n        min = min2;\n        min2\
    \ = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e < min)\n\
    \        {\n            min2 = min;\n            min = e;\n        }\n       \
    \ else if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n   \
    \ return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n  \
    \      auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp83sh05tl.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmp83sh05tl.d(41): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp83sh05tl.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    long min = lst[0];\n\
    \    long next_min = lst[1];\n    for (long i = 1; i < lst.length; i++) \n   \
    \ {\n        if (lst[i] < min) \n        {\n            next_min = min;\n    \
    \        min = lst[i];\n        } \n        else if (lst[i] < next_min) \n   \
    \     {\n            next_min = lst[i];\n        }\n    }\n    if (min == next_min)\
    \ \n    {\n        return null;\n    }\n    return next_min;\n}\n/*\nunittest\n\
    {\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmputo7mb56.d(44): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmputo7mb56.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min > min2)\n    {\n        min = min2;\n        min2\
    \ = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e < min)\n\
    \        {\n            min2 = min;\n            min = e;\n        }\n       \
    \ else if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n   \
    \ return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n  \
    \      auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa__ko_cd.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpa__ko_cd.d(41): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa__ko_cd.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    return\
    \ min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto\
    \ result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull &&\
    \ result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L,\
    \ 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n       \
    \ auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n     \
    \   auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdasyiix2.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpdasyiix2.d(36): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdasyiix2.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min\
    \ == min2)\n        return null;\n    return min2;\n}\n/*\nunittest\n{\n    alias\
    \ candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L,\
    \ 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxe1kzi3w.d(40): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxe1kzi3w.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ second_min = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n\
    \        {\n            second_min = min;\n            min = e;\n        }\n \
    \       else if (e < second_min)\n        {\n            second_min = e;\n   \
    \     }\n    }\n    if (min == second_min)\n        return null;\n    return second_min;\n\
    }\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result\
    \ = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwqk1vfiq.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpwqk1vfiq.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmpwqk1vfiq.d(38): Error: cannot implicitly convert expression `second_min`\
    \ of type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpwqk1vfiq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min1 = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min1 > min2)\n    {\n        min1 = lst[1];\n      \
    \  min2 = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e\
    \ < min1)\n        {\n            min2 = min1;\n            min1 = e;\n      \
    \  }\n        else if (e < min2)\n        {\n            min2 = e;\n        }\n\
    \    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpexams5_c.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpexams5_c.d(41): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpexams5_c.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long smallest = lst[0];\n  \
    \  long second_smallest = lst[1];\n    foreach (i, e; lst)\n    {\n        if\
    \ (e < smallest)\n        {\n            second_smallest = smallest;\n       \
    \     smallest = e;\n        }\n        else if (e < second_smallest)\n      \
    \  {\n            second_smallest = e;\n        }\n    }\n    if (smallest ==\
    \ second_smallest)\n        return null;\n    return second_smallest;\n}\nunittest\n\
    {\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_zqn6d4p.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmp_zqn6d4p.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmp_zqn6d4p.d(38): Error: cannot implicitly convert expression `second_smallest`\
    \ of type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp_zqn6d4p.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_h1_b0dj.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmp_h1_b0dj.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmp_h1_b0dj.d(38): Error: cannot implicitly convert expression `min2` of\
    \ type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp_h1_b0dj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    long min = lst[0];\n\
    \    long second_min = lst[1];\n    foreach (i; lst) \n    {\n        if (i <\
    \ min) \n        {\n            second_min = min;\n            min = i;\n    \
    \    } \n        else if (i < second_min) \n        {\n            second_min\
    \ = i;\n        }\n    }\n    if (min == second_min) \n    {\n        return null;\n\
    \    }\n    return second_min;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf6661q99.d(22): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpf6661q99.d(40): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmpf6661q99.d(42): Error: cannot implicitly convert expression `second_min`\
    \ of type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpf6661q99.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    long min1 = lst[0];\n\
    \    long min2 = lst[1];\n    if (min1 > min2) \n    {\n        min1 = lst[1];\n\
    \        min2 = lst[0];\n    }\n    foreach (i, x; lst[2..$]) \n    {\n      \
    \  if (x < min1) \n        {\n            min2 = min1;\n            min1 = x;\n\
    \        } \n        else if (x < min2) \n        {\n            min2 = x;\n \
    \       }\n    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuk7j5t7t.d(22): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpuk7j5t7t.d(43): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuk7j5t7t.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    else \n    {\n\
    \        long min = lst[0];\n        long min2 = lst[1];\n        foreach (i;\
    \ lst) \n        {\n            if (i < min) \n            {\n               \
    \ min2 = min;\n                min = i;\n            }\n            else if (i\
    \ < min2) \n            {\n                min2 = i;\n            }\n        }\n\
    \        return min2;\n    }\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_36xuebd.d(22): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmp_36xuebd.d(40): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_36xuebd.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min1 = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min1 > min2)\n    {\n        min1 = lst[1];\n      \
    \  min2 = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e\
    \ < min1)\n        {\n            min2 = min1;\n            min1 = e;\n      \
    \  }\n        else if (e < min2)\n        {\n            min2 = e;\n        }\n\
    \    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2u3y37mh.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmp2u3y37mh.d(41): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2u3y37mh.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min1 = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min1 > min2)\n    {\n        min1 = lst[1];\n      \
    \  min2 = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e\
    \ < min1)\n        {\n            min2 = min1;\n            min1 = e;\n      \
    \  }\n        else if (e < min2)\n        {\n            min2 = e;\n        }\n\
    \    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8o2f7ig8.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmp8o2f7ig8.d(41): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8o2f7ig8.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min1 = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min1 > min2)\n    {\n        min1 = lst[1];\n      \
    \  min2 = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e\
    \ < min1)\n        {\n            min2 = min1;\n            min1 = e;\n      \
    \  }\n        else if (e < min2)\n        {\n            min2 = e;\n        }\n\
    \    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpol6zzg5x.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpol6zzg5x.d(41): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpol6zzg5x.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, item; lst)\n    {\n        if (item < min)\n\
    \        {\n            min2 = min;\n            min = item;\n        }\n    \
    \    else if (item < min2)\n        {\n            min2 = item;\n        }\n \
    \   }\n    if (min2 == min)\n        return null;\n    return min2;\n}\nunittest\n\
    {\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjo49zc3j.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpjo49zc3j.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmpjo49zc3j.d(38): Error: cannot implicitly convert expression `min2` of\
    \ type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpjo49zc3j.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ second_min = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n\
    \        {\n            second_min = min;\n            min = e;\n        }\n \
    \       else if (e < second_min)\n        {\n            second_min = e;\n   \
    \     }\n    }\n    if (min == second_min)\n        return null;\n    return second_min;\n\
    }\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result\
    \ = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsv9rq9qn.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpsv9rq9qn.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmpsv9rq9qn.d(38): Error: cannot implicitly convert expression `second_min`\
    \ of type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpsv9rq9qn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ second_min = lst[1];\n    foreach (i, e; lst) \n    {\n        if (e < min)\
    \ \n        {\n            second_min = min;\n            min = e;\n        }\n\
    \        else if (e < second_min) \n        {\n            second_min = e;\n \
    \       }\n    }\n    if (min == second_min)\n        return null;\n    return\
    \ second_min;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n   \
    \     auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpupfmh50b.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpupfmh50b.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmpupfmh50b.d(38): Error: cannot implicitly convert expression `second_min`\
    \ of type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpupfmh50b.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    return\
    \ min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto\
    \ result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull &&\
    \ result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L,\
    \ 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n       \
    \ auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n     \
    \   auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcci3v98p.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpcci3v98p.d(36): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcci3v98p.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    long min = lst[0];\n\
    \    long second_min = lst[1];\n    foreach (i; 1..lst.length) \n    {\n     \
    \   if (lst[i] < min) \n        {\n            second_min = min;\n           \
    \ min = lst[i];\n        } \n        else if (lst[i] < second_min) \n        {\n\
    \            second_min = lst[i];\n        }\n    }\n    if (min == second_min)\
    \ \n    {\n        return null;\n    }\n    return second_min;\n}\nunittest\n\
    {\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8zm43d4s.d(22): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmp8zm43d4s.d(40): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmp8zm43d4s.d(42): Error: cannot implicitly convert expression `second_min`\
    \ of type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp8zm43d4s.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long smallest = lst[0];\n  \
    \  long second_smallest = lst[1];\n    foreach (i, e; lst)\n    {\n        if\
    \ (e < smallest)\n        {\n            second_smallest = smallest;\n       \
    \     smallest = e;\n        }\n        else if (e < second_smallest)\n      \
    \  {\n            second_smallest = e;\n        }\n    }\n    if (smallest ==\
    \ second_smallest)\n        return null;\n    return second_smallest;\n}\nunittest\n\
    {\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7op3kpl3.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmp7op3kpl3.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmp7op3kpl3.d(38): Error: cannot implicitly convert expression `second_smallest`\
    \ of type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp7op3kpl3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ next_min = lst[1];\n    foreach (i, e; lst) \n    {\n        if (e < min) \n\
    \        {\n            next_min = min;\n            min = e;\n        } \n  \
    \      else if (e < next_min) \n        {\n            next_min = e;\n       \
    \ }\n    }\n    return next_min;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq5jjn8aw.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpq5jjn8aw.d(36): Error: cannot\
    \ implicitly convert expression `next_min` of type `long` to `Nullable!long`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq5jjn8aw.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ second_min = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n\
    \        {\n            second_min = min;\n            min = e;\n        }\n \
    \       else if (e < second_min)\n        {\n            second_min = e;\n   \
    \     }\n    }\n    if (min == second_min)\n        return null;\n    return second_min;\n\
    }\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result\
    \ = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl8jr7lj5.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpl8jr7lj5.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmpl8jr7lj5.d(38): Error: cannot implicitly convert expression `second_min`\
    \ of type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpl8jr7lj5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu30h59lm.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpu30h59lm.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmpu30h59lm.d(38): Error: cannot implicitly convert expression `min2` of\
    \ type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpu30h59lm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    long min = lst[0];\n\
    \    long min2 = lst[1];\n    foreach (i; lst) \n    {\n        if (i < min) \n\
    \        {\n            min2 = min;\n            min = i;\n        }\n       \
    \ else if (i < min2) \n        {\n            min2 = i;\n        }\n    }\n  \
    \  return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n \
    \       auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_67azpo3.d(22): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmp_67azpo3.d(38): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_67azpo3.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long smallest = lst[0];\n  \
    \  long second_smallest = lst[1];\n    foreach (i, e; lst)\n    {\n        if\
    \ (e < smallest)\n        {\n            second_smallest = smallest;\n       \
    \     smallest = e;\n        }\n        else if (e < second_smallest)\n      \
    \  {\n            second_smallest = e;\n        }\n    }\n    if (smallest ==\
    \ second_smallest)\n        return null;\n    return second_smallest;\n}\nunittest\n\
    {\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp39rgqifk.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmp39rgqifk.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmp39rgqifk.d(38): Error: cannot implicitly convert expression `second_smallest`\
    \ of type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp39rgqifk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    long smallest\
    \ = lst[0];\n    long next_smallest = lst[1];\n    foreach (i, e; lst) \n    {\n\
    \        if (e < smallest) \n        {\n            next_smallest = smallest;\n\
    \            smallest = e;\n        } \n        else if (e < next_smallest) \n\
    \        {\n            next_smallest = e;\n        }\n    }\n    if (smallest\
    \ == next_smallest) \n    {\n        return null;\n    }\n    return next_smallest;\n\
    }\n/*\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result\
    \ = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw_4_7qg1.d(44): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw_4_7qg1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    long min = lst[0];\n\
    \    long min2 = lst[1];\n    foreach (i; lst) \n    {\n        if (i < min) \n\
    \        {\n            min2 = min;\n            min = i;\n        }\n       \
    \ else if (i < min2) \n        {\n            min2 = i;\n        }\n    }\n  \
    \  return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n \
    \       auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8uclsxb6.d(22): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmp8uclsxb6.d(38): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8uclsxb6.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  long min = long.max;\n    long min2 = long.max;\n    foreach(l; lst)\n    {\n\
    \        if(l < min)\n        {\n            min2 = min;\n            min = l;\n\
    \        }\n        else if(l < min2)\n        {\n            min2 = l;\n    \
    \    }\n    }\n    if(min2 == long.max)\n    {\n        return null;\n    }\n\
    \    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n\
    \        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprisdv41r.d(36): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmprisdv41r.d(38): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprisdv41r.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    long min = lst[0];\n\
    \    long min2 = lst[1];\n    foreach (i; lst) \n    {\n        if (i < min) \n\
    \        {\n            min2 = min;\n            min = i;\n        }\n       \
    \ else if (i < min2) \n        {\n            min2 = i;\n        }\n    }\n  \
    \  return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n \
    \       auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt3r8my5r.d(22): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpt3r8my5r.d(38): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt3r8my5r.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) return null;\n    long min = lst[0];\n    long min2 = lst[1];\n\
    \    foreach (i, e; lst) \n    {\n        if (e < min) \n        {\n         \
    \   min2 = min;\n            min = e;\n        }\n        else if (e < min2) \n\
    \        {\n            min2 = e;\n        }\n    }\n    return min2;\n}\nunittest\n\
    {\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl2g43b_o.d(20): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpl2g43b_o.d(35): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl2g43b_o.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long smallest = lst[0];\n  \
    \  long second_smallest = lst[1];\n    if (smallest > second_smallest)\n    {\n\
    \        smallest = lst[1];\n        second_smallest = lst[0];\n    }\n    foreach\
    \ (i, val; lst[2..$])\n    {\n        if (val < smallest)\n        {\n       \
    \     second_smallest = smallest;\n            smallest = val;\n        }\n  \
    \      else if (val < second_smallest)\n        {\n            second_smallest\
    \ = val;\n        }\n    }\n    return second_smallest;\n}\nunittest\n{\n    alias\
    \ candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L,\
    \ 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp708474_5.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmp708474_5.d(41): Error: cannot\
    \ implicitly convert expression `second_smallest` of type `long` to `Nullable!long`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp708474_5.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    long min = lst[0];\n\
    \    long min2 = lst[1];\n    foreach (i; lst) \n    {\n        if (i < min) \n\
    \        {\n            min2 = min;\n            min = i;\n        }\n       \
    \ else if (i < min2) \n        {\n            min2 = i;\n        }\n    }\n  \
    \  return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n \
    \       auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpztjcs3zc.d(22): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpztjcs3zc.d(38): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpztjcs3zc.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    long min = lst[0];\n\
    \    long next_min = lst[1];\n    foreach (i, e; lst) \n    {\n        if (e <\
    \ min) \n        {\n            next_min = min;\n            min = e;\n      \
    \  }\n        else if (e < next_min) \n        {\n            next_min = e;\n\
    \        }\n    }\n    if (min == next_min) \n    {\n        return null;\n  \
    \  }\n    return next_min;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_yty2ll3.d(22): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmp_yty2ll3.d(40): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmp_yty2ll3.d(42): Error: cannot implicitly convert expression `next_min`\
    \ of type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp_yty2ll3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  Nullable!(long) result = null;\n    long min = lst[0];\n    long min2 = lst[0];\n\
    \    foreach(i; lst) \n    {\n        if (i < min) \n        {\n            min2\
    \ = min;\n            min = i;\n        }\n        else if (i < min2) \n     \
    \   {\n            min2 = i;\n        }\n    }\n    if (min2 != min) \n    {\n\
    \        result = min2;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L,\
    \ 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmito5j41.d(20): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`\
    \ is not callable using a mutable object\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpmito5j41.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ second_min = lst[1];\n    foreach (i, x; lst) \n    {\n        if (x < min)\
    \ \n        {\n            second_min = min;\n            min = x;\n        }\n\
    \        else if (x < second_min) \n        {\n            second_min = x;\n \
    \       }\n    }\n    if (min == second_min)\n        return null;\n    return\
    \ second_min;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n   \
    \     auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph90m4pxh.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmph90m4pxh.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmph90m4pxh.d(38): Error: cannot implicitly convert expression `second_min`\
    \ of type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmph90m4pxh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) return null;\n    long min = lst[0];\n    long min2 = lst[1];\n\
    \    foreach (i, e; lst)\n    {\n        if (e < min)\n        {\n           \
    \ min2 = min;\n            min = e;\n        }\n        else if (e < min2)\n \
    \       {\n            min2 = e;\n        }\n    }\n    return min2;\n}\nunittest\n\
    {\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3wdf7rvg.d(20): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmp3wdf7rvg.d(35): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3wdf7rvg.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ second_min = lst[1];\n    if (min > second_min)\n    {\n        min = lst[1];\n\
    \        second_min = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n \
    \       if (e < min)\n        {\n            second_min = min;\n            min\
    \ = e;\n        }\n        else if (e < second_min)\n        {\n            second_min\
    \ = e;\n        }\n    }\n    return second_min;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxopqfxa3.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpxopqfxa3.d(41): Error: cannot\
    \ implicitly convert expression `second_min` of type `long` to `Nullable!long`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxopqfxa3.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpap1tqb0d.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpap1tqb0d.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmpap1tqb0d.d(38): Error: cannot implicitly convert expression `min2` of\
    \ type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpap1tqb0d.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1rh5wgbt.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmp1rh5wgbt.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmp1rh5wgbt.d(38): Error: cannot implicitly convert expression `min2` of\
    \ type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp1rh5wgbt.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return Nullable!(long).init;\n    }\n\
    \    long min = lst[0];\n    long second_min = lst[1];\n    foreach (i, item;\
    \ lst) \n    {\n        if (item < min) \n        {\n            second_min =\
    \ min;\n            min = item;\n        }\n        else if (item < second_min)\
    \ \n        {\n            second_min = item;\n        }\n    }\n    if (min ==\
    \ second_min) \n    {\n        return Nullable!(long).init;\n    }\n    return\
    \ second_min;\n}\n/*\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n\
    \        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvj6zu8yr.d(44): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvj6zu8yr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    return\
    \ min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto\
    \ result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull &&\
    \ result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L,\
    \ 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n       \
    \ auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n     \
    \   auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptzsxj7r9.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmptzsxj7r9.d(36): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptzsxj7r9.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpupb1uq6r.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpupb1uq6r.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmpupb1uq6r.d(38): Error: cannot implicitly convert expression `min2` of\
    \ type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpupb1uq6r.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    long min = lst[0];\n\
    \    long min2 = lst[1];\n    if (min > min2) \n    {\n        min = min2;\n \
    \       min2 = lst[0];\n    }\n    foreach (i, x; lst[2..$]) \n    {\n       \
    \ if (x < min) \n        {\n            min2 = min;\n            min = x;\n  \
    \      } \n        else if (x < min2) \n        {\n            min2 = x;\n   \
    \     }\n    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0jm_z1nu.d(22): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmp0jm_z1nu.d(43): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0jm_z1nu.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpseceo5aa.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpseceo5aa.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmpseceo5aa.d(38): Error: cannot implicitly convert expression `min2` of\
    \ type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpseceo5aa.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp95fcahhh.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmp95fcahhh.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmp95fcahhh.d(38): Error: cannot implicitly convert expression `min2` of\
    \ type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp95fcahhh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgga3jtjp.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpgga3jtjp.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmpgga3jtjp.d(38): Error: cannot implicitly convert expression `min2` of\
    \ type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpgga3jtjp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ secondMin = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n\
    \        {\n            secondMin = min;\n            min = e;\n        }\n  \
    \      else if (e < secondMin)\n        {\n            secondMin = e;\n      \
    \  }\n    }\n    if (min == secondMin)\n        return null;\n    return secondMin;\n\
    }\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result\
    \ = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo1n5nfpn.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpo1n5nfpn.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmpo1n5nfpn.d(38): Error: cannot implicitly convert expression `secondMin`\
    \ of type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpo1n5nfpn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long smallest = lst[0];\n  \
    \  long second_smallest = lst[1];\n    foreach (i, e; lst) \n    {\n        if\
    \ (e < smallest) \n        {\n            second_smallest = smallest;\n      \
    \      smallest = e;\n        } \n        else if (e < second_smallest) \n   \
    \     {\n            second_smallest = e;\n        }\n    }\n    return second_smallest;\n\
    }\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result\
    \ = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjybfg576.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpjybfg576.d(36): Error: cannot\
    \ implicitly convert expression `second_smallest` of type `long` to `Nullable!long`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjybfg576.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ second = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n   \
    \     {\n            second = min;\n            min = e;\n        }\n        else\
    \ if (e < second)\n        {\n            second = e;\n        }\n    }\n    if\
    \ (min == second)\n        return null;\n    return second;\n}\nunittest\n{\n\
    \    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph8t8qnbs.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmph8t8qnbs.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmph8t8qnbs.d(38): Error: cannot implicitly convert expression `second`\
    \ of type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmph8t8qnbs.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    long min = lst[0];\n\
    \    long min2 = lst[1];\n    foreach (i; lst) \n    {\n        if (i < min) \n\
    \        {\n            min2 = min;\n            min = i;\n        } \n      \
    \  else if (i < min2) \n        {\n            min2 = i;\n        }\n    }\n \
    \   return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n\
    \        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprfj06xqz.d(22): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmprfj06xqz.d(38): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprfj06xqz.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ second = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n   \
    \     {\n            second = min;\n            min = e;\n        }\n        else\
    \ if (e < second)\n        {\n            second = e;\n        }\n    }\n    if\
    \ (min == second)\n        return null;\n    return second;\n}\n/*\nunittest\n\
    {\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplj1wb9g1.d(40): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplj1wb9g1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\n/*\nunittest\n{\n    alias\
    \ candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L,\
    \ 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1rz_s5t_.d(40): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1rz_s5t_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe2bywlno.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpe2bywlno.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmpe2bywlno.d(38): Error: cannot implicitly convert expression `min2` of\
    \ type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpe2bywlno.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst) \n    {\n        if (e < min) \n   \
    \     {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2) \n        {\n            min2 = e;\n        }\n    }\n    return\
    \ min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto\
    \ result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull &&\
    \ result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L,\
    \ 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n       \
    \ auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n     \
    \   auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfefea6wf.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpfefea6wf.d(36): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfefea6wf.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp748dyo4h.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmp748dyo4h.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmp748dyo4h.d(38): Error: cannot implicitly convert expression `min2` of\
    \ type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp748dyo4h.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    long min = lst[0];\n\
    \    long min2 = lst[1];\n    foreach (i; lst) \n    {\n        if (i < min) \n\
    \        {\n            min2 = min;\n            min = i;\n        }\n       \
    \ else if (i < min2) \n        {\n            min2 = i;\n        }\n    }\n  \
    \  return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n \
    \       auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1g1ic3ge.d(22): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmp1g1ic3ge.d(38): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1g1ic3ge.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ nmin = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            nmin = min;\n            min = e;\n        }\n        else\
    \ if (e < nmin)\n        {\n            nmin = e;\n        }\n    }\n    if (min\
    \ == nmin)\n        return null;\n    return nmin;\n}\nunittest\n{\n    alias\
    \ candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L,\
    \ 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmix50x9z.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpmix50x9z.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmpmix50x9z.d(38): Error: cannot implicitly convert expression `nmin` of\
    \ type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpmix50x9z.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst) \n    {\n        if (e < min) \n   \
    \     {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2) \n        {\n            min2 = e;\n        }\n    }\n    return\
    \ min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto\
    \ result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull &&\
    \ result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L,\
    \ 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n       \
    \ auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n     \
    \   auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpn03b3gfs.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpn03b3gfs.d(36): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn03b3gfs.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1ex0sz72.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmp1ex0sz72.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmp1ex0sz72.d(38): Error: cannot implicitly convert expression `min2` of\
    \ type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp1ex0sz72.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzhk9_vmv.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpzhk9_vmv.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmpzhk9_vmv.d(38): Error: cannot implicitly convert expression `min2` of\
    \ type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpzhk9_vmv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst) \n    {\n        if (e < min) \n   \
    \     {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2) \n        {\n            min2 = e;\n        }\n    }\n    return\
    \ min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto\
    \ result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull &&\
    \ result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L,\
    \ 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n       \
    \ auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n     \
    \   auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxy6hr1wy.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpxy6hr1wy.d(36): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxy6hr1wy.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ next_min = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n \
    \       {\n            next_min = min;\n            min = e;\n        }\n    \
    \    else if (e < next_min)\n        {\n            next_min = e;\n        }\n\
    \    }\n    return next_min;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprhyap7nh.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmprhyap7nh.d(36): Error: cannot\
    \ implicitly convert expression `next_min` of type `long` to `Nullable!long`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprhyap7nh.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi2ll5h__.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpi2ll5h__.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmpi2ll5h__.d(38): Error: cannot implicitly convert expression `min2` of\
    \ type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpi2ll5h__.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    return\
    \ min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto\
    \ result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull &&\
    \ result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L,\
    \ 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n       \
    \ auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n     \
    \   auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy2kvepu8.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpy2kvepu8.d(36): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy2kvepu8.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    long min = lst[0];\n\
    \    long second_min = lst[1];\n    foreach (i; lst) \n    {\n        if (i <\
    \ min) \n        {\n            second_min = min;\n            min = i;\n    \
    \    } \n        else if (i < second_min) \n        {\n            second_min\
    \ = i;\n        }\n    }\n    if (min == second_min) \n    {\n        return null;\n\
    \    }\n    return second_min;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnvzgsymc.d(22): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpnvzgsymc.d(40): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmpnvzgsymc.d(42): Error: cannot implicitly convert expression `second_min`\
    \ of type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpnvzgsymc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, v; lst)\n    {\n        if (v < min)\n     \
    \   {\n            min2 = min;\n            min = v;\n        }\n        else\
    \ if (v < min2)\n        {\n            min2 = v;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgaf3nq39.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpgaf3nq39.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmpgaf3nq39.d(38): Error: cannot implicitly convert expression `min2` of\
    \ type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpgaf3nq39.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst) \n    {\n        if (e < min) \n   \
    \     {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2) \n        {\n            min2 = e;\n        }\n    }\n    return\
    \ min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto\
    \ result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull &&\
    \ result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L,\
    \ 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n       \
    \ auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n     \
    \   auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsyo2m5la.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpsyo2m5la.d(36): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsyo2m5la.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ second = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n   \
    \     {\n            second = min;\n            min = e;\n        }\n        else\
    \ if (e < second)\n        {\n            second = e;\n        }\n    }\n    if\
    \ (min == second)\n        return null;\n    return second;\n}\nunittest\n{\n\
    \    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfasmvo1_.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpfasmvo1_.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmpfasmvo1_.d(38): Error: cannot implicitly convert expression `second`\
    \ of type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpfasmvo1_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  Nullable!(long) result = null;\n    if (lst.length > 1) \n    {\n        long\
    \ min = lst[0];\n        long second_min = lst[1];\n        if (min > second_min)\
    \ \n        {\n            min = lst[1];\n            second_min = lst[0];\n \
    \       }\n        foreach (i; 2..lst.length) \n        {\n            if (lst[i]\
    \ < min) \n            {\n                second_min = min;\n                min\
    \ = lst[i];\n            } \n            else if (lst[i] < second_min) \n    \
    \        {\n                second_min = lst[i];\n            }\n        }\n \
    \       if (min != second_min) \n        {\n            result = second_min;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp89bkpscg.d(20): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`\
    \ is not callable using a mutable object\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp89bkpscg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst) \n    {\n        if (e < min) \n   \
    \     {\n            min2 = min;\n            min = e;\n        } \n        else\
    \ if (e < min2) \n        {\n            min2 = e;\n        }\n    }\n    return\
    \ min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto\
    \ result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull &&\
    \ result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L,\
    \ 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n       \
    \ auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n     \
    \   auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphsesyhju.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmphsesyhju.d(36): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphsesyhju.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    auto min = lst[0];\n\
    \    auto second_min = lst[1];\n    if (min > second_min) \n    {\n        min\
    \ = second_min;\n        second_min = lst[0];\n    }\n    foreach (i, e; lst[2..$])\
    \ \n    {\n        if (e < min) \n        {\n            second_min = min;\n \
    \           min = e;\n        } \n        else if (e < second_min) \n        {\n\
    \            second_min = e;\n        }\n    }\n    return second_min;\n}\nunittest\n\
    {\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwmusbj5w.d(22): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpwmusbj5w.d(43): Error: cannot\
    \ implicitly convert expression `second_min` of type `long` to `Nullable!long`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwmusbj5w.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min > min2)\n    {\n        min = min2;\n        min2\
    \ = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e < min)\n\
    \        {\n            min2 = min;\n            min = e;\n        }\n       \
    \ else if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n   \
    \ return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n  \
    \      auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp26_4t_ew.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmp26_4t_ew.d(41): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp26_4t_ew.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) return null;\n    long min = lst[0];\n    long min2 = lst[1];\n\
    \    foreach (i, e; lst)\n    {\n        if (e < min)\n        {\n           \
    \ min2 = min;\n            min = e;\n        }\n        else if (e < min2)\n \
    \       {\n            min2 = e;\n        }\n    }\n    return min2;\n}\nunittest\n\
    {\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp071kg6sm.d(20): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmp071kg6sm.d(35): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp071kg6sm.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min1 = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min1 > min2)\n    {\n        min1 = lst[1];\n      \
    \  min2 = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e\
    \ < min1)\n        {\n            min2 = min1;\n            min1 = e;\n      \
    \  }\n        else if (e < min2)\n        {\n            min2 = e;\n        }\n\
    \    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpry7utj0g.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpry7utj0g.d(41): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpry7utj0g.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ next_min = lst[1];\n    if (min > next_min)\n    {\n        min = next_min;\n\
    \        next_min = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n   \
    \     if (e < min)\n        {\n            next_min = min;\n            min =\
    \ e;\n        }\n        else if (e < next_min)\n        {\n            next_min\
    \ = e;\n        }\n    }\n    return next_min;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfuv1oxft.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpfuv1oxft.d(41): Error: cannot\
    \ implicitly convert expression `next_min` of type `long` to `Nullable!long`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfuv1oxft.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst) \n    {\n        if (e < min) \n   \
    \     {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2) \n        {\n            min2 = e;\n        }\n    }\n    return\
    \ min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto\
    \ result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull &&\
    \ result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L,\
    \ 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n       \
    \ auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n     \
    \   auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpahi60x2d.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpahi60x2d.d(36): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpahi60x2d.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) return null;\n    long min = lst[0];\n    long min2 = lst[1];\n\
    \    foreach (i, e; lst)\n    {\n        if (e < min)\n        {\n           \
    \ min2 = min;\n            min = e;\n        }\n        else if (e < min2)\n \
    \       {\n            min2 = e;\n        }\n    }\n    return min2;\n}\nunittest\n\
    {\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprzgi45py.d(20): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmprzgi45py.d(35): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprzgi45py.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeqtdfhup.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpeqtdfhup.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmpeqtdfhup.d(38): Error: cannot implicitly convert expression `min2` of\
    \ type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpeqtdfhup.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    long min = lst[0];\n\
    \    long second_min = lst[1];\n    foreach (i; lst) \n    {\n        if (i <\
    \ min) \n        {\n            second_min = min;\n            min = i;\n    \
    \    }\n        else if (i < second_min) \n        {\n            second_min =\
    \ i;\n        }\n    }\n    if (min == second_min) \n    {\n        return null;\n\
    \    }\n    return second_min;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwl3jfsyx.d(22): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpwl3jfsyx.d(40): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmpwl3jfsyx.d(42): Error: cannot implicitly convert expression `second_min`\
    \ of type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpwl3jfsyx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min1 = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min1 > min2)\n    {\n        min1 = lst[1];\n      \
    \  min2 = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e\
    \ < min1)\n        {\n            min2 = min1;\n            min1 = e;\n      \
    \  }\n        else if (e < min2)\n        {\n            min2 = e;\n        }\n\
    \    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3d0wld89.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmp3d0wld89.d(41): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3d0wld89.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min1 = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min1 > min2)\n    {\n        min1 = lst[1];\n      \
    \  min2 = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e\
    \ < min1)\n        {\n            min2 = min1;\n            min1 = e;\n      \
    \  }\n        else if (e < min2)\n        {\n            min2 = e;\n        }\n\
    \    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps04s53bt.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmps04s53bt.d(41): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps04s53bt.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min2 < min)\n    {\n        min = min2;\n        min2\
    \ = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e < min)\n\
    \        {\n            min2 = min;\n            min = e;\n        }\n       \
    \ else if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n   \
    \ return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n  \
    \      auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwiwpo0hn.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpwiwpo0hn.d(41): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwiwpo0hn.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    return\
    \ min2;\n}\n/*\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n     \
    \   auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpom0xxkgp.d(38): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpom0xxkgp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    return\
    \ min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto\
    \ result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull &&\
    \ result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L,\
    \ 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n       \
    \ auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n     \
    \   auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1dhqquah.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmp1dhqquah.d(36): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1dhqquah.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ second_min = lst[1];\n    foreach (i, e; lst) \n    {\n        if (e < min)\
    \ \n        {\n            second_min = min;\n            min = e;\n        }\n\
    \        else if (e < second_min) \n        {\n            second_min = e;\n \
    \       }\n    }\n    if (min == second_min)\n        return null;\n    return\
    \ second_min;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n   \
    \     auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv3wxo3o7.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpv3wxo3o7.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmpv3wxo3o7.d(38): Error: cannot implicitly convert expression `second_min`\
    \ of type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpv3wxo3o7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    return\
    \ min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto\
    \ result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull &&\
    \ result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L,\
    \ 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n       \
    \ auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n     \
    \   auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz1jt4teh.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpz1jt4teh.d(36): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz1jt4teh.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ second_min = lst[1];\n    foreach (i, e; lst) \n    {\n        if (e < min)\
    \ \n        {\n            second_min = min;\n            min = e;\n        }\n\
    \        else if (e < second_min) \n        {\n            second_min = e;\n \
    \       }\n    }\n    if (min == second_min)\n        return null;\n    return\
    \ second_min;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n   \
    \     auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr639do0f.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpr639do0f.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmpr639do0f.d(38): Error: cannot implicitly convert expression `second_min`\
    \ of type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpr639do0f.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min1 = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min1 > min2)\n    {\n        min1 = lst[1];\n      \
    \  min2 = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e\
    \ < min1)\n        {\n            min2 = min1;\n            min1 = e;\n      \
    \  }\n        else if (e < min2)\n        {\n            min2 = e;\n        }\n\
    \    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwuy_rwia.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpwuy_rwia.d(41): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwuy_rwia.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    long min = lst[0];\n\
    \    long min2 = lst[1];\n    foreach (i; lst) \n    {\n        if (i < min) \n\
    \        {\n            min2 = min;\n            min = i;\n        }\n       \
    \ else if (i < min2) \n        {\n            min2 = i;\n        }\n    }\n  \
    \  return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n \
    \       auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb8j6fhc3.d(22): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpb8j6fhc3.d(38): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb8j6fhc3.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ second = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n   \
    \     {\n            second = min;\n            min = e;\n        }\n        else\
    \ if (e < second)\n        {\n            second = e;\n        }\n    }\n    if\
    \ (min == second)\n        return null;\n    return second;\n}\nunittest\n{\n\
    \    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpekixixeg.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpekixixeg.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmpekixixeg.d(38): Error: cannot implicitly convert expression `second`\
    \ of type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpekixixeg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min2 < min)\n    {\n        min = min2;\n        min2\
    \ = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e < min)\n\
    \        {\n            min2 = min;\n            min = e;\n        }\n       \
    \ else if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n   \
    \ return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n  \
    \      auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcy3m0b19.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpcy3m0b19.d(41): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcy3m0b19.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ next_min = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n \
    \       {\n            next_min = min;\n            min = e;\n        }\n    \
    \    else if (e < next_min)\n        {\n            next_min = e;\n        }\n\
    \    }\n    if (min == next_min)\n        return null;\n    return next_min;\n\
    }\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result\
    \ = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n  \
    \      assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull &&\
    \ result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n   \
    \     assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L,\
    \ 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwdcmuhmy.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpwdcmuhmy.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmpwdcmuhmy.d(38): Error: cannot implicitly convert expression `next_min`\
    \ of type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpwdcmuhmy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long smallest = lst[0];\n  \
    \  long second_smallest = lst[1];\n    foreach (i, e; lst)\n    {\n        if\
    \ (e < smallest)\n        {\n            second_smallest = smallest;\n       \
    \     smallest = e;\n        }\n        else if (e < second_smallest)\n      \
    \  {\n            second_smallest = e;\n        }\n    }\n    if (smallest ==\
    \ second_smallest)\n        return null;\n    return second_smallest;\n}\nunittest\n\
    {\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb510dyq8.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpb510dyq8.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmpb510dyq8.d(38): Error: cannot implicitly convert expression `second_smallest`\
    \ of type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpb510dyq8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) \n    {\n        return null;\n    }\n    long min = lst[0];\n\
    \    long min2 = lst[1];\n    foreach (i; lst) \n    {\n        if (i < min) \n\
    \        {\n            min2 = min;\n            min = i;\n        } \n      \
    \  else if (i < min2) \n        {\n            min2 = i;\n        }\n    }\n \
    \   return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n\
    \        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp18laywpy.d(22): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmp18laywpy.d(38): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp18laywpy.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\n/*\nunittest\n{\n    alias\
    \ candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L,\
    \ 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgvyoim4q.d(40): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgvyoim4q.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ next_min = lst[1];\n    foreach (i, e; lst) \n    {\n        if (e < min) \n\
    \        {\n            next_min = min;\n            min = e;\n        }\n   \
    \     else if (e < next_min) \n        {\n            next_min = e;\n        }\n\
    \    }\n    return next_min;\n}\n/*\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5s4erqxi.d(38): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5s4erqxi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n     \
    \   {\n            min2 = min;\n            min = e;\n        }\n        else\
    \ if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if (min2\
    \ == min)\n        return null;\n    return min2;\n}\nunittest\n{\n    alias candidate\
    \ = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n\
    \        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpklo8pcfw.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpklo8pcfw.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmpklo8pcfw.d(38): Error: cannot implicitly convert expression `min2` of\
    \ type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpklo8pcfw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min1 = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min1 > min2)\n    {\n        min1 = lst[1];\n      \
    \  min2 = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e\
    \ < min1)\n        {\n            min2 = min1;\n            min1 = e;\n      \
    \  }\n        else if (e < min2)\n        {\n            min2 = e;\n        }\n\
    \    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\
    \n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L,\
    \ 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull\
    \ && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L,\
    \ 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\
    \n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw0omnu_z.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpw0omnu_z.d(41): Error: cannot\
    \ implicitly convert expression `min2` of type `long` to `Nullable!long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw0omnu_z.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2) return null;\n    long min1 = lst[0];\n    long min2 =\
    \ lst[1];\n    if (min1 > min2) swap(min1, min2);\n    foreach (i, e; lst[2..$])\
    \ \n    {\n        if (e < min1) \n        {\n            min2 = min1;\n     \
    \       min1 = e;\n        }\n        else if (e < min2) \n        {\n       \
    \     min2 = e;\n        }\n    }\n    return min2;\n}\nunittest\n{\n    alias\
    \ candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L,\
    \ 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n   \
    \     auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvugp4l09.d(23): Error: undefined identifier `swap`, did you mean\
    \ template `wrap(Targets...) if (Targets.length >= 1 && allSatisfy!(isMutable,\
    \ Targets))`?\\n/tmp/tmpvugp4l09.d(20): Error: cannot implicitly convert expression\
    \ `null` of type `typeof(null)` to `Nullable!long`\\n/tmp/tmpvugp4l09.d(36): Error:\
    \ cannot implicitly convert expression `min2` of type `long` to `Nullable!long`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvugp4l09.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given an array\
    \ of integers.\n    Write a function next_smallest() that returns the 2nd smallest\
    \ element of the array.\n    Return null if there is no such element.\n    >>>\
    \ next_smallest([1L, 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L,\
    \ 4L, 3L, 2L])\n    2L\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1L,\
    \ 1L])\n    None\n    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n  \
    \  if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ second = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n   \
    \     {\n            second = min;\n            min = e;\n        }\n        else\
    \ if (e < second)\n        {\n            second = e;\n        }\n    }\n    if\
    \ (min == second)\n        return null;\n    return second;\n}\nunittest\n{\n\
    \    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L,\
    \ 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n\
    {\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull\
    \ && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n      \
    \  assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L,\
    \ 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n\
    {\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
    \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8nuuck_r.d(21): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `Nullable!long`\\n/tmp/tmp8nuuck_r.d(37): Error: cannot\
    \ implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\\\
    n/tmp/tmp8nuuck_r.d(38): Error: cannot implicitly convert expression `second`\
    \ of type `long` to `Nullable!long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp8nuuck_r.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
