name: HumanEval_141_file_name_check
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nCreate a function which takes\
  \ a string representing a file's name, and returns\n    'Yes' if the the file's\
  \ name is valid, and returns 'No' otherwise.\n    A file's name is considered to\
  \ be valid if and only if all the following conditions \n    are met:\n    - There\
  \ should not be more than three digits ('0'-'9') in the file's name.\n    - The\
  \ file's name contains exactly one dot '.'\n    - The substring before the dot should\
  \ not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z'\
  \ and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt',\
  \ 'exe', 'dll']\n    Examples:\n    >>> file_name_check(\"example.txt\")\n    \"\
  Yes\"\n    >>> file_name_check(\"1example.dll\")\n    \"No\"\n    \n*/\nstring file_name_check(string\
  \ file_name) \n"
tests: "unittest\n{\n    alias candidate = file_name_check;\n\n    assert(candidate(\"\
  example.txt\") == \"Yes\");\n    assert(candidate(\"1example.dll\") == \"No\");\n\
  \    assert(candidate(\"s1sdf3.asd\") == \"No\");\n    assert(candidate(\"K.dll\"\
  ) == \"Yes\");\n    assert(candidate(\"MY16FILE3.exe\") == \"Yes\");\n    assert(candidate(\"\
  His12FILE94.exe\") == \"No\");\n    assert(candidate(\"_Y.txt\") == \"No\");\n \
  \   assert(candidate(\"?aREYA.exe\") == \"No\");\n    assert(candidate(\"/this_is_valid.dll\"\
  ) == \"No\");\n    assert(candidate(\"this_is_valid.wow\") == \"No\");\n    assert(candidate(\"\
  this_is_valid.txt\") == \"Yes\");\n    assert(candidate(\"this_is_valid.txtexe\"\
  ) == \"No\");\n    assert(candidate(\"#this2_i4s_5valid.ten\") == \"No\");\n   \
  \ assert(candidate(\"@this1_is6_valid.exe\") == \"No\");\n    assert(candidate(\"\
  this_is_12valid.6exe4.txt\") == \"No\");\n    assert(candidate(\"all.exe.txt\")\
  \ == \"No\");\n    assert(candidate(\"I563_No.exe\") == \"Yes\");\n    assert(candidate(\"\
  Is3youfault.txt\") == \"Yes\");\n    assert(candidate(\"no_one#knows.dll\") == \"\
  Yes\");\n    assert(candidate(\"1I563_Yes3.exe\") == \"No\");\n    assert(candidate(\"\
  I563_Yes3.txtt\") == \"No\");\n    assert(candidate(\"final..txt\") == \"No\");\n\
  \    assert(candidate(\"final132\") == \"No\");\n    assert(candidate(\"_f4indsartal132.\"\
  ) == \"No\");\n    assert(candidate(\".txt\") == \"No\");\n    assert(candidate(\"\
  s.\") == \"No\");\n}\nvoid main(){}"
completions: ["{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n \
    \   string[] parts = split(file_name, \".\");\n    if (parts.length != 2)\n  \
    \      return \"No\";\n    if (parts[0].length == 0)\n        return \"No\";\n\
    \    if (parts[0][0] < 'a' || parts[0][0] > 'z')\n        return \"No\";\n   \
    \ if (parts[1] !in valid_extensions)\n        return \"No\";\n    if (parts[0].count!(c\
    \ => c >= '0' && c <= '9') > 3)\n        return \"No\";\n    return \"Yes\";\n\
    }", "{\n    int dot_count = 0;\n    int digit_count = 0;\n    int dot_index =\
    \ 0;\n    bool is_valid = true;\n    foreach(i, c; file_name)\n    {\n       \
    \ if(c == '.')\n        {\n            dot_count++;\n            dot_index = i;\n\
    \        }\n        if(c >= '0' && c <= '9')\n        {\n            digit_count++;\n\
    \        }\n    }\n    if(dot_count != 1 || digit_count > 3)\n    {\n        is_valid\
    \ = false;\n    }\n    else\n    {\n        string prefix = file_name[0..dot_index];\n\
    \        string suffix = file_name[dot_index+1..$];\n        if(prefix.length\
    \ == 0 || !(prefix[0] >= 'a' && prefix[0] <= 'z' || prefix[0] >= 'A' && prefix[0]\
    \ <= 'Z'))\n        {\n            is_valid = false;\n        }\n        else\
    \ if(suffix != \"txt\" && suffix != \"exe\" && suffix != \"dll\")\n        {\n\
    \            is_valid = false;\n        }\n    }\n    return is_valid ? \"Yes\"\
    \ : \"No\";\n}", "{\n    int dot_index = file_name.find('.');\n    string extension\
    \ = file_name.substr(dot_index + 1);\n    string name = file_name.substr(0, dot_index);\n\
    \    int digits = 0;\n    foreach(c; name)\n    {\n        if(c >= '0' && c <=\
    \ '9')\n            digits++;\n    }\n    if(digits > 3)\n        return \"No\"\
    ;\n    if(extension != \"txt\" && extension != \"exe\" && extension != \"dll\"\
    )\n        return \"No\";\n    if(name.length == 0)\n        return \"No\";\n\
    \    if(name[0] < 'a' || name[0] > 'z' && name[0] < 'A' || name[0] > 'Z')\n  \
    \      return \"No\";\n    return \"Yes\";\n}", "{\n    int count = 0;\n    string[]\
    \ valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts\
    \ = file_name.split(\".\");\n    if (file_name_parts.length != 2)\n        return\
    \ \"No\";\n    foreach (char c; file_name_parts[0])\n    {\n        if (c >= '0'\
    \ && c <= '9')\n            count++;\n    }\n    if (count > 3)\n        return\
    \ \"No\";\n    if (file_name_parts[0].length == 0)\n        return \"No\";\n \
    \   if (file_name_parts[0][0] < 'a' || file_name_parts[0][0] > 'z' &&\n      \
    \  file_name_parts[0][0] < 'A' || file_name_parts[0][0] > 'Z')\n        return\
    \ \"No\";\n    if (valid_extensions.find(file_name_parts[1]) == -1)\n        return\
    \ \"No\";\n    return \"Yes\";\n}", "{\n    int dot_index = file_name.find('.');\n\
    \    string extension = file_name.substr(dot_index + 1);\n    string name = file_name.substr(0,\
    \ dot_index);\n    int digits = 0;\n    foreach(c; name)\n    {\n        if(c\
    \ >= '0' && c <= '9')\n            digits++;\n    }\n    if(digits > 3)\n    \
    \    return \"No\";\n    if(extension != \"txt\" && extension != \"exe\" && extension\
    \ != \"dll\")\n        return \"No\";\n    if(name.length == 0)\n        return\
    \ \"No\";\n    if(!(name[0] >= 'a' && name[0] <= 'z') && !(name[0] >= 'A' && name[0]\
    \ <= 'Z'))\n        return \"No\";\n    return \"Yes\";\n}\n/*\nCreate a function\
    \ which takes a string representing a file's name, and returns\n    'Yes' if the\
    \ the file's name is valid, and returns 'No' otherwise.\n    A file's name is\
    \ considered to be valid if and only if all the following conditions \n    are\
    \ met:\n    - There should not be more than three digits ('0'-'9') in the file's\
    \ name.\n    - The file's name contains exactly one dot '.'\n    - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n    the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    >>> file_name_check(\"\
    example.txt\")\n    \"Yes\"\n    >>> file_name_check(\"1example.dll\")\n    \"\
    No\"\n    \n*/\nstring file_name_check2(string file_name) \n{\n    int dot_index\
    \ = file_name.find('.');\n    string extension = file_name.substr(dot_index +\
    \ 1);\n    string name = file_name.substr(0, dot_index);\n    int digits = 0;\n\
    \    foreach(c; name)\n    {\n", "{\n    string[] valid_extensions = [\"txt\"\
    , \"exe\", \"dll\"];\n    int dot_index = file_name.find('.');\n    string extension\
    \ = file_name.substr(dot_index + 1);\n    string name = file_name.substr(0, dot_index);\n\
    \    int digits_count = 0;\n    foreach(char c; name)\n    {\n        if(c >=\
    \ '0' && c <= '9')\n            digits_count++;\n    }\n    if(digits_count >\
    \ 3 || dot_index == -1 || name.length == 0 || name[0] < 'A' || name[0] > 'z' ||\
    \ !valid_extensions.count(extension))\n        return \"No\";\n    return \"Yes\"\
    ;\n}", "{\n    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n\
    \    string extension = \"\";\n    string name = \"\";\n    foreach(i, c; file_name)\n\
    \    {\n        if(c == '.')\n        {\n            dot_count++;\n          \
    \  dot_index = i;\n        }\n        if(c >= '0' && c <= '9')\n        {\n  \
    \          count++;\n        }\n    }\n    if(count > 3 || dot_count != 1)\n \
    \   {\n        return \"No\";\n    }\n    name = file_name[0..dot_index];\n  \
    \  extension = file_name[dot_index+1..$];\n    if(name.length == 0 || !(name[0]\
    \ >= 'a' && name[0] <= 'z' || name[0] >= 'A' && name[0] <= 'Z'))\n    {\n    \
    \    return \"No\";\n    }\n    if(extension != \"txt\" && extension != \"exe\"\
    \ && extension != \"dll\")\n    {\n        return \"No\";\n    }\n    return \"\
    Yes\";\n}", "{\n    int dot_index = file_name.find(\".\");\n    if (dot_index\
    \ == -1)\n        return \"No\";\n    string before_dot = file_name[0..dot_index];\n\
    \    string after_dot = file_name[dot_index+1..$];\n    if (before_dot.length\
    \ == 0)\n        return \"No\";\n    if (after_dot != \"txt\" && after_dot !=\
    \ \"exe\" && after_dot != \"dll\")\n        return \"No\";\n    int digit_count\
    \ = 0;\n    foreach (c; before_dot)\n    {\n        if (c >= '0' && c <= '9')\n\
    \            digit_count++;\n    }\n    if (digit_count > 3)\n        return \"\
    No\";\n    if (before_dot[0] < 'a' || before_dot[0] > 'z')\n        return \"\
    No\";\n    return \"Yes\";\n}\n/*\nCreate a function which takes a string representing\
    \ a file's name, and returns\n    'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n    A file's name is considered to be valid if and only if\
    \ all the following conditions \n    are met:\n    - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    - The file's name contains\
    \ exactly one dot '.'\n    - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    Examples:\n    >>> file_name_check(\"example.txt\")\n    \"Yes\"\n    >>>\
    \ file_name_check(\"1example.dll\")\n    \"No\"\n    \n*/\nstring file_name_check(string\
    \ file_name) \n{\n    int dot_index = file_name.find(\".\");\n    if (dot_index\
    \ == -1)\n        return \"No\";\n    string before_dot = file_name[0..dot_index];\n\
    \    string after_dot = file_name[", "{\n    int dot_pos = file_name.find('.');\n\
    \    if (dot_pos == -1)\n        return \"No\";\n    string before_dot = file_name[0..dot_pos];\n\
    \    string after_dot = file_name[dot_pos+1..$];\n    if (before_dot.length ==\
    \ 0)\n        return \"No\";\n    if (before_dot.count('0','9') > 3)\n       \
    \ return \"No\";\n    if (after_dot != \"txt\" && after_dot != \"exe\" && after_dot\
    \ != \"dll\")\n        return \"No\";\n    return \"Yes\";\n}", "{\n    int count\
    \ = 0;\n    int dot_count = 0;\n    string extension = \"\";\n    string file_name_without_extension\
    \ = \"\";\n    foreach(char c; file_name)\n    {\n        if(c == '.')\n     \
    \   {\n            dot_count++;\n            continue;\n        }\n        if(dot_count\
    \ == 0)\n        {\n            file_name_without_extension ~= c;\n        }\n\
    \        else\n        {\n            extension ~= c;\n        }\n        if(c\
    \ >= '0' && c <= '9')\n        {\n            count++;\n        }\n    }\n   \
    \ if(count > 3 || dot_count != 1 || file_name_without_extension.length == 0 ||\
    \ !(file_name_without_extension[0] >= 'a' && file_name_without_extension[0] <=\
    \ 'z') || !(file_name_without_extension[0] >= 'A' && file_name_without_extension[0]\
    \ <= 'Z') || extension != \"txt\" && extension != \"exe\" && extension != \"dll\"\
    )\n    {\n        return \"No\";\n    }\n    return \"Yes\";\n}", "{\n    int\
    \ dot_pos = file_name.find('.');\n    string ext = file_name.substr(dot_pos+1);\n\
    \    string name = file_name.substr(0, dot_pos);\n    int digits = 0;\n    foreach(c;\
    \ name)\n    {\n        if(c >= '0' && c <= '9')\n            digits++;\n    }\n\
    \    if(digits > 3)\n        return \"No\";\n    if(ext != \"txt\" && ext != \"\
    exe\" && ext != \"dll\")\n        return \"No\";\n    if(name.length == 0)\n \
    \       return \"No\";\n    if(!(name[0] >= 'a' && name[0] <= 'z') && !(name[0]\
    \ >= 'A' && name[0] <= 'Z'))\n        return \"No\";\n    return \"Yes\";\n}",
  "{\n    // TODO: implement this function\n    //return \"Yes\";\n    int dot_pos\
    \ = file_name.find('.');\n    if (dot_pos == -1)\n        return \"No\";\n   \
    \ string pre_dot = file_name[0..dot_pos];\n    string post_dot = file_name[dot_pos+1..$];\n\
    \    if (pre_dot.length == 0 || post_dot.length == 0)\n        return \"No\";\n\
    \    if (pre_dot.count('0'..'9') > 3)\n        return \"No\";\n    if (post_dot\
    \ != \"txt\" && post_dot != \"exe\" && post_dot != \"dll\")\n        return \"\
    No\";\n    if (pre_dot[0] < 'a' || pre_dot[0] > 'z')\n        if (pre_dot[0] <\
    \ 'A' || pre_dot[0] > 'Z')\n            return \"No\";\n    return \"Yes\";\n}",
  "{\n    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    int\
    \ dot_index_start = 0;\n    int dot_index_end = 0;\n    int dot_index_start_end\
    \ = 0;\n    int dot_index_end_end = 0;\n    int dot_index_start_start = 0;\n \
    \   int dot_index_end_start = 0;\n    int dot_index_start_start_end = 0;\n   \
    \ int dot_index_end_start_end = 0;\n    int dot_index_start_end_end = 0;\n   \
    \ int dot_index_end_end_end = 0;\n    int dot_index_start_start_start = 0;\n \
    \   int dot_index_end_start_start = 0;\n    int dot_index_start_start_start_end\
    \ = 0;\n    int dot_index_end_start_start_end = 0;\n    int dot_index_start_start_end_end\
    \ = 0;\n    int dot_index_end_start_end_end = 0;\n    int dot_index_start_end_end_end\
    \ = 0;\n    int dot_index_end_end_end_end = 0;\n    int dot_index_start_start_start_start\
    \ = 0;\n    int dot_index_end_start_start_start = 0;\n    int dot_index_start_start_start_start_end\
    \ = 0;\n    int dot_index_end_start_start_start_end = 0;\n    int dot_index_start_start_start_end_end\
    \ = 0;\n    int dot_index_end_start_start_end_end = 0;\n    int dot_index_start_start_end_end_end\
    \ = 0;\n    int dot_index_end_start_end_end_end = 0;\n    int dot_index_start_end_end_end_end\
    \ = 0;\n    int dot_index_end_end_end_end_end = 0;\n    int dot_index_start_start_start_start_start\
    \ = 0;\n    int dot_index_end_start_start_start", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts = file_name.split(\"\
    .\");\n    if (file_name_parts.length != 2)\n        return \"No\";\n    if (file_name_parts[0].length\
    \ == 0)\n        return \"No\";\n    if (file_name_parts[0].count(\"0-9\") > 3)\n\
    \        return \"No\";\n    if (file_name_parts[0][0] < 'a' || file_name_parts[0][0]\
    \ > 'z')\n        return \"No\";\n    if (file_name_parts[1] !in valid_extensions)\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    auto dot_pos = file_name.find('.');\n\
    \    if (dot_pos == -1)\n        return \"No\";\n    auto ext = file_name.substr(dot_pos\
    \ + 1);\n    if (ext != \"txt\" && ext != \"exe\" && ext != \"dll\")\n       \
    \ return \"No\";\n    auto name = file_name.substr(0, dot_pos);\n    if (name.length\
    \ == 0)\n        return \"No\";\n    if (name[0] < 'a' || name[0] > 'z' && name[0]\
    \ < 'A' || name[0] > 'Z')\n        return \"No\";\n    if (name.count!(char)(\"\
    0123456789\") > 3)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    int\
    \ dot_index = file_name.find('.');\n    if (dot_index == -1)\n        return \"\
    No\";\n    string before_dot = file_name[0..dot_index];\n    string after_dot\
    \ = file_name[dot_index+1..$];\n    if (before_dot.length == 0 || !isalpha(before_dot[0]))\n\
    \        return \"No\";\n    int digits_count = 0;\n    foreach (c; before_dot)\n\
    \    {\n        if (isdigit(c))\n            digits_count++;\n    }\n    if (digits_count\
    \ > 3)\n        return \"No\";\n    if (after_dot != \"txt\" && after_dot != \"\
    exe\" && after_dot != \"dll\")\n        return \"No\";\n    return \"Yes\";\n}",
  "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    int dot_index\
    \ = file_name.find(\".\");\n    string file_extension = file_name[dot_index+1..$];\n\
    \    string file_name_without_extension = file_name[0..dot_index-1];\n    int\
    \ digits_count = 0;\n    foreach(char c; file_name_without_extension)\n    {\n\
    \        if(c >= '0' && c <= '9')\n        {\n            digits_count++;\n  \
    \      }\n    }\n    if(digits_count > 3)\n    {\n        return \"No\";\n   \
    \ }\n    if(file_name.count(\".\") != 1)\n    {\n        return \"No\";\n    }\n\
    \    if(file_name_without_extension.length == 0)\n    {\n        return \"No\"\
    ;\n    }\n    if(file_name_without_extension[0] < 'a' || file_name_without_extension[0]\
    \ > 'z')\n    {\n        return \"No\";\n    }\n    if(!valid_extensions.canFind(file_extension))\n\
    \    {\n        return \"No\";\n    }\n    return \"Yes\";\n}", "{\n    import\
    \ std.regex;\n    import std.algorithm;\n    import std.array;\n    import std.conv;\n\
    \    import std.range;\n    import std.string;\n    import std.typecons;\n   \
    \ import std.math;\n    import std.stdio;\n    import std.exception;\n    import\
    \ std.traits;\n    import std.typecons;\n    import std.math;\n    import std.algorithm;\n\
    \    import std.array;\n    import std.conv;\n    import std.range;\n    import\
    \ std.string;\n    import std.typecons;\n    import std.math;\n    import std.algorithm;\n\
    \    import std.array;\n    import std.conv;\n    import std.range;\n    import\
    \ std.string;\n    import std.typecons;\n    import std.math;\n    import std.algorithm;\n\
    \    import std.array;\n    import std.conv;\n    import std.range;\n    import\
    \ std.string;\n    import std.typecons;\n    import std.math;\n    import std.algorithm;\n\
    \    import std.array;\n    import std.conv;\n    import std.range;\n    import\
    \ std.string;\n    import std.typecons;\n    import std.math;\n    import std.algorithm;\n\
    \    import std.array;\n    import std.conv;\n    import std.range;\n    import\
    \ std.string;\n    import std.typecons;\n    import std.math;\n    import std.algorithm;\n\
    \    import std.array;\n    import std.conv;\n    import std.range;\n    import\
    \ std.string;\n    import std.typecons;\n    import std.math;\n    import std.algorithm;\n\
    \    import std.array;\n    import std.conv;\n    import std.range;\n    import\
    \ std.string;\n    import std.typecons;\n    import std.math;\n    import std.algorithm;\n\
    \    import std.array;\n    import std.conv;\n    import std.range;\n    import\
    \ std.string;\n    import std.typecons;\n    import std.math;\n    import std",
  "{\n    int dot_index = file_name.find('.');\n    if (dot_index == -1)\n       \
    \ return \"No\";\n    string before_dot = file_name[0..dot_index];\n    string\
    \ after_dot = file_name[dot_index+1..$];\n    if (before_dot.length == 0 || before_dot.length\
    \ > 8)\n        return \"No\";\n    if (after_dot.length == 0 || after_dot.length\
    \ > 3)\n        return \"No\";\n    if (before_dot.count!(a => a >= '0' && a <=\
    \ '9') > 3)\n        return \"No\";\n    if (before_dot[0] < 'a' || before_dot[0]\
    \ > 'z')\n        return \"No\";\n    if (after_dot != \"txt\" && after_dot !=\
    \ \"exe\" && after_dot != \"dll\")\n        return \"No\";\n    return \"Yes\"\
    ;\n}", "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[]\
    \ file_name_split = file_name.split(\".\");\n    if (file_name_split.length !=\
    \ 2)\n        return \"No\";\n    string file_name_without_extension = file_name_split[0];\n\
    \    string file_extension = file_name_split[1];\n    if (file_name_without_extension.length\
    \ == 0)\n        return \"No\";\n    if (file_name_without_extension.count(\"\
    0\") + file_name_without_extension.count(\"1\") + file_name_without_extension.count(\"\
    2\") + file_name_without_extension.count(\"3\") + file_name_without_extension.count(\"\
    4\") + file_name_without_extension.count(\"5\") + file_name_without_extension.count(\"\
    6\") + file_name_without_extension.count(\"7\") + file_name_without_extension.count(\"\
    8\") + file_name_without_extension.count(\"9\") > 3)\n        return \"No\";\n\
    \    if (file_name_without_extension[0] < 'a' || file_name_without_extension[0]\
    \ > 'z')\n        return \"No\";\n    if (file_name_without_extension[0] < 'A'\
    \ || file_name_without_extension[0] > 'Z')\n        return \"No\";\n    if (valid_extensions.count(file_extension)\
    \ == 0)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    int dot_index\
    \ = file_name.find(\".\");\n    string extension = file_name.substr(dot_index\
    \ + 1);\n    string name = file_name.substr(0, dot_index);\n    int digits = 0;\n\
    \    foreach(char c; name)\n    {\n        if(c >= '0' && c <= '9')\n        \
    \    digits++;\n    }\n    if(digits > 3)\n        return \"No\";\n    if(extension\
    \ != \"txt\" && extension != \"exe\" && extension != \"dll\")\n        return\
    \ \"No\";\n    if(name.length == 0)\n        return \"No\";\n    if(!(name[0]\
    \ >= 'a' && name[0] <= 'z') && !(name[0] >= 'A' && name[0] <= 'Z'))\n        return\
    \ \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\"\
    , \"exe\", \"dll\"];\n    string[] file_name_split = file_name.split(\".\");\n\
    \    if (file_name_split.length != 2)\n        return \"No\";\n    string file_name_without_extension\
    \ = file_name_split[0];\n    string file_extension = file_name_split[1];\n   \
    \ if (file_name_without_extension.length == 0)\n        return \"No\";\n    if\
    \ (file_name_without_extension.count(\"0\") + file_name_without_extension.count(\"\
    1\") + file_name_without_extension.count(\"2\") + file_name_without_extension.count(\"\
    3\") + file_name_without_extension.count(\"4\") + file_name_without_extension.count(\"\
    5\") + file_name_without_extension.count(\"6\") + file_name_without_extension.count(\"\
    7\") + file_name_without_extension.count(\"8\") + file_name_without_extension.count(\"\
    9\") > 3)\n        return \"No\";\n    if (file_name_without_extension[0] < 'a'\
    \ || file_name_without_extension[0] > 'z')\n        return \"No\";\n    if (file_name_without_extension[0]\
    \ < 'A' || file_name_without_extension[0] > 'Z')\n        return \"No\";\n   \
    \ if (valid_extensions.count(file_extension) == 0)\n        return \"No\";\n \
    \   return \"Yes\";\n}", "{\n    int count = 0;\n    int dot_count = 0;\n    int\
    \ dot_index = 0;\n    string extension = \"\";\n    string name = \"\";\n    foreach(i,\
    \ c; file_name)\n    {\n        if(c == '.')\n        {\n            dot_count++;\n\
    \            dot_index = i;\n        }\n        if(c >= '0' && c <= '9')\n   \
    \     {\n            count++;\n        }\n    }\n    if(count > 3 || dot_count\
    \ != 1)\n    {\n        return \"No\";\n    }\n    extension = file_name[dot_index+1..$];\n\
    \    name = file_name[0..dot_index-1];\n    if(extension != \"txt\" && extension\
    \ != \"exe\" && extension != \"dll\")\n    {\n        return \"No\";\n    }\n\
    \    if(name == \"\" || (name[0] < 'a' || name[0] > 'z') && (name[0] < 'A' ||\
    \ name[0] > 'Z'))\n    {\n        return \"No\";\n    }\n    return \"Yes\";\n\
    }", "{\n    int dot_index = file_name.find('.');\n    string extension = file_name.substr(dot_index\
    \ + 1);\n    string name = file_name.substr(0, dot_index);\n    int digits = 0;\n\
    \    foreach(c; name)\n    {\n        if(c >= '0' && c <= '9')\n            digits++;\n\
    \    }\n    if(digits > 3)\n        return \"No\";\n    if(extension != \"txt\"\
    \ && extension != \"exe\" && extension != \"dll\")\n        return \"No\";\n \
    \   if(name.length == 0)\n        return \"No\";\n    if(!(name[0] >= 'a' && name[0]\
    \ <= 'z') && !(name[0] >= 'A' && name[0] <= 'Z'))\n        return \"No\";\n  \
    \  return \"Yes\";\n}", "{\n    // TODO: Implement this function\n    //return\
    \ \"Yes\";\n    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n\
    \    int start_index = 0;\n    int end_index = 0;\n    string sub_string = \"\"\
    ;\n    string sub_string_1 = \"\";\n    string sub_string_2 = \"\";\n    string\
    \ sub_string_3 = \"\";\n    string sub_string_4 = \"\";\n    string sub_string_5\
    \ = \"\";\n    string sub_string_6 = \"\";\n    string sub_string_7 = \"\";\n\
    \    string sub_string_8 = \"\";\n    string sub_string_9 = \"\";\n    string\
    \ sub_string_10 = \"\";\n    string sub_string_11 = \"\";\n    string sub_string_12\
    \ = \"\";\n    string sub_string_13 = \"\";\n    string sub_string_14 = \"\";\n\
    \    string sub_string_15 = \"\";\n    string sub_string_16 = \"\";\n    string\
    \ sub_string_17 = \"\";\n    string sub_string_18 = \"\";\n    string sub_string_19\
    \ = \"\";\n    string sub_string_20 = \"\";\n    string sub_string_21 = \"\";\n\
    \    string sub_string_22 = \"\";\n    string sub_string_23 = \"\";\n    string\
    \ sub_string_24 = \"\";\n    string sub_string_25 = \"\";\n    string sub_string_26\
    \ = \"\";\n    string sub_string_27 = \"\";\n    string sub_string_28 = \"\";\n\
    \    string sub_string_29 = \"\";\n    string sub_string_30 = \"\";\n    string\
    \ sub_string_31 = \"\";\n    string sub_string_32 = \"\";\n    string sub_string_33\
    \ = \"\";\n    string sub_string_34 = \"\";\n    string sub_string_35 = \"\";\n\
    \    string sub_string_36 = \"\";\n    string sub_string_37 = \"\";\n    string\
    \ sub_string_38 = \"\";\n    string sub_string_39 = \"\";\n    string sub_string_40\
    \ = \"\";\n   ", "{\n    int dot_pos = file_name.find('.');\n    string ext =\
    \ file_name.substr(dot_pos+1);\n    string name = file_name.substr(0, dot_pos);\n\
    \    if(name.length == 0 || ext.length == 0)\n        return \"No\";\n    if(ext\
    \ != \"txt\" && ext != \"exe\" && ext != \"dll\")\n        return \"No\";\n  \
    \  if(name.count('0') + name.count('1') + name.count('2') + name.count('3') +\
    \ name.count('4') + name.count('5') + name.count('6') + name.count('7') + name.count('8')\
    \ + name.count('9') > 3)\n        return \"No\";\n    if(name[0] < 'a' || name[0]\
    \ > 'z' && name[0] < 'A' || name[0] > 'Z')\n        return \"No\";\n    return\
    \ \"Yes\";\n}", "{\n    import std.array;\n    import std.algorithm;\n    import\
    \ std.conv;\n    import std.range;\n    import std.string;\n    import std.typecons;\n\
    \    import std.math;\n    import std.regex;\n    import std.stdio;\n    import\
    \ std.typecons;\n    import std.math;\n    import std.regex;\n    import std.stdio;\n\
    \    import std.typecons;\n    import std.math;\n    import std.regex;\n    import\
    \ std.stdio;\n    import std.typecons;\n    import std.math;\n    import std.regex;\n\
    \    import std.stdio;\n    import std.typecons;\n    import std.math;\n    import\
    \ std.regex;\n    import std.stdio;\n    import std.typecons;\n    import std.math;\n\
    \    import std.regex;\n    import std.stdio;\n    import std.typecons;\n    import\
    \ std.math;\n    import std.regex;\n    import std.stdio;\n    import std.typecons;\n\
    \    import std.math;\n    import std.regex;\n    import std.stdio;\n    import\
    \ std.typecons;\n    import std.math;\n    import std.regex;\n    import std.stdio;\n\
    \    import std.typecons;\n    import std.math;\n    import std.regex;\n    import\
    \ std.stdio;\n    import std.typecons;\n    import std.math;\n    import std.regex;\n\
    \    import std.stdio;\n    import std.typecons;\n    import std.math;\n    import\
    \ std.regex;\n    import std.stdio;\n    import std.typecons;\n    import std.math;\n\
    \    import std.regex;\n    import std.stdio;\n    import std.typecons;\n    import\
    \ std.math;\n    import std.regex;\n    import std.stdio;\n    import std.typecons;\n\
    \    import std.math;\n    import std.regex;\n    import std.stdio;\n    import\
    \ std.typecons;\n", "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"\
    dll\"];\n    string[] file_name_parts = split(file_name, \".\");\n    if (file_name_parts.length\
    \ != 2)\n        return \"No\";\n    if (file_name_parts[0].length == 0)\n   \
    \     return \"No\";\n    if (file_name_parts[0].count!(c => '0' <= c && c <=\
    \ '9') > 3)\n        return \"No\";\n    if (file_name_parts[0][0] < 'a' || 'z'\
    \ < file_name_parts[0][0])\n        return \"No\";\n    if (file_name_parts[0][0]\
    \ < 'A' || 'Z' < file_name_parts[0][0])\n        return \"No\";\n    if (!valid_extensions.canFind(file_name_parts[1]))\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    int dot_pos = file_name.find('.');\n\
    \    string ext = file_name.substr(dot_pos + 1);\n    if (ext == \"txt\" || ext\
    \ == \"exe\" || ext == \"dll\")\n    {\n        string name = file_name.substr(0,\
    \ dot_pos);\n        if (name.length > 0)\n        {\n            int count =\
    \ 0;\n            foreach (c; name)\n            {\n                if (c >= '0'\
    \ && c <= '9')\n                    count++;\n            }\n            if (count\
    \ <= 3)\n            {\n                if (name[0] >= 'a' && name[0] <= 'z' ||\
    \ name[0] >= 'A' && name[0] <= 'Z')\n                    return \"Yes\";\n   \
    \         }\n        }\n    }\n    return \"No\";\n}", "{\n    // Your code here\n\
    \    int dot_count = 0;\n    int digit_count = 0;\n    int first_letter = 0;\n\
    \    int last_letter = 0;\n    string extension = \"\";\n    foreach(i, c; file_name)\n\
    \    {\n        if(c == '.')\n        {\n            dot_count++;\n          \
    \  last_letter = i;\n        }\n        if(c >= '0' && c <= '9')\n        {\n\
    \            digit_count++;\n        }\n        if(i == 0 && (c >= 'a' && c <=\
    \ 'z' || c >= 'A' && c <= 'Z'))\n        {\n            first_letter = 1;\n  \
    \      }\n    }\n    extension = file_name[last_letter + 1 .. $];\n    if(dot_count\
    \ != 1 || digit_count > 3 || first_letter == 0 || \n        (extension != \"txt\"\
    \ && extension != \"exe\" && extension != \"dll\"))\n    {\n        return \"\
    No\";\n    }\n    return \"Yes\";\n}", "{\n    string[] valid_extensions = [\"\
    txt\", \"exe\", \"dll\"];\n    int dot_index = file_name.find(\".\");\n    if\
    \ (dot_index == -1) return \"No\";\n    string extension = file_name[dot_index+1..$];\n\
    \    if (!valid_extensions.find(extension)) return \"No\";\n    string name =\
    \ file_name[0..dot_index-1];\n    if (name.length == 0) return \"No\";\n    if\
    \ (name[0] < 'a' || name[0] > 'z' && name[0] < 'A' || name[0] > 'Z') return \"\
    No\";\n    int digits_count = 0;\n    foreach (c; name)\n    {\n        if (c\
    \ >= '0' && c <= '9')\n        {\n            digits_count++;\n            if\
    \ (digits_count > 3) return \"No\";\n        }\n    }\n    return \"Yes\";\n}",
  "{\n    import std.algorithm : count;\n    import std.conv : to;\n    import std.range\
    \ : take, drop;\n    import std.string : startsWith;\n    import std.array : array;\n\
    \    import std.ascii : isAlpha;\n    import std.math : isNaN;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tupleof;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tupleof;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tupleof;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tupleof;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tupleof;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tupleof;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tupleof;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tupleof;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tupleof;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tupleof;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tupleof;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tupleof;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tupleof;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n", "{\n    string[] valid_extensions = [\"txt\", \"exe\"\
    , \"dll\"];\n    int dot_index = file_name.find(\".\");\n    string extension\
    \ = file_name[dot_index+1..$];\n    string name = file_name[0..dot_index-1];\n\
    \    int digits_count = 0;\n    foreach(c; name)\n    {\n        if(c.isDigit)\n\
    \            digits_count++;\n    }\n    if(digits_count > 3)\n        return\
    \ \"No\";\n    if(!name.length || !name[0].isLetter)\n        return \"No\";\n\
    \    if(!extension.length || !valid_extensions.canFind(extension))\n        return\
    \ \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\"\
    , \"exe\", \"dll\"];\n    string[] file_name_parts = file_name.split(\".\");\n\
    \    if (file_name_parts.length != 2)\n        return \"No\";\n    if (file_name_parts[0].length\
    \ == 0)\n        return \"No\";\n    if (file_name_parts[0].count(\"0-9\") > 3)\n\
    \        return \"No\";\n    if (file_name_parts[0][0] < 'a' || file_name_parts[0][0]\
    \ > 'z')\n        return \"No\";\n    if (file_name_parts[1] !in valid_extensions)\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts = file_name.split(\"\
    .\");\n    if (file_name_parts.length != 2)\n        return \"No\";\n    if (file_name_parts[0].length\
    \ == 0)\n        return \"No\";\n    if (file_name_parts[0].count(\"0\", \"9\"\
    ) > 3)\n        return \"No\";\n    if (file_name_parts[0][0] < 'a' || file_name_parts[0][0]\
    \ > 'z')\n        return \"No\";\n    if (valid_extensions.find(file_name_parts[1])\
    \ == -1)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts = file_name.split(\"\
    .\");\n    if (file_name_parts.length != 2)\n        return \"No\";\n    if (file_name_parts[0].length\
    \ == 0)\n        return \"No\";\n    if (file_name_parts[0].count(\"0123456789\"\
    ) > 3)\n        return \"No\";\n    if (file_name_parts[0][0] < 'a' || file_name_parts[0][0]\
    \ > 'z')\n        return \"No\";\n    if (valid_extensions.find(file_name_parts[1])\
    \ == -1)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts = file_name.split(\"\
    .\");\n    if (file_name_parts.length != 2)\n        return \"No\";\n    if (file_name_parts[0].filter!(a\
    \ => a.isDigit).length > 3)\n        return \"No\";\n    if (file_name_parts[0].length\
    \ == 0 || !file_name_parts[0][0].isLetter)\n        return \"No\";\n    if (!valid_extensions.any!(a\
    \ => a == file_name_parts[1]))\n        return \"No\";\n    return \"Yes\";\n}",
  "{\n    int dot_count = 0;\n    int digit_count = 0;\n    int dot_position = 0;\n\
    \    string extension;\n    foreach(i, c; file_name)\n    {\n        if(c == '.')\n\
    \        {\n            dot_count++;\n            dot_position = i;\n        }\n\
    \        if(c >= '0' && c <= '9')\n            digit_count++;\n    }\n    if(dot_count\
    \ != 1 || digit_count > 3)\n        return \"No\";\n    extension = file_name[dot_position\
    \ + 1 .. $];\n    if(extension != \"txt\" && extension != \"exe\" && extension\
    \ != \"dll\")\n        return \"No\";\n    if(file_name[0] < 'a' || file_name[0]\
    \ > 'z' && file_name[0] < 'A' || file_name[0] > 'Z')\n        return \"No\";\n\
    \    return \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\", \"exe\"\
    , \"dll\"];\n    auto dot_index = file_name.find(\".\");\n    if (dot_index ==\
    \ -1)\n        return \"No\";\n    auto extension = file_name[dot_index + 1 ..\
    \ $];\n    if (extension.count(\"0\" .. \"9\") > 3)\n        return \"No\";\n\
    \    if (valid_extensions.find(extension) == -1)\n        return \"No\";\n   \
    \ auto name = file_name[0 .. dot_index];\n    if (name.empty || !name[0].isAlpha)\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    int dot_index = file_name.find('.');\n\
    \    string extension = file_name.substr(dot_index + 1);\n    string name = file_name.substr(0,\
    \ dot_index);\n    int digits = 0;\n    foreach(char c; name)\n    {\n       \
    \ if(c >= '0' && c <= '9')\n            digits++;\n    }\n    if(digits > 3)\n\
    \        return \"No\";\n    if(extension != \"txt\" && extension != \"exe\" &&\
    \ extension != \"dll\")\n        return \"No\";\n    if(name.length == 0)\n  \
    \      return \"No\";\n    if(name[0] < 'a' || name[0] > 'z' && name[0] < 'A'\
    \ || name[0] > 'Z')\n        return \"No\";\n    return \"Yes\";\n}", "{\n   \
    \ int count = 0;\n    int dot_count = 0;\n    int len = file_name.length;\n  \
    \  foreach(i; 0..len)\n    {\n        if(file_name[i] == '.')\n        {\n   \
    \         dot_count++;\n        }\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9')\n        {\n            count++;\n        }\n    }\n    if(count > 3\
    \ || dot_count != 1)\n    {\n        return \"No\";\n    }\n    else\n    {\n\
    \        string[] arr = file_name.split(\".\");\n        if(arr[0].length == 0\
    \ || (arr[0][0] < 'a' || arr[0][0] > 'z') && (arr[0][0] < 'A' || arr[0][0] > 'Z'))\n\
    \        {\n            return \"No\";\n        }\n        else\n        {\n \
    \           if(arr[1] == \"txt\" || arr[1] == \"exe\" || arr[1] == \"dll\")\n\
    \            {\n                return \"Yes\";\n            }\n            else\n\
    \            {\n                return \"No\";\n            }\n        }\n   \
    \ }\n}", "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n  \
    \  string[] file_name_split = file_name.split(\".\");\n    if (file_name_split.length\
    \ != 2)\n        return \"No\";\n    if (file_name_split[0].length == 0)\n   \
    \     return \"No\";\n    if (file_name_split[0].filter!(x => x.isDigit).length\
    \ > 3)\n        return \"No\";\n    if (file_name_split[0].filter!(x => x.isLetter).length\
    \ == 0)\n        return \"No\";\n    if (valid_extensions.filter!(x => x == file_name_split[1]).length\
    \ == 0)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    int dot_index\
    \ = file_name.find('.');\n    if (dot_index == -1)\n        return \"No\";\n \
    \   string prefix = file_name[0..dot_index];\n    string suffix = file_name[dot_index+1..$];\n\
    \    if (prefix.length == 0 || !isAlpha(prefix[0]))\n        return \"No\";\n\
    \    if (suffix != \"txt\" && suffix != \"exe\" && suffix != \"dll\")\n      \
    \  return \"No\";\n    int digit_count = 0;\n    foreach (c; prefix)\n    {\n\
    \        if (isDigit(c))\n            digit_count++;\n    }\n    if (digit_count\
    \ > 3)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts = file_name.split(\"\
    .\");\n    if (file_name_parts.length != 2)\n        return \"No\";\n    if (file_name_parts[0].length\
    \ == 0)\n        return \"No\";\n    if (file_name_parts[0].count(\"0-9\") > 3)\n\
    \        return \"No\";\n    if (file_name_parts[0][0] < 'a' || file_name_parts[0][0]\
    \ > 'z')\n        return \"No\";\n    if (valid_extensions.indexOf(file_name_parts[1])\
    \ == -1)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    int dot_index = file_name.find(\".\");\n\
    \    if (dot_index == -1)\n        return \"No\";\n    string extension = file_name[dot_index+1..$];\n\
    \    if (!valid_extensions.canFind(extension))\n        return \"No\";\n    string\
    \ name = file_name[0..dot_index-1];\n    if (name.length == 0)\n        return\
    \ \"No\";\n    if (!isAlpha(name[0]))\n        return \"No\";\n    int count =\
    \ 0;\n    foreach (c; name)\n    {\n        if (isDigit(c))\n            count++;\n\
    \    }\n    if (count > 3)\n        return \"No\";\n    return \"Yes\";\n}", "{\n\
    \    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    int count_after_dot\
    \ = 0;\n    int count_before_dot = 0;\n    int count_digits = 0;\n    string str_after_dot\
    \ = \"\";\n    string str_before_dot = \"\";\n    string result = \"\";\n    foreach(char\
    \ c; file_name)\n    {\n        if(c == '.')\n        {\n            dot_count++;\n\
    \            dot_index = count;\n        }\n        if(c >= '0' && c <= '9')\n\
    \        {\n            count_digits++;\n        }\n        count++;\n    }\n\
    \    if(dot_count != 1 || count_digits > 3)\n    {\n        result = \"No\";\n\
    \    }\n    else\n    {\n        str_after_dot = file_name[dot_index+1..$];\n\
    \        str_before_dot = file_name[0..dot_index-1];\n        foreach(char c;\
    \ str_after_dot)\n        {\n            count_after_dot++;\n        }\n     \
    \   foreach(char c; str_before_dot)\n        {\n            count_before_dot++;\n\
    \        }\n        if(count_after_dot == 3 && count_before_dot > 0 && \n    \
    \        (str_after_dot == \"txt\" || str_after_dot == \"exe\" || str_after_dot\
    \ == \"dll\") &&\n            (str_before_dot[0] >= 'a' && str_before_dot[0] <=\
    \ 'z' || str_before_dot[0] >= 'A' && str_before_dot[0] <= 'Z'))\n        {\n \
    \           result = \"Yes\";\n        }\n        else\n        {\n          \
    \  result = \"No\";\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts\
    \ = file_name.split(\".\");\n    if (file_name_parts.length != 2)\n        return\
    \ \"No\";\n    if (file_name_parts[0].length == 0)\n        return \"No\";\n \
    \   if (file_name_parts[0].count(\"0-9\") > 3)\n        return \"No\";\n    if\
    \ (file_name_parts[0][0] < 'a' || file_name_parts[0][0] > 'z')\n        return\
    \ \"No\";\n    if (valid_extensions.count(file_name_parts[1]) == 0)\n        return\
    \ \"No\";\n    return \"Yes\";\n}", "{\n    int dot_index = file_name.find('.');\n\
    \    string extension = file_name.substr(dot_index + 1);\n    string name = file_name.substr(0,\
    \ dot_index);\n    int digits = 0;\n    foreach(char c; name)\n    {\n       \
    \ if(c >= '0' && c <= '9')\n            digits++;\n    }\n    if(digits > 3)\n\
    \        return \"No\";\n    if(extension != \"txt\" && extension != \"exe\" &&\
    \ extension != \"dll\")\n        return \"No\";\n    if(name.length == 0)\n  \
    \      return \"No\";\n    if(!(name[0] >= 'a' && name[0] <= 'z') && !(name[0]\
    \ >= 'A' && name[0] <= 'Z'))\n        return \"No\";\n    return \"Yes\";\n}",
  "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    int dot_index\
    \ = file_name.find(\".\");\n    string extension = file_name[dot_index+1..$];\n\
    \    string name = file_name[0..dot_index-1];\n    int digits_count = 0;\n   \
    \ foreach(char c; name)\n    {\n        if(isdigit(c))\n            digits_count++;\n\
    \    }\n    if(digits_count > 3)\n        return \"No\";\n    if(!(extension in\
    \ valid_extensions))\n        return \"No\";\n    if(!isalpha(name[0]))\n    \
    \    return \"No\";\n    return \"Yes\";\n}", "{\n    int dot_index = file_name.find('.');\n\
    \    string extension = file_name.substr(dot_index + 1);\n    string name = file_name.substr(0,\
    \ dot_index);\n    int digits = 0;\n    foreach(c; name)\n    {\n        if(c\
    \ >= '0' && c <= '9')\n            digits++;\n    }\n    if(digits > 3)\n    \
    \    return \"No\";\n    if(extension != \"txt\" && extension != \"exe\" && extension\
    \ != \"dll\")\n        return \"No\";\n    if(name.length == 0)\n        return\
    \ \"No\";\n    if(name[0] < 'a' || name[0] > 'z' && name[0] < 'A' || name[0] >\
    \ 'Z')\n        return \"No\";\n    return \"Yes\";\n}", "{\n    auto dot_pos\
    \ = file_name.find('.');\n    if (dot_pos == -1)\n        return \"No\";\n   \
    \ auto ext = file_name.substr(dot_pos + 1);\n    if (ext != \"txt\" && ext !=\
    \ \"exe\" && ext != \"dll\")\n        return \"No\";\n    auto name = file_name.substr(0,\
    \ dot_pos);\n    if (name.length == 0)\n        return \"No\";\n    if (name[0]\
    \ < 'a' || name[0] > 'z' && name[0] < 'A' || name[0] > 'Z')\n        return \"\
    No\";\n    int count = 0;\n    for (auto c : name)\n        if (c >= '0' && c\
    \ <= '9')\n            count++;\n    if (count > 3)\n        return \"No\";\n\
    \    return \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\", \"exe\"\
    , \"dll\"];\n    int dot_index = file_name.find(\".\");\n    string extension\
    \ = file_name[dot_index+1..$];\n    string name = file_name[0..dot_index-1];\n\
    \    int digits_count = 0;\n    foreach(char c; name)\n    {\n        if(c >=\
    \ '0' && c <= '9')\n            digits_count++;\n    }\n    if(digits_count >\
    \ 3)\n        return \"No\";\n    if(extension.length == 0)\n        return \"\
    No\";\n    if(!valid_extensions.canFind(extension))\n        return \"No\";\n\
    \    if(name.length == 0)\n        return \"No\";\n    if(!(name[0] >= 'a' &&\
    \ name[0] <= 'z') && !(name[0] >= 'A' && name[0] <= 'Z'))\n        return \"No\"\
    ;\n    return \"Yes\";\n}\n/*\nCreate a function which takes a string representing\
    \ a file's name, and returns\n    'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n    A file's name is considered to be valid if and only if\
    \ all the following conditions \n    are met:\n    - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    - The file's name contains\
    \ exactly one dot '.'\n    - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    Examples:\n    >>> file_name_check(\"example.txt\")\n    \"Yes\"\n    >>>\
    \ file_name_check(\"1example.dll\")\n    \"No\"\n    \n*/\nstring file_name_check(string\
    \ file_name) \n{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n\
    \    int dot_index = file_name.find(\".\");\n    string", "{\n    int dot_index\
    \ = file_name.find('.');\n    if (dot_index == -1)\n        return \"No\";\n \
    \   string file_name_before_dot = file_name[0..dot_index];\n    string file_name_after_dot\
    \ = file_name[dot_index+1..$];\n    if (file_name_before_dot.length == 0 || file_name_after_dot.length\
    \ == 0)\n        return \"No\";\n    if (file_name_before_dot.count('0','9') >\
    \ 3)\n        return \"No\";\n    if (file_name_before_dot[0] < 'a' || file_name_before_dot[0]\
    \ > 'z')\n        return \"No\";\n    if (file_name_after_dot != \"txt\" && file_name_after_dot\
    \ != \"exe\" && file_name_after_dot != \"dll\")\n        return \"No\";\n    return\
    \ \"Yes\";\n}", "{\n    int dot_pos = file_name.find('.');\n    if (dot_pos ==\
    \ -1) return \"No\";\n    string before_dot = file_name[0..dot_pos];\n    string\
    \ after_dot = file_name[dot_pos+1..$];\n    if (before_dot.length == 0) return\
    \ \"No\";\n    if (before_dot.count('0','9') > 3) return \"No\";\n    if (after_dot\
    \ != \"txt\" && after_dot != \"exe\" && after_dot != \"dll\") return \"No\";\n\
    \    if (before_dot[0] < 'a' || before_dot[0] > 'z') return \"No\";\n    return\
    \ \"Yes\";\n}\n/*\nCreate a function which takes a string representing a file's\
    \ name, and returns\n    the file's extension.\n    A file's extension is the\
    \ substring after the last dot '.' in the file's name.\n    If the file's name\
    \ does not contain a dot, the function should return an empty string.\n    Examples:\n\
    \    >>> file_extension(\"example.txt\")\n    \"txt\"\n    >>> file_extension(\"\
    example\")\n    \"\"\n*/\nstring file_extension(string file_name) \n{\n    int\
    \ dot_pos = file_name.rfind('.');\n    if (dot_pos == -1) return \"\";\n    return\
    \ file_name[dot_pos+1..$];\n}\n/*\nCreate a function which takes a string representing\
    \ a file's name, and returns\n    the file's name without the extension.\n   \
    \ A file's extension is the substring after the last dot '.' in the file's name.\n\
    \    If the file's name does not contain a dot, the function should return the\
    \ file's name.\n    Examples:\n    >>> file_name_without_extension(\"example.txt\"\
    )\n    \"example\"\n    >>> file_name_without_extension(\"example\")\n    \"example\"\
    \n*/\nstring file_name_without_extension(string file_name) \n{\n    int dot_pos\
    \ = file_name.rfind('.');\n    if (dot_pos == -1) return file_name;\n    return\
    \ file", "{\n    int dot_pos = file_name.find('.');\n    if (dot_pos == -1)\n\
    \        return \"No\";\n    string extension = file_name.substr(dot_pos + 1);\n\
    \    if (extension != \"txt\" && extension != \"exe\" && extension != \"dll\"\
    )\n        return \"No\";\n    string name = file_name.substr(0, dot_pos);\n \
    \   if (name.length == 0)\n        return \"No\";\n    int digits = 0;\n    foreach\
    \ (c; name)\n    {\n        if (c >= '0' && c <= '9')\n            digits++;\n\
    \        else if (!(c >= 'a' && c <= 'z') && !(c >= 'A' && c <= 'Z'))\n      \
    \      return \"No\";\n    }\n    if (digits > 3)\n        return \"No\";\n  \
    \  return \"Yes\";\n}", "{\n    int dot_index = file_name.find(\".\");\n    string\
    \ extension = file_name.substr(dot_index + 1);\n    string name = file_name.substr(0,\
    \ dot_index);\n    if (extension != \"txt\" && extension != \"exe\" && extension\
    \ != \"dll\")\n        return \"No\";\n    if (name.length == 0)\n        return\
    \ \"No\";\n    if (name[0] < 'a' || name[0] > 'z' && name[0] < 'A' || name[0]\
    \ > 'Z')\n        return \"No\";\n    int digits = 0;\n    foreach (c; name)\n\
    \    {\n        if (c >= '0' && c <= '9')\n            digits++;\n    }\n    if\
    \ (digits > 3)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    int count\
    \ = 0;\n    int dot_index = 0;\n    int dot_count = 0;\n    int i = 0;\n    string\
    \ extension;\n    string first_part;\n    string[] valid_extensions = [\"txt\"\
    , \"exe\", \"dll\"];\n    foreach(char c; file_name)\n    {\n        if(c == '.')\n\
    \        {\n            dot_index = i;\n            dot_count++;\n        }\n\
    \        if(c >= '0' && c <= '9')\n        {\n            count++;\n        }\n\
    \        i++;\n    }\n    if(count > 3 || dot_count != 1)\n    {\n        return\
    \ \"No\";\n    }\n    first_part = file_name[0..dot_index];\n    extension = file_name[dot_index+1..$];\n\
    \    if(first_part.length == 0 || (first_part[0] < 'a' || first_part[0] > 'z')\
    \ && (first_part[0] < 'A' || first_part[0] > 'Z'))\n    {\n        return \"No\"\
    ;\n    }\n    if(extension !in valid_extensions)\n    {\n        return \"No\"\
    ;\n    }\n    return \"Yes\";\n}", "{\n    int count = 0;\n    int dot_count =\
    \ 0;\n    int dot_index = 0;\n    int i = 0;\n    int j = 0;\n    string sub_string_1;\n\
    \    string sub_string_2;\n    string[] valid_extensions = [\"txt\", \"exe\",\
    \ \"dll\"];\n    foreach(in char c; file_name)\n    {\n        if(c == '.')\n\
    \        {\n            dot_count++;\n            dot_index = i;\n        }\n\
    \        if(c >= '0' && c <= '9')\n        {\n            count++;\n        }\n\
    \        i++;\n    }\n    if(count > 3 || dot_count != 1)\n    {\n        return\
    \ \"No\";\n    }\n    sub_string_1 = file_name[0..dot_index];\n    sub_string_2\
    \ = file_name[dot_index+1..$];\n    if(sub_string_1.length == 0 || (sub_string_1[0]\
    \ < 'a' || sub_string_1[0] > 'z') && (sub_string_1[0] < 'A' || sub_string_1[0]\
    \ > 'Z'))\n    {\n        return \"No\";\n    }\n    foreach(in string s; valid_extensions)\n\
    \    {\n        if(s == sub_string_2)\n        {\n            return \"Yes\";\n\
    \        }\n    }\n    return \"No\";\n}", "{\n    int count = 0;\n    int dot_count\
    \ = 0;\n    string result = \"Yes\";\n    foreach(char c; file_name)\n    {\n\
    \        if(c == '.')\n        {\n            dot_count++;\n        }\n      \
    \  if(c >= '0' && c <= '9')\n        {\n            count++;\n        }\n    }\n\
    \    if(count > 3 || dot_count != 1)\n    {\n        result = \"No\";\n    }\n\
    \    else\n    {\n        string[] parts = file_name.split(\".\");\n        if(parts[0].length\
    \ == 0 || parts[0][0] < 'a' || parts[0][0] > 'z')\n        {\n            result\
    \ = \"No\";\n        }\n        else\n        {\n            if(parts[1] != \"\
    txt\" && parts[1] != \"exe\" && parts[1] != \"dll\")\n            {\n        \
    \        result = \"No\";\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    int\
    \ dot_index = file_name.indexOf('.');\n    if (dot_index == -1)\n        return\
    \ \"No\";\n    string extension = file_name.substr(dot_index + 1);\n    if (extension.length\
    \ == 0 || valid_extensions.indexOf(extension) == -1)\n        return \"No\";\n\
    \    string name = file_name.substr(0, dot_index);\n    if (name.length == 0)\n\
    \        return \"No\";\n    if (name[0] < 'a' || name[0] > 'z' && name[0] < 'A'\
    \ || name[0] > 'Z')\n        return \"No\";\n    int digits_count = 0;\n    foreach\
    \ (c; name)\n    {\n        if (c >= '0' && c <= '9')\n            digits_count++;\n\
    \    }\n    if (digits_count > 3)\n        return \"No\";\n    return \"Yes\"\
    ;\n}", "{\n    int count = 0;\n    int dot_count = 0;\n    int len = file_name.length;\n\
    \    string extension = \"\";\n    string name = \"\";\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    for (int i = 0; i < len; i++)\n    {\n \
    \       if (file_name[i] == '.')\n        {\n            dot_count++;\n      \
    \      if (dot_count > 1)\n            {\n                return \"No\";\n   \
    \         }\n            else\n            {\n                extension = file_name[i+1..$];\n\
    \                name = file_name[0..i-1];\n            }\n        }\n       \
    \ else if (file_name[i] >= '0' && file_name[i] <= '9')\n        {\n          \
    \  count++;\n            if (count > 3)\n            {\n                return\
    \ \"No\";\n            }\n        }\n    }\n    if (name.length == 0)\n    {\n\
    \        return \"No\";\n    }\n    else if (name[0] < 'a' || name[0] > 'z' &&\
    \ name[0] < 'A' || name[0] > 'Z')\n    {\n        return \"No\";\n    }\n    else\
    \ if (extension.length == 0)\n    {\n        return \"No\";\n    }\n    else if\
    \ (extension !in valid_extensions)\n    {\n        return \"No\";\n    }\n   \
    \ else\n    {\n        return \"Yes\";\n    }\n}", "{\n    int dot_index = file_name.find('.');\n\
    \    if (dot_index == -1)\n        return \"No\";\n    string name = file_name[0..dot_index];\n\
    \    string ext = file_name[dot_index+1..$];\n    if (name.length == 0 || !(name[0]\
    \ in ['a'..'z', 'A'..'Z']))\n        return \"No\";\n    if (ext !in [\"txt\"\
    , \"exe\", \"dll\"])\n        return \"No\";\n    int count = 0;\n    foreach\
    \ (c; name)\n        if (c in ['0'..'9'])\n            count++;\n    if (count\
    \ > 3)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    auto dot_pos\
    \ = file_name.find(\".\");\n    if (dot_pos == -1)\n        return \"No\";\n \
    \   auto dot_pos_end = file_name.find(\".\", dot_pos + 1);\n    if (dot_pos_end\
    \ != -1)\n        return \"No\";\n    if (dot_pos == 0)\n        return \"No\"\
    ;\n    if (file_name[dot_pos + 1] == '.')\n        return \"No\";\n    auto file_name_without_ext\
    \ = file_name[0..dot_pos];\n    auto file_name_ext = file_name[dot_pos + 1..$];\n\
    \    if (file_name_ext != \"txt\" && file_name_ext != \"exe\" && file_name_ext\
    \ != \"dll\")\n        return \"No\";\n    if (file_name_without_ext.count('0')\
    \ + file_name_without_ext.count('1') + \n        file_name_without_ext.count('2')\
    \ + file_name_without_ext.count('3') + \n        file_name_without_ext.count('4')\
    \ + file_name_without_ext.count('5') + \n        file_name_without_ext.count('6')\
    \ + file_name_without_ext.count('7') + \n        file_name_without_ext.count('8')\
    \ + file_name_without_ext.count('9') > 3)\n        return \"No\";\n    if (file_name_without_ext.count('0')\
    \ + file_name_without_ext.count('1') + \n        file_name_without_ext.count('2')\
    \ + file_name_without_ext.count('3') + \n        file_name_without_ext.count('4')\
    \ + file_name_without_ext.count('5') + \n        file_name_without_ext.count('6')\
    \ + file_name_without_ext.count('7') + \n        file_name_without_ext.count('8')\
    \ + file_name_without_ext.count('9') == file_name_without_ext.length)\n      \
    \  return \"No\";", "{\n    int dot_index = file_name.find('.');\n    if (dot_index\
    \ == -1)\n        return \"No\";\n    string extension = file_name.substr(dot_index\
    \ + 1);\n    if (extension != \"txt\" && extension != \"exe\" && extension !=\
    \ \"dll\")\n        return \"No\";\n    string name = file_name.substr(0, dot_index);\n\
    \    if (name.length == 0)\n        return \"No\";\n    if (name[0] < 'a' || name[0]\
    \ > 'z' && name[0] < 'A' || name[0] > 'Z')\n        return \"No\";\n    int digits\
    \ = 0;\n    foreach (c; name)\n    {\n        if (c >= '0' && c <= '9')\n    \
    \        digits++;\n    }\n    if (digits > 3)\n        return \"No\";\n    return\
    \ \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"\
    ];\n    string[] file_name_parts = file_name.split(\".\");\n    if (file_name_parts.length\
    \ != 2)\n        return \"No\";\n    if (file_name_parts[0].length == 0)\n   \
    \     return \"No\";\n    if (file_name_parts[0].count(\"0-9\") > 3)\n       \
    \ return \"No\";\n    if (file_name_parts[0][0] < 'a' || file_name_parts[0][0]\
    \ > 'z')\n        return \"No\";\n    if (valid_extensions.find(file_name_parts[1])\
    \ == -1)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string result\
    \ = \"No\";\n    int dot_index = file_name.find(\".\");\n    if (dot_index !=\
    \ -1)\n    {\n        string before_dot = file_name[0..dot_index];\n        string\
    \ after_dot = file_name[dot_index+1..$];\n        if (before_dot.length > 0 &&\
    \ before_dot[0] >= 'a' && before_dot[0] <= 'z' ||\n            before_dot[0] >=\
    \ 'A' && before_dot[0] <= 'Z')\n        {\n            if (after_dot == \"txt\"\
    \ || after_dot == \"exe\" || after_dot == \"dll\")\n            {\n          \
    \      int count = 0;\n                foreach (c; before_dot)\n             \
    \   {\n                    if (c >= '0' && c <= '9')\n                    {\n\
    \                        count++;\n                    }\n                }\n\
    \                if (count <= 3)\n                {\n                    result\
    \ = \"Yes\";\n                }\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    // TODO: implement this function\n    //return \"Yes\";\n    int dot_pos\
    \ = file_name.find('.');\n    if (dot_pos == -1)\n        return \"No\";\n   \
    \ string pre_dot = file_name[0..dot_pos];\n    string post_dot = file_name[dot_pos+1..$];\n\
    \    if (pre_dot.length == 0 || !isAlpha(pre_dot[0]))\n        return \"No\";\n\
    \    if (post_dot != \"txt\" && post_dot != \"exe\" && post_dot != \"dll\")\n\
    \        return \"No\";\n    int num_digits = 0;\n    foreach (c; pre_dot)\n \
    \   {\n        if (isDigit(c))\n            num_digits++;\n    }\n    if (num_digits\
    \ > 3)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    int count = 0;\n\
    \    int dot_count = 0;\n    int dot_index = 0;\n    int len = file_name.length;\n\
    \    string sub_string;\n    string sub_string2;\n    foreach(i; 0..len)\n   \
    \ {\n        if(file_name[i] == '.')\n        {\n            dot_count++;\n  \
    \          dot_index = i;\n        }\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9')\n        {\n            count++;\n        }\n    }\n    if(count > 3)\n\
    \    {\n        return \"No\";\n    }\n    if(dot_count != 1)\n    {\n       \
    \ return \"No\";\n    }\n    sub_string = file_name[0..dot_index];\n    sub_string2\
    \ = file_name[dot_index+1..len];\n    if(sub_string.length == 0)\n    {\n    \
    \    return \"No\";\n    }\n    if(sub_string[0] < 'a' || sub_string[0] > 'z')\n\
    \    {\n        if(sub_string[0] < 'A' || sub_string[0] > 'Z')\n        {\n  \
    \          return \"No\";\n        }\n    }\n    if(sub_string2 != \"txt\" &&\
    \ sub_string2 != \"exe\" && sub_string2 != \"dll\")\n    {\n        return \"\
    No\";\n    }\n    return \"Yes\";\n}", "{\n    int dot_index = file_name.find('.');\n\
    \    string extension = file_name.substr(dot_index + 1);\n    string name = file_name.substr(0,\
    \ dot_index);\n    int digits = 0;\n    foreach(char c; name)\n    {\n       \
    \ if(c >= '0' && c <= '9')\n            digits++;\n    }\n    if(digits > 3)\n\
    \        return \"No\";\n    if(extension != \"txt\" && extension != \"exe\" &&\
    \ extension != \"dll\")\n        return \"No\";\n    if(name.length == 0)\n  \
    \      return \"No\";\n    if(name[0] < 'a' || name[0] > 'z' && name[0] < 'A'\
    \ || name[0] > 'Z')\n        return \"No\";\n    return \"Yes\";\n}", "{\n   \
    \ int dot_index = file_name.find('.');\n    string extension = file_name.substr(dot_index\
    \ + 1);\n    string name = file_name.substr(0, dot_index);\n    int digits = 0;\n\
    \    foreach(char c; name)\n    {\n        if(c >= '0' && c <= '9')\n        \
    \    digits++;\n    }\n    if(digits > 3)\n        return \"No\";\n    if(extension\
    \ != \"txt\" && extension != \"exe\" && extension != \"dll\")\n        return\
    \ \"No\";\n    if(name.length == 0)\n        return \"No\";\n    if(name[0] <\
    \ 'a' || name[0] > 'z' && name[0] < 'A' || name[0] > 'Z')\n        return \"No\"\
    ;\n    return \"Yes\";\n}\n/*\nCreate a function which takes a string representing\
    \ a file's name, and returns\n    'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n    A file's name is considered to be valid if and only if\
    \ all the following conditions \n    are met:\n    - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    - The file's name contains\
    \ exactly one dot '.'\n    - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    Examples:\n    >>> file_name_check(\"example.txt\")\n    \"Yes\"\n    >>>\
    \ file_name_check(\"1example.dll\")\n    \"No\"\n    \n*/\nstring file_name_check(string\
    \ file_name) \n{\n    int dot_index = file_name.find('.');\n    string extension\
    \ = file_name.substr(dot_index + 1);\n    string name = file_name.substr(0, dot_index);\n\
    \    int digits = 0;\n    foreach(char c; name)\n    {\n        if(c", "{\n  \
    \  int count = 0;\n    int dot_count = 0;\n    bool valid = true;\n    foreach(char\
    \ c; file_name)\n    {\n        if(c == '.')\n        {\n            dot_count++;\n\
    \        }\n        if(c >= '0' && c <= '9')\n        {\n            count++;\n\
    \        }\n    }\n    if(count > 3 || dot_count != 1)\n    {\n        valid =\
    \ false;\n    }\n    else\n    {\n        string[] parts = file_name.split(\"\
    .\");\n        if(parts[0].length == 0 || !(parts[0][0] >= 'a' && parts[0][0]\
    \ <= 'z') || !(parts[0][0] >= 'A' && parts[0][0] <= 'Z'))\n        {\n       \
    \     valid = false;\n        }\n        else\n        {\n            if(parts[1]\
    \ != \"txt\" && parts[1] != \"exe\" && parts[1] != \"dll\")\n            {\n \
    \               valid = false;\n            }\n        }\n    }\n    if(valid)\n\
    \    {\n        return \"Yes\";\n    }\n    else\n    {\n        return \"No\"\
    ;\n    }\n}", "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n\
    \    int dot_index = file_name.find(\".\");\n    if (dot_index == -1)\n      \
    \  return \"No\";\n    string file_name_without_extension = file_name[0..dot_index];\n\
    \    string file_extension = file_name[dot_index+1..$];\n    if (file_name_without_extension.length\
    \ == 0 ||\n        file_name_without_extension[0] < 'a' ||\n        file_name_without_extension[0]\
    \ > 'z' &&\n        file_name_without_extension[0] < 'A' ||\n        file_name_without_extension[0]\
    \ > 'Z')\n        return \"No\";\n    if (count(file_name_without_extension.filter!(c\
    \ => c >= '0' && c <= '9')) > 3)\n        return \"No\";\n    if (valid_extensions.find(file_extension)\
    \ == -1)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts = file_name.split(\"\
    .\");\n    if (file_name_parts.length != 2)\n        return \"No\";\n    string\
    \ extension = file_name_parts[1];\n    if (valid_extensions.count(extension) ==\
    \ 0)\n        return \"No\";\n    string name = file_name_parts[0];\n    int digits_count\
    \ = 0;\n    foreach (c; name)\n    {\n        if (c >= '0' && c <= '9')\n    \
    \        digits_count++;\n    }\n    if (digits_count > 3)\n        return \"\
    No\";\n    if (name.length == 0)\n        return \"No\";\n    if (name[0] < 'a'\
    \ || name[0] > 'z')\n        return \"No\";\n    return \"Yes\";\n}", "{\n   \
    \ int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    int dot_index_before\
    \ = 0;\n    int dot_index_after = 0;\n    string before_dot = \"\";\n    string\
    \ after_dot = \"\";\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"\
    ];\n    foreach(char c; file_name)\n    {\n        if (c == '.')\n        {\n\
    \            dot_count++;\n            dot_index = count;\n        }\n       \
    \ count++;\n    }\n    if (dot_count != 1)\n    {\n        return \"No\";\n  \
    \  }\n    dot_index_before = dot_index;\n    dot_index_after = count - dot_index\
    \ - 1;\n    before_dot = file_name[0..dot_index_before];\n    after_dot = file_name[dot_index\
    \ + 1..$];\n    if (before_dot.length == 0 || !isAlpha(before_dot[0]))\n    {\n\
    \        return \"No\";\n    }\n    if (after_dot.length == 0 || !after_dot.in(valid_extensions))\n\
    \    {\n        return \"No\";\n    }\n    foreach(char c; before_dot)\n    {\n\
    \        if (isDigit(c))\n        {\n            return \"No\";\n        }\n \
    \   }\n    return \"Yes\";\n}", "{\n    auto dot_pos = file_name.find('.');\n\
    \    if (dot_pos == -1)\n        return \"No\";\n    auto ext = file_name.slice(dot_pos\
    \ + 1);\n    if (ext != \"txt\" && ext != \"exe\" && ext != \"dll\")\n       \
    \ return \"No\";\n    auto name = file_name.slice(0, dot_pos);\n    if (name.length\
    \ == 0)\n        return \"No\";\n    if (name[0] < 'a' || name[0] > 'z' && name[0]\
    \ < 'A' || name[0] > 'Z')\n        return \"No\";\n    int count = 0;\n    foreach\
    \ (c; name)\n    {\n        if (c >= '0' && c <= '9')\n            count++;\n\
    \    }\n    if (count > 3)\n        return \"No\";\n    return \"Yes\";\n}", "{\n\
    \    int dot_index = file_name.find('.');\n    if (dot_index == -1)\n        return\
    \ \"No\";\n    string before_dot = file_name[0..dot_index];\n    string after_dot\
    \ = file_name[dot_index+1..$];\n    if (before_dot.length == 0 || after_dot.length\
    \ == 0)\n        return \"No\";\n    if (before_dot.count('0'..'9') > 3)\n   \
    \     return \"No\";\n    if (before_dot[0] < 'a' || before_dot[0] > 'z')\n  \
    \      return \"No\";\n    if (after_dot != \"txt\" && after_dot != \"exe\" &&\
    \ after_dot != \"dll\")\n        return \"No\";\n    return \"Yes\";\n}", "{\n\
    \    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    int i\
    \ = 0;\n    string extension = \"\";\n    string name = \"\";\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    foreach(char c; file_name)\n    {\n    \
    \    if(c >= '0' && c <= '9')\n        {\n            count++;\n        }\n  \
    \      if(c == '.')\n        {\n            dot_count++;\n            dot_index\
    \ = i;\n        }\n        i++;\n    }\n    if(count > 3 || dot_count != 1)\n\
    \    {\n        return \"No\";\n    }\n    extension = file_name[dot_index+1..$];\n\
    \    name = file_name[0..dot_index-1];\n    if(name.length == 0 || !(name[0] >=\
    \ 'a' && name[0] <= 'z' || name[0] >= 'A' && name[0] <= 'Z'))\n    {\n       \
    \ return \"No\";\n    }\n    if(!valid_extensions.find(extension))\n    {\n  \
    \      return \"No\";\n    }\n    return \"Yes\";\n}", "{\n    int count = 0;\n\
    \    int dot_count = 0;\n    int dot_index = 0;\n    int i = 0;\n    int j = 0;\n\
    \    string sub_str;\n    string sub_str2;\n    string result = \"No\";\n    string[]\
    \ valid_ext = [\"txt\", \"exe\", \"dll\"];\n    foreach(char c; file_name)\n \
    \   {\n        if(c == '.')\n        {\n            dot_count++;\n           \
    \ dot_index = i;\n        }\n        if(c >= '0' && c <= '9')\n        {\n   \
    \         count++;\n        }\n        i++;\n    }\n    if(count <= 3 && dot_count\
    \ == 1)\n    {\n        sub_str = file_name[0..dot_index];\n        sub_str2 =\
    \ file_name[dot_index+1..$];\n        if(sub_str.length > 0 && (sub_str[0] >=\
    \ 'a' && sub_str[0] <= 'z' || sub_str[0] >= 'A' && sub_str[0] <= 'Z'))\n     \
    \   {\n            foreach(string s; valid_ext)\n            {\n             \
    \   if(s == sub_str2)\n                {\n                    result = \"Yes\"\
    ;\n                }\n            }\n        }\n    }\n    return result;\n}",
  "{\n    int dot_pos = file_name.find('.');\n    if (dot_pos == -1)\n        return\
    \ \"No\";\n    string before_dot = file_name[0..dot_pos];\n    string after_dot\
    \ = file_name[dot_pos+1..$];\n    if (before_dot.length == 0 || before_dot.count!(a\
    \ => a >= '0' && a <= '9') > 3)\n        return \"No\";\n    if (after_dot !=\
    \ \"txt\" && after_dot != \"exe\" && after_dot != \"dll\")\n        return \"\
    No\";\n    if (before_dot[0] < 'a' || before_dot[0] > 'z' && before_dot[0] < 'A'\
    \ || before_dot[0] > 'Z')\n        return \"No\";\n    return \"Yes\";\n}", "{\n\
    \    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    int i\
    \ = 0;\n    string sub_string_before_dot = \"\";\n    string sub_string_after_dot\
    \ = \"\";\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    bool\
    \ is_valid = true;\n    foreach(char c; file_name)\n    {\n        if(c == '.')\n\
    \        {\n            dot_count++;\n            dot_index = i;\n        }\n\
    \        if(c >= '0' && c <= '9')\n        {\n            count++;\n        }\n\
    \        i++;\n    }\n    if(dot_count != 1)\n    {\n        is_valid = false;\n\
    \    }\n    if(count > 3)\n    {\n        is_valid = false;\n    }\n    if(dot_index\
    \ == 0)\n    {\n        is_valid = false;\n    }\n    if(file_name[0] >= '0' &&\
    \ file_name[0] <= '9')\n    {\n        is_valid = false;\n    }\n    sub_string_before_dot\
    \ = file_name[0..dot_index];\n    sub_string_after_dot = file_name[dot_index+1..$];\n\
    \    if(sub_string_before_dot.length == 0)\n    {\n        is_valid = false;\n\
    \    }\n    if(!valid_extensions.contains(sub_string_after_dot))\n    {\n    \
    \    is_valid = false;\n    }\n    if(is_valid)\n    {\n        return \"Yes\"\
    ;\n    }\n    else\n    {\n        return \"No\";\n    }\n}", "{\n    // write\
    \ your code here\n    int dot_pos = file_name.find('.');\n    if (dot_pos == -1)\n\
    \        return \"No\";\n    string prefix = file_name[0..dot_pos];\n    string\
    \ suffix = file_name[dot_pos+1..$];\n    if (prefix.length == 0 || suffix.length\
    \ == 0)\n        return \"No\";\n    if (prefix.count('0','9') > 3)\n        return\
    \ \"No\";\n    if (prefix.count('a','z') == 0 && prefix.count('A','Z') == 0)\n\
    \        return \"No\";\n    if (suffix != \"txt\" && suffix != \"exe\" && suffix\
    \ != \"dll\")\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[]\
    \ valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts\
    \ = file_name.split(\".\");\n    if (file_name_parts.length != 2)\n        return\
    \ \"No\";\n    if (file_name_parts[0].filter!(c => c.isDigit).length > 3)\n  \
    \      return \"No\";\n    if (file_name_parts[0].length == 0 || !file_name_parts[0][0].isLetter)\n\
    \        return \"No\";\n    if (!valid_extensions.canFind(file_name_parts[1]))\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    int count = 0;\n   \
    \ int dot_count = 0;\n    bool is_valid = true;\n    foreach(char c; file_name)\n\
    \    {\n        if(c == '.')\n        {\n            dot_count++;\n        }\n\
    \        if(c >= '0' && c <= '9')\n        {\n            count++;\n        }\n\
    \    }\n    if(count > 3 || dot_count != 1)\n    {\n        is_valid = false;\n\
    \    }\n    else\n    {\n        string[] file_name_parts = file_name.split(\"\
    .\");\n        if(file_name_parts[0].length == 0 || \n            (file_name_parts[0][0]\
    \ < 'a' || file_name_parts[0][0] > 'z') && \n            (file_name_parts[0][0]\
    \ < 'A' || file_name_parts[0][0] > 'Z'))\n        {\n            is_valid = false;\n\
    \        }\n        else\n        {\n            if(file_name_parts[1] != \"txt\"\
    \ && file_name_parts[1] != \"exe\" && file_name_parts[1] != \"dll\")\n       \
    \     {\n                is_valid = false;\n            }\n        }\n    }\n\
    \    return is_valid ? \"Yes\" : \"No\";\n}", "{\n    int dot_pos = file_name.find('.');\n\
    \    string ext = file_name.substr(dot_pos + 1);\n    string name = file_name.substr(0,\
    \ dot_pos);\n    int digits = 0;\n    foreach(c; name)\n    {\n        if(isdigit(c))\n\
    \            digits++;\n    }\n    if(digits > 3)\n        return \"No\";\n  \
    \  if(ext != \"txt\" && ext != \"exe\" && ext != \"dll\")\n        return \"No\"\
    ;\n    if(!isalpha(name[0]))\n        return \"No\";\n    return \"Yes\";\n}",
  "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    int dot_index\
    \ = file_name.find('.');\n    if (dot_index == -1)\n        return \"No\";\n \
    \   string extension = file_name[dot_index + 1 .. $];\n    if (extension.length\
    \ == 0 || !valid_extensions.canFind(extension))\n        return \"No\";\n    string\
    \ name = file_name[0 .. dot_index];\n    if (name.length == 0 || !isAlpha(name[0]))\n\
    \        return \"No\";\n    int digit_count = 0;\n    foreach (c; name)\n   \
    \     if (isDigit(c))\n            digit_count++;\n    if (digit_count > 3)\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    int count = 0;\n   \
    \ int dot_count = 0;\n    int dot_index = 0;\n    int i = 0;\n    string sub_string_before_dot;\n\
    \    string sub_string_after_dot;\n    string[] valid_extensions = [\"txt\", \"\
    exe\", \"dll\"];\n    bool valid_extension = false;\n    foreach(char c; file_name)\n\
    \    {\n        if(c == '.')\n        {\n            dot_count++;\n          \
    \  dot_index = i;\n        }\n        else if(c >= '0' && c <= '9')\n        {\n\
    \            count++;\n        }\n        i++;\n    }\n    if(count > 3 || dot_count\
    \ != 1)\n    {\n        return \"No\";\n    }\n    sub_string_before_dot = file_name[0..dot_index];\n\
    \    sub_string_after_dot = file_name[dot_index+1..$];\n    if(sub_string_before_dot.length\
    \ == 0 || \n        (sub_string_before_dot[0] < 'a' || sub_string_before_dot[0]\
    \ > 'z') && \n        (sub_string_before_dot[0] < 'A' || sub_string_before_dot[0]\
    \ > 'Z'))\n    {\n        return \"No\";\n    }\n    foreach(string s; valid_extensions)\n\
    \    {\n        if(s == sub_string_after_dot)\n        {\n            valid_extension\
    \ = true;\n            break;\n        }\n    }\n    if(valid_extension)\n   \
    \ {\n        return \"Yes\";\n    }\n    return \"No\";\n}", "{\n    auto dot_pos\
    \ = file_name.find('.');\n    if (dot_pos == -1)\n        return \"No\";\n   \
    \ auto ext = file_name.slice(dot_pos + 1);\n    if (ext != \"txt\" && ext != \"\
    exe\" && ext != \"dll\")\n        return \"No\";\n    auto name = file_name.slice(0,\
    \ dot_pos);\n    if (name.length == 0)\n        return \"No\";\n    if (name[0]\
    \ < 'a' || name[0] > 'z' && name[0] < 'A' || name[0] > 'Z')\n        return \"\
    No\";\n    auto digits = 0;\n    foreach (c; name)\n    {\n        if (c >= '0'\
    \ && c <= '9')\n            digits++;\n    }\n    if (digits > 3)\n        return\
    \ \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\"\
    , \"exe\", \"dll\"];\n    int dot_index = file_name.find('.');\n    string extension\
    \ = file_name.substr(dot_index + 1);\n    string name = file_name.substr(0, dot_index);\n\
    \    int digits_count = 0;\n    foreach(char c; name)\n    {\n        if(c >=\
    \ '0' && c <= '9')\n            digits_count++;\n    }\n    if(digits_count >\
    \ 3 || dot_index == -1 || name.length == 0 || !(name[0] >= 'a' && name[0] <= 'z'\
    \ || name[0] >= 'A' && name[0] <= 'Z'))\n        return \"No\";\n    foreach(string\
    \ s; valid_extensions)\n    {\n        if(s == extension)\n            return\
    \ \"Yes\";\n    }\n    return \"No\";\n}", "{\n    string[] valid_extensions =\
    \ [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts = file_name.split(\"\
    .\");\n    if (file_name_parts.length != 2)\n        return \"No\";\n    if (file_name_parts[0].length\
    \ == 0)\n        return \"No\";\n    if (file_name_parts[0].count(\"0-9\") > 3)\n\
    \        return \"No\";\n    if (file_name_parts[0][0] < 'a' || file_name_parts[0][0]\
    \ > 'z')\n        return \"No\";\n    if (valid_extensions.find(file_name_parts[1])\
    \ == -1)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    int dot_count\
    \ = 0;\n    int digit_count = 0;\n    foreach(c; file_name)\n    {\n        if(c\
    \ == '.')\n        {\n            dot_count++;\n        }\n        else if(c >=\
    \ '0' && c <= '9')\n        {\n            digit_count++;\n        }\n    }\n\
    \    if(dot_count != 1 || digit_count > 3)\n    {\n        return \"No\";\n  \
    \  }\n    string[] parts = file_name.split(\".\");\n    if(parts.length != 2)\n\
    \    {\n        return \"No\";\n    }\n    if(parts[0].length == 0 || !(parts[0][0]\
    \ >= 'a' && parts[0][0] <= 'z') && !(parts[0][0] >= 'A' && parts[0][0] <= 'Z'))\n\
    \    {\n        return \"No\";\n    }\n    if(parts[1] != \"txt\" && parts[1]\
    \ != \"exe\" && parts[1] != \"dll\")\n    {\n        return \"No\";\n    }\n \
    \   return \"Yes\";\n}\n/*\nCreate a function which takes a string representing\
    \ a file's name, and returns\n    the file's extension.\n    Examples:\n    >>>\
    \ file_extension(\"example.txt\")\n    \"txt\"\n    >>> file_extension(\"1example.dll\"\
    )\n    \"dll\"\n*/\nstring file_extension(string file_name) \n{\n    string[]\
    \ parts = file_name.split(\".\");\n    return parts[1];\n}\n/*\nCreate a function\
    \ which takes a string representing a file's name, and returns\n    the file's\
    \ name without the extension.\n    Examples:\n    >>> file_name_without_extension(\"\
    example.txt\")\n    \"example\"\n    >>> file_name_without_extension(\"1example.dll\"\
    )\n    \"1example\"\n*/\nstring file_name_without_extension(string file_name)\
    \ \n{\n    string[] parts = file_name.split(\".\");\n    return parts[0];\n}\n\
    /*\nCreate a function which takes a string representing a file's name,", "{\n\
    \    int count = 0;\n    int dot_index = 0;\n    int dot_count = 0;\n    int dot_index_after\
    \ = 0;\n    string sub_before_dot = \"\";\n    string sub_after_dot = \"\";\n\
    \    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    foreach(i,\
    \ c; file_name)\n    {\n        if(c >= '0' && c <= '9')\n        {\n        \
    \    count++;\n        }\n        if(c == '.')\n        {\n            dot_index\
    \ = i;\n            dot_count++;\n        }\n    }\n    if(count > 3 || dot_count\
    \ != 1)\n    {\n        return \"No\";\n    }\n    sub_before_dot = file_name[0..dot_index];\n\
    \    sub_after_dot = file_name[dot_index + 1..$];\n    if(sub_before_dot.length\
    \ == 0 || (sub_before_dot[0] < 'a' || sub_before_dot[0] > 'z') && (sub_before_dot[0]\
    \ < 'A' || sub_before_dot[0] > 'Z'))\n    {\n        return \"No\";\n    }\n \
    \   foreach(ext; valid_extensions)\n    {\n        if(ext == sub_after_dot)\n\
    \        {\n            return \"Yes\";\n        }\n    }\n    return \"No\";\n\
    }\n/*\nCreate a function which takes a string representing a file's name, and\
    \ returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', '", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    int dot_index = file_name.find('.');\n \
    \   if (dot_index == -1)\n        return \"No\";\n    string extension = file_name[dot_index\
    \ + 1 .. $];\n    if (extension.length == 0 || !valid_extensions.canFind(extension))\n\
    \        return \"No\";\n    string name = file_name[0 .. dot_index];\n    if\
    \ (name.length == 0 || !isAlpha(name[0]))\n        return \"No\";\n    int digits_count\
    \ = 0;\n    foreach (c; name)\n        if (isDigit(c))\n            digits_count++;\n\
    \    if (digits_count > 3)\n        return \"No\";\n    return \"Yes\";\n}", "{\n\
    \    int dot_pos = file_name.find('.');\n    if (dot_pos == -1)\n        return\
    \ \"No\";\n    string before_dot = file_name[0..dot_pos];\n    string after_dot\
    \ = file_name[dot_pos+1..$];\n    if (before_dot.length == 0 || before_dot.length\
    \ == dot_pos)\n        return \"No\";\n    if (after_dot != \"txt\" && after_dot\
    \ != \"exe\" && after_dot != \"dll\")\n        return \"No\";\n    int num_digits\
    \ = 0;\n    foreach (c; before_dot)\n    {\n        if (c >= '0' && c <= '9')\n\
    \            num_digits++;\n    }\n    if (num_digits > 3)\n        return \"\
    No\";\n    if (before_dot[0] < 'a' || before_dot[0] > 'z')\n        return \"\
    No\";\n    return \"Yes\";\n}", "{\n    int count = 0;\n    int dot_count = 0;\n\
    \    int dot_index = 0;\n    string extension;\n    string name;\n    foreach(i,\
    \ ch; file_name)\n    {\n        if(ch >= '0' && ch <= '9')\n        {\n     \
    \       count++;\n        }\n        if(ch == '.')\n        {\n            dot_count++;\n\
    \            dot_index = i;\n        }\n    }\n    if(count > 3 || dot_count !=\
    \ 1)\n    {\n        return \"No\";\n    }\n    extension = file_name[dot_index\
    \ + 1 .. $];\n    if(extension != \"txt\" && extension != \"exe\" && extension\
    \ != \"dll\")\n    {\n        return \"No\";\n    }\n    name = file_name[0 ..\
    \ dot_index];\n    if(name.length == 0)\n    {\n        return \"No\";\n    }\n\
    \    if(name[0] < 'a' || name[0] > 'z' && name[0] < 'A' || name[0] > 'Z')\n  \
    \  {\n        return \"No\";\n    }\n    return \"Yes\";\n}", "{\n    string[]\
    \ valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts\
    \ = file_name.split(\".\");\n    if (file_name_parts.length != 2)\n        return\
    \ \"No\";\n    if (file_name_parts[0].length == 0)\n        return \"No\";\n \
    \   if (file_name_parts[0].count(\"0-9\") > 3)\n        return \"No\";\n    if\
    \ (file_name_parts[0][0] < 'a' || file_name_parts[0][0] > 'z')\n        return\
    \ \"No\";\n    if (valid_extensions.find(file_name_parts[1]) == -1)\n        return\
    \ \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\"\
    , \"exe\", \"dll\"];\n    string[] file_name_parts = file_name.split(\".\");\n\
    \    if (file_name_parts.length != 2)\n        return \"No\";\n    if (file_name_parts[0].length\
    \ == 0)\n        return \"No\";\n    if (file_name_parts[0].count(\"0-9\") > 3)\n\
    \        return \"No\";\n    if (!valid_extensions.contains(file_name_parts[1]))\n\
    \        return \"No\";\n    if (!file_name_parts[0][0].isAlpha)\n        return\
    \ \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\"\
    , \"exe\", \"dll\"];\n    int dot_index = file_name.find(\".\");\n    string extension\
    \ = file_name[dot_index + 1 .. $];\n    string name = file_name[0 .. dot_index\
    \ - 1];\n    int digits_count = 0;\n    foreach(char c; name)\n    {\n       \
    \ if(c >= '0' && c <= '9')\n        {\n            digits_count++;\n        }\n\
    \    }\n    if(digits_count > 3)\n    {\n        return \"No\";\n    }\n    if(!(name[0]\
    \ >= 'a' && name[0] <= 'z') && !(name[0] >= 'A' && name[0] <= 'Z'))\n    {\n \
    \       return \"No\";\n    }\n    if(!valid_extensions.find(extension))\n   \
    \ {\n        return \"No\";\n    }\n    return \"Yes\";\n}", "{\n    // your code\
    \ here\n    int dot_index = file_name.find('.');\n    if (dot_index == -1) return\
    \ \"No\";\n    string before_dot = file_name[0..dot_index];\n    string after_dot\
    \ = file_name[dot_index+1..$];\n    if (before_dot.count('0'..'9') > 3) return\
    \ \"No\";\n    if (before_dot.empty) return \"No\";\n    if (!(before_dot[0] in\
    \ 'a'..'z' || before_dot[0] in 'A'..'Z')) return \"No\";\n    if (!(after_dot\
    \ in [\"txt\", \"exe\", \"dll\"])) return \"No\";\n    return \"Yes\";\n}", "{\n\
    \    // Write your code here\n    int dot_count = 0;\n    int digit_count = 0;\n\
    \    int i = 0;\n    int len = file_name.length;\n    if (len < 5)\n        return\
    \ \"No\";\n    if (file_name[i] >= '0' && file_name[i] <= '9')\n        return\
    \ \"No\";\n    for (i = 0; i < len; i++)\n    {\n        if (file_name[i] == '.')\n\
    \            dot_count++;\n        if (file_name[i] >= '0' && file_name[i] <=\
    \ '9')\n            digit_count++;\n    }\n    if (dot_count != 1 || digit_count\
    \ > 3)\n        return \"No\";\n    string ext = file_name.split('.')[1];\n  \
    \  if (ext == \"txt\" || ext == \"exe\" || ext == \"dll\")\n        return \"\
    Yes\";\n    return \"No\";\n}", "{\n    string[] valid_extensions = [\"txt\",\
    \ \"exe\", \"dll\"];\n    int dot_index = file_name.find('.');\n    if (dot_index\
    \ == -1)\n        return \"No\";\n    string extension = file_name[dot_index+1..$];\n\
    \    if (valid_extensions.find(extension) == -1)\n        return \"No\";\n   \
    \ string name = file_name[0..dot_index-1];\n    if (name.length == 0)\n      \
    \  return \"No\";\n    if (name[0] < 'a' || name[0] > 'z' && name[0] < 'A' ||\
    \ name[0] > 'Z')\n        return \"No\";\n    int digits_count = 0;\n    foreach\
    \ (c; name)\n    {\n        if (c >= '0' && c <= '9')\n            digits_count++;\n\
    \    }\n    if (digits_count > 3)\n        return \"No\";\n    return \"Yes\"\
    ;\n}", "{\n    int dot_index = file_name.find(\".\");\n    if (dot_index == -1)\n\
    \        return \"No\";\n    string extension = file_name.substr(dot_index+1);\n\
    \    if (extension != \"txt\" && extension != \"exe\" && extension != \"dll\"\
    )\n        return \"No\";\n    string name = file_name.substr(0, dot_index);\n\
    \    if (name.length == 0)\n        return \"No\";\n    if (name[0] < 'a' || name[0]\
    \ > 'z' && name[0] < 'A' || name[0] > 'Z')\n        return \"No\";\n    int count\
    \ = 0;\n    foreach (c; name)\n    {\n        if (c >= '0' && c <= '9')\n    \
    \        count++;\n    }\n    if (count > 3)\n        return \"No\";\n    return\
    \ \"Yes\";\n}", "{\n    int count = 0;\n    int dot_index = 0;\n    int dot_count\
    \ = 0;\n    int i = 0;\n    int j = 0;\n    string sub_str = \"\";\n    string\
    \ sub_str2 = \"\";\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"\
    ];\n    string[] valid_extensions2 = [\"TXT\", \"EXE\", \"DLL\"];\n    string[]\
    \ valid_extensions3 = [\"Txt\", \"Exe\", \"Dll\"];\n    string[] valid_extensions4\
    \ = [\"tXt\", \"eXe\", \"dXl\"];\n    string[] valid_extensions5 = [\"txT\", \"\
    exE\", \"dlL\"];\n    string[] valid_extensions6 = [\"tXT\", \"eXE\", \"dXL\"\
    ];\n    string[] valid_extensions7 = [\"TxT\", \"ExE\", \"DlL\"];\n    string[]\
    \ valid_extensions8 = [\"TXt\", \"EXe\", \"DLl\"];\n    string[] valid_extensions9\
    \ = [\"tXt\", \"eXe\", \"dXl\"];\n    string[] valid_extensions10 = [\"txT\",\
    \ \"exE\", \"dlL\"];\n    string[] valid_extensions11 = [\"tXT\", \"eXE\", \"\
    dXL\"];\n    string[] valid_extensions12 = [\"TxT\", \"ExE\", \"DlL\"];\n    string[]\
    \ valid_extensions13 = [\"TXt\", \"EXe\", \"DLl\"];\n    string[] valid_extensions14\
    \ = [\"tXt\", \"eXe\", \"dXl\"];\n    string[] valid_extensions15 = [\"txT\",\
    \ \"exE\", \"dlL\"];\n    string[] valid_extensions16 = [\"tXT\", \"eXE\", \"\
    dXL\"];\n    string[] valid_extensions17 = [\"TxT\", \"ExE\", \"DlL\"];\n    string[]\
    \ valid_extensions18 = [\"TXt\", \"EXe\", \"DLl\"];\n    string[] valid_extensions19\
    \ = [\"tXt\", \"eXe\", \"dXl\"];\n", "{\n    string[] valid_extensions = [\"txt\"\
    , \"exe\", \"dll\"];\n    int dot_index = file_name.indexOf('.');\n    string\
    \ extension = file_name.substr(dot_index + 1);\n    string name = file_name.substr(0,\
    \ dot_index);\n    int digits_count = 0;\n    foreach(char c; name)\n    {\n \
    \       if(c >= '0' && c <= '9')\n            digits_count++;\n    }\n    if(digits_count\
    \ > 3 || dot_index == -1 || name.length == 0 || name[0] < 'A' || name[0] > 'z'\
    \ || !valid_extensions.canFind(extension))\n        return \"No\";\n    return\
    \ \"Yes\";\n}", "{\n    auto dot_pos = file_name.find('.');\n    if (dot_pos ==\
    \ -1)\n        return \"No\";\n    auto dot_pos_2 = file_name.find('.', dot_pos\
    \ + 1);\n    if (dot_pos_2 != -1)\n        return \"No\";\n    auto ext = file_name.substr(dot_pos\
    \ + 1);\n    if (ext != \"txt\" && ext != \"exe\" && ext != \"dll\")\n       \
    \ return \"No\";\n    auto name = file_name.substr(0, dot_pos);\n    if (name.length\
    \ == 0)\n        return \"No\";\n    if (!isAlpha(name[0]))\n        return \"\
    No\";\n    auto digits = 0;\n    for (auto c : name)\n    {\n        if (isDigit(c))\n\
    \            digits++;\n    }\n    if (digits > 3)\n        return \"No\";\n \
    \   return \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\", \"exe\"\
    , \"dll\"];\n    string[] file_name_parts = file_name.split(\".\");\n    if (file_name_parts.length\
    \ != 2)\n        return \"No\";\n    if (file_name_parts[0].length == 0)\n   \
    \     return \"No\";\n    if (file_name_parts[0].count(\"0-9\") > 3)\n       \
    \ return \"No\";\n    if (!valid_extensions.contains(file_name_parts[1]))\n  \
    \      return \"No\";\n    if (!file_name_parts[0][0].isLetter)\n        return\
    \ \"No\";\n    return \"Yes\";\n}", "{\n    int dot_index = file_name.find('.');\n\
    \    string extension = file_name.substr(dot_index + 1);\n    string name = file_name.substr(0,\
    \ dot_index);\n    int digit_count = 0;\n    foreach(char c; name)\n    {\n  \
    \      if(c >= '0' && c <= '9')\n            digit_count++;\n    }\n    if(digit_count\
    \ > 3)\n        return \"No\";\n    if(extension != \"txt\" && extension != \"\
    exe\" && extension != \"dll\")\n        return \"No\";\n    if(name.length ==\
    \ 0)\n        return \"No\";\n    if(!(name[0] >= 'a' && name[0] <= 'z') && !(name[0]\
    \ >= 'A' && name[0] <= 'Z'))\n        return \"No\";\n    return \"Yes\";\n}",
  "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    int dot_index\
    \ = file_name.find(\".\");\n    string extension = file_name[dot_index + 1 ..\
    \ $];\n    string name = file_name[0 .. dot_index - 1];\n    int digits_count\
    \ = 0;\n    foreach(c; name)\n    {\n        if(c >= '0' && c <= '9')\n      \
    \  {\n            digits_count++;\n        }\n    }\n    if(digits_count > 3)\n\
    \    {\n        return \"No\";\n    }\n    if(!(name[0] >= 'a' && name[0] <= 'z')\
    \ && !(name[0] >= 'A' && name[0] <= 'Z'))\n    {\n        return \"No\";\n   \
    \ }\n    if(!valid_extensions.canFind(extension))\n    {\n        return \"No\"\
    ;\n    }\n    return \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\"\
    , \"exe\", \"dll\"];\n    int dot_index = file_name.find(\".\");\n    string extension\
    \ = file_name[dot_index+1..$];\n    string name = file_name[0..dot_index-1];\n\
    \    int digits_count = 0;\n    foreach(c; name)\n    {\n        if(c >= '0' &&\
    \ c <= '9')\n            digits_count++;\n    }\n    if(digits_count > 3)\n  \
    \      return \"No\";\n    if(dot_index == -1)\n        return \"No\";\n    if(name.length\
    \ == 0)\n        return \"No\";\n    if(!(name[0] >= 'a' && name[0] <= 'z') &&\
    \ !(name[0] >= 'A' && name[0] <= 'Z'))\n        return \"No\";\n    if(!valid_extensions.canFind(extension))\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    int dot_index = file_name.find(\".\");\n\
    \    string extension = file_name[dot_index+1..$];\n    string name = file_name[0..dot_index-1];\n\
    \    int digits_count = 0;\n    foreach(c; name)\n    {\n        if(c.isDigit)\n\
    \            digits_count++;\n    }\n    if(digits_count > 3)\n        return\
    \ \"No\";\n    if(!name.length)\n        return \"No\";\n    if(!name[0].isLetter)\n\
    \        return \"No\";\n    if(!valid_extensions.canFind(extension))\n      \
    \  return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts = file_name.split(\"\
    .\");\n    if (file_name_parts.length != 2)\n        return \"No\";\n    if (file_name_parts[0].count(\"\
    0-9\") > 3)\n        return \"No\";\n    if (file_name_parts[0].length == 0)\n\
    \        return \"No\";\n    if (file_name_parts[0][0] < 'a' || file_name_parts[0][0]\
    \ > 'z')\n        return \"No\";\n    if (valid_extensions.count(file_name_parts[1])\
    \ == 0)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    int count =\
    \ 0;\n    int dot = 0;\n    int dot_pos = 0;\n    int num_pos = 0;\n    int num_count\
    \ = 0;\n    int num_count_after = 0;\n    int num_count_before = 0;\n    int num_count_after_dot\
    \ = 0;\n    int num_count_before_dot = 0;\n    int num_count_after_dot_pos = 0;\n\
    \    int num_count_before_dot_pos = 0;\n    int num_count_after_dot_pos_end =\
    \ 0;\n    int num_count_before_dot_pos_end = 0;\n    int num_count_after_dot_pos_end_pos\
    \ = 0;\n    int num_count_before_dot_pos_end_pos = 0;\n    int num_count_after_dot_pos_end_pos_end\
    \ = 0;\n    int num_count_before_dot_pos_end_pos_end = 0;\n    int num_count_after_dot_pos_end_pos_end_pos\
    \ = 0;\n    int num_count_before_dot_pos_end_pos_end_pos = 0;\n    int num_count_after_dot_pos_end_pos_end_pos_end\
    \ = 0;\n    int num_count_before_dot_pos_end_pos_end_pos_end = 0;\n    int num_count_after_dot_pos_end_pos_end_pos_end_pos\
    \ = 0;\n    int num_count_before_dot_pos_end_pos_end_pos_end_pos = 0;\n    int\
    \ num_count_after_dot_pos_end_pos_end_pos_end_pos_end = 0;\n    int num_count_before_dot_pos_end_pos_end_pos_end_pos_end\
    \ = 0;\n    int num_count_after_dot_pos_end_pos_end_pos_end_pos_end_pos = 0;\n\
    \    int num_count_before_dot_pos_end_pos_end_pos_end_pos_end_pos = 0;\n    int\
    \ num_count_", "{\n    int dot_pos = file_name.find('.');\n    if (dot_pos ==\
    \ -1)\n        return \"No\";\n    string before_dot = file_name[0..dot_pos];\n\
    \    string after_dot = file_name[dot_pos+1..$];\n    if (before_dot.length ==\
    \ 0)\n        return \"No\";\n    if (after_dot != \"txt\" && after_dot != \"\
    exe\" && after_dot != \"dll\")\n        return \"No\";\n    int count = 0;\n \
    \   foreach (c; before_dot)\n    {\n        if (c >= '0' && c <= '9')\n      \
    \      count++;\n    }\n    if (count > 3)\n        return \"No\";\n    if (before_dot[0]\
    \ < 'a' || before_dot[0] > 'z')\n        return \"No\";\n    return \"Yes\";\n\
    }", "{\n    int dot_count = 0;\n    int digit_count = 0;\n    bool is_valid =\
    \ true;\n    foreach(c; file_name)\n    {\n        if(c == '.')\n        {\n \
    \           dot_count++;\n        }\n        else if(c >= '0' && c <= '9')\n \
    \       {\n            digit_count++;\n        }\n    }\n    if(dot_count != 1\
    \ || digit_count > 3)\n    {\n        is_valid = false;\n    }\n    else\n   \
    \ {\n        auto parts = file_name.split(\".\");\n        if(parts.length !=\
    \ 2)\n        {\n            is_valid = false;\n        }\n        else\n    \
    \    {\n            if(parts[0].length == 0 || !(parts[0][0] >= 'a' && parts[0][0]\
    \ <= 'z') && !(parts[0][0] >= 'A' && parts[0][0] <= 'Z'))\n            {\n   \
    \             is_valid = false;\n            }\n            else\n           \
    \ {\n                if(parts[1] != \"txt\" && parts[1] != \"exe\" && parts[1]\
    \ != \"dll\")\n                {\n                    is_valid = false;\n    \
    \            }\n            }\n        }\n    }\n    return is_valid ? \"Yes\"\
    \ : \"No\";\n}", "{\n    int dot_index = file_name.find('.');\n    if (dot_index\
    \ == -1)\n        return \"No\";\n    string before_dot = file_name[0..dot_index];\n\
    \    string after_dot = file_name[dot_index+1..$];\n    if (before_dot.length\
    \ == 0 || after_dot.length == 0)\n        return \"No\";\n    if (before_dot.count('0',\
    \ '9') > 3)\n        return \"No\";\n    if (before_dot[0] < 'a' || before_dot[0]\
    \ > 'z')\n        return \"No\";\n    if (after_dot != \"txt\" && after_dot !=\
    \ \"exe\" && after_dot != \"dll\")\n        return \"No\";\n    return \"Yes\"\
    ;\n}", "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[]\
    \ file_name_parts = file_name.split(\".\");\n    if (file_name_parts.length !=\
    \ 2)\n        return \"No\";\n    if (file_name_parts[0].length == 0)\n      \
    \  return \"No\";\n    if (file_name_parts[0].count(\"0-9\") > 3)\n        return\
    \ \"No\";\n    if (file_name_parts[0][0] < 'a' || file_name_parts[0][0] > 'z')\n\
    \        return \"No\";\n    if (valid_extensions.count(file_name_parts[1]) ==\
    \ 0)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    int count = 0;\n\
    \    int dot_count = 0;\n    int dot_index = 0;\n    string sub_string;\n    string\
    \ sub_string_after_dot;\n    foreach(i; 0..file_name.length)\n    {\n        if(file_name[i]\
    \ == '.')\n        {\n            dot_count++;\n            dot_index = i;\n \
    \       }\n        if(file_name[i] >= '0' && file_name[i] <= '9')\n        {\n\
    \            count++;\n        }\n    }\n    if(count > 3 || dot_count != 1)\n\
    \    {\n        return \"No\";\n    }\n    sub_string = file_name[0..dot_index];\n\
    \    sub_string_after_dot = file_name[dot_index+1..$];\n    if(sub_string.length\
    \ == 0 || (sub_string[0] < 'a' || sub_string[0] > 'z') && (sub_string[0] < 'A'\
    \ || sub_string[0] > 'Z'))\n    {\n        return \"No\";\n    }\n    if(sub_string_after_dot\
    \ != \"txt\" && sub_string_after_dot != \"exe\" && sub_string_after_dot != \"\
    dll\")\n    {\n        return \"No\";\n    }\n    return \"Yes\";\n}", "{\n  \
    \  int dot_index = file_name.indexOf('.');\n    string extension = file_name.substring(dot_index\
    \ + 1);\n    string name = file_name.substring(0, dot_index);\n    int digits\
    \ = 0;\n    foreach(c; name)\n    {\n        if(c >= '0' && c <= '9')\n      \
    \      digits++;\n    }\n    if(digits > 3)\n        return \"No\";\n    if(extension\
    \ != \"txt\" && extension != \"exe\" && extension != \"dll\")\n        return\
    \ \"No\";\n    if(name.length == 0)\n        return \"No\";\n    if(name[0] <\
    \ 'a' || name[0] > 'z' && name[0] < 'A' || name[0] > 'Z')\n        return \"No\"\
    ;\n    return \"Yes\";\n}", "{\n    int count = 0;\n    int dot_count = 0;\n \
    \   int i = 0;\n    int dot_index = 0;\n    string extension = \"\";\n    string\
    \ name = \"\";\n    foreach(char c; file_name)\n    {\n        if(c == '.')\n\
    \        {\n            dot_count++;\n            dot_index = i;\n        }\n\
    \        i++;\n    }\n    if(dot_count != 1)\n    {\n        return \"No\";\n\
    \    }\n    extension = file_name[dot_index+1..$];\n    name = file_name[0..dot_index-1];\n\
    \    if(extension != \"txt\" && extension != \"exe\" && extension != \"dll\")\n\
    \    {\n        return \"No\";\n    }\n    foreach(char c; name)\n    {\n    \
    \    if(c >= '0' && c <= '9')\n        {\n            count++;\n        }\n  \
    \  }\n    if(count > 3)\n    {\n        return \"No\";\n    }\n    if(name[0]\
    \ < 'a' || name[0] > 'z')\n    {\n        if(name[0] < 'A' || name[0] > 'Z')\n\
    \        {\n            return \"No\";\n        }\n    }\n    return \"Yes\";\n\
    }", "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    int\
    \ dot_index = file_name.find('.');\n    string extension = file_name.substr(dot_index\
    \ + 1);\n    string name = file_name.substr(0, dot_index);\n    int digits_count\
    \ = 0;\n    foreach(char c; name)\n    {\n        if(c >= '0' && c <= '9')\n \
    \           digits_count++;\n    }\n    if(digits_count > 3 || dot_index == -1\
    \ || name.length == 0 || \n        !(name[0] >= 'a' && name[0] <= 'z' || name[0]\
    \ >= 'A' && name[0] <= 'Z') || \n        !valid_extensions.canFind(extension))\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] parts = split(file_name, \".\"\
    );\n    if (parts.length != 2)\n        return \"No\";\n    if (parts[0].length\
    \ == 0)\n        return \"No\";\n    if (parts[0][0] < 'a' || parts[0][0] > 'z')\n\
    \        return \"No\";\n    if (valid_extensions.count(parts[1]) == 0)\n    \
    \    return \"No\";\n    int digits = 0;\n    foreach (c; parts[0])\n    {\n \
    \       if (c >= '0' && c <= '9')\n            digits++;\n    }\n    if (digits\
    \ > 3)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts = file_name.split(\"\
    .\");\n    if (file_name_parts.length != 2)\n        return \"No\";\n    if (file_name_parts[0].length\
    \ == 0)\n        return \"No\";\n    if (file_name_parts[0].count(\"0-9\") > 3)\n\
    \        return \"No\";\n    if (valid_extensions.indexOf(file_name_parts[1])\
    \ == -1)\n        return \"No\";\n    return \"Yes\";\n}\n/*\nCreate a function\
    \ which takes a string representing a file's name, and returns\n    'Yes' if the\
    \ the file's name is valid, and returns 'No' otherwise.\n    A file's name is\
    \ considered to be valid if and only if all the following conditions \n    are\
    \ met:\n    - There should not be more than three digits ('0'-'9') in the file's\
    \ name.\n    - The file's name contains exactly one dot '.'\n    - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n    the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    >>> file_name_check(\"\
    example.txt\")\n    \"Yes\"\n    >>> file_name_check(\"1example.dll\")\n    \"\
    No\"\n    \n*/\nstring file_name_check(string file_name) \n{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts = file_name.split(\"\
    .\");\n    if (file_name_parts.length != 2)\n        return \"No\";\n    if (file_name_parts[0].length\
    \ == 0)\n        return \"No\";\n    if (file_name_parts[0].count(\"0-9\") > 3)\n\
    \        return \"No\";\n    if (valid_extensions.indexOf(file_name_parts[1])\
    \ == -1)\n        return \"No\";\n", "{\n    int dot_pos = file_name.find('.');\n\
    \    string ext = file_name.substr(dot_pos+1);\n    string name = file_name.substr(0,\
    \ dot_pos);\n    if (ext != \"txt\" && ext != \"exe\" && ext != \"dll\")\n   \
    \     return \"No\";\n    if (name.length == 0)\n        return \"No\";\n    if\
    \ (name[0] < 'a' || name[0] > 'z' && name[0] < 'A' || name[0] > 'Z')\n       \
    \ return \"No\";\n    int count = 0;\n    foreach (c; name)\n    {\n        if\
    \ (c >= '0' && c <= '9')\n            count++;\n    }\n    if (count > 3)\n  \
    \      return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] parts = file_name.split(\".\");\n\
    \    if (parts.length != 2)\n        return \"No\";\n    if (parts[0].length ==\
    \ 0)\n        return \"No\";\n    if (parts[0].count('0', '9') > 3)\n        return\
    \ \"No\";\n    if (parts[0].count('a', 'z') == 0 && parts[0].count('A', 'Z') ==\
    \ 0)\n        return \"No\";\n    if (valid_extensions.count(parts[1]) == 0)\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    int dot_count = 0;\n\
    \    int digit_count = 0;\n    bool valid_extension = false;\n    string extension;\n\
    \    string name;\n    foreach(char c; file_name)\n    {\n        if(c == '.')\n\
    \        {\n            dot_count++;\n            if(dot_count > 1)\n        \
    \        return \"No\";\n            valid_extension = true;\n            continue;\n\
    \        }\n        if(dot_count == 0)\n        {\n            if(!isAlpha(c))\n\
    \                return \"No\";\n            name ~= c;\n        }\n        else\n\
    \        {\n            if(!isAlpha(c))\n                return \"No\";\n    \
    \        extension ~= c;\n        }\n    }\n    if(name.length == 0)\n       \
    \ return \"No\";\n    if(extension.length == 0)\n        return \"No\";\n    if(extension\
    \ != \"txt\" && extension != \"exe\" && extension != \"dll\")\n        return\
    \ \"No\";\n    return \"Yes\";\n}", "{\n    int dot_index = file_name.find('.');\n\
    \    if (dot_index == -1) return \"No\";\n    string before_dot = file_name[0..dot_index];\n\
    \    string after_dot = file_name[dot_index+1..$];\n    if (before_dot.length\
    \ == 0) return \"No\";\n    if (before_dot.length == 1 && !isAlpha(before_dot[0]))\
    \ return \"No\";\n    if (before_dot.length > 1 && !isAlpha(before_dot[0])) return\
    \ \"No\";\n    if (before_dot.length > 1 && !isAlpha(before_dot[1])) return \"\
    No\";\n    if (after_dot != \"txt\" && after_dot != \"exe\" && after_dot != \"\
    dll\") return \"No\";\n    int num_digits = 0;\n    foreach (c; before_dot) {\n\
    \        if (isDigit(c)) num_digits++;\n    }\n    if (num_digits > 3) return\
    \ \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\"\
    , \"exe\", \"dll\"];\n    int dot_index = file_name.find('.');\n    string extension\
    \ = file_name.slice(dot_index + 1);\n    string name = file_name.slice(0, dot_index);\n\
    \    int digits_count = 0;\n    foreach(char c; name)\n    {\n        if(c >=\
    \ '0' && c <= '9')\n        {\n            digits_count++;\n        }\n    }\n\
    \    if(digits_count > 3)\n    {\n        return \"No\";\n    }\n    if(!(name[0]\
    \ >= 'a' && name[0] <= 'z') && !(name[0] >= 'A' && name[0] <= 'Z'))\n    {\n \
    \       return \"No\";\n    }\n    if(!(extension in valid_extensions))\n    {\n\
    \        return \"No\";\n    }\n    return \"Yes\";\n}", "{\n    int dot_pos =\
    \ file_name.find('.');\n    string ext = file_name.substr(dot_pos + 1);\n    string\
    \ name = file_name.substr(0, dot_pos);\n    int digits = 0;\n    foreach(c; name)\n\
    \    {\n        if(c >= '0' && c <= '9')\n            digits++;\n    }\n    if(digits\
    \ > 3)\n        return \"No\";\n    if(ext != \"txt\" && ext != \"exe\" && ext\
    \ != \"dll\")\n        return \"No\";\n    if(name.length == 0)\n        return\
    \ \"No\";\n    if(!(name[0] >= 'a' && name[0] <= 'z') && !(name[0] >= 'A' && name[0]\
    \ <= 'Z'))\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[]\
    \ valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts\
    \ = split(file_name, \".\");\n    if (file_name_parts.length != 2)\n        return\
    \ \"No\";\n    if (file_name_parts[0].length == 0)\n        return \"No\";\n \
    \   if (file_name_parts[0].length != count(file_name_parts[0], ch => ch.isLetter))\n\
    \        return \"No\";\n    if (file_name_parts[0].length != count(file_name_parts[0],\
    \ ch => ch.isDigit))\n        return \"No\";\n    if (file_name_parts[0].length\
    \ > 3)\n        return \"No\";\n    if (valid_extensions.indexOf(file_name_parts[1])\
    \ == -1)\n        return \"No\";\n    return \"Yes\";\n}\n/*\nCreate a function\
    \ which takes a string representing a file's name, and returns\n    'Yes' if the\
    \ the file's name is valid, and returns 'No' otherwise.\n    A file's name is\
    \ considered to be valid if and only if all the following conditions \n    are\
    \ met:\n    - There should not be more than three digits ('0'-'9') in the file's\
    \ name.\n    - The file's name contains exactly one dot '.'\n    - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n    the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    >>> file_name_check(\"\
    example.txt\")\n    \"Yes\"\n    >>> file_name_check(\"1example.dll\")\n    \"\
    No\"\n    \n*/\nstring file_name_check(string file_name) \n{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts = split(file_name,\
    \ \".\");\n    if (file_name_parts.length != 2)\n        return \"No\";\n    if\
    \ (file_name_", "{\n    int count = 0;\n    int dot_count = 0;\n    string ext\
    \ = \"\";\n    string ext_list[] = [\"txt\", \"exe\", \"dll\"];\n    foreach(c;\
    \ file_name)\n    {\n        if(c.isDigit)\n        {\n            count++;\n\
    \        }\n        if(c == '.')\n        {\n            dot_count++;\n      \
    \  }\n    }\n    if(count > 3 || dot_count != 1)\n    {\n        return \"No\"\
    ;\n    }\n    else\n    {\n        ext = file_name.split('.')[1];\n        if(ext\
    \ in ext_list)\n        {\n            return \"Yes\";\n        }\n        else\n\
    \        {\n            return \"No\";\n        }\n    }\n}", "{\n    string[]\
    \ valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    int dot_index = file_name.find('.');\n\
    \    if (dot_index == -1)\n        return \"No\";\n    string name = file_name[0..dot_index];\n\
    \    string extension = file_name[dot_index+1..$];\n    if (name.count('0'..'9')\
    \ > 3)\n        return \"No\";\n    if (name.length == 0)\n        return \"No\"\
    ;\n    if (!(name[0] in 'a'..'z' || name[0] in 'A'..'Z'))\n        return \"No\"\
    ;\n    if (!(extension in valid_extensions))\n        return \"No\";\n    return\
    \ \"Yes\";\n}", "{\n    // your code here\n    int dot_count = 0;\n    int digit_count\
    \ = 0;\n    foreach(c; file_name)\n    {\n        if(c == '.')\n            dot_count++;\n\
    \        if(c >= '0' && c <= '9')\n            digit_count++;\n    }\n    if(dot_count\
    \ != 1 || digit_count > 3)\n        return \"No\";\n    string[] parts = file_name.split(\"\
    .\");\n    if(parts[0].length == 0 || parts[0][0] < 'a' || parts[0][0] > 'z')\n\
    \        return \"No\";\n    if(parts[1] != \"txt\" && parts[1] != \"exe\" &&\
    \ parts[1] != \"dll\")\n        return \"No\";\n    return \"Yes\";\n}", "{\n\
    \    int dot_index = file_name.find('.');\n    string extension = file_name.substr(dot_index+1);\n\
    \    string name = file_name.substr(0, dot_index);\n    int digit_count = 0;\n\
    \    foreach(char c; name)\n    {\n        if(c >= '0' && c <= '9')\n        \
    \    digit_count++;\n    }\n    if(digit_count > 3)\n        return \"No\";\n\
    \    if(extension != \"txt\" && extension != \"exe\" && extension != \"dll\")\n\
    \        return \"No\";\n    if(name.length == 0)\n        return \"No\";\n  \
    \  if(!(name[0] >= 'a' && name[0] <= 'z') && !(name[0] >= 'A' && name[0] <= 'Z'))\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    int dot_index = file_name.find('.');\n\
    \    string extension = file_name.substr(dot_index + 1);\n    string name = file_name.substr(0,\
    \ dot_index);\n    int digits = 0;\n    foreach(char c; name)\n    {\n       \
    \ if(c >= '0' && c <= '9')\n            digits++;\n    }\n    if(digits > 3)\n\
    \        return \"No\";\n    if(extension != \"txt\" && extension != \"exe\" &&\
    \ extension != \"dll\")\n        return \"No\";\n    if(name.length == 0)\n  \
    \      return \"No\";\n    if(!(name[0] >= 'a' && name[0] <= 'z') && !(name[0]\
    \ >= 'A' && name[0] <= 'Z'))\n        return \"No\";\n    return \"Yes\";\n}\n\
    /*\nCreate a function which takes a string representing a file's name, and returns\n\
    \    the file's extension.\n    A file's extension is the substring after the\
    \ last dot '.' in the file's name.\n    If the file's name does not contain a\
    \ dot, return an empty string.\n    Examples:\n    >>> file_extension(\"example.txt\"\
    )\n    \"txt\"\n    >>> file_extension(\"example\")\n    \"\"\n*/\nstring file_extension(string\
    \ file_name) \n{\n    int dot_index = file_name.find('.');\n    if(dot_index ==\
    \ -1)\n        return \"\";\n    return file_name.substr(dot_index + 1);\n}\n\
    /*\nCreate a function which takes a string representing a file's name, and returns\n\
    \    the file's name without its extension.\n    A file's extension is the substring\
    \ after the last dot '.' in the file's name.\n    If the file's name does not\
    \ contain a dot, return the file's name unchanged.\n    Examples:\n    >>> file_name_without_extension(\"\
    example.txt\")\n    \"example\"\n    >>> file_name_without_extension(\"example\"\
    )\n    \"example\"\n*/\nstring file_name_without_extension(string file_name) \n\
    {", "{\n    // check if there are more than 3 digits\n    int count = 0;\n   \
    \ foreach(c; file_name)\n    {\n        if(c >= '0' && c <= '9')\n           \
    \ count++;\n    }\n    if(count > 3)\n        return \"No\";\n    // check if\
    \ there is exactly one dot\n    int dot_count = 0;\n    foreach(c; file_name)\n\
    \    {\n        if(c == '.')\n            dot_count++;\n    }\n    if(dot_count\
    \ != 1)\n        return \"No\";\n    // check if the substring before the dot\
    \ starts with a letter\n    // and if the substring after the dot is one of the\
    \ valid extensions\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"\
    ];\n    string[] file_name_split = file_name.split(\".\");\n    if(file_name_split[0].length\
    \ == 0)\n        return \"No\";\n    if(file_name_split[0][0] < 'a' || file_name_split[0][0]\
    \ > 'z' &&\n       file_name_split[0][0] < 'A' || file_name_split[0][0] > 'Z')\n\
    \        return \"No\";\n    if(!valid_extensions.contains(file_name_split[1]))\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    int dot_index = file_name.find('.');\n\
    \    if (dot_index == -1)\n        return \"No\";\n    string before_dot = file_name[0..dot_index];\n\
    \    string after_dot = file_name[dot_index+1..$];\n    if (before_dot.length\
    \ == 0 || !isAlpha(before_dot[0]))\n        return \"No\";\n    int digits_count\
    \ = 0;\n    foreach (c; before_dot)\n    {\n        if (isDigit(c))\n        \
    \    digits_count++;\n    }\n    if (digits_count > 3)\n        return \"No\"\
    ;\n    if (after_dot != \"txt\" && after_dot != \"exe\" && after_dot != \"dll\"\
    )\n        return \"No\";\n    return \"Yes\";\n}", "{\n    int dot_index = file_name.find('.');\n\
    \    if (dot_index == -1)\n        return \"No\";\n    string before_dot = file_name[0..dot_index];\n\
    \    string after_dot = file_name[dot_index+1..$];\n    if (before_dot.length\
    \ == 0)\n        return \"No\";\n    if (after_dot != \"txt\" && after_dot !=\
    \ \"exe\" && after_dot != \"dll\")\n        return \"No\";\n    int digits_count\
    \ = 0;\n    foreach (c; before_dot)\n    {\n        if ('0' <= c && c <= '9')\n\
    \            digits_count++;\n    }\n    if (digits_count > 3)\n        return\
    \ \"No\";\n    if ('a' <= before_dot[0] && before_dot[0] <= 'z')\n        return\
    \ \"Yes\";\n    if ('A' <= before_dot[0] && before_dot[0] <= 'Z')\n        return\
    \ \"Yes\";\n    return \"No\";\n}", "{\n    string[] valid_extensions = [\"txt\"\
    , \"exe\", \"dll\"];\n    int dot_index = file_name.find('.');\n    string extension\
    \ = file_name.substr(dot_index + 1);\n    string name = file_name.substr(0, dot_index);\n\
    \    int digits_count = 0;\n    foreach(c; name)\n    {\n        if(c >= '0' &&\
    \ c <= '9')\n            digits_count++;\n    }\n    if(digits_count > 3 || dot_index\
    \ == -1 || name.length == 0 || !(name[0] >= 'a' && name[0] <= 'z' || name[0] >=\
    \ 'A' && name[0] <= 'Z'))\n        return \"No\";\n    foreach(ext; valid_extensions)\n\
    \    {\n        if(ext == extension)\n            return \"Yes\";\n    }\n   \
    \ return \"No\";\n}", "{\n    int count = 0;\n    int dot_count = 0;\n    int\
    \ dot_index = 0;\n    int dot_index_2 = 0;\n    int dot_index_3 = 0;\n    int\
    \ dot_index_4 = 0;\n    int dot_index_5 = 0;\n    int dot_index_6 = 0;\n    int\
    \ dot_index_7 = 0;\n    int dot_index_8 = 0;\n    int dot_index_9 = 0;\n    int\
    \ dot_index_10 = 0;\n    int dot_index_11 = 0;\n    int dot_index_12 = 0;\n  \
    \  int dot_index_13 = 0;\n    int dot_index_14 = 0;\n    int dot_index_15 = 0;\n\
    \    int dot_index_16 = 0;\n    int dot_index_17 = 0;\n    int dot_index_18 =\
    \ 0;\n    int dot_index_19 = 0;\n    int dot_index_20 = 0;\n    int dot_index_21\
    \ = 0;\n    int dot_index_22 = 0;\n    int dot_index_23 = 0;\n    int dot_index_24\
    \ = 0;\n    int dot_index_25 = 0;\n    int dot_index_26 = 0;\n    int dot_index_27\
    \ = 0;\n    int dot_index_28 = 0;\n    int dot_index_29 = 0;\n    int dot_index_30\
    \ = 0;\n    int dot_index_31 = 0;\n    int dot_index_32 = 0;\n    int dot_index_33\
    \ = 0;\n    int dot_index_34 = 0;\n    int dot_index_35 = 0;\n    int dot_index_36\
    \ = 0;\n    int dot_index_37 = 0;\n    int dot_index_38 = 0;\n    int dot_index_39\
    \ = 0;\n    int dot_index_40 = 0;\n    int dot_index_41 = 0;\n    int dot_index_42\
    \ = 0;\n    int dot_index_43 = 0;\n    int dot_index_44 = 0;\n    int dot_index_45\
    \ = 0;\n", "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n\
    \    int dot_index = file_name.indexOf('.');\n    if (dot_index == -1) return\
    \ \"No\";\n    string name = file_name[0..dot_index];\n    string extension =\
    \ file_name[dot_index+1..$];\n    if (name.length == 0 || !isAlpha(name[0])) return\
    \ \"No\";\n    if (extension.length == 0 || valid_extensions.indexOf(extension)\
    \ == -1) return \"No\";\n    int digits_count = 0;\n    foreach (c; name)\n  \
    \  {\n        if (isDigit(c)) digits_count++;\n    }\n    if (digits_count > 3)\
    \ return \"No\";\n    return \"Yes\";\n}", "{\n    int count = 0;\n    int dot_count\
    \ = 0;\n    int dot_pos = 0;\n    int len = file_name.length;\n    string file_name_substr;\n\
    \    string file_name_substr_after_dot;\n    string file_name_substr_before_dot;\n\
    \    string[] file_name_substr_after_dot_array = [\"txt\", \"exe\", \"dll\"];\n\
    \    foreach(i; 0..len)\n    {\n        if(file_name[i] == '.')\n        {\n \
    \           dot_count++;\n            dot_pos = i;\n        }\n        if(file_name[i]\
    \ >= '0' && file_name[i] <= '9')\n        {\n            count++;\n        }\n\
    \    }\n    if(count > 3 || dot_count != 1)\n    {\n        return \"No\";\n \
    \   }\n    file_name_substr = file_name[0..dot_pos-1];\n    file_name_substr_after_dot\
    \ = file_name[dot_pos+1..len];\n    if(file_name_substr.length == 0 || !(file_name_substr[0]\
    \ >= 'a' && file_name_substr[0] <= 'z' || file_name_substr[0] >= 'A' && file_name_substr[0]\
    \ <= 'Z'))\n    {\n        return \"No\";\n    }\n    if(!(file_name_substr_after_dot\
    \ == file_name_substr_after_dot_array[0] || file_name_substr_after_dot == file_name_substr_after_dot_array[1]\
    \ || file_name_substr_after_dot == file_name_substr_after_dot_array[2]))\n   \
    \ {\n        return \"No\";\n    }\n    return \"Yes\";\n}", "{\n    int count\
    \ = 0;\n    int dot = 0;\n    int dot_index = 0;\n    int len = file_name.length;\n\
    \    int i = 0;\n    string sub_str = \"\";\n    string sub_str2 = \"\";\n   \
    \ string sub_str3 = \"\";\n    string sub_str4 = \"\";\n    string sub_str5 =\
    \ \"\";\n    string sub_str6 = \"\";\n    string sub_str7 = \"\";\n    string\
    \ sub_str8 = \"\";\n    string sub_str9 = \"\";\n    string sub_str10 = \"\";\n\
    \    string sub_str11 = \"\";\n    string sub_str12 = \"\";\n    string sub_str13\
    \ = \"\";\n    string sub_str14 = \"\";\n    string sub_str15 = \"\";\n    string\
    \ sub_str16 = \"\";\n    string sub_str17 = \"\";\n    string sub_str18 = \"\"\
    ;\n    string sub_str19 = \"\";\n    string sub_str20 = \"\";\n    string sub_str21\
    \ = \"\";\n    string sub_str22 = \"\";\n    string sub_str23 = \"\";\n    string\
    \ sub_str24 = \"\";\n    string sub_str25 = \"\";\n    string sub_str26 = \"\"\
    ;\n    string sub_str27 = \"\";\n    string sub_str28 = \"\";\n    string sub_str29\
    \ = \"\";\n    string sub_str30 = \"\";\n    string sub_str31 = \"\";\n    string\
    \ sub_str32 = \"\";\n    string sub_str33 = \"\";\n    string sub_str34 = \"\"\
    ;\n    string sub_str35 = \"\";\n    string sub_str36 = \"\";\n    string sub_str37\
    \ = \"\";\n    string sub_str38 = \"\";\n    string sub_str39 = \"\";\n    string\
    \ sub_str40 = \"\";\n    string sub_str41 = \"\";\n    string sub_str42 = \"\"\
    ;\n    string sub_str43 = \"\";\n    string sub_str44 = \"\";\n    string sub_str45\
    \ = \"\";\n    string sub_str46 = \"\";\n    string sub_str47 = \"\";", "{\n \
    \   int count = 0;\n    int dot_count = 0;\n    foreach(char c; file_name)\n \
    \   {\n        if(c == '.')\n        {\n            dot_count++;\n        }\n\
    \        if(c >= '0' && c <= '9')\n        {\n            count++;\n        }\n\
    \    }\n    if(count > 3 || dot_count != 1)\n    {\n        return \"No\";\n \
    \   }\n    string[] parts = file_name.split(\".\");\n    if(parts[0].length ==\
    \ 0 || (parts[0][0] < 'a' || parts[0][0] > 'z') && (parts[0][0] < 'A' || parts[0][0]\
    \ > 'Z'))\n    {\n        return \"No\";\n    }\n    if(parts[1] != \"txt\" &&\
    \ parts[1] != \"exe\" && parts[1] != \"dll\")\n    {\n        return \"No\";\n\
    \    }\n    return \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\"\
    , \"exe\", \"dll\"];\n    string[] file_name_parts = file_name.split(\".\");\n\
    \    if (file_name_parts.length != 2)\n        return \"No\";\n    if (file_name_parts[0].length\
    \ == 0)\n        return \"No\";\n    if (file_name_parts[0].count(\"0-9\") > 3)\n\
    \        return \"No\";\n    if (file_name_parts[0][0] < 'a' || file_name_parts[0][0]\
    \ > 'z')\n        return \"No\";\n    if (valid_extensions.find(file_name_parts[1])\
    \ == -1)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    int dot_pos\
    \ = file_name.find('.');\n    string before_dot = file_name[0..dot_pos];\n   \
    \ string after_dot = file_name[dot_pos+1..$];\n    if (before_dot.length == 0\
    \ || before_dot.length == dot_pos)\n        return \"No\";\n    if (after_dot.length\
    \ == 0)\n        return \"No\";\n    if (after_dot != \"txt\" && after_dot !=\
    \ \"exe\" && after_dot != \"dll\")\n        return \"No\";\n    int count = 0;\n\
    \    foreach (c; before_dot)\n    {\n        if (c >= '0' && c <= '9')\n     \
    \       count++;\n    }\n    if (count > 3)\n        return \"No\";\n    if (before_dot[0]\
    \ < 'a' || before_dot[0] > 'z')\n        if (before_dot[0] < 'A' || before_dot[0]\
    \ > 'Z')\n            return \"No\";\n    return \"Yes\";\n}\n/*\nCreate a function\
    \ which takes a string representing a file's name, and returns\n    the file's\
    \ extension.\n    Examples:\n    >>> file_extension(\"example.txt\")\n    \"txt\"\
    \n    >>> file_extension(\"example.exe\")\n    \"exe\"\n*/\nstring file_extension(string\
    \ file_name) \n{\n    int dot_pos = file_name.find('.');\n    return file_name[dot_pos+1..$];\n\
    }\n/*\nCreate a function which takes a string representing a file's name, and\
    \ returns\n    the file's name without the extension.\n    Examples:\n    >>>\
    \ file_name_without_extension(\"example.txt\")\n    \"example\"\n    >>> file_name_without_extension(\"\
    example.exe\")\n    \"example\"\n*/\nstring file_name_without_extension(string\
    \ file_name) \n{\n    int dot_pos = file_name.find('.');\n    return file_name[0..dot_pos-1];\n\
    }\n/*\nCreate a function which takes a string representing a file's name, and\
    \ returns\n   ", "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"\
    ];\n    string[] file_name_parts = split(file_name, \".\");\n    if (file_name_parts.length\
    \ != 2)\n        return \"No\";\n    string file_name_without_extension = file_name_parts[0];\n\
    \    string file_extension = file_name_parts[1];\n    if (file_name_without_extension.length\
    \ == 0)\n        return \"No\";\n    if (file_name_without_extension.length ==\
    \ 1)\n    {\n        if (file_name_without_extension[0] >= 'a' && file_name_without_extension[0]\
    \ <= 'z')\n            return \"Yes\";\n        if (file_name_without_extension[0]\
    \ >= 'A' && file_name_without_extension[0] <= 'Z')\n            return \"Yes\"\
    ;\n        return \"No\";\n    }\n    if (file_name_without_extension.length ==\
    \ 2)\n    {\n        if (file_name_without_extension[0] >= 'a' && file_name_without_extension[0]\
    \ <= 'z')\n            return \"Yes\";\n        if (file_name_without_extension[0]\
    \ >= 'A' && file_name_without_extension[0] <= 'Z')\n            return \"Yes\"\
    ;\n        return \"No\";\n    }\n    if (file_name_without_extension.length ==\
    \ 3)\n    {\n        if (file_name_without_extension[0] >= 'a' && file_name_without_extension[0]\
    \ <= 'z')\n            return \"Yes\";\n        if (file_name_without_extension[0]\
    \ >= 'A' && file_name_without_extension[0] <= 'Z')\n            return \"Yes\"\
    ;\n        return \"No\";\n    }\n    if (file_name_without_extension.length >\
    \ 3)\n        return \"No\";\n    if (file_extension != \"txt\" && file_extension\
    \ != \"exe\" && file_extension != \"dll\")\n        return \"No\";\n", "{\n  \
    \  int dot_count = 0;\n    int digit_count = 0;\n    int dot_index = 0;\n    int\
    \ file_name_length = file_name.length;\n    string file_extension = \"\";\n  \
    \  string file_name_without_extension = \"\";\n    string[] valid_extensions =\
    \ [\"txt\", \"exe\", \"dll\"];\n    bool is_valid_extension = false;\n    bool\
    \ is_valid_file_name = false;\n    for (int i = 0; i < file_name_length; i++)\n\
    \    {\n        if (file_name[i] == '.')\n        {\n            dot_count++;\n\
    \            dot_index = i;\n        }\n        if (file_name[i] >= '0' && file_name[i]\
    \ <= '9')\n        {\n            digit_count++;\n        }\n    }\n    if (dot_count\
    \ == 1 && digit_count <= 3)\n    {\n        file_extension = file_name[dot_index+1..$];\n\
    \        file_name_without_extension = file_name[0..dot_index-1];\n        foreach\
    \ (extension; valid_extensions)\n        {\n            if (extension == file_extension)\n\
    \            {\n                is_valid_extension = true;\n            }\n  \
    \      }\n        if (file_name_without_extension != \"\" && (file_name_without_extension[0]\
    \ >= 'a' && file_name_without_extension[0] <= 'z' || file_name_without_extension[0]\
    \ >= 'A' && file_name_without_extension[0] <= 'Z'))\n        {\n            is_valid_file_name\
    \ = true;\n        }\n    }\n    if (is_valid_file_name && is_valid_extension)\n\
    \    {\n        return \"Yes\";\n    }\n    else\n    {\n        return \"No\"\
    ;\n    }\n}", "{\n    int dot_index = file_name.find('.');\n    if (dot_index\
    \ == -1)\n        return \"No\";\n    string before_dot = file_name[0..dot_index];\n\
    \    string after_dot = file_name[dot_index+1..$];\n    if (before_dot.length\
    \ == 0 || after_dot.length == 0)\n        return \"No\";\n    if (before_dot.length\
    \ - before_dot.count!(c => c >= '0' && c <= '9') > 3)\n        return \"No\";\n\
    \    if (before_dot[0] < 'A' || before_dot[0] > 'z' || (before_dot[0] > 'Z' &&\
    \ before_dot[0] < 'a'))\n        return \"No\";\n    if (after_dot != \"txt\"\
    \ && after_dot != \"exe\" && after_dot != \"dll\")\n        return \"No\";\n \
    \   return \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\", \"exe\"\
    , \"dll\"];\n    int dot_index = file_name.find('.');\n    string extension =\
    \ file_name.substr(dot_index + 1);\n    string name = file_name.substr(0, dot_index);\n\
    \    int digits_count = 0;\n    foreach(char c; name)\n    {\n        if(c >=\
    \ '0' && c <= '9')\n            digits_count++;\n    }\n    if(digits_count >\
    \ 3 || dot_index == -1 || name.length == 0 || \n        !(name[0] >= 'a' && name[0]\
    \ <= 'z' || name[0] >= 'A' && name[0] <= 'Z') || \n        !valid_extensions.canFind(extension))\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    int dot_count = 0;\n\
    \    int digit_count = 0;\n    bool is_valid = true;\n    foreach(c; file_name)\n\
    \    {\n        if(c == '.')\n        {\n            dot_count++;\n        }\n\
    \        else if(c >= '0' && c <= '9')\n        {\n            digit_count++;\n\
    \        }\n    }\n    if(dot_count != 1 || digit_count > 3)\n    {\n        is_valid\
    \ = false;\n    }\n    else\n    {\n        auto parts = file_name.split(\".\"\
    );\n        if(parts.length != 2)\n        {\n            is_valid = false;\n\
    \        }\n        else\n        {\n            auto extension = parts[1];\n\
    \            if(extension != \"txt\" && extension != \"exe\" && extension != \"\
    dll\")\n            {\n                is_valid = false;\n            }\n    \
    \        else\n            {\n                auto name = parts[0];\n        \
    \        if(name.length == 0)\n                {\n                    is_valid\
    \ = false;\n                }\n                else\n                {\n     \
    \               auto first_char = name[0];\n                    if(!(first_char\
    \ >= 'a' && first_char <= 'z') && !(first_char >= 'A' && first_char <= 'Z'))\n\
    \                    {\n                        is_valid = false;\n          \
    \          }\n                }\n            }\n        }\n    }\n    return is_valid\
    \ ? \"Yes\" : \"No\";\n}", "{\n    // Your code goes here\n    int dot_count =\
    \ 0;\n    int digit_count = 0;\n    bool is_valid = true;\n    foreach(c; file_name)\n\
    \    {\n        if(c == '.')\n        {\n            dot_count++;\n        }\n\
    \        else if(c >= '0' && c <= '9')\n        {\n            digit_count++;\n\
    \        }\n    }\n    if(dot_count != 1 || digit_count > 3)\n    {\n        is_valid\
    \ = false;\n    }\n    else\n    {\n        string[] parts = file_name.split(\"\
    .\");\n        if(parts.length != 2)\n        {\n            is_valid = false;\n\
    \        }\n        else\n        {\n            if(parts[0].length == 0 || parts[0][0]\
    \ < 'a' || parts[0][0] > 'z')\n            {\n                is_valid = false;\n\
    \            }\n            else\n            {\n                string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n                if(!valid_extensions.canFind(parts[1]))\n\
    \                {\n                    is_valid = false;\n                }\n\
    \            }\n        }\n    }\n    return is_valid ? \"Yes\" : \"No\";\n}",
  "{\n    int dot_pos = file_name.find('.');\n    if (dot_pos == -1)\n        return\
    \ \"No\";\n    string before_dot = file_name[0..dot_pos];\n    string after_dot\
    \ = file_name[dot_pos+1..$];\n    if (before_dot.length == 0 || before_dot.length\
    \ > 8)\n        return \"No\";\n    if (after_dot.length == 0 || after_dot.length\
    \ > 3)\n        return \"No\";\n    if (after_dot != \"txt\" && after_dot != \"\
    exe\" && after_dot != \"dll\")\n        return \"No\";\n    int num_digits = 0;\n\
    \    foreach (c; before_dot)\n    {\n        if (c >= '0' && c <= '9')\n     \
    \       num_digits++;\n        else if (!(c >= 'a' && c <= 'z') && !(c >= 'A'\
    \ && c <= 'Z'))\n            return \"No\";\n    }\n    if (num_digits > 3)\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    int count = 0;\n   \
    \ int dot_count = 0;\n    int i = 0;\n    int len = file_name.length;\n    string\
    \ extension = \"\";\n    string name = \"\";\n    while(i < len)\n    {\n    \
    \    if(file_name[i] == '.')\n        {\n            dot_count++;\n          \
    \  if(dot_count > 1)\n            {\n                return \"No\";\n        \
    \    }\n            if(i == 0)\n            {\n                return \"No\";\n\
    \            }\n            if(i == len - 1)\n            {\n                return\
    \ \"No\";\n            }\n            extension = file_name[i+1..$];\n       \
    \     name = file_name[0..i-1];\n        }\n        else if(file_name[i] >= '0'\
    \ && file_name[i] <= '9')\n        {\n            count++;\n            if(count\
    \ > 3)\n            {\n                return \"No\";\n            }\n       \
    \ }\n        else if(file_name[i] < 'a' || file_name[i] > 'z')\n        {\n  \
    \          if(file_name[i] < 'A' || file_name[i] > 'Z')\n            {\n     \
    \           return \"No\";\n            }\n        }\n        i++;\n    }\n  \
    \  if(extension != \"txt\" && extension != \"exe\" && extension != \"dll\")\n\
    \    {\n        return \"No\";\n    }\n    return \"Yes\";\n}", "{\n    string[]\
    \ valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    int dot_index = file_name.find(\"\
    .\");\n    string extension = file_name[dot_index+1..$];\n    string name = file_name[0..dot_index-1];\n\
    \    int digits_count = 0;\n    foreach(char c; name)\n    {\n        if(c >=\
    \ '0' && c <= '9')\n            digits_count++;\n    }\n    if(digits_count >\
    \ 3)\n        return \"No\";\n    if(dot_index == -1)\n        return \"No\";\n\
    \    if(name.length == 0)\n        return \"No\";\n    if(!(name[0] >= 'a' &&\
    \ name[0] <= 'z') && !(name[0] >= 'A' && name[0] <= 'Z'))\n        return \"No\"\
    ;\n    if(!valid_extensions.canFind(extension))\n        return \"No\";\n    return\
    \ \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"\
    ];\n    int dot_index = file_name.find(\".\");\n    if (dot_index == -1)\n   \
    \     return \"No\";\n    string extension = file_name[dot_index + 1 .. $];\n\
    \    if (!valid_extensions.canFind(extension))\n        return \"No\";\n    string\
    \ name = file_name[0 .. dot_index];\n    if (name.length == 0)\n        return\
    \ \"No\";\n    int digits_count = 0;\n    foreach (c; name)\n    {\n        if\
    \ (c >= '0' && c <= '9')\n            digits_count++;\n    }\n    if (digits_count\
    \ > 3)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    int dot_index = file_name.find('.');\n \
    \   string extension = file_name.substr(dot_index + 1);\n    string name = file_name.substr(0,\
    \ dot_index);\n    int digits_count = 0;\n    foreach(char c; name)\n    {\n \
    \       if(c >= '0' && c <= '9')\n            digits_count++;\n    }\n    return\
    \ (digits_count <= 3 && dot_index != -1 && name.length > 0 && \n            name[0]\
    \ >= 'a' && name[0] <= 'z' && valid_extensions.find(extension) != -1) ? \"Yes\"\
    \ : \"No\";\n}", "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"\
    ];\n    int dot_index = file_name.find(\".\");\n    string extension = file_name[dot_index\
    \ + 1 .. $];\n    string name = file_name[0 .. dot_index - 1];\n    int digits_count\
    \ = 0;\n    foreach(c; name)\n    {\n        if(isdigit(c))\n        {\n     \
    \       digits_count++;\n        }\n    }\n    if(digits_count > 3)\n    {\n \
    \       return \"No\";\n    }\n    if(!isalpha(name[0]))\n    {\n        return\
    \ \"No\";\n    }\n    if(!valid_extensions.count(extension))\n    {\n        return\
    \ \"No\";\n    }\n    return \"Yes\";\n}", "{\n    int count = 0;\n    int dot_count\
    \ = 0;\n    int dot_pos = 0;\n    int len = file_name.length;\n    string sub1\
    \ = \"\";\n    string sub2 = \"\";\n    string result = \"\";\n    for (int i\
    \ = 0; i < len; i++)\n    {\n        if (file_name[i] >= '0' && file_name[i] <=\
    \ '9')\n        {\n            count++;\n        }\n        if (file_name[i] ==\
    \ '.')\n        {\n            dot_count++;\n            dot_pos = i;\n      \
    \  }\n    }\n    if (count > 3 || dot_count != 1)\n    {\n        result = \"\
    No\";\n    }\n    else\n    {\n        sub1 = file_name[0..dot_pos];\n       \
    \ sub2 = file_name[dot_pos + 1..$];\n        if (sub1.length == 0 || (sub1[0]\
    \ < 'a' || sub1[0] > 'z') && (sub1[0] < 'A' || sub1[0] > 'Z'))\n        {\n  \
    \          result = \"No\";\n        }\n        else\n        {\n            if\
    \ (sub2 != \"txt\" && sub2 != \"exe\" && sub2 != \"dll\")\n            {\n   \
    \             result = \"No\";\n            }\n            else\n            {\n\
    \                result = \"Yes\";\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    int dot_index = file_name.find('.');\n    if (dot_index\
    \ == -1)\n        return \"No\";\n    string before_dot = file_name[0..dot_index];\n\
    \    string after_dot = file_name[dot_index+1..$];\n    if (before_dot.length\
    \ == 0 || !(before_dot[0] >= 'a' && before_dot[0] <= 'z' || before_dot[0] >= 'A'\
    \ && before_dot[0] <= 'Z'))\n        return \"No\";\n    if (after_dot != \"txt\"\
    \ && after_dot != \"exe\" && after_dot != \"dll\")\n        return \"No\";\n \
    \   int digit_count = 0;\n    foreach (c; before_dot)\n    {\n        if (c >=\
    \ '0' && c <= '9')\n            digit_count++;\n    }\n    if (digit_count > 3)\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_split = file_name.split(\"\
    .\");\n    if (file_name_split.length != 2)\n        return \"No\";\n    if (file_name_split[0].length\
    \ == 0)\n        return \"No\";\n    if (file_name_split[0].count(\"0-9\") > 3)\n\
    \        return \"No\";\n    if (!valid_extensions.contains(file_name_split[1]))\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    // your code here\n\
    \    int dot_index = file_name.find(\".\");\n    if (dot_index == -1)\n      \
    \  return \"No\";\n    string prefix = file_name[0..dot_index];\n    string suffix\
    \ = file_name[dot_index + 1..$];\n    if (prefix.length == 0 || !(prefix[0] >=\
    \ 'a' && prefix[0] <= 'z' || prefix[0] >= 'A' && prefix[0] <= 'Z'))\n        return\
    \ \"No\";\n    if (suffix != \"txt\" && suffix != \"exe\" && suffix != \"dll\"\
    )\n        return \"No\";\n    int count = 0;\n    foreach (c; prefix)\n    {\n\
    \        if (c >= '0' && c <= '9')\n            count++;\n    }\n    if (count\
    \ > 3)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    int dot_index\
    \ = file_name.find(\".\");\n    string extension = file_name.substr(dot_index\
    \ + 1);\n    string name = file_name.substr(0, dot_index);\n    int digits = 0;\n\
    \    foreach(char c; name)\n    {\n        if(isdigit(c))\n            digits++;\n\
    \    }\n    if(digits > 3)\n        return \"No\";\n    if(extension != \"txt\"\
    \ && extension != \"exe\" && extension != \"dll\")\n        return \"No\";\n \
    \   if(!isalpha(name[0]))\n        return \"No\";\n    return \"Yes\";\n}", "{\n\
    \    int dot_count = 0;\n    int digit_count = 0;\n    bool is_valid = true;\n\
    \    foreach(char c; file_name)\n    {\n        if(c == '.')\n        {\n    \
    \        dot_count++;\n        }\n        else if(c >= '0' && c <= '9')\n    \
    \    {\n            digit_count++;\n        }\n    }\n    if(dot_count != 1 ||\
    \ digit_count > 3)\n    {\n        is_valid = false;\n    }\n    else\n    {\n\
    \        string[] file_name_parts = file_name.split(\".\");\n        if(file_name_parts.length\
    \ != 2)\n        {\n            is_valid = false;\n        }\n        else\n \
    \       {\n            string file_name_part = file_name_parts[0];\n         \
    \   string file_extension = file_name_parts[1];\n            if(file_name_part.length\
    \ == 0 || !(file_name_part[0] >= 'a' && file_name_part[0] <= 'z') && !(file_name_part[0]\
    \ >= 'A' && file_name_part[0] <= 'Z'))\n            {\n                is_valid\
    \ = false;\n            }\n            else if(file_extension != \"txt\" && file_extension\
    \ != \"exe\" && file_extension != \"dll\")\n            {\n                is_valid\
    \ = false;\n            }\n        }\n    }\n    return is_valid ? \"Yes\" : \"\
    No\";\n}", "{\n    int dot_index = file_name.find('.');\n    string extension\
    \ = file_name.substr(dot_index+1);\n    string name = file_name.substr(0, dot_index);\n\
    \    int digits = 0;\n    for (int i = 0; i < name.length; i++)\n    {\n     \
    \   if (isdigit(name[i]))\n            digits++;\n    }\n    if (digits > 3)\n\
    \        return \"No\";\n    if (extension != \"txt\" && extension != \"exe\"\
    \ && extension != \"dll\")\n        return \"No\";\n    if (name.length == 0)\n\
    \        return \"No\";\n    if (!isalpha(name[0]))\n        return \"No\";\n\
    \    return \"Yes\";\n}\n/*\nCreate a function which takes a string representing\
    \ a file's name, and returns\n    the file's extension.\n    A file's extension\
    \ is the substring after the last dot '.' in the file's name.\n    If the file's\
    \ name doesn't contain a dot, the file's extension is an empty string.\n    Examples:\n\
    \    >>> file_extension(\"example.txt\")\n    \"txt\"\n    >>> file_extension(\"\
    example\")\n    \"\"\n*/\nstring file_extension(string file_name) \n{\n    int\
    \ dot_index = file_name.find('.');\n    if (dot_index == -1)\n        return \"\
    \";\n    return file_name.substr(dot_index+1);\n}\n/*\nCreate a function which\
    \ takes a string representing a file's name, and returns\n    the file's name\
    \ without its extension.\n    A file's extension is the substring after the last\
    \ dot '.' in the file's name.\n    If the file's name doesn't contain a dot, the\
    \ file's extension is an empty string.\n    Examples:\n    >>> file_name_without_extension(\"\
    example.txt\")\n    \"example\"\n    >>> file_name_without_extension(\"example\"\
    )\n    \"example\"\n*/\nstring file_name_without_extension(string file_name) \n\
    {\n    int dot_index = file_name.find('.');\n    if (dot_", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    int dot_index = file_name.find(\".\");\n\
    \    string extension = file_name[dot_index + 1 .. $];\n    string file_name_without_extension\
    \ = file_name[0 .. dot_index - 1];\n    int digits_count = 0;\n    foreach(char\
    \ c; file_name_without_extension)\n    {\n        if(c >= '0' && c <= '9')\n \
    \       {\n            digits_count++;\n        }\n    }\n    if(digits_count\
    \ > 3)\n    {\n        return \"No\";\n    }\n    if(file_name.count(\".\") !=\
    \ 1)\n    {\n        return \"No\";\n    }\n    if(file_name_without_extension.length\
    \ == 0)\n    {\n        return \"No\";\n    }\n    if(!(file_name_without_extension[0]\
    \ >= 'a' && file_name_without_extension[0] <= 'z') &&\n        !(file_name_without_extension[0]\
    \ >= 'A' && file_name_without_extension[0] <= 'Z'))\n    {\n        return \"\
    No\";\n    }\n    if(!valid_extensions.contains(extension))\n    {\n        return\
    \ \"No\";\n    }\n    return \"Yes\";\n}", "{\n    auto dot_pos = file_name.find('.');\n\
    \    if (dot_pos == -1)\n        return \"No\";\n    auto ext = file_name.substr(dot_pos\
    \ + 1);\n    if (ext != \"txt\" && ext != \"exe\" && ext != \"dll\")\n       \
    \ return \"No\";\n    auto name = file_name.substr(0, dot_pos);\n    if (name.length\
    \ == 0)\n        return \"No\";\n    if (name[0] < 'a' || name[0] > 'z' && name[0]\
    \ < 'A' || name[0] > 'Z')\n        return \"No\";\n    int count = 0;\n    for\
    \ (auto c : name)\n        if (c >= '0' && c <= '9')\n            count++;\n \
    \   if (count > 3)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[]\
    \ valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts\
    \ = file_name.split(\".\");\n    if (file_name_parts.length != 2)\n        return\
    \ \"No\";\n    if (file_name_parts[0].length == 0)\n        return \"No\";\n \
    \   if (file_name_parts[0].count(\"0-9\") > 3)\n        return \"No\";\n    if\
    \ (!valid_extensions.contains(file_name_parts[1]))\n        return \"No\";\n \
    \   return \"Yes\";\n}", "{\n    int count = 0;\n    int dot_index = -1;\n   \
    \ int dot_count = 0;\n    foreach(i, c; file_name)\n    {\n        if(c >= '0'\
    \ && c <= '9')\n        {\n            count++;\n        }\n        if(c == '.')\n\
    \        {\n            dot_index = i;\n            dot_count++;\n        }\n\
    \    }\n    if(count > 3 || dot_count != 1)\n    {\n        return \"No\";\n \
    \   }\n    string sub_string = file_name[0..dot_index];\n    if(sub_string.length\
    \ == 0 || !(sub_string[0] >= 'a' && sub_string[0] <= 'z' || sub_string[0] >= 'A'\
    \ && sub_string[0] <= 'Z'))\n    {\n        return \"No\";\n    }\n    sub_string\
    \ = file_name[dot_index+1..$];\n    if(sub_string != \"txt\" && sub_string !=\
    \ \"exe\" && sub_string != \"dll\")\n    {\n        return \"No\";\n    }\n  \
    \  return \"Yes\";\n}", "{\n    auto dot_pos = file_name.find('.');\n    if (dot_pos\
    \ == -1)\n        return \"No\";\n    auto ext = file_name.substr(dot_pos + 1);\n\
    \    if (ext != \"txt\" && ext != \"exe\" && ext != \"dll\")\n        return \"\
    No\";\n    auto name = file_name.substr(0, dot_pos);\n    if (name.length == 0)\n\
    \        return \"No\";\n    if (!isAlpha(name[0]))\n        return \"No\";\n\
    \    if (name.count!(isDigit) > 3)\n        return \"No\";\n    return \"Yes\"\
    ;\n}", "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[]\
    \ file_name_parts = split(file_name, \".\");\n    if (file_name_parts.length !=\
    \ 2)\n        return \"No\";\n    if (file_name_parts[0].length == 0)\n      \
    \  return \"No\";\n    if (file_name_parts[0].count(\"0\", \"9\") > 3)\n     \
    \   return \"No\";\n    if (file_name_parts[0][0] < 'a' || file_name_parts[0][0]\
    \ > 'z')\n        return \"No\";\n    if (file_name_parts[1] !in valid_extensions)\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    int dot_pos = file_name.find(\"\
    .\");\n    string ext = file_name.substr(dot_pos+1);\n    string name = file_name.substr(0,\
    \ dot_pos);\n    int count = 0;\n    foreach(char c; name)\n    {\n        if(c\
    \ >= '0' && c <= '9')\n            count++;\n    }\n    if(count > 3)\n      \
    \  return \"No\";\n    if(ext != \"txt\" && ext != \"exe\" && ext != \"dll\")\n\
    \        return \"No\";\n    if(name.length == 0)\n        return \"No\";\n  \
    \  if(!(name[0] >= 'a' && name[0] <= 'z') && !(name[0] >= 'A' && name[0] <= 'Z'))\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    int count = 0;\n   \
    \ int dot_count = 0;\n    int dot_index = 0;\n    int len = file_name.length;\n\
    \    string sub_string_before_dot = \"\";\n    string sub_string_after_dot = \"\
    \";\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    for (int\
    \ i = 0; i < len; i++)\n    {\n        if (file_name[i] >= '0' && file_name[i]\
    \ <= '9')\n        {\n            count++;\n        }\n        if (file_name[i]\
    \ == '.')\n        {\n            dot_count++;\n            dot_index = i;\n \
    \       }\n    }\n    if (count > 3 || dot_count != 1)\n    {\n        return\
    \ \"No\";\n    }\n    sub_string_before_dot = file_name[0..dot_index];\n    sub_string_after_dot\
    \ = file_name[dot_index+1..$];\n    if (sub_string_before_dot == \"\" || (sub_string_before_dot[0]\
    \ < 'a' || sub_string_before_dot[0] > 'z') && (sub_string_before_dot[0] < 'A'\
    \ || sub_string_before_dot[0] > 'Z'))\n    {\n        return \"No\";\n    }\n\
    \    if (valid_extensions.find(sub_string_after_dot) == -1)\n    {\n        return\
    \ \"No\";\n    }\n    return \"Yes\";\n}", "{\n    int dot_index = file_name.find('.');\n\
    \    string extension = file_name.substr(dot_index + 1);\n    string name = file_name.substr(0,\
    \ dot_index);\n    int count = 0;\n    foreach(char c; name)\n    {\n        if(c\
    \ >= '0' && c <= '9')\n            count++;\n    }\n    if(count > 3)\n      \
    \  return \"No\";\n    if(extension != \"txt\" && extension != \"exe\" && extension\
    \ != \"dll\")\n        return \"No\";\n    if(name.length == 0)\n        return\
    \ \"No\";\n    if(name[0] < 'a' || name[0] > 'z' && name[0] < 'A' || name[0] >\
    \ 'Z')\n        return \"No\";\n    return \"Yes\";\n}", "{\n    int dot_index\
    \ = file_name.find('.');\n    string extension = file_name.substr(dot_index +\
    \ 1);\n    string name = file_name.substr(0, dot_index);\n    int digits = 0;\n\
    \    foreach(char c; name)\n    {\n        if(c >= '0' && c <= '9')\n        \
    \    digits++;\n    }\n    if(digits > 3)\n        return \"No\";\n    if(extension\
    \ != \"txt\" && extension != \"exe\" && extension != \"dll\")\n        return\
    \ \"No\";\n    if(name.length == 0)\n        return \"No\";\n    if(name[0] <\
    \ 'a' || name[0] > 'z' && name[0] < 'A' || name[0] > 'Z')\n        return \"No\"\
    ;\n    return \"Yes\";\n}", "{\n    int dot_index = file_name.find('.');\n   \
    \ if (dot_index == -1)\n        return \"No\";\n    string ext = file_name.substr(dot_index\
    \ + 1);\n    if (ext != \"txt\" && ext != \"exe\" && ext != \"dll\")\n       \
    \ return \"No\";\n    string name = file_name.substr(0, dot_index);\n    if (name.length\
    \ == 0)\n        return \"No\";\n    int digits = 0;\n    foreach (c; name)\n\
    \    {\n        if (c >= '0' && c <= '9')\n            digits++;\n        else\
    \ if (!(c >= 'a' && c <= 'z') && !(c >= 'A' && c <= 'Z'))\n            return\
    \ \"No\";\n    }\n    if (digits > 3)\n        return \"No\";\n    return \"Yes\"\
    ;\n}", "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[]\
    \ file_name_parts = file_name.split(\".\");\n    if (file_name_parts.length !=\
    \ 2)\n        return \"No\";\n    if (file_name_parts[0].length == 0)\n      \
    \  return \"No\";\n    if (file_name_parts[0].count(\"0-9\") > 3)\n        return\
    \ \"No\";\n    if (file_name_parts[0][0] < 'a' || file_name_parts[0][0] > 'z')\n\
    \        return \"No\";\n    if (file_name_parts[1] !in valid_extensions)\n  \
    \      return \"No\";\n    return \"Yes\";\n}", "{\n    int count = 0;\n    int\
    \ dot_count = 0;\n    int dot_index = 0;\n    int dot_index_2 = 0;\n    int dot_index_3\
    \ = 0;\n    int dot_index_4 = 0;\n    int dot_index_5 = 0;\n    int dot_index_6\
    \ = 0;\n    int dot_index_7 = 0;\n    int dot_index_8 = 0;\n    int dot_index_9\
    \ = 0;\n    int dot_index_10 = 0;\n    int dot_index_11 = 0;\n    int dot_index_12\
    \ = 0;\n    int dot_index_13 = 0;\n    int dot_index_14 = 0;\n    int dot_index_15\
    \ = 0;\n    int dot_index_16 = 0;\n    int dot_index_17 = 0;\n    int dot_index_18\
    \ = 0;\n    int dot_index_19 = 0;\n    int dot_index_20 = 0;\n    int dot_index_21\
    \ = 0;\n    int dot_index_22 = 0;\n    int dot_index_23 = 0;\n    int dot_index_24\
    \ = 0;\n    int dot_index_25 = 0;\n    int dot_index_26 = 0;\n    int dot_index_27\
    \ = 0;\n    int dot_index_28 = 0;\n    int dot_index_29 = 0;\n    int dot_index_30\
    \ = 0;\n    int dot_index_31 = 0;\n    int dot_index_32 = 0;\n    int dot_index_33\
    \ = 0;\n    int dot_index_34 = 0;\n    int dot_index_35 = 0;\n    int dot_index_36\
    \ = 0;\n    int dot_index_37 = 0;\n    int dot_index_38 = 0;\n    int dot_index_39\
    \ = 0;\n    int dot_index_40 = 0;\n    int dot_index_41 = 0;\n    int dot_index_42\
    \ = 0;\n    int dot_index_43 = 0;\n    int dot_index_44 = 0;\n    int dot_index_45\
    \ = 0;\n", "{\n    int dot_index = file_name.find('.');\n    string extension\
    \ = file_name.substr(dot_index+1);\n    string name = file_name.substr(0, dot_index);\n\
    \    int digits = 0;\n    foreach(char c; name)\n    {\n        if(c >= '0' &&\
    \ c <= '9')\n            digits++;\n    }\n    if(digits > 3)\n        return\
    \ \"No\";\n    if(extension != \"txt\" && extension != \"exe\" && extension !=\
    \ \"dll\")\n        return \"No\";\n    if(name.length == 0)\n        return \"\
    No\";\n    if(name[0] < 'a' || name[0] > 'z' && name[0] < 'A' || name[0] > 'Z')\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    int dot_count = 0;\n\
    \    int digit_count = 0;\n    int dot_index = 0;\n    int file_name_length =\
    \ file_name.length;\n    int i = 0;\n    string extension = \"\";\n    string\
    \ valid_extensions[] = [\"txt\", \"exe\", \"dll\"];\n    string valid_extensions_length\
    \ = valid_extensions.length;\n    string valid_extensions_index = 0;\n    string\
    \ valid_extension = \"\";\n    string valid_extension_length = 0;\n    string\
    \ valid_extension_index = 0;\n    string valid_extension_found = \"No\";\n   \
    \ string valid_extension_found_index = 0;\n    string valid_extension_found_length\
    \ = 0;\n    string valid_extension_found_char = \"\";\n    string valid_extension_found_char_index\
    \ = 0;\n    string valid_extension_found_char_length = 0;\n    string valid_extension_found_char_found\
    \ = \"No\";\n    string valid_extension_found_char_found_index = 0;\n    string\
    \ valid_extension_found_char_found_length = 0;\n    string valid_extension_found_char_found_char\
    \ = \"\";\n    string valid_extension_found_char_found_char_index = 0;\n    string\
    \ valid_extension_found_char_found_char_length = 0;\n    string valid_extension_found_char_found_char_found\
    \ = \"No\";\n    string valid_extension_found_char_found_char_found_index = 0;\n\
    \    string valid_extension_found_char_found_char_found_length = 0;\n    string\
    \ valid_extension_found_char_found_char_found_char = \"\";\n    string valid_extension_found_char_found_char_found_char_index\
    \ = 0;\n    string valid_extension_found_char_found_char_found_char_length = 0;\n\
    \    string valid_extension_found_char_found_char_found_char_found = \"No\";\n\
    \    string valid_extension_found_char_found_", "{\n    int count = 0;\n    bool\
    \ valid = true;\n    if (file_name.length < 5)\n        return \"No\";\n    foreach(c;\
    \ file_name)\n    {\n        if (c == '.')\n            count++;\n        if (count\
    \ > 1)\n            return \"No\";\n    }\n    if (count == 0)\n        return\
    \ \"No\";\n    int dot_index = file_name.indexOf('.');\n    string sub_str = file_name[0..dot_index];\n\
    \    if (sub_str.length == 0)\n        return \"No\";\n    foreach(c; sub_str)\n\
    \    {\n        if (c >= '0' && c <= '9')\n            valid = false;\n    }\n\
    \    if (!valid)\n        return \"No\";\n    sub_str = file_name[dot_index+1..$];\n\
    \    if (sub_str != \"txt\" && sub_str != \"exe\" && sub_str != \"dll\")\n   \
    \     return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    int dot_index = file_name.find(\".\");\n\
    \    string extension = file_name[dot_index+1..$];\n    string name = file_name[0..dot_index-1];\n\
    \    int digits_count = 0;\n    foreach(c; name)\n    {\n        if(c.isDigit)\n\
    \            digits_count++;\n    }\n    if(digits_count > 3)\n        return\
    \ \"No\";\n    if(extension !in valid_extensions)\n        return \"No\";\n  \
    \  if(name.length == 0)\n        return \"No\";\n    if(!name[0].isLetter)\n \
    \       return \"No\";\n    return \"Yes\";\n}", "{\n    int dot_index = file_name.find('.');\n\
    \    string extension = file_name.substr(dot_index + 1);\n    string name = file_name.substr(0,\
    \ dot_index);\n    int count = 0;\n    foreach(char c; name)\n    {\n        if(c\
    \ >= '0' && c <= '9')\n            count++;\n    }\n    if(count > 3)\n      \
    \  return \"No\";\n    if(name.length == 0)\n        return \"No\";\n    if(!(name[0]\
    \ >= 'a' && name[0] <= 'z') && !(name[0] >= 'A' && name[0] <= 'Z'))\n        return\
    \ \"No\";\n    if(extension != \"txt\" && extension != \"exe\" && extension !=\
    \ \"dll\")\n        return \"No\";\n    return \"Yes\";\n}", "{\n    int dot_pos\
    \ = file_name.find('.');\n    string ext = file_name.substr(dot_pos + 1);\n  \
    \  string name = file_name.substr(0, dot_pos);\n    if (ext != \"txt\" && ext\
    \ != \"exe\" && ext != \"dll\")\n        return \"No\";\n    if (name.length ==\
    \ 0)\n        return \"No\";\n    if (name[0] < 'a' || name[0] > 'z' && name[0]\
    \ < 'A' || name[0] > 'Z')\n        return \"No\";\n    int digits = 0;\n    foreach\
    \ (c; name)\n    {\n        if (c >= '0' && c <= '9')\n            digits++;\n\
    \    }\n    if (digits > 3)\n        return \"No\";\n    return \"Yes\";\n}",
  "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_split\
    \ = file_name.split(\".\");\n    string file_name_extension = file_name_split[1];\n\
    \    string file_name_no_extension = file_name_split[0];\n    int digits_count\
    \ = 0;\n    foreach(char c; file_name_no_extension)\n    {\n        if(c >= '0'\
    \ && c <= '9')\n        {\n            digits_count++;\n        }\n    }\n   \
    \ if(digits_count > 3)\n    {\n        return \"No\";\n    }\n    if(!(file_name_no_extension[0]\
    \ >= 'a' && file_name_no_extension[0] <= 'z') && !(file_name_no_extension[0] >=\
    \ 'A' && file_name_no_extension[0] <= 'Z'))\n    {\n        return \"No\";\n \
    \   }\n    if(file_name_extension != valid_extensions[0] && file_name_extension\
    \ != valid_extensions[1] && file_name_extension != valid_extensions[2])\n    {\n\
    \        return \"No\";\n    }\n    return \"Yes\";\n}", "{\n    // Your code\
    \ here\n    //return \"Yes\";\n    int dot_count = 0;\n    int digit_count = 0;\n\
    \    int file_name_length = file_name.length;\n    foreach(i; 0..file_name_length)\n\
    \    {\n        if(file_name[i] == '.')\n        {\n            dot_count++;\n\
    \        }\n        if(file_name[i] >= '0' && file_name[i] <= '9')\n        {\n\
    \            digit_count++;\n        }\n    }\n    if(digit_count > 3)\n    {\n\
    \        return \"No\";\n    }\n    if(dot_count != 1)\n    {\n        return\
    \ \"No\";\n    }\n    int dot_index = file_name.indexOf('.');\n    string file_name_before_dot\
    \ = file_name[0..dot_index];\n    string file_name_after_dot = file_name[dot_index+1..$];\n\
    \    if(file_name_before_dot.length == 0)\n    {\n        return \"No\";\n   \
    \ }\n    if(file_name_before_dot[0] < 'a' || file_name_before_dot[0] > 'z')\n\
    \    {\n        if(file_name_before_dot[0] < 'A' || file_name_before_dot[0] >\
    \ 'Z')\n        {\n            return \"No\";\n        }\n    }\n    if(file_name_after_dot\
    \ != \"txt\" && file_name_after_dot != \"exe\" && file_name_after_dot != \"dll\"\
    )\n    {\n        return \"No\";\n    }\n    return \"Yes\";\n}", "{\n    string[]\
    \ valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts\
    \ = file_name.split(\".\");\n    if (file_name_parts.length != 2)\n        return\
    \ \"No\";\n    if (file_name_parts[0].length == 0)\n        return \"No\";\n \
    \   if (file_name_parts[0].count(\"0-9\") > 3)\n        return \"No\";\n    if\
    \ (!valid_extensions.contains(file_name_parts[1]))\n        return \"No\";\n \
    \   return \"Yes\";\n}", "{\n    // Your code goes here\n    int count = 0;\n\
    \    int dot_count = 0;\n    int dot_index = 0;\n    int i = 0;\n    int j = 0;\n\
    \    string sub_string = \"\";\n    string sub_string2 = \"\";\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    foreach(char c; file_name)\n    {\n    \
    \    if(c >= '0' && c <= '9')\n        {\n            count++;\n        }\n  \
    \      if(c == '.')\n        {\n            dot_count++;\n            dot_index\
    \ = i;\n        }\n        i++;\n    }\n    if(count > 3 || dot_count != 1)\n\
    \    {\n        return \"No\";\n    }\n    sub_string = file_name[0..dot_index];\n\
    \    sub_string2 = file_name[dot_index+1..$];\n    if(sub_string.length == 0 ||\
    \ (sub_string[0] < 'a' || sub_string[0] > 'z') && (sub_string[0] < 'A' || sub_string[0]\
    \ > 'Z'))\n    {\n        return \"No\";\n    }\n    foreach(string s; valid_extensions)\n\
    \    {\n        if(s == sub_string2)\n        {\n            return \"Yes\";\n\
    \        }\n    }\n    return \"No\";\n}", "{\n    // TODO: Implement this function\n\
    \    //return \"No\";\n    //return \"Yes\";\n    //return \"\";\n    //return\
    \ \"example.txt\";\n    //return \"1example.dll\";\n    //return \"example.txt\"\
    ;\n    //return \"example.txt\";\n    //return \"example.txt\";\n    //return\
    \ \"example.txt\";\n    //return \"example.txt\";\n    //return \"example.txt\"\
    ;\n    //return \"example.txt\";\n    //return \"example.txt\";\n    //return\
    \ \"example.txt\";\n    //return \"example.txt\";\n    //return \"example.txt\"\
    ;\n    //return \"example.txt\";\n    //return \"example.txt\";\n    //return\
    \ \"example.txt\";\n    //return \"example.txt\";\n    //return \"example.txt\"\
    ;\n    //return \"example.txt\";\n    //return \"example.txt\";\n    //return\
    \ \"example.txt\";\n    //return \"example.txt\";\n    //return \"example.txt\"\
    ;\n    //return \"example.txt\";\n    //return \"example.txt\";\n    //return\
    \ \"example.txt\";\n    //return \"example.txt\";\n    //return \"example.txt\"\
    ;\n    //return \"example.txt\";\n    //return \"example.txt\";\n    //return\
    \ \"example.txt\";\n    //return \"example.txt\";\n    //return \"example.txt\"\
    ;\n    //return \"example.txt\";\n    //return \"example.txt\";\n    //return\
    \ \"example.txt\";\n    //return \"example.txt\";\n    //return \"example.txt\"\
    ;\n    //return \"example.txt\";\n    //return \"example.txt\";\n    //return\
    \ \"example.txt\";\n    //return \"example.txt\";\n    //return \"example.txt\"\
    ;\n    //return \"example.txt\";\n    //return \"example.txt\";\n    //return\
    \ \"example.txt\";\n    //return \"example.txt\";\n    //return \"example.txt\"\
    ;\n    //return \"example.txt\";\n    //return \"example.txt\";\n    //return\
    \ \"example.txt\";\n    //return \"example.txt\";\n    //return \"example.txt\"\
    ;\n    //", "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n\
    \    int dot_index = file_name.indexOf('.');\n    if (dot_index == -1)\n     \
    \   return \"No\";\n    string extension = file_name.substr(dot_index + 1);\n\
    \    if (valid_extensions.indexOf(extension) == -1)\n        return \"No\";\n\
    \    string name = file_name.substr(0, dot_index);\n    if (name.length == 0)\n\
    \        return \"No\";\n    if (name[0] < 'a' || name[0] > 'z' && name[0] < 'A'\
    \ || name[0] > 'Z')\n        return \"No\";\n    int digits_count = 0;\n    foreach\
    \ (c; name)\n    {\n        if (c >= '0' && c <= '9')\n            digits_count++;\n\
    \    }\n    if (digits_count > 3)\n        return \"No\";\n    return \"Yes\"\
    ;\n}", "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    int\
    \ dot_index = file_name.find(\".\");\n    if (dot_index == -1)\n        return\
    \ \"No\";\n    string extension = file_name[dot_index + 1 .. $];\n    if (extension.length\
    \ == 0 || !valid_extensions.canFind(extension))\n        return \"No\";\n    string\
    \ name = file_name[0 .. dot_index];\n    if (name.length == 0)\n        return\
    \ \"No\";\n    int count = 0;\n    foreach (c; name)\n    {\n        if (c >=\
    \ '0' && c <= '9')\n            count++;\n    }\n    if (count > 3)\n        return\
    \ \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\"\
    , \"exe\", \"dll\"];\n    string[] file_name_parts = split(file_name, \".\");\n\
    \    if (file_name_parts.length != 2)\n        return \"No\";\n    if (file_name_parts[0].length\
    \ == 0)\n        return \"No\";\n    if (file_name_parts[0].count(\"0\", \"9\"\
    ) > 3)\n        return \"No\";\n    if (file_name_parts[0][0] < 'a' || file_name_parts[0][0]\
    \ > 'z')\n        return \"No\";\n    if (valid_extensions.indexOf(file_name_parts[1])\
    \ == -1)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    int dot_index = file_name.find(\".\");\n\
    \    string extension = file_name[dot_index + 1 .. $];\n    string name = file_name[0\
    \ .. dot_index - 1];\n    int digit_count = 0;\n    foreach(c; name)\n    {\n\
    \        if(c >= '0' && c <= '9')\n        {\n            digit_count++;\n   \
    \     }\n    }\n    if(digit_count > 3)\n    {\n        return \"No\";\n    }\n\
    \    if(!(name[0] >= 'a' && name[0] <= 'z') && !(name[0] >= 'A' && name[0] <=\
    \ 'Z'))\n    {\n        return \"No\";\n    }\n    if(!valid_extensions.canFind(extension))\n\
    \    {\n        return \"No\";\n    }\n    return \"Yes\";\n}", "{\n    int dot_count\
    \ = 0;\n    int digit_count = 0;\n    int dot_index = 0;\n    int file_name_length\
    \ = file_name.length;\n    string file_extension = \"\";\n    string valid_extensions[]\
    \ = [\"txt\", \"exe\", \"dll\"];\n    bool is_valid = true;\n    for (int i =\
    \ 0; i < file_name_length; i++)\n    {\n        if (file_name[i] == '.')\n   \
    \     {\n            dot_count++;\n            dot_index = i;\n        }\n   \
    \     else if (file_name[i] >= '0' && file_name[i] <= '9')\n        {\n      \
    \      digit_count++;\n        }\n    }\n    if (dot_count != 1 || digit_count\
    \ > 3)\n    {\n        is_valid = false;\n    }\n    else\n    {\n        file_extension\
    \ = file_name[dot_index+1..file_name_length];\n        if (file_extension.length\
    \ == 0 || !(file_name[0] >= 'a' && file_name[0] <= 'z' || file_name[0] >= 'A'\
    \ && file_name[0] <= 'Z'))\n        {\n            is_valid = false;\n       \
    \ }\n        else\n        {\n            for (int i = 0; i < valid_extensions.length;\
    \ i++)\n            {\n                if (file_extension == valid_extensions[i])\n\
    \                {\n                    is_valid = true;\n                   \
    \ break;\n                }\n                else\n                {\n       \
    \             is_valid = false;\n                }\n            }\n        }\n\
    \    }\n    if (is_valid)\n    {\n        return \"Yes\";\n    }\n    else\n \
    \   {\n        return \"No\";\n    }\n}", "{\n    int count = 0;\n    int dot_count\
    \ = 0;\n    bool valid = true;\n    foreach(char c; file_name)\n    {\n      \
    \  if(c == '.')\n        {\n            dot_count++;\n        }\n        if(c\
    \ >= '0' && c <= '9')\n        {\n            count++;\n        }\n    }\n   \
    \ if(count > 3 || dot_count != 1)\n    {\n        valid = false;\n    }\n    else\n\
    \    {\n        int dot_index = file_name.indexOf('.');\n        string sub_string\
    \ = file_name[0..dot_index];\n        if(sub_string.length == 0 || !(sub_string[0]\
    \ >= 'a' && sub_string[0] <= 'z') && !(sub_string[0] >= 'A' && sub_string[0] <=\
    \ 'Z'))\n        {\n            valid = false;\n        }\n        else\n    \
    \    {\n            sub_string = file_name[dot_index+1..$];\n            if(sub_string\
    \ != \"txt\" && sub_string != \"exe\" && sub_string != \"dll\")\n            {\n\
    \                valid = false;\n            }\n        }\n    }\n    if(valid)\n\
    \    {\n        return \"Yes\";\n    }\n    else\n    {\n        return \"No\"\
    ;\n    }\n}", "{\n    int dot_index = file_name.find(\".\");\n    string extension\
    \ = file_name.substr(dot_index+1);\n    string name = file_name.substr(0, dot_index);\n\
    \    int digits = 0;\n    foreach(c; name)\n    {\n        if(c >= '0' && c <=\
    \ '9')\n            digits++;\n    }\n    if(digits > 3)\n        return \"No\"\
    ;\n    if(extension != \"txt\" && extension != \"exe\" && extension != \"dll\"\
    )\n        return \"No\";\n    if(name.length == 0)\n        return \"No\";\n\
    \    if(!(name[0] >= 'a' && name[0] <= 'z') && !(name[0] >= 'A' && name[0] <=\
    \ 'Z'))\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts = split(file_name,\
    \ \".\");\n    if (file_name_parts.length != 2)\n        return \"No\";\n    if\
    \ (file_name_parts[0].length == 0)\n        return \"No\";\n    if (file_name_parts[0].length\
    \ - count(file_name_parts[0], \"0\", \"9\") > 3)\n        return \"No\";\n   \
    \ if (file_name_parts[0][0] < 'a' || file_name_parts[0][0] > 'z' && file_name_parts[0][0]\
    \ < 'A' || file_name_parts[0][0] > 'Z')\n        return \"No\";\n    if (valid_extensions.find(file_name_parts[1])\
    \ == -1)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    int dot_count\
    \ = 0;\n    int digit_count = 0;\n    bool is_valid = true;\n    foreach(c; file_name)\n\
    \    {\n        if(c == '.')\n        {\n            dot_count++;\n        }\n\
    \        else if(c >= '0' && c <= '9')\n        {\n            digit_count++;\n\
    \        }\n    }\n    if(dot_count != 1 || digit_count > 3)\n    {\n        is_valid\
    \ = false;\n    }\n    else\n    {\n        auto dot_index = file_name.indexOf('.');\n\
    \        auto prefix = file_name[0..dot_index];\n        auto suffix = file_name[dot_index+1..$];\n\
    \        if(prefix.length == 0 || !(prefix[0] >= 'a' && prefix[0] <= 'z' || prefix[0]\
    \ >= 'A' && prefix[0] <= 'Z'))\n        {\n            is_valid = false;\n   \
    \     }\n        else if(suffix != \"txt\" && suffix != \"exe\" && suffix != \"\
    dll\")\n        {\n            is_valid = false;\n        }\n    }\n    return\
    \ is_valid ? \"Yes\" : \"No\";\n}", "{\n    string[] valid_extensions = [\"txt\"\
    , \"exe\", \"dll\"];\n    int dot_index = file_name.find('.');\n    if (dot_index\
    \ == -1)\n        return \"No\";\n    string extension = file_name[dot_index+1..$];\n\
    \    if (!valid_extensions.canFind(extension))\n        return \"No\";\n    string\
    \ name = file_name[0..dot_index-1];\n    if (name.length == 0)\n        return\
    \ \"No\";\n    if (!isAlpha(name[0]))\n        return \"No\";\n    int count =\
    \ 0;\n    foreach (c; name)\n    {\n        if (isDigit(c))\n            count++;\n\
    \    }\n    if (count > 3)\n        return \"No\";\n    return \"Yes\";\n}", "{\n\
    \    int dot_index = file_name.find('.');\n    string extension = file_name.substr(dot_index\
    \ + 1);\n    string name = file_name.substr(0, dot_index);\n    int digits = 0;\n\
    \    foreach(c; name)\n    {\n        if(c >= '0' && c <= '9')\n            digits++;\n\
    \    }\n    if(digits > 3)\n        return \"No\";\n    if(extension != \"txt\"\
    \ && extension != \"exe\" && extension != \"dll\")\n        return \"No\";\n \
    \   if(name.length == 0)\n        return \"No\";\n    if(!(name[0] >= 'a' && name[0]\
    \ <= 'z') && !(name[0] >= 'A' && name[0] <= 'Z'))\n        return \"No\";\n  \
    \  return \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\", \"exe\"\
    , \"dll\"];\n    int dot_index = file_name.indexOf('.');\n    string extension\
    \ = file_name.substr(dot_index + 1);\n    string name = file_name.substr(0, dot_index);\n\
    \    int digits_count = 0;\n    foreach(char c; name)\n    {\n        if (c >=\
    \ '0' && c <= '9')\n            digits_count++;\n    }\n    if (digits_count >\
    \ 3 || dot_index == -1 || name.length == 0 || !(name[0] >= 'a' && name[0] <= 'z'\
    \ || name[0] >= 'A' && name[0] <= 'Z'))\n        return \"No\";\n    foreach(string\
    \ ext; valid_extensions)\n    {\n        if (ext == extension)\n            return\
    \ \"Yes\";\n    }\n    return \"No\";\n}", "{\n    auto dot_pos = file_name.find('.');\n\
    \    if (dot_pos == -1)\n        return \"No\";\n    auto before_dot = file_name[0..dot_pos];\n\
    \    auto after_dot = file_name[dot_pos+1..$];\n    if (before_dot.length == 0\
    \ || before_dot.length > 8)\n        return \"No\";\n    if (after_dot != \"txt\"\
    \ && after_dot != \"exe\" && after_dot != \"dll\")\n        return \"No\";\n \
    \   if (before_dot.count!(c => c >= '0' && c <= '9') > 3)\n        return \"No\"\
    ;\n    if (!(before_dot[0] >= 'a' && before_dot[0] <= 'z' || before_dot[0] >=\
    \ 'A' && before_dot[0] <= 'Z'))\n        return \"No\";\n    return \"Yes\";\n\
    }"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
